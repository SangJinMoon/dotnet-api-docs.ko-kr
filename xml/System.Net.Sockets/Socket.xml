<Type Name="Socket" FullName="System.Net.Sockets.Socket">
  <TypeSignature Language="C#" Value="public class Socket : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Socket extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.Socket" />
  <TypeSignature Language="VB.NET" Value="Public Class Socket&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Socket : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="90a67-101">Berkeley 소켓 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-101">Implements the Berkeley sockets interface.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-102"><xref:System.Net.Sockets.Socket> 클래스에서는 네트워크 통신을 위한 다양 한 메서드 및 속성을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-102">The <xref:System.Net.Sockets.Socket> class provides a rich set of methods and properties for network communications.</span></span> <span data-ttu-id="90a67-103"><xref:System.Net.Sockets.Socket> 클래스 수행할 수 있게 둘 다 동기 및 통신 프로토콜 중 하나를 사용 하 여 비동기 데이터 전송에 나열 된는 <xref:System.Net.Sockets.ProtocolType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-103">The <xref:System.Net.Sockets.Socket> class allows you to perform both synchronous and asynchronous data transfer using any of the communication protocols listed in the <xref:System.Net.Sockets.ProtocolType> enumeration.</span></span>  
  
 <span data-ttu-id="90a67-104"><xref:System.Net.Sockets.Socket> 클래스 비동기 메서드에 대 한.NET Framework 명명 패턴을 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-104">The <xref:System.Net.Sockets.Socket> class follows the .NET Framework naming pattern for asynchronous methods.</span></span> <span data-ttu-id="90a67-105">예를 들어 동기 <xref:System.Net.Sockets.Socket.Receive%2A> 는 비동기 메서드는 해당 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 및 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-105">For example, the synchronous <xref:System.Net.Sockets.Socket.Receive%2A> method corresponds to the asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods.</span></span>  
  
 <span data-ttu-id="90a67-106">응용 프로그램 실행 중 하나의 스레드만, 필요한 경우 동기 운영 모드에 맞게 설계 된 다음 방법을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-106">If your application only requires one thread during execution, use the following methods, which are designed for synchronous operation mode.</span></span>  
  
-   <span data-ttu-id="90a67-107">서버 수를 사용 하 여 연결을 수신할 TCP 같은 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Listen%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-107">If you are using a connection-oriented protocol such as TCP, your server can listen for connections using the <xref:System.Net.Sockets.Socket.Listen%2A> method.</span></span> <span data-ttu-id="90a67-108"><xref:System.Net.Sockets.Socket.Accept%2A> 메서드 프로세스 요청 하 고 반환 하는 모든 들어오는 연결을 <xref:System.Net.Sockets.Socket> 데이터에서 원격 호스트와 통신 하는 데 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-108">The <xref:System.Net.Sockets.Socket.Accept%2A> method processes any incoming connection requests and returns a <xref:System.Net.Sockets.Socket> that you can use to communicate data with the remote host.</span></span> <span data-ttu-id="90a67-109">반환이 사용 하 여 <xref:System.Net.Sockets.Socket> 호출 하 여 <xref:System.Net.Sockets.Socket.Send%2A> 또는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-109">Use this returned <xref:System.Net.Sockets.Socket> to call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span> <span data-ttu-id="90a67-110">호출 된 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.Listen%2A> 메서드 로컬 IP 주소와 포트 번호를 지정 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-110">Call the <xref:System.Net.Sockets.Socket.Bind%2A> method prior to calling the <xref:System.Net.Sockets.Socket.Listen%2A> method if you want to specify the local IP address and port number.</span></span> <span data-ttu-id="90a67-111">기본 서비스 공급자가 사용 가능한 포트를 할당 하기 원하는 경우 0의 포트 번호를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-111">Use a port number of zero if you want the underlying service provider to assign a free port for you.</span></span> <span data-ttu-id="90a67-112">수신 호스트에 연결 하려는 경우에 호출 된 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-112">If you want to connect to a listening host, call the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="90a67-113">데이터에 전달 하기 위해 호출 된 <xref:System.Net.Sockets.Socket.Send%2A> 또는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-113">To communicate data, call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
-   <span data-ttu-id="90a67-114">UDP 같은 연결 없는 프로토콜을 사용 하는 경우 연결을 전혀 수신 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-114">If you are using a connectionless protocol such as UDP, you do not need to listen for connections at all.</span></span> <span data-ttu-id="90a67-115">호출 된 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드 들어오는 데이터 그램을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-115">Call the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method to accept any incoming datagrams.</span></span> <span data-ttu-id="90a67-116">사용 하 여는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드를 원격 호스트에 데이터 그램을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-116">Use the <xref:System.Net.Sockets.Socket.SendTo%2A> method to send datagrams to a remote host.</span></span>  
  
 <span data-ttu-id="90a67-117">를 실행 하는 동안 별도 스레드를 사용 하 여 통신을 처리 하기 위해 비동기 작업 모드에 맞게 설계 된 다음 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-117">To process communications using separate threads during execution, use the following methods, which are designed for asynchronous operation mode.</span></span>  
  
-   <span data-ttu-id="90a67-118">사용 하 여 TCP 같은 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, 및 <xref:System.Net.Sockets.Socket.EndConnect%2A> 수신 호스트와 연결 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-118">If you are using a connection-oriented protocol such as TCP, use the <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, and <xref:System.Net.Sockets.Socket.EndConnect%2A> methods to connect with a listening host.</span></span> <span data-ttu-id="90a67-119">사용 하 여는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 및 <xref:System.Net.Sockets.Socket.EndSend%2A> 또는 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 및 <xref:System.Net.Sockets.Socket.EndReceive%2A> 데이터를 비동기적으로 통신 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-119">Use the <xref:System.Net.Sockets.Socket.BeginSend%2A> and <xref:System.Net.Sockets.Socket.EndSend%2A> or <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods to communicate data asynchronously.</span></span> <span data-ttu-id="90a67-120">사용 하 여 들어오는 연결 요청을 처리할 수 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 및 <xref:System.Net.Sockets.Socket.EndAccept%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-120">Incoming connection requests can be processed using <xref:System.Net.Sockets.Socket.BeginAccept%2A> and <xref:System.Net.Sockets.Socket.EndAccept%2A>.</span></span>  
  
-   <span data-ttu-id="90a67-121">UDP 같은 연결 없는 프로토콜을 사용 하는 경우 사용할 수 있습니다 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 및 <xref:System.Net.Sockets.Socket.EndSendTo%2A> 데이터 그램, 및 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 및 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> 데이터 그램을 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-121">If you are using a connectionless protocol such as UDP, you can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.EndSendTo%2A> to send datagrams, and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> and <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> to receive datagrams.</span></span>  
  
 <span data-ttu-id="90a67-122">소켓에서 여러 비동기 작업을 수행 하는 경우 완료 되지 않은 반드시에서 시작 되는 순서입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-122">If you perform multiple asynchronous operations on a socket, they do not necessarily complete in the order in which they are started.</span></span>  
  
 <span data-ttu-id="90a67-123">사용 하 여 데이터를 받는 경우는 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용 하지 않도록 설정 된 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-123">When you are finished sending and receiving data, use the <xref:System.Net.Sockets.Socket.Shutdown%2A> method to disable the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-124">호출한 후 <xref:System.Net.Sockets.Socket.Shutdown%2A>, 호출 된 <xref:System.Net.Sockets.Socket.Close%2A> 와 관련 된 모든 리소스를 해제 하는 메서드는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-124">After calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method to release all resources associated with the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 <span data-ttu-id="90a67-125"><xref:System.Net.Sockets.Socket> 클래스를 구성할 수 있습니다 프로그램 <xref:System.Net.Sockets.Socket> 를 사용 하는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-125">The <xref:System.Net.Sockets.Socket> class allows you to configure your <xref:System.Net.Sockets.Socket> using the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span> <span data-ttu-id="90a67-126">이 설정을 사용 하 여 검색 된 <xref:System.Net.Sockets.Socket.GetSocketOption%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-126">Retrieve these settings using the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-127">상대적으로 간단한 응용 프로그램을 작성 하는 최대 성능이 필요 하지 않은 경우 사용해 <xref:System.Net.Sockets.TcpClient>, <xref:System.Net.Sockets.TcpListener>, 및 <xref:System.Net.Sockets.UdpClient>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-127">If you are writing a relatively simple application and do not require maximum performance, consider using <xref:System.Net.Sockets.TcpClient>, <xref:System.Net.Sockets.TcpListener>, and <xref:System.Net.Sockets.UdpClient>.</span></span> <span data-ttu-id="90a67-128">이러한 클래스를 간단 하 고 보다 친숙 한 인터페이스를 제공 <xref:System.Net.Sockets.Socket> 통신 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-128">These classes provide a simpler and more user-friendly interface to <xref:System.Net.Sockets.Socket> communications.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-129">다음 코드 예제는 방법을 <xref:System.Net.Sockets.Socket> 클래스를 사용 하는 HTTP 서버에 데이터를 보내고 응답을 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-129">The following code example shows how the <xref:System.Net.Sockets.Socket> class can be used to send data to an HTTP server and receive the response.</span></span> <span data-ttu-id="90a67-130">이 예에서는 전체 페이지를 받을 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-130">This example blocks until the entire page is received.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket/CPP/socket.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket/CS/socket.cs#1)]
 [!code-vb[System.Net.Sockets.Socket#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.Socket/VB/socket.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-131">나가는 연결을 설정 하거나 들어오는 요청을 수락 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-131">To establish an outgoing connection or accept an incoming request.</span></span></permission>
    <threadsafe><span data-ttu-id="90a67-132">이 클래스의 인스턴스는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-132">Instances of this class are thread safe.</span></span></threadsafe>
    <altmember cref="N:System.Net" />
    <altmember cref="N:System.Net.Cache" />
    <altmember cref="N:System.Net.Security" />
    <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-133"><see cref="T:System.Net.Sockets.Socket" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-133">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.SocketInformation socketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.SocketInformation socketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::SocketInformation socketInformation);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socketInformation" Type="System.Net.Sockets.SocketInformation" />
      </Parameters>
      <Docs>
        <param name="socketInformation"><span data-ttu-id="90a67-134"><see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />에서 반환된 소켓 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-134">The socket information returned by <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</span></span></param>
        <summary><span data-ttu-id="90a67-135"><see cref="T:System.Net.Sockets.Socket" />에서 반환된 특정 값을 사용하여 <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-135">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified value returned from <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-136">호출 하는 경우는 <xref:System.Net.Sockets.Socket.%23ctor%2A> 각 호출에 대 한 인수와 동일한 바이트 배열을 생성자를 여러 개 만들어집니다 관리 <xref:System.Net.Sockets.Socket>s 동일한 기본 소켓을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-136">If you call the <xref:System.Net.Sockets.Socket.%23ctor%2A> constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket>s with the same underlying socket.</span></span> <span data-ttu-id="90a67-137">이 이렇게 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-137">This practice is strongly discouraged.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
      </Parameters>
      <Docs>
        <param name="socketType"><span data-ttu-id="90a67-138"><see cref="T:System.Net.Sockets.SocketType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-138">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span></span></param>
        <param name="protocolType"><span data-ttu-id="90a67-139"><see cref="T:System.Net.Sockets.ProtocolType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-139">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-140">지정된 소켓 종류 및 프로토콜을 사용하여 <see cref="T:System.Net.Sockets.Socket" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-140">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified socket type and protocol.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-141">`socketType` 매개 변수 형식을 지정 된 <xref:System.Net.Sockets.Socket> 클래스 및 `protocolType` 매개 변수에서 사용 하는 프로토콜을 지정 합니다. <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-141">The `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-142">두 개의 매개 변수가 독립적인있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-142">The two parameters are not independent.</span></span> <span data-ttu-id="90a67-143">종종는 <xref:System.Net.Sockets.Socket> 유형이 프로토콜에서 암시적입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-143">Often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol.</span></span> <span data-ttu-id="90a67-144">경우 조합의 <xref:System.Net.Sockets.Socket> 형식 및 프로토콜에 잘못 된 결과 형식 <xref:System.Net.Sockets.Socket>,이 생성자는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-144">If the combination of <xref:System.Net.Sockets.Socket> type and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-145">이 생성자는 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-145">If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-146">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-146">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-147">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-147">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-148">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-148">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-149"><paramref name="socketType" />과 <paramref name="protocolType" />을 조합했을 때 소켓이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-149">The combination of  <paramref name="socketType" /> and <paramref name="protocolType" /> results in an invalid socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Socket (System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily addressFamily, valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Socket(System::Net::Sockets::AddressFamily addressFamily, System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addressFamily" Type="System.Net.Sockets.AddressFamily" />
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
      </Parameters>
      <Docs>
        <param name="addressFamily"><span data-ttu-id="90a67-150"><see cref="T:System.Net.Sockets.AddressFamily" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-150">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</span></span></param>
        <param name="socketType"><span data-ttu-id="90a67-151"><see cref="T:System.Net.Sockets.SocketType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-151">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span></span></param>
        <param name="protocolType"><span data-ttu-id="90a67-152"><see cref="T:System.Net.Sockets.ProtocolType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-152">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-153">지정된 주소 패밀리, 소켓 종류 및 프로토콜을 사용하여 <see cref="T:System.Net.Sockets.Socket" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-153">Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified address family, socket type and protocol.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-154">`addressFamily` 매개 변수를 지정 하는 주소 지정 체계는 <xref:System.Net.Sockets.Socket> 클래스는 `socketType` 매개 변수 유형을 지정는 <xref:System.Net.Sockets.Socket> 클래스 및 `protocolType` 매개 변수에서 사용 하는 프로토콜을 지정 합니다. <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-154">The `addressFamily` parameter specifies the addressing scheme that the <xref:System.Net.Sockets.Socket> class uses, the `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class, and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-155">세 개의 매개 변수가 독립적인있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-155">The three parameters are not independent.</span></span> <span data-ttu-id="90a67-156">일부 주소 패밀리 제한 그리고 자주 함께 프로토콜을 사용할 수 있습니다는 <xref:System.Net.Sockets.Socket> 유형이 프로토콜에서 암시적입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-156">Some address families restrict which protocols can be used with them, and often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol.</span></span> <span data-ttu-id="90a67-157">경우 주소 패밀리 조합의 <xref:System.Net.Sockets.Socket> 유형 및 프로토콜이 잘못 된에서 결과 형식 <xref:System.Net.Sockets.Socket>,이 생성자는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-157">If the combination of address family, <xref:System.Net.Sockets.Socket> type, and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-158">이 생성자는 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-158">If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-159">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-159">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-160">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-160">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-161">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-161">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-162">다음 코드 예제에서는의 인스턴스를 만드는 방법을 보여 줍니다.는 <xref:System.Net.Sockets.Socket> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-162">The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.Socket> class.</span></span>  
  
 [!code-cpp[Socket_Send_Recieve#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Send_Recieve/CPP/source.cpp#1)]
 [!code-csharp[Socket_Send_Recieve#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Send_Recieve/CS/source.cs#1)]
 [!code-vb[Socket_Send_Recieve#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Send_Recieve/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-163"><paramref name="addressFamily" />, <paramref name="socketType" /> 및 <paramref name="protocolType" />을 조합했을 때 소켓이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-163">The combination of <paramref name="addressFamily" />, <paramref name="socketType" />, and <paramref name="protocolType" /> results in an invalid socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketException" />
        <altmember cref="T:System.Net.Sockets.AddressFamily" />
        <altmember cref="T:System.Net.Sockets.ProtocolType" />
        <altmember cref="T:System.Net.Sockets.SocketType" />
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Accept ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket Accept() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Accept" />
      <MemberSignature Language="VB.NET" Value="Public Function Accept () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ Accept();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90a67-164">새로 만든 연결에 대한 새 <see cref="T:System.Net.Sockets.Socket" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-164">Creates a new <see cref="T:System.Net.Sockets.Socket" /> for a newly created connection.</span></span></summary>
        <returns><span data-ttu-id="90a67-165">새로 만든 연결에 대한 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-165">A <see cref="T:System.Net.Sockets.Socket" /> for a newly created connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-166"><xref:System.Net.Sockets.Socket.Accept%2A> 동기적으로 수신 소켓의 연결 요청 큐에서 대기 중인 연결 요청 첫 번째 추출 하 고 다음 만들고 반환 새 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-166"><xref:System.Net.Sockets.Socket.Accept%2A> synchronously extracts the first pending connection request from the connection request queue of the listening socket, and then creates and returns a new <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-167">반환 된이 사용할 수 없습니다 <xref:System.Net.Sockets.Socket> 연결 큐에서 모든 추가 연결을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-167">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="90a67-168">호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 메서드는 반환 된 <xref:System.Net.Sockets.Socket> 원격 호스트의 네트워크 주소와 포트 번호를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-168">However, you can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> method of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
 <span data-ttu-id="90a67-169">블로킹 모드에서 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결 시도 큐에 대기 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-169">In blocking mode, <xref:System.Net.Sockets.Socket.Accept%2A> blocks until an incoming connection attempt is queued.</span></span> <span data-ttu-id="90a67-170">연결을 수락 되 면 되 면 원래 <xref:System.Net.Sockets.Socket> 큐의 들어오는 연결의 요청 할 때까지 닫기 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-170">Once a connection is accepted, the original <xref:System.Net.Sockets.Socket> continues queuing incoming connection requests until you close it.</span></span>  
  
 <span data-ttu-id="90a67-171">비블로킹를 사용 하 여이 메서드를 호출 하는 경우 <xref:System.Net.Sockets.Socket>, 및 대기 중인 요청 수 없는 연결 <xref:System.Net.Sockets.Socket.Accept%2A> throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-171">If you call this method using a non-blocking <xref:System.Net.Sockets.Socket>, and no connection requests are queued, <xref:System.Net.Sockets.Socket.Accept%2A> throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-172">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-172">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-173">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-173">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-174">호출 하기 전에 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드를 호출 해야는 <xref:System.Net.Sockets.Socket.Listen%2A> 메서드를 수신 대기 하 고 들어오는 연결 요청을 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-174">Before calling the <xref:System.Net.Sockets.Socket.Accept%2A> method, you must first call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-175">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-175">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-176">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-176">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-177">다음 코드 예제에서는 간단한 허용 <xref:System.Net.Sockets.Socket> 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-177">The following code example accepts a simple <xref:System.Net.Sockets.Socket> connection.</span></span>  
  
 [!code-cpp[Classic Socket.Accept Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Accept Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Accept Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Accept Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Accept Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Accept Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-178">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-178">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-179"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-179">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-180">받아들이는 소켓이 연결을 수신하지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-180">The accepting socket is not listening for connections.</span></span> <span data-ttu-id="90a67-181"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />를 호출하기 전에 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 및 <see cref="M:System.Net.Sockets.Socket.Accept" />을 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-181">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.Accept" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="AcceptAsync">
      <MemberSignature Language="C#" Value="public bool AcceptAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AcceptAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool AcceptAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-182">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-182">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-183">들어오는 연결 시도를 받아들이는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-183">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="90a67-184">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-184">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-185">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-185">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-186">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-186">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-187">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-187">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-188">연결 지향 프로토콜과 צ ְ ײ는 <xref:System.Net.Sockets.Socket.AcceptAsync%2A> 메서드를 비동기적으로 들어오는 연결을 처리 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-188">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="90a67-189">연결을 비동기적으로 수락 별도 실행 스레드 내에서 데이터를 주고받을 수 수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-189">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="90a67-190">호출 하기 전에 <xref:System.Net.Sockets.Socket.AcceptAsync%2A> 호출 해야 합니다는 <xref:System.Net.Sockets.Socket.Listen%2A> 메서드를 수신 대기 하 고 들어오는 연결 요청을 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-190">Before calling the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="90a67-191">완료 알림을 받을 수는 이벤트 처리기를 구현 하는 콜백 메서드를 만들어야 합니다\<SocketAsyncEventArgs > 대리자를 연결 하는 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-191">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and hook it to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="90a67-192">다음과 같은 속성 및 이벤트에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 개체는 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-192">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="90a67-193">호출자에 게 기존를 선택적으로 지정할 수 <xref:System.Net.Sockets.Socket> 지정 하 여 들어오는 연결에 사용할는 <xref:System.Net.Sockets.Socket> 를 사용 하는 <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-193">The caller can optionally specify an existing <xref:System.Net.Sockets.Socket> to use for the incoming connection by specifying the <xref:System.Net.Sockets.Socket> to use with the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="90a67-194">경우는 <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> 속성은 null로, 새 <xref:System.Net.Sockets.Socket> 동일한를 사용 하 여 생성 <xref:System.Net.Sockets.Socket.AddressFamily%2A>, <xref:System.Net.Sockets.Socket.SocketType%2A>, 및 <xref:System.Net.Sockets.Socket.ProtocolType%2A> 현재 <xref:System.Net.Sockets.Socket> 으로 설정 하 고는 <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-194">If the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property is null, a new <xref:System.Net.Sockets.Socket> is constructed with the same <xref:System.Net.Sockets.Socket.AddressFamily%2A>, <xref:System.Net.Sockets.Socket.SocketType%2A>, and <xref:System.Net.Sockets.Socket.ProtocolType%2A> as the current <xref:System.Net.Sockets.Socket> and set as the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="90a67-195">호출자에 게 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> 속성을 호출 하기 전에 모든 사용자 상태 개체는 <xref:System.Net.Sockets.Socket.AcceptAsync%2A> 메서드 정보를 콜백 메서드에서 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-195">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="90a67-196">콜백 단일 개체 보다 더 많은 정보를 필요로 한다면 구성원으로 다른 필요한 상태 정보를 저장할 작은 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-196">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="90a67-197">필요에 따라 초기 데이터 블록의 후 소켓에서 수신 하는 버퍼를 제공 될 수 있습니다는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드가 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-197">Optionally, a buffer may be provided in which to receive the initial block of data on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="90a67-198">이 경우는 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 를 받을 데이터를 포함 하는 버퍼에 설정 해야 하는 속성 및 <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 속성 수신 버퍼에 데이터의 바이트의 최대 수로 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-198">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to receive and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the maximum number of bytes of data to receive in the buffer.</span></span> <span data-ttu-id="90a67-199">사용 하 여 이러한 속성을 설정할 수는 <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-199">These properties can be set using the <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90a67-200">에 전달 된 버퍼의 일부에서 사용 하는 내부적으로 사용 하기 위해 기본 Winsock AcceptEx 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-200">Part of the buffer passed in will be consumed internally for use by the underlying Winsock AcceptEx call.</span></span> <span data-ttu-id="90a67-201">반환 되는 데이터 크기의 값 보다 작은 되도록 항상 합니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 속성에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 인스턴스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-201">This means that the amount of data returned will always be less than the value of the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> instance provided.</span></span> <span data-ttu-id="90a67-202">내부적으로 사용 되는 버퍼 크기의 소켓 주소 패밀리에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-202">The amount of the buffer used internally varies based on the address family of the socket.</span></span> <span data-ttu-id="90a67-203">필요한 최소 버퍼 크기는 288 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-203">The minimum buffer size required is 288 bytes.</span></span> <span data-ttu-id="90a67-204">더 큰 버퍼 크기를 지정 하면 <xref:System.Net.Sockets.Socket> 할 필요한 몇 가지 추가 데이터 Winsock AcceptEx 호출으로 수신 주소 데이터를 제외 하 고이 추가 데이터를 수신할 때까지 기다립니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-204">If a larger buffer size is specified, then the <xref:System.Net.Sockets.Socket> will expect some extra data other than the address data received by the Winsock AcceptEx call and will wait until this extra data is received.</span></span> <span data-ttu-id="90a67-205">시간 초과가 발생 하는 경우 연결이 다시 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-205">If a timeout occurs, the connection is reset.</span></span> <span data-ttu-id="90a67-206">따라서 추가 데이터는 특정 시간, 예상 되는 경우 버퍼 크기는 최소 버퍼 크기와이 수치를 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-206">So if extra data is expected of  a specific amount, then the buffer size should be set to the minimum buffer size plus this amount.</span></span>  
  
 <span data-ttu-id="90a67-207">완료 콜백 메서드를 검사 해야는 <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> 여부를 확인 하는 속성은 <xref:System.Net.Sockets.Socket.AcceptAsync%2A> 작업이 성공 했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-207">The completion callback method should examine the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> property to determine if the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> operation was successful.</span></span>  
  
 <span data-ttu-id="90a67-208"><xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> 이벤트 발생 및 연결 없음에 동의 하는 경우 일부 경우에 발생할 수는 <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> 속성으로 설정 되어야 <xref:System.Net.Sockets.SocketError.ConnectionReset>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-208">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event can occur in some cases when no connection has been accepted and cause the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> property to be set to <xref:System.Net.Sockets.SocketError.ConnectionReset>.</span></span> <span data-ttu-id="90a67-209">이 포트는 반 열림 SYN 형식 검사를 사용 하 여 검색의 결과로 발생할 수 있습니다 (SYN SYN ACK-> RST 시퀀스->).</span><span class="sxs-lookup"><span data-stu-id="90a67-209">This can occur as a result of port scanning using a half-open SYN type scan (a SYN -> SYN-ACK -> RST sequence).</span></span> <span data-ttu-id="90a67-210">사용 하 여 응용 프로그램은 <xref:System.Net.Sockets.Socket.AcceptAsync%2A> 메서드는이 조건을 처리 하기 위해 준비 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-210">Applications using the <xref:System.Net.Sockets.Socket.AcceptAsync%2A> method should be prepared to handle this condition.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-211">인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-211">An argument is not valid.</span></span> <span data-ttu-id="90a67-212">제공된 버퍼의 크기가 너무 작으면 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-212">This exception occurs if the buffer provided is not large enough.</span></span> <span data-ttu-id="90a67-213">버퍼의 크기는 최소한 2 \* (sizeof(SOCKADDR_STORAGE + 16)바이트 이상이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-213">The buffer must be at least 2 \* (sizeof(SOCKADDR_STORAGE + 16) bytes.</span></span>  
  
 <span data-ttu-id="90a67-214">버퍼를 여러 개 지정하고 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 속성이 null이 아닌 경우에도 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-214">This exception also occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-215">인수가 범위를 벗어난 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-215">An argument is out of range.</span></span> <span data-ttu-id="90a67-216"><see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />가 0보다 작으면 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-216">The exception occurs if the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> is less than 0.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-217">잘못된 작업이 요청된 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-217">An invalid operation was requested.</span></span> <span data-ttu-id="90a67-218">받아들이는 <see cref="T:System.Net.Sockets.Socket" />이 연결을 수신 대기하지 않거나 받아들인 소켓이 바인딩되어 있으면 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-218">This exception occurs if the accepting <see cref="T:System.Net.Sockets.Socket" /> is not listening for connections or the accepted socket is bound.</span></span>  
  
 <span data-ttu-id="90a67-219"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 메서드를 호출하기 전에 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 및 <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 메서드를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-219">You must call the <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> method before calling the <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> method.</span></span>  
  
 <span data-ttu-id="90a67-220">소켓이 이미 연결되어 있거나 지정된 <paramref name="e" /> 매개 변수를 사용하여 소켓 작업이 이미 진행 중인 경우에도 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-220">This exception also occurs if the socket is already connected or a socket operation was already in progress using the specified <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-221">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-221">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-222">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-222">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-223"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-223">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="AddressFamily">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.AddressFamily AddressFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.AddressFamily AddressFamily" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.AddressFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddressFamily As AddressFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::AddressFamily AddressFamily { System::Net::Sockets::AddressFamily get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.AddressFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-224"><see cref="T:System.Net.Sockets.Socket" />의 주소 패밀리를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-224">Gets the address family of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="90a67-225"><see cref="T:System.Net.Sockets.AddressFamily" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-225">One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-226"><xref:System.Net.Sockets.AddressFamily> 주소 지정 체계를 지정의 인스턴스는 <xref:System.Net.Sockets.Socket> 클래스가 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-226">The <xref:System.Net.Sockets.AddressFamily> specifies the addressing scheme that an instance of the <xref:System.Net.Sockets.Socket> class can use.</span></span> <span data-ttu-id="90a67-227">이 속성은 읽기 전용 이며 때 설정 됩니다는 <xref:System.Net.Sockets.Socket> 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-227">This property is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-228">다음 코드 예제는 <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, 및 <xref:System.Net.Sockets.ProtocolType> 콘솔에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-228">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.AddressFamily" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-229">네트워크에서 받아서 읽을 수 있는 데이터의 양을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-229">Gets the amount of data that has been received from the network and is available to be read.</span></span></summary>
        <value><span data-ttu-id="90a67-230">네트워크에서 받아서 읽을 수 있는 데이터의 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-230">The number of bytes of data received from the network and available to be read.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-231">비블로킹 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Available%2A> 호출 하기 전에 읽기에 대 한 대기 중인 데이터가 있는지 여부를 결정 하는 데는 <xref:System.Net.Sockets.Socket.Receive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-231">If you are using a non-blocking <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Available%2A> is a good way to determine whether data is queued for reading, before calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="90a67-232">사용 가능한 데이터는 읽기에 대 한 네트워크 버퍼에서 대기 중인 총 데이터 양이 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-232">The available data is the total amount of data queued in the network buffer for reading.</span></span> <span data-ttu-id="90a67-233">네트워크 버퍼에 대기 중인 데이터가 없을 경우 <xref:System.Net.Sockets.Socket.Available%2A> 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-233">If no data is queued in the network buffer, <xref:System.Net.Sockets.Socket.Available%2A> returns 0.</span></span>  
  
 <span data-ttu-id="90a67-234">원격 호스트 종료 되거나 연결이 닫히면 <xref:System.Net.Sockets.Socket.Available%2A> throw 할 수는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-234">If the remote host shuts down or closes the connection, <xref:System.Net.Sockets.Socket.Available%2A> can throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-235">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-235">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-236">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-236">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-237">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-237">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-238">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-238">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-239">다음 코드 예제에서는 호출 IOControl FIONREAD 및 사용 가능한 속성의 결과 비교합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-239">The following code example compares the results of calling IOControl with FIONREAD and the Available property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl/CPP/iocontrolserver.cpp#1)]
 [!code-csharp[NCLSocketIoControl#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl/CS/iocontrolserver.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-240">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-240">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-241"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-241">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="F:System.Net.Sockets.SocketType.Dgram" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAccept">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-242">들어오는 연결 시도를 받아들이는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-242">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="90a67-243"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-243">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-244">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-244">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-245">들어오는 연결 시도를 받아들이는 비동기 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-245">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="90a67-246">비동기 <see cref="T:System.IAsyncResult" /> 생성을 참조하는 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-246">An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> creation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-247">연결 지향 프로토콜과 צ ְ ײ는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 비동기적으로 들어오는 연결을 처리 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-247">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="90a67-248">연결을 비동기적으로 수락 별도 실행 스레드 내에서 데이터를 주고받을 수 수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-248">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="90a67-249">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 호출 해야 합니다는 <xref:System.Net.Sockets.Socket.Listen%2A> 메서드를 수신 대기 하 고 들어오는 연결 요청을 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-249">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="90a67-250">구현 하는 콜백 메서드를 만들어야 합니다는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-250">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="90a67-251">수신 대기 하는 전달 해야 최소한이 작업을 수행 하려면 <xref:System.Net.Sockets.Socket> 개체를 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 통해는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-251">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="90a67-252">콜백에 자세한 정보를 저장 하는 작은 클래스를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-252">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-253">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-253">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-254">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-254">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="90a67-255">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginAccept%2A>, 시스템에서 일반적으로 지정 된 콜백 메서드를 실행 하는 별도 스레드를 사용 하 고 차단 <xref:System.Net.Sockets.Socket.EndAccept%2A> 보류 중인 연결을 검색할 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-255">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span> <span data-ttu-id="90a67-256"><xref:System.Net.Sockets.Socket.EndAccept%2A> 새 돌아갑니다 <xref:System.Net.Sockets.Socket> 원격 호스트와 데이터를 송수신 하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-256"><xref:System.Net.Sockets.Socket.EndAccept%2A> will return a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="90a67-257">반환 된이 사용할 수 없습니다 <xref:System.Net.Sockets.Socket> 연결 큐에서 모든 추가 연결을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-257">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="90a67-258">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 사용 하 여 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-258">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-259">Set 메서드를 호출 하는 <xref:System.Threading.ManualResetEvent> 콜백 메서드에서 원래 스레드가 계속 실행 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-259">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="90a67-260">시스템 콜백 메서드를 호출 하는 호출 스레드를 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-260">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="90a67-261">이 경우에 <xref:System.IAsyncResult.CompletedSynchronously%2A> 속성에서 반환 된 <xref:System.IAsyncResult> 나타내기 위해 설정할 수는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드가 동기적으로 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-261">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="90a67-262">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-262">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-263">에 대 한 보류 중인 호출을 취소 하 고 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 닫고는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-263">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-264">경우는 <xref:System.Net.Sockets.Socket.Close%2A> 메서드가 비동기 작업이 진행 중인 동안에 호출 되 면에 제공 된 콜백은 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-264">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="90a67-265">한 후속 호출에는 <xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드는 throw 한 <xref:System.ObjectDisposedException> 를 나타내는 작업이 취소 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-265">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-266">사용할 수는 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 반환 된 속성 <xref:System.Net.Sockets.Socket> 원격 호스트의 네트워크 주소와 포트 번호를 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-266">You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-267">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-267">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-268">이 코드를 가져온 후 설명서를 참조는 Windows 소켓 버전 2 API 오류 코드 MSDN에서 오류에 대 한 자세한 설명은.</span><span class="sxs-lookup"><span data-stu-id="90a67-268">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-269">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-269">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-270">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-270">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-271">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-271">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-272">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-272">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-273">다음 코드 예제에서는 비동기적으로 들어오는 연결을 수신 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-273">The following code example attempts to receive an incoming connection asynchronously.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Async_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Async_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-274"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-274">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-275">이 메서드에는 Windows NT가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-275">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-276">받아들이는 소켓이 연결을 수신하지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-276">The accepting socket is not listening for connections.</span></span> <span data-ttu-id="90a67-277"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />를 호출하기 전에 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 및 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />을 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-277">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span>  
  
 <span data-ttu-id="90a67-278">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-278">-or-</span></span>  
  
 <span data-ttu-id="90a67-279">받아들여진 소켓이 바인딩된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-279">The accepted socket is bound.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-280"><paramref name="receiveSize" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-280"><paramref name="receiveSize" /> is less than 0.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-281">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-281">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (int receiveSize, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(int32 receiveSize, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (receiveSize As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(int receiveSize, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiveSize" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="receiveSize"><span data-ttu-id="90a67-282">송신자로부터 받아들일 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-282">The number of bytes to accept from the sender.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-283"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-283">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-284">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-284">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-285">들어오는 연결 시도를 받아들이는 비동기 작업을 시작하고 클라이언트 응용 프로그램에서 보낸 데이터의 첫 번째 블록을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-285">Begins an asynchronous operation to accept an incoming connection attempt and receives the first block of data sent by the client application.</span></span></summary>
        <returns><span data-ttu-id="90a67-286">비동기 <see cref="T:System.IAsyncResult" /> 생성을 참조하는 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-286">An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> creation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-287">연결 지향 프로토콜과 צ ְ ײ는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 비동기적으로 들어오는 연결을 처리 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-287">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="90a67-288">비동기적으로 연결 수락을 사용 하면 별도 실행 스레드 내에서 데이터를 주고받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-288">Accepting connections asynchronously enables you to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="90a67-289">이 오버 로드를 사용 하면 초기 전송에 동의 하는 바이트 수를 지정할 수 있습니다는 `receiveSize` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-289">This overload allows you to specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.</span></span>  
  
 <span data-ttu-id="90a67-290">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 호출 해야 합니다는 <xref:System.Net.Sockets.Socket.Listen%2A> 메서드를 수신 대기 하 고 들어오는 연결 요청을 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-290">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="90a67-291">구현 하는 콜백 메서드를 만들어야 합니다는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-291">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="90a67-292">수신 대기 하는 전달 해야 최소한이 작업을 수행 하려면 <xref:System.Net.Sockets.Socket> 개체를 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 통해는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-292">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="90a67-293">콜백에 자세한 정보를 저장 하는 작은 클래스를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-293">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-294">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-294">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-295">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-295">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="90a67-296">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginAccept%2A>, 시스템에서 일반적으로 지정 된 콜백 메서드를 실행 하는 별도 스레드를 사용 하 고 차단 <xref:System.Net.Sockets.Socket.EndAccept%2A> 보류 중인 연결을 검색할 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-296">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span>  
  
 <span data-ttu-id="90a67-297"><xref:System.Net.Sockets.Socket.EndAccept%2A> 새 반환 <xref:System.Net.Sockets.Socket> 원격 호스트와 데이터를 받거나 보내기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-297"><xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="90a67-298">반환 된이 사용할 수 없습니다 <xref:System.Net.Sockets.Socket> 연결 큐에서 모든 추가 연결을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-298">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="90a67-299">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 사용 하 여 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-299">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-300">Set 메서드를 호출 하는 <xref:System.Threading.ManualResetEvent> 콜백 메서드에서 원래 스레드가 계속 실행 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-300">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="90a67-301">시스템 콜백 메서드를 호출 하는 호출 스레드를 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-301">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="90a67-302">이 경우에 <xref:System.IAsyncResult.CompletedSynchronously%2A> 속성에서 반환 된 <xref:System.IAsyncResult> 나타내기 위해 설정할 수는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드가 동기적으로 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-302">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="90a67-303">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-303">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-304">에 대 한 보류 중인 호출을 취소 하 고 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 닫고는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-304">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span>  <span data-ttu-id="90a67-305">경우는 <xref:System.Net.Sockets.Socket.Close%2A> 메서드가 비동기 작업이 진행 중인 동안에 호출 되 면에 제공 된 콜백은 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-305">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="90a67-306">한 후속 호출에는 <xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드는 throw 한 <xref:System.ObjectDisposedException> 를 나타내는 작업이 취소 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-306">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-307">사용 하 여 호출할 수는 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 반환 된 속성 <xref:System.Net.Sockets.Socket> 원격 호스트의 네트워크 주소와 포트 번호를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-307">You can call use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-308">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-308">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-309">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-309">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-310">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-310">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-311">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-311">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-312">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-312">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-313">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-313">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-314">다음 코드 예제에서는 소켓을 열고은 비동기 연결을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-314">The following code example opens a socket and accepts an asynchronous connection.</span></span> <span data-ttu-id="90a67-315">이 예제에서는 소켓 초기 10 바이트의 데이터를 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-315">In this example, the socket accepts the initial 10 bytes of data.</span></span> <span data-ttu-id="90a67-316">받은 바이트 수와 데이터는으로 콘솔에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-316">The number of bytes received and the data are displayed on the console by the callback delegate.</span></span> <span data-ttu-id="90a67-317">참조 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 나머지 데이터를 수신 하는 방법에 대 한 설명을 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-317">See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-318"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-318">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-319">이 메서드에는 Windows NT가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-319">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-320">받아들이는 소켓이 연결을 수신하지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-320">The accepting socket is not listening for connections.</span></span> <span data-ttu-id="90a67-321"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />를 호출하기 전에 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 및 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />을 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-321">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span>  
  
 <span data-ttu-id="90a67-322">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-322">-or-</span></span>  
  
 <span data-ttu-id="90a67-323">받아들여진 소켓이 바인딩된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-323">The accepted socket is bound.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-324"><paramref name="receiveSize" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-324"><paramref name="receiveSize" /> is less than 0.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-325">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-325">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="BeginAccept">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAccept (System.Net.Sockets.Socket acceptSocket, int receiveSize, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAccept(class System.Net.Sockets.Socket acceptSocket, int32 receiveSize, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAccept (acceptSocket As Socket, receiveSize As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAccept(System::Net::Sockets::Socket ^ acceptSocket, int receiveSize, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptSocket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="receiveSize" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="acceptSocket"><span data-ttu-id="90a67-326">허용되는 <see cref="T:System.Net.Sockets.Socket" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-326">The accepted <see cref="T:System.Net.Sockets.Socket" /> object.</span></span> <span data-ttu-id="90a67-327">이 값은 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-327">This value may be <see langword="null" />.</span></span></param>
        <param name="receiveSize"><span data-ttu-id="90a67-328">받을 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-328">The maximum number of bytes to receive.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-329"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-329">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-330">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-330">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-331">지정된 소켓에서 들어오는 연결 시도를 받아들이는 비동기 작업을 시작하고 클라이언트 응용 프로그램에서 보낸 데이터의 첫 번째 블록을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-331">Begins an asynchronous operation to accept an incoming connection attempt from a specified socket and receives the first block of data sent by the client application.</span></span></summary>
        <returns><span data-ttu-id="90a67-332">비동기 <see cref="T:System.IAsyncResult" /> 개체 생성을 참조하는 <see cref="T:System.Net.Sockets.Socket" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-332">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="T:System.Net.Sockets.Socket" /> object creation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-333">연결 지향 프로토콜과 צ ְ ײ는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 비동기적으로 들어오는 연결을 처리 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-333">Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts.</span></span> <span data-ttu-id="90a67-334">연결을 비동기적으로 수락 별도 실행 스레드 내에서 데이터를 주고받을 수 수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-334">Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span> <span data-ttu-id="90a67-335">이 오버 로드를 사용 하면에서 받아들인된 소켓을 지정할 수 있습니다는 `acceptSocket` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-335">This overload allows you to specify the accepted socket in the `acceptSocket` parameter.</span></span> <span data-ttu-id="90a67-336">이 매개 변수가 `null`, 허용 된 소켓을 만듭니다는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-336">If this parameter is `null`, the accepted socket is created by the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="90a67-337">초기 전송에 동의 하는 바이트 수를 지정할 수는 `receiveSize` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-337">You can specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.</span></span>  
  
 <span data-ttu-id="90a67-338">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 호출 해야 합니다는 <xref:System.Net.Sockets.Socket.Listen%2A> 메서드를 수신 대기 하 고 들어오는 연결 요청을 큐 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-338">Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.</span></span>  
  
 <span data-ttu-id="90a67-339">구현 하는 콜백 메서드를 만들어야 합니다는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-339">You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="90a67-340">수신 대기 하는 전달 해야 최소한이 작업을 수행 하려면 <xref:System.Net.Sockets.Socket> 개체를 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 통해는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-340">To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter.</span></span> <span data-ttu-id="90a67-341">콜백에 자세한 정보를 저장 하는 작은 클래스를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-341">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-342">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-342">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-343">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-343">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method.</span></span> <span data-ttu-id="90a67-344">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginAccept%2A>, 시스템에서 일반적으로 지정 된 콜백 메서드를 실행 하는 별도 스레드를 사용 하 고 차단 <xref:System.Net.Sockets.Socket.EndAccept%2A> 보류 중인 연결을 검색할 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-344">When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.</span></span>  
  
 <span data-ttu-id="90a67-345"><xref:System.Net.Sockets.Socket.EndAccept%2A> 새 반환 <xref:System.Net.Sockets.Socket> 원격 호스트와 데이터를 송수신 하는 데 사용할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-345"><xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host.</span></span> <span data-ttu-id="90a67-346">반환 된이 사용할 수 없습니다 <xref:System.Net.Sockets.Socket> 연결 큐에서 모든 추가 연결을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-346">You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue.</span></span> <span data-ttu-id="90a67-347">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 사용 하 여 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-347">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-348">Set 메서드를 호출 하는 <xref:System.Threading.ManualResetEvent> 콜백 메서드에서 원래 스레드가 계속 실행 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-348">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span>  
  
 <span data-ttu-id="90a67-349">시스템 콜백 메서드를 호출 하는 호출 스레드를 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-349">The system may also use the calling thread to invoke the callback method.</span></span> <span data-ttu-id="90a67-350">이 경우에 <xref:System.IAsyncResult.CompletedSynchronously%2A> 속성에서 반환 된 <xref:System.IAsyncResult> 나타내기 위해 설정할 수는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드가 동기적으로 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-350">In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method completed synchronously.</span></span>  
  
 <span data-ttu-id="90a67-351">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 하십시오. [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-351">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-352">에 대 한 보류 중인 호출을 취소 하 고 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 닫고는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-352">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-353">경우는 <xref:System.Net.Sockets.Socket.Close%2A> 메서드가 비동기 작업이 진행 중인 동안에 호출 되 면에 제공 된 콜백은 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-353">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.</span></span>  <span data-ttu-id="90a67-354">한 후속 호출에는 <xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드는 throw 한 <xref:System.ObjectDisposedException> 를 나타내는 작업이 취소 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-354">A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-355">사용할 수는 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 반환 된 속성 <xref:System.Net.Sockets.Socket> 원격 호스트의 네트워크 주소와 포트 번호를 식별 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-355">You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-356">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-356">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-357">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-357">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-358">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-358">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-359">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-359">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-360">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-360">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-361">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-361">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-362">다음 코드 예제에서는 소켓을 열고은 비동기 연결을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-362">The following code example opens a socket and accepts an asynchronous connection.</span></span> <span data-ttu-id="90a67-363">이 예제에서는 소켓 수락 초기 10 바이트의 데이터 및 `acceptSocket` 매개 변수는 `null`, 입니다는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 받아들인된 소켓 만드는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-363">In this example, the socket accepts the initial 10 bytes of data and the `acceptSocket` parameter is `null`, which forces the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to create the accepted socket.</span></span> <span data-ttu-id="90a67-364">받은 바이트 수와 데이터는으로 콘솔에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-364">The number of bytes received and the data are displayed on the console by the callback delegate.</span></span> <span data-ttu-id="90a67-365">참조 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 나머지 데이터를 수신 하는 방법에 대 한 설명을 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-365">See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#7)]
 [!code-csharp[NCLSocketEnhancements#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-366"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-366">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-367">이 메서드에는 Windows NT가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-367">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-368">받아들이는 소켓이 연결을 수신하지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-368">The accepting socket is not listening for connections.</span></span> <span data-ttu-id="90a67-369"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />를 호출하기 전에 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 및 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />을 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-369">You must call <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> and <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> before calling <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span>  
  
 <span data-ttu-id="90a67-370">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-370">-or-</span></span>  
  
 <span data-ttu-id="90a67-371">받아들여진 소켓이 바인딩된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-371">The accepted socket is bound.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-372"><paramref name="receiveSize" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-372"><paramref name="receiveSize" /> is less than 0.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-373">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-373">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginConnect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-374">원격 호스트 연결에 대한 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-374">Begins an asynchronous request for a remote host connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.EndPoint remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (remoteEP As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::EndPoint ^ remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.EndPoint end_point, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.EndPoint end_point, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (end_point As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::EndPoint ^ end_point, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="end_point" Type="System.Net.EndPoint" Index="0" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="1" />
        <Parameter Name="state" Type="System.Object" Index="2" />
      </Parameters>
      <Docs>
        <param name="remoteEP">To be added.</param>
        <param name="end_point">To be added.</param>
        <param name="callback"><span data-ttu-id="90a67-375"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-375">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-376">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-376">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-377">원격 호스트 연결에 대한 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-377">Begins an asynchronous request for a remote host connection.</span></span></summary>
        <returns><span data-ttu-id="90a67-378">비동기 연결을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-378">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-379">연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 에 대 한 연결에 대 한 비동기 요청을 시작 하는 메서드는 `remoteEP` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-379">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method starts an asynchronous request for a connection to the `remoteEP` parameter.</span></span> <span data-ttu-id="90a67-380">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-380">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.BeginConnect%2A> establishes a default remote host.</span></span> <span data-ttu-id="90a67-381">연결 또는 기본 원격 호스트를 비동기적으로 설정 하면 별도 실행 스레드 내에서 데이터를 주고받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-381">Connecting or setting the default remote host asynchronously gives you the ability to send and receive data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="90a67-382">구현 하는 콜백 메서드를 만들 수는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-382">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method.</span></span> <span data-ttu-id="90a67-383">최소한, 전달 해야 합니다는 <xref:System.Net.Sockets.Socket> 를 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 통해는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-383">At the very minimum, you must pass the <xref:System.Net.Sockets.Socket> to <xref:System.Net.Sockets.Socket.BeginConnect%2A> through the `state` parameter.</span></span> <span data-ttu-id="90a67-384">콜백에 자세한 정보를 저장 하는 작은 클래스를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket>, 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-384">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information.</span></span> <span data-ttu-id="90a67-385">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-385">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-386">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-386">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="90a67-387">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginConnect%2A>, 시스템 사용 하 여 별도 스레드에서 지정 된 콜백 메서드를 실행 하 고 차단 합니다 <xref:System.Net.Sockets.Socket.EndConnect%2A> 될 때까지 <xref:System.Net.Sockets.Socket> 성공적으로 연결 하거나 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-387">When your application calls <xref:System.Net.Sockets.Socket.BeginConnect%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndConnect%2A> until the <xref:System.Net.Sockets.Socket> connects successfully or throws an exception.</span></span> <span data-ttu-id="90a67-388">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 사용 하 여 <xref:System.Threading.WaitHandle.WaitOne%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-388">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="90a67-389">Set 메서드를 호출 하는 <xref:System.Threading.ManualResetEvent> 콜백 메서드에서 원래 스레드가 계속 실행 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-389">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="90a67-390">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-390">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-391">UDP 같은 연결 없는 프로토콜을 사용 하는 경우 호출할 필요가 없습니다 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 데이터 보내기 및 받기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-391">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.BeginConnect%2A> before sending and receiving data.</span></span> <span data-ttu-id="90a67-392">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 및 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 원격 호스트와 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-392">You can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> to communicate with a remote host.</span></span> <span data-ttu-id="90a67-393">호출 하면 <xref:System.Net.Sockets.Socket.BeginConnect%2A>, 지정된 된 기본 아닌 주소에서 도착 하는 모든 데이터 그램 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-393">If you do call <xref:System.Net.Sockets.Socket.BeginConnect%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="90a67-394">기본 원격 호스트 브로드캐스트 주소를 설정 하려면 먼저 호출 해야 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-394">If you wish to set your default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="90a67-395">수 없는 경우 <xref:System.Net.Sockets.Socket.BeginConnect%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-395">If you cannot, <xref:System.Net.Sockets.Socket.BeginConnect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-396">연결 지향 프로토콜을 사용 하 고 호출 하지 않으면 <xref:System.Net.Sockets.Socket.Bind%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginConnect%2A>, 기본 서비스 공급자가 가장 적절 한 로컬 네트워크 주소와 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-396">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.BeginConnect%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="90a67-397">호출 하기 전에 서비스 공급자가 로컬 네트워크 주소와 포트 번호는 연결 없는 프로토콜을 사용 하는 경우 할당 된 <xref:System.Net.Sockets.Socket.BeginSend%2A> 또는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-397">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-398">기본 원격 호스트를 변경 하려는 경우에 호출 된 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 원하는 끝점을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-398">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="90a67-399">에 대 한 보류 중인 호출을 취소 하 고 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 닫고는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-399">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-400">경우는 <xref:System.Net.Sockets.Socket.Close%2A> 메서드가 비동기 작업이 진행 중인 동안에 호출 되 면에 제공 된 콜백은 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-400">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="90a67-401">한 후속 호출에는 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드는 throw 한 <xref:System.ObjectDisposedException> 를 나타내는 작업이 취소 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-401">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-402">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-402">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-403">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-403">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-404">이 소켓의 이전 연결이 끊어지면 다음 경우 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 작업이 완료 될 때까지 종료 되지 않는 스레드에서 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-404">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="90a67-405">기본 공급자의 제한 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-405">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-406">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-406">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-407">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-407">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-408">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-408">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-409">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-409">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-410">다음 코드 예제에서는 비동기 연결 시도 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-410">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Async_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Async_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-411"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-411"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-412">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-412">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-413"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-413">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-414">호출 스택의 상위 호출자에게 요청된 작업을 수행할 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-414">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-415"><see cref="T:System.Net.Sockets.Socket" />이 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />을 호출하여 수신 상태에 배치되었거나 비동기 작업이 이미 진행 중입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-415">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span></span></exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" />
        <Parameter Name="port" Type="System.Int32" Index="1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="state" Type="System.Object" Index="3" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="90a67-416">원격 호스트의 <see cref="T:System.Net.IPAddress" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-416">The <see cref="T:System.Net.IPAddress" /> of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="90a67-417">원격 호스트의 포트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-417">The port number of the remote host.</span></span></param>
        <param name="requestCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state"><span data-ttu-id="90a67-418">연결 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-418">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="90a67-419">이 개체는 작업이 완료되면 <c>requestCallback</c> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-419">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="90a67-420">원격 호스트 연결에 대한 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-420">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="90a67-421">호스트는 <see cref="T:System.Net.IPAddress" />와 포트 번호로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-421">The host is specified by an <see cref="T:System.Net.IPAddress" /> and a port number.</span></span></summary>
        <returns><span data-ttu-id="90a67-422">비동기 연결을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-422">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-423">비동기 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 호출 하 여 작업을 완료 해야는 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-423">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="90a67-424">메서드는 일반적으로 `requestCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-424">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="90a67-425">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-425">This method does not block until the operation is complete.</span></span> <span data-ttu-id="90a67-426">작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 오버 로드 또는 <xref:System.Net.Sockets.Socket.EndConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-426">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads, or <xref:System.Net.Sockets.Socket.EndConnect%2A>.</span></span>  
  
 <span data-ttu-id="90a67-427">에 대 한 보류 중인 호출을 취소 하 고 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 닫고는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-427">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-428">경우는 <xref:System.Net.Sockets.Socket.Close%2A> 메서드가 비동기 작업이 진행 중인 동안에 호출 되 면에 제공 된 콜백은 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-428">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="90a67-429">한 후속 호출에는 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드는 throw 한 <xref:System.ObjectDisposedException> 를 나타내는 작업이 취소 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-429">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="90a67-430">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="90a67-430">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-431">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-431">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-432">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-432">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-433">이 소켓의 이전 연결이 끊어지면 다음 경우 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 작업이 완료 될 때까지 종료 되지 않는 스레드에서 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-433">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="90a67-434">기본 공급자의 제한 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-434">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="90a67-435">또한는 <xref:System.Net.EndPoint> 즉 사용 되는 서로 달라 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-435">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-436">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-436">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-437">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-437">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-438">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-438">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-439">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-439">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-440">다음 코드 예제에서는 비동기 연결 시도 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-440">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#7)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-441"><paramref name="address" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-441"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-442">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-442">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-443"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-443">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-444"><see cref="T:System.Net.Sockets.Socket" />이 소켓 패밀리에 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-444">The <see cref="T:System.Net.Sockets.Socket" /> is not in the socket family.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-445">포트 번호가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-445">The port number is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-446"><paramref name="address" />의 길이가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-446">The length of <paramref name="address" /> is zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-447"><see cref="T:System.Net.Sockets.Socket" />이 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />을 호출하여 수신 상태에 배치되었거나 비동기 작업이 이미 진행 중입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-447">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span></span></exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" Index="0" />
        <Parameter Name="port" Type="System.Int32" Index="1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="state" Type="System.Object" Index="3" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="90a67-448">원격 호스트를 지정하는 하나 이상의 <see cref="T:System.Net.IPAddress" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-448">At least one <see cref="T:System.Net.IPAddress" />, designating the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="90a67-449">원격 호스트의 포트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-449">The port number of the remote host.</span></span></param>
        <param name="requestCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state"><span data-ttu-id="90a67-450">연결 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-450">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="90a67-451">이 개체는 작업이 완료되면 <c>requestCallback</c> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-451">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="90a67-452">원격 호스트 연결에 대한 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-452">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="90a67-453">호스트는 <see cref="T:System.Net.IPAddress" /> 배열과 포트 번호로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-453">The host is specified by an <see cref="T:System.Net.IPAddress" /> array and a port number.</span></span></summary>
        <returns><span data-ttu-id="90a67-454">비동기 연결을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-454">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connections.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-455">비동기 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 호출 하 여 작업을 완료 해야는 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-455">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="90a67-456">메서드는 일반적으로 `requestCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-456">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="90a67-457">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-457">This method does not block until the operation is complete.</span></span> <span data-ttu-id="90a67-458">작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-458">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="90a67-459">에 대 한 보류 중인 호출을 취소 하 고 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 닫고는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-459">To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-460">경우는 <xref:System.Net.Sockets.Socket.Close%2A> 메서드가 비동기 작업이 진행 중인 동안에 호출 되 면에 제공 된 콜백은 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-460">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="90a67-461">한 후속 호출에는 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드는 throw 한 <xref:System.ObjectDisposedException> 를 나타내는 작업이 취소 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-461">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="90a67-462">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-462">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-463">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-463">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-464">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-464">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-465">이 소켓의 이전 연결이 끊어지면 다음 경우 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 작업이 완료 될 때까지 종료 되지 않는 스레드에서 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-465">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="90a67-466">기본 공급자의 제한 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-466">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="90a67-467">또한는 <xref:System.Net.EndPoint> 즉 사용 되는 서로 달라 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-467">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-468">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-468">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-469">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-469">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-470">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-470">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-471">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-471">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-472">다음 코드 예제에서는 비동기 연결 시도 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-472">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#2)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-473"><paramref name="addresses" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-473"><paramref name="addresses" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-474">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-474">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-475"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-475">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-476">이 메서드는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />를 사용하는 소켓에 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-476">This method is valid for sockets that use <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-477">포트 번호가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-477">The port number is not valid.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-478"><paramref name="address" />의 길이가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-478">The length of <paramref name="address" /> is zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-479"><see cref="T:System.Net.Sockets.Socket" />이 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />을 호출하여 수신 상태에 배치되었거나 비동기 작업이 이미 진행 중입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-479">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span></span></exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" Index="0" />
        <Parameter Name="port" Type="System.Int32" Index="1" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="2" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="state" Type="System.Object" Index="3" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="90a67-480">원격 호스트의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-480">The name of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="90a67-481">원격 호스트의 포트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-481">The port number of the remote host.</span></span></param>
        <param name="requestCallback">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state"><span data-ttu-id="90a67-482">연결 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-482">A user-defined object that contains information about the connect operation.</span></span> <span data-ttu-id="90a67-483">이 개체는 작업이 완료되면 <c>requestCallback</c> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-483">This object is passed to the <c>requestCallback</c> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="90a67-484">원격 호스트 연결에 대한 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-484">Begins an asynchronous request for a remote host connection.</span></span> <span data-ttu-id="90a67-485">호스트는 호스트 이름과 포트 번호로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-485">The host is specified by a host name and a port number.</span></span></summary>
        <returns><span data-ttu-id="90a67-486">비동기 연결을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-486">An <see cref="T:System.IAsyncResult" /> that references the asynchronous connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-487">비동기 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 호출 하 여 작업을 완료 해야는 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-487">The asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="90a67-488">메서드는 일반적으로 `requestCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-488">Typically, the method is invoked by the `requestCallback` delegate.</span></span>  
  
 <span data-ttu-id="90a67-489">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-489">This method does not block until the operation is complete.</span></span> <span data-ttu-id="90a67-490">작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-490">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.</span></span>  
  
 <span data-ttu-id="90a67-491">에 대 한 보류 중인 호출을 취소 하 고 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 닫고는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-491">To cancel a pending call to the  <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-492">경우는 <xref:System.Net.Sockets.Socket.Close%2A> 메서드가 비동기 작업이 진행 중인 동안에 호출 되 면에 제공 된 콜백은 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-492">When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.</span></span>  <span data-ttu-id="90a67-493">한 후속 호출에는 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드는 throw 한 <xref:System.ObjectDisposedException> 를 나타내는 작업이 취소 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-493">A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.</span></span>  
  
 <span data-ttu-id="90a67-494">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="90a67-494">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-495">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-495">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-496">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-496">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-497">이 소켓의 이전 연결이 끊어지면 다음 경우 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 작업이 완료 될 때까지 종료 되지 않는 스레드에서 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-497">If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete.</span></span> <span data-ttu-id="90a67-498">기본 공급자의 제한 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-498">This is a limitation of the underlying provider.</span></span> <span data-ttu-id="90a67-499">또한는 <xref:System.Net.EndPoint> 즉 사용 되는 서로 달라 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-499">Also the <xref:System.Net.EndPoint> that is used must be different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-500">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-500">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-501">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-501">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-502">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-502">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-503">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-503">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-504">다음 코드 예제에서는 비동기 연결 시도 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-504">The following code example initiates an asynchronous connection attempt.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#1)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#1)]  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#3)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-505"><paramref name="host" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-505"><paramref name="host" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-506"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-506">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-507">이 메서드는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 제품군의 소켓에 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-507">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-508">포트 번호가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-508">The port number is not valid.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-509"><see cref="T:System.Net.Sockets.Socket" />이 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />을 호출하여 수신 상태에 배치되었거나 비동기 작업이 이미 진행 중입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-509">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, or an asynchronous operation is already in progress.</span></span></exception>
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginDisconnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginDisconnect (bool reuseSocket, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginDisconnect(bool reuseSocket, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginDisconnect (reuseSocket As Boolean, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginDisconnect(bool reuseSocket, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseSocket" Type="System.Boolean" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reuseSocket">
          <span data-ttu-id="90a67-510">연결을 닫은 다음 이 소켓을 다시 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-510"><see langword="true" /> if this socket can be reused after the connection is closed; otherwise, <see langword="false" />.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-511"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-511">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-512">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-512">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-513">원격 끝점과의 연결을 끊는 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-513">Begins an asynchronous request to disconnect from a remote endpoint.</span></span></summary>
        <returns><span data-ttu-id="90a67-514">비동기 작업을 참조하는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-514">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-515">연결 지향 프로토콜을 사용 하는 경우 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> 메서드를 원격 끝점에서 연결 끊기에 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-515">If you are using a connection-oriented protocol, you can call the <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> method to request a disconnect from a remote endpoint.</span></span> <span data-ttu-id="90a67-516">경우 `reuseSocket` 은 `true`, 소켓 다시 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-516">If `reuseSocket` is `true`, you can reuse the socket.</span></span>  
  
 <span data-ttu-id="90a67-517"><xref:System.Net.Sockets.Socket.BeginDisconnect%2A> 메서드는 별도 스레드를 사용 하 여 지정된 된 콜백 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-517">The <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> method uses a separate thread to invoke the specified callback method.</span></span> <span data-ttu-id="90a67-518"><xref:System.Net.Sockets.Socket.EndDisconnect%2A> 완료 될 때까지 보류 중인 연결 끊기 메서드가 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-518">The <xref:System.Net.Sockets.Socket.EndDisconnect%2A> method blocks until the pending disconnect is complete.</span></span> <span data-ttu-id="90a67-519">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 하십시오. [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-519">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-520">표시 되 면 한 <xref:System.Net.Sockets.SocketException> 예외를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-520">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-521">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-521">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-522">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-522">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-523">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-523">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-524">다음 코드 예제에서는 비동기 통신에 대 한 소켓을 만들고 원격 호스트에 일부 데이터를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-524">The following code example creates a socket for asynchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="90a67-525">데이터를 보낼 때 <xref:System.Net.Sockets.Socket.Shutdown%2A> 송신을 중지 하 고 작업을 수신 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-525">When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity.</span></span> <span data-ttu-id="90a67-526">그런 다음 <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> 연결 끊기 요청을 시작 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-526">Then <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> is called to begin a disconnect request.</span></span> <span data-ttu-id="90a67-527">요청이 완료 되는 <xref:System.Net.Sockets.Socket.Connected%2A> 속성은 소켓의 연결이 있는지 여부를 테스트 쿼리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-527">When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#11)]
 [!code-csharp[Nclsocketenhancements#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-528">이 메서드에는 Windows XP가 필요한데 운영 체제가 Windows 2000 또는 그 이전 버전인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-528">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-529"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-529">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-530">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-530">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-531">연결된 <see cref="T:System.Net.Sockets.Socket" />에서 데이터를 비동기적으로 받기 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-531">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-532">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-532">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-533"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-533">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-534">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-534">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-535">수신 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-535">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="90a67-536">이 개체는 작업이 완료되면 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-536">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="90a67-537">연결된 <see cref="T:System.Net.Sockets.Socket" />에서 데이터를 비동기적으로 받기 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-537">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-538">비동기 읽기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-538">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-539">비동기 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 호출 하 여 작업을 완료 해야는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-539">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="90a67-540">메서드는 일반적으로 `callback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-540">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="90a67-541">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-541">This method does not block until the operation is complete.</span></span> <span data-ttu-id="90a67-542">작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-542">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="90a67-543">취소 하는 보류 중인 <xref:System.Net.Sockets.Socket.BeginReceive%2A>, 호출 된 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-543">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-544">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-544">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-545">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-545">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-546">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-546">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-547">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-547">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-548">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-548">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-549">`state` 사용자 정의 클래스의 인스턴스화가입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-549">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-550">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-550">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-551">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-551">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-552">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-552">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-553">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-553">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-554"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-554"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-555">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-555">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="90a67-556"><see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-556"><see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-557">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-557">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-558"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-558">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="90a67-559">소켓 오류를 저장하는 <see cref="T:System.Net.Sockets.SocketError" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-559">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-560">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-560">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-561">수신 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-561">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="90a67-562">이 개체는 작업이 완료되면 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-562">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="90a67-563">연결된 <see cref="T:System.Net.Sockets.Socket" />에서 데이터를 비동기적으로 받기 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-563">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-564">비동기 읽기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-564">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-565">비동기 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 호출 하 여 작업을 완료 해야는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-565">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="90a67-566">메서드는 일반적으로 `callback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-566">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="90a67-567">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-567">This method does not block until the operation is complete.</span></span> <span data-ttu-id="90a67-568">작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-568">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="90a67-569">취소 하는 보류 중인 <xref:System.Net.Sockets.Socket.BeginReceive%2A>, 호출 된 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-569">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-570">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-570">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-571">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-571">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-572">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-572">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-573">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-573">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-574">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-574">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-575">`state` 사용자 정의 클래스의 인스턴스화가입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-575">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-576">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-576">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-577">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-577">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-578">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-578">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-579">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-579">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-580"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-580"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-581">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-581">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="90a67-582"><see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-582"><see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" />
        <Parameter Name="state" Type="System.Object" Index="5" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-583">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-583">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-584">받은 데이터를 저장하기 위한 <c>buffer</c> 매개 변수의 위치(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-584">The zero-based position in the <c>buffer</c> parameter at which to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-585">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-585">The number of bytes to receive.</span></span></param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="callback"><span data-ttu-id="90a67-586">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-586">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-587">수신 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-587">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="90a67-588">이 개체는 작업이 완료되면 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-588">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="90a67-589">연결된 <see cref="T:System.Net.Sockets.Socket" />에서 데이터를 비동기적으로 받기 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-589">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-590">비동기 읽기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-590">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-591">비동기 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 호출 하 여 작업을 완료 해야는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-591">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="90a67-592">메서드는 일반적으로 `callback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-592">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="90a67-593">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-593">This method does not block until the operation is complete.</span></span> <span data-ttu-id="90a67-594">작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-594">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="90a67-595">취소 하는 보류 중인 <xref:System.Net.Sockets.Socket.BeginReceive%2A>, 호출 된 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-595">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-596">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-596">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-597">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-597">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-598">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-598">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-599">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-599">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-600">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-600">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-601">`state` 사용자 정의 클래스의 인스턴스화가입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-601">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-602">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-602">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-603">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-603">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-604">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-604">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-605">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-605">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-606">다음 코드 예제에서는 비동기적으로 연결 된 데이터를 수신 하기 시작 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-606">The following code example begins to asynchronously receive data from a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#11)]
 [!code-csharp[Socket_Async_Send_Receive#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#11)]
 [!code-vb[Socket_Async_Send_Receive#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#11)]  
  
 [!code-cpp[Socket_Async_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Async_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Async_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#7)]  
  
 [!code-cpp[Socket_Async_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Async_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Async_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-607"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-607"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-608">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-608">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="90a67-609"><see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-609"><see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-610"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-610"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-611">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-611">-or-</span></span>  
  
 <span data-ttu-id="90a67-612"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-612"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-613">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-613">-or-</span></span>  
  
 <span data-ttu-id="90a67-614"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-614"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-615">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-615">-or-</span></span>  
  
 <span data-ttu-id="90a67-616"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-616"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags flags, out System.Net.Sockets.SocketError error, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags flags, [out] valuetype System.Net.Sockets.SocketError&amp; error, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (buffer As Byte(), offset As Integer, size As Integer, flags As SocketFlags, ByRef error As SocketError, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags flags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % error, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="error" Type="System.Net.Sockets.SocketError&amp;" RefType="out" Index="4" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" />
        <Parameter Name="state" Type="System.Object" Index="6" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-617">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-617">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-618">받은 데이터를 저장할 <c>버퍼</c> 내의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-618">The location in <c>buffer</c> to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-619">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-619">The number of bytes to receive.</span></span></param>
        <param name="socketFlags">To be added.</param>
        <param name="flags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <param name="error">To be added.</param>
        <param name="callback"><span data-ttu-id="90a67-620">작업이 완료되었을 때 호출할 메서드를 참조하는 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-620">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-621">수신 작업에 대한 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-621">A user-defined object that contains information about the receive operation.</span></span> <span data-ttu-id="90a67-622">이 개체는 작업이 완료되면 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 대리자에게 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-622">This object is passed to the <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="90a67-623">연결된 <see cref="T:System.Net.Sockets.Socket" />에서 데이터를 비동기적으로 받기 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-623">Begins to asynchronously receive data from a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-624">비동기 읽기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-624">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-625">비동기 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 호출 하 여 작업을 완료 해야는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-625">The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method.</span></span> <span data-ttu-id="90a67-626">메서드는 일반적으로 `callback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-626">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="90a67-627">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-627">This method does not block until the operation is complete.</span></span> <span data-ttu-id="90a67-628">작업이 완료 될 때까지 차단 하려면 중 사용 된 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-628">To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.</span></span>  
  
 <span data-ttu-id="90a67-629">취소 하는 보류 중인 <xref:System.Net.Sockets.Socket.BeginReceive%2A>, 호출 된 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-629">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-630">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-630">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-631">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-631">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-632">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-632">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-633">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-633">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-634">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-634">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-635">`state` 사용자 정의 클래스의 인스턴스화가입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-635">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-636">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-636">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-637">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-637">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-638">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-638">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-639">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-639">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-640"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-640"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-641">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-641">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="90a67-642"><see cref="T:System.Net.Sockets.Socket" />이 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-642"><see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-643"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-643"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-644">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-644">-or-</span></span>  
  
 <span data-ttu-id="90a67-645"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-645"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-646">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-646">-or-</span></span>  
  
 <span data-ttu-id="90a67-647"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-647"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-648">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-648">-or-</span></span>  
  
 <span data-ttu-id="90a67-649"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-649"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFrom">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, ref System.Net.EndPoint remote_end, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.Net.EndPoint&amp; remote_end, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFrom (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, ByRef remote_end As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, System::Net::EndPoint ^ % remote_end, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="remote_end" Type="System.Net.EndPoint&amp;" RefType="ref" Index="4" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" />
        <Parameter Name="state" Type="System.Object" Index="6" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-650">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-650">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-651">데이터를 저장하기 위한 <c>buffer</c> 매개 변수의 위치(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-651">The zero-based position in the <c>buffer</c> parameter at which to store the data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-652">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-652">The number of bytes to receive.</span></span></param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="remoteEP">To be added.</param>
        <param name="remote_end">To be added.</param>
        <param name="callback"><span data-ttu-id="90a67-653"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-653">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-654">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-654">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-655">지정된 네트워크 장치에서 비동기적으로 데이터를 받기 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-655">Begins to asynchronously receive data from a specified network device.</span></span></summary>
        <returns><span data-ttu-id="90a67-656">비동기 읽기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-656">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-657"><xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드가 비동기적으로 원격 호스트에서 연결 없는 데이터 그램을 읽기 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-657">The <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method starts asynchronously reading connectionless datagrams from a remote host.</span></span> <span data-ttu-id="90a67-658">호출 된 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드는 별도 실행 스레드 내에서 데이터를 수신할 수 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-658">Calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method gives you the ability to receive data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="90a67-659">구현 하는 콜백 메서드를 만들 수는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-659">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-660">최소한,이 수행 하려면 프로그램 `state` 매개 변수는 연결을 포함 해야 합니다 또는 기본 <xref:System.Net.Sockets.Socket> 통신에 사용 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-660">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="90a67-661">콜백에 자세한 정보를 저장 하는 작은 클래스를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-661">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-662">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-662">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-663">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-663">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-664">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>시스템에서 지정 된 콜백 메서드를 실행 하는 별도 스레드를 사용 하 고 차단 합니다 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> 될 때까지 <xref:System.Net.Sockets.Socket> 데이터를 읽거나 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-664">When your application calls <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, the system will use a separate thread to execute the specified callback method, and it will block on <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> until the <xref:System.Net.Sockets.Socket> reads data or throws an exception.</span></span> <span data-ttu-id="90a67-665">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드를 사용 하 여 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-665">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-666">원래 스레드가 계속 실행 하려는 경우 콜백 메서드에서 받으며에서 Set 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-666">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="90a67-667">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 하십시오. [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-667">For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-668">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, 명시적으로 바인딩해야는 <xref:System.Net.Sockets.Socket> 사용 하 여 로컬 끝점에는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드, 또는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-668">Before calling <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method, or <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-669">이 메서드는 데이터를 읽습니다는 `buffer` 매개 변수를 캡처 원격 데이터를 전송 하는 끝점을 호스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-669">This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent.</span></span> <span data-ttu-id="90a67-670">이 끝점을 검색 하는 방법에 대 한 내용은를 참조 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-670">For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>.</span></span> <span data-ttu-id="90a67-671">이 메서드는 비동기적으로 알 수 없는 호스트 또는 여러 호스트에서 연결 없는 데이터 그램을 수신 하려는 경우 가장 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-671">This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts.</span></span> <span data-ttu-id="90a67-672">이러한 경우 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 는 로컬 네트워크 버퍼에 받은 첫 큐에 대기 된 데이터 그램을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-672">In these cases, <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="90a67-673">나타나면 데이터 그램의 크기 보다 큰 경우 `buffer`, <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드를 채워 `buffer` 와 가능한 한 throw 그대로 만큼는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-673">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-674">신뢰할 수 없는 프로토콜을 사용 하는 경우에 초과 데이터는 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-674">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="90a67-675">신뢰할 수 있는 프로토콜을 사용 하는, 초과 데이터는 서비스 공급자에 의해 유지 되 고 호출 하 여 검색할 수 있습니다는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 너무 큰 버퍼를 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-675">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="90a67-676">원격 호스트의 끝점이 항상 반환, 응용 프로그램을 명시적으로 바인딩해야 보장 하려면는 <xref:System.Net.Sockets.Socket> 사용 하 여 로컬 끝점에는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드와 호출 합니다는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드는 `optionLevel` 로매개변수설정<xref:System.Net.Sockets.SocketOptionLevel.IP>또는 <xref:System.Net.Sockets.SocketOptionLevel.IPv6> 를 적절 하 게는 `optionName` 매개 변수 설정 <xref:System.Net.Sockets.SocketOptionName.PacketInformation>, 및 `optionValue` 호출 하기 전에이 옵션을 사용 하도록 설정 하려면 매개 변수는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-676">To guarantee that the remote host endpoint is always returned, an application should explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method and then call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method with the `optionLevel` parameter set to <xref:System.Net.Sockets.SocketOptionLevel.IP> or <xref:System.Net.Sockets.SocketOptionLevel.IPv6> as appropriate, the `optionName` parameter set to <xref:System.Net.Sockets.SocketOptionName.PacketInformation>, and the `optionValue` parameter to enable this option before calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-677">그렇지 않으면 반환 되지 않을 때 보낸 데이터 그램의 수는 수신기가 호출 되기 전에 원격 호스트 끝점에 대 한 가능한은 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-677">Otherwise, it is possible for the remote host endpoint to not be returned when the sender has sent a number of datagrams before the receiver has called the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-678">하지만 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 연결 없는 프로토콜을 위한 것은 연결 지향 프로토콜도 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-678">Although <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="90a67-679">그렇게 하도록 선택할 경우 먼저 중 하나는 원격 호스트 연결을 설정 해야를 호출 하 여는 <xref:System.Net.Sockets.Socket.Connect%2A>  /  <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 호출 하 여 연결 요청을 수락 하거나는 <xref:System.Net.Sockets.Socket.Accept%2A> 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-679">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> / <xref:System.Net.Sockets.Socket.BeginConnect%2A> method or accept an incoming connection request by calling the <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="90a67-680">호출 하는 경우는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 설정 또는 연결을 허용 하기 전에 메서드를 얻게 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-680">If you call the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method before establishing or accepting a connection, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-681">호출 하기 전에 연결 없는 프로토콜에 대 한 기본 원격 호스트를 설정할 수도 있습니다는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-681">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-682">두이 경우 모두에 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드는 무시는 `remoteEP` 매개 변수에서 연결 된 데이터 또는 기본 원격 호스트를 받기만 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-682">In either of these cases, the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="90a67-683">연결 지향 소켓 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 을 사용 하 여 지정 된 바이트 수의 데이터 읽습니다는 `size` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-683">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> will read as much data as is available up to the number of bytes specified by the `size` parameter.</span></span>  
  
 <span data-ttu-id="90a67-684">취소 하는 보류 중인 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, 호출 된 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-684">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-685">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-685">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-686">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-686">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-687">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-687">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-688">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-688">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-689">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-689">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-690">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-690">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-691">다음 코드 예제는 원격 호스트에서 연결 없는 데이터 그램을 비동기적으로 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-691">The following code example asynchronously receives connectionless datagrams from a remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#41](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#41)]
 [!code-csharp[Socket_Async_Send_Receive#41](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#41)]
 [!code-vb[Socket_Async_Send_Receive#41](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-692"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-692"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-693">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-693">-or-</span></span>  
  
 <span data-ttu-id="90a67-694"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-694"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-695">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-695">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-696"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-696"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-697">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-697">-or-</span></span>  
  
 <span data-ttu-id="90a67-698"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-698"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-699">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-699">-or-</span></span>  
  
 <span data-ttu-id="90a67-700"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-700"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-701">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-701">-or-</span></span>  
  
 <span data-ttu-id="90a67-702"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-702"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-703"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-703">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-704">호출 스택의 상위 호출자에게 요청된 작업을 수행할 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-704">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveMessageFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveMessageFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveMessageFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-705">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-705">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-706">데이터를 저장하기 위한 <c>buffer</c> 매개 변수의 위치(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-706">The zero-based position in the <c>buffer</c> parameter at which to store the data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-707">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-707">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-708"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-708">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-709">데이터의 소스를 나타내는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-709">An <see cref="T:System.Net.EndPoint" /> that represents the source of the data.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-710"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-710">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-711">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-711">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-712">비동기적으로 지정된 <see cref="T:System.Net.Sockets.SocketFlags" />를 사용하여 데이터 버퍼의 특정 위치로 원하는 바이트 수의 데이터를 받고 끝점 및 패킷 정보를 저장하는 작업을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-712">Begins to asynchronously receive the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint and packet information..</span></span></summary>
        <returns><span data-ttu-id="90a67-713">비동기 읽기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-713">An <see cref="T:System.IAsyncResult" /> that references the asynchronous read.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-714">비동기 수신 작업을 호출 하 여 완료 해야 합니다는 <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-714">The asynchronous receive operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom%2A> method.</span></span> <span data-ttu-id="90a67-715">메서드는 일반적으로 `asyncCallback` 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-715">Typically, the method is invoked by the `asyncCallback` delegate.</span></span>  
  
 <span data-ttu-id="90a67-716">이 메서드는 작업이 완료 될 때까지 차단 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-716">This method does not block until the operation completes.</span></span> <span data-ttu-id="90a67-717">작업이 완료 될 때까지 차단 된 <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-717">To block until the operation completes, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-718">취소 하는 보류 중인 <xref:System.Net.Sockets.Socket.BeginReceiveMessageFrom%2A>, 호출 된 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-718">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceiveMessageFrom%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-719">비동기 프로그래밍 모델을 사용 하는 방법에 대 한 자세한 내용은 참조 [대](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="90a67-719">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="90a67-720">이 메서드는 데이터를 읽습니다는 `buffer` 받은 패킷에 대 한 정보 뿐만 아니라 매개 변수를 캡처 원격 호스트 된 데이터 전송 되는 끝점입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-720">This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent, as well as information about the received packet.</span></span> <span data-ttu-id="90a67-721">이 끝점을 검색 하는 방법에 대 한 내용은를 참조 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-721">For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>.</span></span> <span data-ttu-id="90a67-722">이 메서드는 비동기적으로 알 수 없는 호스트 또는 여러 호스트에서 연결 없는 데이터 그램을 수신 하려는 경우 가장 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-722">This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-723">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-723">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-724">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-724">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-725">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-725">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-726">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-726">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-727">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-727">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-728">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-728">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-729"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-729"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-730">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-730">-or-</span></span>  
  
 <span data-ttu-id="90a67-731"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-731"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-732">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-732">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-733"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-733"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-734">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-734">-or-</span></span>  
  
 <span data-ttu-id="90a67-735"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-735"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-736">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-736">-or-</span></span>  
  
 <span data-ttu-id="90a67-737"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-737"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-738">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-738">-or-</span></span>  
  
 <span data-ttu-id="90a67-739"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-739"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-740"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-740">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-741">이 메서드에는 Windows XP가 필요한데 운영 체제가 Windows 2000 또는 그 이전 버전인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-741">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-742">연결된 <see cref="T:System.Net.Sockets.Socket" />에 데이터를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-742">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-743">보낼 데이터를 포함하는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-743">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-744"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-744">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-745"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-745">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-746">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-746">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-747">연결된 <see cref="T:System.Net.Sockets.Socket" />에 데이터를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-747">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-748">비동기 보내기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-748">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-749"><xref:System.Net.Sockets.Socket.BeginSend%2A> 에 설정 된 원격 호스트에 비동기 발신 작업을 시작 하는 메서드는 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-749">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="90a67-750"><xref:System.Net.Sockets.Socket.BeginSend%2A> 먼저 호출 하지 않으면 예외가 throw 됩니다 <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-750"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-751">호출 된 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드는 별도 실행 스레드 내에서 데이터를 보내는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-751">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="90a67-752">구현 하는 콜백 메서드를 만들 수는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-752">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="90a67-753">최소한,이 수행 하려면 프로그램 `state` 매개 변수는 연결을 포함 해야 합니다 또는 기본 <xref:System.Net.Sockets.Socket> 통신에 사용 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-753">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="90a67-754">콜백에 자세한 정보를 작은 클래스 또는 저장할 구조를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-754">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-755">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-755">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-756">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndSend%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-756">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="90a67-757">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginSend%2A>, 시스템 사용 하 여 별도 스레드에서 지정 된 콜백 메서드를 실행 하 고 차단 합니다 <xref:System.Net.Sockets.Socket.EndSend%2A> 될 때까지 <xref:System.Net.Sockets.Socket> 요청 된 바이트의 번호를 전송 하거나 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-757">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="90a67-758">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드를 사용 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-758">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90a67-759">원래 스레드가 계속 실행 하려는 경우 콜백 메서드에서 받으며에서 Set 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-759">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="90a67-760">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-760">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-761">연결 지향 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.BeginSend%2A> 를 먼저 호출 연결 없는 프로토콜에 대해서도 작동는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-761">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="90a67-762">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야 <xref:System.Net.Sockets.Socket.BeginSendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-762">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="90a67-763">사용 하 여 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-763">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-764">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.BeginSend%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-764">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-765">연결 없는 프로토콜 사용도 해야 버퍼의 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-765">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-766">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.BeginSend%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-766">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-767">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-767">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-768">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-768">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-769">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-769">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-770">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-770">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-771">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-771">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-772">`state` 사용자 정의 클래스의 인스턴스화가입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-772">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-773">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-773">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-774">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-774">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-775">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-775">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-776">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-776">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-777">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-777">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-778">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-778">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-779"><paramref name="buffers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-779"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-780"><paramref name="buffers" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-780"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-781">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-781">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-782">아래의 설명 부분을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-782">See remarks section below.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-783"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-783">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-784">보낼 데이터를 포함하는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-784">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-785"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-785">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="90a67-786">소켓 오류를 저장하는 <see cref="T:System.Net.Sockets.SocketError" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-786">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-787"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-787">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-788">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-788">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-789">연결된 <see cref="T:System.Net.Sockets.Socket" />에 데이터를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-789">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-790">비동기 보내기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-790">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-791"><xref:System.Net.Sockets.Socket.BeginSend%2A> 에 설정 된 원격 호스트에 비동기 발신 작업을 시작 하는 메서드는 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-791">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="90a67-792"><xref:System.Net.Sockets.Socket.BeginSend%2A> 먼저 호출 하지 않으면 예외가 throw 됩니다 <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-792"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-793">호출 된 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드는 별도 실행 스레드 내에서 데이터를 보내는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-793">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="90a67-794">구현 하는 콜백 메서드를 만들 수는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-794">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="90a67-795">최소한,이 수행 하려면 프로그램 `state` 매개 변수는 연결을 포함 해야 합니다 또는 기본 <xref:System.Net.Sockets.Socket> 통신에 사용 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-795">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="90a67-796">콜백에 자세한 정보를 작은 클래스 또는 저장할 구조를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-796">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-797">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-797">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-798">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndSend%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-798">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="90a67-799">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginSend%2A>, 시스템 사용 하 여 별도 스레드에서 지정 된 콜백 메서드를 실행 하 고 차단 합니다 <xref:System.Net.Sockets.Socket.EndSend%2A> 될 때까지 <xref:System.Net.Sockets.Socket> 요청 된 바이트의 번호를 전송 하거나 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-799">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="90a67-800">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드를 사용 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-800">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90a67-801">Set 메서드를 호출 하는 <xref:System.Threading.ManualResetEvent> 콜백 메서드에서 원래 스레드가 계속 실행 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-801">Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="90a67-802">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-802">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-803">연결 지향 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.BeginSend%2A> 를 먼저 호출 연결 없는 프로토콜에 대해서도 작동는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-803">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="90a67-804">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야 <xref:System.Net.Sockets.Socket.BeginSendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-804">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="90a67-805">사용 하 여 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-805">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-806">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.BeginSend%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-806">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-807">연결 없는 프로토콜 사용도 해야 버퍼의 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-807">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-808">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.BeginSend%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-808">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-809">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-809">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-810">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-810">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-811">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-811">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-812">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-812">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-813">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-813">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-814">`state` 사용자 정의 클래스의 인스턴스화가입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-814">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-815">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-815">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-816">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-816">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-817">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-817">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-818">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-818">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-819">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-819">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-820">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-820">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-821"><paramref name="buffers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-821"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-822"><paramref name="buffers" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-822"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-823">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-823">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-824">아래의 설명 부분을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-824">See remarks section below.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-825"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-825">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-826">보낼 데이터를 포함하는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-826">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-827">데이터 보내기를 시작하기 위한 <c>buffer</c> 매개 변수의 위치(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-827">The zero-based position in the <c>buffer</c> parameter at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-828">보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-828">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-829"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-829">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="90a67-830">소켓 오류를 저장하는 <see cref="T:System.Net.Sockets.SocketError" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-830">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-831"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-831">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-832">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-832">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-833">연결된 <see cref="T:System.Net.Sockets.Socket" />에 데이터를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-833">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-834">비동기 보내기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-834">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-835"><xref:System.Net.Sockets.Socket.BeginSend%2A> 에 설정 된 원격 호스트에 비동기 발신 작업을 시작 하는 메서드는 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-835">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="90a67-836"><xref:System.Net.Sockets.Socket.BeginSend%2A> 먼저 호출 하지 않으면 예외가 throw 됩니다 <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-836"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-837">호출 된 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드는 별도 실행 스레드 내에서 데이터를 보내는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-837">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="90a67-838">구현 하는 콜백 메서드를 만들 수는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-838">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="90a67-839">최소한,이 수행 하려면 프로그램 `state` 매개 변수는 연결을 포함 해야 합니다 또는 기본 <xref:System.Net.Sockets.Socket> 통신에 사용 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-839">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="90a67-840">콜백에 자세한 정보를 작은 클래스 또는 저장할 구조를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-840">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-841">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-841">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-842">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndSend%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-842">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="90a67-843">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginSend%2A>, 시스템 사용 하 여 별도 스레드에서 지정 된 콜백 메서드를 실행 하 고 차단 합니다 <xref:System.Net.Sockets.Socket.EndSend%2A> 될 때까지 <xref:System.Net.Sockets.Socket> 요청 된 바이트의 번호를 전송 하거나 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-843">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="90a67-844">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드를 사용 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-844">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90a67-845">원래 스레드가 계속 실행 하려는 경우 콜백 메서드에서 받으며에서 Set 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-845">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="90a67-846">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-846">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-847">연결 지향 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.BeginSend%2A> 를 먼저 호출 연결 없는 프로토콜에 대해서도 작동는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-847">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="90a67-848">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야 <xref:System.Net.Sockets.Socket.BeginSendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-848">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="90a67-849">사용 하 여 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-849">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-850">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.BeginSend%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-850">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-851">연결 없는 프로토콜 사용도 해야 버퍼의 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-851">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-852">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.BeginSend%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-852">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-853">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-853">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-854">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-854">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-855">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-855">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-856">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-856">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-857">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-857">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-858">`state` 사용자 정의 클래스의 인스턴스화가입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-858">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-859">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-859">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-860">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-860">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-861">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-861">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-862">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-862">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-863">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-863">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-864">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-864">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-865"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-865"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-866">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-866">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-867">아래의 설명 부분을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-867">See remarks section below.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-868"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-868"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-869">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-869">-or-</span></span>  
  
 <span data-ttu-id="90a67-870"><paramref name="offset" />이 <paramref name="buffer" />의 길이보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-870"><paramref name="offset" /> is less than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-871">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-871">-or-</span></span>  
  
 <span data-ttu-id="90a67-872"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-872"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-873">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-873">-or-</span></span>  
  
 <span data-ttu-id="90a67-874"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-874"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-875"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-875">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="4" />
        <Parameter Name="state" Type="System.Object" Index="5" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-876">보낼 데이터를 포함하는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-876">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-877">데이터 보내기를 시작하기 위한 <c>buffer</c> 매개 변수의 위치(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-877">The zero-based position in the <c>buffer</c> parameter at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-878">보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-878">The number of bytes to send.</span></span></param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="callback"><span data-ttu-id="90a67-879"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-879">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-880">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-880">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-881">연결된 <see cref="T:System.Net.Sockets.Socket" />에 데이터를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-881">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-882">비동기 보내기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-882">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-883"><xref:System.Net.Sockets.Socket.BeginSend%2A> 에 설정 된 원격 호스트에 비동기 발신 작업을 시작 하는 메서드는 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-883">The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span> <span data-ttu-id="90a67-884"><xref:System.Net.Sockets.Socket.BeginSend%2A> 먼저 호출 하지 않으면 예외가 throw 됩니다 <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-884"><xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-885">호출 된 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드는 별도 실행 스레드 내에서 데이터를 보내는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-885">Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="90a67-886">구현 하는 콜백 메서드를 만들 수는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-886">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="90a67-887">최소한,이 수행 하려면 프로그램 `state` 매개 변수는 연결을 포함 해야 합니다 또는 기본 <xref:System.Net.Sockets.Socket> 통신에 사용 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-887">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="90a67-888">콜백에 자세한 정보를 작은 클래스 또는 저장할 구조를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-888">If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-889">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-889">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-890">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndSend%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-890">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method.</span></span> <span data-ttu-id="90a67-891">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginSend%2A>, 시스템 사용 하 여 별도 스레드에서 지정 된 콜백 메서드를 실행 하 고 차단 합니다 <xref:System.Net.Sockets.Socket.EndSend%2A> 될 때까지 <xref:System.Net.Sockets.Socket> 요청 된 바이트의 번호를 전송 하거나 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-891">When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="90a67-892">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드를 사용 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-892">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90a67-893">원래 스레드가 계속 실행 하려는 경우 콜백 메서드에서 받으며에서 Set 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-893">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="90a67-894">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-894">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-895">연결 지향 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.BeginSend%2A> 를 먼저 호출 연결 없는 프로토콜에 대해서도 작동는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-895">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="90a67-896">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야 <xref:System.Net.Sockets.Socket.BeginSendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-896">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span> <span data-ttu-id="90a67-897">사용 하 여 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-897">It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-898">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.BeginSend%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-898">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-899">연결 없는 프로토콜 사용도 해야 버퍼의 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-899">With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-900">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.BeginSend%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-900">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-901">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-901">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-902">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-902">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-903">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-903">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-904">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-904">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-905">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-905">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-906">`state` 사용자 정의 클래스의 인스턴스화가입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-906">`state` is an instantiation of a user-defined class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-907">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-907">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-908">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-908">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-909">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-909">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-910">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-910">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-911">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-911">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-912">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-912">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-913">다음 코드 예제에서는 비동기적으로 원격 호스트에 데이터를 보내기 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-913">The following code example begins asynchronously sending data to a remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Async_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Async_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-914"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-914"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-915">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-915">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-916">아래의 설명 부분을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-916">See remarks section below.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-917"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-917"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-918">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-918">-or-</span></span>  
  
 <span data-ttu-id="90a67-919"><paramref name="offset" />이 <paramref name="buffer" />의 길이보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-919"><paramref name="offset" /> is less than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-920">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-920">-or-</span></span>  
  
 <span data-ttu-id="90a67-921"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-921"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-922">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-922">-or-</span></span>  
  
 <span data-ttu-id="90a67-923"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-923"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-924"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-924">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSendFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-925">파일을 연결된 <see cref="T:System.Net.Sockets.Socket" /> 개체에 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-925">Sends a file asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSendFile">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendFile (string fileName, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendFile(string fileName, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendFile (fileName As String, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendFile(System::String ^ fileName, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="90a67-926">보낼 파일의 경로 및 이름이 들어 있는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-926">A string that contains the path and name of the file to send.</span></span> <span data-ttu-id="90a67-927">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-927">This parameter can be <see langword="null" />.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-928"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-928">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-929">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-929">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-930"><see cref="T:System.Net.Sockets.Socket" /> 플래그를 사용하여 <paramref name="fileName" /> 파일을 연결된 <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 개체에 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-930">Sends the file <paramref name="fileName" /> to a connected <see cref="T:System.Net.Sockets.Socket" /> object using the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> flag.</span></span></summary>
        <returns><span data-ttu-id="90a67-931">비동기 보내기를 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-931">An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-932">이 오버 로드 된 파일을 보낸 `fileName` 연결된 소켓을 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-932">This overload sends the file `fileName` to the connected socket.</span></span> <span data-ttu-id="90a67-933">경우 `fileName` 은 로컬 디렉터리에 식별 된 파일 이름으로, 그렇지 않으면 전체 경로 파일의 이름을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-933">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="90a67-934">와일드 카드 ("… \\\myfile.txt ") 및 UNC 공유 이름 ("\\\\\\\shared 디렉터리\\\myfile.txt ")는 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-934">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="90a67-935">파일이 없는 경우, 예외 <xref:System.IO.FileNotFoundException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-935">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="90a67-936">이 메서드는 사용 된 `TransmitFile` Windows 소켓 2 API에서 찾을 수 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-936">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="90a67-937">에 대 한 자세한 내용은 `TransmitFile` 함수와 플래그 MSDN Library의 Windows 소켓 설명서를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-937">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="90a67-938"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> 에 설정 된 원격 호스트에 비동기 발신 작업을 시작 하는 메서드는 <xref:System.Net.Sockets.Socket.Connect%2A>,<xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-938">The <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>,<xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods.</span></span> <span data-ttu-id="90a67-939"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> 먼저 호출 하지 않으면 예외를 throw <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-939"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-940">호출 된 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> 메서드를 사용 하면 별도 실행 스레드 내에 있는 파일을 보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-940">Calling the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method enables you to send a file within a separate execution thread.</span></span>  
  
 <span data-ttu-id="90a67-941">작업을 완료 하 여 호출 되는 콜백 메서드를 만들 수 있습니다는 <xref:System.AsyncCallback> 대리자 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-941">To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter.</span></span> <span data-ttu-id="90a67-942">최소한,이 작업을 수행 하는 `state` 매개 변수를 포함 해야 합니다는 <xref:System.Net.Sockets.Socket> 통신에 사용 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-942">To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication.</span></span> <span data-ttu-id="90a67-943">콜백은 더 많은 정보가 필요, 클래스 또는 저장할 구조를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-943">If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-944">전달 하기 위해이 사용자 지정 개체의 인스턴스는 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-944">Pass an instance of this custom object to the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-945">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-945">Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method.</span></span> <span data-ttu-id="90a67-946">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, 시스템 지정 된 콜백 메서드를 실행 하는 별도 스레드를 사용 하 고 차단 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 될 때까지 <xref:System.Net.Sockets.Socket> 전체 파일을 전송 하거나 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-946">When your application calls <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception.</span></span> <span data-ttu-id="90a67-947">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-947">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-948">연결 지향 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> 를 먼저 호출 연결 없는 프로토콜에 대해서도 작동는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-948">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSendFile%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="90a67-949">연결 없는 프로토콜 사용 파일의 크기는 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-949">With connectionless protocols, you must be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-950">그렇지 않으면 데이터 그램 전송 되지 않습니다 및 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throw 한 <xref:System.Net.Sockets.SocketException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-950">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-951">표시 되 면 한 <xref:System.Net.Sockets.SocketException> 예외를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-951">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-952">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-952">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-953">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-953">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-954">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-954">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-955">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-955">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-956">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-956">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-957">다음 코드 예제에서는 만들고 비동기 통신에 대 한 소켓을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-957">The following code example creates and connects a socket for asynchronous communication.</span></span> <span data-ttu-id="90a67-958">첫째, 원격 호스트에 파일 "text.txt" 비동기적으로 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-958">First, the file "text.txt" is sent asynchronously to the remote host.</span></span> <span data-ttu-id="90a67-959">콜백을 호출을 위임 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 전송을 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-959">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#9)]
 [!code-csharp[NCLSocketEnhancements#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-960"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-960">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-961">소켓이 원격 호스트에 연결되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-961">The socket is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="90a67-962"><paramref name="fileName" /> 파일을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-962">The file <paramref name="fileName" /> was not found.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-963">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-963">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-964">아래의 설명 부분을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-964">See remarks section below.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendFile">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendFile(string fileName, unsigned int8[] preBuffer, unsigned int8[] postBuffer, valuetype System.Net.Sockets.TransmitFileOptions flags, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendFile (fileName As String, preBuffer As Byte(), postBuffer As Byte(), flags As TransmitFileOptions, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendFile(System::String ^ fileName, cli::array &lt;System::Byte&gt; ^ preBuffer, cli::array &lt;System::Byte&gt; ^ postBuffer, System::Net::Sockets::TransmitFileOptions flags, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="preBuffer" Type="System.Byte[]" />
        <Parameter Name="postBuffer" Type="System.Byte[]" />
        <Parameter Name="flags" Type="System.Net.Sockets.TransmitFileOptions" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="90a67-965">보낼 파일의 경로 및 이름이 들어 있는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-965">A string that contains the path and name of the file to be sent.</span></span> <span data-ttu-id="90a67-966">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-966">This parameter can be <see langword="null" />.</span></span></param>
        <param name="preBuffer"><span data-ttu-id="90a67-967">파일이 전송되기 전에 전송할 데이터를 포함하는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-967">A <see cref="T:System.Byte" /> array that contains data to be sent before the file is sent.</span></span> <span data-ttu-id="90a67-968">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-968">This parameter can be <see langword="null" />.</span></span></param>
        <param name="postBuffer"><span data-ttu-id="90a67-969">파일이 전송된 후에 전송할 데이터를 포함하는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-969">A <see cref="T:System.Byte" /> array that contains data to be sent after the file is sent.</span></span> <span data-ttu-id="90a67-970">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-970">This parameter can be <see langword="null" />.</span></span></param>
        <param name="flags"><span data-ttu-id="90a67-971"><see cref="T:System.Net.Sockets.TransmitFileOptions" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-971">A bitwise combination of <see cref="T:System.Net.Sockets.TransmitFileOptions" /> values.</span></span></param>
        <param name="callback"><span data-ttu-id="90a67-972">이 작업이 완료되면 호출될 <see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-972">An <see cref="T:System.AsyncCallback" /> delegate to be invoked when this operation completes.</span></span> <span data-ttu-id="90a67-973">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-973">This parameter can be <see langword="null" />.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-974">이 요청에 대한 상태 정보가 들어 있는 사용자 정의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-974">A user-defined object that contains state information for this request.</span></span> <span data-ttu-id="90a67-975">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-975">This parameter can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="90a67-976">파일 및 데이터 버퍼를 연결된 <see cref="T:System.Net.Sockets.Socket" /> 개체에 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-976">Sends a file and buffers of data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
        <returns><span data-ttu-id="90a67-977">비동기 작업을 나타내는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-977">An <see cref="T:System.IAsyncResult" /> object that represents the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-978">이 오버 로드의 비트 조합 보낼 파일의 이름과 필요 <xref:System.Net.Sockets.TransmitFileOptions> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-978">This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values.</span></span> <span data-ttu-id="90a67-979">`preBuffer` 매개 변수에 파일 앞에 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-979">The `preBuffer` parameter contains any data you want to precede the file.</span></span> <span data-ttu-id="90a67-980">`postBuffer` 파일을 따라 하려는 데이터가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-980">`postBuffer` contains data you want to follow the file.</span></span> <span data-ttu-id="90a67-981">경우 `fileName` 은 로컬 디렉터리에 식별 된 파일 이름으로, 그렇지 않으면 전체 경로 파일의 이름을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-981">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="90a67-982">와일드 카드 ("… \\\myfile.txt ") 및 UNC 공유 이름 ("\\\\\\\shared 디렉터리\\\myfile.txt ")는 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-982">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="90a67-983">파일이 없는 경우, 예외 <xref:System.IO.FileNotFoundException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-983">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="90a67-984">`flags` 매개 변수 창 소켓 서비스 공급자와 파일 전송에 대 한 추가 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-984">The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="90a67-985">이 매개 변수를 사용 하는 방법에 대 한 자세한 내용은 참조 하십시오. <xref:System.Net.Sockets.TransmitFileOptions>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-985">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="90a67-986">이 메서드는 사용 된 `TransmitFile` Windows 소켓 2 API에서 찾을 수 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-986">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="90a67-987">에 대 한 자세한 내용은 `TransmitFile` 함수와 플래그 MSDN Library의 Windows 소켓 설명서를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-987">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="90a67-988"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> 에 설정 된 원격 호스트에 비동기 발신 작업을 시작 하는 메서드는 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-988">The <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods.</span></span> <span data-ttu-id="90a67-989"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> 먼저 호출 하지 않으면 예외를 throw <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-989"><xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>.</span></span> <span data-ttu-id="90a67-990">호출 된 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> 메서드는 별도 실행 스레드 내에 있는 파일을 전송 하는 기능이 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-990">Calling the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method gives you the ability to send a file within a separate execution thread.</span></span>  
  
 <span data-ttu-id="90a67-991">작업을 완료 하 여 호출 되는 콜백 메서드를 만들 수 있습니다는 <xref:System.AsyncCallback> 대리자 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-991">To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter.</span></span> <span data-ttu-id="90a67-992">최소한,이 작업을 수행 하는 `state` 매개 변수를 포함 해야 합니다는 <xref:System.Net.Sockets.Socket> 통신에 사용 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-992">To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication.</span></span> <span data-ttu-id="90a67-993">콜백은 더 많은 정보가 필요, 클래스 또는 저장할 구조를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket> 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-993">If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information.</span></span> <span data-ttu-id="90a67-994">전달 하기 위해이 사용자 지정 개체의 인스턴스는 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-994">Pass an instance of this custom object to the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-995">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-995">Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method.</span></span> <span data-ttu-id="90a67-996">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, 시스템 지정 된 콜백 메서드를 실행 하는 별도 스레드를 사용 하 고 차단 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 될 때까지 <xref:System.Net.Sockets.Socket> 전체 파일을 전송 하거나 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-996">When your application calls <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception.</span></span> <span data-ttu-id="90a67-997">콜백 메서드를 작성 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-997">For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-998">연결 지향 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> 를 먼저 호출 연결 없는 프로토콜에 대해서도 작동는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-998">Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSendFile%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host.</span></span> <span data-ttu-id="90a67-999">연결 없는 프로토콜 사용도 확인 해야 파일의 크기는 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-999">With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-1000">그렇지 않으면 데이터 그램 전송 되지 않습니다 및 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throw 한 <xref:System.Net.Sockets.SocketException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1000">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1001">표시 되 면 한 <xref:System.Net.Sockets.SocketException> 예외를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1001">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1002">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1002">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1003">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1003">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1004">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1004">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1005">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1005">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-1006">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1006">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1007">다음 코드 예제에서는 비동기 통신에 대 한 소켓 연결 및 보내기 시작 파일 "text.txt" 비동기적으로 원격 호스트에 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1007">The following code example creates and connects a socket for asynchronous communication and begins sending the file "text.txt" asynchronously to the remote host.</span></span> <span data-ttu-id="90a67-1008">이 예제는 `preBuffer` 및 `postBuffer` 데이터의 파일 및 기본와 함께 보낼 생성 <xref:System.Net.Sockets.TransmitFileOptions> 값이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1008">In this example, a `preBuffer` and a `postBuffer` of data is created to send with the file and the default <xref:System.Net.Sockets.TransmitFileOptions> value is used.</span></span> <span data-ttu-id="90a67-1009">콜백을 호출을 위임 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 전송을 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1009">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#10)]
 [!code-csharp[NCLSocketEnhancements#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1010"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1010">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1011">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1011">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-1012">아래의 설명 부분을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-1012">See remarks section below.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1013">운영 체제가 Windows NT 이상이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1013">The operating system is not Windows NT or later.</span></span>  
  
 <span data-ttu-id="90a67-1014">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="90a67-1014">\- or -</span></span>  
  
 <span data-ttu-id="90a67-1015">소켓이 원격 호스트에 연결되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1015">The socket is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="90a67-1016"><paramref name="fileName" /> 파일을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1016">The file <paramref name="fileName" /> was not found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendTo">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, AsyncCallback callback, object state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socket_flags, System.Net.EndPoint remote_end, AsyncCallback callback, object state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socket_flags, class System.Net.EndPoint remote_end, class System.AsyncCallback callback, object state) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendTo (buffer As Byte(), offset As Integer, size As Integer, socket_flags As SocketFlags, remote_end As EndPoint, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socket_flags, System::Net::EndPoint ^ remote_end, AsyncCallback ^ callback, System::Object ^ state);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" />
        <Parameter Name="offset" Type="System.Int32" Index="1" />
        <Parameter Name="size" Type="System.Int32" Index="2" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="socket_flags" Type="System.Net.Sockets.SocketFlags" Index="3" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" Index="4" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="remote_end" Type="System.Net.EndPoint" Index="4" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="callback" Type="System.AsyncCallback" Index="5" />
        <Parameter Name="state" Type="System.Object" Index="6" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-1017">보낼 데이터를 포함하는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1017">An array of type <see cref="T:System.Byte" /> that contains the data to send.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-1018">데이터 보내기를 시작할 <c>버퍼</c>의 위치(0부터 시작)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1018">The zero-based position in <c>buffer</c> at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-1019">보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1019">The number of bytes to send.</span></span></param>
        <param name="socketFlags">To be added.</param>
        <param name="socket_flags">To be added.</param>
        <param name="remoteEP">To be added.</param>
        <param name="remote_end">To be added.</param>
        <param name="callback"><span data-ttu-id="90a67-1020"><see cref="T:System.AsyncCallback" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1020">The <see cref="T:System.AsyncCallback" /> delegate.</span></span></param>
        <param name="state"><span data-ttu-id="90a67-1021">이 요청에 대한 상태 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1021">An object that contains state information for this request.</span></span></param>
        <summary><span data-ttu-id="90a67-1022">특정 원격 호스트에 데이터를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1022">Sends data asynchronously to a specific remote host.</span></span></summary>
        <returns><span data-ttu-id="90a67-1023">비동기 보내기를 참조하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1023">An <see cref="T:System.IAsyncResult" /> that references the asynchronous send.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1024"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> 에 지정 된 원격 호스트에 비동기 발신 작업을 시작 하는 메서드는 `remoteEP` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1024">The <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method starts an asynchronous send operation to the remote host specified in the `remoteEP` parameter.</span></span> <span data-ttu-id="90a67-1025">호출 된 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 메서드는 별도 실행 스레드 내에서 데이터를 보내는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1025">Calling the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method gives you the ability to send data within a separate execution thread.</span></span> <span data-ttu-id="90a67-1026">연결 없는 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 모두 프로토콜과 연결 지향 프로토콜과 함께 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1026">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.BeginSendTo%2A> works with both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="90a67-1027">구현 하는 콜백 메서드를 만들 수는 <xref:System.AsyncCallback> 대리자를 전달 하 고 이름을 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1027">You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method.</span></span> <span data-ttu-id="90a67-1028">최소한,이 수행 하려면 프로그램 `state` 매개 변수는 연결을 포함 해야 합니다 또는 기본 <xref:System.Net.Sockets.Socket> 통신에 사용 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1028">To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication.</span></span> <span data-ttu-id="90a67-1029">콜백에 자세한 정보를 저장 하는 작은 클래스를 만들 수 있습니다는 <xref:System.Net.Sockets.Socket>, 및 기타 필요한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1029">If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information.</span></span> <span data-ttu-id="90a67-1030">이 클래스의 인스턴스를 전달는 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 통해 메서드는 `state` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1030">Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method through the `state` parameter.</span></span>  
  
 <span data-ttu-id="90a67-1031">콜백 메서드에서 <xref:System.Net.Sockets.Socket.EndSendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1031">Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method.</span></span> <span data-ttu-id="90a67-1032">응용 프로그램 호출 하는 경우 <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, 시스템 사용 하 여 별도 스레드에서 지정 된 콜백 메서드를 실행 하 고 차단 합니다 <xref:System.Net.Sockets.Socket.EndSendTo%2A> 될 때까지 <xref:System.Net.Sockets.Socket> 요청 된 바이트의 번호를 전송 하거나 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1032">When your application calls <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSendTo%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception.</span></span> <span data-ttu-id="90a67-1033">원래 스레드가 차단 호출한 후 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 메서드를 사용 하 여는 <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1033">If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="90a67-1034">원래 스레드가 계속 실행 하려는 경우 콜백 메서드에서 받으며에서 Set 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1034">Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing.</span></span> <span data-ttu-id="90a67-1035">콜백 메서드를 작성 하는 방법에 대 한 자세한 내용은 참조 [콜백 메서드로 대리자 마샬링](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1035">For additional information about writing callback methods see [Marshaling a Delegate as a Callback Method](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).</span></span>  
  
 <span data-ttu-id="90a67-1036">연결 지향 프로토콜을 사용 하는 경우를 호출 해야는 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드, 또는 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1036">If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, or <xref:System.Net.Sockets.Socket.BeginSendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-1037"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> 무시는 `remoteEP` 매개 변수 및 송신 데이터를는 <xref:System.Net.EndPoint> 에 설정 된는 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1037"><xref:System.Net.Sockets.Socket.BeginSendTo%2A> will ignore the `remoteEP` parameter and send data to the <xref:System.Net.EndPoint> established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1038">연결 없는 프로토콜을 사용 하는 경우 기본 원격 호스트를 설정할 필요가 없습니다는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1038">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="90a67-1039">호출 하려는 경우이 작업을 수행 해야는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1039">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method.</span></span> <span data-ttu-id="90a67-1040">호출 하면는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>, `remoteEP` 매개 변수에 지정 된 기본 원격 호스트를 해당 송신 작업에만 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1040">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="90a67-1041">또한 필요는 없습니다 호출 하 여 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1041">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="90a67-1042">이 경우 기본 서비스 공급자는 가장 적절 한 로컬 네트워크 주소와 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1042">In this case, the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="90a67-1043">기본 서비스 공급자가 사용 가능한 포트를 선택 하기 원하는 경우 0의 포트 번호를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1043">Use a port number of zero if you want the underlying service provider to select a free port.</span></span> <span data-ttu-id="90a67-1044">할당 된 로컬 네트워크 주소와 포트 번호를 식별 해야 하는 경우 사용할 수 있습니다는 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 후의 <xref:System.Net.Sockets.Socket.EndSendTo%2A> 메서드가 성공적으로 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1044">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="90a67-1045">브로드캐스트 주소 데이터를 전송 하려는 경우 먼저 호출 해야는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓 옵션을 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1045">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-1046">-버퍼의 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 수도 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1046">-You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-1047">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.EndSendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1047">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.EndSendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-1048">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1048">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1049">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1049">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1050">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1050">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1051">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1051">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1052">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1052">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1053">비동기 작업에 대 한 캐시 된 실행 컨텍스트 (보안 컨텍스트, 가장된 된 사용자 및 호출 컨텍스트에) <xref:System.Net.Sockets.Socket> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1053">The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods.</span></span> <span data-ttu-id="90a67-1054">특정 컨텍스트에 처음 사용한 후 (특정 비동기 <xref:System.Net.Sockets.Socket> 메서드, 특정 <xref:System.Net.Sockets.Socket> 인스턴스와 특정 콜백), 이후 해당 컨텍스트에 사용 하면 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1054">After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1055">다음 코드 예제에서는 지정된 된 원격 호스트에 데이터를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1055">The following code example asynchronously sends data to the specified remote host.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#3)]
 [!code-csharp[Socket_Async_Send_Receive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#3)]
 [!code-vb[Socket_Async_Send_Receive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1056"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1056"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-1057">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-1057">-or-</span></span>  
  
 <span data-ttu-id="90a67-1058"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1058"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1059">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1059">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-1060"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1060"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-1061">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-1061">-or-</span></span>  
  
 <span data-ttu-id="90a67-1062"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1062"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-1063">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-1063">-or-</span></span>  
  
 <span data-ttu-id="90a67-1064"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1064"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-1065">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-1065">-or-</span></span>  
  
 <span data-ttu-id="90a67-1066"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1066"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1067"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1067">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-1068">호출 스택의 상위 호출자에게 요청된 작업을 수행할 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1068">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public void Bind (System.Net.EndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Bind(class System.Net.EndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Bind (localEP As EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Bind(System::Net::EndPoint ^ localEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="90a67-1069"><see cref="T:System.Net.EndPoint" />과 연결된 로컬 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1069">The local <see cref="T:System.Net.EndPoint" /> to associate with the <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="90a67-1070"><see cref="T:System.Net.Sockets.Socket" />을 로컬 끝점과 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1070">Associates a <see cref="T:System.Net.Sockets.Socket" /> with a local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1071">사용 하 여는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드 특정 로컬 끝점을 사용 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-1071">Use the <xref:System.Net.Sockets.Socket.Bind%2A> method if you need to use a specific local endpoint.</span></span> <span data-ttu-id="90a67-1072">호출 해야 <xref:System.Net.Sockets.Socket.Bind%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.Listen%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1072">You must call <xref:System.Net.Sockets.Socket.Bind%2A> before you can call the <xref:System.Net.Sockets.Socket.Listen%2A> method.</span></span> <span data-ttu-id="90a67-1073">호출할 필요가 없습니다 <xref:System.Net.Sockets.Socket.Bind%2A> 사용 하기 전에 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 특정 로컬 끝점을 사용 하는 제외 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1073">You do not need to call <xref:System.Net.Sockets.Socket.Bind%2A> before using the <xref:System.Net.Sockets.Socket.Connect%2A> method unless you need to use a specific local endpoint.</span></span> <span data-ttu-id="90a67-1074">사용할 수는 <xref:System.Net.Sockets.Socket.Bind%2A> 프로토콜과 연결 지향 프로토콜 모두에서 메서드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1074">You can use the <xref:System.Net.Sockets.Socket.Bind%2A> method on both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="90a67-1075">호출 하기 전에 <xref:System.Net.Sockets.Socket.Bind%2A>, 로컬 먼저 만들어야 <xref:System.Net.IPEndPoint> 에서 데이터를 전달할지입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1075">Before calling <xref:System.Net.Sockets.Socket.Bind%2A>, you must first create the local <xref:System.Net.IPEndPoint> from which you intend to communicate data.</span></span> <span data-ttu-id="90a67-1076">할당 되는 로컬 주소는 중요 하지 않은 경우 만들 수 있습니다는 <xref:System.Net.IPEndPoint> 를 사용 하 여 <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> 주소 매개 변수 및 기본 서비스 공급자 가장 적합 한 네트워크 주소를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1076">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="90a67-1077">이렇게 하면 여러 개의 네트워크 인터페이스가 있는 경우 응용 프로그램을 단순화 하는 데 도움이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1077">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="90a67-1078">사용 되는 로컬 포트는 중요 하지 않은 경우 만들 수 있습니다는 <xref:System.Net.IPEndPoint> 에서 포트 번호 0을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1078">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="90a67-1079">이 경우 서비스 공급자에는 1024과 5000 사이의 사용 가능한 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1079">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span>  
  
 <span data-ttu-id="90a67-1080">호출 하 여 할당 된 로컬 네트워크 주소와 포트 번호를 검색할 수 위의 방법을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1080">If you use the above approach, you can discover what local network address and port number has been assigned by calling the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A>.</span></span> <span data-ttu-id="90a67-1081">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 에 대 한 호출을 수행한 후까지 로컬로 할당 된 네트워크 주소를 반환 하지 것입니다는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1081">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> will not return the locally assigned network address until after you have made a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.EndConnect%2A> method.</span></span> <span data-ttu-id="90a67-1082">연결 없는 프로토콜을 사용 하는 경우 않아도 됩니다이 정보에 대 한 액세스 완료 송신 또는 수신 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1082">If you are using a connectionless protocol, you will not have access to this information until you have completed a send or receive.</span></span>  
  
 <span data-ttu-id="90a67-1083">UDP 소켓 받은 패킷에 대 한 인터페이스 정보를 수신 하려는 경우는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 소켓 옵션 설정 메서드를 명시적으로 호출 해야 <xref:System.Net.Sockets.SocketOptionName.PacketInformation> 호출한 직후는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1083">If a UDP socket wants to receive interface information on received packets,  the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method should be explicitly called with the socket option set to <xref:System.Net.Sockets.SocketOptionName.PacketInformation> immediately after calling the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1084">멀티 캐스트 데이터 그램을 받으려는 호출 해야 합니다는 <xref:System.Net.Sockets.Socket.Bind%2A> 멀티 캐스트 포트 번호를 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1084">If you intend to receive multicast datagrams, you must call the <xref:System.Net.Sockets.Socket.Bind%2A> method with a multicast port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1085">호출 해야 합니다는 <xref:System.Net.Sockets.Socket.Bind%2A> 연결 없는 데이터 그램을 사용 하 여 수신 하려는 경우 메서드는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1085">You must call the <xref:System.Net.Sockets.Socket.Bind%2A> method if you intend to receive connectionless datagrams using the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1086">표시 되 면 한 <xref:System.Net.Sockets.SocketException> 호출 하는 경우는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1086">If you receive a <xref:System.Net.Sockets.SocketException> when calling the <xref:System.Net.Sockets.Socket.Bind%2A> method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1087">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1087">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1088">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1088">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1089">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1089">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1090">다음 코드 예제에서는 바인딩에 <xref:System.Net.Sockets.Socket> 지정된 된 로컬 끝점을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1090">The following code example binds a <xref:System.Net.Sockets.Socket> using the specified local endpoint.</span></span>  
  
 [!code-cpp[Classic Socket.Bind Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Bind Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Bind Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Bind Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Bind Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Bind Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1091"><paramref name="localEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1091"><paramref name="localEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1092">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1092">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1093"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1093">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-1094">호출 스택의 상위 호출자에게 요청된 작업을 수행할 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1094">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-1095">에 정의 된 호스트에서 연결을 허용 하기 위해 <paramref name="localEP" />합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1095">for accepting connections from the host defined by <paramref name="localEP" />.</span></span> <span data-ttu-id="90a67-1096">연결 된 열거형의 경우: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-1096">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" /></span></span></permission>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Blocking">
      <MemberSignature Language="C#" Value="public bool Blocking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Blocking" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Blocking" />
      <MemberSignature Language="VB.NET" Value="Public Property Blocking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Blocking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1097"><see cref="T:System.Net.Sockets.Socket" />이 블로킹 모드인지 여부를 나타내는 값을 설정하거나 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1097">Gets or sets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket" /> is in blocking mode.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1098"><see cref="T:System.Net.Sockets.Socket" />이 차단되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1098"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> will block; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="90a67-1099">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1099">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1100"><xref:System.Net.Sockets.Socket.Blocking%2A> 속성 표시 여부는 <xref:System.Net.Sockets.Socket> 블로킹 모드에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1100">The <xref:System.Net.Sockets.Socket.Blocking%2A> property indicates whether a <xref:System.Net.Sockets.Socket> is in blocking mode.</span></span>  
  
 <span data-ttu-id="90a67-1101">블로킹 모드에 있으며 메서드를 즉시 완료 되지 않는 호출을 확인 하는 경우 요청 된 작업이 완료 될 때까지 응용 프로그램 실행이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1101">If you are in blocking mode, and you make a method call which does not complete immediately, your application will block execution until the requested operation completes.</span></span> <span data-ttu-id="90a67-1102">요청 된 작업이 완료 되지 않았습니다. 경우에 계속 진행을 변경 하려면 실행 하려는 경우는 <xref:System.Net.Sockets.Socket.Blocking%2A> 속성을 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1102">If you want execution to continue even though the requested operation is not complete, change the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false`.</span></span> <span data-ttu-id="90a67-1103"><xref:System.Net.Sockets.Socket.Blocking%2A> 속성에는 비동기 메서드에 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1103">The <xref:System.Net.Sockets.Socket.Blocking%2A> property has no effect on asynchronous methods.</span></span> <span data-ttu-id="90a67-1104">및 데이터를 비동기적으로 받는 보내고 실행을 차단 하려면을 사용 하 여는 <xref:System.Threading.ManualResetEvent> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1104">If you are sending and receiving data asynchronously and want to block execution, use the <xref:System.Threading.ManualResetEvent> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1105">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1105">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1106">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1106">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1107">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1107">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1108">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1108">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1109">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1109">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1110"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1110">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CancelConnectAsync">
      <MemberSignature Language="C#" Value="public static void CancelConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelConnectAsync (e As SocketAsyncEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelConnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-1111"><see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 메서드 중 하나를 호출하여 원격 호스트에 대한 연결을 요청하는 데 사용되는 <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1111">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object used to request the connection to the remote host by calling one of the <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" /> methods.</span></span></param>
        <summary><span data-ttu-id="90a67-1112">원격 호스트 연결에 대한 비동기 요청을 취소합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1112">Cancels an asynchronous request for a remote host connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1113"><xref:System.Net.Sockets.Socket.CancelConnectAsync%2A> 메서드는 원격 호스트 연결에 대 한 비동기 요청을 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1113">The <xref:System.Net.Sockets.Socket.CancelConnectAsync%2A> method cancels an asynchronous request for a remote host connection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90a67-1114"><paramref name="e" /> 매개 변수가 null일 수 없으며, <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />도 null일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1114">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1115">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1115">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1116"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1116">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-1117">호출 스택의 상위 호출자에게 요청된 작업을 수행할 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1117">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Close">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-1118"><see cref="T:System.Net.Sockets.Socket" /> 연결을 닫고 연결된 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1118">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90a67-1119"><see cref="T:System.Net.Sockets.Socket" /> 연결을 닫고 연결된 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1119">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1120"><xref:System.Net.Sockets.Socket.Close%2A> 메서드는 원격 호스트 연결을 닫고 릴리스 관리 되는 모든 및 관리 되지 않는 리소스와 연결 된 리소스는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1120">The <xref:System.Net.Sockets.Socket.Close%2A> method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1121">연결이 닫힐 때는 <xref:System.Net.Sockets.Socket.Connected%2A> 속성이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1121">Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="90a67-1122">연결 지향 프로토콜에 대 한 것이 좋습니다를 호출 하는 <xref:System.Net.Sockets.Socket.Shutdown%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1122">For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="90a67-1123">이렇게 하면 모든 데이터가 전송 및 연결이 닫히기 전에 연결된 된 소켓에서 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1123">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="90a67-1124">호출 해야 하는 경우 <xref:System.Net.Sockets.Socket.Close%2A> 먼저 호출 하지 않고 <xref:System.Net.Sockets.Socket.Shutdown%2A>를 설정 하 여 전송 내보내기 위해 대기 중인 데이터를 확인할 수 있습니다는 <xref:System.Net.Sockets.SocketOptionName.DontLinger> <xref:System.Net.Sockets.Socket> 옵션을 `false` 고 0이 아닌 시간 제한 간격을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1124">If you need to call <xref:System.Net.Sockets.Socket.Close%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket> option to `false` and specifying a non-zero time-out interval.</span></span> <span data-ttu-id="90a67-1125"><xref:System.Net.Sockets.Socket.Close%2A> 그런 다음,는이 데이터를 보낼 때까지 또는 지정된 된 제한 시간이 만료 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1125"><xref:System.Net.Sockets.Socket.Close%2A> will then block until this data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="90a67-1126">설정한 경우 <xref:System.Net.Sockets.SocketOptionName.DontLinger> 를 `false` 0 시간 제한 간격을 지정 하 고 <xref:System.Net.Sockets.Socket.Close%2A> 연결을 해제 하 고 나가는 큐에 대기 중인된 데이터를 자동으로 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1126">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1127">설정 하는 <xref:System.Net.Sockets.SocketOptionName.DontLinger> 소켓 옵션을 `false`, 만들는 <xref:System.Net.Sockets.LingerOption>, enabled 속성을 설정 `true`, 설정 및는 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 속성을 원하는 시간 제한 기간입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1127">To set the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time out period.</span></span> <span data-ttu-id="90a67-1128">이 사용 하 여 <xref:System.Net.Sockets.LingerOption> 와 함께 <xref:System.Net.Sockets.SocketOptionName.DontLinger> 소켓 옵션을 호출 하는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1128">Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1129">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1129">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1130">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1130">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1131">다음 코드 예제에서는 닫습니다는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1131">The following code example closes a <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.DontLinger" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Close(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(int timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="90a67-1132">나머지 데이터가 전송될 때까지 <c>timeout</c>초까지 기다린 후 소켓을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1132">Wait up to <c>timeout</c> seconds to send any remaining data, then close the socket.</span></span></param>
        <summary><span data-ttu-id="90a67-1133"><see cref="T:System.Net.Sockets.Socket" /> 연결을 닫고 지정된 시간 제한의 모든 관련 리소스를 해제하여 대기 중인 데이터가 전송될 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1133">Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources with a specified timeout to allow queued data to be sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1134"><xref:System.Net.Sockets.Socket.Close%2A> 메서드는 원격 호스트 연결을 닫고 릴리스 관리 되는 모든 및 관리 되지 않는 리소스와 연결 된 리소스는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1134">The <xref:System.Net.Sockets.Socket.Close%2A> method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1135">연결이 닫힐 때는 <xref:System.Net.Sockets.Socket.Connected%2A> 속성이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1135">Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.</span></span>  
  
 <span data-ttu-id="90a67-1136">연결 지향 프로토콜에 대 한 것이 좋습니다를 호출 하는 <xref:System.Net.Sockets.Socket.Shutdown%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1136">For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling <xref:System.Net.Sockets.Socket.Close%2A>.</span></span> <span data-ttu-id="90a67-1137">이렇게 하면 모든 데이터가 전송 및 연결이 닫히기 전에 연결된 된 소켓에서 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1137">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="90a67-1138">호출 해야 하는 경우 <xref:System.Net.Sockets.Socket.Close%2A> 먼저 호출 하지 않고 <xref:System.Net.Sockets.Socket.Shutdown%2A>를 설정 하 여 전송 내보내기 위해 대기 중인 데이터를 확인할 수 있습니다는 <xref:System.Net.Sockets.SocketOptionName.DontLinger> 옵션을 `false` 고 0이 아닌 시간 제한 간격을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1138">If you need to call <xref:System.Net.Sockets.Socket.Close%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName.DontLinger> option to `false` and specifying a non-zero time-out interval.</span></span> <span data-ttu-id="90a67-1139"><xref:System.Net.Sockets.Socket.Close%2A> 그런 다음,는이 데이터를 보낼 때까지 또는 지정된 된 제한 시간이 만료 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1139"><xref:System.Net.Sockets.Socket.Close%2A> will then block until this data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="90a67-1140">설정한 경우 <xref:System.Net.Sockets.SocketOptionName.DontLinger> 를 `false` 0 시간 제한 간격을 지정 하 고 <xref:System.Net.Sockets.Socket.Close%2A> 연결을 해제 하 고 나가는 큐에 대기 중인된 데이터를 자동으로 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1140">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1141">설정 하는 <xref:System.Net.Sockets.SocketOptionName.DontLinger> 소켓 옵션을 `false`, 만들는 <xref:System.Net.Sockets.LingerOption>, enabled 속성을 설정 `true`, 설정 및는 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 속성 원하는 제한 시간을 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1141">To set the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time-out period.</span></span> <span data-ttu-id="90a67-1142">이 사용 하 여 <xref:System.Net.Sockets.LingerOption> 와 함께 <xref:System.Net.Sockets.SocketOptionName.DontLinger> 소켓 옵션을 호출 하는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1142">Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName.DontLinger> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1143">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1143">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1144">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1144">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1145">다음 코드 예제에서는 종결 하는 방법을 보여 줍니다.는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1145">The following code example demonstrates how to close a <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.DontLinger" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-1146">원격 호스트에 대한 연결을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1146">Establishes a connection to a remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (remoteEP As EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::EndPoint ^ remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="remoteEP"><span data-ttu-id="90a67-1147">원격 장치를 나타내는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1147">An <see cref="T:System.Net.EndPoint" /> that represents the remote device.</span></span></param>
        <summary><span data-ttu-id="90a67-1148">원격 호스트에 대한 연결을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1148">Establishes a connection to a remote host.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1149">TCP와 같은 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드는 동기적으로 간의 네트워크 연결을 설정 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 및 지정된 된 원격 끝점입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1149">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="90a67-1150">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1150">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="90a67-1151">호출한 후 <xref:System.Net.Sockets.Socket.Connect%2A>, 원격 장치에 데이터를 보낼 수 있습니다는 <xref:System.Net.Sockets.Socket.Send%2A> 메서드를 사용 하 여 원격 장치에서 데이터를 받을 또는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1151">After you call <xref:System.Net.Sockets.Socket.Connect%2A>, you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1152">UDP 같은 연결 없는 프로토콜을 사용 하는 경우 호출할 필요가 없습니다 <xref:System.Net.Sockets.Socket.Connect%2A> 데이터 보내기 및 받기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1152">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="90a67-1153">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 및 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 동기적으로 원격 호스트와 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1153">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="90a67-1154">호출 하면 <xref:System.Net.Sockets.Socket.Connect%2A>, 지정된 된 기본 아닌 주소에서 도착 하는 모든 데이터 그램 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1154">If you do call <xref:System.Net.Sockets.Socket.Connect%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="90a67-1155">먼저 호출 해야 기본 원격 호스트 브로드캐스트 주소를 설정 하려는 경우는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓 옵션을 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, 또는 <xref:System.Net.Sockets.Socket.Connect%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1155">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-1156">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1156">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1157">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1157">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="90a67-1158"><xref:System.Net.Sockets.Socket.Connect%2A> 설정 하지 않으면 메서드가 차단 되는 <xref:System.Net.Sockets.Socket.Blocking%2A> 속성을 `false` 호출 하기 전에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1158">The <xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-1159">TCP 비활성화 차단과 같은 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException> 연결을 만드는 데 시간이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1159">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="90a67-1160">기본 원격 호스트를 설정 하기만 하므로 연결 없는 프로토콜 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1160">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="90a67-1161">사용할 수 있습니다 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 얻어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1161">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1162">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1162">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="90a67-1163">원격 호스트 연결에서 연결 지향 시작 되었습니다 오류 WSAEWOULDBLOCK 반환 되 면 <xref:System.Net.Sockets.Socket>, 완료 되지 않은 아직 하지만 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1163">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="90a67-1164">사용 하 여는 <xref:System.Net.Sockets.Socket.Poll%2A> 시점을 결정 하는 메서드는 <xref:System.Net.Sockets.Socket> 가 완료 된 연결입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1164">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1165">연결 지향 프로토콜을 사용 하 고 로드 하지 않는 <xref:System.Net.Sockets.Socket.Bind%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.Connect%2A>, 기본 서비스 공급자가 로컬 네트워크 주소와 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1165">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="90a67-1166">연결 없는 프로토콜을 사용 하는 경우 완료 송신 또는 수신 작업 될 때까지 서비스 공급자 로컬 네트워크 주소와 포트 번호를 할당 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1166">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="90a67-1167">기본 원격 호스트를 변경 하려는 경우에 호출 <xref:System.Net.Sockets.Socket.Connect%2A> 원하는 끝점을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1167">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1168">소켓 이전에 빠진 경우 연결을 복원 하려면이 방법을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1168">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="90a67-1169">비동기 작업 중 하나를 사용 하 여 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 다시 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1169">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="90a67-1170">기본 공급자의 제한 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1170">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1171">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1171">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1172">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1172">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1173">다음 코드 예제에서는 원격 끝점에 연결 하 고 연결을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1173">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[Classic Socket.Connect Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Connect Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Connect Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Connect Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Connect Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Connect Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1174"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1174"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1175">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1175">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1176"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1176">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-1177">호출 스택의 상위 호출자에게 요청된 작업을 수행할 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1177">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-1178"><see cref="T:System.Net.Sockets.Socket" />이 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />을 호출하여 수신 상태에 배치되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1178">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-1179">원격 호스트에 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1179">for connecting to the remote host.</span></span> <span data-ttu-id="90a67-1180">연결 된 열거형의 경우: <see cref="F:System.Net.NetworkAccess.Connect" /></span><span class="sxs-lookup"><span data-stu-id="90a67-1180">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Connect" /></span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.Blocking" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ address, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="90a67-1181">원격 호스트의 IP 주소입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1181">The IP address of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="90a67-1182">원격 호스트의 포트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1182">The port number of the remote host.</span></span></param>
        <summary><span data-ttu-id="90a67-1183">원격 호스트에 대한 연결을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1183">Establishes a connection to a remote host.</span></span> <span data-ttu-id="90a67-1184">호스트는 IP 주소와 포트 번호로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1184">The host is specified by an IP address and a port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1185">TCP와 같은 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드는 동기적으로 간의 네트워크 연결을 설정 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 및 지정된 된 원격 끝점입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1185">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="90a67-1186">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1186">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="90a67-1187">호출한 후 <xref:System.Net.Sockets.Socket.Connect%2A> 인 원격 장치에 데이터를 보낼 수 있습니다는 <xref:System.Net.Sockets.Socket.Send%2A> 메서드를 사용 하 여 원격 장치에서 데이터를 받을 또는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1187">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1188">UDP 같은 연결 없는 프로토콜을 사용 하는 경우 호출할 필요가 없습니다 <xref:System.Net.Sockets.Socket.Connect%2A> 데이터 보내기 및 받기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1188">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="90a67-1189">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 및 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 동기적으로 원격 호스트와 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1189">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="90a67-1190">호출 하면 <xref:System.Net.Sockets.Socket.Connect%2A> 아닌 지정된 된 기본 주소에서 도착 하는 모든 데이터 그램 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1190">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="90a67-1191">먼저 호출 해야 기본 원격 호스트 브로드캐스트 주소를 설정 하려는 경우는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓 옵션을 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, 또는 <xref:System.Net.Sockets.Socket.Connect%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1191">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-1192">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1192">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1193">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1193">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="90a67-1194"><xref:System.Net.Sockets.Socket.Connect%2A> 설정 하지 않으면 메서드가 차단 되는 <xref:System.Net.Sockets.Socket.Blocking%2A> 속성을 `false` 호출 하기 전에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1194"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-1195">TCP 비활성화 차단과 같은 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException> 연결을 만드는 데 시간이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1195">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="90a67-1196">기본 원격 호스트를 설정 하기만 하므로 연결 없는 프로토콜 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1196">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="90a67-1197">사용할 수 있습니다 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 얻어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1197">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1198">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1198">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="90a67-1199">원격 호스트 연결에서 연결 지향 시작 되었습니다 오류 WSAEWOULDBLOCK 반환 되 면 <xref:System.Net.Sockets.Socket>, 완료 되지 않은 아직 하지만 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1199">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="90a67-1200">사용 하 여는 <xref:System.Net.Sockets.Socket.Poll%2A> 시점을 결정 하는 메서드는 <xref:System.Net.Sockets.Socket> 가 완료 된 연결입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1200">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1201">연결 지향 프로토콜을 사용 하 고 로드 하지 않는 <xref:System.Net.Sockets.Socket.Bind%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.Connect%2A>, 기본 서비스 공급자가 로컬 네트워크 주소와 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1201">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="90a67-1202">연결 없는 프로토콜을 사용 하는 경우 완료 송신 또는 수신 작업 될 때까지 서비스 공급자 로컬 네트워크 주소와 포트 번호를 할당 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1202">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="90a67-1203">기본 원격 호스트를 변경 하려는 경우에 호출 <xref:System.Net.Sockets.Socket.Connect%2A> 원하는 끝점을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1203">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1204">소켓 이전에 빠진 경우 연결을 복원 하려면이 방법을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1204">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="90a67-1205">비동기 작업 중 하나를 사용 하 여 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 다시 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1205">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="90a67-1206">기본 공급자의 제한 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1206">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1207">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1207">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1208">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1208">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1209">다음 코드 예제에서는 원격 끝점에 연결 하 고 연결을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1209">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#4)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1210"><paramref name="address" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1210"><paramref name="address" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-1211">포트 번호가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1211">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1212">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1212">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1213"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1213">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1214">이 메서드는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 제품군의 소켓에 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1214">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-1215"><paramref name="address" />의 길이가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1215">The length of <paramref name="address" /> is zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-1216"><see cref="T:System.Net.Sockets.Socket" />이 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />을 호출하여 수신 상태에 배치되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1216">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress[] addresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress[] addresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addresses As IPAddress(), port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="addresses"><span data-ttu-id="90a67-1217">원격 호스트의 IP 주소입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1217">The IP addresses of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="90a67-1218">원격 호스트의 포트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1218">The port number of the remote host.</span></span></param>
        <summary><span data-ttu-id="90a67-1219">원격 호스트에 대한 연결을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1219">Establishes a connection to a remote host.</span></span> <span data-ttu-id="90a67-1220">호스트는 IP 주소의 배열과 포트 번호로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1220">The host is specified by an array of IP addresses and a port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1221">이 메서드를 호출한 직후 일반적으로 <xref:System.Net.Dns.GetHostAddresses%2A>, 단일 호스트에 대해 여러 IP 주소를 반환할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1221">This method is typically used immediately after a call to <xref:System.Net.Dns.GetHostAddresses%2A>, which can return multiple IP addresses for a single host.</span></span> <span data-ttu-id="90a67-1222">TCP와 같은 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드는 동기적으로 간의 네트워크 연결을 설정 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 및 지정된 된 원격 끝점입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1222">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint.</span></span> <span data-ttu-id="90a67-1223">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1223">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="90a67-1224">호출한 후 <xref:System.Net.Sockets.Socket.Connect%2A> 인 원격 장치에 데이터를 보낼 수 있습니다는 <xref:System.Net.Sockets.Socket.Send%2A> 메서드를 사용 하 여 원격 장치에서 데이터를 받을 또는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1224">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1225">UDP 같은 연결 없는 프로토콜을 사용 하는 경우 호출할 필요가 없습니다 <xref:System.Net.Sockets.Socket.Connect%2A> 데이터 보내기 및 받기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1225">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="90a67-1226">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 및 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 동기적으로 원격 호스트와 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1226">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="90a67-1227">호출 하면 <xref:System.Net.Sockets.Socket.Connect%2A> 아닌 지정된 된 기본 주소에서 도착 하는 모든 데이터 그램 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1227">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="90a67-1228">먼저 호출 해야 기본 원격 호스트 브로드캐스트 주소를 설정 하려는 경우는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓 옵션을 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, 또는 <xref:System.Net.Sockets.Socket.Connect%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1228">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-1229">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1229">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1230">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1230">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="90a67-1231"><xref:System.Net.Sockets.Socket.Connect%2A> 설정 하지 않으면 메서드가 차단 되는 <xref:System.Net.Sockets.Socket.Blocking%2A> 속성을 `false` 호출 하기 전에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1231"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-1232">TCP 비활성화 차단과 같은 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException> 연결을 만드는 데 시간이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1232">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="90a67-1233">기본 원격 호스트를 설정 하기만 하므로 연결 없는 프로토콜 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1233">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="90a67-1234">사용할 수 있습니다 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 얻어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1234">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1235">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1235">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="90a67-1236">원격 호스트 연결에서 연결 지향 시작 되었습니다 오류 WSAEWOULDBLOCK 반환 되 면 <xref:System.Net.Sockets.Socket>, 완료 되지 않은 아직 하지만 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1236">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="90a67-1237">사용 하 여는 <xref:System.Net.Sockets.Socket.Poll%2A> 시점을 결정 하는 메서드는 <xref:System.Net.Sockets.Socket> 가 완료 된 연결입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1237">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1238">연결 지향 프로토콜을 사용 하 고 로드 하지 않는 <xref:System.Net.Sockets.Socket.Bind%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.Connect%2A>, 기본 서비스 공급자가 로컬 네트워크 주소와 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1238">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="90a67-1239">연결 없는 프로토콜을 사용 하는 경우 완료 송신 또는 수신 작업 될 때까지 서비스 공급자 로컬 네트워크 주소와 포트 번호를 할당 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1239">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="90a67-1240">기본 원격 호스트를 변경 하려는 경우에 호출 <xref:System.Net.Sockets.Socket.Connect%2A> 원하는 끝점을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1240">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1241">소켓 이전에 빠진 경우 연결을 복원 하려면이 방법을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1241">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="90a67-1242">비동기 작업 중 하나를 사용 하 여 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 다시 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1242">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="90a67-1243">기본 공급자의 제한 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1243">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1244">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1244">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1245">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1245">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1246">다음 코드 예제에서는 원격 끝점에 연결 하 고 연결을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1246">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#5)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1247"><paramref name="addresses" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1247"><paramref name="addresses" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-1248">포트 번호가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1248">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1249">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1249">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1250"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1250">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1251">이 메서드는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 제품군의 소켓에 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1251">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-1252"><paramref name="address" />의 길이가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1252">The length of <paramref name="address" /> is zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-1253"><see cref="T:System.Net.Sockets.Socket" />이 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />을 호출하여 수신 상태에 배치되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1253">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (host As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ host, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host"><span data-ttu-id="90a67-1254">원격 호스트의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1254">The name of the remote host.</span></span></param>
        <param name="port"><span data-ttu-id="90a67-1255">원격 호스트의 포트 번호입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1255">The port number of the remote host.</span></span></param>
        <summary><span data-ttu-id="90a67-1256">원격 호스트에 대한 연결을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1256">Establishes a connection to a remote host.</span></span> <span data-ttu-id="90a67-1257">호스트는 호스트 이름과 포트 번호로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1257">The host is specified by a host name and a port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1258">TCP와 같은 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드는 동기적으로 간의 네트워크 연결을 설정 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 및 지정된 된 원격 호스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1258">If you are using a connection-oriented protocol such as TCP, the <xref:System.Net.Sockets.Socket.Connect%2A> method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote host.</span></span> <span data-ttu-id="90a67-1259">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1259">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.Connect%2A> establishes a default remote host.</span></span> <span data-ttu-id="90a67-1260">호출한 후 <xref:System.Net.Sockets.Socket.Connect%2A> 인 원격 장치에 데이터를 보낼 수 있습니다는 <xref:System.Net.Sockets.Socket.Send%2A> 메서드를 사용 하 여 원격 장치에서 데이터를 받을 또는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1260">After you call <xref:System.Net.Sockets.Socket.Connect%2A> you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1261">UDP 같은 연결 없는 프로토콜을 사용 하는 경우 호출할 필요가 없습니다 <xref:System.Net.Sockets.Socket.Connect%2A> 데이터 보내기 및 받기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1261">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.Connect%2A> before sending and receiving data.</span></span> <span data-ttu-id="90a67-1262">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 및 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 동기적으로 원격 호스트와 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1262">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host.</span></span> <span data-ttu-id="90a67-1263">호출 하면 <xref:System.Net.Sockets.Socket.Connect%2A> 아닌 지정된 된 기본 주소에서 도착 하는 모든 데이터 그램 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1263">If you do call <xref:System.Net.Sockets.Socket.Connect%2A> any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="90a67-1264">먼저 호출 해야 기본 원격 호스트 브로드캐스트 주소를 설정 하려는 경우는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓 옵션을 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, 또는 <xref:System.Net.Sockets.Socket.Connect%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1264">If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>, or <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-1265">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1265">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1266">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1266">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="90a67-1267"><xref:System.Net.Sockets.Socket.Connect%2A> 설정 하지 않으면 메서드가 차단 되는 <xref:System.Net.Sockets.Socket.Blocking%2A> 속성을 `false` 호출 하기 전에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1267"><xref:System.Net.Sockets.Socket.Connect%2A> method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-1268">TCP 비활성화 차단과 같은 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException> 연결을 만드는 데 시간이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1268">If you are using a connection-oriented protocol like TCP and you do disable blocking, <xref:System.Net.Sockets.Socket.Connect%2A> will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection.</span></span> <span data-ttu-id="90a67-1269">기본 원격 호스트를 설정 하기만 하므로 연결 없는 프로토콜 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1269">Connectionless protocols will not throw an exception because they simply establish a default remote host.</span></span> <span data-ttu-id="90a67-1270">사용할 수 있습니다 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 특정 오류 코드를 얻어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1270">You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1271">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1271">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="90a67-1272">원격 호스트 연결에서 연결 지향 시작 되었습니다 오류 WSAEWOULDBLOCK 반환 되 면 <xref:System.Net.Sockets.Socket>, 완료 되지 않은 아직 하지만 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1272">If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully.</span></span> <span data-ttu-id="90a67-1273">사용 하 여는 <xref:System.Net.Sockets.Socket.Poll%2A> 시점을 결정 하는 메서드는 <xref:System.Net.Sockets.Socket> 가 완료 된 연결입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1273">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.</span></span>  
  
 <span data-ttu-id="90a67-1274">I p v 6이 사용 되는 경우 및 <xref:System.Net.Sockets.Socket.Connect%28System.String%2CSystem.Int32%29> ipv6 확인 되는 호스트에 연결할 메서드는 및 IPv4 주소, IPv6 주소에 대 한 연결 시도 후 IPv4 주소 앞입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1274">If IPv6 is enabled and the <xref:System.Net.Sockets.Socket.Connect%28System.String%2CSystem.Int32%29> method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address.</span></span> <span data-ttu-id="90a67-1275">호스트의 IPv6 주소에서 수신 하지 않는 경우 연결을 설정 하는 데 시간이 지연이 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1275">This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1276">연결 지향 프로토콜을 사용 하 고 로드 하지 않는 <xref:System.Net.Sockets.Socket.Bind%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.Connect%2A>, 기본 서비스 공급자가 로컬 네트워크 주소와 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1276">If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.Connect%2A>, the underlying service provider will assign the local network address and port number.</span></span> <span data-ttu-id="90a67-1277">연결 없는 프로토콜을 사용 하는 경우 완료 송신 또는 수신 작업 될 때까지 서비스 공급자 로컬 네트워크 주소와 포트 번호를 할당 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1277">If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation.</span></span> <span data-ttu-id="90a67-1278">기본 원격 호스트를 변경 하려는 경우에 호출 <xref:System.Net.Sockets.Socket.Connect%2A> 원하는 끝점을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1278">If you want to change the default remote host, call <xref:System.Net.Sockets.Socket.Connect%2A> again with the desired endpoint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1279">소켓 이전에 빠진 경우 연결을 복원 하려면이 방법을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1279">If the socket has been previously disconnected, then you cannot use this method to restore the connection.</span></span> <span data-ttu-id="90a67-1280">비동기 작업 중 하나를 사용 하 여 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드를 다시 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1280">Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect.</span></span> <span data-ttu-id="90a67-1281">기본 공급자의 제한 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1281">This is a limitation of the underlying provider.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1282">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1282">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1283">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1283">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1284">다음 코드 예제에서는 원격 끝점에 연결 하 고 연결을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1284">The following code example connects to a remote endpoint and then verifies the connection.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socket.BeginConnect#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CPP/beginconnect.cpp#6)]
 [!code-csharp[System.Net.Sockets.Socket.BeginConnect#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socket.BeginConnect/CS/beginconnect.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1285"><paramref name="host" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1285"><paramref name="host" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-1286">포트 번호가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1286">The port number is not valid.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1287">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1287">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1288"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1288">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1289">이 메서드는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 제품군의 소켓에 유효합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1289">This method is valid for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-1290"><see cref="T:System.Net.Sockets.Socket" />이 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />을 호출하여 수신 상태에 배치되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1290">The <see cref="T:System.Net.Sockets.Socket" /> has been placed in a listening state by calling <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-1291">원격 호스트 연결에 대한 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1291">Begins an asynchronous request for a connection to a remote host.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public bool ConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ConnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-1292">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1292">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-1293">원격 호스트 연결에 대한 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1293">Begins an asynchronous request for a connection to a remote host.</span></span></summary>
        <returns><span data-ttu-id="90a67-1294">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1294">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-1295">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1295">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-1296">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1296">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-1297">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1297">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1298">연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드 원격 호스트에 대 한 연결에 대 한 비동기 요청을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1298">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method starts an asynchronous request for a connection to the remote host.</span></span> <span data-ttu-id="90a67-1299">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1299">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.ConnectAsync%2A> establishes a default remote host.</span></span>  
  
 <span data-ttu-id="90a67-1300">완료 알림을 받을 수는 이벤트 처리기를 구현 하는 콜백 메서드를 만들어야 합니다\<SocketAsyncEventArgs >에 연결 하 고 대리자는 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1300">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="90a67-1301">호출자에 게 설정 해야 합니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> 속성을는 <xref:System.Net.IPEndPoint> 연결할 원격 호스트의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1301">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.</span></span>  
  
 <span data-ttu-id="90a67-1302">호출자에 게 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> 속성을 호출 하기 전에 모든 사용자 상태 개체는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드 정보를 콜백 메서드에서 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1302">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="90a67-1303">콜백 단일 개체 보다 더 많은 정보를 필요로 한다면 구성원으로 다른 필요한 상태 정보를 저장할 작은 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1303">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="90a67-1304">UDP 같은 연결 없는 프로토콜을 사용 하는 경우 호출할 필요가 없습니다 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 데이터 보내기 및 받기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1304">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.ConnectAsync%2A> before sending and receiving data.</span></span> <span data-ttu-id="90a67-1305">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendToAsync%2A> 및 <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> 원격 호스트와 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1305">You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host.</span></span> <span data-ttu-id="90a67-1306">호출 하면 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, 지정된 된 기본 아닌 주소에서 도착 하는 모든 데이터 그램 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1306">If you do call <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="90a67-1307">기본 원격 호스트를 변경 하려는 경우에 호출 된 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 원하는 끝점을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1307">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="90a67-1308">기본 원격 호스트 브로드캐스트 주소를 설정 하려면 먼저 호출 해야 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1308">If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="90a67-1309">이렇게 하지 않으면는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드는 throw 된 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1309">If this is not done, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-1310">다음과 같은 속성 및 이벤트에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 개체는 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1310">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="90a67-1311">필요에 따라 버퍼 제공 될 수 있는 원자적으로 받게 될 후에 소켓의 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드가 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1311">Optionally, a buffer may be provided which will atomically be sent on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="90a67-1312">이 경우에 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 보낼 데이터를 포함 하는 버퍼에 설정 해야 하는 속성 및 <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 속성 버퍼에서 데이터의 바이트 수로 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1312">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the number of bytes of data to send from the buffer.</span></span> <span data-ttu-id="90a67-1313">연결이 설정 되 면이 버퍼의 데이터 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1313">Once a connection is established, this buffer of data is sent.</span></span>  
  
 <span data-ttu-id="90a67-1314">연결 지향 프로토콜을 사용 하 고 호출 하지 않으면 <xref:System.Net.Sockets.Socket.Bind%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, 기본 서비스 공급자가 가장 적절 한 로컬 네트워크 주소와 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1314">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span>  
  
 <span data-ttu-id="90a67-1315">호출 하기 전에 서비스 공급자가 로컬 네트워크 IP 주소와 포트 번호는 연결 없는 프로토콜을 사용 하는 경우 할당 된 <xref:System.Net.Sockets.Socket.SendAsync%2A> 또는 <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1315">If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="90a67-1316"><xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드가 throw <xref:System.NotSupportedException> 경우의 주소 패밀리는 <xref:System.Net.Sockets.Socket> 및 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> 동일한 주소 계열이 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1316">The <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> are not the same address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1317">표시 되 면는 <xref:System.Net.Sockets.SocketException> 이 메서드를 호출할 때 사용 된 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1317">If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1318">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1318">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-1319">인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1319">An argument is not valid.</span></span> <span data-ttu-id="90a67-1320">버퍼를 여러 개 지정하고 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 속성이 null이 아니면 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1320">This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90a67-1321"><paramref name="e" /> 매개 변수가 null일 수 없으며, <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />도 null일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1321">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-1322"><see cref="T:System.Net.Sockets.Socket" />이 수신 대기 중이거나 <paramref name="e" /> 매개 변수에 지정된 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체를 사용하여 소켓 작업이 이미 진행 중입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1322">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1323">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1323">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1324">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-1324">Windows XP or later is required for this method.</span></span> <span data-ttu-id="90a67-1325">로컬 끝점과 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />가 같은 주소 패밀리에 포함되지 않은 경우에도 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1325">This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1326"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1326">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-1327">호출 스택의 상위 호출자에게 요청된 작업을 수행할 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1327">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public static bool ConnectAsync (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType, System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ConnectAsync(valuetype System.Net.Sockets.SocketType socketType, valuetype System.Net.Sockets.ProtocolType protocolType, class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ConnectAsync(System::Net::Sockets::SocketType socketType, System::Net::Sockets::ProtocolType protocolType, System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socketType" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="protocolType" Type="System.Net.Sockets.ProtocolType" />
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="socketType"><span data-ttu-id="90a67-1328"><see cref="T:System.Net.Sockets.SocketType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1328">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span></span></param>
        <param name="protocolType"><span data-ttu-id="90a67-1329"><see cref="T:System.Net.Sockets.ProtocolType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1329">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span></span></param>
        <param name="e"><span data-ttu-id="90a67-1330">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1330">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-1331">원격 호스트 연결에 대한 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1331">Begins an asynchronous request for a connection to a remote host.</span></span></summary>
        <returns><span data-ttu-id="90a67-1332">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1332">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-1333">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1333">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-1334">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1334">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-1335">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1335">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1336">M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs) 메서드에 대 한 비동기 요청을 시작 연결 지향 프로토콜을 사용 하는 경우는 원격 호스트에 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1336">If you are using a connection-oriented protocol, the M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs) method starts an asynchronous request for a connection to the remote host.</span></span> <span data-ttu-id="90a67-1337">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 로 지정 된 기본 원격 호스트 설정의 `socketType` 및 `protocolType` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1337">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.ConnectAsync%2A> establishes a default remote host specified by the `socketType` and `protocolType` parameters.</span></span>  
  
 <span data-ttu-id="90a67-1338">완료 알림을 받을 수는 이벤트 처리기를 구현 하는 콜백 메서드를 만들어야 합니다\<SocketAsyncEventArgs >에 연결 하 고 대리자는 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1338">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="90a67-1339">호출자에 게 설정 해야 합니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> 속성을는 <xref:System.Net.IPEndPoint> 연결할 원격 호스트의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1339">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.</span></span>  
  
 <span data-ttu-id="90a67-1340">호출자에 게 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> 속성을 호출 하기 전에 모든 사용자 상태 개체는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드 정보를 콜백 메서드에서 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1340">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="90a67-1341">콜백 단일 개체 보다 더 많은 정보를 필요로 한다면 구성원으로 다른 필요한 상태 정보를 저장할 작은 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1341">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="90a67-1342">UDP 같은 연결 없는 프로토콜을 사용 하는 경우 호출할 필요가 없습니다 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 데이터 보내기 및 받기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1342">If you are using a connectionless protocol such as UDP, you do not have to call <xref:System.Net.Sockets.Socket.ConnectAsync%2A> before sending and receiving data.</span></span> <span data-ttu-id="90a67-1343">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendToAsync%2A> 및 <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> 원격 호스트와 통신할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1343">You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host.</span></span> <span data-ttu-id="90a67-1344">호출 하면 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, 지정된 된 기본 아닌 주소에서 도착 하는 모든 데이터 그램 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1344">If you do call <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, any datagrams that arrive from an address other than the specified default will be discarded.</span></span> <span data-ttu-id="90a67-1345">기본 원격 호스트를 변경 하려는 경우에 호출 된 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 원하는 끝점을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1345">If you want to change the default remote host, call the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method again with the desired endpoint.</span></span>  
  
 <span data-ttu-id="90a67-1346">기본 원격 호스트 브로드캐스트 주소를 설정 하려면 먼저 호출 해야 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1346">If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`.</span></span> <span data-ttu-id="90a67-1347">이렇게 하지 않으면는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드는 throw 된 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1347">If this is not done, the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-1348">다음과 같은 속성 및 이벤트에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 개체는 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1348">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="90a67-1349">필요에 따라 버퍼 제공 될 수 있는 원자적으로 받게 될 후에 소켓의 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드가 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1349">Optionally, a buffer may be provided which will atomically be sent on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds.</span></span> <span data-ttu-id="90a67-1350">이 경우에 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 보낼 데이터를 포함 하는 버퍼에 설정 해야 하는 속성 및 <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 속성 버퍼에서 데이터의 바이트 수로 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1350">In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> property needs to be set to the number of bytes of data to send from the buffer.</span></span> <span data-ttu-id="90a67-1351">연결이 설정 되 면이 버퍼의 데이터 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1351">Once a connection is established, this buffer of data is sent.</span></span>  
  
 <span data-ttu-id="90a67-1352">연결 지향 프로토콜을 사용 하 고 호출 하지 않으면 <xref:System.Net.Sockets.Socket.Bind%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, 기본 서비스 공급자가 가장 적절 한 로컬 네트워크 주소와 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1352">If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, the underlying service provider will assign the most appropriate local network address and port number.</span></span>  
  
 <span data-ttu-id="90a67-1353">호출 하기 전에 서비스 공급자가 로컬 네트워크 IP 주소와 포트 번호는 연결 없는 프로토콜을 사용 하는 경우 할당 된 <xref:System.Net.Sockets.Socket.SendAsync%2A> 또는 <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1353">If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="90a67-1354"><xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드가 throw <xref:System.NotSupportedException> 경우의 주소 패밀리는 <xref:System.Net.Sockets.Socket> 및 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> 동일한 주소 계열이 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1354">The <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> are not the same address family.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1355">표시 되 면는 <xref:System.Net.Sockets.SocketException> 이 메서드를 호출할 때 사용 된 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1355">If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1356">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1356">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-1357">인수가 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1357">An argument is not valid.</span></span> <span data-ttu-id="90a67-1358">버퍼를 여러 개 지정하고 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 속성이 null이 아니면 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1358">This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90a67-1359"><paramref name="e" /> 매개 변수가 null일 수 없으며, <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />도 null일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1359">The <paramref name="e" /> parameter cannot be null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-1360"><see cref="T:System.Net.Sockets.Socket" />이 수신 대기 중이거나 <paramref name="e" /> 매개 변수에 지정된 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체를 사용하여 소켓 작업이 이미 진행 중입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1360">The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1361">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1361">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1362">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-1362">Windows XP or later is required for this method.</span></span> <span data-ttu-id="90a67-1363">로컬 끝점과 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />가 같은 주소 패밀리에 포함되지 않은 경우에도 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1363">This exception also occurs if the local endpoint and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1364"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1364">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-1365">호출 스택의 상위 호출자에게 요청된 작업을 수행할 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1365">A caller higher in the call stack does not have permission for the requested operation.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public bool Connected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Connected" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Connected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Connected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1366"><see cref="T:System.Net.Sockets.Socket" />이 마지막으로 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 또는 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 작업을 수행할 때 원격 호스트에 연결되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1366">Gets a value that indicates whether a <see cref="T:System.Net.Sockets.Socket" /> is connected to a remote host as of the last <see cref="Overload:System.Net.Sockets.Socket.Send" /> or <see cref="Overload:System.Net.Sockets.Socket.Receive" /> operation.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1367">가장 최근 작업에서 <see cref="T:System.Net.Sockets.Socket" />이 원격 리소스에 연결되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1367"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> was connected to a remote resource as of the most recent operation; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1368">`Connected` 속성의 연결 상태를 가져옵니다는 <xref:System.Net.Sockets.Socket> 마지막 I/O 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1368">The `Connected` property gets the connection state of the <xref:System.Net.Sockets.Socket> as of the last I/O operation.</span></span> <span data-ttu-id="90a67-1369">반환 될 때 `false`, <xref:System.Net.Sockets.Socket> 가 연결 된 적 또는 더 이상 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1369">When it returns `false`, the <xref:System.Net.Sockets.Socket> was either never connected, or is no longer connected.</span></span>  
  
 <span data-ttu-id="90a67-1370">값은 <xref:System.Net.Sockets.Socket.Connected%2A> 속성은 연결 가장 최근 작업의 상태를 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1370">The value of the <xref:System.Net.Sockets.Socket.Connected%2A> property reflects the state of the connection as of the most recent operation.</span></span> <span data-ttu-id="90a67-1371">연결의 현재 상태를 확인 해야 할 경우 비블로킹, 0 바이트 송신 호출을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1371">If you need to determine the current state of the connection, make a nonblocking, zero-byte Send call.</span></span> <span data-ttu-id="90a67-1372">호출이 성공적으로 반환 되거나 WAEWOULDBLOCK 오류 코드 (10035)을 하는 경우 소켓 아직 연결 되어 있습니다. 그렇지 않으면 소켓 더 이상 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1372">If the call returns successfully or throws a WAEWOULDBLOCK error code (10035), then the socket is still connected; otherwise, the socket is no longer connected.</span></span>  
  
 <span data-ttu-id="90a67-1373">호출 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 프로토콜 UDP (User Datagram) 소켓에서의 <xref:System.Net.Sockets.Socket.Connected%2A> 속성은 항상 반환 `true`이지만이 작업은 UDP의 고유한 연결 없는 특성을 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1373">If you call <xref:System.Net.Sockets.Socket.Connect%2A> on a User Datagram Protocol (UDP) socket, the <xref:System.Net.Sockets.Socket.Connected%2A> property always returns `true`; however, this action does not change the inherent connectionless nature of UDP.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1374">다음 코드 예제에서는 원격 끝점을 검사에 연결 된 <xref:System.Net.Sockets.Socket.Connected%2A> 속성을 연결의 현재 상태를 확인 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1374">The following code example connects to a remote endpoint, checks the <xref:System.Net.Sockets.Socket.Connected%2A> property, and checks the current state of the connection.</span></span>  
  
 [!code-cpp[Classic Socket.Connect Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Connect Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Connect Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Connect Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Connect Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Connect Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public void Disconnect (bool reuseSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Disconnect(bool reuseSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Disconnect(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Disconnect (reuseSocket As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Disconnect(bool reuseSocket);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reuseSocket">
          <span data-ttu-id="90a67-1375">현재 연결을 닫은 다음 이 소켓을 다시 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1375"><see langword="true" /> if this socket can be reused after the current connection is closed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="90a67-1376">소켓 연결을 닫고 소켓을 다시 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1376">Closes the socket connection and allows reuse of the socket.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1377">연결 지향 프로토콜을 사용 하는 경우 소켓을 닫으려면이 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1377">If you are using a connection-oriented protocol, you can use this method to close the socket.</span></span> <span data-ttu-id="90a67-1378">이 메서드 종료는 연결 및 집합은 <xref:System.Net.Sockets.Socket.Connected%2A> 속성을 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1378">This method ends the connection and sets the <xref:System.Net.Sockets.Socket.Connected%2A> property to `false`.</span></span> <span data-ttu-id="90a67-1379">그러나 경우 `reuseSocket` 은 `true`, 소켓 다시 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1379">However, if `reuseSocket` is `true`, you can reuse the socket.</span></span>  
  
 <span data-ttu-id="90a67-1380">을 보장 하기 위해 모든 데이터는 송수신 하는 소켓을 닫기 전에 호출 해야 <xref:System.Net.Sockets.Socket.Shutdown%2A> 호출 하기 전에 <xref:System.Net.Sockets.Socket.Disconnect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1380">To ensure that all data is sent and received before the socket is closed, you should call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the <xref:System.Net.Sockets.Socket.Disconnect%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1381">호출 해야 하는 경우 <xref:System.Net.Sockets.Socket.Disconnect%2A> 먼저 호출 하지 않고 <xref:System.Net.Sockets.Socket.Shutdown%2A>를 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketOptionName.DontLinger> <xref:System.Net.Sockets.Socket> 옵션을 `false` 보내도록 위해 대기 중인 데이터를 확인 하는 데 0이 아닌 시간 제한 간격을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1381">If you need to call <xref:System.Net.Sockets.Socket.Disconnect%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can set the <xref:System.Net.Sockets.SocketOptionName.DontLinger><xref:System.Net.Sockets.Socket> option to `false` and specify a nonzero time-out interval to ensure that data queued for outgoing transmission is sent.</span></span> <span data-ttu-id="90a67-1382"><xref:System.Net.Sockets.Socket.Disconnect%2A> 그런 다음 데이터를 보낼 때까지 또는 지정된 된 제한 시간이 만료 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1382"><xref:System.Net.Sockets.Socket.Disconnect%2A> then blocks until the data is sent or until the specified time-out expires.</span></span> <span data-ttu-id="90a67-1383">설정한 경우 <xref:System.Net.Sockets.SocketOptionName.DontLinger> 를 `false` 0 시간 제한 간격을 지정 하 고 <xref:System.Net.Sockets.Socket.Close%2A> 연결을 해제 하 고 나가는 큐에 대기 중인된 데이터를 자동으로 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1383">If you set <xref:System.Net.Sockets.SocketOptionName.DontLinger> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1384">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1384">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1385">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1385">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1386">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1386">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1387">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1387">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1388">다음 코드 예제에서는 동기 통신에 대 한 소켓을 만들고 원격 호스트에 일부 데이터를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1388">The following code example creates a socket for synchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="90a67-1389">그런 다음 연속 호출 <xref:System.Net.Sockets.Socket.Shutdown%2A>송신을 중지 하 고 작업을 수신 하려면, 및 <xref:System.Net.Sockets.Socket.Disconnect%2A>, 소켓 연결을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1389">It then calls <xref:System.Net.Sockets.Socket.Shutdown%2A>, to stop the send and receive activity, and <xref:System.Net.Sockets.Socket.Disconnect%2A>, to close the socket connection.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#12)]
 [!code-csharp[Nclsocketenhancements#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="90a67-1390">이 메서드는 Windows 2000 이전 버전에서 사용해야 합니다. 그렇지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1390">This method requires Windows 2000 or earlier, or the exception will be thrown.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1391"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1391">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1392">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1392">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DisconnectAsync">
      <MemberSignature Language="C#" Value="public bool DisconnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DisconnectAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisconnectAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DisconnectAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-1393">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1393">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-1394">원격 끝점과의 연결을 끊는 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1394">Begins an asynchronous request to disconnect from a remote endpoint.</span></span></summary>
        <returns><span data-ttu-id="90a67-1395">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1395">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-1396">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1396">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-1397">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1397">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-1398">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1398">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1399">연결 지향 프로토콜을 사용 하는 경우 호출 된 <xref:System.Net.Sockets.Socket.DisconnectAsync%2A> 메서드 원격 끝점에서 연결 끊기에 요청 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1399">When using a connection-oriented protocol, calling the <xref:System.Net.Sockets.Socket.DisconnectAsync%2A> method requests a disconnect from a remote endpoint.</span></span> <span data-ttu-id="90a67-1400">설정한 경우 <xref:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket%2A?displayProperty=nameWithType> 를 `true` 에 `e` 매개 변수를 소켓을 다시 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1400">If you set <xref:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket%2A?displayProperty=nameWithType> to `true` in the `e` parameter, the socket can be reused.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90a67-1401"><paramref name="e" /> 매개 변수가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1401">The <paramref name="e" /> parameter cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-1402"><paramref name="e" /> 매개 변수에 지정된 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체를 사용하여 소켓 작업이 이미 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1402">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1403">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-1403">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1404"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1404">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1405">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1405">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-1406"><see cref="T:System.Net.Sockets.Socket" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1406">Releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90a67-1407"><see cref="T:System.Net.Sockets.Socket" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1407">Releases all resources used by the current instance of the <see cref="T:System.Net.Sockets.Socket" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1408">`Dispose` 사용을 마치면 <xref:System.Net.Sockets.Socket>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1408">Call `Dispose` when you are finished using the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1409">`Dispose` 메서드를 사용하면 <xref:System.Net.Sockets.Socket>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1409">The `Dispose` method leaves the <xref:System.Net.Sockets.Socket> in an unusable state.</span></span> <span data-ttu-id="90a67-1410">호출한 후 `Dispose`에 대 한 모든 참조를 해제 해야는 <xref:System.Net.Sockets.Socket> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.Net.Sockets.Socket> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1410">After calling `Dispose`, you must release all references to the <xref:System.Net.Sockets.Socket> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.Socket> was occupying.</span></span>  
  
 <span data-ttu-id="90a67-1411">자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1411">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1412">`Dispose`에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.Net.Sockets.Socket>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-1412">Always call `Dispose` before you release your last reference to the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1413">이렇게 하지 않으면 가비지 수집기가 <xref:System.Net.Sockets.Socket> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1413">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.Socket> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="90a67-1414">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />, 관리되지 않는 리소스만 해제하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1414"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="90a67-1415"><see cref="T:System.Net.Sockets.Socket" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 삭제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1415">Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket" />, and optionally disposes of the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1416">이 메서드는 public `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1416">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="90a67-1417">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1417">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="90a67-1418"><xref:System.Object.Finalize%2A> 호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1418"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="90a67-1419">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.Net.Sockets.Socket>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1419">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.Socket> references.</span></span> <span data-ttu-id="90a67-1420">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1420">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1421">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1421">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1422">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1422">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="90a67-1423"><see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1423"><see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="90a67-1424"><see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />를 재정의할 때 이전 <see langword="Dispose" /> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-1424">When overriding <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="90a67-1425">구현 하는 방법에 대 한 자세한 내용은 <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1425">For more information about how to implement <see cref="M:System.Net.Sockets.Socket.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="90a67-1426">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드를 재정의](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1426">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1427"><see cref="T:System.Boolean" />에서 IP(인터넷 프로토콜) 데이터그램의 조각화를 허용하는지 여부를 나타내는 <see cref="T:System.Net.Sockets.Socket" /> 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1427">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows Internet Protocol (IP) datagrams to be fragmented.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1428"><see cref="T:System.Net.Sockets.Socket" />에서 데이터그램 조각화를 허용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1428"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows datagram fragmentation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="90a67-1429">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1429">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1430">데이터 그램 크기의 최대 전송 단위 (MTU)의 전송 매체를 초과 하는 경우 조각화가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1430">Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium.</span></span> <span data-ttu-id="90a67-1431">송신 호스트 (모든 인터넷 프로토콜 버전) 또는 중간 라우터 (인터넷 프로토콜 버전 4만) 하 여 데이터 그램을 조각화 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1431">Datagrams may be fragmented by the sending host (all Internet Protocol versions) or an intermediate router (Internet Protocol Version 4 only).</span></span> <span data-ttu-id="90a67-1432">데이터 그램을 조각화 합니다, 그리고 및 <xref:System.Net.Sockets.Socket.DontFragment%2A> 옵션 설정 하 고 데이터 그램 무시 되는 제어 메시지 ICMP (Internet Protocol) 오류 메시지가 데이터 그램의 보낸 사람에 게 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1432">If a datagram must be fragmented, and the <xref:System.Net.Sockets.Socket.DontFragment%2A> option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.</span></span>  
  
 <span data-ttu-id="90a67-1433">전송이 TCP (Control Protocol) 소켓에서이 속성을 설정할 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1433">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1434">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.DontFragment%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1434">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1435"><see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 패밀리의 소켓이 아닌 소켓에 대해 이 속성을 설정한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1435">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1436">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1436">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1437"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1437">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DualMode">
      <MemberSignature Language="C#" Value="public bool DualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DualMode" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.DualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DualMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1438"><see cref="T:System.Net.Sockets.Socket" />이 IPv4 및 IPv6 둘 다에 사용되는 이중 모드 소켓인지 여부를 지정하는 <see cref="T:System.Boolean" /> 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1438">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> is a dual-mode socket used for both IPv4 and IPv6.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1439"><see cref="T:System.Net.Sockets.Socket" />이 이중 모드 소켓이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1439"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> is a  dual-mode socket; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="90a67-1440">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1440">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DuplicateAndClose">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketInformation DuplicateAndClose (int targetProcessId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Net.Sockets.SocketInformation DuplicateAndClose(int32 targetProcessId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DuplicateAndClose (targetProcessId As Integer) As SocketInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::SocketInformation DuplicateAndClose(int targetProcessId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoLimitation("We do not support passing sockets across processes, we merely allow this API to pass the socket across AppDomains")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketInformation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetProcessId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="targetProcessId"><span data-ttu-id="90a67-1441">소켓 참조의 복제본을 만드는 대상 프로세스의 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1441">The ID of the target process where a duplicate of the socket reference is created.</span></span></param>
        <summary><span data-ttu-id="90a67-1442">대상 프로세스에 대한 소켓 참조를 복제하고 이 프로세스의 소켓을 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1442">Duplicates the socket reference for the target process, and closes the socket for this process.</span></span></summary>
        <returns><span data-ttu-id="90a67-1443">대상 프로세스에 전달될 소켓 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1443">The socket reference to be passed to the target process.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1444">대상 프로세스를 사용 해야 <xref:System.Net.Sockets.Socket.%23ctor%2A> 중복 소켓 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1444">The target process should use <xref:System.Net.Sockets.Socket.%23ctor%2A> to create the duplicate socket instance.</span></span>  
  
 <span data-ttu-id="90a67-1445">호출 하는 경우는 <xref:System.Net.Sockets.Socket.%23ctor%2A> 각 호출에 대 한 인수와 동일한 바이트 배열을 생성자를 여러 개 만들어집니다 관리 <xref:System.Net.Sockets.Socket> 동일한 내부 소켓을 사용 하 여 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="90a67-1445">If you call the <xref:System.Net.Sockets.Socket.%23ctor%2A> constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket> instances with the same underlying socket.</span></span> <span data-ttu-id="90a67-1446">이 이렇게 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1446">This practice is strongly discouraged.</span></span>  
  
 <span data-ttu-id="90a67-1447">소켓을 생성 하는 프로세스는 비동기 메서드를 사용 하는 경우 (<xref:System.Net.Sockets.Socket.BeginReceive%2A> 또는 <xref:System.Net.Sockets.Socket.BeginSend%2A>)를 먼저 설정 해야 하는 프로세스는 <xref:System.Net.Sockets.Socket.UseOnlyOverlappedIO%2A> 속성을 소켓은 수있는생성프로세스의완료포트에바인딩된true,그렇지않으면<xref:System.ArgumentNullException> 대상 프로세스에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1447">If the process creating the socket uses asynchronous methods (<xref:System.Net.Sockets.Socket.BeginReceive%2A> or <xref:System.Net.Sockets.Socket.BeginSend%2A>), the process must first set the <xref:System.Net.Sockets.Socket.UseOnlyOverlappedIO%2A> property to true; otherwise, the socket is bound to the completion port of the creating process, which may cause an <xref:System.ArgumentNullException> to be thrown on the target process.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-1448"><paramref name="targetProcessID" />가 잘못된 프로세스 ID인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1448"><paramref name="targetProcessID" /> is not a valid process id.</span></span>  
  
 <span data-ttu-id="90a67-1449">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-1449">-or-</span></span>  
  
 <span data-ttu-id="90a67-1450">소켓 참조를 복제하지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1450">Duplication of the socket reference failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1451"><see cref="T:System.Boolean" />이 브로드캐스트 패킷을 보내거나 받을 수 있는지 여부를 나타내는 <see cref="T:System.Net.Sockets.Socket" /> 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1451">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> can send or receive broadcast packets.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1452"><see cref="T:System.Net.Sockets.Socket" />이 브로드캐스트 패킷을 허용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1452"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows broadcast packets; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="90a67-1453">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1453">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1454">브로드캐스트 특정 서브넷으로 제한 되며 사용자 데이터 그램 프로토콜 (UDP)을 사용 해야 합니다. 인터넷 프로토콜 버전 4에 대 한 브로드캐스트할 수 있습니다 로컬 서브넷 255.255.255.255;로 패킷을 전송 하 여 또는 네트워크 부분의 모든 비트가 호스트 부분에 설정 된 IP (인터넷 프로토콜) 주소는 지정 된 브로드캐스트 주소로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1454">Broadcasting is limited to a specific subnet, and must use User Datagram Protocol (UDP.) For Internet Protocol version 4, you can broadcast to your local subnet by sending a packet to 255.255.255.255; or you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion.</span></span> <span data-ttu-id="90a67-1455">예를 들어, 사용자의 IP 주소는 192.168.1.40 (네트 마스크가 255.255.255.0 이며 클래스 C 주소 네트워크 부분 처음 세 옥텟 이며 호스트 부분은 마지막 8 진수), 사용자 지정 된 브로드캐스트 주소로 192.168.1.255 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1455">For example, if your IP address is 192.168.1.40 (a Class C address, with a netmask of 255.255.255.0 -- the network portion is the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.</span></span>  
  
 <span data-ttu-id="90a67-1456">전송이 TCP (Control Protocol) 소켓에서이 속성을 설정할 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1456">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1457">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.EnableBroadcast%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1457">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.EnableBroadcast%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1458">데이터그램 소켓이 아닌 소켓에 이 옵션을 설정한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1458">This option is valid for a datagram socket only.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1459"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1459">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndAccept">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-1460">들어오는 연결 시도를 비동기적으로 받아들입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1460">Asynchronously accepts an incoming connection attempt.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (out byte[] buffer, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept([out] unsigned int8[]&amp; buffer, class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (ByRef buffer As Byte(), asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % buffer, IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]&amp;" RefType="out" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-1461">전송된 바이트가 들어 있는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1461">An array of type <see cref="T:System.Byte" /> that contains the bytes transferred.</span></span></param>
        <param name="asyncResult"><span data-ttu-id="90a67-1462">이 비동기 작업에 대한 상태 정보와 모든 사용자 정의 데이터를 저장하는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1462">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation as well as any user defined data.</span></span></param>
        <summary><span data-ttu-id="90a67-1463">들어오는 연결 시도를 비동기적으로 받아들이고 원격 호스트 통신을 처리할 새 <see cref="T:System.Net.Sockets.Socket" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1463">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> object to handle remote host communication.</span></span> <span data-ttu-id="90a67-1464">이 메서드는 전송된 초기 데이터가 들어 있는 버퍼를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1464">This method returns a buffer that contains the initial data transferred.</span></span></summary>
        <returns><span data-ttu-id="90a67-1465">원격 호스트와의 통신을 처리할 <see cref="T:System.Net.Sockets.Socket" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1465">A <see cref="T:System.Net.Sockets.Socket" /> object to handle communication with the remote host.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1466"><xref:System.Net.Sockets.Socket.EndAccept%2A> 호출을 완료 <xref:System.Net.Sockets.Socket.BeginAccept%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1466"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="90a67-1467">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginAccept%2A>, 의해 호출 되는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1467">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1468">이 콜백 메서드는 별도 스레드에서 실행 하 고 후 시스템에 의해 호출 됩니다는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1468">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span>  
  
 <span data-ttu-id="90a67-1469">콜백 메서드 내에서 호출는 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 `asyncResult` 를 가져오려면는 <xref:System.Net.Sockets.Socket> 연결 시도가 수행 되는에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1469">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="90a67-1470">가져온 후는 <xref:System.Net.Sockets.Socket>, 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드를 성공적으로 연결 시도 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1470">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span> <span data-ttu-id="90a67-1471">`buffer` 에 대 한 호출에서 받은 데이터를 포함 하는이 오버 로드의 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 및 `bytesTransferred` 매개 변수는 호출에 전송 된 바이트 수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1471">The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.</span></span>  
  
 <span data-ttu-id="90a67-1472"><xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드 연결이 보류 될 때까지 차단 들어오는 연결 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1472">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="90a67-1473"><xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드는 들어오는 연결을 허용 하 고 새 반환 <xref:System.Net.Sockets.Socket> 데이터를 주고받을 원격 호스트에서 데이터를 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1473">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1474">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1474">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1475">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1475">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1476">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1476">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1477">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1477">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1478">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 를 생성 및 소켓을 연결 하 고 초기 10 바이트의 데이터를 수락 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1478">The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data.</span></span> <span data-ttu-id="90a67-1479">콜백을 호출을 위임 <xref:System.Net.Sockets.Socket.EndAccept%2A> 비동기 요청을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1479">The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request.</span></span> <span data-ttu-id="90a67-1480">전송 된 바이트 수와 데이터에 반환될지는 `buffer` 및 `bytesTransferred` 이 메서드의 매개 변수는 콘솔에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1480">The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1481">이 메서드에는 Windows NT가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1481">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1482"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1482">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1483"><paramref name="asyncResult" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1483"><paramref name="asyncResult" /> is empty.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1484"><see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />를 호출했지만 <paramref name="asyncResult" />가 만들어지지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1484"><paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1485"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 메서드가 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1485"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1486"><see cref="T:System.Net.Sockets.Socket" />에 액세스하려고 시도하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1486">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (asyncResult As IAsyncResult) As Socket" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (result As IAsyncResult) As Socket" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <summary><span data-ttu-id="90a67-1487">들어오는 연결 시도를 비동기적으로 받아들이고 원격 호스트 통신을 처리할 새로운 <see cref="T:System.Net.Sockets.Socket" />을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1487">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="90a67-1488">원격 호스트와의 통신을 처리할 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1488">A <see cref="T:System.Net.Sockets.Socket" /> to handle communication with the remote host.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1489"><xref:System.Net.Sockets.Socket.EndAccept%2A> 호출을 완료 <xref:System.Net.Sockets.Socket.BeginAccept%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1489"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="90a67-1490">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginAccept%2A>를 구현 하는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1490">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1491">이 콜백 메서드는 별도 스레드에서 실행 하 고 후 시스템에 의해 호출 됩니다는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1491">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span> <span data-ttu-id="90a67-1492">동의 해야 합니다는 `asyncResult` 에서 반환 된 매개 변수는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1492">It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1493">콜백 메서드 내에서 호출는 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 `asyncResult` 를 가져오려면는 <xref:System.Net.Sockets.Socket> 연결 시도가 수행 되는에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1493">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="90a67-1494">가져온 후는 <xref:System.Net.Sockets.Socket>, 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드를 성공적으로 연결 시도 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1494">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span>  
  
 <span data-ttu-id="90a67-1495"><xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드 연결이 보류 될 때까지 차단 들어오는 연결 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1495">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="90a67-1496"><xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드는 들어오는 연결을 허용 하 고 새 반환 <xref:System.Net.Sockets.Socket> 데이터를 주고받을 원격 호스트에서 데이터를 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1496">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1497">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1497">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1498">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1498">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1499">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1499">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1500">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1500">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1501">다음 코드 예제에서는 비동기 요청을 종료 하 고 새 <xref:System.Net.Sockets.Socket> 연결 요청을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1501">The following code example ends an asynchronous request and creates a new <xref:System.Net.Sockets.Socket> to accept an incoming connection request.</span></span> <span data-ttu-id="90a67-1502">소켓의 비동기 통신을 보여 주는 전체 예제를 참조 하십시오. [소켓 코드 예제에서는](~/docs/framework/network-programming/socket-code-examples.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1502">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Async_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Async_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1503"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1503"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1504"><see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />를 호출했지만 <paramref name="asyncResult" />가 만들어지지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1504"><paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1505">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1505">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-1506">자세한 내용은 설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="90a67-1506">See the Remarks section for more information.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1507"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1507">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1508"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 메서드가 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1508"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1509">이 메서드에는 Windows NT가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1509">Windows NT is required for this method.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="EndAccept">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAccept (out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAccept([out] unsigned int8[]&amp; buffer, [out] int32&amp; bytesTransferred, class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAccept (ByRef buffer As Byte(), ByRef bytesTransferred As Integer, asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAccept([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % buffer, [Runtime::InteropServices::Out] int % bytesTransferred, IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]&amp;" RefType="out" />
        <Parameter Name="bytesTransferred" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-1510">전송된 바이트가 들어 있는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1510">An array of type <see cref="T:System.Byte" /> that contains the bytes transferred.</span></span></param>
        <param name="bytesTransferred"><span data-ttu-id="90a67-1511">전송된 바이트 수 입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1511">The number of bytes transferred.</span></span></param>
        <param name="asyncResult"><span data-ttu-id="90a67-1512">이 비동기 작업에 대한 상태 정보와 모든 사용자 정의 데이터를 저장하는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1512">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation as well as any user defined data.</span></span></param>
        <summary><span data-ttu-id="90a67-1513">들어오는 연결 시도를 비동기적으로 받아들이고 원격 호스트 통신을 처리할 새 <see cref="T:System.Net.Sockets.Socket" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1513">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> object to handle remote host communication.</span></span> <span data-ttu-id="90a67-1514">이 메서드는 전송된 초기 데이터와 바이트 수가 들어 있는 버퍼를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1514">This method returns a buffer that contains the initial data and the number of bytes transferred.</span></span></summary>
        <returns><span data-ttu-id="90a67-1515">원격 호스트와의 통신을 처리할 <see cref="T:System.Net.Sockets.Socket" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1515">A <see cref="T:System.Net.Sockets.Socket" /> object to handle communication with the remote host.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1516"><xref:System.Net.Sockets.Socket.EndAccept%2A> 호출을 완료 <xref:System.Net.Sockets.Socket.BeginAccept%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1516"><xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>.</span></span> <span data-ttu-id="90a67-1517">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginAccept%2A>, 의해 호출 되는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1517">Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1518">이 콜백 메서드는 별도 스레드에서 실행 하 고 후 시스템에 의해 호출 됩니다는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1518">This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.</span></span> <span data-ttu-id="90a67-1519">동의 해야 합니다는 `asyncResult` 에서 반환 된 매개 변수는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1519">It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1520">콜백 메서드 내에서 호출는 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 `asyncResult` 를 가져오려면는 <xref:System.Net.Sockets.Socket> 연결 시도가 수행 되는에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1520">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="90a67-1521">가져온 후는 <xref:System.Net.Sockets.Socket>, 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드를 성공적으로 연결 시도 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1521">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt.</span></span> <span data-ttu-id="90a67-1522">`buffer` 에 대 한 호출에서 받은 데이터를 포함 하는이 오버 로드의 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 및 `bytesTransferred` 매개 변수는 호출에 전송 된 바이트 수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1522">The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.</span></span>  
  
 <span data-ttu-id="90a67-1523"><xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드 연결이 보류 될 때까지 차단 들어오는 연결 큐에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1523">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue.</span></span> <span data-ttu-id="90a67-1524"><xref:System.Net.Sockets.Socket.EndAccept%2A> 메서드는 들어오는 연결을 허용 하 고 새 반환 <xref:System.Net.Sockets.Socket> 데이터를 주고받을 원격 호스트에서 데이터를 사용할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1524">The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1525">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1525">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1526">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1526">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1527">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1527">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1528">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1528">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1529">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 를 생성 및 소켓을 연결 하 고 초기 10 바이트의 데이터를 수락 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1529">The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data.</span></span> <span data-ttu-id="90a67-1530">콜백을 호출을 위임 <xref:System.Net.Sockets.Socket.EndAccept%2A> 비동기 요청을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1530">The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request.</span></span> <span data-ttu-id="90a67-1531">전송 된 바이트 수와 데이터에 반환될지는 `buffer` 및 `bytesTransferred` 이 메서드의 매개 변수는 콘솔에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1531">The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#6)]
 [!code-csharp[NCLSocketEnhancements#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1532">이 메서드에는 Windows NT가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1532">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1533"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1533">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1534"><paramref name="asyncResult" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1534"><paramref name="asyncResult" /> is empty.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1535"><see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />를 호출했지만 <paramref name="asyncResult" />가 만들어지지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1535"><paramref name="asyncResult" /> was not created by a call to <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1536"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 메서드가 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1536"><see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1537"><see cref="T:System.Net.Sockets.Socket" />에 액세스하려고 시도하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-1537">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndConnect">
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (asyncResult As IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (result As IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <summary><span data-ttu-id="90a67-1538">보류 중인 비동기 연결 요청을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1538">Ends a pending asynchronous connection request.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1539"><xref:System.Net.Sockets.Socket.EndConnect%2A> 시작 하는 비동기 원격 호스트 연결 요청을 완료 하는 차단 메서드는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1539"><xref:System.Net.Sockets.Socket.EndConnect%2A> is a blocking method that completes the asynchronous remote host connection request started in the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1540">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginConnect%2A>를 구현 하는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1540">Before calling <xref:System.Net.Sockets.Socket.BeginConnect%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1541">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1541">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginConnect%2A> returns.</span></span> <span data-ttu-id="90a67-1542">콜백 메서드는 <xref:System.IAsyncResult> 에서 반환 되는 <xref:System.Net.Sockets.Socket.BeginConnect%2A> 메서드에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1542">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="90a67-1543">콜백 메서드 내에서 호출는 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult> 를 가져오려면는 <xref:System.Net.Sockets.Socket> 연결 시도가 수행 되는에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1543">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made.</span></span> <span data-ttu-id="90a67-1544">가져온 후는 <xref:System.Net.Sockets.Socket>, 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndConnect%2A> 메서드를 성공적으로 연결 시도 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1544">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndConnect%2A> method to successfully complete the connection attempt.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1545">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1545">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1546">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1546">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1547">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1547">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1548">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1548">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1549">다음 코드 예제에서는 비동기 연결 시도를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1549">The following code example ends the asynchronous connection attempt.</span></span> <span data-ttu-id="90a67-1550">소켓의 비동기 통신을 보여 주는 전체 예제를 참조 하십시오. [소켓 코드 예제에서는](~/docs/framework/network-programming/socket-code-examples.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1550">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Async_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Async_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1551"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1551"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1552"><see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1552"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1553"><see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" />가 비동기 연결을 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1553"><see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" /> was previously called for the asynchronous connection.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1554">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1554">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1555"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1555">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
      </Docs>
    </Member>
    <Member MemberName="EndDisconnect">
      <MemberSignature Language="C#" Value="public void EndDisconnect (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndDisconnect(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndDisconnect (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndDisconnect(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="90a67-1556">이 비동기 작업에 대한 상태 정보와 사용자 정의 데이터를 저장하는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1556">An <see cref="T:System.IAsyncResult" /> object that stores state information and any user-defined data for this asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="90a67-1557">보류 중인 비동기 연결 끊기 요청을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1557">Ends a pending asynchronous disconnect request.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1558"><xref:System.Net.Sockets.Socket.EndDisconnect%2A> 호출을 완료 <xref:System.Net.Sockets.Socket.BeginDisconnect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1558"><xref:System.Net.Sockets.Socket.EndDisconnect%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginDisconnect%2A>.</span></span> <span data-ttu-id="90a67-1559"><xref:System.Net.Sockets.Socket.EndDisconnect%2A> 메서드는 연결 끊기 완료 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1559">The <xref:System.Net.Sockets.Socket.EndDisconnect%2A> method blocks until the disconnect completes.</span></span> <span data-ttu-id="90a67-1560">비동기 작업에 대 한 내용은 MSDN 라이브러리의 비동기 프로그래밍 개요 항목을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-1560">For information about asynchronous operations, see the Asynchronous Programming Overview topic in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1561">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1561">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1562">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1562">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1563">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1563">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1564">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1564">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1565">다음 코드 예제에서는 비동기 통신에 대 한 소켓을 만들고 원격 호스트에 일부 데이터를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1565">The following code example creates a socket for asynchronous communication and sends some data to a remote host.</span></span> <span data-ttu-id="90a67-1566">데이터를 보낼 때 <xref:System.Net.Sockets.Socket.Shutdown%2A> 송신을 중지 하 고 작업을 수신 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1566">When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity.</span></span> <span data-ttu-id="90a67-1567">그런 다음 <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> 연결 끊기 요청을 시작 하기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1567">Then <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> is called to begin a disconnect request.</span></span> <span data-ttu-id="90a67-1568">콜백을 호출을 위임 <xref:System.Net.Sockets.Socket.EndDisconnect%2A> 비동기 요청을 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1568">The callback delegate calls <xref:System.Net.Sockets.Socket.EndDisconnect%2A> to end the asynchronous request.</span></span> <span data-ttu-id="90a67-1569">요청이 완료 되는 <xref:System.Net.Sockets.Socket.Connected%2A> 속성은 소켓의 연결이 있는지 여부를 테스트 쿼리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1569">When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.</span></span>  
  
 [!code-cpp[Nclsocketenhancements#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#11)]
 [!code-csharp[Nclsocketenhancements#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1570">이 메서드에는 Windows XP가 필요한데 운영 체제가 Windows 2000 또는 그 이전 버전인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1570">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1571"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1571">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1572"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1572"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1573"><see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1573"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1574"><see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" />가 비동기 연결을 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1574"><see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" /> was previously called for the asynchronous connection.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1575">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1575">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.Net.WebException"><span data-ttu-id="90a67-1576">연결 끊기 요청 시간이 초과된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1576">The disconnect request has timed out.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndReceive">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-1577">보류 중인 비동기 읽기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1577">Ends a pending asynchronous read.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <summary><span data-ttu-id="90a67-1578">보류 중인 비동기 읽기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1578">Ends a pending asynchronous read.</span></span></summary>
        <returns><span data-ttu-id="90a67-1579">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1579">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1580"><xref:System.Net.Sockets.Socket.EndReceive%2A> 시작 비동기 읽기 작업을 완료 하는 메서드는 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1580">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1581">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginReceive%2A>를 구현 하는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1581">Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1582">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1582">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="90a67-1583">콜백 메서드는 <xref:System.IAsyncResult> 에서 반환 되는 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 메서드에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1583">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="90a67-1584">콜백 메서드 내에서 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult> 에 전달 된 상태 개체를 가져올 수는 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1584">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="90a67-1585">수신 추출 <xref:System.Net.Sockets.Socket> 에서이 상태 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1585">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="90a67-1586">가져온 후는 <xref:System.Net.Sockets.Socket>를 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드를 성공적으로 읽기 작업을 완료 하 고 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1586">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceive%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="90a67-1587"><xref:System.Net.Sockets.Socket.EndReceive%2A> 데이터를 사용할 수 있을 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1587">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method will block until data is available.</span></span> <span data-ttu-id="90a67-1588">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndReceive%2A> 들어오는 네트워크 버퍼에서 사용할 수 있는 첫 큐에 대기 된 데이터 그램에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1588">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceive%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="90a67-1589">연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드에 지정 된 바이트 수까지 사용 가능한 데이터 읽습니다는 `size` 의 매개 변수는 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1589">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="90a67-1590">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1590">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-1591">수신된 된 데이터를 가져오려면 호출는 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult>, 결과 상태 개체에 포함 된 버퍼를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1591">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.</span></span>  
  
 <span data-ttu-id="90a67-1592">취소 하는 보류 중인 <xref:System.Net.Sockets.Socket.BeginReceive%2A>, 호출 된 <xref:System.Net.Sockets.Socket.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1592">To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1593">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1593">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1594">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1594">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1595">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1595">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-1596">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1596">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1597">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1597">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1598">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1598">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1599">다음 코드 예제에서는 보류 중인 비동기 읽기를 종료합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1599">The following code example ends a pending asynchronous read.</span></span> <span data-ttu-id="90a67-1600">소켓의 비동기 통신을 보여 주는 전체 예제를 참조 하십시오. [소켓 코드 예제에서는](~/docs/framework/network-programming/socket-code-examples.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1600">For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](~/docs/framework/network-programming/socket-code-examples.md).</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Async_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Async_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1601"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1601"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1602"><see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1602"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1603"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" />가 비동기 읽기를 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1603"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1604">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1604">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1605"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1605">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public int EndReceive (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceive(class System.IAsyncResult asyncResult, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef errorCode As SocketError) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceive(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="90a67-1606">이 비동기 작업에 대한 상태 정보 및 사용자 정의 데이터를 저장하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1606">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <param name="errorCode"><span data-ttu-id="90a67-1607">소켓 오류를 저장하는 <see cref="T:System.Net.Sockets.SocketError" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1607">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="90a67-1608">보류 중인 비동기 읽기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1608">Ends a pending asynchronous read.</span></span></summary>
        <returns><span data-ttu-id="90a67-1609">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1609">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1610"><xref:System.Net.Sockets.Socket.EndReceive%2A> 시작 비동기 읽기 작업을 완료 하는 메서드는 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1610">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1611">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginReceive%2A>를 구현 하는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1611">Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1612">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1612">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="90a67-1613">콜백 메서드는 <xref:System.IAsyncResult> 에서 반환 되는 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 메서드에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1613">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="90a67-1614">콜백 메서드 내에서 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult> 에 전달 된 상태 개체를 가져올 수는 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1614">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="90a67-1615">수신 추출 <xref:System.Net.Sockets.Socket> 에서이 상태 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1615">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="90a67-1616">가져온 후는 <xref:System.Net.Sockets.Socket>를 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드를 성공적으로 읽기 작업을 완료 하 고 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1616">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceive%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="90a67-1617"><xref:System.Net.Sockets.Socket.EndReceive%2A> 데이터를 사용할 수 있을 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1617">The <xref:System.Net.Sockets.Socket.EndReceive%2A> method will block until data is available.</span></span> <span data-ttu-id="90a67-1618">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndReceive%2A> 들어오는 네트워크 버퍼에서 사용할 수 있는 첫 큐에 대기 된 데이터 그램에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1618">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceive%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="90a67-1619">연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드에 지정 된 바이트 수까지 사용 가능한 데이터 읽습니다는 `size` 의 매개 변수는 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1619">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.</span></span> <span data-ttu-id="90a67-1620">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.EndReceive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1620">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-1621">수신된 된 데이터를 가져오려면 호출는 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult>, 결과 상태 개체에 포함 된 버퍼를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1621">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1622">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1622">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1623">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1623">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1624">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1624">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-1625">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1625">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1626">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1626">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1627">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1627">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1628"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1628"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1629"><see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1629"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1630"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" />가 비동기 읽기를 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1630"><see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1631">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1631">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1632"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1632">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFrom">
      <MemberSignature Language="C#" Value="public int EndReceiveFrom (IAsyncResult asyncResult, ref System.Net.EndPoint endPoint);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFrom(class System.IAsyncResult asyncResult, class System.Net.EndPoint&amp; endPoint) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFrom (asyncResult As IAsyncResult, ByRef endPoint As EndPoint) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFrom(IAsyncResult ^ asyncResult, System::Net::EndPoint ^ % endPoint);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public int EndReceiveFrom (IAsyncResult result, ref System.Net.EndPoint end_point);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFrom(class System.IAsyncResult result, class System.Net.EndPoint&amp; end_point) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFrom (result As IAsyncResult, ByRef end_point As EndPoint) As Integer" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFrom(IAsyncResult ^ result, System::Net::EndPoint ^ % end_point);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint&amp;" RefType="ref" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="end_point" Type="System.Net.EndPoint&amp;" RefType="ref" Index="1" FrameworkAlternate="xamarinandroid-7.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <param name="result">To be added.</param>
        <param name="endPoint">To be added.</param>
        <param name="end_point">To be added.</param>
        <summary><span data-ttu-id="90a67-1633">특정 끝점에서 보류 중인 비동기 읽기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1633">Ends a pending asynchronous read from a specific endpoint.</span></span></summary>
        <returns><span data-ttu-id="90a67-1634">성공할 경우 받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1634">If successful, the number of bytes received.</span></span> <span data-ttu-id="90a67-1635">실패하면 0을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1635">If unsuccessful, returns 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1636"><xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> 시작 비동기 읽기 작업을 완료 하는 메서드는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1636">The <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1637">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>를 구현 하는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1637">Before calling <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1638">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1638">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> returns.</span></span> <span data-ttu-id="90a67-1639">콜백 메서드는 <xref:System.IAsyncResult> 에서 반환 되는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1639">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="90a67-1640">콜백 메서드 내에서 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult> 에 전달 된 상태 개체를 가져올 수는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1640">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-1641">수신 추출 <xref:System.Net.Sockets.Socket> 에서이 상태 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1641">Extract the receiving <xref:System.Net.Sockets.Socket> from this state object.</span></span> <span data-ttu-id="90a67-1642">가져온 후는 <xref:System.Net.Sockets.Socket>를 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> 메서드를 성공적으로 읽기 작업을 완료 하 고 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1642">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method to successfully complete the read operation and return the number of bytes read.</span></span>  
  
 <span data-ttu-id="90a67-1643"><xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> 데이터를 사용할 수 있을 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1643">The <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="90a67-1644">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> 들어오는 네트워크 버퍼에서 사용할 수 있는 첫 큐에 대기 된 데이터 그램에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1644">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> will read the first enqueued datagram available in the incoming network buffer.</span></span> <span data-ttu-id="90a67-1645">연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> 메서드에 지정 된 바이트 수까지 사용 가능한 데이터 읽습니다는 `size` 의 매개 변수는 <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1645">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-1646">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1646">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span> <span data-ttu-id="90a67-1647">수신된 된 데이터를 가져오려면 호출는 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult> 개체를 결과 상태 개체에 포함 된 버퍼를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1647">To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> object, and extract the buffer contained in the resulting state object.</span></span> <span data-ttu-id="90a67-1648">원래 호스트를 식별 하려면 추출 된 <xref:System.Net.EndPoint> 캐스팅 합니다는 <xref:System.Net.IPEndPoint>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1648">To identify the originating host, extract the <xref:System.Net.EndPoint> and cast it to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="90a67-1649">사용 하 여는 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> IP 주소를 가져올 메서드 및 <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> 포트 번호를 얻는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1649">Use the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to obtain the IP address and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to obtain the port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1650">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1650">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1651">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1651">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1652">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1652">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1653">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1653">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1654">다음 코드 예제에서는 특정에서 보류 중인 비동기 읽기가 끝나는 <xref:System.Net.EndPoint>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1654">The following code example ends a pending asynchronous read from a specific <xref:System.Net.EndPoint>.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#10)]
 [!code-csharp[Socket_Async_Send_Receive#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#10)]
 [!code-vb[Socket_Async_Send_Receive#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1655"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1655"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1656"><see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1656"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1657"><see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />가 비동기 읽기를 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1657"><see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1658">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1658">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1659"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1659">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public int EndReceiveMessageFrom (IAsyncResult asyncResult, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint endPoint, out System.Net.Sockets.IPPacketInformation ipPacketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveMessageFrom(class System.IAsyncResult asyncResult, valuetype System.Net.Sockets.SocketFlags&amp; socketFlags, class System.Net.EndPoint&amp; endPoint, [out] valuetype System.Net.Sockets.IPPacketInformation&amp; ipPacketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveMessageFrom (asyncResult As IAsyncResult, ByRef socketFlags As SocketFlags, ByRef endPoint As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveMessageFrom(IAsyncResult ^ asyncResult, System::Net::Sockets::SocketFlags % socketFlags, System::Net::EndPoint ^ % endPoint, [Runtime::InteropServices::Out] System::Net::Sockets::IPPacketInformation % ipPacketInformation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags&amp;" RefType="ref" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint&amp;" RefType="ref" />
        <Parameter Name="ipPacketInformation" Type="System.Net.Sockets.IPPacketInformation&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="90a67-1660">이 비동기 작업에 대한 상태 정보 및 사용자 정의 데이터를 저장하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1660">An <see cref="T:System.IAsyncResult" /> that stores state information and any user defined data for this asynchronous operation.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-1661">받은 패킷에 대한 <see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1661">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values for the received packet.</span></span></param>
        <param name="endPoint"><span data-ttu-id="90a67-1662">소스 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1662">The source <see cref="T:System.Net.EndPoint" />.</span></span></param>
        <param name="ipPacketInformation"><span data-ttu-id="90a67-1663">받은 패킷의 <see cref="T:System.Net.IPAddress" /> 및 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1663">The <see cref="T:System.Net.IPAddress" /> and interface of the received packet.</span></span></param>
        <summary><span data-ttu-id="90a67-1664">특정 끝점에서 보류 중인 비동기 읽기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1664">Ends a pending asynchronous read from a specific endpoint.</span></span> <span data-ttu-id="90a67-1665">또한 이 메서드는 패킷에 대해 <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />이 제공하는 것보다 많은 정보를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1665">This method also reveals more information about the packet than <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-1666">성공할 경우 받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1666">If successful, the number of bytes received.</span></span> <span data-ttu-id="90a67-1667">실패하면 0을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1667">If unsuccessful, returns 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1668">작업이 완료 되지 않은 경우이 메서드는 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1668">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="90a67-1669">이 작업을 동기적으로 수행 하려면는 <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1669">To perform this operation synchronously, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-1670">검사 `ipPacketInformation` 유니캐스트, 멀티 캐스트 또는 브로드캐스트 주소를 사용 하 여 데이터 그램을 보냈는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1670">Examine `ipPacketInformation` if you need to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1671"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1671"><paramref name="asyncResult" /> is <see langword="null" /></span></span>  
  
 <span data-ttu-id="90a67-1672">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-1672">-or-</span></span>  
  
 <span data-ttu-id="90a67-1673"><paramref name="endPoint" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1673"><paramref name="endPoint" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1674"><see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1674"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1675"><see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />가 비동기 읽기를 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1675"><see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> was previously called for the asynchronous read.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1676">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1676">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1677"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1677">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="EndSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-1678">보류 중인 비동기 보내기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1678">Ends a pending asynchronous send.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <summary><span data-ttu-id="90a67-1679">보류 중인 비동기 보내기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1679">Ends a pending asynchronous send.</span></span></summary>
        <returns><span data-ttu-id="90a67-1680">성공적이면 <see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수이고, 그렇지 않으면 잘못된 <see cref="T:System.Net.Sockets.Socket" /> 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1680">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1681"><xref:System.Net.Sockets.Socket.EndSend%2A> 시작 비동기 발신 작업을 완료 <xref:System.Net.Sockets.Socket.BeginSend%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1681"><xref:System.Net.Sockets.Socket.EndSend%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.</span></span>  
  
 <span data-ttu-id="90a67-1682">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginSend%2A>를 구현 하는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1682">Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1683">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <xref:System.Net.Sockets.Socket.BeginSend%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1683">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns.</span></span> <span data-ttu-id="90a67-1684">콜백 메서드는 <xref:System.IAsyncResult> 에서 반환 되는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1684">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="90a67-1685">콜백 메서드 내에서 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult> 를 보내는 가져오려면 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1685">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1686">가져온 후의 <xref:System.Net.Sockets.Socket>를 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndSend%2A> 메서드를 성공적으로 송신 작업을 완료 하 고 보낸 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1686">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSend%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="90a67-1687">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndSend%2A> 데이터 그램 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1687">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="90a67-1688">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndSend%2A> 버퍼의 전송 된 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1688">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until some of the buffer was sent.</span></span> <span data-ttu-id="90a67-1689">반환 된 값 <xref:System.Net.Sockets.Socket.EndSend%2A> 버퍼 되지 않았음을 나타냅니다 완전히 송신 호출에서 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드가 다시 보내지 않은 데이터를 저장할 버퍼를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1689">If the return value from <xref:System.Net.Sockets.Socket.EndSend%2A> indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.</span></span>  
  
 <span data-ttu-id="90a67-1690">보장이 없습니다 하는 보내는 데이터를 네트워크에 즉시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1690">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-1691">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1691">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-1692">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1692">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1693">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1693">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1694">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1694">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1695">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1695">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-1696">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1696">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1697">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1697">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-1698">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1698">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1699">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1699">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1700">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1700">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1701">다음 코드 예제에서는 보류 중인 비동기 발신을 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1701">The following code example ends a pending asynchronous send.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#6)]
 [!code-csharp[Socket_Async_Send_Receive#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#6)]
 [!code-vb[Socket_Async_Send_Receive#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1702"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1702"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1703"><see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1703"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1704"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />가 비동기 보내기를 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1704"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous send.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1705">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1705">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1706"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1706">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.NoDelay" />
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult, ByRef errorCode As SocketError) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="90a67-1707">이 비동기 작업에 대한 상태 정보를 저장하는 <see cref="T:System.IAsyncResult" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1707">An <see cref="T:System.IAsyncResult" /> that stores state information for this asynchronous operation.</span></span></param>
        <param name="errorCode"><span data-ttu-id="90a67-1708">소켓 오류를 저장하는 <see cref="T:System.Net.Sockets.SocketError" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1708">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="90a67-1709">보류 중인 비동기 보내기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1709">Ends a pending asynchronous send.</span></span></summary>
        <returns><span data-ttu-id="90a67-1710">성공적이면 <see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수이고, 그렇지 않으면 잘못된 <see cref="T:System.Net.Sockets.Socket" /> 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1710">If successful, the number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1711"><xref:System.Net.Sockets.Socket.EndSend%2A> 시작 비동기 발신 작업을 완료 <xref:System.Net.Sockets.Socket.BeginSend%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1711"><xref:System.Net.Sockets.Socket.EndSend%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.</span></span>  
  
 <span data-ttu-id="90a67-1712">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginSend%2A>를 구현 하는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1712">Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1713">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <xref:System.Net.Sockets.Socket.BeginSend%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1713">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns.</span></span> <span data-ttu-id="90a67-1714">콜백 메서드는 <xref:System.IAsyncResult> 에서 반환 되는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1714">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="90a67-1715">콜백 메서드 내에서 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult> 를 보내는 가져오려면 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1715">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1716">가져온 후의 <xref:System.Net.Sockets.Socket>를 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndSend%2A> 메서드를 성공적으로 송신 작업을 완료 하 고 보낸 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1716">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSend%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="90a67-1717">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndSend%2A> 데이터 그램 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1717">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="90a67-1718">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndSend%2A> 버퍼의 전송 된 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1718">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until some of the buffer was sent.</span></span> <span data-ttu-id="90a67-1719">반환 된 값 <xref:System.Net.Sockets.Socket.EndSend%2A> 버퍼 되지 않았음을 나타냅니다 완전히 송신 호출에서 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드가 다시 보내지 않은 데이터를 저장할 버퍼를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1719">If the return value from <xref:System.Net.Sockets.Socket.EndSend%2A> indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.</span></span>  
  
 <span data-ttu-id="90a67-1720">보장이 없습니다 하는 보내는 데이터를 네트워크에 즉시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1720">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-1721">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1721">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-1722">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.BeginSend%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1722">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1723">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1723">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1724">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1724">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1725">지정 된 스레드에 의해 시작 되는 모든 I/O는 종료 되 면 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1725">All I/O initiated by a given thread is canceled when that thread exits.</span></span> <span data-ttu-id="90a67-1726">스레드가 종료 된 작업이 완료 되기 전에 보류 중인 비동기 작업이 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1726">A pending asynchronous operation can fail if the thread exits before the operation completes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1727">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1727">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-1728">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1728">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1729">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1729">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1730">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1730">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1731"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1731"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1732"><see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1732"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1733"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" />가 비동기 보내기를 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1733"><see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> was previously called for the asynchronous send.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1734">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1734">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1735"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1735">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="P:System.IAsyncResult.AsyncState" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.NoDelay" />
      </Docs>
    </Member>
    <Member MemberName="EndSendFile">
      <MemberSignature Language="C#" Value="public void EndSendFile (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendFile(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendFile (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendFile(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="90a67-1736">이 비동기 작업에 대한 상태 정보를 저장하는 <see cref="T:System.IAsyncResult" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1736">An <see cref="T:System.IAsyncResult" /> object that stores state information for this asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="90a67-1737">보류 중인 비동기 파일 보내기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1737">Ends a pending asynchronous send of a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1738"><xref:System.Net.Sockets.Socket.EndSendFile%2A> 시작 비동기 발신 작업을 완료 <xref:System.Net.Sockets.Socket.BeginSendFile%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1738"><xref:System.Net.Sockets.Socket.EndSendFile%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendFile%2A>.</span></span>  
  
 <span data-ttu-id="90a67-1739">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginSendFile%2A>를 구현 하는 콜백 메서드를 만들어야 합니다는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1739">Before calling <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, you must create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1740">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1740">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSendFile%2A> returns.</span></span> <span data-ttu-id="90a67-1741">콜백 메서드는 <xref:System.IAsyncResult> 에서 반환 된 개체는 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> 메서드에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1741">The callback method must accept the <xref:System.IAsyncResult> object returned by the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="90a67-1742">콜백 메서드 내에서 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult> 를 보내는 가져오려면 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1742">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1743">가져온 후는 <xref:System.Net.Sockets.Socket>, 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 메서드를 성공적으로 보내기 작업을 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1743">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method to successfully complete the send operation.</span></span>  
  
 <span data-ttu-id="90a67-1744">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 데이터 그램 전송 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1744">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSendFile%2A> blocks until the datagram is sent.</span></span> <span data-ttu-id="90a67-1745">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 전체 파일이 전송 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1745">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSendFile%2A> blocks until the entire file is sent.</span></span> <span data-ttu-id="90a67-1746">보장이 없습니다 하는 보내는 데이터를 네트워크에 즉시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1746">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-1747">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1747">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-1748">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.BeginSendFile%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1748">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1749">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1749">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1750">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1750">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1751">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1751">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1752">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1752">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1753">다음 코드 예제에서는 비동기 통신에 대 한 소켓 연결 및 보내기 시작 파일 "text.txt" 비동기적으로 원격 호스트에 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1753">The following code example creates and connects a socket for asynchronous communication and begins sending the file "text.txt" asynchronously to the remote host.</span></span> <span data-ttu-id="90a67-1754">콜백을 호출을 위임 <xref:System.Net.Sockets.Socket.EndSendFile%2A> 전송을 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1754">The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#9)]
 [!code-csharp[NCLSocketEnhancements#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-1755">이 메서드에는 Windows NT가 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1755">Windows NT is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1756"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1756">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1757"><paramref name="asyncResult" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1757"><paramref name="asyncResult" /> is empty.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1758"><see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1758"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1759"><see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" />이 비동기 <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />을 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1759"><see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" /> was previously called for the asynchronous <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1760">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1760">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-1761">아래의 설명 부분을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-1761">See remarks section below.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendTo">
      <MemberSignature Language="C#" Value="public int EndSendTo (IAsyncResult asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSendTo(class System.IAsyncResult asyncResult) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSendTo (asyncResult As IAsyncResult) As Integer" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSendTo(IAsyncResult ^ asyncResult);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
      <MemberSignature Language="C#" Value="public int EndSendTo (IAsyncResult result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSendTo(class System.IAsyncResult result) cil managed" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" FrameworkAlternate="xamarinandroid-7.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSendTo (result As IAsyncResult) As Integer" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSendTo(IAsyncResult ^ result);" FrameworkAlternate="xamarinandroid-7.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0" />
        <Parameter Name="result" Type="System.IAsyncResult" Index="0" FrameworkAlternate="xamarinandroid-7.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult">To be added.</param>
        <summary><span data-ttu-id="90a67-1762">특정 위치로의 보류 중인 비동기 보내기를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1762">Ends a pending asynchronous send to a specific location.</span></span></summary>
        <returns><span data-ttu-id="90a67-1763">성공적이면 보낸 바이트 수이고, 그렇지 않으면 잘못된 <see cref="T:System.Net.Sockets.Socket" /> 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1763">If successful, the number of bytes sent; otherwise, an invalid <see cref="T:System.Net.Sockets.Socket" /> error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1764"><xref:System.Net.Sockets.Socket.EndSendTo%2A> 시작 비동기 발신 작업을 완료 <xref:System.Net.Sockets.Socket.BeginSendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1764"><xref:System.Net.Sockets.Socket.EndSendTo%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.</span></span>  
  
 <span data-ttu-id="90a67-1765">호출 하기 전에 <xref:System.Net.Sockets.Socket.BeginSendTo%2A>를 구현 하는 콜백 메서드를 만들어야 할는 <xref:System.AsyncCallback> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1765">Before calling <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate.</span></span> <span data-ttu-id="90a67-1766">이 콜백 메서드는 별도의 스레드에서 실행 한 후 시스템에 의해 호출 됩니다 <xref:System.Net.Sockets.Socket.BeginReceive%2A> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1766">This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns.</span></span> <span data-ttu-id="90a67-1767">콜백 메서드는 <xref:System.IAsyncResult> 에서 반환 되는 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 메서드에 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1767">The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method as a parameter.</span></span>  
  
 <span data-ttu-id="90a67-1768">콜백 메서드 내에서 <xref:System.IAsyncResult.AsyncState%2A> 의 메서드는 <xref:System.IAsyncResult> 를 보내는 가져오려면 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1768">Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1769">가져온 후의 <xref:System.Net.Sockets.Socket>를 호출할 수 있습니다는 <xref:System.Net.Sockets.Socket.EndSendTo%2A> 메서드를 성공적으로 송신 작업을 완료 하 고 보낸 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1769">After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method to successfully complete the send operation and return the number of bytes sent.</span></span>  
  
 <span data-ttu-id="90a67-1770">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndSendTo%2A> 데이터 그램 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1770">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="90a67-1771">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.EndSendTo%2A> 바이트 수가 요청 된 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1771">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSendTo%2A> will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="90a67-1772">보장이 없습니다 하는 보내는 데이터를 네트워크에 즉시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1772">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-1773">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1773">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-1774">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.BeginSendTo%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1774">A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1775">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1775">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1776">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1776">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1777">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1777">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1778">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1778">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1779">다음 코드 예제에서는 특정 위치에 비동기 발신을 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1779">The following code example ends an asynchronous send to a specific location.</span></span>  
  
 [!code-cpp[Socket_Async_Send_Receive#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CPP/source.cpp#9)]
 [!code-csharp[Socket_Async_Send_Receive#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Async_Send_Receive/CS/source.cs#9)]
 [!code-vb[Socket_Async_Send_Receive#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Async_Send_Receive/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-1780"><paramref name="asyncResult" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1780"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-1781"><see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> 메서드를 호출했지만 <paramref name="asyncResult" />가 반환되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1781"><paramref name="asyncResult" /> was not returned by a call to the <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1782"><see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" />가 비동기 보내기를 위해 이미 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1782"><see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" /> was previously called for the asynchronous send.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1783">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1783">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1784"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1784">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1785"><see cref="T:System.Boolean" />이 하나의 포트에 하나의 프로세스만 바인딩하는 것을 허용하는지 여부를 지정하는 <see cref="T:System.Net.Sockets.Socket" /> 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1785">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> allows only one process to bind to a port.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1786"><see cref="T:System.Net.Sockets.Socket" />이 특정 포트에 하나의 소켓만 바인딩하는 것을 허용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1786"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> allows only one socket to bind to a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="90a67-1787">기본값은 <see langword="true" /> Windows Server 2003 및 Windows XP 서비스 팩 2 및 <see langword="false" /> 다른 모든 버전.</span><span class="sxs-lookup"><span data-stu-id="90a67-1787">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1788">하지만 경우 <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> 은 `false`, 여러 소켓을 사용할 수는 <xref:System.Net.Sockets.Socket.Bind%2A> 특정 포트에 바인딩하는 방법으로, 소켓 중 하나에만 포트에 전송 되는 네트워크 트래픽에 대 한 작업을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1788">If <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> is `false`, multiple sockets can use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a specific port; however only one of the sockets can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="90a67-1789">둘 이상의 소켓 사용 하려고 시도 하는 경우는 <xref:System.Net.Sockets.Socket.Bind%28System.Net.EndPoint%29> 보다 구체적인 IP 주소를 가진 하나를 해당 포트로 전송 되는 네트워크 트래픽을 처리한 다음 특정 포트에 바인딩할 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1789">If more than one socket attempts to use the <xref:System.Net.Sockets.Socket.Bind%28System.Net.EndPoint%29> method to bind to a particular port, then the one with the more specific IP address will handle the network traffic sent to that port.</span></span>  
  
 <span data-ttu-id="90a67-1790">경우 <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> 은 `true`, 처음 사용은 <xref:System.Net.Sockets.Socket.Bind%2A> IP (인터넷 프로토콜) 주소에 관계 없이 특정 포트에 바인딩할 하려고 하는 메서드가 성공적으로 실행,의 모든 후속 사용은 <xref:System.Net.Sockets.Socket.Bind%2A> 해당 포트에 바인딩할 하려고 하는 방법은 원래 바운드 소켓이 소멸 될 때까지 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1790">If <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> is `true`, the first use of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to a particular port, regardless of Internet Protocol (IP) address, will succeed; all subsequent uses of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to that port will fail until the original bound socket is destroyed.</span></span>  
  
 <span data-ttu-id="90a67-1791">이 속성 전에 설정 해야 <xref:System.Net.Sockets.Socket.Bind%2A> 호출 되지 않았으면는 <xref:System.InvalidOperationException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1791">This property must be set before <xref:System.Net.Sockets.Socket.Bind%2A> is called; otherwise an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1792">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1792">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1793">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1793">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1794"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1794">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="90a67-1795"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />가 이 <see cref="T:System.Net.Sockets.Socket" />에 대해 호출된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1795"><see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> has been called for this <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Socket ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Socket ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90a67-1796"><see cref="T:System.Net.Sockets.Socket" /> 클래스에서 사용한 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1796">Frees resources used by the <see cref="T:System.Net.Sockets.Socket" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1797"><xref:System.Net.Sockets.Socket> 클래스가 종료자 호출은 <xref:System.Net.Sockets.Socket.Close%2A> 을 닫는 메서드는 <xref:System.Net.Sockets.Socket> 와 연결 된 리소스를 해제 하 고는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1797">The <xref:System.Net.Sockets.Socket> class finalizer calls the <xref:System.Net.Sockets.Socket.Close%2A> method to close the <xref:System.Net.Sockets.Socket> and free resources associated with the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSocketOption">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-1798"><see cref="T:System.Net.Sockets.Socket" /> 옵션의 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1798">Returns the value of a <see cref="T:System.Net.Sockets.Socket" /> option.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public object GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="90a67-1799"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1799">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="90a67-1800"><see cref="T:System.Net.Sockets.SocketOptionName" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1800">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-1801">개체로 나타내는 지정된 <see cref="T:System.Net.Sockets.Socket" /> 옵션 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1801">Returns the value of a specified <see cref="T:System.Net.Sockets.Socket" /> option, represented as an object.</span></span></summary>
        <returns><span data-ttu-id="90a67-1802">옵션 값을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1802">An object that represents the value of the option.</span></span> <span data-ttu-id="90a67-1803"><paramref name="optionName" /> 매개 변수가 <see cref="F:System.Net.Sockets.SocketOptionName.Linger" />로 설정되면 반환 값은 <see cref="T:System.Net.Sockets.LingerOption" /> 클래스의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1803">When the <paramref name="optionName" /> parameter is set to <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> the return value is an instance of the <see cref="T:System.Net.Sockets.LingerOption" /> class.</span></span> <span data-ttu-id="90a67-1804"><paramref name="optionName" />이 <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" />이나 <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" />으로 설정되면 반환 값은 <see cref="T:System.Net.Sockets.MulticastOption" /> 클래스의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1804">When <paramref name="optionName" /> is set to <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> or <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" />, the return value is an instance of the <see cref="T:System.Net.Sockets.MulticastOption" /> class.</span></span> <span data-ttu-id="90a67-1805"><paramref name="optionName" />이 다른 값이면 반환 값은 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1805">When <paramref name="optionName" /> is any other value, the return value is an integer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1806"><xref:System.Net.Sockets.Socket> 현재 동작을 결정 하는 옵션 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1806"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1807">이 오버 로드를 사용 하 여 가져오려는 <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, 및 <xref:System.Net.Sockets.SocketOptionName.DropMembership> <xref:System.Net.Sockets.Socket> 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1807">Use this overload to get the <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, and <xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket> options.</span></span> <span data-ttu-id="90a67-1808">에 대 한는 <xref:System.Net.Sockets.SocketOptionName.Linger> 옵션을 사용 하 여 <xref:System.Net.Sockets.Socket> 에 대 한는 `optionLevel` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1808">For the <xref:System.Net.Sockets.SocketOptionName.Linger> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter.</span></span> <span data-ttu-id="90a67-1809">에 대 한 <xref:System.Net.Sockets.SocketOptionName.AddMembership> 및 <xref:System.Net.Sockets.SocketOptionName.DropMembership>를 사용 하 여 <xref:System.Net.Sockets.SocketOptionLevel.IP>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1809">For <xref:System.Net.Sockets.SocketOptionName.AddMembership> and <xref:System.Net.Sockets.SocketOptionName.DropMembership>, use <xref:System.Net.Sockets.SocketOptionLevel.IP>.</span></span> <span data-ttu-id="90a67-1810">위에 나열 된 옵션의 값을 설정, 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1810">If you want to set the value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1811">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1811">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1812">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1812">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1813">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1813">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1814">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1814">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1815">다음 코드 예제에서는 검색 된 <xref:System.Net.Sockets.LingerOption> 및 <xref:System.Net.Sockets.Socket.Send%2A> 제한 시간 값을 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1815">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1816">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1816">An error occurred when attempting to access the socket.</span></span>  
  
 <span data-ttu-id="90a67-1817">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-1817">-or-</span></span>  
  
 <span data-ttu-id="90a67-1818"><paramref name="optionName" />이 지원되지 않는 값인 <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />로 설정된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1818"><paramref name="optionName" /> was set to the unsupported value <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1819"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1819">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public void GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, unsigned int8[] optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, cli::array &lt;System::Byte&gt; ^ optionValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="90a67-1820"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1820">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="90a67-1821"><see cref="T:System.Net.Sockets.SocketOptionName" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1821">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="90a67-1822">해당 옵션 설정을 받을 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1822">An array of type <see cref="T:System.Byte" /> that is to receive the option setting.</span></span></param>
        <summary><span data-ttu-id="90a67-1823">바이트 배열로 나타내는 지정된 <see cref="T:System.Net.Sockets.Socket" /> 옵션 설정을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1823">Returns the specified <see cref="T:System.Net.Sockets.Socket" /> option setting, represented as a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1824"><xref:System.Net.Sockets.Socket> 현재 동작을 결정 하는 옵션 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1824"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-1825">이 메서드의 성공적 완료 되 면 배열에서 지정한는 `optionValue` 매개 변수에 지정된 된 값이 포함 된 <xref:System.Net.Sockets.Socket> 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1825">Upon successful completion of this method, the array specified by the `optionValue` parameter contains the value of the specified <xref:System.Net.Sockets.Socket> option.</span></span>  
  
 <span data-ttu-id="90a67-1826">때의 길이 `optionValue` 배열이 지정된 된 값을 저장 하는 데 필요한 바이트의 수보다 작은 <xref:System.Net.Sockets.Socket> 옵션을 <xref:System.Net.Sockets.Socket.GetSocketOption%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1826">When the length of the `optionValue` array is smaller than the number of bytes required to store the value of the specified <xref:System.Net.Sockets.Socket> option, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-1827">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1827">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1828">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1828">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="90a67-1829">정수 또는 부울 값으로 표현 되는 모든 소켓에 대 한이 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1829">Use this overload for any sockets that are represented by Boolean values or integers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1830">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1830">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1831">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1831">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1832">다음 코드 예제에서는 검색 된 <xref:System.Net.Sockets.LingerOption> 및 <xref:System.Net.Sockets.Socket.Send%2A> 제한 시간 값을 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1832">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1833">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1833">An error occurred when attempting to access the socket.</span></span>  
  
 <span data-ttu-id="90a67-1834">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="90a67-1834">\- or -</span></span>  
  
 <span data-ttu-id="90a67-1835">.NET Compact Framework 응용 프로그램에서 Windows CE 기본 버퍼 공간을 32768바이트로 설정한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-1835">In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes.</span></span> <span data-ttu-id="90a67-1836"><see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />을 호출하여 소켓당 버퍼 공간을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1836">You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1837"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1837">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="GetSocketOption">
      <MemberSignature Language="C#" Value="public byte[] GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, int32 optionLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionLength As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="90a67-1838"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1838">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="90a67-1839"><see cref="T:System.Net.Sockets.SocketOptionName" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1839">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionLength"><span data-ttu-id="90a67-1840">예상되는 반환 값의 길이(바이트)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1840">The length, in bytes, of the expected return value.</span></span></param>
        <summary><span data-ttu-id="90a67-1841">배열의 지정된 <see cref="T:System.Net.Sockets.Socket" /> 옵션 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1841">Returns the value of the specified <see cref="T:System.Net.Sockets.Socket" /> option in an array.</span></span></summary>
        <returns><span data-ttu-id="90a67-1842">소켓 옵션의 값을 포함하는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1842">An array of type <see cref="T:System.Byte" /> that contains the value of the socket option.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1843">`optionLength` 매개 변수는 반환 된 바이트 배열의 최대 크기를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1843">The `optionLength` parameter sets the maximum size of the returned byte array.</span></span> <span data-ttu-id="90a67-1844">옵션 값이 적은 바이트 필요한 경우 배열 포함 됩니다 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1844">If the option value requires fewer bytes, the array will contain only that many bytes.</span></span> <span data-ttu-id="90a67-1845">옵션 값에 더 많은 바이트 필요 <xref:System.Net.Sockets.Socket.GetSocketOption%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1845">If the option value requires more bytes, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-1846">정수 또는 부울 값으로 표현 되는 모든 소켓에 대 한이 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1846">Use this overload for any sockets that are represented by Boolean values or integers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1847">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1847">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1848">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1848">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1849">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1849">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1850">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1850">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1851">다음 코드 예제에서는 검색 된 <xref:System.Net.Sockets.LingerOption> 및 <xref:System.Net.Sockets.Socket.Send%2A> 제한 시간 값을 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1851">The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1852">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1852">An error occurred when attempting to access the socket.</span></span>  
  
 <span data-ttu-id="90a67-1853">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="90a67-1853">\- or -</span></span>  
  
 <span data-ttu-id="90a67-1854">.NET Compact Framework 응용 프로그램에서 Windows CE 기본 버퍼 공간을 32768바이트로 설정한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-1854">In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes.</span></span> <span data-ttu-id="90a67-1855"><see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />을 호출하여 소켓당 버퍼 공간을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1855">You can change the per socket buffer space by calling <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1856"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1856">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1857"><see cref="T:System.Net.Sockets.Socket" />에 대한 운영 체제 핸들을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1857">Gets the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="90a67-1858"><see cref="T:System.IntPtr" />에 대한 운영 체제 핸들을 나타내는 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1858">An <see cref="T:System.IntPtr" /> that represents the operating system handle for the <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IOControl">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-1859"><see cref="T:System.Net.Sockets.Socket" />의 하위 수준 운영 모드를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1859">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IOControl">
      <MemberSignature Language="C#" Value="public int IOControl (int ioControlCode, byte[] optionInValue, byte[] optionOutValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IOControl(int32 ioControlCode, unsigned int8[] optionInValue, unsigned int8[] optionOutValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IOControl (ioControlCode As Integer, optionInValue As Byte(), optionOutValue As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IOControl(int ioControlCode, cli::array &lt;System::Byte&gt; ^ optionInValue, cli::array &lt;System::Byte&gt; ^ optionOutValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ioControlCode" Type="System.Int32" />
        <Parameter Name="optionInValue" Type="System.Byte[]" />
        <Parameter Name="optionOutValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="ioControlCode"><span data-ttu-id="90a67-1860">수행할 작업의 컨트롤 코드를 지정하는 <see cref="T:System.Int32" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1860">An <see cref="T:System.Int32" /> value that specifies the control code of the operation to perform.</span></span></param>
        <param name="optionInValue"><span data-ttu-id="90a67-1861">작업에 필요한 입력 데이터가 들어 있는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1861">A <see cref="T:System.Byte" /> array that contains the input data required by the operation.</span></span></param>
        <param name="optionOutValue"><span data-ttu-id="90a67-1862">작업에서 반환된 출력 데이터가 들어 있는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1862">A <see cref="T:System.Byte" /> array that contains the output data returned by the operation.</span></span></param>
        <summary><span data-ttu-id="90a67-1863">숫자 컨트롤 코드를 사용하여 <see cref="T:System.Net.Sockets.Socket" />의 하위 수준 운영 모드를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1863">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" /> using numerical control codes.</span></span></summary>
        <returns><span data-ttu-id="90a67-1864"><paramref name="optionOutValue" /> 매개 변수의 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1864">The number of bytes in the <paramref name="optionOutValue" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1865"><xref:System.Net.Sockets.Socket.IOControl%2A> 운영 체제에 대 한 하위 수준 액세스를 제공 하는 메서드 <xref:System.Net.Sockets.Socket> 의 현재 인스턴스의 내부는 <xref:System.Net.Sockets.Socket> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1865">The <xref:System.Net.Sockets.Socket.IOControl%2A> method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class.</span></span> <span data-ttu-id="90a67-1866">자세한 내용은 MSDN library에서 WSAIoctl 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1866">For more information, see the WSAIoctl documentation in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1867">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1867">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1868">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1868">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1869">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1869">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1870">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1870">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1871">다음 코드 예제에서는 FIONREAD 및 사용 가능한 속성의 결과 비교합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1871">The following code example compares the results of FIONREAD and the Available property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl/CPP/iocontrolserver.cpp#1)]
 [!code-csharp[NCLSocketIoControl#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl/CS/iocontrolserver.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1872">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1872">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1873"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1873">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-1874"><see cref="P:System.Net.Sockets.Socket.Blocking" /> 속성을 사용하지 않고 블로킹 모드를 변경하려고 한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1874">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking" /> property.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-1875">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1875">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="90a67-1876">비관리 코드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1876">to execute unmanaged code.</span></span> <span data-ttu-id="90a67-1877">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="90a67-1877">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IOControl">
      <MemberSignature Language="C#" Value="public int IOControl (System.Net.Sockets.IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IOControl(valuetype System.Net.Sockets.IOControlCode ioControlCode, unsigned int8[] optionInValue, unsigned int8[] optionOutValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IOControl(System::Net::Sockets::IOControlCode ioControlCode, cli::array &lt;System::Byte&gt; ^ optionInValue, cli::array &lt;System::Byte&gt; ^ optionOutValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ioControlCode" Type="System.Net.Sockets.IOControlCode" />
        <Parameter Name="optionInValue" Type="System.Byte[]" />
        <Parameter Name="optionOutValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="ioControlCode"><span data-ttu-id="90a67-1878">수행할 작업의 컨트롤 코드를 지정하는 <see cref="T:System.Net.Sockets.IOControlCode" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1878">A <see cref="T:System.Net.Sockets.IOControlCode" /> value that specifies the control code of the operation to perform.</span></span></param>
        <param name="optionInValue"><span data-ttu-id="90a67-1879">해당 작업에 필요한 입력 데이터를 포함하는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1879">An array of type <see cref="T:System.Byte" /> that contains the input data required by the operation.</span></span></param>
        <param name="optionOutValue"><span data-ttu-id="90a67-1880">해당 작업에서 반환된 출력 데이터를 포함하는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1880">An array of type <see cref="T:System.Byte" /> that contains the output data returned by the operation.</span></span></param>
        <summary><span data-ttu-id="90a67-1881"><see cref="T:System.Net.Sockets.Socket" /> 열거형으로 컨트롤 코드를 지정하여 <see cref="T:System.Net.Sockets.IOControlCode" />의 하위 수준 운영 모드를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1881">Sets low-level operating modes for the <see cref="T:System.Net.Sockets.Socket" /> using the <see cref="T:System.Net.Sockets.IOControlCode" /> enumeration to specify control codes.</span></span></summary>
        <returns><span data-ttu-id="90a67-1882"><paramref name="optionOutValue" /> 매개 변수의 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1882">The number of bytes in the <paramref name="optionOutValue" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1883">이 메서드는 운영 체제에 대 한 하위 수준 액세스를 제공 <xref:System.Net.Sockets.Socket> 의 현재 인스턴스의 내부는 <xref:System.Net.Sockets.Socket> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1883">This method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class.</span></span> <span data-ttu-id="90a67-1884">자세한 내용을 보려면 MSDN library에서 WSAIoctl 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1884">For more, see the WSAIoctl documentation in the MSDN library.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1885">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1885">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1886">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1886">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1887">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1887">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1888">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1888">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1889">다음 코드 예제에서는 호출의 결과 비교 <xref:System.Net.Sockets.Socket.IOControl%2A> 와 <xref:System.Net.Sockets.IOControlCode.DataToRead> 및 <xref:System.Net.Sockets.Socket.Available%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1889">The following code example compares the results of calling <xref:System.Net.Sockets.Socket.IOControl%2A> with <xref:System.Net.Sockets.IOControlCode.DataToRead> and the <xref:System.Net.Sockets.Socket.Available%2A> property.</span></span>  
  
 [!code-cpp[NCLSocketIoControl1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketIoControl1/CPP/iocontrolcode.cpp#1)]
 [!code-csharp[NCLSocketIoControl1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketIoControl1/CS/iocontrolcode.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1890">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1890">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1891"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1891">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-1892"><see cref="P:System.Net.Sockets.Socket.Blocking" /> 속성을 사용하지 않고 블로킹 모드를 변경하려고 한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-1892">An attempt was made to change the blocking mode without using the <see cref="P:System.Net.Sockets.Socket.Blocking" /> property.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="90a67-1893">비관리 코드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1893">to execute unmanaged code.</span></span> <span data-ttu-id="90a67-1894">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="90a67-1894">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsBound">
      <MemberSignature Language="C#" Value="public bool IsBound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBound" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.IsBound" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBound { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1895"><see cref="T:System.Net.Sockets.Socket" />이 특정 로컬 포트에 바인딩되었는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1895">Gets a value that indicates whether the <see cref="T:System.Net.Sockets.Socket" /> is bound to a specific local port.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1896"><see cref="T:System.Net.Sockets.Socket" />이 로컬 포트에 바인딩되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1896"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> is bound to a local port; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1897">호출 하 여 명시적으로 바인딩되어 있는 경우 소켓 로컬 포트에 바인딩된 것으로 간주 되는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드를 같은 멤버를 호출 하 여 암시적으로 바인딩된 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, 또는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, 임시 로컬 포트 (무료 보다 큰 포트를 사용 하는 1024, 운영 체제에서 선택 합니다.) 서버 사용의 <xref:System.Net.Sockets.Socket.Bind%2A> 에 클라이언트가 연결할 수 있도록 잘 알려진 포트를 바인딩할 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1897">A socket is considered bound to a local port if it is explicitly bound by calling the <xref:System.Net.Sockets.Socket.Bind%2A> method, or implicitly bound by calling members like <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, which use an ephemeral local port (a free port greater than 1024, selected by the operating system.) Servers use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a well-known port so that clients may connect to them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1898">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.IsBound%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1898">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.IsBound%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerState">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.LingerOption LingerState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.LingerOption LingerState" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.LingerState" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerState As LingerOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::LingerOption ^ LingerState { System::Net::Sockets::LingerOption ^ get(); void set(System::Net::Sockets::LingerOption ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.LingerOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1899">보류 중인 데이터를 모두 보내려고 할 때 <see cref="T:System.Net.Sockets.Socket" />에서 소켓 닫기를 지연할지 여부를 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1899">Gets or sets a value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> will delay closing a socket in an attempt to send all pending data.</span></span></summary>
        <value><span data-ttu-id="90a67-1900">소켓을 닫는 동안 링거하는 방법을 지정하는 <see cref="T:System.Net.Sockets.LingerOption" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1900">A <see cref="T:System.Net.Sockets.LingerOption" /> that specifies how to linger while closing a socket.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1901"><xref:System.Net.Sockets.Socket.LingerState%2A> 속성은 방법을 변경 <xref:System.Net.Sockets.Socket.Close%2A> 메서드는 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1901">The <xref:System.Net.Sockets.Socket.LingerState%2A> property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves.</span></span> <span data-ttu-id="90a67-1902">집합에는 연결이 다시 설정할 수 있습니다 Winsock에서 조건을 수정할 때이 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1902">This property when set modifies the conditions under which the connection can be reset by Winsock.</span></span> <span data-ttu-id="90a67-1903">연결 다시 설정은 여전히 IP 프로토콜 동작에 따라 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1903">Connection resets can still occur based on the IP protocol behavior.</span></span>  
  
 <span data-ttu-id="90a67-1904">이 속성에 대 한 호출 후 연결 지향 연결이 열린 채로 시간의 길이 제어 <xref:System.Net.Sockets.Socket.Close%2A> 데이터 보낼 남아 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1904">This property controls the length of time that a connection-oriented connection will remain open after a call to <xref:System.Net.Sockets.Socket.Close%2A> when data remains to be sent.</span></span>  
  
 <span data-ttu-id="90a67-1905">피어에 데이터를 전송 하는 메서드를 호출할 때이 데이터는 나가는 네트워크 버퍼에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1905">When you call methods to send data to a peer, this data is placed in the outgoing network buffer.</span></span> <span data-ttu-id="90a67-1906">하기 전에 원격 호스트에이 데이터는 전송 되도록 하려면이 속성을 사용할 수는 <xref:System.Net.Sockets.TcpClient.Close%2A> 메서드가 연결을 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1906">This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.</span></span>  
  
 <span data-ttu-id="90a67-1907">활성화 하려면 만들기를 <xref:System.Net.Sockets.LingerOption> 설정 하 고 원하는 값이 포함 된 인스턴스는 <xref:System.Net.Sockets.Socket.LingerState%2A> 이 인스턴스에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1907">To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the <xref:System.Net.Sockets.Socket.LingerState%2A> property to this instance.</span></span>  
  
 <span data-ttu-id="90a67-1908">동작을 설명 하는 다음 표에서 <xref:System.Net.Sockets.Socket.Close%2A> 의 가능한 값에 대 한 메서드는 <xref:System.Net.Sockets.LingerOption.Enabled%2A> 속성 및 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 속성에 저장 된는 <xref:System.Net.Sockets.Socket.LingerState%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1908">The following table describes the behavior of the <xref:System.Net.Sockets.Socket.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.Socket.LingerState%2A> property.</span></span>  
  
|<span data-ttu-id="90a67-1909">LingerState.Enabled</span><span class="sxs-lookup"><span data-stu-id="90a67-1909">LingerState.Enabled</span></span>|<span data-ttu-id="90a67-1910">LingerState.LingerTime</span><span class="sxs-lookup"><span data-stu-id="90a67-1910">LingerState.LingerTime</span></span>|<span data-ttu-id="90a67-1911">동작</span><span class="sxs-lookup"><span data-stu-id="90a67-1911">Behavior</span></span>|  
|-------------------------|----------------------------|--------------|  
|<span data-ttu-id="90a67-1912">`false` (사용 안 함), 기본값</span><span class="sxs-lookup"><span data-stu-id="90a67-1912">`false` (disabled), the default value</span></span>|<span data-ttu-id="90a67-1913">제한 시간이 적용 되지 않습니다 (기본값).</span><span class="sxs-lookup"><span data-stu-id="90a67-1913">The time-out is not applicable, (default).</span></span>|<span data-ttu-id="90a67-1914">기본 IP 프로토콜 시간 제한이 만료 될 때까지 보류 중인 데이터를 보내려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1914">Attempts to send pending data until the default IP protocol time-out expires.</span></span>|  
|<span data-ttu-id="90a67-1915">`true` (사용)</span><span class="sxs-lookup"><span data-stu-id="90a67-1915">`true` (enabled)</span></span>|<span data-ttu-id="90a67-1916">0이 아닌 시간 제한</span><span class="sxs-lookup"><span data-stu-id="90a67-1916">A nonzero time-out</span></span>|<span data-ttu-id="90a67-1917">지정된 된 제한 시간이 만료 되 고 시도가 실패 하면 다음 Winsock 다시 설정 연결 될 때까지 보류 중인 데이터를 보내려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1917">Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.</span></span>|  
|<span data-ttu-id="90a67-1918">`true` (사용)</span><span class="sxs-lookup"><span data-stu-id="90a67-1918">`true` (enabled)</span></span>|<span data-ttu-id="90a67-1919">0 시간 제한입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1919">A zero timeout.</span></span>|<span data-ttu-id="90a67-1920">보류 중인 데이터를 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1920">Discards any pending data.</span></span> <span data-ttu-id="90a67-1921">Winsock 소켓 연결 지향 (예: TCP)에 대 한 연결을 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1921">For connection-oriented socket (TCP, for example), Winsock resets the connection.</span></span>|  
  
 <span data-ttu-id="90a67-1922">IP 스택에서 연결의 왕복 시간을 기반으로 사용 하려면 기본 IP 프로토콜 제한 시간을 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1922">The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection.</span></span> <span data-ttu-id="90a67-1923">대부분의 경우에는 스택에서 계산 된 시간 제한은 응용 프로그램에 의해 정의 된 보다 상대적입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1923">In most cases, the time-out computed by the stack is more relevant than one defined by an application.</span></span> <span data-ttu-id="90a67-1924">이 소켓에 대 한 기본 동작 때는 <xref:System.Net.Sockets.Socket.LingerState%2A> 속성이 설정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1924">This is the default behavior for a socket when the <xref:System.Net.Sockets.Socket.LingerState%2A> property is not set.</span></span>  
  
 <span data-ttu-id="90a67-1925">경우는 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> 속성에 저장 된 <xref:System.Net.Sockets.Socket.LingerState%2A> 속성이 기본 IP 프로토콜 제한 시간 보다 큰 설정 되어 있으면 기본 IP 프로토콜 시간 제한이 적용 되 고 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1925">When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the <xref:System.Net.Sockets.Socket.LingerState%2A> property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1926">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.LingerState%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1926">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.LingerState%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1927">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1927">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1928"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1928">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Listen">
      <MemberSignature Language="C#" Value="public void Listen (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Listen(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Listen (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Listen(int backlog);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog"><span data-ttu-id="90a67-1929">보류 중인 연결 큐의 최대 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1929">The maximum length of the pending connections queue.</span></span></param>
        <summary><span data-ttu-id="90a67-1930"><see cref="T:System.Net.Sockets.Socket" />을 수신 상태로 둡니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1930">Places a <see cref="T:System.Net.Sockets.Socket" /> in a listening state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1931"><xref:System.Net.Sockets.Socket.Listen%2A> 연결 지향 하면 <xref:System.Net.Sockets.Socket> 들어오는 연결 시도 대 한 수신 대기 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1931"><xref:System.Net.Sockets.Socket.Listen%2A> causes a connection-oriented <xref:System.Net.Sockets.Socket> to listen for incoming connection attempts.</span></span> <span data-ttu-id="90a67-1932">`backlog` 받아들이기 위해 대기할 수 있는 들어오는 연결의 수를 지정 하는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1932">The `backlog` parameter specifies the number of incoming connections that can be queued for acceptance.</span></span> <span data-ttu-id="90a67-1933">지정할 수는 연결의 최대 수를 확인 하려면 검색 된 <xref:System.Net.Sockets.SocketOptionName.MaxConnections> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1933">To determine the maximum number of connections you can specify, retrieve the <xref:System.Net.Sockets.SocketOptionName.MaxConnections> value.</span></span> <span data-ttu-id="90a67-1934"><xref:System.Net.Sockets.Socket.Listen%2A> 차단 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1934"><xref:System.Net.Sockets.Socket.Listen%2A> does not block.</span></span>  
  
 <span data-ttu-id="90a67-1935">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1935">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1936">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1936">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span> <span data-ttu-id="90a67-1937">사용 하 여 <xref:System.Net.Sockets.Socket.Accept%2A> 또는 <xref:System.Net.Sockets.Socket.BeginAccept%2A> 큐에서 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1937">Use <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> to accept a connection from the queue.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1938">호출 해야 합니다는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드 호출 하기 전에 <xref:System.Net.Sockets.Socket.Listen%2A>, 또는 <xref:System.Net.Sockets.Socket.Listen%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1938">You must call the <xref:System.Net.Sockets.Socket.Bind%2A> method before calling <xref:System.Net.Sockets.Socket.Listen%2A>, or <xref:System.Net.Sockets.Socket.Listen%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1939">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1939">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1940">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1940">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1941">백로그 매개 변수는 운영 체제에 따라 다른 값으로 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1941">The backlog parameter is limited to different values depending on the Operating System.</span></span> <span data-ttu-id="90a67-1942">더 높은 값을 지정할 수 있지만 백로그 됩니다 제한 된 운영 체제에 따라.</span><span class="sxs-lookup"><span data-stu-id="90a67-1942">You may specify a higher value, but the backlog will be limited based on the Operating System.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1943">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket> 들어오는 연결을 수신 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1943">The following code example uses <xref:System.Net.Sockets.Socket> to listen for incoming connections.</span></span>  
  
 [!code-cpp[Classic Socket.Listen Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Listen Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Listen Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Listen Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Listen Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Listen Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1944">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1944">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1945"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1945">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="LocalEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.LocalEndPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndPoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndPoint { System::Net::EndPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1946">로컬 끝점을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1946">Gets the local endpoint.</span></span></summary>
        <value><span data-ttu-id="90a67-1947"><see cref="T:System.Net.EndPoint" />이 통신하는 데 사용하는 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1947">The <see cref="T:System.Net.EndPoint" /> that the <see cref="T:System.Net.Sockets.Socket" /> is using for communications.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1948"><xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 속성 get는 <xref:System.Net.EndPoint> 로컬 IP 주소와 포트 번호를 포함 하 여 <xref:System.Net.Sockets.Socket> 바인딩된 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1948">The <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property gets an <xref:System.Net.EndPoint> that contains the local IP address and port number to which your <xref:System.Net.Sockets.Socket> is bound.</span></span> <span data-ttu-id="90a67-1949">이 캐스팅 해야 <xref:System.Net.EndPoint> 에 <xref:System.Net.IPEndPoint> 정보를 검색 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1949">You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information.</span></span> <span data-ttu-id="90a67-1950">호출할 수 있습니다는 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> 를 로컬 검색할 메서드 <xref:System.Net.IPAddress>, 및 <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> 로컬 포트 번호를 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1950">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to retrieve the local <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to retrieve the local port number.</span></span>  
  
 <span data-ttu-id="90a67-1951"><xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 일반적으로 속성에 대 한 호출을 수행한 후는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1951">The <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property is usually set after you make a call to the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="90a67-1952">소켓의 로컬 IP 주소와 포트 번호를 할당 하는 시스템을 허용 하는 경우는 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 속성이 첫 번째 I/O 작업 후 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1952">If you allow the system to assign your socket's local IP address and port number, the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property will be set after the first I/O operation.</span></span> <span data-ttu-id="90a67-1953">연결 지향 프로토콜에 대 한 첫 번째 I/O 작업에 대 한 호출 수는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-1953">For connection-oriented protocols, the first I/O operation would be a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-1954">연결 없는 프로토콜에 대 한 첫 번째는 I/O 작업이 송신 중 하나가 될 거 나 호출을 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1954">For connectionless protocols, the first I/O operation would be any of the send or receive calls.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1955">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1955">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-1956">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1956">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-1957">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1957">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-1958">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1958">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1959">다음 코드 예제에서는 검색 하 고 로컬과 원격 끝점을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1959">The following code example retrieves and displays the local and remote endpoints.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#4)]
 [!code-csharp[Socket_Socket_Options#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#4)]
 [!code-vb[Socket_Socket_Options#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1960">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1960">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1961"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1961">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1962">나가는 멀티캐스트 패킷을 보내는 응용 프로그램에 전달할지 여부를 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1962">Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1963"><see cref="T:System.Net.Sockets.Socket" />이 나가는 멀티캐스트 패킷을 받으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1963"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> receives outgoing multicast packets; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1964">멀티 캐스트는 인터넷에서 다 대 다 통신에 대 한 확장 가능한 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1964">Multicast is a scalable method for many-to-many communication on the Internet.</span></span> <span data-ttu-id="90a67-1965">멀티 캐스트 주소로 등록 프로세스 그런 다음 멀티 캐스트 주소를 구독 하는 다른 모든 프로세스에서 구독 된 프로세스에 의해 전송 된 모든 패킷은 수신 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1965">A process subscribes to a multicast address; then, any packets sent by a subscribed process are received by every other process subscribed to the multicast address.</span></span>  
  
 <span data-ttu-id="90a67-1966">전송이 TCP (Control Protocol) 소켓에서이 속성을 설정할 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1966">Setting this property on a Transmission Control Protocol (TCP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1967">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.MulticastLoopback%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1967">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.MulticastLoopback%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#2](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#2)]
 [!code-csharp[SocketPropertyTester#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1968">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1968">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1969"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1969">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="NoDelay">
      <MemberSignature Language="C#" Value="public bool NoDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoDelay" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.NoDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property NoDelay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NoDelay { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1970"><see cref="T:System.Boolean" /> 스트림에서 Nagle 알고리즘을 사용하는지 여부를 나타내는 <see cref="T:System.Net.Sockets.Socket" /> 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1970">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the stream <see cref="T:System.Net.Sockets.Socket" /> is using the Nagle algorithm.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1971"><see cref="T:System.Net.Sockets.Socket" />에서 Nagle 알고리즘을 사용하면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1971"><see langword="false" /> if the <see cref="T:System.Net.Sockets.Socket" /> uses the Nagle algorithm; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="90a67-1972">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1972">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1973">Nagle 알고리즘은 소켓 버퍼링 작은 패킷 다음 결합 하 고 상황에 따라 하나의 패킷으로 보내을 지정 하 여 네트워크 트래픽을 줄이기 위해 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1973">The Nagle algorithm is designed to reduce network traffic by causing the socket to buffer small packets and then combine and send them in one packet under certain circumstances.</span></span> <span data-ttu-id="90a67-1974">TCP 패킷 헤더와 전송 중인 데이터 40 바이트 이루어져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1974">A TCP packet consists of 40 bytes of header plus the data being sent.</span></span> <span data-ttu-id="90a67-1975">작은 데이터 패킷을 TCP로 보내면 TCP 헤더에서 발생 하는 데 오버 헤드는 네트워크 트래픽의 주요 부분이 될 수 있습니다. 과도 하 게 로드 네트워크 혼잡으로 인해 발생 하는 과도 하 게 전파 시간 뿐만 아니라 데이터 그램 손실된 재전송을이 오버 헤드로 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1975">When small packets of data are sent with TCP, the overhead resulting from the TCP header can become a significant part of the network traffic.On heavily loaded networks, the congestion resulting from this overhead can result in lost datagrams and retransmissions, as well as excessive propagation time caused by congestion.</span></span> <span data-ttu-id="90a67-1976">Nagle 알고리즘을 전송할 새 TCP segmentswhen 새 승인 되지 않은 연결에서 이전 데이터가 남아 있으면 사용자 로부터 도착 한 데이터를 보내는 것을 금지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1976">The Nagle algorithm inhibits the sending of new TCP segmentswhen new outgoing data arrives from the user if any previouslytransmitted data on the connection remains unacknowledged.</span></span>  
  
 <span data-ttu-id="90a67-1977">네트워크 응용 프로그램의 대부분 Nagle 알고리즘을 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1977">The majority of network applications should use the Nagle algorithm.</span></span>  
  
 <span data-ttu-id="90a67-1978">데이터 그램 프로토콜 UDP (User) 소켓에서이 속성을 설정할 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1978">Setting this property on a User Datagram Protocol (UDP) socket will have no effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-1979">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.NoDelay%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1979">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.NoDelay%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-1980"><see cref="T:System.Net.Sockets.Socket" />에 액세스하려고 시도하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-1980">An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-1981"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1981">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OSSupportsIPv4">
      <MemberSignature Language="C#" Value="public static bool OSSupportsIPv4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OSSupportsIPv4" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.OSSupportsIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OSSupportsIPv4 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool OSSupportsIPv4 { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1982">내부 운영 체제 및 네트워크 어댑터에서 IPv4(인터넷 프로토콜 버전 4)를 지원하는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1982">Indicates whether the underlying operating system and network adaptors support Internet Protocol version 4 (IPv4).</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1983">운영 체제 및 네트워크 어댑터에서 IPv4 프로토콜을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1983"><see langword="true" /> if the operating system and network adaptors support the IPv4 protocol; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1984">운영 체제에는 IPv4 및 IPv6 프로토콜을 모두 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1984">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
      </Docs>
    </Member>
    <Member MemberName="OSSupportsIPv6">
      <MemberSignature Language="C#" Value="public static bool OSSupportsIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool OSSupportsIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OSSupportsIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool OSSupportsIPv6 { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-1985">내부 운영 체제 및 네트워크 어댑터에서 IPv6(인터넷 프로토콜 버전 6)을 지원하는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1985">Indicates whether the underlying operating system and network adaptors support Internet Protocol version 6 (IPv6).</span></span></summary>
        <value>
          <span data-ttu-id="90a67-1986">운영 체제 및 네트워크 어댑터에서 IPv6 프로토콜을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1986"><see langword="true" /> if the operating system and network adaptors support the IPv6 protocol; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-1987">운영 체제에는 IPv4 및 IPv6 프로토콜을 모두 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1987">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv4" />
      </Docs>
    </Member>
    <Member MemberName="Poll">
      <MemberSignature Language="C#" Value="public bool Poll (int microSeconds, System.Net.Sockets.SelectMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Poll(int32 microSeconds, valuetype System.Net.Sockets.SelectMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poll (microSeconds As Integer, mode As SelectMode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Poll(int microSeconds, System::Net::Sockets::SelectMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="microSeconds" Type="System.Int32" />
        <Parameter Name="mode" Type="System.Net.Sockets.SelectMode" />
      </Parameters>
      <Docs>
        <param name="microSeconds"><span data-ttu-id="90a67-1988">응답을 기다릴 시간(마이크로초)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1988">The time to wait for a response, in microseconds.</span></span></param>
        <param name="mode"><span data-ttu-id="90a67-1989"><see cref="T:System.Net.Sockets.SelectMode" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1989">One of the <see cref="T:System.Net.Sockets.SelectMode" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-1990"><see cref="T:System.Net.Sockets.Socket" />의 상태를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1990">Determines the status of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-1991"><paramref name="mode" /> 매개 변수에 전달된 폴링 모드 값에 따른 <see cref="T:System.Net.Sockets.Socket" />의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1991">The status of the <see cref="T:System.Net.Sockets.Socket" /> based on the polling mode value passed in the <paramref name="mode" /> parameter.</span></span>  
  
 <span data-ttu-id="90a67-1992"><list type="table"><listheader><term> 모드</span><span class="sxs-lookup"><span data-stu-id="90a67-1992"><list type="table"><listheader><term> Mode</span></span>  
  
 <span data-ttu-id="90a67-1993"></term><description> 반환 값</span><span class="sxs-lookup"><span data-stu-id="90a67-1993"></term><description> Return Value</span></span>  
  
 <span data-ttu-id="90a67-1994"><see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />이 호출되었고 연결이 보류 중이면 </description></listheader><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectRead" /></term><description><see langword="true" />을(를) 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1994"></description></listheader><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectRead" /></term><description><see langword="true" /> if <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> has been called and a connection is pending;</span></span>  
  
 <span data-ttu-id="90a67-1995">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-1995">-or-</span></span>  
  
 <span data-ttu-id="90a67-1996">데이터를 읽을 수 있으면 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1996"><see langword="true" /> if data is available for reading;</span></span>  
  
 <span data-ttu-id="90a67-1997">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-1997">-or-</span></span>  
  
 <span data-ttu-id="90a67-1998">연결을 닫았거나, 다시 설정하였거나, 종료하였으면 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1998"><see langword="true" /> if the connection has been closed, reset, or terminated;</span></span>  
  
 <span data-ttu-id="90a67-1999">그렇지 않으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-1999">otherwise, returns <see langword="false" />.</span></span>  
  
 <span data-ttu-id="90a67-2000"><see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />가 처리 중이고 연결에 성공했으면 </description></item><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectWrite" /></term><description><see langword="true" />을(를) 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2000"></description></item><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectWrite" /></term><description><see langword="true" />, if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />, and the connection has succeeded;</span></span>  
  
 <span data-ttu-id="90a67-2001">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2001">-or-</span></span>  
  
 <span data-ttu-id="90a67-2002">데이터를 보낼 수 있으면 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2002"><see langword="true" /> if data can be sent;</span></span>  
  
 <span data-ttu-id="90a67-2003">그렇지 않으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2003">otherwise, returns <see langword="false" />.</span></span>  
  
 <span data-ttu-id="90a67-2004">차단되지 않는 <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />가 처리 중이고 연결에 실패했으면 </description></item><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectError" /></term><description><see langword="true" />을(를) 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2004"></description></item><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectError" /></term><description><see langword="true" /> if processing a <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> that does not block, and the connection has failed;</span></span>  
  
 <span data-ttu-id="90a67-2005">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2005">-or-</span></span>  
  
 <span data-ttu-id="90a67-2006"><see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" />이 설정되어 있지 않고 out-of-band 데이터를 사용할 수 있으면 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2006"><see langword="true" /> if <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> is not set and out-of-band data is available;</span></span>  
  
 <span data-ttu-id="90a67-2007">그렇지 않으면 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2007">otherwise, returns <see langword="false" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2008"><xref:System.Net.Sockets.Socket.Poll%2A> 메서드의 상태를 확인 합니다는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2008">The <xref:System.Net.Sockets.Socket.Poll%2A> method will check the state of the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-2009">지정 <xref:System.Net.Sockets.SelectMode.SelectRead?displayProperty=nameWithType> 에 대 한는 `selectMode` 여부를 확인 하려면 매개 변수는 <xref:System.Net.Sockets.Socket> 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2009">Specify <xref:System.Net.Sockets.SelectMode.SelectRead?displayProperty=nameWithType> for the `selectMode` parameter to determine if the <xref:System.Net.Sockets.Socket> is readable.</span></span> <span data-ttu-id="90a67-2010">지정 <xref:System.Net.Sockets.SelectMode.SelectWrite?displayProperty=nameWithType> 여부를 확인 하 고 <xref:System.Net.Sockets.Socket> 쓸 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2010">Specify <xref:System.Net.Sockets.SelectMode.SelectWrite?displayProperty=nameWithType> to determine if the <xref:System.Net.Sockets.Socket> is writable.</span></span> <span data-ttu-id="90a67-2011">사용 하 여 <xref:System.Net.Sockets.SelectMode.SelectError?displayProperty=nameWithType> 오류 상태를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2011">Use <xref:System.Net.Sockets.SelectMode.SelectError?displayProperty=nameWithType> to detect an error condition.</span></span> <span data-ttu-id="90a67-2012"><xref:System.Net.Sockets.Socket.Poll%2A> 단위로 지정 된 시간 기간이 경과할 때까지 실행이 차단 됩니다 `microseconds`, 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2012"><xref:System.Net.Sockets.Socket.Poll%2A> will block execution until the specified time period, measured in `microseconds`, elapses.</span></span> <span data-ttu-id="90a67-2013">설정의 `microSeconds` 매개 변수를 음의 정수 응답을 받기 위해 무기한 대기 하려는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2013">Set the `microSeconds` parameter to a negative integer if you would like to wait indefinitely for a response.</span></span> <span data-ttu-id="90a67-2014">여러 소켓의 상태를 확인 하려는 경우 사용할 수도 있습니다는 <xref:System.Net.Sockets.Socket.Select%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2014">If you want to check the status of multiple sockets, you might prefer to use the <xref:System.Net.Sockets.Socket.Select%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2015">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2015">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2016">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2016">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2017">이 메서드는 특정 유형의 네트워크 케이블이 같은 연결 문제를 검색할 수 없는 또는 원격 호스트 비정상적으로 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2017">This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully.</span></span> <span data-ttu-id="90a67-2018">이러한 종류의 오류를 검색 하는 데이터 전송 및 수신 하려고 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2018">You must attempt to send or receive data to detect these kinds of errors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2019">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2019">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2020">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2020">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2021">다음 코드 예제에서는 소켓는 서버에 연결을 만들고 사용 하 여 <xref:System.Net.Sockets.Socket.Poll%2A> 소켓의 상태를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2021">The following code example creates a socket, connects to a server, and uses <xref:System.Net.Sockets.Socket.Poll%2A> to check the status of the socket.</span></span>  
  
 [!code-cpp[SelectModeExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SelectModeExample/CPP/source.cpp#1)]
 [!code-csharp[SelectModeExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SelectModeExample/CS/source.cs#1)]
 [!code-vb[SelectModeExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SelectModeExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-2022"><paramref name="mode" /> 매개 변수가 <see cref="T:System.Net.Sockets.SelectMode" /> 값이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2022">The <paramref name="mode" /> parameter is not one of the <see cref="T:System.Net.Sockets.SelectMode" /> values.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2023">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2023">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-2024">아래 설명 부분을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="90a67-2024">See remarks below.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2025"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2025">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SelectMode" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <Member MemberName="ProtocolType">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.ProtocolType ProtocolType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.ProtocolType ProtocolType" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ProtocolType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProtocolType As ProtocolType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::ProtocolType ProtocolType { System::Net::Sockets::ProtocolType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.ProtocolType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-2026"><see cref="T:System.Net.Sockets.Socket" />의 프로토콜 종류를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2026">Gets the protocol type of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="90a67-2027"><see cref="T:System.Net.Sockets.ProtocolType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2027">One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2028"><xref:System.Net.Sockets.Socket.ProtocolType%2A> 속성을 설정 하는 경우는 <xref:System.Net.Sockets.Socket> 작성 되 고 지정 하 여 사용 되는 프로토콜 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2028">The <xref:System.Net.Sockets.Socket.ProtocolType%2A> property is set when the <xref:System.Net.Sockets.Socket> is created, and specifies the protocol used by that <xref:System.Net.Sockets.Socket>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2029">다음 코드 예제는 <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, 및 <xref:System.Net.Sockets.ProtocolType> 콘솔에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2029">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-2030">바인딩된 <see cref="T:System.Net.Sockets.Socket" />에서 데이터를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2030">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffer As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2031">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2031">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <summary><span data-ttu-id="90a67-2032">수신 버퍼에 바인딩된 <see cref="T:System.Net.Sockets.Socket" />의 데이터를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2032">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer.</span></span></summary>
        <returns><span data-ttu-id="90a67-2033">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2033">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2034"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드 buffer 매개 변수로 데이터를 읽고 성공적으로 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2034">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="90a67-2035">호출할 수 있습니다 <xref:System.Net.Sockets.Socket.Receive%2A> 소켓 모두에서 연결 지향 연결 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2035">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="90a67-2036">이 오버 로드 하기만 수신 버퍼를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2036">This overload only requires you to provide a receive buffer.</span></span> <span data-ttu-id="90a67-2037">버퍼 오프셋을 0으로 버퍼 매개 변수의 길이를 크기 기본값 및 <xref:System.Net.Sockets.SocketFlags> 값의 기본값은 <xref:System.Net.Sockets.SocketFlags.None>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2037">The buffer offset defaults to 0, the size defaults to the length of the buffer parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="90a67-2038">연결 지향 프로토콜을 사용 하는 호출 하거나 실행 해야 <xref:System.Net.Sockets.Socket.Connect%2A> 원격 호스트 연결을 설정 하려면 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 호출 하기 전에 들어오는 연결을 받아들일 <xref:System.Net.Sockets.Socket.Receive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2038">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="90a67-2039"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드에서는에 설정 된 원격 호스트에서 들어오는 데이터를 읽을 수는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2039">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2040">연결 없는 프로토콜을 사용 하는 경우 사용할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2040">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2041"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 하면 모든 호스트에서 데이터를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2041"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="90a67-2042">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 를 사용 하 여 시간 제한 값을 설정 하지 않으면 데이터는 사용할 수 있을 때까지 <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2042">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2043">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Receive%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2043">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2044">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2044">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2045">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2045">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2046">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2046">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2047">연결 지향 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 메서드는 크기는 버퍼의 최대는 사용할 수 있는 많은 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2047">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="90a67-2048">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2048">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-2049">연결 없는 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 첫 큐에 대기 중인된 데이터 그램에 지정 하는 대상 주소에서 읽을 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2049">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="90a67-2050">나타나면 데이터 그램의 크기 보다 큰 경우는 `buffer` 매개 변수를 `buffer` 입력 메시지의 첫 번째 부분과 초과 데이터는 손실 및 <xref:System.Net.Sockets.SocketException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2050">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2051">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2051">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2052">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2052">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2053">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2053">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2054">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2054">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2055">다음 코드 예제에는 연결 된 데이터를 받는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2055">The following code example receives data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Sync_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Sync_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2056"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2056"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2057">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2057">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2058"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2058">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-2059">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2059">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2060">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2060">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2061">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2061">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffers As IList(Of ArraySegment(Of Byte))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-2062">받은 데이터를 포함하는 <see cref="T:System.ArraySegment`1" /> 형식의 <see cref="T:System.Byte" /> 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2062">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span></span></param>
        <summary><span data-ttu-id="90a67-2063">바인딩된 <see cref="T:System.Net.Sockets.Socket" />의 데이터를 받아 수신 버퍼 목록에 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2063">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers.</span></span></summary>
        <returns><span data-ttu-id="90a67-2064">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2064">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2065">이 메서드를 buffers 매개 변수로 데이터를 읽고 성공적으로 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2065">This method reads data into the buffers parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="90a67-2066">연결 지향 연결 없는 소켓 모두에서 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2066">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="90a67-2067">이상의 버퍼를 수신 하거나이 오버 로드 매개 변수를 입력 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2067">This overload requires you to provide one or more receive buffers.</span></span>  
  
 <span data-ttu-id="90a67-2068">연결 지향 프로토콜을 사용 하는 호출 하거나 실행 해야 <xref:System.Net.Sockets.Socket.Connect%2A> 원격 호스트 연결을 설정 하려면 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 호출 하기 전에 들어오는 연결을 받아들일 <xref:System.Net.Sockets.Socket.Receive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2068">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="90a67-2069"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드에서는에 설정 된 원격 호스트 연결에서 도착 하는 데이터를 읽을 수는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2069">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2070">연결 없는 프로토콜을 사용 하는 경우 사용할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2070">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2071"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 하면 모든 호스트에서 데이터를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2071"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="90a67-2072">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 를 사용 하 여 시간 제한 값을 설정 하지 않으면 데이터는 사용할 수 있을 때까지 <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2072">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2073">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Receive%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2073">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2074">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2074">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2075">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2075">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2076">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2076">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2077">연결 지향 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 메서드는 크기는 버퍼의 최대는 사용할 수 있는 많은 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2077">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="90a67-2078">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2078">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-2079">연결 없는 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 첫 큐에 대기 된 데이터 그램에 지정 하는 대상 주소에서 읽을 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2079">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="90a67-2080">나타나면 데이터 그램의 크기 보다 큰 경우는 `buffers` 매개 변수를 `buffers` 입력 메시지의 첫 번째 부분과 초과 데이터는 손실 및 <xref:System.Net.Sockets.SocketException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2080">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2081">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2081">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2082">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2082">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
 <span data-ttu-id="90a67-2083">**참고** 응용 프로그램에 네트워크 추적을 사용 하도록 설정 하면이 멤버에서 추적 정보를 출력 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2083">**Note** This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2084">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2084">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90a67-2085"><paramref name="buffer" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2085">The <paramref name="buffer" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2086">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2086">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2087"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2087">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2088">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2088">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2089"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2089">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-2090">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 수신 버퍼에 바인딩된 <see cref="T:System.Net.Sockets.SocketFlags" />의 데이터를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2090">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2091">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2091">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2092"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드 buffer 매개 변수로 데이터를 읽고 성공적으로 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2092">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="90a67-2093">호출할 수 있습니다 <xref:System.Net.Sockets.Socket.Receive%2A> 소켓 모두에서 연결 지향 연결 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2093">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="90a67-2094">이 오버 로드만 제공 해야 수신 버퍼 및 필요한 <xref:System.Net.Sockets.SocketFlags>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2094">This overload only requires you to provide a receive buffer and the necessary <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="90a67-2095">버퍼 오프셋을 0으로 및 크기의 기본값 바이트 매개 변수의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2095">The buffer offset defaults to 0, and the size defaults to the length of the byte parameter.</span></span>  
  
 <span data-ttu-id="90a67-2096">연결 지향 프로토콜을 사용 하는 호출 하거나 실행 해야 <xref:System.Net.Sockets.Socket.Connect%2A> 원격 호스트 연결을 설정 하려면 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 호출 하기 전에 들어오는 연결을 받아들일 <xref:System.Net.Sockets.Socket.Receive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2096">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="90a67-2097"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드에서는에 설정 된 원격 호스트에서 들어오는 데이터를 읽을 수는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2097">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2098">연결 없는 프로토콜을 사용 하는 경우 사용할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2098">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2099"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 하면 모든 호스트에서 데이터를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2099"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="90a67-2100">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 데이터를 사용할 수 있을 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2100">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available.</span></span> <span data-ttu-id="90a67-2101">비차단 모드에 있으며 프로토콜 스택 버퍼에서 사용할 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드를 즉시 완료 되 고 throw 된 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2101">If you are in non-blocking mode, and there is no data available in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2102">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2102">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2103">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌을 다시 시도 하면 수신 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2103">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2104">연결 지향 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 메서드 크기는 버퍼의 최대는 사용할 수의 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2104">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available up to the size of the buffer.</span></span> <span data-ttu-id="90a67-2105">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2105">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-2106">연결 없는 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 첫 큐에 대기 된 데이터 그램에 지정 하는 대상 주소에서 읽을 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2106">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="90a67-2107">나타나면 데이터 그램의 크기 보다 큰 경우는 `buffer` 매개 변수를 `buffer` 입력 메시지의 첫 번째 부분과 초과 데이터는 손실 및 <xref:System.Net.Sockets.SocketException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2107">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2108">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2108">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2109">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2109">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2110">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2110">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2111">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2111">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2112">다음 코드 예제에서는 데이터 버퍼를 지정 하 고 <xref:System.Net.Sockets.SocketFlags> 에 연결 된 데이터를 받기 위해 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2112">The following code example specifies a data buffer, and <xref:System.Net.Sockets.SocketFlags> for receiving data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Sync_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Sync_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2113"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2113"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2114">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2114">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2115"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2115">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-2116">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2116">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2117">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2117">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2118">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2118">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-2119">받은 데이터를 포함하는 <see cref="T:System.ArraySegment`1" /> 형식의 <see cref="T:System.Byte" /> 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2119">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2120"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2120">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-2121">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 바인딩된 <see cref="T:System.Net.Sockets.SocketFlags" />의 데이터를 받아 수신 버퍼 목록에 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2121">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2122">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2122">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2123">이 메서드는 데이터를 읽습니다는 `buffers` 매개 변수 및 성공적으로 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2123">This method reads data into the `buffers` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="90a67-2124">연결 지향 연결 없는 소켓 모두에서 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2124">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="90a67-2125">이상의 버퍼를 수신 하거나이 오버 로드 매개 변수를 입력 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2125">This overload requires you to provide one or more receive buffers.</span></span> <span data-ttu-id="90a67-2126"><xref:System.Net.Sockets.SocketFlags> 값의 기본값은 <xref:System.Net.Sockets.SocketFlags.None>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2126">The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="90a67-2127">연결 지향 프로토콜을 사용 하는 호출 하거나 실행 해야 <xref:System.Net.Sockets.Socket.Connect%2A> 원격 호스트 연결을 설정 하려면 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 호출 하기 전에 들어오는 연결을 받아들일 <xref:System.Net.Sockets.Socket.Receive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2127">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="90a67-2128"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드에서는에 설정 된 원격 호스트 연결에서 도착 하는 데이터를 읽을 수는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2128">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2129">연결 없는 프로토콜을 사용 하는 경우 사용할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2129">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2130"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 하면 모든 호스트에서 데이터를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2130"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="90a67-2131">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 를 사용 하 여 시간 제한 값을 설정 하지 않으면 데이터는 사용할 수 있을 때까지 <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2131">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2132">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Receive%2A> throw 호출는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2132">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2133">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2133">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2134">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2134">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2135">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2135">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2136">연결 지향 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 메서드는 크기는 버퍼의 최대는 사용할 수 있는 많은 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2136">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="90a67-2137">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2137">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-2138">연결 없는 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 첫 큐에 대기 된 데이터 그램에 지정 하는 대상 주소에서 읽을 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2138">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="90a67-2139">나타나면 데이터 그램의 크기 보다 큰 경우는 `buffers` 매개 변수를 `buffers` 입력 메시지의 첫 번째 부분과 초과 데이터는 손실 및 <xref:System.Net.Sockets.SocketException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2139">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2140">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2140">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2141">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2141">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2142">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2142">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2143">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2143">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2144">다음 코드 예제에는 연결 된 데이터를 수신 하는 방법을 보여 줍니다 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2144">The following code example demonstrates how to receive data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.Socketgenerics#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.Socketgenerics/CPP/sendgeneric.cpp#2)]
 [!code-csharp[System.Net.Sockets.Socketgenerics#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.Socketgenerics/CS/sendgeneric.cs#2)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2145"><paramref name="buffers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2145"><paramref name="buffers" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-2146">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2146">-or-</span></span>  
  
 <span data-ttu-id="90a67-2147"><paramref name="buffers" /> 수가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2147"><paramref name="buffers" />.Count is zero.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2148">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2148">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2149"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2149">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2150">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2150">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2151">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2151">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2152">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2152">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-2153">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2153">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2154"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2154">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-2155">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 수신 버퍼에 바인딩된 <see cref="T:System.Net.Sockets.SocketFlags" />에서 원하는 바이트 수의 데이터를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2155">Receives the specified number of bytes of data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2156">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2156">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2157"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드 데이터를 읽고는 `buffer` 매개 변수 및 성공적으로 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2157">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the `buffer` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="90a67-2158">호출할 수 있습니다 <xref:System.Net.Sockets.Socket.Receive%2A> 소켓 모두에서 연결 지향 연결 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2158">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="90a67-2159">이 오버 로드만 제공 해야 수신 버퍼, 바이트를 수신 하려는 및 필요한 수가 <xref:System.Net.Sockets.SocketFlags>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2159">This overload only requires you to provide a receive buffer, the number of bytes you want to receive, and the necessary <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 <span data-ttu-id="90a67-2160">연결 지향 프로토콜을 사용 하는 호출 하거나 실행 해야 <xref:System.Net.Sockets.Socket.Connect%2A> 원격 호스트 연결을 설정 하려면 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 호출 하기 전에 들어오는 연결을 받아들일 <xref:System.Net.Sockets.Socket.Receive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2160">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="90a67-2161"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드에서는에 설정 된 원격 호스트에서 들어오는 데이터를 읽을 수는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2161">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2162">연결 없는 프로토콜을 사용 하는 경우 사용할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2162">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2163"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 하면 모든 호스트에서 데이터를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2163"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="90a67-2164">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 를 사용 하 여 시간 제한 값을 설정 하지 않으면 데이터는 사용할 수 있을 때까지 <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2164">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2165">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Receive%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2165">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2166">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2166">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, The <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2167">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2167">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2168">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌을 다시 시도 하면 수신 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2168">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2169">연결 지향 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 메서드를 사용할 수에 지정 된 바이트 수까지 데이터 읽습니다는 `size` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2169">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="90a67-2170">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2170">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-2171">연결 없는 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 첫 큐에 대기 중인된 데이터 그램에 지정 하는 대상 주소에서 읽을 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2171">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="90a67-2172">나타나면 데이터 그램의 크기 보다 큰 경우는 `buffer` 매개 변수를 `buffer` 입력 메시지의 첫 번째 부분과 초과 데이터는 손실 및 <xref:System.Net.Sockets.SocketException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2172">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2173">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2173">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2174">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2174">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2175">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2175">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2176">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2176">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2177">다음 데이터를 수신 `buffer`를 지정 하 고 <xref:System.Net.Sockets.SocketFlags.None> 에 대 한 <xref:System.Net.Sockets.SocketFlags>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2177">The following receives the data found into `buffer`, and specifies <xref:System.Net.Sockets.SocketFlags.None> for <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 [!code-cpp[Socket_Send_Recieve#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Send_Recieve/CPP/source.cpp#4)]
 [!code-csharp[Socket_Send_Recieve#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Send_Recieve/CS/source.cs#4)]
 [!code-vb[Socket_Send_Recieve#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Send_Recieve/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2178"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2178"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-2179"><paramref name="size" />가 <paramref name="buffer" />의 크기를 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2179"><paramref name="size" /> exceeds the size of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2180">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2180">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2181"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2181">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-2182">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2182">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2183">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2183">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2184">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2184">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-2185">받은 데이터를 포함하는 <see cref="T:System.ArraySegment`1" /> 형식의 <see cref="T:System.Byte" /> 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2185">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2186"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2186">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="90a67-2187">소켓 오류를 저장하는 <see cref="T:System.Net.Sockets.SocketError" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2187">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="90a67-2188">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 바인딩된 <see cref="T:System.Net.Sockets.SocketFlags" />의 데이터를 받아 수신 버퍼 목록에 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2188">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into the list of receive buffers, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2189">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2189">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2190">이 메서드는 데이터를 읽습니다는 `buffers` 매개 변수 및 성공적으로 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2190">This method reads data into the `buffers` parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="90a67-2191">연결 지향 연결 없는 소켓 모두에서 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2191">You can call from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="90a67-2192">이상의 버퍼를 수신 하거나이 오버 로드 매개 변수를 입력 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2192">This overload requires you to provide one or more receive buffers.</span></span> <span data-ttu-id="90a67-2193"><xref:System.Net.Sockets.SocketFlags> 값의 기본값은 <xref:System.Net.Sockets.SocketFlags.None>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2193">The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
 <span data-ttu-id="90a67-2194">연결 지향 프로토콜을 사용 하는 호출 하거나 실행 해야 <xref:System.Net.Sockets.Socket.Connect%2A> 원격 호스트 연결을 설정 하려면 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 호출 하기 전에 들어오는 연결을 받아들일 <xref:System.Net.Sockets.Socket.Receive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2194">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="90a67-2195"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드에서는에 설정 된 원격 호스트 연결에서 도착 하는 데이터를 읽을 수는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2195">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2196">연결 없는 프로토콜을 사용 하는 경우 사용할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2196">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2197"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 하면 모든 호스트에서 데이터를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2197"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="90a67-2198">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 를 사용 하 여 시간 제한 값을 설정 하지 않으면 데이터는 사용할 수 있을 때까지 <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2198">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2199">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Receive%2A> throw 호출는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2199">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2200">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2200">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2201">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2201">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2202">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2202">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2203">연결 지향 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 메서드는 크기는 버퍼의 최대는 사용할 수 있는 많은 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2203">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the size of the buffer.</span></span> <span data-ttu-id="90a67-2204">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2204">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-2205">연결 없는 사용 중인 경우 <xref:System.Net.Sockets.Socket>,<xref:System.Net.Sockets.Socket.Receive%2A> 첫 큐에 대기 중인된 데이터 그램에 지정 하는 대상 주소에서 읽을 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2205">If you are using a connectionless <xref:System.Net.Sockets.Socket>,<xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="90a67-2206">나타나면 데이터 그램의 크기 보다 큰 경우는 `buffers` 매개 변수를 `buffers` 입력 메시지의 첫 번째 부분과 초과 데이터는 손실 및 <xref:System.Net.Sockets.SocketException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2206">If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2207">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2207">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2208">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2208">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2209">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2209">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2210">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2210">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2211"><paramref name="buffers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2211"><paramref name="buffers" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-2212">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2212">-or-</span></span>  
  
 <span data-ttu-id="90a67-2213"><paramref name="buffers" /> 수가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2213"><paramref name="buffers" />.Count is zero.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2214">소켓에 액세스하려고 시도하는 동안 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2214">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2215"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2215">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2216">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2216">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2217">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2217">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (Span&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(valuetype System.Span`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(Span&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2218">수신된 데이터의 저장소 위치에 해당하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2218">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-2219">받은 데이터를 저장할 <c>버퍼</c> 내의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2219">The location in <c>buffer</c> to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-2220">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2220">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2221"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2221">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-2222">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 수신 버퍼의 특정 오프셋 위치에 바인딩된 <see cref="T:System.Net.Sockets.SocketFlags" />의 원하는 바이트 수를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2222">Receives the specified number of bytes from a bound <see cref="T:System.Net.Sockets.Socket" /> into the specified offset position of the receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2223">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2223">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2224"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드 buffer 매개 변수로 데이터를 읽고 성공적으로 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2224">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="90a67-2225">호출할 수 있습니다 <xref:System.Net.Sockets.Socket.Receive%2A> 소켓 모두에서 연결 지향 연결 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2225">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="90a67-2226">연결 지향 프로토콜을 사용 하는 호출 하거나 실행 해야 <xref:System.Net.Sockets.Socket.Connect%2A> 원격 호스트 연결을 설정 하려면 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 호출 하기 전에 들어오는 연결을 받아들일 <xref:System.Net.Sockets.Socket.Receive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2226">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="90a67-2227"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드에서는에 설정 된 원격 호스트에서 들어오는 데이터를 읽을 수는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2227">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2228">연결 없는 프로토콜을 사용 하는 경우 사용할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2228">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2229"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 하면 모든 호스트에서 데이터를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2229"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="90a67-2230">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 를 사용 하 여 시간 제한 값을 설정 하지 않으면 데이터는 사용할 수 있을 때까지 <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2230">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2231">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Receive%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2231">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2232">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2232">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2233">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2233">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-2234">아래 설명 부분을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-2234">See Remarks below.</span></span> <span data-ttu-id="90a67-2235">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2235">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2236">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2236">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2237">연결 지향 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 메서드는 크기 매개 변수로 지정 된 바이트 수까지 사용할 수 있는 많은 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2237">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter.</span></span> <span data-ttu-id="90a67-2238">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2238">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-2239">연결 없는 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 첫 큐에 대기 중인된 데이터 그램에 지정 하는 대상 주소에서 읽을 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2239">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="90a67-2240">나타나면 데이터 그램의 크기 보다 큰 경우는 `buffer` 매개 변수를 `buffer` 입력 메시지의 첫 번째 부분과 초과 데이터는 손실 및 <xref:System.Net.Sockets.SocketException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2240">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2241">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2241">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2242">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2242">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2243">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2243">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2244">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2244">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2245">에 연결 된 데이터를 받기 전에 데이터 버퍼, 오프셋, 크기, 및 소켓 플래그를 지정 하는 다음 코드 예제에서는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2245">The following code example specifies a data buffer, an offset, a size, and a socket flag before receiving data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2246"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2246"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-2247"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2247"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2248">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2248">-or-</span></span>  
  
 <span data-ttu-id="90a67-2249"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2249"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-2250">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2250">-or-</span></span>  
  
 <span data-ttu-id="90a67-2251"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2251"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2252">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2252">-or-</span></span>  
  
 <span data-ttu-id="90a67-2253"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2253"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-2254"><paramref name="socketFlags" />가 값의 유효한 조합이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2254"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
 <span data-ttu-id="90a67-2255">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2255">-or-</span></span>  
  
 <span data-ttu-id="90a67-2256"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 속성이 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2256">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span></span>  
  
 <span data-ttu-id="90a67-2257">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2257">-or-</span></span>  
  
 <span data-ttu-id="90a67-2258"><see cref="T:System.Net.Sockets.Socket" />에 액세스하는 동안 운영 체제 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2258">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2259"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2259">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-2260">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2260">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2261">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2261">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2262">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2262">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Receive(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Receive(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2263">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2263">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-2264">수신된 데이터를 저장할 <c>buffer</c> 매개 변수의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2264">The position in the <c>buffer</c> parameter to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-2265">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2265">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2266"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2266">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="90a67-2267">소켓 오류를 저장하는 <see cref="T:System.Net.Sockets.SocketError" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2267">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="90a67-2268">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 수신 버퍼에 바인딩된 <see cref="T:System.Net.Sockets.SocketFlags" />의 데이터를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2268">Receives data from a bound <see cref="T:System.Net.Sockets.Socket" /> into a receive buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2269">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2269">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2270"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드 buffer 매개 변수로 데이터를 읽고 성공적으로 읽은 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2270">The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read.</span></span> <span data-ttu-id="90a67-2271">호출할 수 있습니다 <xref:System.Net.Sockets.Socket.Receive%2A> 소켓 모두에서 연결 지향 연결 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2271">You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.</span></span>  
  
 <span data-ttu-id="90a67-2272">연결 지향 프로토콜을 사용 하는 호출 하거나 실행 해야 <xref:System.Net.Sockets.Socket.Connect%2A> 원격 호스트 연결을 설정 하려면 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 호출 하기 전에 들어오는 연결을 받아들일 <xref:System.Net.Sockets.Socket.Receive%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2272">If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>.</span></span> <span data-ttu-id="90a67-2273"><xref:System.Net.Sockets.Socket.Receive%2A> 메서드에서는에 설정 된 원격 호스트에서 들어오는 데이터를 읽을 수는 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2273">The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2274">연결 없는 프로토콜을 사용 하는 경우 사용할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2274">If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2275"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 하면 모든 호스트에서 데이터를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2275"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.</span></span>  
  
 <span data-ttu-id="90a67-2276">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 를 사용 하 여 시간 제한 값을 설정 하지 않으면 데이터는 사용할 수 있을 때까지 <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2276">If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2277">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Receive%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2277">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2278">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2278">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2279">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2279">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-2280">아래 설명 부분을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-2280">See Remarks below.</span></span> <span data-ttu-id="90a67-2281">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2281">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2282">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2282">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2283">연결 지향 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 메서드는 크기 매개 변수로 지정 된 바이트 수까지 사용할 수 있는 많은 데이터를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2283">If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter.</span></span> <span data-ttu-id="90a67-2284">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2284">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.</span></span>  
  
 <span data-ttu-id="90a67-2285">연결 없는 사용 중인 경우 <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> 첫 큐에 대기 중인된 데이터 그램에 지정 하는 대상 주소에서 읽을 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2285">If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method.</span></span> <span data-ttu-id="90a67-2286">나타나면 데이터 그램의 크기 보다 큰 경우는 `buffer` 매개 변수를 `buffer` 입력 메시지의 첫 번째 부분과 초과 데이터는 손실 및 <xref:System.Net.Sockets.SocketException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2286">If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2287">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2287">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2288">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2288">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2289">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2289">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2290">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2290">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2291"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2291"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-2292"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2292"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2293">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2293">-or-</span></span>  
  
 <span data-ttu-id="90a67-2294"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2294"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-2295">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2295">-or-</span></span>  
  
 <span data-ttu-id="90a67-2296"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2296"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2297">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2297">-or-</span></span>  
  
 <span data-ttu-id="90a67-2298"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2298"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-2299"><paramref name="socketFlags" />가 값의 유효한 조합이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2299"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
 <span data-ttu-id="90a67-2300">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2300">-or-</span></span>  
  
 <span data-ttu-id="90a67-2301"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 속성이 설정되어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2301">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property is not set.</span></span>  
  
 <span data-ttu-id="90a67-2302">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2302">-or-</span></span>  
  
 <span data-ttu-id="90a67-2303"><see cref="T:System.Net.Sockets.Socket" />에 액세스하는 동안 운영 체제 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2303">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2304"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2304">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-2305">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2305">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2306">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2306">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2307">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2307">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-2308">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2308">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-2309">연결된 <see cref="T:System.Net.Sockets.Socket" /> 개체에서 데이터를 받기 위해 비동기 요청을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2309">Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
        <returns><span data-ttu-id="90a67-2310">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2310">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-2311">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2311">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-2312">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2312">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-2313">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2313">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2314"><xref:System.Net.Sockets.Socket.ReceiveAsync%2A> 메서드는 소켓 또는 바인딩된 연결 없는 소켓 연결 되 고 들어오는 데이터를 읽는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2314">The <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method is used on connected sockets or bound connectionless sockets and is used to read incoming data.</span></span> <span data-ttu-id="90a67-2315">소켓의 로컬 주소를 알 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2315">The socket's local address must be known.</span></span>  
  
 <span data-ttu-id="90a67-2316">이 함수는 연결 없는 바인딩된 소켓에 대 한 받은 메시지를 수락할 주소를 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2316">For bound connectionless sockets, this function restricts the addresses from which received messages are accepted.</span></span> <span data-ttu-id="90a67-2317">함수는만 연결에 지정 된 원격 주소에서 메시지를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2317">The function only returns messages from the remote address specified in the connection.</span></span> <span data-ttu-id="90a67-2318">다른 주소에서 보내는 메시지를 자동으로 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2318">Messages from other addresses are silently discarded.</span></span>  
  
 <span data-ttu-id="90a67-2319"><xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> 속성에는 `e` 매개 변수는 Windows 소켓 서비스 공급자 읽기 요청에 대 한 추가 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2319">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request.</span></span> <span data-ttu-id="90a67-2320">이 매개 변수를 사용 하는 방법에 대 한 자세한 내용은 참조 하십시오. <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2320">For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="90a67-2321">다음과 같은 속성 및 이벤트에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 성공적으로이 메서드를 호출 하는 데 필요한 개체:</span><span class="sxs-lookup"><span data-stu-id="90a67-2321">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <span data-ttu-id="90a67-2322"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 또는 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="90a67-2322"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span></span>  
  
-   <span data-ttu-id="90a67-2323"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 경우 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 설정</span><span class="sxs-lookup"><span data-stu-id="90a67-2323"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <span data-ttu-id="90a67-2324"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> 경우 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 설정</span><span class="sxs-lookup"><span data-stu-id="90a67-2324"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="90a67-2325">호출자에 게 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> 속성을 호출 하기 전에 모든 사용자 상태 개체는 <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> 메서드 정보를 콜백 메서드에서 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2325">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="90a67-2326">콜백 단일 개체 보다 더 많은 정보를 필요로 한다면 구성원으로 다른 필요한 상태 정보를 저장할 작은 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2326">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="90a67-2327">바이트 스트림 스타일 소켓에 대 한 버퍼가 채워지거나, 연결이 닫힌 또는 내부적으로 버퍼링 된 데이터가 모두 사용 될 때까지 들어오는 데이터 버퍼에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2327">For byte stream-style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.</span></span>  
  
 <span data-ttu-id="90a67-2328">메시지 지향 소켓에 대 한 들어오는 메시지와 관련 된 버퍼의 총 크기까지 버퍼에 저장 되는 `e` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2328">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer associated with the `e` parameter.</span></span> <span data-ttu-id="90a67-2329">메시지 버퍼 보다 큰 경우 버퍼는 메시지의 첫 번째 부분으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2329">If the message is larger than the buffer, the buffer is filled with the first part of the message.</span></span>  
  
 <span data-ttu-id="90a67-2330">연결 지향 소켓의 <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> 메서드는 바이트 스트림 또는 메시지 지향 소켓 인지에 따라 두 가지 방식 중 하나를 사용 하 여 가상 회로의 정상 종료를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2330">For connection-oriented sockets, the <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> method can indicate the graceful termination of the virtual circuit in one of two ways that depend on whether the socket is byte stream or message oriented.</span></span> <span data-ttu-id="90a67-2331">바이트 스트림을 읽지 0 바이트 정상 종료 및 추가 바이트 읽을 적이 있는지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2331">For byte streams, zero bytes having been read indicates graceful closure and that no more bytes will ever be read.</span></span> <span data-ttu-id="90a67-2332">메시지 지향 소켓, 여기서 0 바이트 메시지를 허용 되는 <xref:System.Net.Sockets.SocketException> 와 <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> 네이티브 WSAEDISCON Winsock 오류 코드 (10101)로 설정 하는 데 정상 종료를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2332">For message-oriented sockets, where a zero byte message is often allowable, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAEDISCON error code (10101) is used to indicate graceful closure.</span></span> <span data-ttu-id="90a67-2333">모든 경우에 <xref:System.Net.Sockets.SocketException> 와 <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> 기본 Winsock WSAECONNRESET로 설정 오류 코드 (10054) 중단 한 닫기를 발생 했음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2333">In any case, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAECONNRESET error code (10054) indicates an abortive close has occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-2334">인수가 잘못된 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2334">An argument was invalid.</span></span> <span data-ttu-id="90a67-2335"><paramref name="e" /> 매개 변수의 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 또는 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 속성이 올바른 버퍼를 참조하지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2335">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <paramref name="e" /> parameter must reference valid buffers.</span></span> <span data-ttu-id="90a67-2336">이러한 속성 중 하나를 설정할 수 있지만 두 속성을 동시에 설정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2336">One or the other of these properties may be set, but not both at the same time.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-2337"><paramref name="e" /> 매개 변수에 지정된 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체를 사용하여 소켓 작업이 이미 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2337">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-2338">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2338">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2339"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2339">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2340">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2340">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-2341"><see cref="T:System.Net.Sockets.Socket" />의 수신 버퍼 크기를 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2341">Gets or sets a value that specifies the size of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="90a67-2342">수신 버퍼의 크기(바이트)가 들어 있는 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2342">An <see cref="T:System.Int32" /> that contains the size, in bytes, of the receive buffer.</span></span> <span data-ttu-id="90a67-2343">기본값은 8192입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2343">The default is 8192.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2344">더 큰 버퍼 크기는 잠재적으로 빈 승인 (데이터 부분이 없는 TCP 패킷)의 수를 줄일 수 있지만 연결 문제를 인식 하는 데 오래 걸릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2344">A larger buffer size potentially reduces the number of empty acknowledgements (TCP packets with no data portion), but might also delay the recognition of connection difficulties.</span></span> <span data-ttu-id="90a67-2345">큰 파일을 전송 하는 경우 또는 높은 대역폭, 대기 시간이 긴 연결 (예: 위성 광대역 공급자입니다.)를 사용 하는 경우 버퍼 크기 증가 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2345">Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2346">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2346">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2347">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2347">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2348"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2348">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-2349">set 작업에 지정된 값이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2349">The value specified for a set operation is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveFrom">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-2350">데이터그램을 받고 소스 끝점을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2350">Receives a datagram and stores the source endpoint.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveFrom (buffer As Byte(), ByRef remoteEP As EndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::EndPoint ^ % remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2351">수신된 데이터의 저장소 위치에 해당하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2351">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-2352">원격 서버를 나타내며 참조에 의해 전달되는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2352">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <summary><span data-ttu-id="90a67-2353">데이터 버퍼에 데이터그램을 받고 끝점을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2353">Receives a datagram into the data buffer and stores the endpoint.</span></span></summary>
        <returns><span data-ttu-id="90a67-2354">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2354">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2355"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드 데이터를 읽고는 `buffer` 매개 변수를 성공적으로 읽은 바이트 수를 반환 하 고 데이터를 보낸 원격 호스트 끝점을 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2355">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="90a67-2356">이 메서드는 연결 없는 데이터 그램을 알 수 없는 호스트 또는 여러 호스트에서 수신 하려는 경우 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2356">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="90a67-2357">이 오버 로드만 제공 해야 receive `buffer`, 및 <xref:System.Net.EndPoint> 원격 호스트를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2357">This overload only requires you to provide a receive `buffer`, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="90a67-2358">버퍼 오프셋을 0으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2358">The buffer offset defaults to 0.</span></span> <span data-ttu-id="90a67-2359">크기의 기본값의 길이 `buffer` 매개 변수 및 `socketFlags` 값의 기본값은 <xref:System.Net.Sockets.SocketFlags.None>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2359">The size defaults to the length of the `buffer` parameter and the `socketFlags` value defaults to <xref:System.Net.Sockets.SocketFlags.None>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2360">호출 하기 전에 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>를 명시적으로 바인딩해야는 <xref:System.Net.Sockets.Socket> 사용 하 여 로컬 끝점에는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2360">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="90a67-2361">그렇지 않고 경우 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2361">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-2362">연결 없는 프로토콜 사용 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 는 로컬 네트워크 버퍼에 받은 첫 큐에 대기 된 데이터 그램을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2362">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="90a67-2363">나타나면 데이터 그램의 크기 보다 큰 경우 `buffer`, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 채워 `buffer` 와 가능한 한 throw 그대로 만큼는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2363">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2364">신뢰할 수 없는 프로토콜을 사용 하는 경우에 초과 데이터는 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2364">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="90a67-2365">신뢰할 수 있는 프로토콜을 사용 하는, 초과 데이터는 서비스 공급자에 의해 유지 되 고 호출 하 여 검색할 수 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 너무 큰 버퍼를 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2365">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="90a67-2366">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 데이터를 사용할 수 있을 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2366">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="90a67-2367">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2367">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2368">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2368">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2369">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2369">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2370">하지만 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 연결 없는 프로토콜을 위한 것은 연결 지향 프로토콜도 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2370">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="90a67-2371">그렇게 하도록 선택할 경우 먼저 중 하나는 원격 호스트 연결을 설정 해야를 호출 하 여는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 하거나 적용 들어오는 원격 호스트 연결을 호출 하 여는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2371">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2372">설정 하거나 호출 하기 전에 연결을 허용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 얻게 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2372">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2373">호출 하기 전에 연결 없는 프로토콜에 대 한 기본 원격 호스트를 설정할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2373">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2374">두이 경우 모두에 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드는 무시는 `remoteEP` 매개 변수에서 연결 된 데이터 또는 기본 원격 호스트를 받기만 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2374">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="90a67-2375">연결 지향 소켓 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 크기의 최대는 사용 가능한 데이터 읽습니다 `buffer`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2375">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`.</span></span> <span data-ttu-id="90a67-2376">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2376">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2377">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2377">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2378">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2378">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2379"><xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 일치 해야는 <xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2379">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2380">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2380">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2381">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2381">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2382">다음 코드 예제는 원격 호스트에서 연결이 끊긴 데이터 그램을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2382">The following code example receives a connectionless datagram from a remote host.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#9)]
 [!code-csharp[Socket_Sync_Send_Receive#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#9)]
 [!code-vb[Socket_Sync_Send_Receive#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2383"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2383"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-2384">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2384">-or-</span></span>  
  
 <span data-ttu-id="90a67-2385"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2385"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2386">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2386">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2387"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2387">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-2388">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2388">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2389">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2389">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2390">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2390">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2391">받는 데이터에 대한 저장소 위치인 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2391">An array of type <see cref="T:System.Byte" /> that is the storage location for the received data.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2392"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2392">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-2393">원격 서버를 나타내며 참조에 의해 전달되는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2393">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <summary><span data-ttu-id="90a67-2394">지정된 <see cref="T:System.Net.Sockets.SocketFlags" />를 사용하여 데이터 버퍼에 데이터그램을 받고 끝점을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2394">Receives a datagram into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span></span></summary>
        <returns><span data-ttu-id="90a67-2395">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2395">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2396"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드 데이터를 읽고는 `buffer` 매개 변수를 성공적으로 읽은 바이트 수를 반환 하 고 데이터를 보낸 원격 호스트 끝점을 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2396">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="90a67-2397">이 메서드는 연결 없는 데이터 그램을 알 수 없는 호스트 또는 여러 호스트에서 수신 하려는 경우 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2397">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="90a67-2398">이 오버 로드만 제공 해야 수신 버퍼, 필요한 <xref:System.Net.Sockets.SocketFlags>, 및 <xref:System.Net.EndPoint> 원격 호스트를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2398">This overload only requires you to provide a receive buffer, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="90a67-2399">0과 크기 기본값 버퍼 매개 변수의 길이 오프셋된 하는 기본값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2399">The offset defaults to 0 and the size defaults to the length of the buffer parameter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2400">호출 하기 전에 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>를 명시적으로 바인딩해야는 <xref:System.Net.Sockets.Socket> 사용 하 여 로컬 끝점에는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2400">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="90a67-2401">그렇지 않고 경우 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2401">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-2402">연결 없는 프로토콜 사용 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 는 로컬 네트워크 버퍼에 받은 첫 큐에 대기 된 데이터 그램을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2402">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="90a67-2403">나타나면 데이터 그램의 크기 보다 큰 경우 `buffer`, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 채워 `buffer` 와 가능한 한 throw 그대로 만큼는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2403">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2404">신뢰할 수 없는 프로토콜을 사용 하는 경우에 초과 데이터는 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2404">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="90a67-2405">신뢰할 수 있는 프로토콜을 사용 하는, 초과 데이터는 서비스 공급자에 의해 유지 되 고 호출 하 여 검색할 수 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 너무 큰 버퍼를 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2405">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="90a67-2406">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 데이터를 사용할 수 있을 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2406">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="90a67-2407">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2407">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2408">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2408">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2409">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2409">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2410">하지만 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 연결 없는 프로토콜을 위한 것은 연결 지향 프로토콜도 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2410">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="90a67-2411">그렇게 하도록 선택할 경우 먼저 중 하나는 원격 호스트 연결을 설정 해야를 호출 하 여는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 하거나 적용 들어오는 원격 호스트 연결을 호출 하 여는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2411">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2412">설정 하거나 호출 하기 전에 연결을 허용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 얻게 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2412">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2413">호출 하기 전에 연결 없는 프로토콜에 대 한 기본 원격 호스트를 설정할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2413">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2414">두이 경우 모두에 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드는 무시는 `remoteEP` 매개 변수에서 연결 된 데이터 또는 기본 원격 호스트를 받기만 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2414">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="90a67-2415">연결 지향 소켓 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 크기의 최대는 사용 가능한 데이터 읽습니다 `buffer`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2415">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`.</span></span> <span data-ttu-id="90a67-2416">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2416">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2417">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2417">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2418">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2418">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2419"><xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 일치 해야는 <xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2419">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2420">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2420">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2421">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2421">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2422">다음 코드 예제는 원격 호스트에서 연결이 끊긴 데이터 그램을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2422">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="90a67-2423"><xref:System.Net.Sockets.SocketFlags> 에 전달 되는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2423"><xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#10)]
 [!code-csharp[Socket_Sync_Send_Receive#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#10)]
 [!code-vb[Socket_Sync_Send_Receive#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2424"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2424"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-2425">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2425">-or-</span></span>  
  
 <span data-ttu-id="90a67-2426"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2426"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2427">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2427">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2428"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2428">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-2429">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2429">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2430">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2430">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2431">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2431">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2432">수신된 데이터의 저장소 위치에 해당하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2432">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-2433">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2433">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2434"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2434">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-2435">원격 서버를 나타내며 참조에 의해 전달되는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2435">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <summary><span data-ttu-id="90a67-2436">지정된 <see cref="T:System.Net.Sockets.SocketFlags" />를 사용하여 데이터 버퍼에 원하는 바이트 수를 받고 끝점을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2436">Receives the specified number of bytes into the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span></span></summary>
        <returns><span data-ttu-id="90a67-2437">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2437">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2438"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드 데이터를 읽고는 `buffer` 매개 변수를 성공적으로 읽은 바이트 수를 반환 하 고 데이터를 보낸 원격 호스트 끝점을 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2438">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="90a67-2439">이 메서드는 연결 없는 데이터 그램을 알 수 없는 호스트 또는 여러 호스트에서 수신 하려는 경우 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2439">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="90a67-2440">이 오버 로드만 제공 해야 수신 버퍼를 수신 하 고, 필요한 바이트 수가 <xref:System.Net.Sockets.SocketFlags>, 및 <xref:System.Net.EndPoint> 원격 호스트를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2440">This overload only requires you to provide a receive buffer, the number of bytes you want to receive, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host.</span></span> <span data-ttu-id="90a67-2441">버퍼 오프셋을 0으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2441">The buffer offset defaults to 0.</span></span>  
  
 <span data-ttu-id="90a67-2442">연결 없는 프로토콜 사용 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 는 로컬 네트워크 버퍼에 받은 첫 큐에 대기 된 데이터 그램을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2442">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="90a67-2443">나타나면 데이터 그램의 크기 보다 큰 경우 `buffer`, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 채워 `buffer` 와 가능한 한 throw 그대로 만큼는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2443">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2444">신뢰할 수 없는 프로토콜을 사용 하는 경우에 초과 데이터는 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2444">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="90a67-2445">신뢰할 수 있는 프로토콜을 사용 하는, 초과 데이터는 서비스 공급자에 의해 유지 되 고 호출 하 여 검색할 수 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 너무 큰 버퍼를 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2445">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="90a67-2446">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 데이터를 사용할 수 있을 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2446">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="90a67-2447">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2447">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2448">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2448">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2449">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2449">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2450">하지만 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 연결 없는 프로토콜을 위한 것은 연결 지향 프로토콜도 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2450">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="90a67-2451">그렇게 하도록 선택할 경우 먼저 중 하나는 원격 호스트 연결을 설정 해야를 호출 하 여는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 하거나 적용 들어오는 원격 호스트 연결을 호출 하 여는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2451">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2452">설정 하거나 호출 하기 전에 연결을 허용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 얻게 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2452">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2453">호출 하기 전에 연결 없는 프로토콜에 대 한 기본 원격 호스트를 설정할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2453">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2454">두이 경우 모두에 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드는 무시는 `remoteEP` 매개 변수에서 연결 된 데이터 또는 기본 원격 호스트를 받기만 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2454">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="90a67-2455">연결 지향 소켓 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 을 사용 하 여 지정 된 바이트 수의 데이터 읽습니다는 `size` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2455">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the number of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="90a67-2456">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2456">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2457">호출 하기 전에 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>를 명시적으로 바인딩해야는 <xref:System.Net.Sockets.Socket> 사용 하 여 로컬 끝점에는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2457">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="90a67-2458">그렇지 않고 경우 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2458">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2459">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2459">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2460">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2460">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2461"><xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 일치 해야는 <xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2461">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2462">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2462">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2463">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2463">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2464">다음 코드 예제는 원격 호스트에서 연결이 끊긴 데이터 그램을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2464">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="90a67-2465">버퍼 크기 및 <xref:System.Net.Sockets.SocketFlags> 에 전달 되는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2465">The buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#11)]
 [!code-csharp[Socket_Sync_Send_Receive#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#11)]
 [!code-vb[Socket_Sync_Send_Receive#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2466"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2466"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-2467">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2467">-or-</span></span>  
  
 <span data-ttu-id="90a67-2468"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2468"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-2469"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2469"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2470">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2470">-or-</span></span>  
  
 <span data-ttu-id="90a67-2471"><paramref name="size" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2471"><paramref name="size" /> is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-2472"><paramref name="socketFlags" />가 값의 유효한 조합이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2472"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
 <span data-ttu-id="90a67-2473">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2473">-or-</span></span>  
  
 <span data-ttu-id="90a67-2474"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 속성이 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2474">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span></span>  
  
 <span data-ttu-id="90a67-2475">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2475">-or-</span></span>  
  
 <span data-ttu-id="90a67-2476"><see cref="T:System.Net.Sockets.Socket" />에 액세스하는 동안 운영 체제 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2476">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2477"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2477">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-2478">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2478">A caller in the call stack does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2479">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2479">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2480">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2480">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFrom">
      <MemberSignature Language="C#" Value="public int ReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ % remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2481">수신된 데이터의 저장소 위치에 해당하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2481">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-2482">수신된 데이터를 저장할 <c>buffer</c> 매개 변수의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2482">The position in the <c>buffer</c> parameter to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-2483">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2483">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2484"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2484">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-2485">원격 서버를 나타내며 참조에 의해 전달되는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2485">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <summary><span data-ttu-id="90a67-2486">지정된 <see cref="T:System.Net.Sockets.SocketFlags" />를 사용하여 데이터 버퍼의 지정된 위치에 지정된 바이트 수의 데이터를 수신하고 끝점을 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2486">Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint.</span></span></summary>
        <returns><span data-ttu-id="90a67-2487">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2487">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2488"><xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드 데이터를 읽고는 `buffer` 매개 변수를 성공적으로 읽은 바이트 수를 반환 하 고 데이터를 보낸 원격 호스트 끝점을 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2488">The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent.</span></span> <span data-ttu-id="90a67-2489">이 메서드는 연결 없는 데이터 그램을 알 수 없는 호스트 또는 여러 호스트에서 수신 하려는 경우 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2489">This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.</span></span>  
  
 <span data-ttu-id="90a67-2490">연결 없는 프로토콜 사용 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 는 로컬 네트워크 버퍼에 받은 첫 큐에 대기 된 데이터 그램을 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2490">With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer.</span></span> <span data-ttu-id="90a67-2491">나타나면 데이터 그램의 크기 보다 큰 경우 `buffer`, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 채워 `buffer` 와 가능한 한 throw 그대로 만큼는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2491">If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2492">신뢰할 수 없는 프로토콜을 사용 하는 경우에 초과 데이터는 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2492">If you are using an unreliable protocol, the excess data will be lost.</span></span> <span data-ttu-id="90a67-2493">신뢰할 수 있는 프로토콜을 사용 하는, 초과 데이터는 서비스 공급자에 의해 유지 되 고 호출 하 여 검색할 수 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 너무 큰 버퍼를 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2493">If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.</span></span>  
  
 <span data-ttu-id="90a67-2494">읽을 수 있는 데이터가 없는 경우는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 데이터를 사용할 수 있을 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2494">If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available.</span></span> <span data-ttu-id="90a67-2495">비 중단 모드에 있으며에서 사용할 수 있는 데이터가 없는 경우는 프로토콜 스택 버퍼에서는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 즉시 완료 되 고 throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2495">If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2496">사용할 수는 <xref:System.Net.Sockets.Socket.Available%2A> 속성을 읽을 수 있는 데이터 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2496">You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading.</span></span> <span data-ttu-id="90a67-2497">때 <xref:System.Net.Sockets.Socket.Available%2A> 는 0이 아닌 수신 작업을 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2497">When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.</span></span>  
  
 <span data-ttu-id="90a67-2498">하지만 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 연결 없는 프로토콜을 위한 것은 연결 지향 프로토콜도 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2498">Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well.</span></span> <span data-ttu-id="90a67-2499">그렇게 하도록 선택할 경우 먼저 중 하나는 원격 호스트 연결을 설정 해야를 호출 하 여는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 하거나 적용 들어오는 원격 호스트 연결을 호출 하 여는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2499">If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-2500">설정 하거나 호출 하기 전에 연결을 허용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드를 얻게 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2500">If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2501">호출 하기 전에 연결 없는 프로토콜에 대 한 기본 원격 호스트를 설정할 수도 있습니다는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2501">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span> <span data-ttu-id="90a67-2502">두이 경우 모두에 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드는 무시는 `remoteEP` 매개 변수에서 연결 된 데이터 또는 기본 원격 호스트를 받기만 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2502">In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.</span></span>  
  
 <span data-ttu-id="90a67-2503">연결 지향 소켓 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 을 사용 하 여 지정 된 바이트 크기의 데이터 읽습니다는 `size` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2503">With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the amount of bytes specified by the `size` parameter.</span></span> <span data-ttu-id="90a67-2504">원격 호스트를 종료 하는 경우는 <xref:System.Net.Sockets.Socket> 와 연결에서 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용할 수 있는 모든 데이터 수신 되기는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드가 즉시 완료 되 고 0 바이트를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2504">If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2505">호출 하기 전에 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>를 명시적으로 바인딩해야는 <xref:System.Net.Sockets.Socket> 사용 하 여 로컬 끝점에는 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2505">Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="90a67-2506">그렇지 않고 경우 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2506">If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2507">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2507">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2508">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2508">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2509"><xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 일치 해야는 <xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2509">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2510">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2510">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2511">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2511">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2512">다음 코드 예제는 원격 호스트에서 연결이 끊긴 데이터 그램을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2512">The following code example receives a connectionless datagram from a remote host.</span></span> <span data-ttu-id="90a67-2513">오프셋, 버퍼 크기 및 <xref:System.Net.Sockets.SocketFlags> 에 전달 되는 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2513">The offset, buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#12](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#12)]
 [!code-csharp[Socket_Sync_Send_Receive#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#12)]
 [!code-vb[Socket_Sync_Send_Receive#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2514"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2514"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-2515">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2515">-or-</span></span>  
  
 <span data-ttu-id="90a67-2516"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2516"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-2517"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2517"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2518">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2518">-or-</span></span>  
  
 <span data-ttu-id="90a67-2519"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2519"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-2520">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2520">-or-</span></span>  
  
 <span data-ttu-id="90a67-2521"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2521"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2522">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2522">-or-</span></span>  
  
 <span data-ttu-id="90a67-2523"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 오프셋 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2523"><paramref name="size" /> is greater than the length of the <paramref name="buffer" /> minus the value of the offset parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-2524"><paramref name="socketFlags" />가 값의 유효한 조합이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2524"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
 <span data-ttu-id="90a67-2525">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2525">-or-</span></span>  
  
 <span data-ttu-id="90a67-2526"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 속성이 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2526">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span></span>  
  
 <span data-ttu-id="90a67-2527">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2527">-or-</span></span>  
  
 <span data-ttu-id="90a67-2528">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2528">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2529"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2529">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2530">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2530">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2531">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2531">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveFromAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveFromAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveFromAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveFromAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-2532">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2532">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-2533">지정된 네트워크 장치에서 비동기적으로 데이터를 받기 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2533">Begins to asynchronously receive data from a specified network device.</span></span></summary>
        <returns><span data-ttu-id="90a67-2534">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2534">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-2535">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2535">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-2536">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2536">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-2537">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2537">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2538"><xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> 메서드는 연결 없는 소켓에서 데이터를 수신 하는 데 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2538">The <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> method is used primarily to receive data on a connectionless socket.</span></span> <span data-ttu-id="90a67-2539">소켓의 로컬 주소를 알 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2539">The socket's local address must be known.</span></span>  
  
 <span data-ttu-id="90a67-2540">호출자에 게 설정 해야 합니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> 속성을는 <xref:System.Net.IPEndPoint> 있는 데이터를 받는 원격 호스트의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2540">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.</span></span>  
  
 <span data-ttu-id="90a67-2541"><xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> 속성에는 `e` 매개 변수는 Windows 소켓 서비스 공급자 읽기 요청에 대 한 추가 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2541">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request.</span></span> <span data-ttu-id="90a67-2542">이 매개 변수를 사용 하는 방법에 대 한 자세한 내용은 참조 하십시오. <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2542">For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="90a67-2543">다음과 같은 속성 및 이벤트에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 성공적으로이 메서드를 호출 하는 데 필요한 개체:</span><span class="sxs-lookup"><span data-stu-id="90a67-2543">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="90a67-2544">호출자에 게 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> 속성을 호출 하기 전에 모든 사용자 상태 개체는 <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> 메서드 정보를 콜백 메서드에서 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2544">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="90a67-2545">콜백 단일 개체 보다 더 많은 정보를 필요로 한다면 구성원으로 다른 필요한 상태 정보를 저장할 작은 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2545">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="90a67-2546">메시지 지향 소켓에 대 한 들어오는 메시지가 총 크기는 버퍼의 최대 버퍼에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2546">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer.</span></span> <span data-ttu-id="90a67-2547"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 및 <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> 속성 버퍼에 데이터를 배치할 위치와 데이터의 양을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2547">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 <span data-ttu-id="90a67-2548">바이트 스트림 스타일 소켓, 버퍼가 채워지거나, 연결이 닫힌 또는 내부적으로 버퍼링 된 데이터가 모두 사용 될 때까지 들어오는 데이터 버퍼에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2548">For byte stream–style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.</span></span> <span data-ttu-id="90a67-2549"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 및 <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> 속성 버퍼에 데이터를 배치할 위치와 데이터의 양을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2549">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90a67-2550"><see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2550">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-2551"><paramref name="e" /> 매개 변수에 지정된 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체를 사용하여 소켓 작업이 이미 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2551">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-2552">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2552">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2553"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2553">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2554">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2554">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMessageFrom">
      <MemberSignature Language="C#" Value="public int ReceiveMessageFrom (byte[] buffer, int offset, int size, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.IPPacketInformation ipPacketInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReceiveMessageFrom(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags&amp; socketFlags, class System.Net.EndPoint&amp; remoteEP, [out] valuetype System.Net.Sockets.IPPacketInformation&amp; ipPacketInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveMessageFrom (buffer As Byte(), offset As Integer, size As Integer, ByRef socketFlags As SocketFlags, ByRef remoteEP As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReceiveMessageFrom(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags % socketFlags, System::Net::EndPoint ^ % remoteEP, [Runtime::InteropServices::Out] System::Net::Sockets::IPPacketInformation % ipPacketInformation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags&amp;" RefType="ref" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint&amp;" RefType="ref" />
        <Parameter Name="ipPacketInformation" Type="System.Net.Sockets.IPPacketInformation&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2555">수신된 데이터의 저장소 위치에 해당하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2555">An array of type <see cref="T:System.Byte" /> that is the storage location for received data.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-2556">수신된 데이터를 저장할 <c>buffer</c> 매개 변수의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2556">The position in the <c>buffer</c> parameter to store the received data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-2557">수신 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2557">The number of bytes to receive.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2558"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2558">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-2559">원격 서버를 나타내며 참조에 의해 전달되는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2559">An <see cref="T:System.Net.EndPoint" />, passed by reference, that represents the remote server.</span></span></param>
        <param name="ipPacketInformation"><span data-ttu-id="90a67-2560"><see cref="T:System.Net.Sockets.IPPacketInformation" /> 보유 주소 및 인터페이스 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2560">An <see cref="T:System.Net.Sockets.IPPacketInformation" /> holding address and interface information.</span></span></param>
        <summary><span data-ttu-id="90a67-2561">지정된 <see cref="T:System.Net.Sockets.SocketFlags" />를 사용하여 데이터 버퍼의 지정된 위치에 지정된 바이트 수의 데이터를 수신하고 끝점 및 패킷 정보를 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2561">Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />, and stores the endpoint and packet information.</span></span></summary>
        <returns><span data-ttu-id="90a67-2562">받은 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2562">The number of bytes received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2563"><xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> 메서드 데이터를 읽고는 `buffer` 매개 변수를 성공적으로 읽은 바이트 수를 반환 하 고 받은 패킷에 대 한 정보는 데이터를 전송 하는 원격 호스트 끝점을 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2563">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent, as well as information about the received packet.</span></span>  
  
 <span data-ttu-id="90a67-2564"><xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> 메서드는 연결 없는 소켓에서 메시지 데이터를 수신 하는 데 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2564">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method is used primarily to receive message data on a connectionless socket.</span></span> <span data-ttu-id="90a67-2565">소켓의 로컬 주소를 알 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2565">The socket's local address must be known.</span></span> <span data-ttu-id="90a67-2566">이 메서드 데이터 그램 및 원시 소켓 에서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2566">This method can only be used with datagram and raw sockets.</span></span> <span data-ttu-id="90a67-2567">소켓에서 소켓 유형을으로 설정 하 여 초기화 해야 <xref:System.Net.Sockets.SocketType.Dgram> 또는 <xref:System.Net.Sockets.SocketType.Raw> 이 메서드를 호출 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="90a67-2567">The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType.Dgram> or <xref:System.Net.Sockets.SocketType.Raw> before calling this method.</span></span> <span data-ttu-id="90a67-2568">소켓을 사용 하 여 생성할 때 이렇게 <xref:System.Net.Sockets.Socket.%23ctor%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2568">This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2569">메시지 지향 소켓에 대 한 들어오는 메시지에 배치 되는 `buffer` 에 지정 된 전체 크기까지 매개 변수는 `size` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2569">For message-oriented sockets, an incoming message is placed into the `buffer` parameter up to the total size specified in the `size` parameter.</span></span> <span data-ttu-id="90a67-2570">`offset` 에서 위치를 결정 하는 매개 변수는 `buffer` 데이터 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2570">The `offset` parameter determines where in the `buffer` the data is placed.</span></span> <span data-ttu-id="90a67-2571">에 배치 된 데이터의 실제 크기는 `buffer` 에서 반환 되는 <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2571">The actual amount of data placed into the `buffer` is returned by the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-2572"><xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> 자동으로 메서드 설정 메서드는 <xref:System.Net.Sockets.SocketOptionName.PacketInformation> 소켓 옵션을 `true` 처음에 대해 호출 됩니다는 주어진 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2572">The <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method automatically method sets the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-2573">그러나 반환 된 <xref:System.Net.Sockets.IPPacketInformation> 개체 소켓 옵션을 설정한 후에 로컬 컴퓨터에 도착 하 모드 해제 패킷에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2573">However, the returned <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set.</span></span> <span data-ttu-id="90a67-2574">로컬 끝점에 바인딩되어 있을 때 소켓 사이 패킷을 보내는 경우 (명시적으로 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드 중 하나에 의해 암시적으로 또는 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, 또는 <xref:System.Net.Sockets.Socket.SendToAsync%2A> 메서드)를 호출 하는 첫 번째는 <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> 메서드를 호출 <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> 메서드는 잘못 된 반환 <xref:System.Net.Sockets.IPPacketInformation> 이러한 패킷에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2574">If a socket is sent packets between when it is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and its first call to the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method, calls to <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method will return invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.</span></span>  
  
 <span data-ttu-id="90a67-2575">되도록 모든 <xref:System.Net.Sockets.IPPacketInformation> 개체는 응용 프로그램 설정 해야 합니다는 <xref:System.Net.Sockets.SocketOptionName.PacketInformation> 소켓 옵션을 `true` 사용 하 여 로컬 끝점에 연결 되기 전에 <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2575">To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="90a67-2576">응용 프로그램을 검사할 수는 `ipPacketInformation` 유니캐스트, 멀티 캐스트 또는 브로드캐스트 주소를 사용 하 여 데이터 그램을 보냈는지를 파악 하기 위해 필요한 경우 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2576">An application can examine the `ipPacketInformation` parameter if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2577"><xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> 일치 해야는 <xref:System.Net.Sockets.AddressFamily> 의 <xref:System.Net.EndPoint> 에 사용 된 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2577">The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2578">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2578">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2579">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2579">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2580"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2580"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-2581">\- 또는-</span><span class="sxs-lookup"><span data-stu-id="90a67-2581">\- or-</span></span>  
  
 <span data-ttu-id="90a67-2582"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2582"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-2583"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2583"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2584">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2584">-or-</span></span>  
  
 <span data-ttu-id="90a67-2585"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2585"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-2586">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2586">-or-</span></span>  
  
 <span data-ttu-id="90a67-2587"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2587"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2588">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2588">-or-</span></span>  
  
 <span data-ttu-id="90a67-2589"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 오프셋 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2589"><paramref name="size" /> is greater than the length of the <paramref name="buffer" /> minus the value of the offset parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-2590"><paramref name="socketFlags" />가 값의 유효한 조합이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2590"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
 <span data-ttu-id="90a67-2591">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2591">-or-</span></span>  
  
 <span data-ttu-id="90a67-2592"><see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 속성이 설정되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2592">The <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> property was not set.</span></span>  
  
 <span data-ttu-id="90a67-2593">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2593">-or-</span></span>  
  
 <span data-ttu-id="90a67-2594">.NET Framework가 AMD 64비트 프로세서에서 실행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2594">The .NET Framework is running on an AMD 64-bit processor.</span></span>  
  
 <span data-ttu-id="90a67-2595">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2595">-or-</span></span>  
  
 <span data-ttu-id="90a67-2596">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2596">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2597"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2597">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-2598">이 메서드에는 Windows XP가 필요한데 운영 체제가 Windows 2000 또는 그 이전 버전인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2598">The operating system is Windows 2000 or earlier, and this method requires Windows XP.</span></span></exception>
        <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="90a67-2599">네트워크에서 연결에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2599">for accepting connections from the network.</span></span> <span data-ttu-id="90a67-2600">연관된 열거형: <see cref="F:System.Net.NetworkAccess.Accept" /></span><span class="sxs-lookup"><span data-stu-id="90a67-2600">Associated enumeration: <see cref="F:System.Net.NetworkAccess.Accept" />.</span></span></permission>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)" />
        <altmember cref="P:System.Net.Sockets.Socket.Available" />
        <altmember cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMessageFromAsync">
      <MemberSignature Language="C#" Value="public bool ReceiveMessageFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReceiveMessageFromAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveMessageFromAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveMessageFromAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-2601">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2601">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-2602">지정된 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" />를 사용하여 원하는 바이트 수의 데이터를 데이터 버퍼의 특정 위치로 받는 비동기 작업을 시작하고 끝점 및 패킷 정보를 저장합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2602">Begins to asynchronously receive the specified number of bytes of data into the specified location in the data buffer, using the specified <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" />, and stores the endpoint and packet information.</span></span></summary>
        <returns><span data-ttu-id="90a67-2603">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2603">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-2604">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2604">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-2605">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2605">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-2606">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2606">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2607"><xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> 메서드는 연결 없는 소켓에서 메시지 데이터를 수신 하는 데 주로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2607">The <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method is used primarily to receive message data on a connectionless socket.</span></span> <span data-ttu-id="90a67-2608">소켓의 로컬 주소를 알 수 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2608">The socket's local address must be known.</span></span> <span data-ttu-id="90a67-2609">이 메서드 데이터 그램 및 원시 소켓 에서만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2609">This method can only be used with datagram and raw sockets.</span></span> <span data-ttu-id="90a67-2610">소켓에서 소켓 유형을으로 설정 하 여 초기화 해야 <xref:System.Net.Sockets.SocketType.Dgram> 또는 <xref:System.Net.Sockets.SocketType.Raw> 이 메서드를 호출 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="90a67-2610">The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType.Dgram> or <xref:System.Net.Sockets.SocketType.Raw> before calling this method.</span></span> <span data-ttu-id="90a67-2611">소켓을 사용 하 여 생성할 때 이렇게 <xref:System.Net.Sockets.Socket.%23ctor%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2611">This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2612">호출자에 게 설정 해야 합니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> 속성을는 <xref:System.Net.IPEndPoint> 있는 데이터를 받는 원격 호스트의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2612">The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.</span></span>  
  
 <span data-ttu-id="90a67-2613">다음과 같은 속성 및 이벤트에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 성공적으로이 메서드를 호출 하는 데 필요한 개체:</span><span class="sxs-lookup"><span data-stu-id="90a67-2613">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="90a67-2614">호출자에 게 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> 속성을 호출 하기 전에 모든 사용자 상태 개체는 <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> 메서드 정보를 콜백 메서드에서 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2614">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="90a67-2615">콜백 단일 개체 보다 더 많은 정보를 필요로 한다면 구성원으로 다른 필요한 상태 정보를 저장할 작은 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2615">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="90a67-2616">메시지 지향 소켓에 대 한 들어오는 메시지가 총 크기는 버퍼의 최대 버퍼에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2616">For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer.</span></span> <span data-ttu-id="90a67-2617"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 및 <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> 속성 버퍼에 데이터를 배치할 위치와 데이터의 양을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2617">The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> properties determine where in the buffer the data is placed and the amount of data.</span></span>  
  
 <span data-ttu-id="90a67-2618"><xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> 메서드를 자동으로 설정 된 <xref:System.Net.Sockets.SocketOptionName.PacketInformation> 소켓 옵션을 `true` 처음에 대해 호출 됩니다는 주어진 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2618">The <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method automatically sets the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-2619">그러나는 <xref:System.Net.Sockets.IPPacketInformation> 개체 소켓 옵션을 설정한 후에 로컬 컴퓨터에 도착 하 모드 해제 패킷에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2619">However, the <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set.</span></span> <span data-ttu-id="90a67-2620">소켓에서 소켓 로컬 끝점에 바인딩되어 있을 때 간에 패킷을 전송 된 경우 (의해 명시적으로 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드 중 하나에 의해 암시적으로 또는 <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, 또는 <xref:System.Net.Sockets.Socket.SendToAsync%2A> 메서드)에 대 한 첫 번째 호출은 <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A>메서드를 호출 <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> 메서드 잘못 생성 <xref:System.Net.Sockets.IPPacketInformation> 이러한 패킷에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2620">If a socket is sent packets between when the socket is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and the first call to the <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method, calls to <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A> method will result in invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.</span></span>  
  
 <span data-ttu-id="90a67-2621">되도록 모든 <xref:System.Net.Sockets.IPPacketInformation> 개체는 응용 프로그램 설정 해야 합니다는 <xref:System.Net.Sockets.SocketOptionName.PacketInformation> 소켓 옵션을`true` 사용 하 여 로컬 끝점에 연결 되기 전에 <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2621">To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName.PacketInformation> socket option to`true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.</span></span>  
  
 <span data-ttu-id="90a67-2622">응용 프로그램에서 결과 검사할 수 <xref:System.Net.Sockets.IPPacketInformation> 유니캐스트, 멀티 캐스트 또는 브로드캐스트 주소를 사용 하 여 데이터 그램을 보냈는지를 알고 있어야 하는 경우 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2622">An application can examine the resulting <xref:System.Net.Sockets.IPPacketInformation> objects if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90a67-2623"><see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2623">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-2624">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2624">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2625"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2625">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2626">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2626">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTimeout">
      <MemberSignature Language="C#" Value="public int ReceiveTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.ReceiveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-2627">동기 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 호출이 완료되어야 하는 제한 시간을 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2627">Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Receive" /> call will time out.</span></span></summary>
        <value><span data-ttu-id="90a67-2628">시간 제한 값(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2628">The time-out value, in milliseconds.</span></span> <span data-ttu-id="90a67-2629">기본값은 0으로, 시간 제한이 없음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2629">The default value is 0, which indicates an infinite time-out period.</span></span> <span data-ttu-id="90a67-2630">- 1을 지정해도 시간 제한이 없음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2630">Specifying -1 also indicates an infinite time-out period.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2631">이 옵션은 동기 <xref:System.Net.Sockets.Socket.Receive%2A> 만 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2631">This option applies to synchronous <xref:System.Net.Sockets.Socket.Receive%2A> calls only.</span></span> <span data-ttu-id="90a67-2632">제한 시간 초과 하는 경우는 <xref:System.Net.Sockets.Socket.Receive%2A> 메서드는 throw 된 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2632">If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2633">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2633">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2634">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2634">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2635"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2635">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-2636">set 작업에 지정된 값이 -1보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2636">The value specified for a set operation is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RemoteEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint RemoteEndPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint RemoteEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.RemoteEndPoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RemoteEndPoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ RemoteEndPoint { System::Net::EndPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-2637">원격 끝점을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2637">Gets the remote endpoint.</span></span></summary>
        <value><span data-ttu-id="90a67-2638"><see cref="T:System.Net.EndPoint" />이 통신에 사용하는 <see cref="T:System.Net.Sockets.Socket" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2638">The <see cref="T:System.Net.EndPoint" /> with which the <see cref="T:System.Net.Sockets.Socket" /> is communicating.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2639">연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 속성 get는 <xref:System.Net.EndPoint> 원격 IP 주소와 포트 번호를 포함 하는 <xref:System.Net.Sockets.Socket> 연결 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2639">If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property gets the <xref:System.Net.EndPoint> that contains the remote IP address and port number to which the <xref:System.Net.Sockets.Socket> is connected.</span></span> <span data-ttu-id="90a67-2640">연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 기본 원격 IP 주소 및 포트 번호를 포함 된 <xref:System.Net.Sockets.Socket> 통신 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2640">If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> contains the default remote IP address and port number with which the <xref:System.Net.Sockets.Socket> will communicate.</span></span> <span data-ttu-id="90a67-2641">이 캐스팅 해야 <xref:System.Net.EndPoint> 에 <xref:System.Net.IPEndPoint> 정보를 검색 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2641">You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information.</span></span> <span data-ttu-id="90a67-2642">호출할 수 있습니다는 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> 를 검색할 원격 메서드 <xref:System.Net.IPAddress>, 및 <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> 원격 포트 번호를 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2642">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> method to retrieve the remote <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> method to retrieve the remote port number.</span></span>  
  
 <span data-ttu-id="90a67-2643"><xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 에 대 한 호출 후에 설정 됩니다 <xref:System.Net.Sockets.Socket.Accept%2A> 또는 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2643">The <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> is set after a call to either <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-2644">이전 버전에서는이 속성에 액세스 하려고 하면 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2644">If you try to access this property earlier, <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2645">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2645">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2646">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2646">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2647">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2647">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2648">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2648">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2649">다음 코드 예제에서는 검색 하 고 로컬과 원격 끝점을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2649">The following code example retrieves and displays the local and remote endpoints.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#4)]
 [!code-csharp[Socket_Socket_Options#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#4)]
 [!code-vb[Socket_Socket_Options#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2650">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2650">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2651"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2651">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public static void Select (System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, int microSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Select(class System.Collections.IList checkRead, class System.Collections.IList checkWrite, class System.Collections.IList checkError, int32 microSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Select (checkRead As IList, checkWrite As IList, checkError As IList, microSeconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Select(System::Collections::IList ^ checkRead, System::Collections::IList ^ checkWrite, System::Collections::IList ^ checkError, int microSeconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkRead" Type="System.Collections.IList" />
        <Parameter Name="checkWrite" Type="System.Collections.IList" />
        <Parameter Name="checkError" Type="System.Collections.IList" />
        <Parameter Name="microSeconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="checkRead"><span data-ttu-id="90a67-2652">가독성을 확인할 <see cref="T:System.Net.Sockets.Socket" /> 인스턴스의 <see cref="T:System.Collections.IList" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2652">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for readability.</span></span></param>
        <param name="checkWrite"><span data-ttu-id="90a67-2653">쓰기 가능성을 확인할 <see cref="T:System.Net.Sockets.Socket" /> 인스턴스의 <see cref="T:System.Collections.IList" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2653">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for writability.</span></span></param>
        <param name="checkError"><span data-ttu-id="90a67-2654">오류를 확인할 <see cref="T:System.Net.Sockets.Socket" /> 인스턴스의 <see cref="T:System.Collections.IList" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2654">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Net.Sockets.Socket" /> instances to check for errors.</span></span></param>
        <param name="microSeconds"><span data-ttu-id="90a67-2655">시간 제한 값(마이크로초)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2655">The time-out value, in microseconds.</span></span> <span data-ttu-id="90a67-2656">값 -1은 시간 제한이 없음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2656">A -1 value indicates an infinite time-out.</span></span></param>
        <summary><span data-ttu-id="90a67-2657">하나 이상의 소켓 상태를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2657">Determines the status of one or more sockets.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2658"><xref:System.Net.Sockets.Socket.Select%2A> 하나 이상의 상태를 결정 하는 정적 메서드입니다 <xref:System.Net.Sockets.Socket> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="90a67-2658"><xref:System.Net.Sockets.Socket.Select%2A> is a static method that determines the status of one or more <xref:System.Net.Sockets.Socket> instances.</span></span> <span data-ttu-id="90a67-2659">하나 이상의 소켓에 배치 해야는 <xref:System.Collections.IList> 사용 하기 전에 <xref:System.Net.Sockets.Socket.Select%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2659">You must place one or more sockets into an <xref:System.Collections.IList> before you can use the <xref:System.Net.Sockets.Socket.Select%2A> method.</span></span> <span data-ttu-id="90a67-2660">호출 하 여 가독성을 높이기 위해 확인할 <xref:System.Net.Sockets.Socket.Select%2A> 와 <xref:System.Collections.IList> 로 `checkRead` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2660">Check for readability by calling <xref:System.Net.Sockets.Socket.Select%2A> with the <xref:System.Collections.IList> as the `checkRead` parameter.</span></span> <span data-ttu-id="90a67-2661">쓰기 가능성에 대 한 소켓을 확인 하려면 사용 된 `checkWrite` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2661">To check your sockets for writability, use the `checkWrite` parameter.</span></span> <span data-ttu-id="90a67-2662">오류 조건을 검색을 사용 하 여 `checkError`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2662">For detecting error conditions, use `checkError`.</span></span> <span data-ttu-id="90a67-2663">호출한 후 <xref:System.Net.Sockets.Socket.Select%2A>, <xref:System.Collections.IList> 조건을 만족 하는 소켓으로 채워집니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2663">After calling <xref:System.Net.Sockets.Socket.Select%2A>, the <xref:System.Collections.IList> will be filled with only those sockets that satisfy the conditions.</span></span>  
  
 <span data-ttu-id="90a67-2664">수신 대기 상태에 있는 경우 가독성이 있음을 의미에 대 한 호출 <xref:System.Net.Sockets.Socket.Accept%2A> 차단 하지 않고 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2664">If you are in a listening state, readability means that a call to <xref:System.Net.Sockets.Socket.Accept%2A> will succeed without blocking.</span></span> <span data-ttu-id="90a67-2665">에 연결을 허용 이미 있는 경우 가독성이 데이터를 읽을 수 임을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2665">If you have already accepted the connection, readability means that data is available for reading.</span></span> <span data-ttu-id="90a67-2666">이러한 경우 모든 수신 작업을 차단 하지 않고 성공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2666">In these cases, all receive operations will succeed without blocking.</span></span> <span data-ttu-id="90a67-2667">가독성을 나타낼 수도 있는지 여부를 원격 <xref:System.Net.Sockets.Socket> 종료 경우에서;에서 연결에 대 한 호출 <xref:System.Net.Sockets.Socket.Receive%2A> 0 바이트가 반환을 즉시 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2667">Readability can also indicate whether the remote <xref:System.Net.Sockets.Socket> has shut down the connection; in that case a call to <xref:System.Net.Sockets.Socket.Receive%2A> will return immediately, with zero bytes returned.</span></span>  
  
 <span data-ttu-id="90a67-2668"><xref:System.Net.Sockets.Socket.Select%2A> 반환 될 때 관심 소켓 중 하나 이상 (의 소켓은 `checkRead`, `checkWrite`, 및 `checkError` 나열)는 지정 된 조건을 만족 또는 `microSeconds` 중 하나에 먼저, 매개 변수를 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2668"><xref:System.Net.Sockets.Socket.Select%2A> returns when at least one of the sockets of interest (the sockets in the `checkRead`, `checkWrite`, and `checkError` lists) meets its specified criteria, or the `microSeconds` parameter is exceeded, whichever comes first.</span></span> <span data-ttu-id="90a67-2669">설정 `microSeconds` 를-1 시간 제한이 없음을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2669">Setting `microSeconds` to -1 specifies an infinite time-out.</span></span>  
  
 <span data-ttu-id="90a67-2670">비블로킹 호출을 수행 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A>, 방식 성공적으로 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2670">If you make a nonblocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, writability means that you have connected successfully.</span></span> <span data-ttu-id="90a67-2671">설정 된 연결, 이미 있는 경우 쓰기 작업을 차단 하지 않고 성공할 모든 송신을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2671">If you already have a connection established, writability means that all send operations will succeed without blocking.</span></span>  
  
 <span data-ttu-id="90a67-2672">비동기 호출을 수행한 <xref:System.Net.Sockets.Socket.Connect%2A>, `checkerror` 성공적으로 연결 되어 있지 않은 소켓 매개 변수를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2672">If you have made a non-blocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, the `checkerror` parameter identifies sockets that have not connected successfully.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2673">사용 하 여 <xref:System.Net.Sockets.Socket.Poll%2A> 메서드는 단일 상태를 확인 하려는 경우 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2673">Use the <xref:System.Net.Sockets.Socket.Poll%2A> method if you only want to determine the status of a single <xref:System.Net.Sockets.Socket>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2674">이 메서드는 특정 유형의 네트워크 케이블이 같은 연결 문제를 검색할 수 없는 또는 원격 호스트 비정상적으로 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2674">This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully.</span></span> <span data-ttu-id="90a67-2675">이러한 종류의 오류를 검색 하는 데이터 전송 및 수신 하려고 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2675">You must attempt to send or receive data to detect these kinds of errors.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2676">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2676">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2677">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2677">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2678">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.Select%2A> 수신 소켓 연결 요청을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2678">The following code example uses <xref:System.Net.Sockets.Socket.Select%2A> to determine which listening sockets have a connection request.</span></span>  
  
 [!code-cpp[Socket_Select#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Select/CPP/source.cpp#1)]
 [!code-csharp[Socket_Select#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Select/CS/source.cs#1)]
 [!code-vb[Socket_Select#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Select/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90a67-2679"><paramref name="checkRead" /> 매개 변수가 <see langword="null" />이거나 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2679">The <paramref name="checkRead" /> parameter is <see langword="null" /> or empty.</span></span>  
  
 <span data-ttu-id="90a67-2680">및</span><span class="sxs-lookup"><span data-stu-id="90a67-2680">-and-</span></span>  
  
 <span data-ttu-id="90a67-2681"><paramref name="checkWrite" /> 매개 변수가 <see langword="null" />이거나 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2681">The <paramref name="checkWrite" /> parameter is <see langword="null" /> or empty</span></span>  
  
 <span data-ttu-id="90a67-2682">및</span><span class="sxs-lookup"><span data-stu-id="90a67-2682">-and-</span></span>  
  
 <span data-ttu-id="90a67-2683"><paramref name="checkError" /> 매개 변수가 <see langword="null" />이거나 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2683">The <paramref name="checkError" /> parameter is <see langword="null" /> or empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2684">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2684">An error occurred when attempting to access the socket.</span></span></exception>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Net.Sockets.Socket.Accept" />
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-2685">연결된 <see cref="T:System.Net.Sockets.Socket" />에 데이터를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2685">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffer As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2686">전송할 데이터를 포함하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2686">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <summary><span data-ttu-id="90a67-2687">연결된 <see cref="T:System.Net.Sockets.Socket" />에 데이터를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2687">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2688"><see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2688">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2689"><xref:System.Net.Sockets.Socket.Send%2A> 에 지정 된 원격 호스트에 데이터를 동기식으로 전송 된 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드와 반환 성공적으로 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2689"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="90a67-2690"><xref:System.Net.Sockets.Socket.Send%2A> 연결 지향 및 연결 없는 프로토콜에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2690"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="90a67-2691">이 오버 로드를 보내려고 할 데이터를 포함 하는 버퍼에 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2691">This overload requires a buffer that contains the data you want to send.</span></span> <span data-ttu-id="90a67-2692"><xref:System.Net.Sockets.SocketFlags> 기본값 0으로 버퍼 오프셋을 0으로 버퍼의 크기를 보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2692">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.</span></span>  
  
 <span data-ttu-id="90a67-2693">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 이 메서드를 호출 하기 전에 또는 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2693">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2694">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2694">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-2695">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2695">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-2696">사용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드, ´ ë ç 호출 <xref:System.Net.Sockets.Socket.Connect%2A> 하기 전에 항상 <xref:System.Net.Sockets.Socket.Send%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2696">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="90a67-2697">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2697">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-2698">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.Send%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2698">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2699">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Send%2A> 를 사용 하 여 제한 시간을 설정 하지 않으면 모든 버퍼의 바이트를 보낼 때까지 차단 됩니다 <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2699">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2700">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Send%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2700">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2701">비차단 모드에서 <xref:System.Net.Sockets.Socket.Send%2A> 버퍼의 바이트 수보다 적은 데이터를 보내는 경우에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2701">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="90a67-2702">응용 프로그램의 보낸 바이트 수를 추적 하 고 응용 프로그램 버퍼의 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2702">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="90a67-2703">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2703">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-2704">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2704">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-2705">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.Send%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2705">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2706">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2706">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2707">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2707">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2708">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2708">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-2709">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2709">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2710">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2710">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2711">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2711">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2712">다음 코드 예제에서 연결 된 데이터를 보내는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2712">The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#1)]
 [!code-csharp[Socket_Sync_Send_Receive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#1)]
 [!code-vb[Socket_Sync_Send_Receive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2713"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2713"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2714">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2714">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2715"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2715">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffers As IList(Of ArraySegment(Of Byte))) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-2716">보낼 데이터가 들어 있는 <see cref="T:System.ArraySegment`1" /> 형식의 <see cref="T:System.Byte" /> 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2716">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <summary><span data-ttu-id="90a67-2717">목록에 있는 버퍼 집합을 연결된 <see cref="T:System.Net.Sockets.Socket" />으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2717">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2718"><see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2718">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2719"><xref:System.Net.Sockets.Socket.Send%2A> 연결 지향 및 연결 없는 프로토콜에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2719"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="90a67-2720">이 오버 로드를 보내려고 할 데이터가 포함 된 하나 이상의 버퍼를 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2720">This overload requires at least one buffer that contains the data you want to send.</span></span>  
  
 <span data-ttu-id="90a67-2721">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 이 메서드를 호출 하기 전에 또는 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2721">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2722">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2722">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-2723">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2723">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-2724">사용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드, ´ ë ç 호출 <xref:System.Net.Sockets.Socket.Connect%2A> 하기 전에 항상 <xref:System.Net.Sockets.Socket.Send%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2724">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="90a67-2725">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2725">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-2726">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.Send%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2726">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2727">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Send%2A> 를 사용 하 여 제한 시간을 설정 하지 않으면 모든 버퍼의 바이트를 보낼 때까지 차단 됩니다 <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2727">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2728">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Send%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2728">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2729">비차단 모드에서 <xref:System.Net.Sockets.Socket.Send%2A> 버퍼의 바이트 수보다 적은 데이터를 보내는 경우에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2729">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="90a67-2730">응용 프로그램의 보낸 바이트 수를 추적 하 고 응용 프로그램 버퍼의 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2730">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="90a67-2731">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2731">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-2732">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2732">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-2733">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.Send%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2733">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2734">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2734">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2735">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2735">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2736">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2736">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-2737">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2737">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2738">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2738">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2739">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2739">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2740"><paramref name="buffers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2740"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-2741"><paramref name="buffers" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2741"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2742">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2742">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-2743">아래의 설명 부분을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-2743">See remarks section below.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2744"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2744">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (buffer As ReadOnlySpan(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2745">전송할 데이터를 포함하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2745">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2746"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2746">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-2747">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 데이터를 연결된 <see cref="T:System.Net.Sockets.SocketFlags" />에 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2747">Sends data to a connected <see cref="T:System.Net.Sockets.Socket" /> using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2748"><see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2748">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2749"><xref:System.Net.Sockets.Socket.Send%2A> 에 설정 된 원격 호스트에 데이터를 동기식으로 전송 된 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드와 성공적으로 보낸 바이트 수는 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2749"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="90a67-2750"><xref:System.Net.Sockets.Socket.Send%2A> 연결 지향 및 연결 없는 프로토콜에 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2750">The <xref:System.Net.Sockets.Socket.Send%2A> method can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="90a67-2751">이 오버 로드는 버퍼를 보내려고 할 데이터가 포함 된 및의 비트 조합 필요 <xref:System.Net.Sockets.SocketFlags>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2751">This overload requires a buffer that contains the data you want to send and a bitwise combination of <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="90a67-2752">버퍼 오프셋을 0으로 버퍼의 크기를 보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2752">The buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.</span></span> <span data-ttu-id="90a67-2753">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수 값, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2753">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter value, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-2754">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 이 메서드를 호출 하기 전에 또는 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2754">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2755">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2755">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-2756">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2756">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-2757">사용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드를 호출 해야 할 됩니다 있습니다는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출할 때마다 하기 전에 <xref:System.Net.Sockets.Socket.Send%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2757">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="90a67-2758">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2758">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-2759">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.Send%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2759">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2760">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Send%2A> 를 사용 하 여 제한 시간을 설정 하지 않으면 모든 버퍼의 바이트를 보낼 때까지 차단 됩니다 <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2760">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2761">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Send%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2761">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2762">비차단 모드에서 <xref:System.Net.Sockets.Socket.Send%2A> 버퍼의 바이트 수보다 적은 데이터를 보내는 경우에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2762">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="90a67-2763">응용 프로그램의 보낸 바이트 수를 추적 하 고 요청 된 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2763">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="90a67-2764">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2764">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-2765">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2765">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-2766">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.Send%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2766">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2767">버퍼의 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2767">You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-2768">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2768">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2769">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2769">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2770">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2770">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2771">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2771">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-2772">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2772">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2773">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2773">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2774">자세한 내용은 참조[.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2774">For more information, see[Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2775">다음 코드 예제에서 연결 된 데이터를 보내는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2775">The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#2)]
 [!code-csharp[Socket_Sync_Send_Receive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#2)]
 [!code-vb[Socket_Sync_Send_Receive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2776"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2776"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2777">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2777">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2778"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2778">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-2779">보낼 데이터가 들어 있는 <see cref="T:System.ArraySegment`1" /> 형식의 <see cref="T:System.Byte" /> 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2779">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2780"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2780">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-2781">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 목록에 있는 버퍼 집합을 연결된 <see cref="T:System.Net.Sockets.SocketFlags" />으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2781">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2782"><see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2782">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2783">이 오버 로드를 보내려고 할 데이터가 포함 된 하나 이상의 버퍼를 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2783">This overload requires at least one buffer that contains the data you want to send.</span></span> <span data-ttu-id="90a67-2784"><xref:System.Net.Sockets.SocketFlags> 값의 기본값은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2784">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span> <span data-ttu-id="90a67-2785">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketFlags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2785">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketFlags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-2786">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 이 메서드를 호출 하기 전에 또는 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2786">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2787">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2787">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-2788">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2788">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-2789">사용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드, ´ ë ç 호출 <xref:System.Net.Sockets.Socket.Connect%2A> 하기 전에 항상 <xref:System.Net.Sockets.Socket.Send%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2789">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="90a67-2790">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2790">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-2791">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.Send%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2791">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2792">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Send%2A> 를 사용 하 여 제한 시간을 설정 하지 않으면 모든 버퍼의 바이트를 보낼 때까지 차단 됩니다 <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2792">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2793">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Send%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2793">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2794">비동기 모드에서 <xref:System.Net.Sockets.Socket.Send%2A> 버퍼의 바이트 수보다 적은 데이터를 보내는 경우에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2794">In non-blocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="90a67-2795">응용 프로그램의 보낸 바이트 수를 추적 하 고 응용 프로그램 버퍼의 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2795">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="90a67-2796">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2796">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-2797">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2797">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-2798">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.Send%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2798">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2799">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2799">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2800">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2800">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2801">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2801">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-2802">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2802">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2803">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2803">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2804">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2804">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2805"><paramref name="buffers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2805"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-2806"><paramref name="buffers" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2806"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2807">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2807">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2808"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2808">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2809">전송할 데이터를 포함하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2809">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-2810">보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2810">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2811"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2811">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-2812">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 원하는 바이트 수의 데이터를 연결된 <see cref="T:System.Net.Sockets.SocketFlags" />에 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2812">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2813"><see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2813">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2814"><xref:System.Net.Sockets.Socket.Send%2A> 에 설정 된 원격 호스트에 데이터를 동기식으로 전송 된 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드와 성공적으로 보낸 바이트 수는 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2814"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="90a67-2815"><xref:System.Net.Sockets.Socket.Send%2A> 연결 지향 및 연결 없는 프로토콜에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2815"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="90a67-2816">이 오버 로드 하 고, 보낼 바이트 수의 비트 조합을 전송 하려는 경우 데이터를 포함 하는 버퍼에 필요 <xref:System.Net.Sockets.SocketFlags>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2816">This overload requires a buffer that contains the data you want to send, the number of bytes you want to send, and a bitwise combination of any <xref:System.Net.Sockets.SocketFlags>.</span></span> <span data-ttu-id="90a67-2817">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2817">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-2818">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 이 메서드를 호출 하기 전에 또는 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2818">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2819">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2819">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-2820">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2820">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-2821">사용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드를 호출 해야 할 됩니다 있습니다는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출할 때마다 하기 전에 <xref:System.Net.Sockets.Socket.Send%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2821">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="90a67-2822">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2822">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-2823">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.Send%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2823">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2824">연결 지향 프로토콜로 <xref:System.Net.Sockets.Socket.Send%2A> 를 사용 하 여 제한 시간을 설정 하지 않으면 바이트 수가 요청 된 전송 될 때까지 차단 됩니다 <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2824">With a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2825">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Send%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2825">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2826">비차단 모드에서 <xref:System.Net.Sockets.Socket.Send%2A> 요청한 바이트의 수보다 적은 데이터를 보내는 경우에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2826">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="90a67-2827">응용 프로그램의 보낸 바이트 수를 추적 하 고 요청 된 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2827">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="90a67-2828">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2828">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-2829">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2829">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-2830">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.Send%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2830">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2831">크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2831">You must ensure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-2832">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2832">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2833">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2833">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2834">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2834">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2835">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2835">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-2836">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2836">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2837">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2837">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2838">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2838">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2839">다음 코드 예제에서는 버퍼에 있는 데이터를 보내고 지정 <xref:System.Net.Sockets.SocketFlags.None> 에 대 한 <xref:System.Net.Sockets.SocketFlags>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2839">The following code example sends the data found in buffer, and specifies <xref:System.Net.Sockets.SocketFlags.None> for <xref:System.Net.Sockets.SocketFlags>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#3)]
 [!code-csharp[Socket_Sync_Send_Receive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#3)]
 [!code-vb[Socket_Sync_Send_Receive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2840"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2840"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-2841"><paramref name="size" />가 0보다 작거나 버퍼 크기를 초과하는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2841"><paramref name="size" /> is less than 0 or exceeds the size of the buffer.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-2842"><paramref name="socketFlags" />가 값의 유효한 조합이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2842"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
 <span data-ttu-id="90a67-2843">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2843">-or-</span></span>  
  
 <span data-ttu-id="90a67-2844">소켓에 액세스하는 동안 운영 체제 오류가 발생한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2844">An operating system error occurs while accessing the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2845"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2845">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; buffers, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(System::Collections::Generic::IList&lt;ArraySegment&lt;System::Byte&gt;&gt; ^ buffers, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffers"><span data-ttu-id="90a67-2846">보낼 데이터가 들어 있는 <see cref="T:System.ArraySegment`1" /> 형식의 <see cref="T:System.Byte" /> 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2846">A list of <see cref="T:System.ArraySegment`1" />s of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2847"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2847">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="90a67-2848">소켓 오류를 저장하는 <see cref="T:System.Net.Sockets.SocketError" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2848">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="90a67-2849">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 목록에 있는 버퍼 집합을 연결된 <see cref="T:System.Net.Sockets.SocketFlags" />으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2849">Sends the set of buffers in the list to a connected <see cref="T:System.Net.Sockets.Socket" />, using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2850"><see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2850">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2851">이 오버 로드를 보내려고 할 데이터가 포함 된 하나 이상의 버퍼를 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2851">This overload requires at least one buffer that contains the data you want to send.</span></span> <span data-ttu-id="90a67-2852"><xref:System.Net.Sockets.SocketFlags> 값의 기본값은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2852">The <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span> <span data-ttu-id="90a67-2853">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketFlags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2853">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketFlags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-2854">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 이 메서드를 호출 하기 전에 또는 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2854">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2855">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2855">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-2856">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2856">If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-2857">사용 하지 않는 경우는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드, ´ ë ç 호출 <xref:System.Net.Sockets.Socket.Connect%2A> 하기 전에 항상 <xref:System.Net.Sockets.Socket.Send%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2857">If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="90a67-2858">사용할 수 있습니다 <xref:System.Net.Sockets.Socket.SendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2858">You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-2859">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.Send%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2859">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2860">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Send%2A> 를 사용 하 여 제한 시간을 설정 하지 않으면 모든 버퍼의 바이트를 보낼 때까지 차단 됩니다 <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2860">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2861">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Send%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2861">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2862">비동기 모드에서 <xref:System.Net.Sockets.Socket.Send%2A> 버퍼의 바이트 수보다 적은 데이터를 보내는 경우에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2862">In non-blocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer.</span></span> <span data-ttu-id="90a67-2863">응용 프로그램의 보낸 바이트 수를 추적 하 고 응용 프로그램 버퍼의 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2863">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer.</span></span> <span data-ttu-id="90a67-2864">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2864">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-2865">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2865">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-2866">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.Send%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2866">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2867">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2867">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2868">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2868">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2869">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2869">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-2870">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2870">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2871">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2871">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2872">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2872">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2873"><paramref name="buffers" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2873"><paramref name="buffers" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="90a67-2874"><paramref name="buffers" />가 비어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2874"><paramref name="buffers" /> is empty.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2875">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2875">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2876"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2876">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (ReadOnlySpan&lt;byte&gt; buffer, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(ReadOnlySpan&lt;System::Byte&gt; buffer, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="socketFlags">To be added.</param>
        <param name="errorCode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2877">전송할 데이터를 포함하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2877">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-2878">데이터 보내기를 시작할 데이터 버퍼의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2878">The position in the data buffer at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-2879">보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2879">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2880"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2880">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-2881">지정된 오프셋에서 시작하고 지정된 <see cref="T:System.Net.Sockets.SocketFlags" />를 사용하여 지정된 바이트 수의 데이터를 연결된 <see cref="T:System.Net.Sockets.Socket" />으로 전송합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2881">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-2882"><see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2882">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2883"><xref:System.Net.Sockets.Socket.Send%2A> 에 지정 된 원격 호스트에 데이터를 동기식으로 전송 된 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드와 반환 성공적으로 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2883"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="90a67-2884"><xref:System.Net.Sockets.Socket.Send%2A> 연결 지향 및 연결 없는 프로토콜에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2884"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="90a67-2885">이 오버 로드를 지정 하는 경우에 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2885">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-2886">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 이 메서드를 호출 하기 전에 또는 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2886">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2887">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2887">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-2888">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2888">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="90a67-2889">사용 하지 않는 경우 <xref:System.Net.Sockets.Socket.SendTo%2A>를 호출 해야 합니다 <xref:System.Net.Sockets.Socket.Connect%2A> 하기 전에 항상 <xref:System.Net.Sockets.Socket.Send%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2889">If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="90a67-2890">사용 하 여 <xref:System.Net.Sockets.Socket.SendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2890">It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-2891">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.Send%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2891">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2892">또한 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2892">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-2893">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2893">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-2894">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Send%2A> 를 사용 하 여 제한 시간을 설정 하지 않으면 바이트 수가 요청 된 전송 될 때까지 차단 됩니다 <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2894">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2895">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Send%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2895">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2896">비차단 모드에서 <xref:System.Net.Sockets.Socket.Send%2A> 요청한 바이트의 수보다 적은 데이터를 보내는 경우에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2896">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="90a67-2897">응용 프로그램의 보낸 바이트 수를 추적 하 고 요청 된 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2897">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="90a67-2898">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2898">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-2899">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2899">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-2900">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.Send%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2900">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2901">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2901">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2902">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2902">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2903">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2903">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-2904">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2904">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2905">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2905">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2906">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2906">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2907">다음 코드 예제에서는 데이터 버퍼, 오프셋, 크기를 지정 하 고 <xref:System.Net.Sockets.SocketFlags> 을 연결 된 데이터를 보내기 위해 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2907">The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2908"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2908"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-2909"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2909"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2910">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2910">-or-</span></span>  
  
 <span data-ttu-id="90a67-2911"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2911"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-2912">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2912">-or-</span></span>  
  
 <span data-ttu-id="90a67-2913"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2913"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2914">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2914">-or-</span></span>  
  
 <span data-ttu-id="90a67-2915"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2915"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-2916"><paramref name="socketFlags" />가 값의 유효한 조합이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2916"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
 <span data-ttu-id="90a67-2917">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2917">-or-</span></span>  
  
 <span data-ttu-id="90a67-2918"><see cref="T:System.Net.Sockets.Socket" />에 액세스하는 동안 운영 체제 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2918">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2919"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2919">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, [out] valuetype System.Net.Sockets.SocketError&amp; errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, [Runtime::InteropServices::Out] System::Net::Sockets::SocketError % errorCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="errorCode" Type="System.Net.Sockets.SocketError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-2920">전송할 데이터를 포함하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2920">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-2921">데이터 보내기를 시작할 데이터 버퍼의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2921">The position in the data buffer at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-2922">보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2922">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-2923"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2923">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="errorCode"><span data-ttu-id="90a67-2924">소켓 오류를 저장하는 <see cref="T:System.Net.Sockets.SocketError" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2924">A <see cref="T:System.Net.Sockets.SocketError" /> object that stores the socket error.</span></span></param>
        <summary><span data-ttu-id="90a67-2925">지정된 <see cref="T:System.Net.Sockets.Socket" />를 사용하여 지정된 오프셋부터 원하는 바이트 수의 데이터를 연결된 <see cref="T:System.Net.Sockets.SocketFlags" />에 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2925">Sends the specified number of bytes of data to a connected <see cref="T:System.Net.Sockets.Socket" />, starting at the specified offset, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" /></span></span></summary>
        <returns><span data-ttu-id="90a67-2926"><see cref="T:System.Net.Sockets.Socket" />에 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2926">The number of bytes sent to the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2927"><xref:System.Net.Sockets.Socket.Send%2A> 에 지정 된 원격 호스트에 데이터를 동기식으로 전송 된 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드와 반환 성공적으로 보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2927"><xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent.</span></span> <span data-ttu-id="90a67-2928"><xref:System.Net.Sockets.Socket.Send%2A> 연결 지향 및 연결 없는 프로토콜에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2928"><xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.</span></span>  
  
 <span data-ttu-id="90a67-2929">이 오버 로드를 지정 하는 경우에 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2929">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-2930">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 이 메서드를 호출 하기 전에 또는 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2930">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2931">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2931">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-2932">연결 없는 프로토콜 및 계획 데이터를 보내는 여러 명의 서로 다른 호스트를 사용할 경우 사용 해야 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2932">If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="90a67-2933">사용 하지 않는 경우 <xref:System.Net.Sockets.Socket.SendTo%2A>를 호출 해야 합니다 <xref:System.Net.Sockets.Socket.Connect%2A> 하기 전에 항상 <xref:System.Net.Sockets.Socket.Send%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2933">If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>.</span></span> <span data-ttu-id="90a67-2934">사용 하 여 <xref:System.Net.Sockets.Socket.SendTo%2A> 기본 원격 호스트를 설정한 후에 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2934">It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span> <span data-ttu-id="90a67-2935">호출 하기 전에 기본 원격 호스트를 변경할 수도 있습니다 <xref:System.Net.Sockets.Socket.Send%2A> 다른 호출 하 여 <xref:System.Net.Sockets.Socket.Connect%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2935">You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2936">또한 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2936">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-2937">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.Send%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2937">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-2938">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Send%2A> 를 사용 하 여 제한 시간을 설정 하지 않으면 바이트 수가 요청 된 전송 될 때까지 차단 됩니다 <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2938">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-2939">시간 제한 값이 초과 되는 <xref:System.Net.Sockets.Socket.Send%2A> 되는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2939">If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-2940">비차단 모드에서 <xref:System.Net.Sockets.Socket.Send%2A> 요청한 바이트의 수보다 적은 데이터를 보내는 경우에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2940">In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request.</span></span> <span data-ttu-id="90a67-2941">응용 프로그램의 보낸 바이트 수를 추적 하 고 요청 된 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2941">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="90a67-2942">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2942">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-2943">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2943">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-2944">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.Send%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2944">A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2945">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2945">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-2946">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2946">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2947">송신 성공적으로 완료 데이터가 성공적으로 전달 된 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2947">The successful completion of a send does not indicate that the data was successfully delivered.</span></span> <span data-ttu-id="90a67-2948">버퍼 공간이 전송 될 데이터를 저장할 전송 시스템 내에서 사용할 수 없으면 비차단 모드에서 소켓 배치 된 경우 전송이 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2948">If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-2949">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2949">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-2950">자세한 내용은 참조[.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2950">For more information, see[Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2951">다음 코드 예제에서는 데이터 버퍼, 오프셋, 크기를 지정 하 고 <xref:System.Net.Sockets.SocketFlags> 을 연결 된 데이터를 보내기 위해 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2951">The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#4)]
 [!code-csharp[Socket_Sync_Send_Receive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#4)]
 [!code-vb[Socket_Sync_Send_Receive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-2952"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2952"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-2953"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2953"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2954">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2954">-or-</span></span>  
  
 <span data-ttu-id="90a67-2955"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2955"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-2956">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2956">-or-</span></span>  
  
 <span data-ttu-id="90a67-2957"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2957"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-2958">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2958">-or-</span></span>  
  
 <span data-ttu-id="90a67-2959"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2959"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-2960"><paramref name="socketFlags" />가 값의 유효한 조합이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2960"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
 <span data-ttu-id="90a67-2961">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-2961">-or-</span></span>  
  
 <span data-ttu-id="90a67-2962"><see cref="T:System.Net.Sockets.Socket" />에 액세스하는 동안 운영 체제 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2962">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2963"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2963">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public bool SendAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-2964">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2964">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-2965">데이터를 연결된 <see cref="T:System.Net.Sockets.Socket" /> 개체에 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2965">Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
        <returns><span data-ttu-id="90a67-2966">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2966">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-2967">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2967">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-2968">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2968">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-2969">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2969">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2970"><xref:System.Net.Sockets.Socket.SendAsync%2A> 연결 지향 소켓에서 하나 이상의 버퍼에서 보내는 데이터를 쓰는 메서드가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2970">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method is used to write outgoing data from one or more buffers on a connection-oriented socket.</span></span> <span data-ttu-id="90a67-2971">그러나이 방법을 사용할 수도 있습니다, 원격 호스트 연결 작업에 지정한 연결 없는 소켓에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2971">This method can also be used, however, on connectionless sockets that have specified a remote host on a connect operation.</span></span>  
  
 <span data-ttu-id="90a67-2972"><xref:System.Net.Sockets.Socket.SendAsync%2A> 에 설정 된 원격 호스트에 비동기 발신 작업을 시작 하는 메서드는 <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-2972">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-2973">다음과 같은 속성 및 이벤트에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 성공적으로이 메서드를 호출 하는 데 필요한 개체:</span><span class="sxs-lookup"><span data-stu-id="90a67-2973">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <span data-ttu-id="90a67-2974"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 또는 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="90a67-2974"><xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=nameWithType></span></span>  
  
-   <span data-ttu-id="90a67-2975"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> 경우 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 설정</span><span class="sxs-lookup"><span data-stu-id="90a67-2975"><xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <span data-ttu-id="90a67-2976"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> 경우 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> 설정</span><span class="sxs-lookup"><span data-stu-id="90a67-2976"><xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType> is set</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="90a67-2977">호출자에 게 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> 속성을 호출 하기 전에 모든 사용자 상태 개체는 <xref:System.Net.Sockets.Socket.SendAsync%2A> 메서드 정보를 콜백 메서드에서 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2977">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="90a67-2978">콜백 단일 개체 보다 더 많은 정보를 필요로 한다면 구성원으로 다른 필요한 상태 정보를 저장할 작은 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2978">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="90a67-2979"><xref:System.Net.Sockets.Socket.SendAsync%2A> 메서드가 먼저 호출 하지 않으면 예외가 throw 됩니다 <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A> <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2979">The <xref:System.Net.Sockets.Socket.SendAsync%2A> method will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A><xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A>.</span></span>  
  
 <span data-ttu-id="90a67-2980">호출 된 <xref:System.Net.Sockets.Socket.SendAsync%2A> 메서드는 별도 실행 스레드 내에서 데이터를 보내는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2980">Calling the <xref:System.Net.Sockets.Socket.SendAsync%2A> method gives you the ability to send data within a separate execution thread.</span></span>  
  
 <span data-ttu-id="90a67-2981">메시지 지향 소켓에 대 한 기본 Windows 소켓 서비스 공급자의 최대 메시지 크기를 초과 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2981">For message-oriented sockets, do not exceed the maximum message size of the underlying Windows sockets service provider.</span></span> <span data-ttu-id="90a67-2982">데이터가 전송 되는 데이터가 너무 길어 기본 서비스 공급자를 원자적으로 통과 이면 및 <xref:System.Net.Sockets.Socket.SendAsync%2A> 메서드가 throw 한 <xref:System.Net.Sockets.SocketException> 와 <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> 네이티브 WSAEMSGSIZE Winsock 오류 코드 (10040)로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2982">If the data is too long to pass atomically through the underlying service provider, no data is transmitted and the <xref:System.Net.Sockets.Socket.SendAsync%2A> method throws a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=nameWithType> set to the native Winsock WSAEMSGSIZE error code (10040).</span></span>  
  
 <span data-ttu-id="90a67-2983">성공적으로 완료는 <xref:System.Net.Sockets.Socket.SendAsync%2A> 데이터가 성공적으로 배달 방법을 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2983">Note that the successful completion of the <xref:System.Net.Sockets.Socket.SendAsync%2A> method does not indicate that the data was successfully delivered.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-2984"><paramref name="e" /> 매개 변수의 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 또는 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 속성이 올바른 버퍼를 참조하지 않는 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2984">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <paramref name="e" /> parameter must reference valid buffers.</span></span> <span data-ttu-id="90a67-2985">이러한 속성 중 하나를 설정할 수 있지만 두 속성을 동시에 설정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2985">One or the other of these properties may be set, but not both at the same time.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-2986"><paramref name="e" /> 매개 변수에 지정된 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체를 사용하여 소켓 작업이 이미 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2986">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-2987">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-2987">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2988"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2988">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2989"><see cref="T:System.Net.Sockets.Socket" />이 아직 연결되지 않았거나 <see cref="M:System.Net.Sockets.Socket.Accept" />, <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 또는 <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" /> 메서드를 통해 소켓을 가져오지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2989">The <see cref="T:System.Net.Sockets.Socket" /> is not yet connected or was not obtained via an <see cref="M:System.Net.Sockets.Socket.Accept" />, <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />,or <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" />, method.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-2990"><see cref="T:System.Net.Sockets.Socket" />의 송신 버퍼 크기를 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2990">Gets or sets a value that specifies the size of the send buffer of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="90a67-2991">송신 버퍼의 크기(바이트)가 들어 있는 <see cref="T:System.Int32" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2991">An <see cref="T:System.Int32" /> that contains the size, in bytes, of the send buffer.</span></span> <span data-ttu-id="90a67-2992">기본값은 8192입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2992">The default is 8192.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-2993">더 큰 버퍼 크기는 연결 문제를 인식 하는 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2993">A larger buffer size might delay the recognition of connection difficulties.</span></span> <span data-ttu-id="90a67-2994">큰 파일을 전송 하는 경우 또는 높은 대역폭, 대기 시간이 긴 연결 (예: 위성 광대역 공급자입니다.)를 사용 하는 경우 버퍼 크기 증가 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2994">Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-2995">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.SendBufferSize%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2995">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.SendBufferSize%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-2996">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2996">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-2997"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2997">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-2998">set 작업에 지정된 값이 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-2998">The value specified for a set operation is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-2999">연결된 <see cref="T:System.Net.Sockets.Socket" />에 파일 및 선택적 데이터를 동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-2999">Sends a file and optional data synchronously to a connected <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendFile">
      <MemberSignature Language="C#" Value="public void SendFile (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFile(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendFile (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendFile(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="90a67-3000">전송할 파일의 경로 및 이름을 포함하는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3000">A <see cref="T:System.String" /> that contains the path and name of the file to be sent.</span></span> <span data-ttu-id="90a67-3001">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3001">This parameter can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="90a67-3002"><see cref="T:System.Net.Sockets.Socket" /> 전송 플래그를 사용하여 <paramref name="fileName" /> 파일을 연결된 <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 개체에 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3002">Sends the file <paramref name="fileName" /> to a connected <see cref="T:System.Net.Sockets.Socket" /> object with the <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> transmit flag.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3003">이 오버 로드 된 파일을 보낸 `fileName` 연결된 소켓을 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3003">This overload sends the file `fileName` to the connected socket.</span></span> <span data-ttu-id="90a67-3004">`flags` 매개 변수의 기본값은 <xref:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread> (0) 및 `preBuffer` 및 `postBuffer` 매개 변수의 기본값은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3004">The `flags` parameter defaults to <xref:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread> (0), and the `preBuffer` and `postBuffer` parameters default to `null`.</span></span> <span data-ttu-id="90a67-3005">경우 `fileName` 은 로컬 디렉터리에 식별 된 파일 이름으로, 그렇지 않으면 전체 경로 파일의 이름을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3005">If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="90a67-3006">와일드 카드 ("… \\\myfile.txt ") 및 UNC 공유 이름 ("\\\\\\\shared 디렉터리\\\myfile.txt ")는 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3006">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span> <span data-ttu-id="90a67-3007">파일이 없는 경우, 예외 <xref:System.IO.FileNotFoundException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3007">If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="90a67-3008">이 메서드는 사용 된 `TransmitFile` Windows 소켓 2 API에서 찾을 수 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3008">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="90a67-3009">에 대 한 자세한 내용은 `TransmitFile` 함수와 플래그 MSDN Library의 Windows 소켓 설명서를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-3009">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="90a67-3010"><xref:System.Net.Sockets.Socket.SendFile%2A> 에 지정 된 원격 호스트에 파일을 동기식으로 전송 된 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3010"><xref:System.Net.Sockets.Socket.SendFile%2A> synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-3011"><xref:System.Net.Sockets.Socket.SendFile%2A> 연결 지향 둘 다에 대 한 연결 없는 프로토콜에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3011"><xref:System.Net.Sockets.Socket.SendFile%2A> can be used for both connection-oriented and for connectionless protocols.</span></span>  
  
 <span data-ttu-id="90a67-3012">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 그렇지 않으면이 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendFile%2A> throw 한 <xref:System.Net.Sockets.SocketException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3012">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, otherwise <xref:System.Net.Sockets.Socket.SendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span> <span data-ttu-id="90a67-3013">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3013">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-3014">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.SendFile%2A> 파일 전송 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3014">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.SendFile%2A> blocks until the file is sent.</span></span> <span data-ttu-id="90a67-3015">비차단 모드에서 <xref:System.Net.Sockets.Socket.SendFile%2A> 전체 파일 ध 전에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3015">In nonblocking mode, <xref:System.Net.Sockets.Socket.SendFile%2A> may complete successfully before the entire file has been sent.</span></span> <span data-ttu-id="90a67-3016">보장이 없습니다 하는 보내는 데이터를 네트워크에 즉시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3016">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-3017">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3017">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-3018">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.SendFile%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3018">A successful completion of the <xref:System.Net.Sockets.Socket.SendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3019">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3019">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3020">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3020">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3021">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3021">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-3022">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3022">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3023">다음 코드 예제 및 소켓 연결 만들고 원격 호스트에 파일을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3023">The following code example creates and connects a socket and then sends a file to the remote host.</span></span> <span data-ttu-id="90a67-3024">"Test.txt" 파일은 로컬 컴퓨터의 루트 디렉터리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3024">The file "test.txt" is located in the root directory of the local machine.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#3)]
 [!code-csharp[NCLSocketEnhancements#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-3025">소켓이 원격 호스트에 연결되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3025">The socket is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3026"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3026">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-3027"><see cref="T:System.Net.Sockets.Socket" /> 개체가 차단 모드가 아니며 이 동기 호출을 수락할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3027">The <see cref="T:System.Net.Sockets.Socket" /> object is not in blocking mode and cannot accept this synchronous call.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="90a67-3028"><paramref name="fileName" /> 파일을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3028">The file <paramref name="fileName" /> was not found.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3029">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3029">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendFile">
      <MemberSignature Language="C#" Value="public void SendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendFile(string fileName, unsigned int8[] preBuffer, unsigned int8[] postBuffer, valuetype System.Net.Sockets.TransmitFileOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendFile (fileName As String, preBuffer As Byte(), postBuffer As Byte(), flags As TransmitFileOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendFile(System::String ^ fileName, cli::array &lt;System::Byte&gt; ^ preBuffer, cli::array &lt;System::Byte&gt; ^ postBuffer, System::Net::Sockets::TransmitFileOptions flags);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="preBuffer" Type="System.Byte[]" />
        <Parameter Name="postBuffer" Type="System.Byte[]" />
        <Parameter Name="flags" Type="System.Net.Sockets.TransmitFileOptions" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="90a67-3030">전송할 파일의 경로 및 이름을 포함하는 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3030">A <see cref="T:System.String" /> that contains the path and name of the file to be sent.</span></span> <span data-ttu-id="90a67-3031">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3031">This parameter can be <see langword="null" />.</span></span></param>
        <param name="preBuffer"><span data-ttu-id="90a67-3032">파일이 전송되기 전에 전송할 데이터를 포함하는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3032">A <see cref="T:System.Byte" /> array that contains data to be sent before the file is sent.</span></span> <span data-ttu-id="90a67-3033">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3033">This parameter can be <see langword="null" />.</span></span></param>
        <param name="postBuffer"><span data-ttu-id="90a67-3034">파일이 전송된 후에 전송할 데이터를 포함하는 <see cref="T:System.Byte" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3034">A <see cref="T:System.Byte" /> array that contains data to be sent after the file is sent.</span></span> <span data-ttu-id="90a67-3035">이 매개 변수는 <see langword="null" />일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3035">This parameter can be <see langword="null" />.</span></span></param>
        <param name="flags"><span data-ttu-id="90a67-3036">하나 이상의 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3036">One or more of <see cref="T:System.Net.Sockets.TransmitFileOptions" /> values.</span></span></param>
        <summary><span data-ttu-id="90a67-3037">지정된 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 값을 사용하여 연결된 <see cref="T:System.Net.Sockets.Socket" /> 개체에 파일 <paramref name="fileName" /> 및 데이터 버퍼를 전송합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3037">Sends the file <paramref name="fileName" /> and buffers of data to a connected <see cref="T:System.Net.Sockets.Socket" /> object using the specified <see cref="T:System.Net.Sockets.TransmitFileOptions" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3038">이 오버 로드의 비트 조합 보낼 파일의 이름과 필요 <xref:System.Net.Sockets.TransmitFileOptions> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3038">This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values.</span></span> <span data-ttu-id="90a67-3039">`preBuffer` 매개 변수에 파일 앞에 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3039">The `preBuffer` parameter contains any data you want to precede the file.</span></span> <span data-ttu-id="90a67-3040">`postBuffer` 파일을 따라 하려는 데이터가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3040">`postBuffer` contains data you want to follow the file.</span></span> <span data-ttu-id="90a67-3041">경우 `fileName` 은 현재 작업 디렉터리에 식별 된 파일 이름으로, 그렇지 않으면 전체 경로 파일의 이름을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3041">If `fileName` is in the current working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="90a67-3042">와일드 카드 ("… \\\myfile.txt ") 및 UNC 공유 이름 ("\\\\\\\shared 디렉터리\\\myfile.txt ")는 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3042">Wildcards ("..\\\myfile.txt") and UNC share names ("\\\\\\\shared directory\\\myfile.txt") are supported.</span></span>  
  
 <span data-ttu-id="90a67-3043">`flags` 매개 변수 창 소켓 서비스 공급자와 파일 전송에 대 한 추가 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3043">The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="90a67-3044">이 매개 변수를 사용 하는 방법에 대 한 자세한 내용은 참조 하십시오. <xref:System.Net.Sockets.TransmitFileOptions>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3044">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="90a67-3045">이 메서드는 사용 된 `TransmitFile` Windows 소켓 2 API에서 찾을 수 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3045">This method uses the `TransmitFile` function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="90a67-3046">에 대 한 자세한 내용은 `TransmitFile` 함수와 플래그 MSDN Library의 Windows 소켓 설명서를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="90a67-3046">For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="90a67-3047"><xref:System.Net.Sockets.Socket.SendFile%2A> 에 지정 된 원격 호스트에 파일을 동기식으로 전송 된 <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3047"><xref:System.Net.Sockets.Socket.SendFile%2A> synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-3048"><xref:System.Net.Sockets.Socket.SendFile%2A> 연결 지향 둘 다에 대 한 연결 없는 프로토콜에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3048"><xref:System.Net.Sockets.Socket.SendFile%2A> can be used for both connection-oriented and for connectionless protocols.</span></span>  
  
 <span data-ttu-id="90a67-3049">호출 해야 하는 연결 없는 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> ,이 메서드를 호출 하기 전에 그렇지 않으면 <xref:System.Net.Sockets.Socket.SendFile%2A> throw 한 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3049">If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method; otherwise <xref:System.Net.Sockets.Socket.SendFile%2A> throws a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-3050">사용 해야 하는 연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.Connect%2A> 를 원격 호스트 연결을 설정 하거나 사용 <xref:System.Net.Sockets.Socket.Accept%2A> 들어오는 연결을 수락 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3050">If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.</span></span>  
  
 <span data-ttu-id="90a67-3051">연결 지향 프로토콜을 사용 하는 경우 <xref:System.Net.Sockets.Socket.SendFile%2A> 전체 파일이 전송 될 때까지 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3051">If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.SendFile%2A> blocks until the entire file is sent.</span></span> <span data-ttu-id="90a67-3052">비차단 모드에서 <xref:System.Net.Sockets.Socket.SendFile%2A> 전체 파일 ध 전에 성공적으로 완료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3052">In nonblocking mode, <xref:System.Net.Sockets.Socket.SendFile%2A> may complete successfully before the entire file has been sent.</span></span> <span data-ttu-id="90a67-3053">보장이 없습니다 하는 보내는 데이터를 네트워크에 즉시 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3053">There is no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-3054">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3054">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-3055">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.SendFile%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3055">A successful completion of the <xref:System.Net.Sockets.Socket.SendFile%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3056">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3056">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3057">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3057">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3058">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3058">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-3059">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3059">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3060">다음 코드 예제에서는 만들고 소켓을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3060">The following code example creates and connects a socket.</span></span> <span data-ttu-id="90a67-3061">"Test.txt" 파일은 로컬 컴퓨터의 루트 디렉터리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3061">The file "test.txt" is located in the root directory of the local machine.</span></span> <span data-ttu-id="90a67-3062">이 예제에서는 버퍼 및 데이터의 만든 하 파일과 함께 원격 호스트에 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3062">In this example, we create a prebuffer and postbuffer of data and send them to the remote host with the file.</span></span> <span data-ttu-id="90a67-3063">기본 <xref:System.Net.Sockets.TransmitFileOptions> 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3063">The default <xref:System.Net.Sockets.TransmitFileOptions> are used.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#4)]
 [!code-csharp[NCLSocketEnhancements#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-3064">운영 체제가 Windows NT 이상이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3064">The operating system is not Windows NT or later.</span></span>  
  
 <span data-ttu-id="90a67-3065">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="90a67-3065">\- or -</span></span>  
  
 <span data-ttu-id="90a67-3066">소켓이 원격 호스트에 연결되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3066">The socket is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3067"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3067">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-3068"><see cref="T:System.Net.Sockets.Socket" /> 개체가 차단 모드가 아니며 이 동기 호출을 수락할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3068">The <see cref="T:System.Net.Sockets.Socket" /> object is not in blocking mode and cannot accept this synchronous call.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="90a67-3069"><paramref name="fileName" /> 파일을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3069">The file <paramref name="fileName" /> was not found.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3070">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3070">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SendPacketsAsync">
      <MemberSignature Language="C#" Value="public bool SendPacketsAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendPacketsAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPacketsAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendPacketsAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-3071">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3071">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-3072">파일 컬렉션 또는 메모리 내 데이터 버퍼를 연결된 <see cref="T:System.Net.Sockets.Socket" /> 개체에 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3072">Sends a collection of files or in memory data buffers asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.</span></span></summary>
        <returns><span data-ttu-id="90a67-3073">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3073">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-3074">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3074">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-3075">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3075">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-3076">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3076">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3077"><xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> 메서드는 원격 호스트에 컬렉션 메모리 또는 파일의 데이터 버퍼를 보내는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3077">The <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is used to send a collection of files or in memory data buffers to remote host.</span></span> <span data-ttu-id="90a67-3078"><xref:System.Net.Sockets.Socket> 원격 호스트에 이미 연결 되어 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3078">The <xref:System.Net.Sockets.Socket> must already be connected to the remote host.</span></span>  
  
 <span data-ttu-id="90a67-3079">경우는 <xref:System.Net.Sockets.SendPacketsElement?displayProperty=nameWithType> 파일의 작업 디렉터리에 대 한 참조를 파일 이름으로 식별; 그렇지 않으면 전체 경로 파일의 이름을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3079">If a <xref:System.Net.Sockets.SendPacketsElement?displayProperty=nameWithType> references a file in the working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified.</span></span> <span data-ttu-id="90a67-3080">와일드 카드 및 UNC 공유 이름이 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3080">Wildcards and UNC share names are supported.</span></span> <span data-ttu-id="90a67-3081">파일이 없는 경우 <xref:System.IO.FileNotFoundException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3081">If the file is not found, <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="90a67-3082">완료 알림을 받을 수는 이벤트 처리기를 구현 하는 콜백 메서드를 만들어야 합니다\<SocketAsyncEventArgs >에 연결 하 고 대리자는 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3082">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="90a67-3083"><xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> 속성에는 `e` 매개 변수 창 소켓 서비스 공급자와 파일 전송에 대 한 추가 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3083">The <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> property on the `e` parameter provides the Window Sockets service provider with additional information about the file transfer.</span></span> <span data-ttu-id="90a67-3084">이 매개 변수를 사용 하는 방법에 대 한 자세한 내용은 참조 하십시오. <xref:System.Net.Sockets.TransmitFileOptions>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3084">For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.</span></span>  
  
 <span data-ttu-id="90a67-3085">다음과 같은 속성 및 이벤트에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 성공적으로이 메서드를 호출 하는 데 필요한 개체:</span><span class="sxs-lookup"><span data-stu-id="90a67-3085">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="90a67-3086">호출자에 게 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> 속성을 호출 하기 전에 모든 사용자 상태 개체는 <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> 메서드 정보를 콜백 메서드에서 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3086">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="90a67-3087">콜백 단일 개체 보다 더 많은 정보를 필요로 한다면 구성원으로 다른 필요한 상태 정보를 저장할 작은 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3087">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="90a67-3088">이 메서드에서 Windows 소켓 2 API에 TransmitPackets 함수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3088">This method uses the TransmitPackets function found in the Windows Sockets 2 API.</span></span> <span data-ttu-id="90a67-3089">TransmitPackets 함수 및 해당 플래그에 대 한 자세한 내용은 MSDN Library의 Windows 소켓 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3089">For more information about the TransmitPackets function and its flags, see the Windows Sockets documentation in the MSDN Library.</span></span>  
  
 <span data-ttu-id="90a67-3090">연결 지향 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> 도 사용할 수 있는 방법 연결 없는 프로토콜에 먼저 호출 하는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드를 기본 원격 호스트를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3090">Although intended for connection-oriented protocols, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method to establish a default remote host.</span></span> <span data-ttu-id="90a67-3091">연결 없는 프로토콜 사용도 확인 해야 파일의 크기는 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3091">With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-3092">그렇지 않으면 데이터 그램 전송 되지 않습니다 및 <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> throw 한 <xref:System.Net.Sockets.SocketException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3092">If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> throws a <xref:System.Net.Sockets.SocketException> exception.</span></span>  
  
 <span data-ttu-id="90a67-3093"><xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> 메서드 사용 되는 운영 체제에 따라 최적화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3093">The <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized according to the operating system on which it is used.</span></span> <span data-ttu-id="90a67-3094">Windows server 버전에서의 <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> 메서드 고성능을 위해 최적화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3094">On Windows server editions, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized for high performance.</span></span>  
  
 <span data-ttu-id="90a67-3095">Windows 클라이언트 버전에서 <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> 메서드 최소 메모리 및 리소스 사용률에 대 한 최적화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3095">On Windows client editions, the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method is optimized for minimum memory and resource utilization.</span></span>  
  
 <span data-ttu-id="90a67-3096">사용는 <xref:System.Net.Sockets.TransmitFileOptions.UseKernelApc?displayProperty=nameWithType> 플래그는 <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> 속성에는 `e` 매개 변수는 뛰어난 성능을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3096">Use of the <xref:System.Net.Sockets.TransmitFileOptions.UseKernelApc?displayProperty=nameWithType> flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=nameWithType> property on the `e` parameter can deliver significant performance benefits.</span></span> <span data-ttu-id="90a67-3097">하는 경우 시작 하는 스레드가 <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> 메서드 호출이 계산이 많은 작업에 사용 되는 것을 가능 있지만 같이 드문 상황이 Apc에서 시작 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3097">If the thread initiating the <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A> method call is being used for heavy computations, it is possible, though unlikely, that APCs could be prevented from launching.</span></span> <span data-ttu-id="90a67-3098">사용자 모드 및 커널 Apc 간에 차이가 있다는 것을 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3098">Note that there is a difference between kernel and user-mode APCs.</span></span> <span data-ttu-id="90a67-3099">커널 Apc 스레드가 대기 상태에 있을 때 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3099">Kernel APCs launch when a thread is in a wait state.</span></span> <span data-ttu-id="90a67-3100">경고 대기 상태에서 스레드 중 하나가 사용자 모드 Apc 시작</span><span class="sxs-lookup"><span data-stu-id="90a67-3100">User-mode APCs launch when a thread is in an alertable wait state</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="90a67-3101"><see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> 속성에 지정된 파일을 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3101">The file specified in the <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> property was not found.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-3102"><paramref name="e" /> 매개 변수에 지정된 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체를 사용하여 소켓 작업이 이미 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3102">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-3103">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-3103">Windows XP or later is required for this method.</span></span> <span data-ttu-id="90a67-3104"><see cref="T:System.Net.Sockets.Socket" />이 원격 호스트에 연결되어 있지 않은 경우에도 이 예외가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3104">This exception also occurs if the <see cref="T:System.Net.Sockets.Socket" /> is not connected to a remote host.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3105"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3105">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3106">연결 없는 <see cref="T:System.Net.Sockets.Socket" />이 사용되고 있고 보내는 파일이 내부 전송의 최대 패킷 크기를 초과하는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3106">A connectionless <see cref="T:System.Net.Sockets.Socket" /> is being used and the file being sent exceeds the maximum packet size of the underlying transport.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SendTimeout">
      <MemberSignature Language="C#" Value="public int SendTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SendTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property SendTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-3107">동기 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 호출이 완료되어야 하는 제한 시간을 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3107">Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Send" /> call will time out.</span></span></summary>
        <value><span data-ttu-id="90a67-3108">시간 제한 값(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3108">The time-out value, in milliseconds.</span></span> <span data-ttu-id="90a67-3109">1부터 499 사이의 값으로 속성을 설정하면 값이 500으로 변경됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3109">If you set the property with a value between 1 and 499, the value will be changed to 500.</span></span> <span data-ttu-id="90a67-3110">기본값은 0으로, 시간 제한이 없음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3110">The default value is 0, which indicates an infinite time-out period.</span></span> <span data-ttu-id="90a67-3111">- 1을 지정해도 시간 제한이 없음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3111">Specifying -1 also indicates an infinite time-out period.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3112">이 옵션은 동기 <xref:System.Net.Sockets.Socket.Send%2A> 만 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3112">This option applies to synchronous <xref:System.Net.Sockets.Socket.Send%2A> calls only.</span></span> <span data-ttu-id="90a67-3113">제한 시간 초과 하는 경우는 <xref:System.Net.Sockets.Socket.Send%2A> 메서드는 throw 된 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3113">If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3114">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.SendTimeout%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3114">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.SendTimeout%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3115">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3115">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3116"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3116">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-3117">set 작업에 지정된 값이 -1보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3117">The value specified for a set operation is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendTo">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-3118">특정 끝점에 데이터를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3118">Sends data to a specific endpoint.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendTo (buffer As Byte(), remoteEP As EndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::EndPoint ^ remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-3119">전송할 데이터를 포함하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3119">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-3120">데이터의 대상을 나타내는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3120">The <see cref="T:System.Net.EndPoint" /> that represents the destination for the data.</span></span></param>
        <summary><span data-ttu-id="90a67-3121">지정된 끝점에 데이터를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3121">Sends data to the specified endpoint.</span></span></summary>
        <returns><span data-ttu-id="90a67-3122">보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3122">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3123">이 오버 로드는 버퍼 오프셋 0 바이트의 크기에 보낼 수는 `buffer` 매개 변수 및 <xref:System.Net.Sockets.SocketFlags> 값의 기본값은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3123">In this overload, the buffer offset defaults to 0, the number of bytes to send defaults to the size of the `buffer` parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to 0.</span></span>  
  
 <span data-ttu-id="90a67-3124">연결 없는 프로토콜을 사용 하는 경우 기본 원격 호스트를 설정할 필요가 없습니다는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3124">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="90a67-3125">호출 하려는 경우이 작업을 수행 해야는 <xref:System.Net.Sockets.Socket.Send%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3125">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="90a67-3126">호출 하면는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>, `remoteEP` 매개 변수에 지정 된 기본 원격 호스트를 해당 송신 작업에만 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3126">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="90a67-3127">또한 필요는 없습니다 호출 하 여 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드를 기본 서비스 공급자가 가장 적절 한 로컬 네트워크 주소와 포트 번호를 할당 하기 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3127">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="90a67-3128">할당 된 로컬 네트워크 주소와 포트 번호를 식별 해야 하는 경우 사용할 수 있습니다는 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 후의 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드가 성공적으로 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3128">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="90a67-3129">연결 없는 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.SendTo%2A> 에서도 연결 지향 프로토콜을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3129">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="90a67-3130">원격 호스트 연결을 호출 하 여 먼저 설정 해야 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 사용 하 여 들어오는 연결 요청을 수락 하거나는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3130">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-3131">설정 또는 원격 호스트 연결을 허용 하지 않는 경우 <xref:System.Net.Sockets.Socket.SendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3131">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-3132">호출 하기 전에 연결 없는 프로토콜에 대 한 기본 원격 호스트를 설정할 수도 있습니다는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3132">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-3133">이러한 경우 모두 <xref:System.Net.Sockets.Socket.SendTo%2A> 무시 합니다는 `remoteEP` 를 연결 된 데이터 전송 또는 기본 원격 호스트만 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3133">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="90a67-3134">블로킹 소켓 버퍼의 바이트 모든 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3134">Blocking sockets will block until the all of the bytes in the buffer are sent.</span></span> <span data-ttu-id="90a67-3135">이후는 비블로킹 <xref:System.Net.Sockets.Socket> 완료를 즉시 보낼 수 있습니다 하지의 모든 바이트에는 `buffer`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3135">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`.</span></span> <span data-ttu-id="90a67-3136">응용 프로그램의 보낸 바이트 수를 추적 하기 위해 응용 프로그램의 모든 바이트에 보낼 때 까지는 작업을 다시 시도 하는 `buffer`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3136">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`.</span></span> <span data-ttu-id="90a67-3137">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3137">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-3138">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 보내는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3138">To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected.</span></span> <span data-ttu-id="90a67-3139">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3139">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="90a67-3140">블로킹 모드의 연결 없는 프로토콜을 사용 중인 경우 <xref:System.Net.Sockets.Socket.SendTo%2A> 데이터 그램 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3140">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="90a67-3141">브로드캐스트 주소 데이터를 전송 하려는 경우 먼저 호출 해야는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓 옵션을 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3141">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-3142">보낸 바이트 수 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 수도 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3142">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-3143">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.SendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3143">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3144">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3144">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3145">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3145">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3146">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3146">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-3147">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3147">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3148">다음 코드 예제에서는 지정된 된 원격 호스트에 연결 없는 데이터 그램을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3148">The following code example sends a connectionless datagram to the specified remote host.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#5)]
 [!code-csharp[Socket_Sync_Send_Receive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#5)]
 [!code-vb[Socket_Sync_Send_Receive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-3149"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3149"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-3150">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-3150">-or-</span></span>  
  
 <span data-ttu-id="90a67-3151"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3151"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3152">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3152">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3153"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3153">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-3154">전송할 데이터를 포함하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3154">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-3155"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3155">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-3156">해당 데이터의 대상 위치를 나타내는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3156">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span></span></param>
        <summary><span data-ttu-id="90a67-3157">지정된 <see cref="T:System.Net.Sockets.SocketFlags" />를 사용하여 특정 끝점에 데이터를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3157">Sends data to a specific endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-3158">보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3158">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3159">이 오버 로드는 버퍼 오프셋 0이 고, 바이트의 크기에 보낼 수는 `buffer`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3159">In this overload, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the `buffer`.</span></span> <span data-ttu-id="90a67-3160">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3160">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-3161">연결 없는 프로토콜을 사용 하는 경우 기본 원격 호스트를 설정할 필요가 없습니다는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3161">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="90a67-3162">호출 하려는 경우이 작업을 수행 해야는 <xref:System.Net.Sockets.Socket.Send%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3162">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="90a67-3163">호출 하면는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>, `remoteEP` 매개 변수에 지정 된 기본 원격 호스트를 해당 송신 작업에만 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3163">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="90a67-3164">또한 필요는 없습니다 호출 하 여 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드를 기본 서비스 공급자가 가장 적절 한 로컬 네트워크 주소와 포트 번호를 할당 하기 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3164">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="90a67-3165">할당 된 로컬 네트워크 주소와 포트 번호를 식별 해야 하는 경우 사용할 수 있습니다는 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 후의 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드가 성공적으로 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3165">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="90a67-3166">연결 없는 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.SendTo%2A> 에서도 연결 지향 프로토콜을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3166">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="90a67-3167">원격 호스트 연결을 호출 하 여 먼저 설정 해야 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 사용 하 여 들어오는 연결 요청을 수락 하거나는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3167">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-3168">설정 또는 원격 호스트 연결을 허용 하지 않는 경우 <xref:System.Net.Sockets.Socket.SendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3168">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-3169">호출 하기 전에 연결 없는 프로토콜에 대 한 기본 원격 호스트를 설정할 수도 있습니다는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3169">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-3170">이러한 경우 모두 <xref:System.Net.Sockets.Socket.SendTo%2A> 무시 합니다는 `remoteEP` 를 연결 된 데이터 전송 또는 기본 원격 호스트만 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3170">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="90a67-3171">블로킹 소켓은 차단 될 때까지 요청 된 모든 바이트에는 `buffer` 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3171">Blocking sockets will block until the requested all of the bytes in the `buffer` are sent.</span></span> <span data-ttu-id="90a67-3172">이후는 비블로킹 <xref:System.Net.Sockets.Socket> 완료를 즉시 보낼 수 있습니다 하지의 모든 바이트에는 `buffer`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3172">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`.</span></span> <span data-ttu-id="90a67-3173">응용 프로그램의 보낸 바이트 수를 추적 하기 위해 응용 프로그램의 모든 바이트에 보낼 때 까지는 작업을 다시 시도 하는 `buffer`합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3173">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`.</span></span> <span data-ttu-id="90a67-3174">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3174">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-3175">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 나가는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3175">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="90a67-3176">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3176">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="90a67-3177">블로킹 모드의 연결 없는 프로토콜을 사용 중인 경우 <xref:System.Net.Sockets.Socket.SendTo%2A> 데이터 그램 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3177">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="90a67-3178">브로드캐스트 주소 데이터를 전송 하려는 경우 먼저 호출 해야는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓 옵션을 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3178">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-3179">보낸 바이트 수 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 수도 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3179">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-3180">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.SendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3180">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3181">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3181">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3182">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3182">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3183">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3183">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-3184">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3184">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3185">다음 코드 예제에서는 지정된 된 원격 호스트에 연결 없는 데이터 그램을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3185">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="90a67-3186"><xref:System.Net.Sockets.SocketFlags> 에 전달 되는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3186"><xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#6)]
 [!code-csharp[Socket_Sync_Send_Receive#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#6)]
 [!code-vb[Socket_Sync_Send_Receive#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-3187"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3187"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-3188">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-3188">-or-</span></span>  
  
 <span data-ttu-id="90a67-3189"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3189"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3190">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3190">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3191"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3191">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-3192">전송할 데이터를 포함하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3192">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-3193">보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3193">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-3194"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3194">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-3195">해당 데이터의 대상 위치를 나타내는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3195">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span></span></param>
        <summary><span data-ttu-id="90a67-3196">지정된 <see cref="T:System.Net.Sockets.SocketFlags" />를 사용하여 특정 끝점에 원하는 바이트 수의 데이터를 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3196">Sends the specified number of bytes of data to the specified endpoint using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-3197">보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3197">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3198">이 오버 로드는 버퍼 오프셋 0입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3198">In this overload, the buffer offset defaults to 0.</span></span> <span data-ttu-id="90a67-3199">지정 하는 경우는 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3199">If you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-3200">연결 없는 프로토콜을 사용 하는 경우 기본 원격 호스트를 설정할 필요가 없습니다는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3200">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="90a67-3201">호출 하려는 경우이 작업을 수행 해야는 <xref:System.Net.Sockets.Socket.Send%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3201">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="90a67-3202">호출 하면는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>, `remoteEP` 매개 변수에 지정 된 기본 원격 호스트를 해당 송신 작업에만 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3202">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="90a67-3203">또한 필요는 없습니다 호출 하 여 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드를 기본 서비스 공급자가 가장 적절 한 로컬 네트워크 주소와 포트 번호를 할당 하기 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3203">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="90a67-3204">할당 된 로컬 네트워크 주소와 포트 번호를 식별 해야 하는 경우 사용할 수 있습니다는 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 후의 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드가 성공적으로 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3204">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="90a67-3205">연결 없는 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.SendTo%2A> 에서도 연결 지향 프로토콜을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3205">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="90a67-3206">원격 호스트 연결을 호출 하 여 먼저 설정 해야 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 사용 하 여 들어오는 연결 요청을 수락 하거나는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3206">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-3207">설정 또는 원격 호스트 연결을 허용 하지 않는 경우 <xref:System.Net.Sockets.Socket.SendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3207">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-3208">호출 하기 전에 연결 없는 프로토콜에 대 한 기본 원격 호스트를 설정할 수도 있습니다는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3208">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-3209">이러한 경우 모두 <xref:System.Net.Sockets.Socket.SendTo%2A> 무시 합니다는 `remoteEP` 를 연결 된 데이터 전송 또는 기본 원격 호스트만 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3209">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="90a67-3210">블로킹 소켓 바이트 수가 요청 된 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3210">Blocking sockets will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="90a67-3211">이후는 비블로킹 <xref:System.Net.Sockets.Socket> 완료를 즉시 보낼 수 있습니다 하지의 모든 단일 작업에서 요청 된 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3211">Since a nonblocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation.</span></span> <span data-ttu-id="90a67-3212">응용 프로그램의 보낸 바이트 수를 추적 하 고 요청 된 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3212">It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="90a67-3213">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3213">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-3214">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 나가는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3214">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="90a67-3215">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3215">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="90a67-3216">블로킹 모드의 연결 없는 프로토콜을 사용 중인 경우 <xref:System.Net.Sockets.Socket.SendTo%2A> 데이터 그램 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3216">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="90a67-3217">브로드캐스트 주소 데이터를 전송 하려는 경우 먼저 호출 해야는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓 옵션을 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3217">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-3218">보낸 바이트 수 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 수도 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3218">You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-3219">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.SendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3219">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3220">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3220">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3221">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3221">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3222">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3222">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-3223">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3223">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3224">다음 코드 예제에서는 지정된 된 원격 호스트에 연결 없는 데이터 그램을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3224">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="90a67-3225">크기 및 <xref:System.Net.Sockets.SocketFlags> 에 전달 되는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3225">The size and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#7)]
 [!code-csharp[Socket_Sync_Send_Receive#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#7)]
 [!code-vb[Socket_Sync_Send_Receive#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-3226"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3226"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-3227">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-3227">-or-</span></span>  
  
 <span data-ttu-id="90a67-3228"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3228"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-3229">지정된 <paramref name="size" />가 <paramref name="buffer" />의 크기를 초과한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3229">The specified <paramref name="size" /> exceeds the size of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3230">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3230">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3231"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3231">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendTo">
      <MemberSignature Language="C#" Value="public int SendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SendTo(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Net.Sockets.SocketFlags socketFlags, class System.Net.EndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SendTo(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Net::Sockets::SocketFlags socketFlags, System::Net::EndPoint ^ remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="socketFlags" Type="System.Net.Sockets.SocketFlags" />
        <Parameter Name="remoteEP" Type="System.Net.EndPoint" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="90a67-3232">전송할 데이터를 포함하는 형식 <see cref="T:System.Byte" />의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3232">An array of type <see cref="T:System.Byte" /> that contains the data to be sent.</span></span></param>
        <param name="offset"><span data-ttu-id="90a67-3233">데이터 보내기를 시작할 데이터 버퍼의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3233">The position in the data buffer at which to begin sending data.</span></span></param>
        <param name="size"><span data-ttu-id="90a67-3234">보낼 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3234">The number of bytes to send.</span></span></param>
        <param name="socketFlags"><span data-ttu-id="90a67-3235"><see cref="T:System.Net.Sockets.SocketFlags" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3235">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags" /> values.</span></span></param>
        <param name="remoteEP"><span data-ttu-id="90a67-3236">해당 데이터의 대상 위치를 나타내는 <see cref="T:System.Net.EndPoint" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3236">The <see cref="T:System.Net.EndPoint" /> that represents the destination location for the data.</span></span></param>
        <summary><span data-ttu-id="90a67-3237">버퍼의 지정된 위치에서 시작하여 특정 <see cref="T:System.Net.Sockets.SocketFlags" />를 통해 원하는 바이트 수의 데이터를 지정된 끝점으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3237">Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified <see cref="T:System.Net.Sockets.SocketFlags" />.</span></span></summary>
        <returns><span data-ttu-id="90a67-3238">보낸 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3238">The number of bytes sent.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3239">이 오버 로드를 지정 하는 경우에 <xref:System.Net.Sockets.SocketFlags.DontRoute> 로 플래그는 `socketflags` 매개 변수, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3239">In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags.DontRoute> flag as the `socketflags` parameter, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-3240">연결 없는 프로토콜을 사용 하는 경우 기본 원격 호스트를 설정할 필요가 없습니다는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3240">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>.</span></span> <span data-ttu-id="90a67-3241">호출 하려는 경우이 작업을 수행 해야는 <xref:System.Net.Sockets.Socket.Send%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3241">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method.</span></span> <span data-ttu-id="90a67-3242">호출 하면는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendTo%2A>, `remoteEP` 매개 변수에 지정 된 기본 원격 호스트를 해당 송신 작업에만 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3242">If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="90a67-3243">또한 필요는 없습니다 호출 하 여 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드를 기본 서비스 공급자가 가장 적절 한 로컬 네트워크 주소와 포트 번호를 할당 하기 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3243">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number.</span></span> <span data-ttu-id="90a67-3244">할당 된 로컬 네트워크 주소와 포트 번호를 식별 해야 하는 경우 사용할 수 있습니다는 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 후의 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드가 성공적으로 완료 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3244">If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.</span></span>  
  
 <span data-ttu-id="90a67-3245">연결 없는 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.SendTo%2A> 에서도 연결 지향 프로토콜을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3245">Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols.</span></span> <span data-ttu-id="90a67-3246">원격 호스트 연결을 호출 하 여 먼저 설정 해야 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Connect%2A> 메서드 사용 하 여 들어오는 연결 요청을 수락 하거나는 <xref:System.Net.Sockets.Socket.Accept%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3246">If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method.</span></span> <span data-ttu-id="90a67-3247">설정 또는 원격 호스트 연결을 허용 하지 않는 경우 <xref:System.Net.Sockets.Socket.SendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3247">If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-3248">호출 하기 전에 연결 없는 프로토콜에 대 한 기본 원격 호스트를 설정할 수도 있습니다는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3248">You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span> <span data-ttu-id="90a67-3249">이러한 경우 모두 <xref:System.Net.Sockets.Socket.SendTo%2A> 무시 합니다는 `remoteEP` 를 연결 된 데이터 전송 또는 기본 원격 호스트만 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3249">In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.</span></span>  
  
 <span data-ttu-id="90a67-3250">블로킹 소켓 바이트 수가 요청 된 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3250">Blocking sockets will block until the requested number of bytes are sent.</span></span> <span data-ttu-id="90a67-3251">비블로킹 이후 <xref:System.Net.Sockets.Socket> 완료를 즉시 보낼 수 있습니다 하지의 모든 단일 작업에서 요청 된 바이트입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3251">Since a non-blocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation.</span></span> <span data-ttu-id="90a67-3252">이 응용 프로그램은 보낸 바이트 수를 추적 하 고 요청 된 바이트 수를 보낼 때까지 작업을 다시 시도를 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3252">It is your applications responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes.</span></span> <span data-ttu-id="90a67-3253">보내는 데이터를 네트워크에 즉시 표시 됩니다 하지 않을 수도가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3253">There is also no guarantee that the data you send will appear on the network immediately.</span></span> <span data-ttu-id="90a67-3254">네트워크의 효율성을 높입니다의 내부 시스템 상당한 양의 나가는 데이터를 수집 될 때까지 전송을 지연 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3254">To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected.</span></span> <span data-ttu-id="90a67-3255">성공적으로 완료 된 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드 내부 시스템 보내기는 네트워크에 대 한 데이터를 버퍼링 할 공간이 가진을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3255">A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.</span></span>  
  
 <span data-ttu-id="90a67-3256">블로킹 모드의 연결 없는 프로토콜을 사용 중인 경우 <xref:System.Net.Sockets.Socket.SendTo%2A> 데이터 그램 전송 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3256">If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent.</span></span> <span data-ttu-id="90a67-3257">브로드캐스트 주소 데이터를 전송 하려는 경우 먼저 호출 해야는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓 옵션을 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3257">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.</span></span> <span data-ttu-id="90a67-3258">또한 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3258">You must also be sure that the size does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-3259">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.SendTo%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3259">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3260">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3260">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3261">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3261">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3262">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3262">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-3263">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3263">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3264">다음 코드 예제에서는 지정된 된 원격 호스트에 연결 없는 데이터 그램을 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3264">The following code example sends a connectionless datagram to the specified remote host.</span></span> <span data-ttu-id="90a67-3265">오프셋, 크기 및 <xref:System.Net.Sockets.SocketFlags> 에 전달 되는 <xref:System.Net.Sockets.Socket.SendTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3265">The offset, size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.</span></span>  
  
 [!code-cpp[Socket_Sync_Send_Receive#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CPP/source.cpp#8)]
 [!code-csharp[Socket_Sync_Send_Receive#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Sync_Send_Receive/CS/source.cs#8)]
 [!code-vb[Socket_Sync_Send_Receive#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Sync_Send_Receive/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-3266"><paramref name="buffer" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3266"><paramref name="buffer" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90a67-3267">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-3267">-or-</span></span>  
  
 <span data-ttu-id="90a67-3268"><paramref name="remoteEP" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3268"><paramref name="remoteEP" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="90a67-3269"><paramref name="offset" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3269"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-3270">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-3270">-or-</span></span>  
  
 <span data-ttu-id="90a67-3271"><paramref name="offset" /> 이 <paramref name="buffer" />의 길이보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3271"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="90a67-3272">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-3272">-or-</span></span>  
  
 <span data-ttu-id="90a67-3273"><paramref name="size" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3273"><paramref name="size" /> is less than 0.</span></span>  
  
 <span data-ttu-id="90a67-3274">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-3274">-or-</span></span>  
  
 <span data-ttu-id="90a67-3275"><paramref name="size" />가 <paramref name="buffer" />의 길이에서 <paramref name="offset" /> 매개 변수 값을 뺀 크기보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3275"><paramref name="size" /> is greater than the length of <paramref name="buffer" /> minus the value of the <paramref name="offset" /> parameter.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="90a67-3276"><paramref name="socketFlags" />가 값의 유효한 조합이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3276"><paramref name="socketFlags" /> is not a valid combination of values.</span></span>  
  
 <span data-ttu-id="90a67-3277">또는</span><span class="sxs-lookup"><span data-stu-id="90a67-3277">-or-</span></span>  
  
 <span data-ttu-id="90a67-3278"><see cref="T:System.Net.Sockets.Socket" />에 액세스하는 동안 운영 체제 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3278">An operating system error occurs while accessing the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3279"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3279">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="90a67-3280">호출 스택에 있는 호출자에게 필요한 권한이 없는 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3280">A caller in the call stack does not have the required permissions.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.Socket.LocalEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="SendToAsync">
      <MemberSignature Language="C#" Value="public bool SendToAsync (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SendToAsync(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendToAsync (e As SocketAsyncEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SendToAsync(System::Net::Sockets::SocketAsyncEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="90a67-3281">이 비동기 소켓 작업에 사용할 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3281">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.</span></span></param>
        <summary><span data-ttu-id="90a67-3282">특정 원격 호스트에 데이터를 비동기적으로 보냅니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3282">Sends data asynchronously to a specific remote host.</span></span></summary>
        <returns><span data-ttu-id="90a67-3283">I/O 작업이 보류 중인 경우 <see langword="true" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3283">Returns <see langword="true" /> if the I/O operation is pending.</span></span> <span data-ttu-id="90a67-3284">작업이 완료되면 <paramref name="e" /> 매개 변수에 대한 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3284">The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will be raised upon completion of the operation.</span></span>  
  
 <span data-ttu-id="90a67-3285">I/O 작업이 동기적으로 완료된 경우 <see langword="false" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3285">Returns <see langword="false" /> if the I/O operation completed synchronously.</span></span> <span data-ttu-id="90a67-3286">이 경우에는 <paramref name="e" /> 매개 변수에서 <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 이벤트가 발생하지 않으며, 메서드 호출이 반환된 직후 매개 변수로 전달된 <paramref name="e" /> 개체를 검사하여 작업 결과를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3286">In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <paramref name="e" /> parameter will not be raised and the <paramref name="e" /> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3287"><xref:System.Net.Sockets.Socket.SendToAsync%2A> 에 지정 된 원격 호스트에 비동기 발신 작업을 시작 하는 메서드는 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> 의 속성은 `e` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3287">The <xref:System.Net.Sockets.Socket.SendToAsync%2A> method starts an asynchronous send operation to the remote host specified in the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property of the `e` parameter.</span></span> <span data-ttu-id="90a67-3288">호출 된 <xref:System.Net.Sockets.Socket.SendToAsync%2A> 메서드는 별도 실행 스레드 내에서 데이터를 보내는 기능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3288">Calling the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method gives you the ability to send data within a separate execution thread.</span></span> <span data-ttu-id="90a67-3289">이 메서드는 연결 없는 프로토콜에서 사용 되지만 <xref:System.Net.Sockets.Socket.SendToAsync%2A> 모두 프로토콜과 연결 지향 프로토콜과 함께 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3289">Although this method is intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendToAsync%2A> works with both connectionless and connection-oriented protocols.</span></span>  
  
 <span data-ttu-id="90a67-3290">완료 알림을 받을 수는 이벤트 처리기를 구현 하는 콜백 메서드를 만들어야 합니다\<SocketAsyncEventArgs >에 연결 하 고 대리자는 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3290">To be notified of completion, you must create a callback method that implements the EventHandler\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="90a67-3291">다음과 같은 속성 및 이벤트에는 <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> 성공적으로이 메서드를 호출 하는 데 필요한 개체:</span><span class="sxs-lookup"><span data-stu-id="90a67-3291">The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=nameWithType> object are required to successfully call this method:</span></span>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType>  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType>  
  
 <span data-ttu-id="90a67-3292">호출자에 게 설정할 수 있습니다는 <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> 속성을 호출 하기 전에 모든 사용자 상태 개체는 <xref:System.Net.Sockets.Socket.SendToAsync%2A> 메서드 정보를 콜백 메서드에서 검색할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3292">The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=nameWithType> property to any user state object desired before calling the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method, so that the information will be retrievable in the callback method.</span></span> <span data-ttu-id="90a67-3293">콜백 단일 개체 보다 더 많은 정보를 필요로 한다면 구성원으로 다른 필요한 상태 정보를 저장할 작은 클래스를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3293">If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.</span></span>  
  
 <span data-ttu-id="90a67-3294">먼저 호출 해야 연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3294">If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span> <span data-ttu-id="90a67-3295">그렇지 않으면 <xref:System.Net.Sockets.Socket.SendToAsync%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3295">Otherwise <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-3296">연결 지향 프로토콜을 사용 하는 경우는 <xref:System.Net.Sockets.Socket.SendToAsync%2A> 메서드는 무시 되는 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> 속성 및 송신 데이터를는 <xref:System.Net.EndPoint?displayProperty=nameWithType> 에 설정 된는 <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A> 또는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3296">When using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.SendToAsync%2A> method will ignore the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property and send data to the <xref:System.Net.EndPoint?displayProperty=nameWithType> established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-3297">연결 없는 프로토콜을 사용 하는 경우 기본 원격 호스트를 설정할 필요가 없습니다는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendToAsync%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3297">If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendToAsync%2A>.</span></span> <span data-ttu-id="90a67-3298">호출 하려는 경우이 작업을 수행 해야는 <xref:System.Net.Sockets.Socket.BeginSend%2A> 또는 <xref:System.Net.Sockets.Socket.SendAsync%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3298">You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.SendAsync%2A> methods.</span></span> <span data-ttu-id="90a67-3299">호출 하면는 <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, 또는 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> 메서드를 호출 하기 전에 <xref:System.Net.Sockets.Socket.SendToAsync%2A>, <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> 속성이 지정 된 기본 원격 호스트를 해당 송신 작업에만 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3299">If you do call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendToAsync%2A>, the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=nameWithType> property will override the specified default remote host for that send operation only.</span></span> <span data-ttu-id="90a67-3300">또한 필요는 없습니다 호출 하 여 <xref:System.Net.Sockets.Socket.Bind%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3300">You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method.</span></span> <span data-ttu-id="90a67-3301">이 경우 기본 서비스 공급자는 가장 적절 한 로컬 네트워크 IP 주소와 포트 번호를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3301">In this case, the underlying service provider will assign the most appropriate local network IP address and port number.</span></span> <span data-ttu-id="90a67-3302">기본 서비스 공급자가 사용 가능한 포트를 선택 하기 원하는 경우 0의 포트 번호를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3302">Use a port number of zero if you want the underlying service provider to select a free port.</span></span> <span data-ttu-id="90a67-3303">할당 된 로컬 네트워크 IP 주소와 포트 번호를 식별 해야 하는 경우 사용할 수 있습니다는 <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> 후의 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> 이벤트가 신호 및 연관 된 대리자가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3303">If you need to identify the assigned local network IP address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=nameWithType> event is signaled and the associated delegates are called.</span></span>  
  
 <span data-ttu-id="90a67-3304">브로드캐스트 주소 데이터를 전송 하려는 경우 먼저 호출 해야는 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> 메서드와 집합 소켓에 대 한 옵션 <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> true로 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3304">If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option for <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> to true.</span></span> <span data-ttu-id="90a67-3305">버퍼의 크기가 기본 서비스 공급자의 최대 패킷 크기를 초과 하지 않도록 수도 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3305">You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider.</span></span> <span data-ttu-id="90a67-3306">그렇지 않으면 데이터 그램 전송 되지 것입니다 및 <xref:System.Net.Sockets.Socket.SendToAsync%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3306">If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span>  
  
 <span data-ttu-id="90a67-3307">DontRoute 플래그를 지정 하는 경우는 <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> 속성, 라우팅되지 것입니다 보내는 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3307">If you specify the DontRoute flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=nameWithType> property, the data you are sending will not be routed.</span></span>  
  
 <span data-ttu-id="90a67-3308">메시지 지향 소켓에 대 한 주의 해야 기본 전송의 최대 메시지 크기를 초과 하는 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3308">For message-oriented sockets, care must be taken not to exceed the maximum message size of the underlying transport.</span></span> <span data-ttu-id="90a67-3309">기본 서비스 공급자의 최대 패킷 크기를 초과 하는 버퍼의 크기를 데이터 그램 전송 되지 않습니다 및 <xref:System.Net.Sockets.Socket.SendToAsync%2A> throw 됩니다는 <xref:System.Net.Sockets.SocketException>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3309">If the size of the buffer exceeds the maximum packet size of the underlying service provider, the datagram is not sent and <xref:System.Net.Sockets.Socket.SendToAsync%2A> will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="90a67-3310">성공적으로 완료 한 <xref:System.Net.Sockets.Socket.SendToAsync%2A> 데이터가 성공적으로 배달 방법을 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3310">The successful completion of a <xref:System.Net.Sockets.Socket.SendToAsync%2A> method does not indicate that the data was successfully delivered.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="90a67-3311"><see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3311">The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-3312"><paramref name="e" /> 매개 변수에 지정된 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 개체를 사용하여 소켓 작업이 이미 진행 중인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3312">A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object specified in the <paramref name="e" /> parameter.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-3313">이 메서드에 Windows XP 이상이 필요한 경우.</span><span class="sxs-lookup"><span data-stu-id="90a67-3313">Windows XP or later is required for this method.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3314"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3314">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3315">연결 지향 프로토콜이 지정되었는데 <see cref="T:System.Net.Sockets.Socket" />이 아직 연결되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3315">The protocol specified is connection-oriented, but the <see cref="T:System.Net.Sockets.Socket" /> is not yet connected.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketAsyncEventArgs" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      </Docs>
    </Member>
    <Member MemberName="SetIPProtectionLevel">
      <MemberSignature Language="C#" Value="public void SetIPProtectionLevel (System.Net.Sockets.IPProtectionLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetIPProtectionLevel(valuetype System.Net.Sockets.IPProtectionLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetIPProtectionLevel (level As IPProtectionLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetIPProtectionLevel(System::Net::Sockets::IPProtectionLevel level);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="System.Net.Sockets.IPProtectionLevel" />
      </Parameters>
      <Docs>
        <param name="level"><span data-ttu-id="90a67-3316">이 소켓에 설정할 IP 보호 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3316">The IP protection level to set on this socket.</span></span></param>
        <summary><span data-ttu-id="90a67-3317">소켓에 IP 보호 수준을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3317">Set the IP protection level on a socket.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3318"><xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> 메서드를 사용 하면 제한 된 소켓 IPv6 또는 IP 주소 같은 링크 로컬 또는 사이트 로컬 접두사와 같은 지정된 된 범위에서 수신 대기 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3318">The <xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> method enables restricting an a IPv6 or IP socket to listen on a specified scope, such as addresses with the same link local or site local prefix.</span></span> <span data-ttu-id="90a67-3319">이 소켓 옵션을 사용 하면 응용 프로그램이 소켓을 IPv6 또는 IP에 대 한 액세스 제한을 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3319">This socket option enables applications to place access restrictions on IPv6 or IP sockets.</span></span> <span data-ttu-id="90a67-3320">이러한 제한을 사용하면 사설 LAN에서 실행되는 응용 프로그램을 간단하고 강력하게 외부 공격으로부터 보호할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3320">Such restrictions enable an application running on a private LAN to simply and robustly harden itself against external attacks.</span></span> <span data-ttu-id="90a67-3321">경우에 대 한 액세스 제한을 제거 하는이 소켓 옵션을 사용할 수도 있습니다는 `level` 로 설정 된 <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3321">This socket option can also be used to remove access restrictions if the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="90a67-3322">이 소켓 옵션을 통해 적절한 경우 공용 및 개인 사용자의 무제한 액세스를 허용하거나 필요에 따라 같은 사이트로만 액세스를 제한하여 수신 소켓의 범위를 넓히거나 좁힐 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3322">This socket option widens or narrows the scope of a listening socket, enabling unrestricted access from public and private users when appropriate, or restricting access only to the same site, as required.</span></span>  
  
 <span data-ttu-id="90a67-3323">이 소켓 옵션은 <xref:System.Net.Sockets.IPProtectionLevel> 열거형에 지정된 보호 수준을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3323">This socket option has defined protection levels specified in the <xref:System.Net.Sockets.IPProtectionLevel> enumeration.</span></span>  
  
 <span data-ttu-id="90a67-3324"><xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> 메서드 설정 또는 통과 NAT (네트워크 주소)에 대 한 해제를 사용 하는 <xref:System.Net.Sockets.Socket> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="90a67-3324">The <xref:System.Net.Sockets.Socket.SetIPProtectionLevel%2A> method is used to enable or disable Network Address Traversal (NAT) for a <xref:System.Net.Sockets.Socket> instance.</span></span> <span data-ttu-id="90a67-3325">Teredo, 6to4 또는 ISATAP 터널을 사용 하 여 NAT 통과 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3325">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="90a67-3326">경우는 `level` 로 설정 된 <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>, 또는 <xref:System.Net.Sockets.IPProtectionLevel.Restricted>,이 명시적으로 사용 하지 않도록 설정에 대 한 NAT 통과 한 <xref:System.Net.Sockets.Socket> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="90a67-3326">When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>, or <xref:System.Net.Sockets.IPProtectionLevel.Restricted>, this explicitly disables NAT traversal for a <xref:System.Net.Sockets.Socket> instance.</span></span>  
  
 <span data-ttu-id="90a67-3327">경우는 `level` 로 설정 된 <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>,이 대 한 NAT 통과 허용할 수 있습니다는 <xref:System.Net.Sockets.Socket> 시스템의 방화벽 규칙에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3327">When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>, this may allow NAT traversal for a <xref:System.Net.Sockets.Socket> depending on firewall rules in place on the system.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90a67-3328"><paramref name="level" /> 매개 변수는 <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" />일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3328">The <paramref name="level" /> parameter cannot be <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" />.</span></span> <span data-ttu-id="90a67-3329">IP 보호 수준은 미지정으로 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3329">The IP protection level cannot be set to unspecified.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-3330">소켓의 설정은 <see cref="T:System.Net.Sockets.AddressFamily" />는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3330">The <see cref="T:System.Net.Sockets.AddressFamily" /> of the socket must be either <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />.</span></span></exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSocketOption">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90a67-3331"><see cref="T:System.Net.Sockets.Socket" /> 옵션을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3331">Sets a <see cref="T:System.Net.Sockets.Socket" /> option.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, bool optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, bool optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, bool optionValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="90a67-3332"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3332">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="90a67-3333"><see cref="T:System.Net.Sockets.SocketOptionName" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3333">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="90a67-3334"><see cref="T:System.Boolean" />으로 나타낸 옵션 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3334">The value of the option, represented as a <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="90a67-3335">지정된 <see cref="T:System.Net.Sockets.Socket" /> 옵션을 지정된 <see cref="T:System.Boolean" /> 값으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3335">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified <see cref="T:System.Boolean" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3336"><xref:System.Net.Sockets.Socket> 현재 동작을 결정 하는 옵션 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3336"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-3337">설정 `optionValue` 를 `true` 옵션을 사용할 수 있도록 또는 `false` 옵션을 해제 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3337">Set `optionValue` to `true` to enable the option, or to `false` to disable the option.</span></span>  
  
 <span data-ttu-id="90a67-3338"><xref:System.Net.Sockets.Socket> 프로토콜을 지 원하는 수준의 옵션 그룹화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3338"><xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.</span></span>  
  
 <span data-ttu-id="90a67-3339">다음은 다양 한 <xref:System.Net.Sockets.Socket> 이 오버 로드를 사용 하 여 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3339">Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload.</span></span> <span data-ttu-id="90a67-3340">이러한 옵션의 적절 한 별로 그룹화 되어 <xref:System.Net.Sockets.SocketOptionLevel> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3340">These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value.</span></span> <span data-ttu-id="90a67-3341">이러한 옵션 중 하나를 설정 하려는 경우 사용 해야 적절 한 <xref:System.Net.Sockets.SocketOptionLevel> 에 대 한 값은 `optionLevel` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3341">If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value for the `optionLevel` parameter.</span></span> <span data-ttu-id="90a67-3342">에 설정 하려는 옵션을 지정 해야 합니다는 `optionName` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3342">The option you choose to set must be specified in the `optionName` parameter.</span></span> <span data-ttu-id="90a67-3343">나열 된 옵션의 현재 값을 가져올, 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.GetSocketOption%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3343">If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-3344"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> 이 오버 로드를 사용 하 여 설정할 수 있는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3344"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.AcceptConnection>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Broadcast>  
  
-   <xref:System.Net.Sockets.SocketOptionName.DontLinger>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Debug>  
  
-   <xref:System.Net.Sockets.SocketOptionName.KeepAlive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.OutOfBandInline>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReuseAddress>  
  
 <span data-ttu-id="90a67-3345"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> 이 오버 로드를 사용 하 여 설정할 수 있는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3345"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HeaderIncluded>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastLoopback>  
  
-   <xref:System.Net.Sockets.SocketOptionName.UseLoopback>  
  
 <span data-ttu-id="90a67-3346"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> 이 오버 로드를 사용 하 여 설정할 수 있는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3346"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.BsdUrgent>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Expedited>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoDelay>  
  
 <span data-ttu-id="90a67-3347"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> 이 오버 로드를 사용 하 여 설정할 수 있는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3347"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoChecksum>  
  
 <span data-ttu-id="90a67-3348">이러한 옵션에 대 한 자세한 내용은 참조는 <xref:System.Net.Sockets.SocketOptionName> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3348">For more information on these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3349">표시 되 면 한 <xref:System.Net.Sockets.SocketException> 예외를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3349">If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3350">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3350">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3351">다음 코드 예제에서는 소켓을 열고 수 있도록는 `DontLinger` 및 `OutOfBandInline` 소켓 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3351">The following code example opens a socket and enables the `DontLinger` and the `OutOfBandInline` socket options.</span></span>  
  
 [!code-cpp[NCLSocketEnhancements#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLSocketEnhancements/CPP/nclsocketenhancements.cpp#5)]
 [!code-csharp[NCLSocketEnhancements#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLSocketEnhancements/CS/nclsocketenhancements.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3352"><see cref="T:System.Net.Sockets.Socket" /> 개체가 닫힌 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3352">The <see cref="T:System.Net.Sockets.Socket" /> object has been closed.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3353">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3353">An error occurred when attempting to access the socket.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, unsigned int8[] optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, cli::array &lt;System::Byte&gt; ^ optionValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="90a67-3354"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3354">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="90a67-3355"><see cref="T:System.Net.Sockets.SocketOptionName" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3355">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="90a67-3356">해당 옵션 값을 나타내는 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3356">An array of type <see cref="T:System.Byte" /> that represents the value of the option.</span></span></param>
        <summary><span data-ttu-id="90a67-3357">지정된 <see cref="T:System.Net.Sockets.Socket" /> 옵션을 바이트 배열로 나타내는 특정 값으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3357">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified value, represented as a byte array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3358"><xref:System.Net.Sockets.Socket> 현재 동작을 결정 하는 옵션 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3358"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-3359">이 오버 로드를 사용 하 여 설정 하는 것을 <xref:System.Net.Sockets.Socket> 옵션 값으로 바이트 배열을 필요로 하는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3359">Use this overload to set those <xref:System.Net.Sockets.Socket> options that require a byte array as an option value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3360">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3360">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3361">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3361">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3362">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3362">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-3363">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3363">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3364">다음 코드 예제에서는 <xref:System.Net.Sockets.LingerOption> 및 <xref:System.Net.Sockets.Socket.Send%2A> 제한 시간 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3364">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3365">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3365">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3366"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3366">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, int32 optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, int optionValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="90a67-3367"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3367">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="90a67-3368"><see cref="T:System.Net.Sockets.SocketOptionName" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3368">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="90a67-3369">해당 옵션의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3369">A value of the option.</span></span></param>
        <summary><span data-ttu-id="90a67-3370">지정된 <see cref="T:System.Net.Sockets.Socket" /> 옵션을 원하는 정수 값으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3370">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3371"><xref:System.Net.Sockets.Socket> 현재 동작을 결정 하는 옵션 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3371"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-3372">사용 하는 옵션에 대 한는 <xref:System.Boolean> 옵션을 사용 하도록 설정 하려면 0이 아닌 값 및 옵션을 사용 하지 않도록 설정 하려면 0 값을 지정할 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3372">For an option with a <xref:System.Boolean> data type, specify a nonzero value to enable the option, and a zero value to disable the option.</span></span> <span data-ttu-id="90a67-3373">정수 데이터 형식 사용 하는 옵션을 적절 한 값을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3373">For an option with an integer data type, specify the appropriate value.</span></span> <span data-ttu-id="90a67-3374"><xref:System.Net.Sockets.Socket> 프로토콜을 지 원하는 수준의 옵션 그룹화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3374"><xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.</span></span>  
  
 <span data-ttu-id="90a67-3375">다음은 다양 한 <xref:System.Net.Sockets.Socket> 이 오버 로드를 사용 하 여 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3375">Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload.</span></span> <span data-ttu-id="90a67-3376">이러한 옵션의 적절 한 별로 그룹화 되어 <xref:System.Net.Sockets.SocketOptionLevel>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3376">These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel>.</span></span> <span data-ttu-id="90a67-3377">이러한 옵션 중 하나를 설정 하려는 경우 사용 해야 적절 한 <xref:System.Net.Sockets.SocketOptionLevel> 에 대 한는 `optionLevel` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3377">If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> for the `optionLevel` parameter.</span></span> <span data-ttu-id="90a67-3378">에 설정 하려는 옵션을 지정 해야 합니다는 `optionName` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3378">The option you choose to set must be specified in the `optionName` parameter.</span></span> <span data-ttu-id="90a67-3379">나열 된 옵션의 현재 값을 가져올, 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.GetSocketOption%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3379">If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
 <span data-ttu-id="90a67-3380"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> 이 오버 로드를 사용 하 여 설정할 수 있는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3380"><xref:System.Net.Sockets.SocketOptionLevel.Socket?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Broadcast>  
  
-   <xref:System.Net.Sockets.SocketOptionName.DontLinger>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Debug>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Error>  
  
-   <xref:System.Net.Sockets.SocketOptionName.KeepAlive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.OutOfBandInline>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReceiveBuffer>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReceiveTimeout>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ReuseAddress>  
  
-   <xref:System.Net.Sockets.SocketOptionName.SendBuffer>  
  
-   <xref:System.Net.Sockets.SocketOptionName.SendTimeout>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Type>  
  
 <span data-ttu-id="90a67-3381"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> 이 오버 로드를 사용 하 여 설정할 수 있는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3381"><xref:System.Net.Sockets.SocketOptionLevel.IP?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HeaderIncluded>  
  
-   <xref:System.Net.Sockets.SocketOptionName.IPOptions>  
  
-   <xref:System.Net.Sockets.SocketOptionName.IpTimeToLive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastInterface>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastLoopback>  
  
-   <xref:System.Net.Sockets.SocketOptionName.MulticastTimeToLive>  
  
-   <xref:System.Net.Sockets.SocketOptionName.TypeOfService>  
  
-   <xref:System.Net.Sockets.SocketOptionName.UseLoopback>  
  
 <span data-ttu-id="90a67-3382"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> 이 오버 로드를 사용 하 여 설정할 수 있는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3382"><xref:System.Net.Sockets.SocketOptionLevel.Tcp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.BsdUrgent>  
  
-   <xref:System.Net.Sockets.SocketOptionName.Expedited>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoDelay>  
  
 <span data-ttu-id="90a67-3383"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> 이 오버 로드를 사용 하 여 설정할 수 있는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3383"><xref:System.Net.Sockets.SocketOptionLevel.Udp?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.ChecksumCoverage>  
  
-   <xref:System.Net.Sockets.SocketOptionName.NoChecksum>  
  
 <span data-ttu-id="90a67-3384"><xref:System.Net.Sockets.SocketOptionLevel.IPv6?displayProperty=nameWithType> 이 오버 로드를 사용 하 여 설정할 수 있는 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3384"><xref:System.Net.Sockets.SocketOptionLevel.IPv6?displayProperty=nameWithType> options that can be set using this overload.</span></span>  
  
-   <xref:System.Net.Sockets.SocketOptionName.HopLimit>  
  
 <span data-ttu-id="90a67-3385">이러한 옵션에 대 한 자세한 내용은 참조는 <xref:System.Net.Sockets.SocketOptionName> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3385">For more information about these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3386">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3386">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3387">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3387">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3388">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3388">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-3389">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3389">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3390">다음 코드 예제에서는 <xref:System.Net.Sockets.LingerOption> 및 <xref:System.Net.Sockets.Socket.Send%2A> 제한 시간 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3390">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3391">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3391">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3392"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3392">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="SetSocketOption">
      <MemberSignature Language="C#" Value="public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, object optionValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketOption(valuetype System.Net.Sockets.SocketOptionLevel optionLevel, valuetype System.Net.Sockets.SocketOptionName optionName, object optionValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSocketOption (optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSocketOption(System::Net::Sockets::SocketOptionLevel optionLevel, System::Net::Sockets::SocketOptionName optionName, System::Object ^ optionValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="optionLevel" Type="System.Net.Sockets.SocketOptionLevel" />
        <Parameter Name="optionName" Type="System.Net.Sockets.SocketOptionName" />
        <Parameter Name="optionValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="optionLevel"><span data-ttu-id="90a67-3393"><see cref="T:System.Net.Sockets.SocketOptionLevel" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3393">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel" /> values.</span></span></param>
        <param name="optionName"><span data-ttu-id="90a67-3394"><see cref="T:System.Net.Sockets.SocketOptionName" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3394">One of the <see cref="T:System.Net.Sockets.SocketOptionName" /> values.</span></span></param>
        <param name="optionValue"><span data-ttu-id="90a67-3395">해당 옵션의 값이 들어 있는 <see cref="T:System.Net.Sockets.LingerOption" /> 또는 <see cref="T:System.Net.Sockets.MulticastOption" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3395">A <see cref="T:System.Net.Sockets.LingerOption" /> or <see cref="T:System.Net.Sockets.MulticastOption" /> that contains the value of the option.</span></span></param>
        <summary><span data-ttu-id="90a67-3396">지정된 <see cref="T:System.Net.Sockets.Socket" /> 옵션을 개체로 나타내는 특정 값으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3396">Sets the specified <see cref="T:System.Net.Sockets.Socket" /> option to the specified value, represented as an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3397"><xref:System.Net.Sockets.Socket> 현재 동작을 결정 하는 옵션 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3397"><xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-3398">이 오버 로드를 사용 하 여 설정 하는 <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, 및 <xref:System.Net.Sockets.SocketOptionName.DropMembership> <xref:System.Net.Sockets.Socket> 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3398">Use this overload to set the <xref:System.Net.Sockets.SocketOptionName.Linger>, <xref:System.Net.Sockets.SocketOptionName.AddMembership>, and <xref:System.Net.Sockets.SocketOptionName.DropMembership><xref:System.Net.Sockets.Socket> options.</span></span> <span data-ttu-id="90a67-3399">에 대 한는 <xref:System.Net.Sockets.SocketOptionName.Linger> 옵션을 사용 하 여 <xref:System.Net.Sockets.Socket> 에 대 한는 `optionLevel` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3399">For the <xref:System.Net.Sockets.SocketOptionName.Linger> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter.</span></span> <span data-ttu-id="90a67-3400">에 대 한 <xref:System.Net.Sockets.SocketOptionName.AddMembership> 및 <xref:System.Net.Sockets.SocketOptionName.DropMembership>를 사용 하 여 <xref:System.Net.Sockets.SocketOptionLevel.IP>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3400">For <xref:System.Net.Sockets.SocketOptionName.AddMembership> and <xref:System.Net.Sockets.SocketOptionName.DropMembership>, use <xref:System.Net.Sockets.SocketOptionLevel.IP>.</span></span> <span data-ttu-id="90a67-3401">위에 나열 된 옵션의 현재 값을 가져올, 사용 하려는 경우는 <xref:System.Net.Sockets.Socket.GetSocketOption%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="90a67-3401">If you want to get the current value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3402">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3402">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3403">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3403">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3404">다음 코드 예제에서는 <xref:System.Net.Sockets.LingerOption> 및 <xref:System.Net.Sockets.Socket.Send%2A> 제한 시간 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3404">The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time out values.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#1)]
 [!code-csharp[Socket_Socket_Options#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#1)]
 [!code-vb[Socket_Socket_Options#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90a67-3405"><paramref name="optionValue" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3405"><paramref name="optionValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3406">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3406">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3407"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3407">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.SocketOptionName" />
        <altmember cref="T:System.Net.Sockets.SocketOptionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown (System.Net.Sockets.SocketShutdown how);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shutdown(valuetype System.Net.Sockets.SocketShutdown how) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown (how As SocketShutdown)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown(System::Net::Sockets::SocketShutdown how);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="how" Type="System.Net.Sockets.SocketShutdown" />
      </Parameters>
      <Docs>
        <param name="how"><span data-ttu-id="90a67-3408">더 이상 허용하지 않을 작업을 지정하는 <see cref="T:System.Net.Sockets.SocketShutdown" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3408">One of the <see cref="T:System.Net.Sockets.SocketShutdown" /> values that specifies the operation that will no longer be allowed.</span></span></param>
        <summary><span data-ttu-id="90a67-3409"><see cref="T:System.Net.Sockets.Socket" />에서 보내기 및 받기를 사용할 수 없도록 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3409">Disables sends and receives on a <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3410">연결 지향를 사용 하는 경우 <xref:System.Net.Sockets.Socket>를 항상 호출 하는 <xref:System.Net.Sockets.Socket.Shutdown%2A> 닫기 전에 메서드는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3410">When using a connection-oriented <xref:System.Net.Sockets.Socket>, always call the <xref:System.Net.Sockets.Socket.Shutdown%2A> method before closing the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-3411">이렇게 하면 모든 데이터가 전송 및 연결이 닫히기 전에 연결된 된 소켓에서 수신 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3411">This ensures that all data is sent and received on the connected socket before it is closed.</span></span>  
  
 <span data-ttu-id="90a67-3412">호출의 <xref:System.Net.Sockets.Socket.Close%2A> 메서드를 모두 해제 코드와 비관리와 연결 된 리소스는 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3412">Call the <xref:System.Net.Sockets.Socket.Close%2A> method to free all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="90a67-3413">다시 사용 하지 마십시오는 <xref:System.Net.Sockets.Socket> 닫힌 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3413">Do not attempt to reuse the <xref:System.Net.Sockets.Socket> after closing.</span></span>  
  
 <span data-ttu-id="90a67-3414">다음 표는 <xref:System.Net.Sockets.SocketShutdown> 에 대 한 유효한 열거형 값의 `how` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3414">The following table shows the <xref:System.Net.Sockets.SocketShutdown> enumeration values that are valid for the `how` parameter.</span></span>  
  
|<span data-ttu-id="90a67-3415">값</span><span class="sxs-lookup"><span data-stu-id="90a67-3415">Value</span></span>|<span data-ttu-id="90a67-3416">설명</span><span class="sxs-lookup"><span data-stu-id="90a67-3416">Description</span></span>|  
|-----------|-----------------|  
|<span data-ttu-id="90a67-3417">보내기</span><span class="sxs-lookup"><span data-stu-id="90a67-3417">Send</span></span>|<span data-ttu-id="90a67-3418">이 보내기 사용 안 함 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3418">Disable sending on this <xref:System.Net.Sockets.Socket>.</span></span>|  
|<span data-ttu-id="90a67-3419">받기</span><span class="sxs-lookup"><span data-stu-id="90a67-3419">Receive</span></span>|<span data-ttu-id="90a67-3420">수신이를 사용 하지 않도록 설정 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3420">Disable receiving on this <xref:System.Net.Sockets.Socket>.</span></span>|  
|<span data-ttu-id="90a67-3421">Both</span><span class="sxs-lookup"><span data-stu-id="90a67-3421">Both</span></span>|<span data-ttu-id="90a67-3422">보내기 및 받기이 모두 사용 하지 않도록 설정 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3422">Disable both sending and receiving on this <xref:System.Net.Sockets.Socket>.</span></span>|  
  
 <span data-ttu-id="90a67-3423">설정 `how` 를 <xref:System.Net.Sockets.SocketShutdown.Send> 다음에 대 한 호출이 <xref:System.Net.Sockets.Socket.Send%2A> 허용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3423">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Send> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Send%2A> are not allowed.</span></span> <span data-ttu-id="90a67-3424">연결 없는 사용 중인 경우 <xref:System.Net.Sockets.Socket>로 지정 하 여 <xref:System.Net.Sockets.SocketShutdown.Send> 아무런 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3424">If you are using a connectionless <xref:System.Net.Sockets.Socket>, specifying <xref:System.Net.Sockets.SocketShutdown.Send> will have no effect.</span></span>  
  
 <span data-ttu-id="90a67-3425">설정 `how` 를 <xref:System.Net.Sockets.SocketShutdown.Receive> 다음에 대 한 호출이 <xref:System.Net.Sockets.Socket.Receive%2A> 허용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3425">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Receive> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Receive%2A> are not allowed.</span></span> <span data-ttu-id="90a67-3426">이 구문은 아무 효과가 하위 프로토콜 계층에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3426">This has no effect on lower protocol layers.</span></span> <span data-ttu-id="90a67-3427">연결 지향 프로토콜을 사용 하는 경우 다음 조건 중 하나에 대 한 호출 후 더 이상 존재 하는 경우 연결이 종료 <xref:System.Net.Sockets.Socket.Shutdown%2A> :</span><span class="sxs-lookup"><span data-stu-id="90a67-3427">If you are using a connection-oriented protocol, the connection is terminated if either of the following conditions exist after a call to <xref:System.Net.Sockets.Socket.Shutdown%2A> :</span></span>  
  
-   <span data-ttu-id="90a67-3428">데이터는 수신을 대기 하는 들어오는 네트워크 버퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3428">Data is in the incoming network buffer waiting to be received.</span></span>  
  
-   <span data-ttu-id="90a67-3429">더 많은 데이터가 전송 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3429">More data has arrived.</span></span>  
  
 <span data-ttu-id="90a67-3430">연결 없는 프로토콜을 사용 하는 경우 데이터 그램 허용 되 고 큐에 대기 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3430">If you are using a connectionless protocol, datagrams are accepted and queued.</span></span> <span data-ttu-id="90a67-3431">그러나 버퍼 공간이 추가 들어오는 데이터 그램에 사용할 수 없으면 삭제 됩니다 및 보낸 사람에 게 오류가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3431">However, if no buffer space is available for additional incoming datagrams, they will be discarded and no error will be returned to the sender.</span></span> <span data-ttu-id="90a67-3432">사용 하 여 <xref:System.Net.Sockets.Socket.Shutdown%2A> 연결 없는에 <xref:System.Net.Sockets.Socket> 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3432">Using <xref:System.Net.Sockets.Socket.Shutdown%2A> on a connectionless <xref:System.Net.Sockets.Socket> is not recommended.</span></span>  
  
 <span data-ttu-id="90a67-3433">설정 `how` 를 <xref:System.Net.Sockets.SocketShutdown.Both> 모두 사용 하지 않도록 설정 하 고 위에서 설명한 대로 받습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3433">Setting `how` to <xref:System.Net.Sockets.SocketShutdown.Both> disables both sends and receives as described above.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3434">표시 되 면 한 <xref:System.Net.Sockets.SocketException> 호출 하는 경우는 <xref:System.Net.Sockets.Socket.Shutdown%2A> 메서드를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3434">If you receive a <xref:System.Net.Sockets.SocketException> when calling the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3435">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3435">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="90a67-3436">응용 프로그램에 네트워크 추적을 사용하도록 설정하면 이 멤버에서 추적 정보를 출력합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3436">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="90a67-3437">자세한 내용은 참조 [.NET Framework의 네트워크 추적](~/docs/framework/network-programming/network-tracing.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3437">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3438">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.Shutdown%2A> 사용 하지 않도록 설정 하 여 <xref:System.Net.Sockets.Socket>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3438">The following code example uses <xref:System.Net.Sockets.Socket.Shutdown%2A> to disable the <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[Classic Socket.Close Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Socket.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Socket.Close Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Socket.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Socket.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Socket.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3439">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3439">An error occurred when attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3440"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3440">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
        <altmember cref="T:System.Net.Sockets.SocketShutdown" />
      </Docs>
    </Member>
    <Member MemberName="SocketType">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketType SocketType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.SocketType SocketType" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SocketType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SocketType As SocketType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::SocketType SocketType { System::Net::Sockets::SocketType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-3441"><see cref="T:System.Net.Sockets.Socket" />의 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3441">Gets the type of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="90a67-3442"><see cref="T:System.Net.Sockets.SocketType" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3442">One of the <see cref="T:System.Net.Sockets.SocketType" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3443"><xref:System.Net.Sockets.Socket.SocketType%2A> 읽기 전용 이므로 때 설정 됩니다는 <xref:System.Net.Sockets.Socket> 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3443"><xref:System.Net.Sockets.Socket.SocketType%2A> is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3444">다음 코드 예제는 <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, 및 <xref:System.Net.Sockets.ProtocolType> 콘솔에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3444">The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.</span></span>  
  
 [!code-cpp[Socket_Socket_Options#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#3)]
 [!code-csharp[Socket_Socket_Options#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#3)]
 [!code-vb[Socket_Socket_Options#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.SocketType" />
      </Docs>
    </Member>
    <Member MemberName="SupportsIPv4">
      <MemberSignature Language="C#" Value="public static bool SupportsIPv4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SupportsIPv4" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SupportsIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SupportsIPv4 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SupportsIPv4 { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use OSSupportsIPv4 instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-3445">IPv4 지원이 사용 가능하며 현재 호스트에서 사용하도록 설정되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3445">Gets a value indicating whether IPv4 support is available and enabled on the current host.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-3446">현재 호스트에서 IPv4 프로토콜을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3446"><see langword="true" /> if the current host supports the IPv4 protocol; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3447">운영 체제에는 IPv4 및 IPv6 프로토콜을 모두 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3447">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.SupportsIPv6" />
      </Docs>
    </Member>
    <Member MemberName="SupportsIPv6">
      <MemberSignature Language="C#" Value="public static bool SupportsIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SupportsIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.SupportsIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SupportsIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SupportsIPv6 { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use OSSupportsIPv6 instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-3448">Framework에서 더 이상 사용되지 않는 특정 <see cref="T:System.Net.Dns" /> 멤버에 대해 IPv6을 지원하는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3448">Gets a value that indicates whether the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns" /> members.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-3449">Framework에서 더 이상 사용되지 않는 특정 <see cref="T:System.Net.Dns" /> 메서드에 대해 IPv6을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3449"><see langword="true" /> if the Framework supports IPv6 for certain obsolete <see cref="T:System.Net.Dns" /> methods; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3450">운영 체제에는 IPv4 및 IPv6 프로토콜을 모두 지원할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3450">The operating system may support both IPv4 and IPv6 protocols.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.OSSupportsIPv6" />
        <altmember cref="P:System.Net.Sockets.Socket.SupportsIPv4" />
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-3451"><see cref="T:System.Net.Sockets.Socket" />에서 보낸 IP(인터넷 프로토콜) 패킷의 TTL(Time-To-Live) 값을 지정하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3451">Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="90a67-3452">TTL 값입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3452">The TTL value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3453">TTL 값은 라우터 라우터 패킷 및는 제어 메시지 ICMP (Internet Protocol) "TTL 초과"를 삭제 하기 전에 패킷이 이동할 수의 최대 수를 나타내는 오류 메시지가 보낸 사람에 게 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3453">The TTL value indicates the maximum number of routers the packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) "TTL exceeded" error message is returned to the sender.</span></span>  
  
 <span data-ttu-id="90a67-3454">TTL 값은 0 ~ 255 값으로 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3454">The TTL value may be set to a value from 0 to 255.</span></span> <span data-ttu-id="90a67-3455">이 속성을 설정 하지 않으면 소켓에 대해 기본 TTL 값은 32입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3455">When this property is not set, the default TTL value for a socket is 32.</span></span>  
  
 <span data-ttu-id="90a67-3456">전송이 TCP (Control Protocol) 소켓에서이 속성을 설정 소켓을 사용 하 여 성공적으로 연결을 설정할 경우 TCP/IP 스택이 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3456">Setting this property on a Transmission Control Protocol (TCP) socket is ignored by the TCP/IP stack if a successful connection has been established using the socket.</span></span>  
  
 <span data-ttu-id="90a67-3457">표시 되 면 한 <xref:System.Net.Sockets.SocketException>를 사용 하 여는 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 속성을 특정 오류 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3457">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code.</span></span> <span data-ttu-id="90a67-3458">이 코드를 가져온 후 버전을 참조 Windows 소켓 API 오류 코드 설명서 MSDN library에서 2에 대 한 자세한 설명은 오류입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3458">After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90a67-3459">다음 코드 예제에서는 <xref:System.Net.Sockets.Socket.Ttl%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3459">The following code example demonstrates the use of the <xref:System.Net.Sockets.Socket.Ttl%2A> property.</span></span>  
  
 [!code-cpp[SocketPropertyTester#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SocketPropertyTester/CPP/class1.cpp#1)]
 [!code-csharp[SocketPropertyTester#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SocketPropertyTester/CS/class1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="90a67-3460">TTL 값은 음수로 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3460">The TTL value can't be set to a negative number.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="90a67-3461"><see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 또는 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 패밀리의 소켓이 아닌 소켓에 대해 이 속성을 설정한 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3461">This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="90a67-3462">소켓에 액세스하는 동안 오류가 발생했습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3462">An error occurred when attempting to access the socket.</span></span> <span data-ttu-id="90a67-3463">TTL을 255보다 큰 값으로 설정하고자 할 때에도 이 오류가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3463">This error is also returned when an attempt was made to set TTL to a value higher than 255.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="90a67-3464"><see cref="T:System.Net.Sockets.Socket" />이 닫혔습니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3464">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UseOnlyOverlappedIO">
      <MemberSignature Language="C#" Value="public bool UseOnlyOverlappedIO { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseOnlyOverlappedIO" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.Socket.UseOnlyOverlappedIO" />
      <MemberSignature Language="VB.NET" Value="Public Property UseOnlyOverlappedIO As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseOnlyOverlappedIO { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("This doesn't do anything on Mono yet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90a67-3465">소켓에서 중첩된 I/O 모드만 사용해야 하는지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3465">Specifies whether the socket should only use Overlapped I/O mode.</span></span></summary>
        <value>
          <span data-ttu-id="90a67-3466"><see cref="T:System.Net.Sockets.Socket" />에서 중첩된 I/O 모드만 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3466"><see langword="true" /> if the <see cref="T:System.Net.Sockets.Socket" /> uses only overlapped I/O; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="90a67-3467">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3467">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90a67-3468">이 속성을 설정 `true` 에 대 한는 <xref:System.Net.Sockets.Socket> 호출 하려는 <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3468">Set this property to `true` for a <xref:System.Net.Sockets.Socket> you intend to call <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>.</span></span> <span data-ttu-id="90a67-3469">그렇지 않은 경우 프레임 워크에서 완료 포트의 사용을 금지 하는 소켓에 할당할 수 있습니다 <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="90a67-3469">Otherwise, the Framework may assign a completion port to the socket, which would prohibit the use of <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="90a67-3470">소켓이 완료 포트에 바인딩된 경우</span><span class="sxs-lookup"><span data-stu-id="90a67-3470">The socket has been bound to a completion port.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>