<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ddbb8b30d47aa000bda3ef150d6e5f30170dbe76" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51899916" /></Metadata><TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ce318-101">XML 스키마 파일(.xsd) 집합을 CLR(공용 언어 런타임) 형식으로 변환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-101">Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-102">기존 웹 서비스와 상호 운용해야 하는 웹 서비스를 만들 경우 또는 XML 스키마에서 데이터 계약 형식을 만들려면 <xref:System.Runtime.Serialization.XsdDataContractImporter>를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-102">Use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</span></span> <span data-ttu-id="ce318-103"><xref:System.Runtime.Serialization.XsdDataContractImporter>는 XML 스키마 집합을 변환하고 선택한 프로그래밍 언어로 데이터 계약을 표현하는 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 형식을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> will transform a set of XML schemas and create the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types that represent the data contract in a selected programming language.</span></span> <span data-ttu-id="ce318-104">코드를 작성하려면 <xref:System.CodeDom> 네임스페이스의 클래스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-104">To create the code, use the classes in the <xref:System.CodeDom> namespace.</span></span>  
  
 <span data-ttu-id="ce318-105">반대로, CLR 형식으로 표시된 데이터를 통합하는 웹 서비스를 만들 경우나 다른 웹 서비스에서 사용할 각 데이터 형식의 XML 스키마를 내보내야 할 경우에는 <xref:System.Runtime.Serialization.XsdDataContractExporter> 클래스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-105">Conversely, use the <xref:System.Runtime.Serialization.XsdDataContractExporter> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</span></span> <span data-ttu-id="ce318-106">즉, <xref:System.Runtime.Serialization.XsdDataContractExporter>는 CLR 형식 집합을 XML 스키마 집합으로 변형합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-106">That is, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforms a set of CLR types into a set of XML schemas.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ce318-107">디자인 타임에 XML 스키마에서 CLR 형식을 생성 하려면 사용 합니다 [ServiceModel Metadata 유틸리티 도구 (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-107">To generate CLR types from XML schemas at design time, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span></span> <span data-ttu-id="ce318-108">XSD 파일에서 코드를 생성, 사용 된 `/dataContractOnly` 도구의 스위치.</span><span class="sxs-lookup"><span data-stu-id="ce318-108">To generated code from XSD files, use the `/dataContractOnly` switch of the tool.</span></span> <span data-ttu-id="ce318-109">프로세스를 더욱 효과적으로 제어해야 하거나 프로그래밍 방식으로 제어해야 할 경우 <xref:System.Runtime.Serialization.XsdDataContractImporter>를 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-109">You can also use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you need more control over the process or need to do it programmatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce318-110">다음 예제에서는 <xref:System.Xml.Schema.XmlSchemaSet>을 만들고 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 메서드를 호출하여 <xref:System.CodeDom.CodeCompileUnit>을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-110">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="ce318-111">그런 다음 <xref:System.CodeDom.CodeCompileUnit>을 사용하여 Visual C# 및 Visual Basic 코드 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-111">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md"><span data-ttu-id="ce318-112">데이터 계약 사용</span><span class="sxs-lookup"><span data-stu-id="ce318-112">Using Data Contracts</span></span></related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md"><span data-ttu-id="ce318-113">데이터 계약 Serializer에서 지원하는 형식</span><span class="sxs-lookup"><span data-stu-id="ce318-113">Types Supported by the Data Contract Serializer</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ce318-114"><see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-114">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce318-115"><see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-115">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><span data-ttu-id="ce318-116">코드를 저장하는 데 사용할 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-116">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to store the code.</span></span></param>
        <summary><span data-ttu-id="ce318-117">CLR 코드를 생성하는 데 사용할 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />을 사용하여 <see cref="T:System.CodeDom.CodeCompileUnit" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-117">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class with the <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to generate CLR code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-118">이 생성자를 사용하여 이미 생성된 <xref:System.CodeDom.CodeCompileUnit>에 코드를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-118">Use this constructor to add more code into a <xref:System.CodeDom.CodeCompileUnit> that has already been generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce318-119">다음 예제에서는 <xref:System.Xml.Schema.XmlSchemaSet>을 만들고 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 메서드를 호출하여 <xref:System.CodeDom.CodeCompileUnit>을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-119">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="ce318-120">그런 다음 <xref:System.CodeDom.CodeCompileUnit>을 사용하여 Visual C# 및 Visual Basic 코드 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-120">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ce318-121">스키마를 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-121">Gets a value that indicates whether the schemas can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-122">가져올 수 있는 형식에 대 한 자세한 내용은 참조 하세요. [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-122">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="ce318-123">변환할 스키마를 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-123">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <summary><span data-ttu-id="ce318-124"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 스키마를 <see cref="T:System.CodeDom.CodeCompileUnit" />로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-124">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="ce318-125">스키마를 데이터 계약 형식으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-125"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ce318-126">다음 예제에서는 <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> 메서드를 호출하여 <xref:System.CodeDom.CodeCompileUnit>을 생성할 수 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-126">The following example calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to determine whether the <xref:System.CodeDom.CodeCompileUnit> can be generated.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce318-127"><paramref name="schemas" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-127">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="ce318-128">가져오기와 관련된 데이터 계약이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-128">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="ce318-129">변환할 스키마를 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-129">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="typeNames"><span data-ttu-id="ce318-130">가져올 스키마 형식 집합을 나타내는 <see cref="T:System.Collections.Generic.ICollection`1" />의 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-130">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="ce318-131"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 지정한 형식 집합을 <see cref="T:System.CodeDom.CodeCompileUnit" />로 생성된 CLR 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-131">Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="ce318-132">스키마를 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-132"><see langword="true" /> if the schemas can be transformed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce318-133"><paramref name="schemas" /> 또는 <paramref name="typeNames" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-133">The <paramref name="schemas" /> or <paramref name="typeNames" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="ce318-134">가져오기와 관련된 데이터 계약이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-134">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="ce318-135">가져올 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-135">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to import.</span></span></param>
        <param name="element"><span data-ttu-id="ce318-136">스키마 집합에서 검사할 특정 <see cref="T:System.Xml.Schema.XmlSchemaElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-136">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement" /> to check in the set of schemas.</span></span></param>
        <summary><span data-ttu-id="ce318-137"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 특정 스키마 요소를 가져올 수 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-137">Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be imported.</span></span></summary>
        <returns><span data-ttu-id="ce318-138">요소를 가져올 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-138"><see langword="true" /> if the element can be imported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-139">이 메서드는 형식과 이 형식에서 참조한 모든 스키마 형식을 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-139">This method checks the type and all schema types referenced from it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce318-140"><paramref name="schemas" /> 또는 <paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-140">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="ce318-141">가져오기와 관련된 데이터 계약이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-141">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="ce318-142">스키마 표현을 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-142">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="ce318-143"><see cref="T:System.Collections.IList" />에서 가져와야 할 스키마 형식의 이름을 지정하는 <see cref="T:System.Xml.XmlQualifiedName" />의 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-143">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></param>
        <summary><span data-ttu-id="ce318-144"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 스키마를 <see cref="T:System.CodeDom.CodeCompileUnit" />로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-144">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="ce318-145">스키마를 데이터 계약 형식으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-145"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-146">가져올 수 있는 형식에 대 한 자세한 내용은 참조 하세요. [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-146">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce318-147"><paramref name="schemas" /> 또는 <paramref name="typeName" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-147">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="ce318-148">가져오기와 관련된 데이터 계약이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-148">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce318-149">생성된 CLR 형식을 저장하기 위해 사용되는 <see cref="T:System.CodeDom.CodeCompileUnit" />을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-149">Gets a <see cref="T:System.CodeDom.CodeCompileUnit" /> used for storing the CLR types generated.</span></span></summary>
        <value><span data-ttu-id="ce318-150">생성된 CLR 형식을 저장하는 데 사용되는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-150">A <see cref="T:System.CodeDom.CodeCompileUnit" /> used to store the CLR types generated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-151">생성된 모든 코드가 저장된 <xref:System.Runtime.Serialization.XsdDataContractImporter>에 액세스하려면 <xref:System.CodeDom.CodeCompileUnit>를 사용하여 스키마를 가져온 후 이 속성을 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-151">Call this property after importing schemas using the <xref:System.Runtime.Serialization.XsdDataContractImporter> to access the <xref:System.CodeDom.CodeCompileUnit> in which all the generated code is stored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ce318-152">다음 예제에서는 <xref:System.CodeDom.CodeCompileUnit>을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-152">The following example uses creates a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="ce318-153">그런 다음 <xref:System.CodeDom.CodeCompileUnit>을 사용하여 Visual C# 및 Visual Basic 코드 파일을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-153">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both a Visual C# and Visual Basic code file.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ce318-154">지정한 요소에 대한 <see cref="T:System.CodeDom.CodeTypeReference" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-154">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="ce318-155">검색할 스키마 형식을 지정하는 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-155">The <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the schema type to look up.</span></span></param>
        <summary><span data-ttu-id="ce318-156">지정한 <see cref="T:System.CodeDom.CodeTypeReference" />을 갖는 스키마 형식에 대해 생성된 CLR 형식에 대한 <see cref="T:System.Xml.XmlQualifiedName" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-156">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName" />.</span></span></summary>
        <returns><span data-ttu-id="ce318-157">지정한 <see cref="T:System.CodeDom.CodeTypeReference" />을 갖는 스키마 형식에 대해 생성된 CLR 형식에 대한 <paramref name="typeName" /> 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-157">A <see cref="T:System.CodeDom.CodeTypeReference" /> reference to the CLR type generated for the schema type with the <paramref name="typeName" /> specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-158"><xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 메서드를 호출한 후 생성된 CLR 형식에 대한 참조를 검색하려면 이 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-158">Use this method to look up the reference to a generated CLR type after calling the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span> <span data-ttu-id="ce318-159"><xref:System.CodeDom.CodeTypeReference>에는 생성된 형식의 이름이 포함되며 이 참조를 사용하여 <xref:System.CodeDom.CodeTypeDeclaration>에서 해당하는 <xref:System.CodeDom.CodeCompileUnit>을 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-159">The <xref:System.CodeDom.CodeTypeReference> contains the name of the generated type and can be used to look up the corresponding <xref:System.CodeDom.CodeTypeDeclaration> in the <xref:System.CodeDom.CodeCompileUnit>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="ce318-160">검색할 스키마 형식의 XML 정규화된 이름을 지정하는 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-160">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the XML qualified name of the schema type to look up.</span></span></param>
        <param name="element"><span data-ttu-id="ce318-161">XML 스키마의 요소를 지정하는 <see cref="T:System.Xml.Schema.XmlSchemaElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-161">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that specifies an element in an XML schema.</span></span></param>
        <summary><span data-ttu-id="ce318-162">지정한 XML 정규화 요소 및 스키마 요소에 대한 <see cref="T:System.CodeDom.CodeTypeReference" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-162">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified XML qualified element and schema element.</span></span></summary>
        <returns><span data-ttu-id="ce318-163">지정한 스키마 형식에 대해 생성된 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-163">A <see cref="T:System.CodeDom.CodeTypeReference" /> that represents the type that was generated for the specified schema type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-164">스키마 요소는 요소 범위에 지정된 형식에 관한 데이터에 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-164">The schema element is needed for data about the type that is specified at the element scope.</span></span> <span data-ttu-id="ce318-165">대표적인 예로 XSD 특성 `nillable`을 들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-165">The main example of this is the XSD attribute `nillable`.</span></span> <span data-ttu-id="ce318-166">스키마에서 `nillable` 특성을 `true`로 설정하면 포함된 스키마 요소에 지정되는 반면, null의 개념은 CLR 형식 <xref:System.Nullable%601>로 표현됩니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-166">In schema, setting `nillable` to `true` is specified on the containing schema element whereas the concept of null is expressed in the CLR type <xref:System.Nullable%601>.</span></span> <span data-ttu-id="ce318-167">이 요소는 가져오기 수행 시 요소 수준 정보를 검색하여 정확한 형식 참조를 반환할 수 있도록 하기 위해 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-167">The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</span></span>  
  
 <span data-ttu-id="ce318-168">WSDL을 가져올 때 각 매개 변수를 개별적으로 가져오므로 매개 변수 요소를 개별적으로 전달해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-168">When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="ce318-169">알려진 형식을 검색할 스키마 형식을 나타내는 <see cref="T:System.Xml.XmlQualifiedName" /> 입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-169">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the schema type to look up known types for.</span></span></param>
        <summary><span data-ttu-id="ce318-170">지정한 스키마 형식에 대한 코드를 만들 때 생성된 알려진 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" /> 개체 목록을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-170">Returns a list of <see cref="T:System.CodeDom.CodeTypeReference" /> objects that represents the known types generated when generating code for the specified schema type.</span></span></summary>
        <returns><span data-ttu-id="ce318-171"><see cref="T:System.Collections.Generic.IList`1" /> 형식의 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-171">A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.CodeDom.CodeTypeReference" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-172">스키마 형식에 대한 CLR 형식을 생성하면 스키마에 있는 모든 파생 형식에 대해 알려진 형식도 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-172">When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</span></span> <span data-ttu-id="ce318-173">대부분의 경우 이러한 알려진 형식은 특성을 사용하여 생성된 코드에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-173">In many cases, these known types are added using attributes to the generated code.</span></span> <span data-ttu-id="ce318-174">(예를 들어, 참조는 <xref:System.Runtime.Serialization.KnownTypeAttribute> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-174">(For example, see the <xref:System.Runtime.Serialization.KnownTypeAttribute> class.</span></span> <span data-ttu-id="ce318-175">그러나) 최상위 형식에 대 한 필요 생성 된 알려진 형식 집합을 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-175">) However, for the top-level type, there needs to be a way to return the set of known types generated.</span></span> <span data-ttu-id="ce318-176">이 메서드는 특정 스키마 형식에 대해 생성된 알려진 형식에 대한 <xref:System.CodeDom.CodeTypeReference>를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-176">This method returns the <xref:System.CodeDom.CodeTypeReference> for known types that were generated for a specific schema type.</span></span>  
  
 <span data-ttu-id="ce318-177">자세한 내용은 [데이터 계약 알려진 형식을](~/docs/framework/wcf/feature-details/data-contract-known-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-177">For more information, see [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/1a0baea1-27b7-470d-9136-5bbad86c4337"><span data-ttu-id="ce318-178">데이터 계약 알려진 형식</span><span class="sxs-lookup"><span data-stu-id="ce318-178">Data Contract Known Types</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ce318-179">CLR 코드를 생성하는 데 사용된 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 XML 스키마 집합을 변형합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-179">Transforms a set of XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> used to generate CLR code.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="ce318-180">CLR 형식을 생성할 스키마 표현을 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-180">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations to generate CLR types for.</span></span></param>
        <summary><span data-ttu-id="ce318-181"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 지정된 XML 스키마 집합을 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-181">Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ce318-182">다음 예제에서는 <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> 메서드를 사용하여 스키마 집합을 가져올 수 있는지 여부를 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-182">The following example uses the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to test whether a set of schemas can be imported.</span></span> <span data-ttu-id="ce318-183"><xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> 메서드가 `true`를 반환할 경우 이 코드는 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-183">If the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method returns `true`, the code invokes the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce318-184"><paramref name="schemas" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-184">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="ce318-185">스키마 표현을 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-185">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeNames"><span data-ttu-id="ce318-186">가져올 스키마 형식 집합을 나타내는 <see cref="T:System.Xml.XmlQualifiedName" />의 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-186">A <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Xml.XmlQualifiedName" />) that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="ce318-187"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 지정한 스키마 형식 집합을, <see cref="T:System.CodeDom.CodeCompileUnit" />으로 생성된 CLR 형식으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-187">Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="ce318-188">변형할 스키마를 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-188">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="element"><span data-ttu-id="ce318-189">변형할 특정 스키마 요소를 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-189">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that represents the specific schema element to transform.</span></span></param>
        <summary><span data-ttu-id="ce318-190">지정한 XML 스키마 집합에서 지정한 스키마 요소를 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 변형하고, 지정한 요소의 데이터 계약 이름을 나타내는 <see cref="T:System.Xml.XmlQualifiedName" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-190">Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> and returns an <see cref="T:System.Xml.XmlQualifiedName" /> that represents the data contract name for the specified element.</span></span></summary>
        <returns><span data-ttu-id="ce318-191">지정한 요소를 나타내는 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-191">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce318-192"><paramref name="schemas" /> 또는 <paramref name="element" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-192">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="ce318-193">스키마 표현을 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-193">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="ce318-194">가져올 특정 스키마 형식을 나타내는 <see cref="T:System.Xml.XmlQualifiedName" /> 입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-194">A <see cref="T:System.Xml.XmlQualifiedName" /> that represents a specific schema type to import.</span></span></param>
        <summary><span data-ttu-id="ce318-195"><see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 지정한 XML 스키마 형식을 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 변형합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-195">Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce318-196"><paramref name="schemas" /> 또는 <paramref name="typeName" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ce318-196">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce318-197">가져오기 작업에 대해 설정할 수 있는 옵션이 포함된 <see cref="T:System.Runtime.Serialization.ImportOptions" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-197">Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options for the import operation.</span></span></summary>
        <value><span data-ttu-id="ce318-198">설정할 수 있는 옵션을 포함하는 <see cref="T:System.Runtime.Serialization.ImportOptions" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-198">A <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce318-199">스키마 가져오기 중에 CLR 형식이 생성되는 방식을 사용자 지정하려면 <xref:System.Runtime.Serialization.ImportOptions> 클래스를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ce318-199">Use the <xref:System.Runtime.Serialization.ImportOptions> class to customize how the CLR types are generated during schema import.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>