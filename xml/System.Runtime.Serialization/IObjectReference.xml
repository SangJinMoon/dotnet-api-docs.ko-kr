<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IObjectReference.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52ff5178867c9d901635fdb355e410b6824df8a2b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ff5178867c9d901635fdb355e410b6824df8a2b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.IObjectReference">
          <source>Indicates that the current interface implementer is a reference to another object.</source>
          <target state="translated">현재 인터페이스 구현자가 다른 개체에 대한 참조임을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.IObjectReference">
          <source>Implement this interface on objects that are references to a different object, which cannot be resolved until the current object is completely restored.</source>
          <target state="translated">현재 개체가 완전히 복원 될 때까지 확인할 수 없습니다 다른 개체에 대 한 참조 된 개체에서이 인터페이스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.IObjectReference">
          <source>During the fixup stage, any object implementing <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IObjectReference" /&gt;</ph> is queried for its real object and that object is inserted into the graph.</source>
          <target state="translated">픽스업 단계 구현 하는 개체 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.IObjectReference" /&gt;</ph> 는 실시간 쿼리 하는 개체와 해당 개체 그래프에 삽입 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.IObjectReference">
          <source>Fixup refers to the process of finalizing references not already completed during the object deserialization process.</source>
          <target state="translated">픽스업 개체 deserialization 프로세스 동안 완료 된 아직 참조를 완료 하는 중의 프로세스를 말합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> from which the current object is deserialized.</source>
          <target state="translated">현재 개체가 deserialize되는 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Returns the real object that should be deserialized, rather than the object that the serialized stream specifies.</source>
          <target state="translated">serialize된 스트림이 지정하는 개체가 아니라 deserialize해야 하는 실제 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Returns the actual object that is put into the graph.</source>
          <target state="translated">그래프에 배치된 실제 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This method is useful in a remoting situation where you serialize a proxy-creator object, not an actual object.</source>
          <target state="translated">이 메서드는 개체가 아닌 실제 개체를 프록시 생성자를 serialize 하면 원격 상황에서 유용 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>When the proxy-creator object is deserialized, deserialization calls its <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A&gt;</ph> method.</source>
          <target state="translated">프록시 생성자 개체를 deserialize 하는 호출을 deserialization 해당 <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>At this point, the proxy-creator object creates a new instance of the proxy object that refers back to the original actual object, perhaps on a remote computer.</source>
          <target state="translated">이 시점에서 프록시 생성자 개체 다시 원래 실제 개체에 원격 컴퓨터에서 참조 하는 프록시 개체의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Finally, the proxy-creator object is discarded and reclaimed later by garbage collection.</source>
          <target state="translated">마지막으로, 프록시 생성자 개체를 삭제 하 고 나중에 가비지 수집에서 회수 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>For example, consider how <ph id="ph1">&lt;xref:System.Type&gt;</ph> objects are serialized.</source>
          <target state="translated">예를 들어 방법을 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 개체는 직렬화 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>Instead of transmitting the data from the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object, the system transmits a holder object with the name of the type object and information on the assembly where it is found in an object implementing <ph id="ph2">&lt;xref:System.Runtime.Serialization.IObjectReference&gt;</ph>.</source>
          <target state="translated">데이터를 전송 하는 대신는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 개체를 구현 하는 개체에 있는 어셈블리에 대 한 정보 및 형식 개체의 이름으로 소유자 개체를 전송 하는 시스템 <ph id="ph2">&lt;xref:System.Runtime.Serialization.IObjectReference&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>When both the type name and assembly name are available, the deserialization infrastructure calls <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A&gt;</ph> on the holder object that has been transmitted.</source>
          <target state="translated">형식 이름 및 어셈블리 이름 모두를 사용할 수 있는 경우 역직렬화 인프라 호출 <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A&gt;</ph> 전송 된 소유자 개체에 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This holder returns the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that is inserted into the graph.</source>
          <target state="translated">이 보유자가 반환 된 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 그래프에 삽입 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>This method is protected by a <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType&gt;</ph> for the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType&gt;</ph> specified.</source>
          <target state="translated">이 메서드는에 의해 보호 되는 <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType&gt;</ph> 에 대 한는 <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType&gt;</ph> 지정 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
          <source>The call will not work on a medium trusted server.</source>
          <target state="translated">신뢰 수준이 보통인 서버에 대해서는 호출할 수 없습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>