<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISerializable.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e472d101330ad3fe07ac415fe5b90af0a16de62b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e472d101330ad3fe07ac415fe5b90af0a16de62b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Allows an object to control its own serialization and deserialization.</source>
          <target state="translated">개체가 자체 serialization 및 deserialization을 제어할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Any class that might be serialized must be marked with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph>.</source>
          <target state="translated">Serialize 할 수 있는 모든 클래스도 표시 되어야 합니다는 <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>If a class needs to control its serialization process, it can implement the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.</source>
          <target state="translated">구현할 수 있는 클래스를 해당 serialization 프로세스를 제어 하는 경우는 <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> at serialization time and populates the supplied <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with all the data required to represent the object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> 호출은 <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> serialization 시 제공 된 정보를 표시 하 고 <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> 개체를 나타내는 데 필요한 모든 데이터를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> creates a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> with the type of the object in the graph.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph> 만듭니다는 <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> 그래프에서 개체 유형을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Objects that need to send proxies for themselves can use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt;</ph> methods on <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> to change the transmitted information.</source>
          <target state="translated">자체 צ ְ ײ에 대 한 프록시를 전송 해야 하는 개체는 <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A&gt;</ph> 에 대 한 메서드 <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> 전송 된 정보를 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>.</source>
          <target state="translated">클래스 상속의 경우 구현 하는 기본 클래스에서 파생 되는 클래스를 serialize 할 수는 <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>In this case, the derived class should call the base class implementation of <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> inside its implementation of <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>.</source>
          <target state="translated">파생된 클래스의 기본 클래스 구현을 호출 해야이 경우 <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> 내 <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Otherwise, the data from the base class will not be serialized.</source>
          <target state="translated">그렇지 않은 경우 기본 클래스에서 데이터 serialize 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface implies a constructor with the signature constructor (<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> information, <ph id="ph3">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> context).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> 서명 생성자를 가진 생성자를 암시 하는 인터페이스 (<ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> 내용은 <ph id="ph3">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> 컨텍스트).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>At deserialization time, the current constructor is called only after the data in the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> has been deserialized by the formatter.</source>
          <target state="translated">Deserialization 시 현재 생성자의 데이터를 한 후에 호출 됩니다는 <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> 포맷터에서 deserialize 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>In general, this constructor should be protected if the class is not sealed.</source>
          <target state="translated">일반적으로 클래스가 봉인 하는 경우이 생성자를 보호 해야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The order in which objects are deserialized cannot be guaranteed.</source>
          <target state="translated">개체가 deserialize 되는 순서를 보장할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>For example, if one type references a type that has not been deserialized yet, an exception will occur.</source>
          <target state="translated">예를 들어, 한 형식 아직 deserialize 되지 않습니다 형식을 참조 하 고, 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>If you are creating types that have such dependencies, you can work around the problem by implementing the <ph id="ph1">`IDeserializationCallback`</ph> interface and the <ph id="ph2">`OnDeserialization`</ph> method.</source>
          <target state="translated">구현 하 여 문제 해결할 수 이러한 종속성이 있는 형식을 만드는 경우는 <ph id="ph1">`IDeserializationCallback`</ph> 인터페이스 및 <ph id="ph2">`OnDeserialization`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The serialization architecture handles object types that extend <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> the same as types that extend <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">확장 된 개체 유형을 처리 하는 serialization 아키텍처 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 확장 하는 형식은 동일 <ph id="ph2">&lt;xref:System.Object&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>These types can be marked with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> and implement the <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface as any other object type.</source>
          <target state="translated">이러한 형식은로 표시할 수 있습니다는 <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> 구현 하 고는 <ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> 다른 개체 형식으로 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Their object state will be captured and persisted onto the stream.</source>
          <target state="translated">해당 개체의 상태 캡처되고 스트림에 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>When these types are being used through <ph id="ph1">&lt;xref:System.Runtime.Remoting&gt;</ph>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
          <target state="translated">이러한 형식을 통해 사용 중인 경우 <ph id="ph1">&lt;xref:System.Runtime.Remoting&gt;</ph>, 일반적인 serialization을 중지 하 고 대신에 대 한 프록시가 serialize 하는 서로게이트를 제공 하는 원격 인프라는 <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.</source>
          <target state="translated">서로게이트를 serialize 하 고 특정 유형의 개체를 역직렬화 하는 방법을 알고 있는 도우미입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The proxy, invisible to the user in most cases, will be of type <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph>.</source>
          <target state="translated">대부분의 경우에서 사용자에 게 보이지 않는 프록시 형식이 됩니다 <ph id="ph1">&lt;xref:System.Runtime.Remoting.ObjRef&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>.</source>
          <target state="translated">일반적인 디자인 패턴으로는 것은 serializable 특성으로 표시 되어야 하 고 확장 하는 클래스에 대 한 일반적인 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.</source>
          <target state="translated">개발자는 이러한 두 가지 특성을 결합 하는 경우 가능한 직렬화 및 원격 처리 시나리오에 대 한 신중 하 게 생각해 야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>One example where this might be applicable is with a <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>.</source>
          <target state="translated">사용 하 게 활용할 수 적용 하는 한 가지 예는 한 <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>While the base class of <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> (<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>) extends from <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph>, it is possible to capture the state of a <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> and restore it at will.</source>
          <target state="translated">기본 클래스는 동안 <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> (<ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>)에서 확장 <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph>의 상태를 캡처하고자 할 수는 <ph id="ph4">&lt;xref:System.IO.MemoryStream&gt;</ph> 를 복원 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.</source>
          <target state="translated">따라서이 스트림의 상태를 데이터베이스에 serialize 및 시간에는 나중에 복원 하는 의미 있는 수 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>However, when used through remoting, an object of this type would be proxied.</source>
          <target state="translated">그러나 원격 서비스를 통해 사용 하는 경우이 형식의 개체 프록시 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>For more information about serialization of classes that extend <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, see <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;</ph>.</source>
          <target state="translated">확장 하는 클래스의 serialization에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, 참조 <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>For more information about implementing <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>, see <bpt id="p1">[</bpt>Custom Serialization<ept id="p1">](~/docs/standard/serialization/custom-serialization.md)</ept>.</source>
          <target state="translated">구현에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>, 참조 <bpt id="p1">[</bpt>사용자 지정 Serialization<ept id="p1">](~/docs/standard/serialization/custom-serialization.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface to define custom serialization behavior for a class.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> 인터페이스 클래스에 대 한 사용자 지정 serialization 동작을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.ISerializable">
          <source>Implement this interface to allow an object to take part in its own serialization and deserialization.</source>
          <target state="translated">개체가 자체 serialization 및 deserialization에 참여할 수 있도록 하려면이 인터페이스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> to populate with data.</source>
          <target state="translated">데이터로 채울 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination (see <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>) for this serialization.</source>
          <target state="translated">이 serialization에 대한 대상입니다(<ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 참조).</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> with the data needed to serialize the target object.</source>
          <target state="translated">대상 개체를 직렬화하는 데 필요한 데이터로 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph>를 채웁니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Any objects that are included in the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> are automatically tracked and serialized by the formatter.</source>
          <target state="translated">에 포함 된 모든 개체는 <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> 자동으로 추적 되 고 포맷터에 의해 serialize 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Code that calls <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> requires the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> for providing serialization services.</source>
          <target state="translated">호출 하는 코드 <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> 필요는 <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> serialization 서비스를 제공 하는 데 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration: <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>It is not guaranteed that this method will be called only once per object instance during serialization.</source>
          <target state="translated">이 메서드가 전파 직렬화 하는 동안의 개체 인스턴스당 한 번만 호출할 수는 보장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</source>
          <target state="translated">따라서 해당 동작이 호출 되는 횟수에 관계 없이 동일 됩니다 하는 방식으로 메서드를 구현 해야 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> method to set alternate values for a serialized object.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A&gt;</ph> 메서드는 직렬화 된 개체에 대 한 대체 값을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The code uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> class to store the alternate values when the object is serialized.</source>
          <target state="translated">코드를 사용 하 여는 <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> 개체가 serialize 되는 경우 대체 값을 저장 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Conversely, when the constructor of the <ph id="ph1">`Person`</ph> class is called during deserialization, the alternatve values are retrieved using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A&gt;</ph> method and reassigned to the object's fields.</source>
          <target state="translated">반대로,의 생성자는 <ph id="ph1">`Person`</ph> 클래스 역직렬화 하는 동안 호출 되 면 사용 하 여 대체 값은 검색에서 <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A&gt;</ph> 메서드 개체의 필드에 할당 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>