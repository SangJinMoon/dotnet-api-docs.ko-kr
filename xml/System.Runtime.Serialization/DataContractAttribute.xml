<Type Name="DataContractAttribute" FullName="System.Runtime.Serialization.DataContractAttribute">
  <TypeSignature Language="C#" Value="public sealed class DataContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.DataContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataContractAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="81e3e-101">형식이 데이터 계약을 정의하거나 구현하며, <see cref="T:System.Runtime.Serialization.DataContractSerializer" />와 같은 serializer를 통해 serialize할 수 있도록 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-101">Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</span></span> <span data-ttu-id="81e3e-102">형식을 serialize할 수 있게 만들려면 형식 작성자가 형식에 대해 데이터 계약을 정의해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-102">To make their type serializable, type authors must define a data contract for their type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81e3e-103"><xref:System.Runtime.Serialization.DataContractAttribute>을 통한 serialization 및 deserialization 작업에 사용되는 형식(클래스, 구조체, 열거형)에 <xref:System.Runtime.Serialization.DataContractSerializer> 특성을 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-103">Apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <xref:System.Runtime.Serialization.DataContractSerializer>.</span></span> <span data-ttu-id="81e3e-104">[!INCLUDE[indigo1](~/includes/indigo1-md.md)] 인프라를 사용하여 메시지를 보내거나 받는 경우 메시지 내에 전송되는 데이터를 보유하고 조작하는 모든 클래스에도 <xref:System.Runtime.Serialization.DataContractAttribute>를 적용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-104">If you send or receive messages by using the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] infrastructure, you should also apply the <xref:System.Runtime.Serialization.DataContractAttribute> to any classes that hold and manipulate data sent in messages.</span></span> <span data-ttu-id="81e3e-105">데이터 계약에 대 한 자세한 내용은 참조 [를 사용 하 여 데이터 계약](~/docs/framework/wcf/feature-details/using-data-contracts.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-105">For more information about data contracts, see [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
 <span data-ttu-id="81e3e-106">또한 serialize하려는 값을 보유하는 필드, 속성, 이벤트에도 <xref:System.Runtime.Serialization.DataMemberAttribute>를 적용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-106">You must also apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any field, property, or event that holds values you want to serialize.</span></span> <span data-ttu-id="81e3e-107"><xref:System.Runtime.Serialization.DataContractAttribute>를 적용하면 명시적으로 <xref:System.Runtime.Serialization.DataContractSerializer>를 사용하여 데이터를 serialize 및 deserialize할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-107">By applying the <xref:System.Runtime.Serialization.DataContractAttribute>, you explicitly enable the <xref:System.Runtime.Serialization.DataContractSerializer> to serialize and deserialize the data.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="81e3e-108"><xref:System.Runtime.Serialization.DataMemberAttribute>는 private 필드에 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-108">You can apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to private fields.</span></span> <span data-ttu-id="81e3e-109">private 필드인 경우에도 필드에서 반환한 데이터는 serialize 및 deserialize되므로 악의적인 사용자나 프로세스가 보거나 가로챌 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-109">Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.</span></span>  
  
 <span data-ttu-id="81e3e-110">데이터 계약에 대 한 자세한 내용은에 나열 된 항목을 참조 하십시오. [를 사용 하 여 데이터 계약](~/docs/framework/wcf/feature-details/using-data-contracts.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-110">For more information about data contracts, see the topics listed in [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
## <a name="data-contracts"></a><span data-ttu-id="81e3e-111">데이터 계약</span><span class="sxs-lookup"><span data-stu-id="81e3e-111">Data Contracts</span></span>  
 <span data-ttu-id="81e3e-112">A *데이터 계약* 은 각 필드에 대 한 이름 및 데이터 형식과 필드 집합의 추상 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-112">A *data contract* is an abstract description of a set of fields with a name and data type for each field.</span></span> <span data-ttu-id="81e3e-113">데이터 계약은 여러 플랫폼의 서비스가 상호 운용할 수 있도록 하기 위해 단일 구현의 외부에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-113">The data contract exists outside of any single implementation to allow services on different platforms to interoperate.</span></span> <span data-ttu-id="81e3e-114">서비스 간에 전달되는 데이터가 동일한 계약을 따르기만 하면 모든 서비스에서 데이터를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-114">As long as the data passed between the services conforms to the same contract, all the services can process the data.</span></span> <span data-ttu-id="81e3e-115">이러한 처리는 라고도 *느슨하게 결합 된 시스템*합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-115">This processing is also known as a *loosely coupled system*.</span></span> <span data-ttu-id="81e3e-116">또한 데이터 계약은 응용 프로그램에서 데이터를 처리할 수 있도록 데이터를 전달해야 하는 방법을 지정한다는 점에서 인터페이스와도 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-116">A data contract is also similar to an interface in that the contract specifies how data must be delivered so that it can be processed by an application.</span></span> <span data-ttu-id="81e3e-117">예를 들어, 데이터 계약은 "FirstName" 및 "LastName"이라는 두 개의 텍스트 필드를 포함하는 "Person"이라는 데이터 형식을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-117">For example, the data contract may call for a data type named "Person" that has two text fields, named "FirstName" and "LastName".</span></span> <span data-ttu-id="81e3e-118">데이터 계약을 만들려면 클래스에 <xref:System.Runtime.Serialization.DataContractAttribute>를 적용하고, serialize해야 할 필드나 속성에 <xref:System.Runtime.Serialization.DataMemberAttribute>를 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-118">To create a data contract, apply the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to any fields or properties that must be serialized.</span></span> <span data-ttu-id="81e3e-119">serialize할 때 데이터는 해당 형식에 암시적으로 작성된 데이터 계약을 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-119">When serialized, the data conforms to the data contract that is implicitly built into the type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81e3e-120">데이터 계약은 상속 동작에 있어 실제 인터페이스와 상당히 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-120">A data contract differs significantly from an actual interface in its inheritance behavior.</span></span> <span data-ttu-id="81e3e-121">인터페이스는 파생 형식에서 상속됩니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-121">Interfaces are inherited by any derived types.</span></span> <span data-ttu-id="81e3e-122"><xref:System.Runtime.Serialization.DataContractAttribute>를 기본 클래스에 적용하면 파생 형식이 특성이나 동작을 상속하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-122">When you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a base class, the derived types do not inherit the attribute or the behavior.</span></span> <span data-ttu-id="81e3e-123">하지만 파생 형식에 데이터 계약이 있는 경우 기본 클래스의 데이터 멤버가 serialize됩니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-123">However, if a derived type has a data contract, the data members of the base class are serialized.</span></span> <span data-ttu-id="81e3e-124">단, <xref:System.Runtime.Serialization.DataMemberAttribute>를 파생 클래스의 새 멤버에 적용하여 이 멤버를 serialize할 수 있게 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-124">However, you must apply the <xref:System.Runtime.Serialization.DataMemberAttribute> to new members in a derived class to make them serializable.</span></span>  
  
## <a name="xml-schema-documents-and-the-svcutil-tool"></a><span data-ttu-id="81e3e-125">XML 스키마 문서 및 SvcUtil 도구</span><span class="sxs-lookup"><span data-stu-id="81e3e-125">XML Schema Documents and the SvcUtil Tool</span></span>  
 <span data-ttu-id="81e3e-126">다른 서비스와 데이터를 교환할 경우 데이터 계약을 설명해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-126">If you are exchanging data with other services, you must describe the data contract.</span></span> <span data-ttu-id="81e3e-127">현재 버전의 <xref:System.Runtime.Serialization.DataContractSerializer>는 XML 스키마를 사용하여 데이터 계약을 정의할 수 있으며,</span><span class="sxs-lookup"><span data-stu-id="81e3e-127">For the current version of the <xref:System.Runtime.Serialization.DataContractSerializer>, an XML schema can be used to define data contracts.</span></span> <span data-ttu-id="81e3e-128">다른 메타데이터/설명 형식을 사용할 수도 있습니다. 응용 프로그램에서 XML 스키마를 만들려면 사용는 [ServiceModel Metadata 유틸리티 도구 (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) 와 **/dconly** 명령줄 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-128">(Other forms of metadata/description could be used for the same purpose.) To create an XML schema from your application, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) with the **/dconly** command line option.</span></span> <span data-ttu-id="81e3e-129">도구에 대한 입력이 어셈블리일 경우 기본적으로 이 도구는 해당 어셈블리에서 발견된 모든 데이터 계약 형식을 정의하는 XML 스키마 집합을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-129">When the input to the tool is an assembly, by default, the tool generates a set of XML schemas that define all the data contract types found in that assembly.</span></span> <span data-ttu-id="81e3e-130">반대로 데이터 계약으로 표현할 수 있는 구문을 사용하는 XML 스키마의 요구 사항을 따르는 Visual Basic 또는 C# 클래스 정의를 Svcutil.exe 도구를 사용하여 만들 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-130">Conversely, you can also use the Svcutil.exe tool to create Visual Basic or C# class definitions that conform to the requirements of XML schemas that use constructs that can be expressed by data contracts.</span></span> <span data-ttu-id="81e3e-131">이 경우에 **/dconly** 명령줄 옵션이 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-131">In this case, the **/dconly** command line option is not required.</span></span>  
  
 <span data-ttu-id="81e3e-132">Svcutil.exe 도구에 입력하는 내용이 XML 스키마인 경우에는 기본적으로 클래스 집합이 생성됩니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-132">If the input to the Svcutil.exe tool is an XML schema, by default, the tool creates a set of classes.</span></span> <span data-ttu-id="81e3e-133">그러한 클래스를 검사하면 <xref:System.Runtime.Serialization.DataContractAttribute>가 적용되었음을 알 수 있으며,</span><span class="sxs-lookup"><span data-stu-id="81e3e-133">If you examine those classes, you find that the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied.</span></span> <span data-ttu-id="81e3e-134">그러한 클래스를 사용하여 다른 서비스와 교환해야 할 데이터를 처리하는 새로운 응용 프로그램을 작성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-134">You can use those classes to create a new application to process data that must be exchanged with other services.</span></span>  
  
 <span data-ttu-id="81e3e-135">WSDL(웹 서비스 기술 언어) 문서를 반환하는 끝점에 대해 이 도구를 실행하여 [!INCLUDE[indigo1](~/includes/indigo1-md.md)] 클라이언트를 작성하는 코드 및 구성을 자동으로 생성할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-135">You can also run the tool against an endpoint that returns a Web Services Description Language (WSDL) document to automatically generate the code and configuration to create an [!INCLUDE[indigo1](~/includes/indigo1-md.md)] client.</span></span> <span data-ttu-id="81e3e-136">생성된 코드에는 <xref:System.Runtime.Serialization.DataContractAttribute>로 표시된 형식이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-136">The generated code includes types that are marked with the <xref:System.Runtime.Serialization.DataContractAttribute>.</span></span>  
  
## <a name="reusing-existing-types"></a><span data-ttu-id="81e3e-137">기존 형식 다시 사용</span><span class="sxs-lookup"><span data-stu-id="81e3e-137">Reusing Existing Types</span></span>  
 <span data-ttu-id="81e3e-138">데이터 계약의 두 가지 기본 요구 사항은 안정적인 이름과 멤버 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-138">A data contract has two basic requirements: a stable name and a list of members.</span></span> <span data-ttu-id="81e3e-139">안정적인 이름은 네임스페이스 URI(Uniform Resource Identifier)와 계약의 로컬 이름으로 구성됩니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-139">The stable name consists of the namespace uniform resource identifier (URI) and the local name of the contract.</span></span> <span data-ttu-id="81e3e-140">기본적으로 적용 하는 경우는 <xref:System.Runtime.Serialization.DataContractAttribute> 는 클래스를 사용 하 여 클래스 이름을 해당 클래스의 네임 스페이스 및 로컬 이름으로 (접두사로 "http://schemas.datacontract.org/2004/07/")의 네임 스페이스 URI로 합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-140">By default, when you apply the <xref:System.Runtime.Serialization.DataContractAttribute> to a class, it uses the class name as the local name and the class's namespace (prefixed with "http://schemas.datacontract.org/2004/07/") as the namespace URI.</span></span> <span data-ttu-id="81e3e-141"><xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 및 <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 속성을 설정하여 기본값을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-141">You can override the defaults by setting the <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> properties.</span></span> <span data-ttu-id="81e3e-142">또한 <xref:System.Runtime.Serialization.ContractNamespaceAttribute>를 네임스페이스에 적용하여 네임스페이스를 변경할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-142">You can also change the namespace by applying the <xref:System.Runtime.Serialization.ContractNamespaceAttribute> to the namespace.</span></span> <span data-ttu-id="81e3e-143">필요에 따라 정확히 데이터를 처리하지만 네임스페이스 및 클래스 이름이 데이터 계약과 다른 기존 형식이 있을 때 이 기능을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-143">Use this capability when you have an existing type that processes data exactly as you require but has a different namespace and class name from the data contract.</span></span> <span data-ttu-id="81e3e-144">기본값을 재정의하면 기존 형식을 다시 사용할 수 있으며 serialize된 데이터가 데이터 계약을 따르도록 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-144">By overriding the default values, you can reuse your existing type and have the serialized data conform to the data contract.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="81e3e-145">어떤 코드에서든 `DataContract` 대신에 간결하게 <xref:System.Runtime.Serialization.DataContractAttribute>를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-145">In any code, you can use the word `DataContract` instead of the longer <xref:System.Runtime.Serialization.DataContractAttribute>.</span></span>  
  
## <a name="versioning"></a><span data-ttu-id="81e3e-146">버전 관리</span><span class="sxs-lookup"><span data-stu-id="81e3e-146">Versioning</span></span>  
 <span data-ttu-id="81e3e-147">데이터 계약은 해당 데이터 계약의 후속 버전도 수용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-147">A data contract can also accommodate later versions of itself.</span></span> <span data-ttu-id="81e3e-148">즉, 계약의 후속 버전에 추가 데이터가 포함되면 이 데이터가 저장되고 전송자에게 그대로 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-148">That is, when a later version of the contract includes extra data, that data is stored and returned to a sender untouched.</span></span> <span data-ttu-id="81e3e-149">이렇게 하려면 <xref:System.Runtime.Serialization.IExtensibleDataObject> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-149">To do this, implement the <xref:System.Runtime.Serialization.IExtensibleDataObject> interface.</span></span>  
  
 <span data-ttu-id="81e3e-150">버전 관리에 대 한 자세한 내용은 참조 [데이터 계약 버전 관리](~/docs/framework/wcf/feature-details/data-contract-versioning.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-150">For more information about versioning, see [Data Contract Versioning](~/docs/framework/wcf/feature-details/data-contract-versioning.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81e3e-151">다음 예제에서는 `Person`가 적용된 <xref:System.Runtime.Serialization.DataContractAttribute>이라는 클래스를 serialize 및 deserialize합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-151">The following example serializes and deserializes a class named `Person` to which the <xref:System.Runtime.Serialization.DataContractAttribute> has been applied.</span></span> <span data-ttu-id="81e3e-152"><xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 및 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 속성은 기본 설정을 재정의하는 값으로 설정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-152">Note that the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> and <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> properties have been set to values that override the default settings.</span></span>  
  
 [!code-csharp[DataContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractattribute/cs/overview.cs#1)]
 [!code-vb[DataContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/datacontractattribute/vb/overview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.IExtensibleDataObject" />
    <altmember cref="T:System.Runtime.Serialization.ExtensionDataObject" />
    <altmember cref="T:System.Runtime.Serialization.DataContractSerializer" />
    <altmember cref="T:System.Runtime.Serialization.DataMemberAttribute" />
    <altmember cref="T:System.Runtime.Serialization.ISerializable" />
    <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.DataContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="81e3e-153"><see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-153">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNameSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameSetExplicitly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81e3e-154"><see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" />이 명시적으로 설정되었는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-154">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /> has been explicitly set.</span></span></summary>
        <value><span data-ttu-id="81e3e-155">반환 <see langword="true" /> 이름에 설정 된 경우 명시적으로 그렇지 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-155">Returns <see langword="true" /> if the name has been explicitly set; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNamespaceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNamespaceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNamespaceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNamespaceSetExplicitly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81e3e-156"><see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" />이 명시적으로 설정되었는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-156">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /> has been explicitly set.</span></span></summary>
        <value><span data-ttu-id="81e3e-157">반환 <see langword="true" /> 네임 스페이스에 설정 된 경우 명시적으로 그렇지 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-157">Returns <see langword="true" /> if the namespace has been explicitly set; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public bool IsReference { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReference" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReference" />
      <MemberSignature Language="VB.NET" Value="Public Property IsReference As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReference { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81e3e-158">개체 참조 데이터를 유지할지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-158">Gets or sets a value that indicates whether to preserve object reference data.</span></span></summary>
        <value>
          <span data-ttu-id="81e3e-159">표준 XML을 사용하여 개체 참조 데이터를 유지하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-159"><see langword="true" /> to keep object reference data using standard XML; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="81e3e-160">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-160">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81e3e-161">개체 참조 정보를 유지하는 XML 구문을 삽입하도록 `IsReference`에 지시하려면 <xref:System.Runtime.Serialization.DataContractSerializer> 속성을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-161">Use the `IsReference` property to instruct the <xref:System.Runtime.Serialization.DataContractSerializer> to insert XML constructs that preserve object reference information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences" />
      </Docs>
    </Member>
    <Member MemberName="IsReferenceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsReferenceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReferenceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReferenceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReferenceSetExplicitly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81e3e-162"><see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" />이 명시적으로 설정되었는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-162">Gets whether <see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /> has been explicitly set.</span></span></summary>
        <value>
          <span data-ttu-id="81e3e-163"><see langword="true" /> 참조가 명시적으로 설정 된; 경우 그렇지 않으면 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-163"><see langword="true" /> if the reference has been explicitly set; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81e3e-164">형식의 데이터 계약 이름을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-164">Gets or sets the name of the data contract for the type.</span></span></summary>
        <value><span data-ttu-id="81e3e-165">데이터 계약의 로컬 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-165">The local name of a data contract.</span></span> <span data-ttu-id="81e3e-166">기본값은 특성이 적용되는 클래스의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-166">The default is the name of the class that the attribute is applied to.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81e3e-167"><xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 속성은 데이터 계약에 이름을 지정하는 데 사용되며, 이 이름은 XML 스키마에서 형식의 이름이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-167">The <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property is used to give a name to a data contract, which is the name of the type in XML schema.</span></span> <span data-ttu-id="81e3e-168">자세한 내용은 참조 [데이터 계약 이름을](~/docs/framework/wcf/feature-details/data-contract-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-168">For more information, see [Data Contract Names](~/docs/framework/wcf/feature-details/data-contract-names.md).</span></span>  
  
 <span data-ttu-id="81e3e-169">기본적으로 데이터 계약 이름은 <xref:System.Runtime.Serialization.DataContractAttribute>가 적용되는 형식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-169">By default, the name of a data contract is the name of the type that the <xref:System.Runtime.Serialization.DataContractAttribute> is applied to.</span></span> <span data-ttu-id="81e3e-170">그러나 이 기본 이름을 변경해야 할 경우가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-170">However, there may be reasons to change this default name.</span></span> <span data-ttu-id="81e3e-171">첫째, 기존 형식에서 기존 데이터 계약을 따라야 하는 데이터를 처리할 수 있도록 하기 위해서입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-171">One reason is to allow an existing type to process data that must conform to an existing data contract.</span></span> <span data-ttu-id="81e3e-172">예를 들어 `Person`이라는 형식 이름이 있지만 XML 스키마에 구현된 데이터 계약의 이름은 `Customer`여야 할 경우가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-172">For example, there exists a type named `Person` but the data contract, embodied in an XML schema, requires that the name be `Customer`.</span></span> <span data-ttu-id="81e3e-173">이 경우 속성 값을 `Customer`로 설정하여 계약을 충족시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-173">The contract can be satisfied by setting the property value to `Customer`.</span></span>  
  
 <span data-ttu-id="81e3e-174">둘째, 형식 이름으로는 부적합한 이름을 생성할 수 있도록 하기 위해서입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-174">A second reason is to allow the generation of names that are invalid as type names.</span></span> <span data-ttu-id="81e3e-175">예를 들어, 형식 이름으로 허용되지 않는 이름이 데이터 계약에 필요한 경우 속성 값을 허용되지 않는 이름으로 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-175">For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name.</span></span> <span data-ttu-id="81e3e-176">일례로 "$value" 문자열은 형식 이름으로 허용되지 않지만 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 속성 값으로는 허용됩니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-176">For instance, the string "$value" is disallowed as a type name but is allowed as a <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="81e3e-177">형식에 대한 데이터 계약의 네임스페이스를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-177">Gets or sets the namespace for the data contract for the type.</span></span></summary>
        <value><span data-ttu-id="81e3e-178">계약의 네임스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-178">The namespace of the contract.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81e3e-179">형식에서 특정 데이터 계약을 따르는 데이터를 반환해야 할 경우 이 속성을 사용하여 특정 네임스페이스를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-179">Use this property to specify a particular namespace if your type must return data that complies with a specific data contract.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="81e3e-180">데이터가 성공적으로 전송되려면 클라이언트와 서버 모두에서 데이터 계약의 데이터 이름이 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-180">For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server.</span></span> <span data-ttu-id="81e3e-181">Visual Basic 프로젝트에서 기본적으로 접두사를 추가 ("루트 네임 스페이스," 프로젝트의 이름을 딴 라고 함) 각 파일에 정의 된 네임 스페이스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-181">Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the "root namespace," named after the project).</span></span> <span data-ttu-id="81e3e-182">이 접두사가 추가되면 동일한 형식에 대해 클라이언트 및 서버 네임스페이스가 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-182">Adding this prefix causes the client and server namespaces to be different for the same type.</span></span> <span data-ttu-id="81e3e-183">솔루션 설정 하는 <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 속성을 "", 또는를 명시적으로이 속성에 데이터 계약 네임 스페이스를 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="81e3e-183">The solution is to set the <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> property to "", or to explicitly set the data contract namespace in this property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>