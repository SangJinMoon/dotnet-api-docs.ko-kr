<Type Name="Keyboard" FullName="Microsoft.VisualBasic.Devices.Keyboard">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3935cead12b64f3f847734107688d50ba271bff1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659101" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Devices.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard" />
  <TypeSignature Language="F#" Value="type Keyboard = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>현재 누른 키 등 키보드의 현재 상태에 액세스하기 위한 속성을 제공하고, 활성 창에 키 입력을 보내기 위한 메서드를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard` 개체는 컴퓨터의 키보드에 대 한 인터페이스를 제공 합니다. 속성은 `My.Computer.Keyboard` 몇 가지 특수 키의 상태에 대 한 정보를 제공 합니다. `My.Computer.Keyboard.SendKeys` 메서드를 사용 하면 키보드에서 입력 하는 경우 키의 활성 창으로 보냅니다.  
  
## <a name="tasks"></a>작업  
 다음 표에서 관련 된 작업의 예는 `My.Computer.Keyboard` 개체입니다.  
  
|대상|보기|  
|-|-|  
|응용 프로그램에 키 입력 보내기|[방법: 응용 프로그램 시작 및 키 입력 보내기(Visual Basic)](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-start-an-application-and-send-it-keystrokes.md)|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|-|-|  
|Windows 응용 프로그램|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 응용 프로그램|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|아니요|  
  
   
  
## Examples  
 사용 하 여이 예제는 `My.Computer.Keyboard.CtrlKeyDown` 속성을 컴퓨터의 CTRL 키를 누를 경우를 확인 합니다.  
  
 [!code-vb[VbVbalrMyComputer#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#36)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Keyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Keyboard();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.Devices.Keyboard" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="AltKeyDown">
      <MemberSignature Language="C#" Value="public bool AltKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AltKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AltKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AltKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AltKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Alt 키가 눌러져 있는지 여부를 나타내는 <see langword="Boolean" />을 가져옵니다.</summary>
        <value>Alt 키가 눌러져 있으면 <see langword="Boolean" /> 값은 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.AltKeyDown` 속성 비슷한 기능을 제공 된 <xref:System.Windows.Forms.Control.ModifierKeys%2A> 속성입니다.  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|-|-|  
|Windows 응용 프로그램|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 응용 프로그램|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|아니요|  
  
   
  
## Examples  
 사용 하 여이 예제는 `My.Computer.Keyboard.AltKeyDown` 속성을 컴퓨터의 ALT 키가 눌러져 있는지 확인 합니다.  
  
 [!code-vb[VbVbalrMyComputer#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#23)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Caps Lock이 켜져 있는지 여부를 나타내는 <see langword="Boolean" />을 가져옵니다.</summary>
        <value>Caps Lock이 켜져 있으면 <see langword="Boolean" /> 값은 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CAPS LOCK의 상태만 반환 됩니다.  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|-|-|  
|Windows 응용 프로그램|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 응용 프로그램|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|아니요|  
  
   
  
## Examples  
 사용 하 여이 예제는 `My.Computer.Keyboard.CapsLock` 속성을 확인 하는 경우 컴퓨터의 CAPS LOCK이 설정 되어 있습니다.  
  
 [!code-vb[VbVbalrMyComputer#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="CtrlKeyDown">
      <MemberSignature Language="C#" Value="public bool CtrlKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CtrlKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CtrlKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CtrlKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CtrlKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ctrl 키가 눌러져 있는지 여부를 나타내는 <see langword="Boolean" />을 가져옵니다.</summary>
        <value>
          <see langword="Boolean" /> 값입니다. Ctrl 키가 눌러져 있으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.CtrlKeyDown` 속성 비슷한 기능을 제공 된 <xref:System.Windows.Forms.Control.ModifierKeys%2A> 속성입니다.  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|-|-|  
|Windows 응용 프로그램|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 응용 프로그램|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|아니요|  
  
   
  
## Examples  
 사용 하 여이 예제는 `My.Computer.Keyboard.CtrlKeyDown` 속성을 컴퓨터의 CTRL 키가 눌러져 있는지 확인 합니다.  
  
 [!code-vb[VbVbalrMyComputer#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="NumLock">
      <MemberSignature Language="C#" Value="public bool NumLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NumLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NumLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Num Lock 키가 켜져 있는지 여부를 나타내는 <see langword="Boolean" />을 가져옵니다.</summary>
        <value>
          <see langword="Boolean" /> 값입니다. Num Lock이 켜져 있으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 NUM LOCK 키의 상태에만 반환 됩니다.  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|-|-|  
|Windows 응용 프로그램|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 응용 프로그램|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|아니요|  
  
   
  
## Examples  
 사용 하 여이 예제는 `My.Computer.Keyboard.NumLock` 속성을 컴퓨터의 NUM LOCK 키 켜져 있는지 확인 합니다.  
  
 [!code-vb[VbVbalrMyComputer#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="ScrollLock">
      <MemberSignature Language="C#" Value="public bool ScrollLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScrollLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Scroll Lock 키가 켜져 있는지 여부를 나타내는 <see langword="Boolean" />을 가져옵니다.</summary>
        <value>
          <see langword="Boolean" /> 값입니다. Scroll Lock이 켜져 있으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SCROLL LOCK 키의 상태에만 반환 됩니다.  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|-|-|  
|Windows 응용 프로그램|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 응용 프로그램|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|아니요|  
  
   
  
## Examples  
 사용 하 여이 예제는 `My.Computer.Keyboard.ScrollLock` 속성을 컴퓨터의 SCROLL LOCK 키 켜져 있는지 확인 합니다.  
  
 [!code-vb[VbVbalrMyComputer#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendKeys">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>키보드에서 입력된 것처럼 하나 이상의 키 입력을 활성 창에 보낼 수 있습니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string -&gt; unit" Usage="keyboard.SendKeys keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">보낼 키를 정의하는 <see langword="String" />입니다.</param>
        <summary>키보드에서 입력된 것처럼 하나 이상의 키 입력을 활성 창에 보낼 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys` 에 유사한 기능을 제공 하는 메서드는 <xref:System.Windows.Forms.SendKeys.Send%2A> 및 <xref:System.Windows.Forms.SendKeys.SendWait%2A> 메서드.  
  
 `wait` 인수는 응용 프로그램 계속 하려면 다른 응용 프로그램을 완료 해야 하는 경우에 유용 합니다.  
  
> [!NOTE]
>  다른 응용 프로그램을 활성화 하는 관리 되는 메서드가 없습니다 이기 때문에 현재 응용 프로그램 내에서이 클래스를 사용 하 여, 수동으로, 키를 받을 수 있는 창을 선택 하거나와 같은 Windows API 메서드 사용 `FindWindow` 및 `SetForegroundWindow`에 포커스를 둡니다 다른 응용 프로그램입니다. 자세한 내용은 참조 [연습: Windows Api 호출](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md)합니다.  
  
 `keys` 모든 단일 키 또는 조합 하 여 ALT, CTRL 또는 SHIFT (또는 해당 키의 임의 조합) 인수를 지정할 수 있습니다. 각 키와 같은 하나 이상의 문자로 표현 되 `a` 문자에 대 한 "a", 또는 `{ENTER}` 키에 대 한 합니다.  
  
 키 코드 앞에 SHIFT를 키 결합 하려면 `+` (더하기 기호). 키 코드를 CTRL 키와 조합 하려면 앞에 `^` (캐럿). 키 코드를 ALT 키와 조합 하려면 앞에 `%` (백분율 기호). 반복 되는 키를 지정 하려면 폼을 사용 하 여 `{` *번호 키*`}`합니다. 사이 공백을 넣으십시오 *키* 및 *번호*합니다. 예를 들어 `{LEFT 42}` "왼쪽된 화살표 키를 눌러 42 배"; 의미 합니다. `{h 10}` 수단 "'h' 10 번 누릅니다."  
  
 다음 표에서 (예: ENTER 또는 TAB)는 해당 키를 누를 때 표시 되지 않는 문자를 지정 하는 데 사용할 수 있는 코드를 나열 합니다.  
  
|Key|코드|  
|-|-|  
|백스페이스|{백스페이스} 또는 {BS}|  
|나누기|{철회}|  
|CAPS LOCK|{CAPSLOCK}|  
|지우기|{지우기}|  
|Delete|{삭제} 또는 {삭제}|  
|아래쪽 화살표|{아래로}|  
|End |{끝}|  
|ENTER 키 (숫자 키패드)|{입력}|  
|Enter 키|~|  
|Esc 키|{이스케이프} 또는 {ESC}|  
|도움말|{HELP}|  
|홈|{홈}|  
|INS|{삽입}|  
|왼쪽 화살표|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|Page Down|{PGDN}|  
|Page Up|{PGUP}|  
|반환|{반환}|  
|오른쪽 화살표|{오른쪽}|  
|스크롤 잠금|{SCROLLLOCK}|  
|Tab|{TAB}|  
|위쪽 화살표|{UP}|  
|F1 ~ F15|{F1} {F15을 (를) 통해|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|-|-|  
|Windows 응용 프로그램|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 응용 프로그램|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|아니요|  
  
   
  
## Examples  
 사용 하 여이 예제는 `My.Computer.Keyboard.SendKeys` 계산기 응용 프로그램 외부 응용 프로그램에 키 입력 보내기 위해 메서드를 시작 하 여는 `Shell` 함수입니다.  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 요청된 프로세스 식별자를 가진 응용 프로그램을 찾을 수 없는 경우 <xref:System.ArgumentException> 예외가 발생합니다.  
  
 `Shell` 함수에 대한 호출은 완전 신뢰가 필요합니다(<xref:System.Security.SecurityException> 클래스).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">사용자 권한이 부족한 부분 신뢰 상태</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드에 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys, bool wait);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys, bool wait) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String, wait As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys, bool wait);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string * bool -&gt; unit" Usage="keyboard.SendKeys (keys, wait)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="wait" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keys">보낼 키를 정의하는 <see langword="String" />입니다.</param>
        <param name="wait">선택 사항입니다. 응용 프로그램을 계속하기 전에 처리할 키 입력을 기다릴지 여부를 지정하는 <see langword="Boolean" />입니다. 기본적으로 <see langword="True" />입니다.</param>
        <summary>키보드에서 입력된 것처럼 하나 이상의 키 입력을 활성 창에 보낼 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys` 에 유사한 기능을 제공 하는 메서드는 <xref:System.Windows.Forms.SendKeys.Send%2A> 및 <xref:System.Windows.Forms.SendKeys.SendWait%2A> 메서드.  
  
 `wait` 인수는 응용 프로그램 계속 하려면 다른 응용 프로그램을 완료 해야 하는 경우에 유용 합니다.  
  
> [!NOTE]
>  다른 응용 프로그램을 활성화 하는 관리 되는 메서드가 없습니다 이기 때문에 현재 응용 프로그램 내에서이 클래스를 사용 하 여, 수동으로, 키를 받을 수 있는 창을 선택 하거나와 같은 Windows API 메서드 사용 `FindWindow` 및 `SetForegroundWindow`에 포커스를 둡니다 다른 응용 프로그램입니다. 자세한 내용은 참조 [연습: Windows Api 호출](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md)합니다.  
  
 `keys` 모든 단일 키 또는 조합 하 여 ALT, CTRL 또는 SHIFT (또는 해당 키의 임의 조합) 인수를 지정할 수 있습니다. 각 키와 같은 하나 이상의 문자로 표현 되 `a` 문자에 대 한 "a", 또는 `{ENTER}` 키에 대 한 합니다.  
  
 키 코드 앞에 SHIFT를 키 결합 하려면 `+` (더하기 기호). 키 코드를 CTRL 키와 조합 하려면 앞에 `^` (캐럿). 키 코드를 ALT 키와 조합 하려면 앞에 `%` (백분율 기호). 반복 되는 키를 지정 하려면 폼을 사용 하 여 `{` *번호 키*`}`합니다. 사이 공백을 넣으십시오 *키* 및 *번호*합니다. 예를 들어 `{LEFT 42}` "왼쪽된 화살표 키를 눌러 42 배"; 의미 합니다. `{h 10}` 수단 "'h' 10 번 누릅니다."  
  
 다음 표에서 (예: ENTER 또는 TAB)는 해당 키를 누를 때 표시 되지 않는 문자를 지정 하는 데 사용할 수 있는 코드를 나열 합니다.  
  
|Key|코드|  
|-|-|  
|백스페이스|{백스페이스} 또는 {BS}|  
|나누기|{철회}|  
|CAPS LOCK|{CAPSLOCK}|  
|지우기|{지우기}|  
|Delete|{삭제} 또는 {삭제}|  
|아래쪽 화살표|{아래로}|  
|End |{끝}|  
|ENTER 키 (숫자 키패드)|{입력}|  
|Enter 키|~|  
|Esc 키|{이스케이프} 또는 {ESC}|  
|도움말|{HELP}|  
|홈|{홈}|  
|INS|{삽입}|  
|왼쪽 화살표|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|Page Down|{PGDN}|  
|Page Up|{PGUP}|  
|반환|{반환}|  
|오른쪽 화살표|{오른쪽}|  
|스크롤 잠금|{SCROLLLOCK}|  
|Tab|{TAB}|  
|위쪽 화살표|{UP}|  
|F1 ~ F15|{F1} {F15을 (를) 통해|  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|-|-|  
|Windows 응용 프로그램|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 응용 프로그램|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|아니요|  
  
   
  
## Examples  
 사용 하 여이 예제는 `My.Computer.Keyboard.SendKeys` 계산기 응용 프로그램 외부 응용 프로그램에 키 입력 보내기 위해 메서드를 시작 하 여는 `Shell` 함수입니다.  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 요청된 프로세스 식별자를 가진 응용 프로그램을 찾을 수 없는 경우 <xref:System.ArgumentException> 예외가 발생합니다.  
  
 `Shell` 함수에 대한 호출은 완전 신뢰가 필요합니다(<xref:System.Security.SecurityException> 클래스).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">사용자 권한이 부족한 부분 신뢰 상태</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">파일 및 폴더에 액세스하는 기능을 제어합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <permission cref="T:System.Security.Permissions.UIPermission">사용자 인터페이스 및 클립보드에 관련 된 사용 권한을 제어 합니다. 연관된 열거형: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ShiftKeyDown">
      <MemberSignature Language="C#" Value="public bool ShiftKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShiftKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShiftKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShiftKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShiftKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Shift 키가 눌러져 있는지 여부를 나타내는 <see langword="Boolean" />을 가져옵니다.</summary>
        <value>
          <see langword="Boolean" /> 값입니다. Shift 키가 눌러져 있으면 <see langword="True" />이고, 그렇지 않으면 <see langword="False" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.ShiftKeyDown` 속성 비슷한 기능을 제공 된 <xref:System.Windows.Forms.Control.ModifierKeys%2A> 속성입니다.  
  
## <a name="availability-by-project-type"></a>프로젝트 형식에 따라 가용성  
  
|프로젝트 형식|사용 가능|  
|-|-|  
|Windows 응용 프로그램|**예**|  
|클래스 라이브러리|**예**|  
|콘솔 응용 프로그램|**예**|  
|Windows 컨트롤 라이브러리|**예**|  
|웹 컨트롤 라이브러리|아니요|  
|Windows 서비스|**예**|  
|웹 사이트|아니요|  
  
   
  
## Examples  
 사용 하 여이 예제는 `My.Computer.Keyboard.ShiftKeyDown` 속성을 컴퓨터의 SHIFT 키 중 하나가 중지 되는 경우를 확인 합니다.  
  
 [!code-vb[VbVbalrMyComputer#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
  </Members>
</Type>