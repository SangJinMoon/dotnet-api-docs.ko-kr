<Type Name="IsConst" FullName="System.Runtime.CompilerServices.IsConst">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="74dc8d3a7f603b72333de65a2429df48f1ec85b6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36541038" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsConst" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsConst extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsConst" />
  <TypeSignature Language="VB.NET" Value="Public Class IsConst" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsConst abstract sealed" />
  <TypeSignature Language="F#" Value="type IsConst = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="92a20-101">한정자가 지정된 형식에 <see langword="const" /> 한정자가 있음을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="92a20-101">Indicates that the modified type has a <see langword="const" /> modifier.</span>
      </span>
      <span data-ttu-id="92a20-102">이 클래스는 상속될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="92a20-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a20-103">Microsoft c + + 컴파일러는 매개 변수, 반환 형식에 대 한 메타 데이터에이 한정자를에서 또는 개체 선언으로 선언 `const` 소스 코드에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-103">The Microsoft C++ compiler emits this modifier into metadata for any parameter, return type, or object declaration declared as `const` in the source code.</span></span>  
  
 <span data-ttu-id="92a20-104">컴파일러는 적시에 (JIT) 컴파일러가 기본 동작은 적절 하지 않은 경우 값을 처리 하는 방식을 변경 하려면 메타 데이터 내에서 사용자 지정 한정자를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-104">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="92a20-105">JIT 컴파일러는 사용자 지정 한정자를 발견 하면는 한정자 지정 하는 방식으로 값을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-105">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="92a20-106">컴파일러는 메서드 매개 변수를 사용자 지정 한정자를 적용 하 고 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-106">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="92a20-107">JIT 컴파일러는 필수 한정자에 응답 해야 하지만 선택적 한정자를 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-107">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="92a20-108">다음 방법 중 하나를 사용 하는 메타 데이터를 사용자 지정 한정자를 내보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-108">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="92a20-109">메서드를 사용 하는 <xref:System.Reflection.Emit.TypeBuilder> 같은 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, 및 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-109">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="92a20-110">에 대 한 호출을 포함 하는 Microsoft MSIL (intermediate language) 명령 파일을 생성 `modopt` 및 `modreq`, 하 고 사용 하 여 파일을 어셈블할는 [Ilasm.exe (IL 어셈블러)](~/docs/framework/tools/ilasm-exe-il-assembler.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-110">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="92a20-111">관리 되지 않는 리플렉션 API를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-111">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a20-112">다음 예제에서는 내보내는 방법을 보여 줍니다.는 <xref:System.Runtime.CompilerServices.IsConst> 리플렉션을 사용 하 여 어셈블리에는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="92a20-112">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsConst> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsConst#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsConst/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>