<Type Name="IsImplicitlyDereferenced" FullName="System.Runtime.CompilerServices.IsImplicitlyDereferenced">
  <TypeSignature Language="C#" Value="public static class IsImplicitlyDereferenced" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsImplicitlyDereferenced extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />
  <TypeSignature Language="VB.NET" Value="Public Class IsImplicitlyDereferenced" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsImplicitlyDereferenced abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="92ac9-101">한정자가 지정된 가비지 수집 참조가 메서드 시그니처 내의 참조 매개 변수를 나타냄을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-101">Indicates that the modified garbage collection reference represents a reference parameter within a method signature.</span></span> <span data-ttu-id="92ac9-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92ac9-103">C + + 컴파일러에서 사용 하 여 <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> 관리 되는 포인터에 의해 전달 된 관리 되는 참조로 전달 되는 참조 클래스를 구별 하는 한정자입니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-103">The C++ compiler uses the <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> modifier to distinguish reference classes that are passed by managed reference from those passed by managed pointer.</span></span>  <span data-ttu-id="92ac9-104"><xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> 클래스 및 해당 파트너의 <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> 클래스 포인터 매개 변수에서 참조 매개 변수를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-104">The <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> class and its partner, the <xref:System.Runtime.CompilerServices.IsExplicitlyDereferenced> class, disambiguate reference parameters from pointer parameters.</span></span>  
  
 <span data-ttu-id="92ac9-105">컴파일러는 적시에 (JIT) 컴파일러가 기본 동작은 적절 하지 않은 경우 값을 처리 하는 방식을 변경 하려면 메타 데이터 내에서 사용자 지정 한정자를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-105">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="92ac9-106">JIT 컴파일러는 사용자 지정 한정자를 발견 하면는 한정자 지정 하는 방식으로 값을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-106">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="92ac9-107">컴파일러는 메서드 매개 변수를 사용자 지정 한정자를 적용 하 고 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-107">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="92ac9-108">JIT 컴파일러는 필수 한정자에 응답 해야 하지만 선택적 한정자를 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-108">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="92ac9-109">다음 방법 중 하나를 사용 하는 메타 데이터를 사용자 지정 한정자를 내보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-109">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="92ac9-110">메서드를 사용 하는 <xref:System.Reflection.Emit.TypeBuilder> 같은 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, 및 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-110">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="92ac9-111">에 대 한 호출을 포함 하는 Microsoft MSIL (intermediate language) 명령 파일을 생성 `modopt` 및 `modreq`, 하 고 사용 하 여 파일을 어셈블할는 [Ilasm.exe (IL 어셈블러)](~/docs/framework/tools/ilasm-exe-il-assembler.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-111">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="92ac9-112">관리 되지 않는 리플렉션 API를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-112">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92ac9-113">다음 예제에서는 내보내는 방법을 보여 줍니다.는 <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> 리플렉션을 사용 하 여 어셈블리에는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="92ac9-113">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsImplicitlyDereferenced#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsImplicitlyDereferenced/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>