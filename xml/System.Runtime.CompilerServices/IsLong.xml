<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f0ff9e7ca9b500686e20b077aeaf036990a624ae" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30476137" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>한정자가 지정된 정수가 표준 C++ <see langword="long" /> 값이라는 것을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 C + + 표준 나타냅니다는 `long` 값과 정수 값이 고유 형식입니다.  그러나 둘 다 나타나는 사용 하 여 `ELEMENT_TYPE_I4` 어셈블리에 있습니다.  구분 하기 위해는 `long` Microsoft c + + 컴파일러에서는 c + +에서 정수에서 다음을 추가 합니다.는 <xref:System.Runtime.CompilerServices.IsLong> 한정자의 모든 인스턴스를 한 `long` 인스턴스과가 하는 경우.  이 프로세스는 언어 수준 형식 안전성을 유지 관리 하는 데 매우 중요 합니다.  
  
 컴파일러는 적시에 (JIT) 컴파일러가 기본 동작은 적절 하지 않은 경우 값을 처리 하는 방식을 변경 하려면 메타 데이터 내에서 사용자 지정 한정자를 내보냅니다.  JIT 컴파일러는 사용자 지정 한정자를 발견 하면는 한정자 지정 하는 방식으로 값을 처리 합니다.  컴파일러는 메서드 매개 변수를 사용자 지정 한정자를 적용 하 고 값을 반환할 수 있습니다.  JIT 컴파일러는 필수 한정자에 응답 해야 하지만 선택적 한정자를 무시할 수 있습니다.  
  
 다음 방법 중 하나를 사용 하는 메타 데이터를 사용자 지정 한정자를 내보낼 수 있습니다.  
  
-   메서드를 사용 하는 <xref:System.Reflection.Emit.TypeBuilder> 같은 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, 및 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>합니다.  
  
-   에 대 한 호출을 포함 하는 Microsoft MSIL (intermediate language) 명령 파일을 생성 `modopt` 및 `modreq`, 하 고 사용 하 여 파일을 어셈블할는 [Ilasm.exe (IL 어셈블러)](~/docs/framework/tools/ilasm-exe-il-assembler.md)합니다.  
  
-   관리 되지 않는 리플렉션 API를 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 내보내는 방법을 보여 줍니다.는 <xref:System.Runtime.CompilerServices.IsLong> 리플렉션을 사용 하 여 어셈블리에는 개체입니다.  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>