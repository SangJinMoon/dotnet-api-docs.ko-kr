<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f8bf804695c48d4ce5c23b8a91eec7f8319047e2" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37472127" /></Metadata><TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4d034-101">한정자가 지정된 정수가 표준 C++ <see langword="long" /> 값이라는 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-101">Indicates that a modified integer is a standard C++ <see langword="long" /> value.</span></span> <span data-ttu-id="4d034-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d034-103">C + + 표준 나타냅니다는 `long` 값과 정수 값이 고유 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-103">The C++ standard indicates that a `long` value and an integer value are distinct types.</span></span>  <span data-ttu-id="4d034-104">그러나 둘 다 나타나는 사용 하 여 `ELEMENT_TYPE_I4` 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-104">However, they are both represented using `ELEMENT_TYPE_I4` in an assembly.</span></span>  <span data-ttu-id="4d034-105">구별 하는 `long` 정수 c + +에서에서 Microsoft c + + 컴파일러는 다음과 같이 추가 됩니다.를 <xref:System.Runtime.CompilerServices.IsLong> 한정자의 인스턴스를를 `long` 인스턴스과 경우.</span><span class="sxs-lookup"><span data-stu-id="4d034-105">To distinguish a `long` from an integer in C++, the Microsoft C++ compiler adds the <xref:System.Runtime.CompilerServices.IsLong> modifier to any instance of a `long` when the instance is emited.</span></span>  <span data-ttu-id="4d034-106">이 프로세스는 언어 수준 형식 안전성을 유지 관리 하는 데 매우 중요 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-106">This process is critically important for maintaining language-level type safety.</span></span>  
  
 <span data-ttu-id="4d034-107">컴파일러는 적시에 (JIT) 컴파일러가 기본 동작이 적절 하지 않은 경우 값을 처리 하는 방법을 변경 하려면 메타 데이터 내에서 사용자 지정 한정자를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-107">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="4d034-108">JIT 컴파일러는 사용자 지정 한정자를 발견 하는 경우에 한정자를 지정 하는 방식으로 값을 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-108">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="4d034-109">컴파일러는 메서드, 매개 변수를 사용자 지정 한정자를 적용 하 고 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-109">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="4d034-110">JIT 컴파일러는 필수 한정자에 응답 해야 하지만 선택적 한정자를 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-110">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  
  
 <span data-ttu-id="4d034-111">다음 방법 중 하나를 사용 하 여 메타 데이터를 사용자 지정 한정자를 내보낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-111">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="4d034-112">메서드를 사용 하는 <xref:System.Reflection.Emit.TypeBuilder> 와 같은 클래스 <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>를 <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, 및 <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-112">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="4d034-113">에 대 한 호출을 포함 하는 Microsoft MSIL (intermediate language) 명령 파일을 생성 `modopt` 및 `modreq`, 및 어셈블 사용 하 여 파일을 [Ilasm.exe (IL 어셈블러)](~/docs/framework/tools/ilasm-exe-il-assembler.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-113">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="4d034-114">관리 되지 않는 리플렉션 API를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-114">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4d034-115">다음 예제에서는 내보내는 방법을 보여 줍니다는 <xref:System.Runtime.CompilerServices.IsLong> 리플렉션을 사용 하 여 어셈블리에는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="4d034-115">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsLong> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>