<Type Name="FixedAddressValueTypeAttribute" FullName="System.Runtime.CompilerServices.FixedAddressValueTypeAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8763079e5e4d430f833d78734b13b5b4ed0f7404" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FixedAddressValueTypeAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit FixedAddressValueTypeAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FixedAddressValueTypeAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FixedAddressValueTypeAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="bcd62-101">수명이 유지되는 동안 정적 값 형식 필드의 주소를 고정시킵니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bcd62-101">Fixes the address of a static value type field throughout its lifetime.</span>
      </span>
      <span data-ttu-id="bcd62-102">이 클래스는 상속될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bcd62-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bcd62-103">사용 하 여는 <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> 정적 값을 표시 하는 특성 형식은 형식을 생성할 때 고정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-103">Use the <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> attribute to mark static value types as pinned upon creation.</span></span>  
  
 <span data-ttu-id="bcd62-104">이 특성은 Microsoft Visual c + + 컴파일러에 의해 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-104">This attribute is used by the Microsoft Visual C++ compiler.</span></span>  
  
 <span data-ttu-id="bcd62-105">정적 값 형식 필드는 boxed 개체도 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-105">Static value type fields are created as boxed objects.</span></span> <span data-ttu-id="bcd62-106">즉, 가비지 수집을 수행할 때 해당 주소를 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-106">This means that their address can change as garbage collection is performed.</span></span> <span data-ttu-id="bcd62-107">정적 값 형식에이 특성을 적용할 때 해당 수명 동안 해당 주소는 영구적입니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-107">When you apply this attribute to a static value type, its address remains constant during its lifetime.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bcd62-108">다음 예제에서는 <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> 메모리에 정적 필드를 고정 하는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-108">The following example illustrates the use of the <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> attribute to pin a static field in memory.</span></span> <span data-ttu-id="bcd62-109">정의 `Age` 구조체이 고 형식의 정적 필드에 있는 두 개의 클래스를 초기화 `Age`합니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-109">It defines an `Age` structure and initializes two classes that have static fields of type `Age`.</span></span> <span data-ttu-id="bcd62-110">두 번째 클래스 적용 <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> 필드의 주소를 고정 합니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-110">The second class applies <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> to pin the field's address.</span></span> <span data-ttu-id="bcd62-111">메모리 할당 수가이 두 개체는 인스턴스화되지 않으며 가비지 수집기가 호출 후에 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-111">A number of memory allocations are made before and after these two objects are instantiated and the garbage collector is invoked.</span></span> <span data-ttu-id="bcd62-112">예제의 출력이 나와 있습니다.는 첫 번째 주소 `Age` 필드를 필드의 주소를 가비지 수집 이후 변경 된 <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> 적용 하지 않았으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-112">The output from the example shows that although the address of the first `Age` field has changed after garbage collection, the address of the field to which <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> is applied has not.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.FixedAddressValueTypeAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.fixedaddressvaluetypeattribute/cs/example1.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FixedAddressValueTypeAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FixedAddressValueTypeAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bcd62-113">
            <see cref="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bcd62-113">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="bcd62-114">다음 예제에서는 <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> 메모리에 정적 필드를 고정 하는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-114">The following example illustrates the use of the <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> attribute to pin a static field in memory.</span></span> <span data-ttu-id="bcd62-115">정의 `Age` 구조체이 고 형식의 정적 필드에 있는 두 개의 클래스를 초기화 `Age`합니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-115">It defines an `Age` structure and initializes two classes that have static fields of type `Age`.</span></span> <span data-ttu-id="bcd62-116">두 번째 클래스 적용 <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> 필드의 주소를 고정 합니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-116">The second class applies <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> to pin the field's address.</span></span> <span data-ttu-id="bcd62-117">메모리 할당 수가이 두 개체는 인스턴스화되지 않으며 가비지 수집기가 호출 후에 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-117">A number of memory allocations are made before and after these two objects are instantiated and the garbage collector is invoked.</span></span> <span data-ttu-id="bcd62-118">예제의 출력이 나와 있습니다.는 첫 번째 주소 `Age` 필드를 필드의 주소를 가비지 수집 이후 변경 된 <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> 적용 하지 않았으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="bcd62-118">The output from the example shows that although the address of the first `Age` field has changed after garbage collection, the address of the field to which <xref:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute> is applied has not.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.FixedAddressValueTypeAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.fixedaddressvaluetypeattribute/cs/example1.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>