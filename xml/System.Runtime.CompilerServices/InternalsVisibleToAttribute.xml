<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InternalsVisibleToAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac572f45e174f70fa5053339a1308aae4feae8b8626.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">72f45e174f70fa5053339a1308aae4feae8b8626</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</source>
          <target state="translated">일반적으로는 현재 어셈블리 내에서만 볼 수 있는 형식을 지정된 어셈블리에서 볼 수 있도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Ordinarily, types and members with <ph id="ph1">`internal`</ph> scope (in C#) and <ph id="ph2">`friend`</ph> scope (in Visual Basic) are visible only in the assembly in which they are defined.</source>
          <target state="translated">일반적으로 형식 및 멤버와 <ph id="ph1">`internal`</ph> 범위 (C#) 및 <ph id="ph2">`friend`</ph> (Visual Basic)의 범위 정의 되는 어셈블리에만 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 특성 볼 수 있습니다. 또한 형식에 friend 어셈블리 라고 지정 된 어셈블리에 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The attribute is applied at the assembly level.</source>
          <target state="translated">특성은 어셈블리 수준에서 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project.</source>
          <target state="translated">즉, 소스 코드 파일의 시작 부분에 포함할 수 있습니다 또는 Visual Studio 프로젝트의 AssemblyInfo 파일에 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly.</source>
          <target state="translated">내부 형식 및 현재 어셈블리의 멤버에 액세스할 수 있는 단일 friend 어셈블리를 지정 하는 특성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>You can define multiple friend assemblies in two ways.</source>
          <target state="translated">두 가지 방법으로 여러 friend 어셈블리를 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>They can appear as individual assembly-level attributes, as the following example illustrates.</source>
          <target state="translated">다음 예제와 같이 개별 어셈블리 수준 특성으로 나타날 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>They can also appear with separate <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> tags but a single <ph id="ph2">`assembly`</ph> keyword, as the following example illustrates.</source>
          <target state="translated">별도 사용도 나타날 수 있습니다 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 태그가 있지만 단일 <ph id="ph2">`assembly`</ph> 키워드를 다음 예제와 같이 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The friend assembly is identified by the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Friend 어셈블리도 식별 되는 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.</source>
          <target state="translated">현재 어셈블리 및 friend 어셈블리를 모두 해제 해야 서명 또는 두 어셈블리가 강력한 이름으로 서명 해야 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If both assemblies are unsigned, the <ph id="ph1">`assemblyName`</ph> argument consists of the name of the friend assembly, specified without a directory path or file name extension.</source>
          <target state="translated">두 어셈블리가 서명 되지 않은 경우는 <ph id="ph1">`assemblyName`</ph> 인수 디렉터리 경로 또는 파일 이름 확장명 없이 지정 된 friend 어셈블리의 이름으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If both assemblies are signed with a strong name, the argument to the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token).</source>
          <target state="translated">두 어셈블리가 강력한로 서명 하는 경우 이름에 대 한 인수는 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> 생성자 디렉터리 경로 또는 파일 이름 확장명 없이 전체 공개 키 (및 하지는 공개 키 토큰)와 함께 어셈블리의 이름으로 구성 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>To get the full public key of a strong-named assembly, see the <bpt id="p1">[</bpt>Getting the full public key<ept id="p1">](#Key)</ept> section later in this article.</source>
          <target state="translated">강력한 이름의 어셈블리의 전체 공개 키를 얻으려면 참조는 <bpt id="p1">[</bpt>전체 공개 키 가져오기<ept id="p1">](#Key)</ept> 이 문서의 뒷부분에 나오는 섹션.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> with strong-named assemblies, see the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">사용에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 강력한 이름의 어셈블리 참조는 <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Do not include values for the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A&gt;</ph> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error.</source>
          <target state="translated">에 대 한 값을 포함 하지 않습니다는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A&gt;</ph> 인수에 대 한 필드, Visual Basic, C# 및 c + + 컴파일러에서는이 메일은 컴파일러 오류가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If you use a compiler that does not treat it as an error (such as the <bpt id="p1">[</bpt>IL Assembler (ILAsm.exe)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>) and the assemblies are strong-named, a <ph id="ph1">&lt;xref:System.MethodAccessException&gt;</ph> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute.</source>
          <target state="translated">컴파일러는 오류로 처리 하지는 않습니다를 사용 하는 경우 (같은 <bpt id="p1">[</bpt>IL 어셈블러 (ILAsm.exe)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>) 고 어셈블리가 강력한 이름의 <ph id="ph1">&lt;xref:System.MethodAccessException&gt;</ph> 예외가 처음으로 액세스 하는 지정된 된 friend 어셈블리는 포함 된 어셈블리는 <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>For more information about how to use this attribute, see the following topics:</source>
          <target state="translated">이 특성을 사용 하는 방법에 대 한 자세한 내용은 다음 항목을 참조 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend 어셈블리(C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">[</bpt>Friend Assemblies<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend 어셈블리<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Getting the full public key</source>
          <target state="translated">전체 공개 키 가져오기</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>You can use the <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to retrieve the full public key from a strong-named key (.snk) file.</source>
          <target state="translated">사용할 수는 <bpt id="p1">[</bpt>강력한 이름 도구 (Sn.exe)<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> 하는 강력한 이름의 키 파일 (.snk)에서 전체 공개 키를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>To do this, you perform the following steps:</source>
          <target state="translated">이렇게 하려면 다음 단계를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Extract the public key from the strong-named key file to a separate file:</source>
          <target state="translated">강력한 이름의 키 파일에서 별도 파일로 공개 키를 추출 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Display the full public key to the console:</source>
          <target state="translated">전체 공개 키를 콘솔에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">**</bpt>Sn -tp<ept id="p1">**</ept>  <bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Sn -tp<ept id="p1">**</ept>  <bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Copy and paste the full public key value into your source code.</source>
          <target state="translated">복사 하 여 소스 코드에 전체 공개 키 값을 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Compiling the friend assembly with C#</source>
          <target state="translated">C#을 사용 하 여 friend 어셈블리 컴파일</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option.</source>
          <target state="translated">출력 파일 (.exe 또는.dll)의 이름을 사용 하 여 명시적으로 지정 해야 friend 어셈블리를 컴파일하는 C# 컴파일러를 사용 하는 경우는 <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> 컴파일러 옵션입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</source>
          <target state="translated">컴파일러가 외부 참조에 바인딩할 때 작성하고 있는 어셈블리에 대해 이름을 생성하지 않았기 때문에 이 과정이 필요합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option is optional for the Visual Basic compiler, and the corresponding <bpt id="p2">**</bpt>-out<ept id="p2">**</ept> or <bpt id="p3">**</bpt>-o<ept id="p3">**</ept> compiler option should not be used when compiling friend assemblies with the F# compiler.</source>
          <target state="translated"><bpt id="p1">**</bpt>/out<ept id="p1">**</ept> 컴파일러 옵션은 해당 및 Visual Basic 컴파일러에 대 한 선택적 <bpt id="p2">**</bpt>-아웃<ept id="p2">**</ept> 또는 <bpt id="p3">**</bpt>-o<ept id="p3">**</ept> friend를 컴파일할 경우 컴파일러 옵션을 사용할 수 해야 F # 컴파일러는 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Compiling the friend assembly with C++</source>
          <target state="translated">C + +를 사용 하 여 friend 어셈블리 컴파일</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>In C++, in order to make the internal members enabled by the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute accessible to a friend assembly, you must use the <ph id="ph2">`as_friend`</ph> attribute in the C++  directive.</source>
          <target state="translated">내부 멤버으로 사용 하도록 설정 하기 위해 c + +에서는 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> friend 어셈블리에 액세스할 수 있는 특성을 사용 해야 합니다는 <ph id="ph2">`as_friend`</ph> c + + 지시문에는 특성입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>For more information, see <bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>Friend 어셈블리 (c + +)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">**</bpt>Signed assemblies<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>서명 된 어셈블리<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to make an <ph id="ph2">`internal`</ph> method named <ph id="ph3">`AppendDirectorySeparator`</ph> in a signed assembly visible to another signed assembly.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 있도록 특성은 <ph id="ph2">`internal`</ph> 라는 메서드 <ph id="ph3">`AppendDirectorySeparator`</ph> 에서 서명 된 어셈블리를 다른 서명 된 어셈블리에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>It defines a <ph id="ph1">`FileUtilities`</ph> class that includes an internal <ph id="ph2">`AppendDirectorySeparator`</ph> method.</source>
          <target state="translated">정의 <ph id="ph1">`FileUtilities`</ph> 포함 하는 클래스 <ph id="ph2">`AppendDirectorySeparator`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute is applied to the assembly that contains the <ph id="ph2">`FileUtilities`</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 특성이 포함 된 어셈블리에 적용 되는 <ph id="ph2">`FileUtilities`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The attribute allows an assembly named <ph id="ph1">`Friend1`</ph> to access this internal member.</source>
          <target state="translated">특성을 사용 하면 이라는 어셈블리 <ph id="ph1">`Friend1`</ph> 이 내부 멤버에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>If the following example is compiled into a strong-named assembly named <ph id="ph1">`Friend1`</ph>, the <ph id="ph2">`Example.Main`</ph> method in <ph id="ph3">`Friend1`</ph> can successfully call the <ph id="ph4">`FileUtilities.AppendDirectorySeparator`</ph> method, although the method is internal to the <ph id="ph5">`Assembly1`</ph> assembly.</source>
          <target state="translated">다음 예에서는 이라는 강력한 이름의 어셈블리로 컴파일됩니다 <ph id="ph1">`Friend1`</ph>, <ph id="ph2">`Example.Main`</ph> 에서 메서드 <ph id="ph3">`Friend1`</ph> 성공적으로 호출할 수는 <ph id="ph4">`FileUtilities.AppendDirectorySeparator`</ph> 메서드를 방법이 내부에 <ph id="ph5">`Assembly1`</ph> 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Note that if you are compiling in C# from the command line, you must use the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</source>
          <target state="translated">명령줄에서 C#에서 컴파일하 하는 경우 사용 해야는 <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> 컴파일러 스위치 외부 참조에 대 한 컴파일러 바인딩할 때 friend 어셈블리의 이름을 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source><bpt id="p1">**</bpt>Unsigned assemblies<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>서명 되지 않은 어셈블리<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to make an <ph id="ph2">`internal`</ph> member of an unsigned assembly visible to another unsigned assembly.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 특성을 확인 한 <ph id="ph2">`internal`</ph> 멤버 간에 표시 되는 서명 되지 않은 어셈블리의 어셈블리 서명 되지 않은 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The attribute ensures that the <ph id="ph1">`internal`</ph> <ph id="ph2">`StringLib.IsFirstLetterUpperCase`</ph> method in an assembly named <ph id="ph3">`UtilityLib`</ph> is visible to the code in an assembly named <ph id="ph4">`Friend2`</ph>.</source>
          <target state="translated">특성을 보장 하는 <ph id="ph1">`internal`</ph> <ph id="ph2">`StringLib.IsFirstLetterUpperCase`</ph> 메서드 라는 어셈블리에서 <ph id="ph3">`UtilityLib`</ph> 는 라는 어셈블리에서 코드에 표시 <ph id="ph4">`Friend2`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The following is the source code for UtilityLib.dll:</source>
          <target state="translated">다음은 UtilityLib.dll에 대 한 소스 코드입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>The following example provides the source code for the <ph id="ph1">`Friend2`</ph> assembly.</source>
          <target state="translated">다음 예제에서는 제공에 대 한 소스 코드는 <ph id="ph1">`Friend2`</ph> 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
          <source>Note that if you are compiling in C# from the command line, you must use the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</source>
          <target state="translated">명령줄에서 C#에서 컴파일하 하는 경우 사용 해야는 <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> 컴파일러 스위치 외부 참조에 대 한 컴파일러 바인딩할 때 friend 어셈블리의 이름을 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The name of a friend assembly.</source>
          <target state="translated">friend 어셈블리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /&gt;</ph> class with the name of the specified friend assembly.</source>
          <target state="translated">지정된 friend 어셈블리의 이름을 사용하여 <ph id="ph1">&lt;see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> 생성자 내부 형식 및 현재 어셈블리의 멤버에 대 한 액세스 권한이 있는 어셈블리가 friend 어셈블리를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name.</source>
          <target state="translated">현재 어셈블리 및 friend 어셈블리를 모두 해제 해야 서명 또는 둘 다 강력한 이름으로 서명 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>(For more information about strong-named assemblies, see <bpt id="p1">[</bpt>Creating and Using Strong-Named Assemblies<ept id="p1">](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>.) If both are unsigned, the <ph id="ph1">`assemblyName`</ph> argument consists of the name of the friend assembly, specified without a directory path or file extension.</source>
          <target state="translated">(강력한 이름의 어셈블리에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>and using strong-named Assemblies<ept id="p1">](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>.) 둘 다 서명 되지 않은 경우는 <ph id="ph1">`assemblyName`</ph> 인수 디렉터리 경로 또는 파일 확장명 없이 지정 된 friend 어셈블리의 이름으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>If both are signed, <ph id="ph1">`assemblyName`</ph> consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token).</source>
          <target state="translated">둘 모두에 서명 된 <ph id="ph1">`assemblyName`</ph> 디렉터리 경로 또는 파일 이름 확장명 없이 전체 공개 키 (않음 하지는 공개 키 토큰)와 함께 friend 어셈블리의 이름으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the <ph id="ph1">`assemblyName`</ph> argument.</source>
          <target state="translated">강력한 이름, culture, 버전 또는 프로세서 아키텍처 정보를 제공 하는 다른 구성 요소에 지정할 수 없습니다는 <ph id="ph1">`assemblyName`</ph> 인수입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option.</source>
          <target state="translated">출력 파일 (.exe 또는.dll)의 이름을 사용 하 여 명시적으로 지정 해야 friend 어셈블리를 컴파일하는 C# 컴파일러를 사용 하는 경우는 <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> 컴파일러 옵션입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</source>
          <target state="translated">컴파일러가 외부 참조에 바인딩할 때 작성하고 있는 어셈블리에 대해 이름을 생성하지 않았기 때문에 이 과정이 필요합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option is optional for the Visual Basic compiler, and the corresponding <bpt id="p2">**</bpt>-out<ept id="p2">**</ept> or <bpt id="p3">**</bpt>-o<ept id="p3">**</ept> compiler option should not be used when compiling friend assemblies with the F# compiler.</source>
          <target state="translated"><bpt id="p1">**</bpt>/out<ept id="p1">**</ept> 컴파일러 옵션은 해당 및 Visual Basic 컴파일러에 대 한 선택적 <bpt id="p2">**</bpt>-아웃<ept id="p2">**</ept> 또는 <bpt id="p3">**</bpt>-o<ept id="p3">**</ept> friend를 컴파일할 경우 컴파일러 옵션을 사용할 수 해야 F # 컴파일러는 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>You can use <bpt id="p1">[</bpt>Sn.exe (Strong Name Tool)<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to retrieve the full public key from a strong-named key (.snk) file.</source>
          <target state="translated">사용할 수 있습니다 <bpt id="p1">[</bpt>Sn.exe (강력한 이름 도구)<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> 하는 강력한 이름의 키 파일 (.snk)에서 전체 공개 키를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>To do this, you perform the following steps:</source>
          <target state="translated">이렇게 하려면 다음 단계를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Extract the public key from the strong-named key file to a separate file:</source>
          <target state="translated">강력한 이름의 키 파일에서 별도 파일로 공개 키를 추출 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Display the full public key to the console:</source>
          <target state="translated">전체 공개 키를 콘솔에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>Sn -tp<ept id="p1">**</ept>  <bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Sn -tp<ept id="p1">**</ept>  <bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Copy and paste the full public key value into your source code.</source>
          <target state="translated">복사 하 여 소스 코드에 전체 공개 키 값을 붙여 넣습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>For more information about how to use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute, see the following topics:</source>
          <target state="translated">사용 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 특성 다음 항목을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend 어셈블리(C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">[</bpt>Friend Assemblies<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend 어셈블리<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>Signed assemblies<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>서명 된 어셈블리<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to make an <ph id="ph2">`internal`</ph> method named <ph id="ph3">`AppendDirectorySeparator`</ph> in a signed assembly visible to another signed assembly.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 있도록 특성은 <ph id="ph2">`internal`</ph> 라는 메서드 <ph id="ph3">`AppendDirectorySeparator`</ph> 에서 서명 된 어셈블리를 다른 서명 된 어셈블리에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>It defines a <ph id="ph1">`FileUtilities`</ph> class that includes an internal <ph id="ph2">`AppendDirectorySeparator`</ph> method.</source>
          <target state="translated">정의 <ph id="ph1">`FileUtilities`</ph> 포함 하는 클래스 <ph id="ph2">`AppendDirectorySeparator`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute is applied to the assembly that contains the <ph id="ph2">`FileUtilities`</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 특성이 포함 된 어셈블리에 적용 되는 <ph id="ph2">`FileUtilities`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The attribute allows an assembly named <ph id="ph1">`Friend1`</ph> to access this internal member.</source>
          <target state="translated">특성을 사용 하면 이라는 어셈블리 <ph id="ph1">`Friend1`</ph> 이 내부 멤버에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>If the following example is compiled into a strong-named assembly named <ph id="ph1">`Friend1`</ph>, it can successfully call the <ph id="ph2">`FileUtilities.AppendDirectorySeparator`</ph> method, even though the method is internal to the <ph id="ph3">`Assembly1`</ph> assembly.</source>
          <target state="translated">다음 예에서는 이라는 강력한 이름의 어셈블리로 컴파일됩니다 <ph id="ph1">`Friend1`</ph>, 성공적으로 호출할 수는 <ph id="ph2">`FileUtilities.AppendDirectorySeparator`</ph> 메서드 내부에 있는 경우에는 <ph id="ph3">`Assembly1`</ph> 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Note that if you are compiling in C# from the command line, you must use the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</source>
          <target state="translated">명령줄에서 C#에서 컴파일하 하는 경우 사용 해야는 <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> 컴파일러 스위치 외부 참조에 대 한 컴파일러 바인딩할 때 friend 어셈블리의 이름을 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute to make an <ph id="ph2">`internal`</ph> member of an unsigned assembly visible to another unsigned assembly.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 특성을 확인 한 <ph id="ph2">`internal`</ph> 멤버 간에 표시 되는 서명 되지 않은 어셈블리의 어셈블리 서명 되지 않은 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The attribute ensures that the <ph id="ph1">`internal`</ph> <ph id="ph2">`StringLib.IsFirstLetterUpperCase`</ph> method in an assembly named <ph id="ph3">`UtilityLib`</ph> is visible to the code in an assembly named <ph id="ph4">`Friend2`</ph>.</source>
          <target state="translated">특성을 보장 하는 <ph id="ph1">`internal`</ph> <ph id="ph2">`StringLib.IsFirstLetterUpperCase`</ph> 메서드 라는 어셈블리에서 <ph id="ph3">`UtilityLib`</ph> 는 라는 어셈블리에서 코드에 표시 <ph id="ph4">`Friend2`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The following is the source code for UtilityLib.dll:</source>
          <target state="translated">다음은 UtilityLib.dll에 대 한 소스 코드입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>Unsigned assemblies<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>서명 되지 않은 어셈블리<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>The following example provides the source code for the <ph id="ph1">`Friend2`</ph> assembly.</source>
          <target state="translated">다음 예제에서는 제공에 대 한 소스 코드는 <ph id="ph1">`Friend2`</ph> 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
          <source>Note that if you are compiling in C# from the command line, you must use the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</source>
          <target state="translated">명령줄에서 C#에서 컴파일하 하는 경우 사용 해야는 <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> 컴파일러 스위치 외부 참조에 대 한 컴파일러 바인딩할 때 friend 어셈블리의 이름을 사용할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
          <source>This property is not implemented.</source>
          <target state="translated">이 속성이 구현되지 않습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
          <source>This property does not return a value.</source>
          <target state="translated">이 속성은 값을 반환하지 않습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source>Gets the name of the friend assembly to which all types and type members that are marked with the <ph id="ph1">&lt;see langword="internal" /&gt;</ph> keyword are to be made visible.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="internal" /&gt;</ph> 키워드로 표시된 모든 형식 및 형식 멤버가 표시되도록 지정할 friend 어셈블리의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source>A string that represents the name of the friend assembly.</source>
          <target state="translated">friend 어셈블리의 이름을 나타내는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source>For more information about how to use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute, see the following topics:</source>
          <target state="translated">사용 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> 특성 다음 항목을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source><bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend 어셈블리(C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
          <source><bpt id="p1">[</bpt>Friend Assemblies<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Friend 어셈블리<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>