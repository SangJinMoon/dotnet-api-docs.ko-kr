<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ced1c-101">일반적으로는 현재 어셈블리 내에서만 볼 수 있는 형식을 지정된 어셈블리에서 볼 수 있도록 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-101">Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ced1c-102">일반적으로 형식 및 멤버와 `internal` 범위 (C#) 및 `friend` (Visual Basic)의 범위 정의 되는 어셈블리에만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-102">Ordinarily, types and members with `internal` scope (in C#) and `friend` scope (in Visual Basic) are visible only in the assembly in which they are defined.</span></span> <span data-ttu-id="ced1c-103"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 특성 볼 수 있습니다. 또한 형식에 friend 어셈블리 라고 지정 된 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-103">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.</span></span>  
  
 <span data-ttu-id="ced1c-104">특성은 어셈블리 수준에서 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-104">The attribute is applied at the assembly level.</span></span> <span data-ttu-id="ced1c-105">즉, 소스 코드 파일의 시작 부분에 포함할 수 있습니다 또는 Visual Studio 프로젝트의 AssemblyInfo 파일에 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-105">This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project.</span></span> <span data-ttu-id="ced1c-106">내부 형식 및 현재 어셈블리의 멤버에 액세스할 수 있는 단일 friend 어셈블리를 지정 하는 특성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-106">You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly.</span></span> <span data-ttu-id="ced1c-107">두 가지 방법으로 여러 friend 어셈블리를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-107">You can define multiple friend assemblies in two ways.</span></span> <span data-ttu-id="ced1c-108">다음 예제와 같이 개별 어셈블리 수준 특성으로 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-108">They can appear as individual assembly-level attributes, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 <span data-ttu-id="ced1c-109">별도 사용도 나타날 수 있습니다 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 태그가 있지만 단일 `assembly` 키워드를 다음 예제와 같이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-109">They can also appear with separate <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> tags but a single `assembly` keyword, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 <span data-ttu-id="ced1c-110">Friend 어셈블리도 식별 되는 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-110">The friend assembly is identified by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor.</span></span> <span data-ttu-id="ced1c-111">현재 어셈블리 및 friend 어셈블리를 모두 해제 해야 서명 또는 두 어셈블리가 강력한 이름으로 서명 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-111">Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.</span></span>  
  
 <span data-ttu-id="ced1c-112">두 어셈블리가 서명 되지 않은 경우는 `assemblyName` 인수 디렉터리 경로 또는 파일 이름 확장명 없이 지정 된 friend 어셈블리의 이름으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-112">If both assemblies are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file name extension.</span></span>  
  
 <span data-ttu-id="ced1c-113">두 어셈블리가 강력한로 서명 하는 경우 이름에 대 한 인수는 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> 생성자 디렉터리 경로 또는 파일 이름 확장명 없이 전체 공개 키 (및 하지는 공개 키 토큰)와 함께 어셈블리의 이름으로 구성 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-113">If both assemblies are signed with a strong name, the argument to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token).</span></span> <span data-ttu-id="ced1c-114">강력한 이름의 어셈블리의 전체 공개 키를 얻으려면 참조는 [전체 공개 키 가져오기](#Key) 이 문서의 뒷부분에 나오는 섹션.</span><span class="sxs-lookup"><span data-stu-id="ced1c-114">To get the full public key of a strong-named assembly, see the [Getting the full public key](#Key) section later in this article.</span></span> <span data-ttu-id="ced1c-115">사용에 대 한 자세한 내용은 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 강력한 이름의 어셈블리 참조는 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-115">For more information about using <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> with strong-named assemblies, see the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="ced1c-116">에 대 한 값을 포함 하지 않습니다는 <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, 또는 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> 인수에 대 한 필드, Visual Basic, C# 및 c + + 컴파일러에서는이 메일은 컴파일러 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-116">Do not include values for the <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, or <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error.</span></span> <span data-ttu-id="ced1c-117">컴파일러는 오류로 처리 하지는 않습니다를 사용 하는 경우 (같은 [IL 어셈블러 (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) 고 어셈블리가 강력한 이름의 <xref:System.MethodAccessException> 예외가 처음으로 액세스 하는 지정된 된 friend 어셈블리는 포함 된 어셈블리는 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-117">If you use a compiler that does not treat it as an error (such as the [IL Assembler (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) and the assemblies are strong-named, a <xref:System.MethodAccessException> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute.</span></span>  
  
 <span data-ttu-id="ced1c-118">이 특성을 사용 하는 방법에 대 한 자세한 내용은 다음 항목을 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-118">For more information about how to use this attribute, see the following topics:</span></span>  
  
-   [<span data-ttu-id="ced1c-119">Friend 어셈블리(C++)</span><span class="sxs-lookup"><span data-stu-id="ced1c-119">Friend Assemblies (C++)</span></span>](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [<span data-ttu-id="ced1c-120">Friend 어셈블리</span><span class="sxs-lookup"><span data-stu-id="ced1c-120">Friend Assemblies</span></span>](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a><span data-ttu-id="ced1c-121">전체 공개 키 가져오기</span><span class="sxs-lookup"><span data-stu-id="ced1c-121">Getting the full public key</span></span>  
 <span data-ttu-id="ced1c-122">사용할 수는 [강력한 이름 도구 (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) 하는 강력한 이름의 키 파일 (.snk)에서 전체 공개 키를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-122">You can use the [Strong Name Tool (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file.</span></span> <span data-ttu-id="ced1c-123">이렇게 하려면 다음 단계를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-123">To do this, you perform the following steps:</span></span>  
  
1.  <span data-ttu-id="ced1c-124">강력한 이름의 키 파일에서 별도 파일로 공개 키를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-124">Extract the public key from the strong-named key file to a separate file:</span></span>  
  
     <span data-ttu-id="ced1c-125">**Sn -p**  *snk_file* *outfile*</span><span class="sxs-lookup"><span data-stu-id="ced1c-125">**Sn -p**  *snk_file* *outfile*</span></span>  
  
2.  <span data-ttu-id="ced1c-126">전체 공개 키를 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-126">Display the full public key to the console:</span></span>  
  
     <span data-ttu-id="ced1c-127">**Sn -tp**  *outfile*</span><span class="sxs-lookup"><span data-stu-id="ced1c-127">**Sn -tp**  *outfile*</span></span>  
  
3.  <span data-ttu-id="ced1c-128">복사 하 여 소스 코드에 전체 공개 키 값을 붙여 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-128">Copy and paste the full public key value into your source code.</span></span>  
  
## <a name="compiling-the-friend-assembly-with-c"></a><span data-ttu-id="ced1c-129">C#을 사용 하 여 friend 어셈블리 컴파일</span><span class="sxs-lookup"><span data-stu-id="ced1c-129">Compiling the friend assembly with C#</span></span>  
 <span data-ttu-id="ced1c-130">출력 파일 (.exe 또는.dll)의 이름을 사용 하 여 명시적으로 지정 해야 friend 어셈블리를 컴파일하는 C# 컴파일러를 사용 하는 경우는 **/out** 컴파일러 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-130">If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option.</span></span> <span data-ttu-id="ced1c-131">컴파일러가 외부 참조에 바인딩할 때 작성하고 있는 어셈블리에 대해 이름을 생성하지 않았기 때문에 이 과정이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-131">This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</span></span> <span data-ttu-id="ced1c-132">**/out** 컴파일러 옵션은 해당 및 Visual Basic 컴파일러에 대 한 선택적 **-아웃** 또는 **-o** friend를 컴파일할 경우 컴파일러 옵션을 사용할 수 해야 F # 컴파일러는 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-132">The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.</span></span>  
  
## <a name="compiling-the-friend-assembly-with-c"></a><span data-ttu-id="ced1c-133">C + +를 사용 하 여 friend 어셈블리 컴파일</span><span class="sxs-lookup"><span data-stu-id="ced1c-133">Compiling the friend assembly with C++</span></span>  
 <span data-ttu-id="ced1c-134">내부 멤버으로 사용 하도록 설정 하기 위해 c + +에서는 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> friend 어셈블리에 액세스할 수 있는 특성을 사용 해야 합니다는 `as_friend` c + + 지시문에는 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-134">In C++, in order to make the internal members enabled by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute accessible to a friend assembly, you must use the `as_friend` attribute in the C++  directive.</span></span> <span data-ttu-id="ced1c-135">자세한 내용은 참조 [Friend 어셈블리 (c + +)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-135">For more information, see [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ced1c-136">**서명 된 어셈블리**</span><span class="sxs-lookup"><span data-stu-id="ced1c-136">**Signed assemblies**</span></span>  
  
 <span data-ttu-id="ced1c-137">다음 예제에서는 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 있도록 특성은 `internal` 라는 메서드 `AppendDirectorySeparator` 에서 서명 된 어셈블리를 다른 서명 된 어셈블리에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-137">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` method named `AppendDirectorySeparator` in a signed assembly visible to another signed assembly.</span></span> <span data-ttu-id="ced1c-138">정의 `FileUtilities` 포함 하는 클래스 `AppendDirectorySeparator` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ced1c-138">It defines a `FileUtilities` class that includes an internal `AppendDirectorySeparator` method.</span></span> <span data-ttu-id="ced1c-139"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 특성이 포함 된 어셈블리에 적용 되는 `FileUtilities` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-139">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute is applied to the assembly that contains the `FileUtilities` class.</span></span> <span data-ttu-id="ced1c-140">특성을 사용 하면 이라는 어셈블리 `Friend1` 이 내부 멤버에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-140">The attribute allows an assembly named `Friend1` to access this internal member.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 <span data-ttu-id="ced1c-141">다음 예에서는 이라는 강력한 이름의 어셈블리로 컴파일됩니다 `Friend1`, `Example.Main` 에서 메서드 `Friend1` 성공적으로 호출할 수는 `FileUtilities.AppendDirectorySeparator` 메서드를 방법이 내부에 `Assembly1` 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-141">If the following example is compiled into a strong-named assembly named `Friend1`, the `Example.Main` method in `Friend1` can successfully call the `FileUtilities.AppendDirectorySeparator` method, although the method is internal to the `Assembly1` assembly.</span></span> <span data-ttu-id="ced1c-142">명령줄에서 C#에서 컴파일하 하는 경우 사용 해야는 **/out** 컴파일러 스위치 외부 참조에 대 한 컴파일러 바인딩할 때 friend 어셈블리의 이름을 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-142">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 <span data-ttu-id="ced1c-143">**서명 되지 않은 어셈블리**</span><span class="sxs-lookup"><span data-stu-id="ced1c-143">**Unsigned assemblies**</span></span>  
  
 <span data-ttu-id="ced1c-144">다음 예제에서는 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 특성을 확인 한 `internal` 멤버 간에 표시 되는 서명 되지 않은 어셈블리의 어셈블리 서명 되지 않은 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-144">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` member of an unsigned assembly visible to another unsigned assembly.</span></span> <span data-ttu-id="ced1c-145">특성을 보장 하는 `internal` `StringLib.IsFirstLetterUpperCase` 메서드 라는 어셈블리에서 `UtilityLib` 는 라는 어셈블리에서 코드에 표시 `Friend2`합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-145">The attribute ensures that the `internal` `StringLib.IsFirstLetterUpperCase` method in an assembly named `UtilityLib` is visible to the code in an assembly named `Friend2`.</span></span>  <span data-ttu-id="ced1c-146">다음은 UtilityLib.dll에 대 한 소스 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-146">The following is the source code for UtilityLib.dll:</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 <span data-ttu-id="ced1c-147">다음 예제에서는 제공에 대 한 소스 코드는 `Friend2` 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-147">The following example provides the source code for the `Friend2` assembly.</span></span> <span data-ttu-id="ced1c-148">명령줄에서 C#에서 컴파일하 하는 경우 사용 해야는 **/out** 컴파일러 스위치 외부 참조에 대 한 컴파일러 바인딩할 때 friend 어셈블리의 이름을 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-148">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="ced1c-149">friend 어셈블리의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-149">The name of a friend assembly.</span></span></param>
        <summary><span data-ttu-id="ced1c-150">지정된 friend 어셈블리의 이름을 사용하여 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-150">Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> class with the name of the specified friend assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ced1c-151"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> 생성자 내부 형식 및 현재 어셈블리의 멤버에 대 한 액세스 권한이 있는 어셈블리가 friend 어셈블리를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-151">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly.</span></span>  
  
 <span data-ttu-id="ced1c-152">현재 어셈블리 및 friend 어셈블리를 모두 해제 해야 서명 또는 둘 다 강력한 이름으로 서명 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-152">Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name.</span></span> <span data-ttu-id="ced1c-153">(강력한 이름의 어셈블리에 대 한 자세한 내용은 참조 [and using strong-named Assemblies](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) 둘 다 서명 되지 않은 경우는 `assemblyName` 인수 디렉터리 경로 또는 파일 확장명 없이 지정 된 friend 어셈블리의 이름으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-153">(For more information about strong-named assemblies, see [Creating and Using Strong-Named Assemblies](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) If both are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file extension.</span></span> <span data-ttu-id="ced1c-154">둘 모두에 서명 된 `assemblyName` 디렉터리 경로 또는 파일 이름 확장명 없이 전체 공개 키 (않음 하지는 공개 키 토큰)와 함께 friend 어셈블리의 이름으로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-154">If both are signed, `assemblyName` consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token).</span></span> <span data-ttu-id="ced1c-155">강력한 이름, culture, 버전 또는 프로세서 아키텍처 정보를 제공 하는 다른 구성 요소에 지정할 수 없습니다는 `assemblyName` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-155">The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the `assemblyName` argument.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ced1c-156">출력 파일 (.exe 또는.dll)의 이름을 사용 하 여 명시적으로 지정 해야 friend 어셈블리를 컴파일하는 C# 컴파일러를 사용 하는 경우는 **/out** 컴파일러 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-156">If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option.</span></span> <span data-ttu-id="ced1c-157">컴파일러가 외부 참조에 바인딩할 때 작성하고 있는 어셈블리에 대해 이름을 생성하지 않았기 때문에 이 과정이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-157">This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</span></span> <span data-ttu-id="ced1c-158">**/out** 컴파일러 옵션은 해당 및 Visual Basic 컴파일러에 대 한 선택적 **-아웃** 또는 **-o** friend를 컴파일할 경우 컴파일러 옵션을 사용할 수 해야 F # 컴파일러는 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-158">The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.</span></span>  
  
 <span data-ttu-id="ced1c-159">사용할 수 있습니다 [Sn.exe (강력한 이름 도구)](~/docs/framework/tools/sn-exe-strong-name-tool.md) 하는 강력한 이름의 키 파일 (.snk)에서 전체 공개 키를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-159">You can use [Sn.exe (Strong Name Tool)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file.</span></span> <span data-ttu-id="ced1c-160">이렇게 하려면 다음 단계를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-160">To do this, you perform the following steps:</span></span>  
  
1.  <span data-ttu-id="ced1c-161">강력한 이름의 키 파일에서 별도 파일로 공개 키를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-161">Extract the public key from the strong-named key file to a separate file:</span></span>  
  
     <span data-ttu-id="ced1c-162">**Sn -p**  *snk_file* *outfile*</span><span class="sxs-lookup"><span data-stu-id="ced1c-162">**Sn -p**  *snk_file* *outfile*</span></span>  
  
2.  <span data-ttu-id="ced1c-163">전체 공개 키를 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-163">Display the full public key to the console:</span></span>  
  
     <span data-ttu-id="ced1c-164">**Sn -tp**  *outfile*</span><span class="sxs-lookup"><span data-stu-id="ced1c-164">**Sn -tp**  *outfile*</span></span>  
  
3.  <span data-ttu-id="ced1c-165">복사 하 여 소스 코드에 전체 공개 키 값을 붙여 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-165">Copy and paste the full public key value into your source code.</span></span>  
  
 <span data-ttu-id="ced1c-166">사용 하는 방법에 대 한 자세한 내용은 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 특성 다음 항목을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ced1c-166">For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:</span></span>  
  
-   [<span data-ttu-id="ced1c-167">Friend 어셈블리(C++)</span><span class="sxs-lookup"><span data-stu-id="ced1c-167">Friend Assemblies (C++)</span></span>](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [<span data-ttu-id="ced1c-168">Friend 어셈블리</span><span class="sxs-lookup"><span data-stu-id="ced1c-168">Friend Assemblies</span></span>](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
   
  
## Examples  
 <span data-ttu-id="ced1c-169">**서명 된 어셈블리**</span><span class="sxs-lookup"><span data-stu-id="ced1c-169">**Signed assemblies**</span></span>  
  
 <span data-ttu-id="ced1c-170">다음 예제에서는 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 있도록 특성은 `internal` 라는 메서드 `AppendDirectorySeparator` 에서 서명 된 어셈블리를 다른 서명 된 어셈블리에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-170">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` method named `AppendDirectorySeparator` in a signed assembly visible to another signed assembly.</span></span> <span data-ttu-id="ced1c-171">정의 `FileUtilities` 포함 하는 클래스 `AppendDirectorySeparator` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ced1c-171">It defines a `FileUtilities` class that includes an internal `AppendDirectorySeparator` method.</span></span> <span data-ttu-id="ced1c-172"><xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 특성이 포함 된 어셈블리에 적용 되는 `FileUtilities` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-172">The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute is applied to the assembly that contains the `FileUtilities` class.</span></span> <span data-ttu-id="ced1c-173">특성을 사용 하면 이라는 어셈블리 `Friend1` 이 내부 멤버에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-173">The attribute allows an assembly named `Friend1` to access this internal member.</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 <span data-ttu-id="ced1c-174">다음 예에서는 이라는 강력한 이름의 어셈블리로 컴파일됩니다 `Friend1`, 성공적으로 호출할 수는 `FileUtilities.AppendDirectorySeparator` 메서드 내부에 있는 경우에는 `Assembly1` 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-174">If the following example is compiled into a strong-named assembly named `Friend1`, it can successfully call the `FileUtilities.AppendDirectorySeparator` method, even though the method is internal to the `Assembly1` assembly.</span></span> <span data-ttu-id="ced1c-175">명령줄에서 C#에서 컴파일하 하는 경우 사용 해야는 **/out** 컴파일러 스위치 외부 참조에 대 한 컴파일러 바인딩할 때 friend 어셈블리의 이름을 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-175">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 <span data-ttu-id="ced1c-176">다음 예제에서는 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 특성을 확인 한 `internal` 멤버 간에 표시 되는 서명 되지 않은 어셈블리의 어셈블리 서명 되지 않은 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-176">The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` member of an unsigned assembly visible to another unsigned assembly.</span></span> <span data-ttu-id="ced1c-177">특성을 보장 하는 `internal` `StringLib.IsFirstLetterUpperCase` 메서드 라는 어셈블리에서 `UtilityLib` 는 라는 어셈블리에서 코드에 표시 `Friend2`합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-177">The attribute ensures that the `internal` `StringLib.IsFirstLetterUpperCase` method in an assembly named `UtilityLib` is visible to the code in an assembly named `Friend2`.</span></span>  <span data-ttu-id="ced1c-178">다음은 UtilityLib.dll에 대 한 소스 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-178">The following is the source code for UtilityLib.dll:</span></span>  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 <span data-ttu-id="ced1c-179">**서명 되지 않은 어셈블리**</span><span class="sxs-lookup"><span data-stu-id="ced1c-179">**Unsigned assemblies**</span></span>  
  
 <span data-ttu-id="ced1c-180">다음 예제에서는 제공에 대 한 소스 코드는 `Friend2` 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-180">The following example provides the source code for the `Friend2` assembly.</span></span> <span data-ttu-id="ced1c-181">명령줄에서 C#에서 컴파일하 하는 경우 사용 해야는 **/out** 컴파일러 스위치 외부 참조에 대 한 컴파일러 바인딩할 때 friend 어셈블리의 이름을 사용할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-181">Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.</span></span>  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ced1c-182">이 속성이 구현되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-182">This property is not implemented.</span></span></summary>
        <value><span data-ttu-id="ced1c-183">이 속성은 값을 반환하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-183">This property does not return a value.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ced1c-184"><see langword="internal" /> 키워드로 표시된 모든 형식 및 형식 멤버가 표시되도록 지정할 friend 어셈블리의 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-184">Gets the name of the friend assembly to which all types and type members that are marked with the <see langword="internal" /> keyword are to be made visible.</span></span></summary>
        <value><span data-ttu-id="ced1c-185">friend 어셈블리의 이름을 나타내는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ced1c-185">A string that represents the name of the friend assembly.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ced1c-186">사용 하는 방법에 대 한 자세한 내용은 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 특성 다음 항목을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ced1c-186">For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:</span></span>  
  
-   [<span data-ttu-id="ced1c-187">Friend 어셈블리(C++)</span><span class="sxs-lookup"><span data-stu-id="ced1c-187">Friend Assemblies (C++)</span></span>](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [<span data-ttu-id="ced1c-188">Friend 어셈블리</span><span class="sxs-lookup"><span data-stu-id="ced1c-188">Friend Assemblies</span></span>](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>