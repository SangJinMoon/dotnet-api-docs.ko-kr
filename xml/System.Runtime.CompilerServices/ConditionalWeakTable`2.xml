<Type Name="ConditionalWeakTable&lt;TKey,TValue&gt;" FullName="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="75a1ca0bc007b584e93073f8cc318bd920092d8d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480167" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ConditionalWeakTable&lt;TKey,TValue&gt; where TKey : class where TValue : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ConditionalWeakTable`2&lt;class TKey, class TValue&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ConditionalWeakTable(Of TKey, TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA; where TKey : class where TValue : classpublic ref class ConditionalWeakTable sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Docs>
    <typeparam name="TKey">필드가 연결된 참조 형식입니다.</typeparam>
    <typeparam name="TValue">필드의 형식입니다. 참조 형식이어야 합니다.</typeparam>
    <summary>컴파일러에서 관리되는 개체에 개체 필드를 동적으로 연결할 수 있도록 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 클래스를 사용 하면 언어 컴파일러에서 런타임 시 임의의 속성 관리 되는 개체에 연결 합니다. A <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 개체는 키로 표현 되는 관리 되는 개체를 값으로 표현 되는 연결 된 속성을 바인딩하는 사전입니다. 개체의 키가의 개별 인스턴스는 `TKey` 클래스 속성이 연결 된 값은 해당 개체에 할당 된 속성 값입니다.  
  
 키는 고유 해야 합니다. 즉,는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 클래스는 관리 되는 개체당 하나의 연결 된 값을 지원 합니다. 두 키가 같은지를 전달 하는 경우는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드 반환 `true`합니다.  
  
> [!NOTE]
>  재정의 하 여 같음 비교를 제어할 수는 없습니다 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 를 명시적으로 키에 대 한 해시 코드를 설정 합니다. <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 클래스에서 사용 하지는 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 계산할 해시 코드를 메서드와 따라서 호출 하지 않습니다 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 재정의 합니다.  
  
 하지만 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 키/값 쌍의 컬렉션을 포함 하는 클래스, 것은 가장으로 간주 하는 사전 개체 보다는 테이블입니다. <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 여러 가지 방법으로 사전에서와 다른 클래스:  
  
-   키를 유지 하지 않습니다. 즉, 키를 유지 되지 않는 컬렉션의 멤버 이기 때문입니다.  
  
-   모든 메서드는 포함 되지 않습니다 (예: `GetEnumerator` 또는 `Contains`) 사전은 일반적으로 포함 하는 합니다.  
  
-   구현 하지 않습니다는 <xref:System.Collections.Generic.IDictionary%602> 인터페이스입니다.  
  
 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 클래스 컬렉션에 저장 된 키의 개체 수명 관리에 있는 다른 컬렉션 개체에서 달라 집니다. 일반적으로 개체 컬렉션으로 저장 된 경우 그 수명은 제거 됩니다 (및 개체에 추가 참조가 없는) 때까지 또는 컬렉션 개체 자체에서 제거 될 때까지 지속 됩니다. 그러나는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블에 키/값 쌍을 보장 하지는 키 유지 (예: 테이블에 있는 경우 한 개의 키, A, v 1 값이 있는 테이블에 저장 된 값에서 직접 액세스 될 수 있게 하는 경우에 추가 클래스 및 P2 A에 대 한 참조를 포함 하는 값을 사용 하 여 두 번째 키, B). 대신, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 키에 다른 참조가 없는 테이블 밖으로 키/값 항목을 자동으로 제거 합니다. 예제에서는 그림을 제공합니다.  
  
   
  
## Examples  
 다음 예제에서는 키에 저장 되는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블 외부 참조를 삭제 한 후에 테이블 유지 되지 않습니다. 이 예제에서는 두 개의 클래스를 정의: `ManagedClass`는 테이블의 키를 나타내는 및 `ClassData`, 키의 값을 나타냅니다. 이 예제에서는 각 유형의 세 가지 개체를 인스턴스화합니다. 또한 인스턴스화하는 <xref:System.WeakReference> 나타내는 두 번째 개체입니다 `ManagedClass`, 되 고 다음 두 번째 소멸 `ManagedClass` 인스턴스. 두 번째를 가져오려는 시도가 `ManagedClass` 에서 개체는 <xref:System.WeakReference.Target%2A> 속성 개체에 대 한 참조가 남아 있는지 나타냅니다.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/cs/example1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/vb/example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>인스턴스는 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 클래스는 스레드로부터 안전 합니다. 호출자에 게 추가 잠금을 작업을 수행 하는 필요 하지 않습니다.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalWeakTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConditionalWeakTable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> 생성자는 빈 인스턴스화합니다 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블, 테이블 키/값 쌍을 포함 하는, 즉 합니다. 호출 하 여 키/값 쌍을 추가할 수는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, 또는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 메서드.  
  
 모든 키에는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 개체 고유 해야 합니다. 키는 같은 개체를 참조 하는 경우 고유 하지 않습니다 (즉,에 인수로 전달 하는 경우는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드 반환 `true`).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(TKey key, TValue value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">추가할 키입니다. <c>키</c>는 속성이 연결된 개체를 나타냅니다.</param>
        <param name="value">키의 속성 값입니다.</param>
        <summary>테이블에 키를 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 모든 키에는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 개체 고유 해야 합니다. 키는 같은 개체를 참조 하는 경우 고유 하지 않습니다 (즉,에 인수로 전달 하는 경우는 <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType> 메서드 반환 `true`).  
  
 키가 추가 작업 하는 동안 가비지 수집을 기본 키/값 쌍 제거 되 고 예외가 throw 하지 않고 새로운 키/값 쌍 추가 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 정의 `MainClass` 클래스 및 `MainInfo` 클래스에 대 한 정보를 제공 하는 `MainClass` 인스턴스. 이 예에서는 다음 호출에서 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> 메서드를 추가 하려면는 `MainClass` 개체 및 해당 연결 된 `MainInfo` 개체를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블입니다. 예제에 대 한 호출 또한는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 및 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 및 테이블에 키/값 쌍을 추가 하는 메서드는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 기존 키의 값을 검색 하는 메서드.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="key" />이(가) 이미 있습니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate">
      <MemberSignature Language="C#" Value="public void AddOrUpdate (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOrUpdate(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOrUpdate (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddOrUpdate(TKey key, TValue value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ConditionalWeakTable`2 ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ConditionalWeakTable`2 ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 수집기에서 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 개체를 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가비지 컬렉션이 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A> 현재 개체를 종료 될 경우.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateValue">
      <MemberSignature Language="C#" Value="public TValue GetOrCreateValue (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TValue GetOrCreateValue(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrCreateValue (key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue GetOrCreateValue(TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">검색할 키입니다. <c>키</c>는 속성이 연결된 개체를 나타냅니다.</param>
        <summary>테이블에서 지정된 키를 각각 검색하여 해당 값을 반환합니다. 테이블에 키가 없는 경우 테이블의 값을 나타내는 클래스의 기본 생성자를 메서드가 호출하여 지정된 키에 바인딩된 값을 만듭니다.</summary>
        <returns>테이블에 이미 <paramref name="key" />가 있으면 <paramref name="key" />에 해당하는 값이고, 그렇지 않으면 <paramref name="TValue" /> 제네릭 형식 매개 변수에 의해 정의된 클래스의 기본 생성자가 만든 새 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `key` 존재 하지 않는 테이블에 메서드 추가, 의해 정의 된 클래스의 기본 생성자를 호출 하 여 인스턴스화된 개체와 함께 `TValue` 제네릭 형식 매개 변수입니다. 경우는 `TValue` 클래스에 기본 생성자는 <xref:System.MissingMethodException> throw 됩니다.  
  
 이 권장된 방법에 새 값을 추가 하거나 기존 값을 검색할입니다는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블의 값 클래스는 기본 생성자를 정의 하는 경우 테이블입니다. 대신 호출 수를 기본 생성자를 정의 하지는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 테이블의 값을 나타내는 개체를 인스턴스화하는 콜백 제공 된 메서드를 사용 하는 메서드  
  
 키/값 쌍의 키가 테이블에서 찾을 수 없는 경우 호출을 추가 하지 않고 기존 키의 값을 검색 하는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 정의 `MainClass` 클래스 및 `MainInfo` 클래스에 대 한 정보를 제공 하는 `MainClass` 인스턴스. 예제에서는 호출은 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 를 추가 하려면 메서드는 `MainClass` 개체 및 해당 연결 된 `MainInfo` 개체를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블입니다. 예제에 대 한 호출 또한는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> 및 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 및 테이블에 키/값 쌍을 추가 하는 메서드는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 기존 키의 값을 검색 하는 메서드.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.MissingMethodException">
          <block subset="none" type="note">
            <para>  
 [Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.MissingMemberException" />을 catch합니다.  
  
</para>
          </block>  
  
 테이블 값을 나타내는 클래스가 기본 생성자를 정의하지 않는 경우</exception>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public TValue GetValue (TKey key, System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback createValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TValue GetValue(!TKey key, class System.Runtime.CompilerServices.ConditionalWeakTable`2/CreateValueCallback&lt;!TKey, !TValue&gt; createValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TValue GetValue(TKey key, System::Runtime::CompilerServices::ConditionalWeakTable&lt;TKey, TValue&gt;::CreateValueCallback ^ createValueCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="createValueCallback" Type="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback" />
      </Parameters>
      <Docs>
        <param name="key">검색할 키입니다. <c>키</c>는 속성이 연결된 개체를 나타냅니다.</param>
        <param name="createValueCallback">지정된 <c>키</c>에 대한 값을 만들 수 있는 메서드에 대한 대리자입니다. <c>TKey</c> 형식의 단일 매개 변수가 있으며 <c>TValue</c> 형식의 값을 반환합니다.</param>
        <summary>테이블에서 지정된 키를 각각 검색하여 해당 값을 반환합니다. 테이블에 키가 없는 경우 메서드가 콜백 메서드를 호출하여 지정된 키에 바인딩된 값을 만듭니다.</summary>
        <returns>테이블에 이미 <paramref name="key" />가 있으면 <paramref name="key" />에 연결된 값이고, 그렇지 않으면 <paramref name="createValueCallback" /> 대리자가 반환하는 새 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `key` 는 테이블에 존재 하지 않는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 에서 정의한 메서드를 호출 하는 `createValueCallback` 매개 변수 키를 전달 하 고 합니다. 새 값을 테이블의 키에 바인딩되고이 결과로 반환 합니다.  
  
 테이블의 값을 나타내는 클래스를 기본 생성자를 정의 하지 않는 경우에이 방법을 사용 합니다. 기본 생성자를 정의 사용 하 여는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 메서드 대신 합니다. 키/값 쌍의 키가 테이블에서 찾을 수 없는 경우 호출을 추가 하지 않고 기존 키의 값을 검색 하는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 메서드.  
  
 여러 스레드에서 동일한 키를 만들려고 `createValueCallback` 같은 키로 여러 번 호출 될 수 있습니다. 이러한 호출 중 하나에만 성공 하 고 반환 된 값을 테이블에 추가 됩니다. 스레드 값을 만드는 데 성공 결정 되지 않습니다. 이 규칙은을 호출 하도록 허용 `createValueCallback` 교착 상태를 방지 하기 위해 내부 테이블 잠금 외부입니다.  
  
   
  
## Examples  
 다음 예제에서는 정의 `MainClass` 클래스 및 `MainInfo` 클래스에 대 한 정보를 제공 하는 `MainClass` 인스턴스. 또한 정적 정의 (`Shared` Visual Basic의) `CreateAttachedValue` 에 지정할 수 있는 메서드는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> 대리자를 전달는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 메서드. 예제에서는 호출은 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 를 추가 하려면 메서드는 `MainClass` 개체 및 해당 연결 된 `MainInfo` 개체를 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블입니다. 예제에 대 한 호출 또한는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> 및 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> 및 테이블에 키/값 쌍을 추가 하는 메서드는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 기존 키의 값을 검색 하는 메서드.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 또는 <paramref name="createValueCallback" />가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
        <altmember cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">제거할 키입니다.</param>
        <summary>테이블에서 키와 해당 값을 제거합니다.</summary>
        <returns>
          키를 찾아서 제거하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 작업 동안 키가 가비지 수집을 메서드가 예외를 발생 시 키 지 않습니다 및 반환 값이 정의 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" />가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">연결된 속성이 있는 개체를 나타내는 키입니다.</param>
        <param name="value">이 메서드가 반환될 때 연결된 속성 값을 포함합니다. <c>키</c>를 찾을 수 없으면 <c>값</c>에 기본값이 포함됩니다.</param>
        <summary>지정된 키의 값을 가져옵니다.</summary>
        <returns>
          <paramref name="key" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메서드를 반환할 수 있습니다 하는 경우 키를 하는 가비지 수집 동안이 작업 `false` 설정 `value` 기본값으로 (경우 값의 키가 존재 하지 않는).  
  
   
  
## Examples  
 다음 예제에서는 정의 `MainClass` 클래스 및 `MainInfo` 클래스에 대 한 정보를 제공 하는 `MainClass` 인스턴스. 예제에서는 호출은 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>, 및 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> 키/값 쌍을 추가 하는 메서드는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> 테이블입니다. 이 예에서는 호출 각각의 경우에는 <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> 메서드를 키/값 쌍이 테이블에 추가 되었는지 확인 합니다.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" />가 <see langword="null" />인 경우</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)" />
        <altmember cref="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)" />
      </Docs>
    </Member>
  </Members>
</Type>