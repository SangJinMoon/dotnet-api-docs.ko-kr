<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlTextWriter.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b2dfec50e813dc928679ed1e8424877f3b9f797b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2dfec50e813dc928679ed1e8424877f3b9f797b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</source>
          <target state="translated">W3C XML(Extensible Markup Language) 1.0 및 Namespaces in XML 권장 사항을 따르는 XML 데이터를 포함하는 스트림이나 파일을 생성하는 빠르고, 캐시되지 않으며, 앞으로만 이동 가능한 방법을 제공하는 작성기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you use the <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> class instead.</source>
          <target state="translated">.NET Framework 2.0부터 <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> 클래스를 대신 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This class implements the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> class.</source>
          <target state="translated">이 클래스가 구현 하는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> maintains a namespace stack corresponding to all the namespaces defined in the current element stack.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 에 현재 요소 스택에서 정의 된 모든 네임 스페이스에 해당 하는 네임 스페이스 스택을 유지 관리 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Using <ph id="ph1">`XmlTextWriter`</ph> you can declare namespaces manually.</source>
          <target state="translated">사용 하 여 <ph id="ph1">`XmlTextWriter`</ph> 수동으로 네임 스페이스를 선언할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The above C# code produces the following output.</source>
          <target state="translated">위의 C# 코드는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 두 명의 자식 요소에서 중복 되지 않도록 하려면 루트 요소에 네임 스페이스 선언을 수준을 올립니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The child elements pick up the prefix from the namespace declaration.</source>
          <target state="translated">자식 요소는 네임 스페이스 선언에서 접두사를 선택 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> also allows you to override the current namespace declaration.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 에서는 현재 네임 스페이스 선언을 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the following example, the namespace URI "123" is overridden by "abc" to produce the XML element <ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>.</source>
          <target state="translated">다음 예제에서는 네임 스페이스 URI "123"을 "abc" XML 요소를 생성 하기 위해로 재정의 <ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>By using the write methods that take a prefix as an argument you can also specify which prefix to use.</source>
          <target state="translated">접두사를 인수로 사용 하는 쓰기 메서드를 사용 하 여 사용할 접두사를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text <ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>.</source>
          <target state="translated">다음 예제에서는 두 개의 서로 다른 접두사는 동일한 네임 스페이스는 XML 텍스트를 생성 하는 URI에 매핑됩니다 <ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If there are multiple namespace declarations mapping different prefixes to the same namespace URI, <ph id="ph1">`XmlTextWriter`</ph> walks the stack of namespace declarations backwards and picks the closest one.</source>
          <target state="translated">동일한 네임 스페이스 URI에 다른 접두사를 매핑하는 여러 네임 스페이스 선언이 있을 경우 <ph id="ph1">`XmlTextWriter`</ph> 네임 스페이스 선언의 스택으로 뒤로 검색 하 고 가장 가까운 스택을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the above C# example, because the <ph id="ph1">`WriteAttributeString`</ph> call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:</source>
          <target state="translated">위의 C# 예제에서는 때문에 <ph id="ph1">`WriteAttributeString`</ph> 에 호출 접두사를 지정 하지 않으므로 작성기 네임 스페이스 스택에 밀어 넣은 마지막 접두사를 사용 하 고 다음과 같은 XML을 생성 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If namespace conflicts occur, <ph id="ph1">`XmlTextWriter`</ph> resolves them by generating alternate prefixes.</source>
          <target state="translated">네임 스페이스 충돌이 발생 하면 <ph id="ph1">`XmlTextWriter`</ph> 대체 접두사를 생성 하 여이 확인 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>For example, if an attribute and element have the same prefix but different namespaces, <ph id="ph1">`XmlWriter`</ph> generates an alternate prefix for the attribute.</source>
          <target state="translated">예를 들어 하지만 서로 다른 네임 스페이스 접두사 같은 특성 및 요소는 <ph id="ph1">`XmlWriter`</ph> 특성에 대 한 다른 접두사를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The generated prefixes are named <ph id="ph1">`n{i}`</ph> where <ph id="ph2">`i`</ph> is a number beginning at 1.</source>
          <target state="translated">생성 된 접두사의 이름은 <ph id="ph1">`n{i}`</ph> 여기서 <ph id="ph2">`i`</ph> 1부터 시작 하는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The number is reset to 1 for each element.</source>
          <target state="translated">각 요소에 대해 1로 다시 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes).</source>
          <target state="translated">네임 스페이스 URI와 관련 된 특성에는 접두사 (기본 네임 스페이스 특성에 적용 되지 않습니다) 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This conforms to section 5.2 of the W3C Namespaces in XML recommendation.</source>
          <target state="translated">이 XML 권장 사항에 W3C 네임 스페이스의 5.2 섹션에 따릅니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.</source>
          <target state="translated">특성 네임 스페이스 URI를 참조 하지만, 접두사를 지정 하지 않습니다, 작성기 특성에 대 한 접두사를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When writing an empty element, an additional space is added between tag name and the closing tag, for example <ph id="ph1">`&lt;item /&gt;`</ph>.</source>
          <target state="translated">빈 요소를 작성할 때는 추가 사이 공백을 추가 태그 이름 및 닫는 태그 예를 들어 <ph id="ph1">`&lt;item /&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This provides compatibility with older browsers.</source>
          <target state="translated">오래 된 브라우저와 호환성을 제공합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When a <ph id="ph1">`String`</ph> is used as method parameter, <ph id="ph2">`null`</ph> and <ph id="ph3">`String.Empty`</ph> are equivalent.</source>
          <target state="translated">경우는 <ph id="ph1">`String`</ph> 메서드 매개 변수로 사용 되 <ph id="ph2">`null`</ph> 및 <ph id="ph3">`String.Empty`</ph> 동일 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`String.Empty`</ph> follows the W3C rules.</source>
          <target state="translated"><ph id="ph1">`String.Empty`</ph> W3C 규칙을 따릅니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>To write strongly typed data, use the <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph> class to convert data types to string.</source>
          <target state="translated">사용 하 여 강력한 형식의 데이터를 작성 하려면는 <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph> 데이터 형식을 문자열로 변환 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>For example, the following C# code converts the data from <ph id="ph1">`Double`</ph> to <ph id="ph2">`String`</ph> and writes the element <ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>.</source>
          <target state="translated">다음 C# 코드에서 데이터를 변환 하는 예를 들어 <ph id="ph1">`Double`</ph> 를 <ph id="ph2">`String`</ph> 요소를 작성 하 고 <ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> does not check for the following:</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 다음을 확인 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Invalid characters in attribute and element names.</source>
          <target state="translated">특성 및 요소 이름에 잘못 된 문자가 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Unicode characters that do not fit the specified encoding.</source>
          <target state="translated">지정 된 인코딩을 맞지 않는 유니코드 문자입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If the Unicode characters do not fit the specified encoding, the <ph id="ph1">`XmlTextWriter`</ph> does not escape the Unicode characters into character entities.</source>
          <target state="translated">지정 된 인코딩을 유니코드 문자가 포함 되지 않을 경우의 <ph id="ph1">`XmlTextWriter`</ph> 문자 엔터티를 유니코드 문자를 이스케이프 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Duplicate attributes.</source>
          <target state="translated">중복 된 특성입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Characters in the DOCTYPE public identifier or system identifier.</source>
          <target state="translated">DOCTYPE 공개 식별자 또는 시스템 식별자의 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Security Considerations</source>
          <target state="translated">보안 고려 사항</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The following items are things to consider when working with the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> class.</source>
          <target state="translated">다음 항목은 작업할 때 고려 사항에서 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Exceptions thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> can disclose path information that you do not want bubbled up to the application.</source>
          <target state="translated">throw 된 예외는 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 응용 프로그램에 버블링 원하지 않는 경로 정보가 공개 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Your applications must catch exceptions and process them appropriately.</source>
          <target state="translated">응용 프로그램에서는 예외를 캐치하고 적절히 처리해야 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When you pass the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> to another application the underlying stream is exposed to that application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>를 다른 응용 프로그램에 전달하면 원본으로 사용하는 스트림이 해당 응용 프로그램에 노출됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If you need to pass the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> to a semi-trusted application, you should use an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> object created by the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> method instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>를 부분 신뢰 응용 프로그램에 전달해야 할 경우 <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> 메서드에서 만든 <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> 개체를 대신 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 에 전달 되는 모든 데이터의 유효성을 검사 하지 않습니다는 <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>You should not pass arbitrary data to these methods.</source>
          <target state="translated">임의의 데이터를 이러한 메서드에 전달 해서는 안 됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.</source>
          <target state="translated">기본 설정이 변경 되 면에 생성 된 출력이 올바른 형식의 XML 데이터는 아닙니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Do not accept supporting components, such as an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object, from an untrusted source.</source>
          <target state="translated">와 같은 지원 구성 요소를 받아들이지 않습니다는 <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> 신뢰할 수 없는 소스에서 개체입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 클래스의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>The <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> to write to.</source>
          <target state="translated">쓸 <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>It is assumed that the <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> is already set to the correct encoding.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph>가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>를 사용하여 <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 클래스의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream to which you want to write.</source>
          <target state="translated">작성하려는 스트림입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The encoding to generate.</source>
          <target state="translated">생성할 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>If encoding is <ph id="ph1">&lt;see langword="null" /&gt;</ph> it writes out the stream as UTF-8 and omits the encoding attribute from the <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>.</source>
          <target state="translated">인코딩이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이면 스트림이 UTF-8로 작성되고 <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>의 인코딩 특성이 생략됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class using the specified stream and encoding.</source>
          <target state="translated">지정된 스트림 및 인코딩을 사용하여 <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> 클래스의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The encoding is not supported or the stream cannot be written to.</source>
          <target state="translated">인코딩이 지원되지 않거나 스트림을 작성할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="w" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="w" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename to write to.</source>
          <target state="translated">작성할 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>If the file exists, it truncates it and overwrites it with the new content.</source>
          <target state="translated">파일이 있으면 해당 파일이 잘리고 새 콘텐츠로 덮어써집니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The encoding to generate.</source>
          <target state="translated">생성할 인코딩입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>If encoding is <ph id="ph1">&lt;see langword="null" /&gt;</ph> it writes the file out as UTF-8, and omits the encoding attribute from the <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>.</source>
          <target state="translated">인코딩이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이면 파일이 UTF-8로 작성되고 <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>의 인코딩 특성이 생략됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Creates an instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph> class using the specified file.</source>
          <target state="translated">지정된 파일을 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph> 클래스의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</source>
          <target state="translated">인코딩이 지원되지 않는 경우 또는 파일 이름이 비어 있거나 공백 또는 잘못된 문자가 포함되어 있는 경우</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Access is denied.</source>
          <target state="translated">액세스가 거부되었습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">파일 이름이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The directory to write to is not found.</source>
          <target state="translated">쓸 디렉터리가 없는 경우</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</source>
          <target state="translated">파일 이름에 정확하지 않거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블 구문이 있는 경우</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>Gets the underlying stream object.</source>
          <target state="translated">내부 스트림 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>The stream to which the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> is writing or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the <ph id="ph3">&lt;see langword="XmlTextWriter" /&gt;</ph> was constructed using a <ph id="ph4">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that does not inherit from the <ph id="ph5">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph>가 작성 중인 스트림이거나, <ph id="ph4">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> 클래스에서 상속되지 않은 <ph id="ph5">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph>를 사용하여 <ph id="ph2">&lt;see langword="null" /&gt;</ph>가 생성된 경우에는 <ph id="ph3">&lt;see langword="XmlTextWriter" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a <ph id="ph1">`TextWriter`</ph> that is derived from the <ph id="ph2">`StreamWriter`</ph> class, this property is equivalent to the <ph id="ph3">&lt;xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">작성기가 사용 하 여 생성 된 경우는 <ph id="ph1">`TextWriter`</ph> 에서 파생 되는 <ph id="ph2">`StreamWriter`</ph> 클래스,이 속성은 해당 하는 <ph id="ph3">&lt;xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>, this property returns the <ph id="ph2">`Stream`</ph> passed to the constructor.</source>
          <target state="translated">기록기가 사용 하 여 생성 된 경우는 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>,이 속성은 반환 된 <ph id="ph2">`Stream`</ph> 생성자에 전달 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a file name, this property returns the <ph id="ph1">`Stream`</ph> representing the file.</source>
          <target state="translated">이 속성을 반환 하는 경우 기록기가 구성 파일 이름을 사용 하 여 <ph id="ph1">`Stream`</ph> 파일을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Closes this stream and the underlying stream.</source>
          <target state="translated">이 스트림과 내부 스트림을 닫습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Any elements or attributes left open are automatically closed.</source>
          <target state="translated">모든 요소 또는 특성을 열린 상태로 자동으로 닫힙니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>This method does not throw any exceptions.</source>
          <target state="translated">이 메서드는 모든 예외를 throw 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">다음 예제에서는 XML 조각을 씁니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</source>
          <target state="translated">버퍼에 있는 모든 내용을 내부 스트림으로 플러시하고 내부 스트림도 플러시합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>This is called instead of <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Close%2A&gt;</ph> when you want to write more to the underlying stream without losing what is still in the buffer.</source>
          <target state="translated">이 대신 이라고 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Close%2A&gt;</ph> 버퍼에 있는 내용을 손실 하지 않고 기본 스트림에 더 작성 하려는 경우.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>The following example writes out two XML fragments.</source>
          <target state="translated">다음 예제에서는 두 개의 XML 조각을 씁니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Indicates how the output is formatted.</source>
          <target state="translated">출력의 형식이 지정되는 방법을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.Formatting" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Formatting" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The default is <ph id="ph1">&lt;see langword="Formatting.None" /&gt;</ph> (no special formatting).</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="Formatting.None" /&gt;</ph>(특별한 형식 지정 없음)입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>If the <ph id="ph1">`Indented`</ph> option is set, child elements are indented using the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.Indentation%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.IndentChar%2A&gt;</ph> properties.</source>
          <target state="translated">경우는 <ph id="ph1">`Indented`</ph> 옵션이 설정 되어, 자식 요소를 사용 하 여 들여씁니다는 <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.Indentation%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.IndentChar%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Only element content is indented.</source>
          <target state="translated">요소 콘텐츠만 들여씁니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The following C# code writes out HTML elements including mixed content:</source>
          <target state="translated">다음 C# 코드 혼합 된 콘텐츠를 포함 하 여 HTML 요소를 작성 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The above code produces the following output:</source>
          <target state="translated">위의 코드는 다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>When this is viewed in HTML no white space appears between the bold and italic elements.</source>
          <target state="translated">HTML에서이 볼 때 굵게 및 기울임꼴 요소 사이 공백이 없습니다 나타납니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>In fact, in this example, if indenting was added between these elements the word "Elephant" would be incorrectly broken.</source>
          <target state="translated">실제로이 예제에서는 들여쓰기가 이러한 요소 간의 추가 되 면 "코끼리" 라는 단어가 될 잘못 깨질.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Writing any text content, excluding <ph id="ph1">`String.Empty`</ph> puts that element into mixed content mode.</source>
          <target state="translated">모든 텍스트를 제외 하 고 콘텐츠 쓰기 <ph id="ph1">`String.Empty`</ph> 혼합 콘텐츠 모드로 해당 요소를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Child elements do not inherit this "mixed" mode status.</source>
          <target state="translated">자식 요소는이 "혼합된" 모드 상태를 상속 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>A child element of a "mixed" element does indenting, unless it is also contains "mixed" content.</source>
          <target state="translated">"혼합" 요소는 자식 요소가 들여쓰기를 포함 하지 않은 경우 "혼합 된" 콘텐츠.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Element content (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)</ph> and mixed content (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)</ph> are defined according to the XML 1.0 definitions of these terms.</source>
          <target state="translated">요소 콘텐츠 (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)</ph> 된 혼합 된 내용 및 (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)</ph> 이러한 용어의 XML 1.0 정의 따라 정의 됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">다음 예제에서는 XML 조각을 씁니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Gets or sets how many IndentChars to write for each level in the hierarchy when <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph>이 <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>로 설정될 때 계층구조의 각 수준에 작성할 IndentChars 수를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Number of <ph id="ph1">&lt;see langword="IndentChars" /&gt;</ph> for each level.</source>
          <target state="translated">각 수준의 <ph id="ph1">&lt;see langword="IndentChars" /&gt;</ph> 수입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The default is 2.</source>
          <target state="translated">기본값은 2입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Indentation is performed on following node types: <ph id="ph1">`DocumentType`</ph>, <ph id="ph2">`Element`</ph>, <ph id="ph3">`Comment`</ph>, <ph id="ph4">`ProcessingInstruction`</ph>, and <ph id="ph5">`CDATASection`</ph>.</source>
          <target state="translated">노드 형식에서 들여쓰기를 수행: <ph id="ph1">`DocumentType`</ph>, <ph id="ph2">`Element`</ph>, <ph id="ph3">`Comment`</ph>, <ph id="ph4">`ProcessingInstruction`</ph>, 및 <ph id="ph5">`CDATASection`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>All other node types are not affected.</source>
          <target state="translated">다른 모든 노드 형식은 영향을 받지 않습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The <ph id="ph1">`XmlTextWriter`</ph> does not indent the internal DTD subset.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 내부 DTD 하위 집합을 들여쓰지 않습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>However, you could do the following to apply formatting to the internal DTD subset.</source>
          <target state="translated">그러나 내부 DTD 하위 집합에 서식을 적용 하려면 다음을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">다음 예제에서는 XML 조각을 씁니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Setting this property to a negative value.</source>
          <target state="translated">이 속성을 음의 값으로 설정하는 경우</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>Gets or sets which character to use for indenting when <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph>이 <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>로 설정된 경우 들여쓰기에 사용할 문자를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The character to use for indenting.</source>
          <target state="translated">들여쓰기에 사용할 문자입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The default is space.</source>
          <target state="translated">기본값은 공백입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> allows you to set this property to any character.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph>를 사용하면 이 속성을 모든 문자로 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</source>
          <target state="translated">유효한 XML을 확인하려면 유효한 공백 문자 0x9, 0x10, 0x13 또는 0x20을 지정해야 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Namespace URI whose prefix you want to find.</source>
          <target state="translated">찾으려는 접두사를 가진 네임스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Returns the closest prefix defined in the current namespace scope for the namespace URI.</source>
          <target state="translated">네임스페이스 URI의 현재 네임스페이스 범위에 정의된 가장 비슷한 접두사를 반환합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>The matching prefix.</source>
          <target state="translated">일치하는 접두사입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no matching namespace URI is found in the current scope.</source>
          <target state="translated">또는 현재 범위에 일치하는 네임스페이스 URI가 없는 경우에는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">다음 예제에서는 책을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source><ph id="ph1">&lt;paramref name="ns" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ns" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>Gets or sets a value indicating whether to do namespace support.</source>
          <target state="translated">네임스페이스 지원 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to support namespaces; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">네임스페이스를 지원하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>This property determines whether the writer supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</source>
          <target state="translated">이 속성 작성기 www.w3.org/TR/REC-xml-names에 있는 XML 권장 사항에 W3C 네임 스페이스를 지원 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>You can only change this property when in the <ph id="ph1">&lt;see langword="WriteState.Start" /&gt;</ph> state.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="WriteState.Start" /&gt;</ph> 상태일 때만 이 속성을 변경할 수 있는 경우</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Gets or sets which character to use to quote attribute values.</source>
          <target state="translated">특성 값을 인용하는 데 사용할 문자를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>The character to use to quote attribute values.</source>
          <target state="translated">특성 값을 인용하는 데 사용할 문자입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>This must be a single quote (<ph id="ph1">&amp;amp;</ph>#39;) or a double quote (<ph id="ph2">&amp;amp;</ph>#34;).</source>
          <target state="translated">작은따옴표를 이어야 합니다 (<ph id="ph1">&amp;amp;</ph>#39;) 또는 큰따옴표 (<ph id="ph2">&amp;amp;</ph>#34;).</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>The default is a double quote.</source>
          <target state="translated">기본값은 큰따옴표입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Setting this property to something other than either a single or double quote.</source>
          <target state="translated">이 속성을 작은따옴표 또는 큰따옴표 이외의 값으로 설정하는 경우</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Byte array to encode.</source>
          <target state="translated">인코딩할 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The position within the buffer indicating the start of the bytes to write.</source>
          <target state="translated">쓸 바이트의 시작을 나타내는 버퍼 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">쓸 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Encodes the specified binary bytes as base64 and writes out the resulting text.</source>
          <target state="translated">지정된 바이너리 바이트를 base64로 인코딩하고 결과 텍스트를 작성합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The following example encodes an input file using <ph id="ph1">`WriteBase64`</ph> and generates a temporary XML file.</source>
          <target state="translated">다음 예제에서는 사용 하 여 입력된 파일 인코딩합니다 <ph id="ph1">`WriteBase64`</ph> 및 임시 XML 파일을 생성 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The temporary XML file is decoded using the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadBase64%2A&gt;</ph> method and compared to the original file.</source>
          <target state="translated">임시 XML 파일은 사용 하 여 디코딩됩니다는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadBase64%2A&gt;</ph> 메서드 사용 권한과 원본 파일에 비교 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">버퍼 길이에서 <ph id="ph1">&lt;paramref name="index" /&gt;</ph>를 빼면 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>보다 작은 경우</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph>이 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Byte array to encode.</source>
          <target state="translated">인코딩할 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The position in the buffer indicating the start of the bytes to write.</source>
          <target state="translated">쓸 바이트의 시작을 나타내는 버퍼 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">쓸 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Encodes the specified binary bytes as binhex and writes out the resulting text.</source>
          <target state="translated">지정된 바이너리 바이트를 Binhex로 인코딩하고 결과 텍스트를 작성합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">버퍼 길이에서 <ph id="ph1">&lt;paramref name="index" /&gt;</ph>를 빼면 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>보다 작은 경우</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is Closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph>가 Closed인 경우</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Text to place inside the CDATA block.</source>
          <target state="translated">CDATA 블록 내에 배치할 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Writes out a <ph id="ph1">&amp;lt;</ph>![CDATA[...]]<ph id="ph2">&amp;gt;</ph> block containing the specified text.</source>
          <target state="translated">지정된 텍스트를 포함하는 <ph id="ph1">&amp;lt;</ph>![CDATA[...]]<ph id="ph2">&amp;gt;</ph> 블록을 작성합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes an empty CDATA block, for example <ph id="ph4">\&lt;</ph>![CDATA[]]]&gt;&lt;![CDATA[]&gt;.</source>
          <target state="translated">경우 <ph id="ph1">`text`</ph> 있거나 <ph id="ph2">`null`</ph> 또는 <ph id="ph3">`String.Empty`</ph>,이 메서드는 빈 CDATA 블록을 예를 들어 작성 <ph id="ph4">\&lt;</ph>! [ CDATA []]] &gt;&lt;! [CDATA] &gt;.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">다음 예제에서는 책을 나타내는 XML 파일을 씁니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The text would result in a non-well formed XML document.</source>
          <target state="translated">텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph>이 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Unicode character for which to generate a character entity.</source>
          <target state="translated">문자 엔터티를 생성할 유니코드 문자입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Forces the generation of a character entity for the specified Unicode character value.</source>
          <target state="translated">지정된 유니코드 문자 값에 대한 문자 엔터티가 생성되도록 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>This method writes the Unicode character in hexadecimal character entity reference format.</source>
          <target state="translated">이 메서드는 16 진 문자 엔터티 참조 형식에는 유니코드 문자를 씁니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The following example uses the <ph id="ph1">`WriteCharEntity`</ph> method to write an email address.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`WriteCharEntity`</ph> 메서드가 전자 메일 주소를 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The character is in the surrogate pair character range, <ph id="ph1">&lt;see langword="0xd800" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;see langword="0xdfff" /&gt;</ph>; or the text would result in a non-well formed XML document.</source>
          <target state="translated">문자가 서로게이트 쌍 문자 범위 <ph id="ph1">&lt;see langword="0xd800" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;see langword="0xdfff" /&gt;</ph>에 있거나 텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph>이 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Character array containing the text to write.</source>
          <target state="translated">쓸 텍스트가 포함된 문자 배열입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The position in the buffer indicating the start of the text to write.</source>
          <target state="translated">쓸 텍스트의 시작을 나타내는 버퍼 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">쓸 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Writes text one buffer at a time.</source>
          <target state="translated">한 번에 한 버퍼씩 텍스트를 씁니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>This method can be used to write large amounts of text one buffer at a time.</source>
          <target state="translated">이 메서드는 한 번에 많은 양의 텍스트 한 버퍼를 쓰는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Special handling must be done to ensure the <ph id="ph1">`WriteChars`</ph> method does not split surrogate pair characters across multiple buffer writes.</source>
          <target state="translated">되도록 특수 처리를 수행 해야 합니다는 <ph id="ph1">`WriteChars`</ph> 메서드가 여러 버퍼 쓰기 서로게이트 쌍 문자가 분할 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The XML specification defines the valid ranges for surrogate pairs.</source>
          <target state="translated">서로게이트 쌍에 대 한 유효한 범위를 정의 하는 XML 사양입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>An exception is thrown if surrogate pair characters are written that would result in the surrogate pair characters being split in the buffer.</source>
          <target state="translated">서로게이트 쌍 문자가 서로게이트 쌍 문자 버퍼에서 분할 되 고 그렇게 하면 작성 되 면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</source>
          <target state="translated">버퍼 길이에서 <ph id="ph1">&lt;paramref name="index" /&gt;</ph>를 뺀 값이 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>보다 작고, 호출한 결과 서로게이트 쌍 문자가 분할되거나 잘못된 서로게이트 쌍이 작성되는 경우</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is Closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph>가 Closed인 경우</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Text to place inside the comment.</source>
          <target state="translated">주석 내에 배치할 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Writes out a comment <ph id="ph1">&amp;lt;</ph>!--...--<ph id="ph2">&amp;gt;</ph> containing the specified text.</source>
          <target state="translated">지정된 텍스트를 포함하는 주석 <ph id="ph1">&amp;lt;</ph>!--...--<ph id="ph2">&amp;gt;</ph>을 작성합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a <ph id="ph4">`Comment`</ph> with no data content, for example <ph id="ph5">\&lt;</ph>!----&gt;.</source>
          <target state="translated">경우 <ph id="ph1">`text`</ph> 는 <ph id="ph2">`null`</ph> 또는 <ph id="ph3">`String.Empty`</ph>,이 메서드는 작성 한 <ph id="ph4">`Comment`</ph> 데이터 예제에 대 한 콘텐츠가 없는 <ph id="ph5">\&lt;</ph>!---&gt;.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">다음 예제에서는 책을 나타내는 XML 파일을 씁니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The text would result in a non-well formed XML document</source>
          <target state="translated">텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph>이 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The name of the DOCTYPE.</source>
          <target state="translated">DOCTYPE의 이름입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This must be non-empty.</source>
          <target state="translated">이 이름은 비어 있지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If non-null it also writes PUBLIC "pubid" "sysid" where <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> are replaced with the value of the given arguments.</source>
          <target state="translated">null이 아닌 경우 PUBLIC "pubid" "sysid"도 씁니다. 여기서 <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept>와 <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept>는 지정된 인수 값으로 바뀝니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> is null and <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> is non-null it writes SYSTEM "sysid" where <bpt id="p3">&lt;c&gt;</bpt>sysid<ept id="p3">&lt;/c&gt;</ept> is replaced with the value of this argument.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept>가 null이고 <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept>가 null이 아닌 경우 SYSTEM "sysid"를 씁니다. 여기서 <bpt id="p3">&lt;c&gt;</bpt>sysid<ept id="p3">&lt;/c&gt;</ept>는 이 인수 값으로 바뀝니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If non-null it writes [subset] where subset is replaced with the value of this argument.</source>
          <target state="translated">null이 아닌 경우 하위 집합이 이 인수 값으로 대체되는 [subset]을 작성합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>Writes the DOCTYPE declaration with the specified name and optional attributes.</source>
          <target state="translated">지정된 이름과 선택적 특성을 사용하여 DOCTYPE 선언을 작성합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This method does not check for invalid characters in <ph id="ph1">`pubid`</ph>, <ph id="ph2">`sysid`</ph> or <ph id="ph3">`subset`</ph>.</source>
          <target state="translated">이 메서드는 잘못 된 문자에 대 한 확인 하지 않습니다 <ph id="ph1">`pubid`</ph>, <ph id="ph2">`sysid`</ph> 또는 <ph id="ph3">`subset`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>It also does not check that the internal subset is well-formed.</source>
          <target state="translated">또한 확인 하지 않습니다 내부 하위 집합이 올바른 형식이 있습니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 에 전달 되는 모든 데이터의 유효성을 검사 하지 않습니다는 <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">이 메서드를 임의의 데이터를 전달 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">다음 예제에서는 책을 나타내는 XML 파일을 씁니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This method was called outside the prolog (after the root element).</source>
          <target state="translated">이 메서드가 루트 요소 다음의 프롤로그 외부에서 호출된 경우</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>the value for <ph id="ph1">&lt;paramref name="name" /&gt;</ph> would result in invalid XML.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>의 값이 잘못된 XML이 되는 경우</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>Closes the previous <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /&gt;</ph> call.</source>
          <target state="translated">이전 <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /&gt;</ph> 호출을 닫습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>If you call <ph id="ph1">`WriteStartAttribute`</ph>, you can close the attribute with this method.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">`WriteStartAttribute`</ph>,이 방법으로 특성을 닫을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>You can also close the attribute by calling <ph id="ph1">`WriteStartAttribute`</ph> again, calling <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>, or calling <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>.</source>
          <target state="translated">호출 하 여 특성을 닫을 수도 <ph id="ph1">`WriteStartAttribute`</ph> 다시 호출 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>, 또는 호출 <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>The following example writes out a book.</source>
          <target state="translated">다음 예제에서는 책을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>Closes any open elements or attributes and puts the writer back in the Start state.</source>
          <target state="translated">열려 있는 모든 요소나 특성을 닫고 작성기를 시작 상태로 설정합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">다음 예제에서는 책을 나타내는 XML 파일을 씁니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>The XML document is invalid.</source>
          <target state="translated">XML 문서가 잘못된 경우</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>Closes one element and pops the corresponding namespace scope.</source>
          <target state="translated">한 요소를 닫고 해당 네임스페이스 범위를 팝합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>If the element contains no content a short end tag "/&gt;" is written; otherwise a full end tag is written.</source>
          <target state="translated">짧은 끝 태그 요소에 콘텐츠가 없는 경우 "/ &gt;" 작성 됩니다. 그렇지 않으면 전체 끝 태그를 작성 됩니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">다음 예제에서는 책을 나타내는 XML 파일을 씁니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Name of the entity reference.</source>
          <target state="translated">엔터티 참조의 이름입니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Writes out an entity reference as <ph id="ph1">&lt;see langword="&amp;amp;name;" /&gt;</ph>.</source>
          <target state="translated">엔터티 참조를 <ph id="ph1">&lt;see langword="&amp;amp;name;" /&gt;</ph>처럼 작성합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">다음 예제에서는 책을 나타내는 XML 파일을 씁니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>The text would result in a non-well formed XML document or <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated">텍스트로 인해 XML 문서가 제대로 구성되지 않거나 <ph id="ph1">&lt;paramref name="name" /&gt;</ph>이 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>Closes one element and pops the corresponding namespace scope.</source>
          <target state="translated">한 요소를 닫고 해당 네임스페이스 범위를 팝합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>This method always writes the full end tag.</source>
          <target state="translated">이 메서드는 항상 전체 끝 태그를 씁니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>This is useful when dealing with elements that must include a full end tag.</source>
          <target state="translated">전체 끝 태그를 포함 해야 하는 요소를 처리할 때 유용 합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>For example, browsers expect HTML script blocks to be closed with "<ph id="ph1">\&lt;</ph>/script&gt;".</source>
          <target state="translated">브라우저에서 HTML 스크립트 블록으로 끝나도록를 예상 하는 예를 들어 " <ph id="ph1">\&lt;</ph> /&gt;"입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>The following example writes out an element with no content.</source>
          <target state="translated">다음 예제에서는 요소 콘텐츠를 씁니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>It uses WriteFullEndElement to write the full end element tag.</source>
          <target state="translated">WriteFullEndElement를 사용 하 여 전체 끝 요소 태그를 씁니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Name to write.</source>
          <target state="translated">작성할 이름입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>.</source>
          <target state="translated">W3C XML 1.0 권장 사항(<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>)에 따라 유효한 이름이 되도록 지정된 이름을 작성합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, <ph id="ph3">`WriteName`</ph> also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> 로 설정 된 <ph id="ph2">`true`</ph>, <ph id="ph3">`WriteName`</ph> name은 XML 권장 사항에 W3C 네임 스페이스에 유효도 확인 합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid XML name; or <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph3">&lt;see langword="null" /&gt;</ph> or <ph id="ph4">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>이 올바른 XML 이름이 아니거나 <ph id="ph2">&lt;paramref name="name" /&gt;</ph>이 <ph id="ph3">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph4">&lt;see langword="String.Empty" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Name to write.</source>
          <target state="translated">작성할 이름입니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Writes out the specified name, ensuring it is a valid <ph id="ph1">&lt;see langword="NmToken" /&gt;</ph> according to the W3C XML 1.0 recommendation (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>.</source>
          <target state="translated">W3C XML 1.0 권장 사항(<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>)에 따라 유효한 <ph id="ph1">&lt;see langword="NmToken" /&gt;</ph>이 되도록 지정된 이름을 작성합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid <ph id="ph2">&lt;see langword="NmToken" /&gt;</ph>; or <ph id="ph3">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph4">&lt;see langword="null" /&gt;</ph> or <ph id="ph5">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>이 올바른 <ph id="ph2">&lt;see langword="NmToken" /&gt;</ph>이 아니거나 <ph id="ph3">&lt;paramref name="name" /&gt;</ph>이 <ph id="ph4">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph5">&lt;see langword="String.Empty" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Name of the processing instruction.</source>
          <target state="translated">처리 명령의 이름입니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Text to include in the processing instruction.</source>
          <target state="translated">처리 명령에 포함할 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Writes out a processing instruction with a space between the name and text as follows: <ph id="ph1">&amp;lt;</ph>?name text?<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">이름과 텍스트 사이의 공백을 사용하여 처리 명령을 작성합니다(예: <ph id="ph1">&amp;lt;</ph>?name text?<ph id="ph2">&amp;gt;</ph>).</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a <ph id="ph4">`ProcessingInstruction`</ph> with no data content, for example <ph id="ph5">\&lt;</ph>?name?&gt;.</source>
          <target state="translated">경우 <ph id="ph1">`text`</ph> 있거나 <ph id="ph2">`null`</ph> 또는 <ph id="ph3">`String.Empty`</ph>,이 메서드는 작성는 <ph id="ph4">`ProcessingInstruction`</ph> 데이터 예제에 대 한 콘텐츠가 없는 <ph id="ph5">\&lt;</ph>? 이름? &gt; 합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">다음 예제에서는 책을 나타내는 XML 파일을 씁니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>The text would result in a non-well formed XML document.</source>
          <target state="translated">텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>This method is being used to create an XML declaration after <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /&gt;</ph> has already been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /&gt;</ph>가 이미 호출된 후 이 메서드를 사용하여 XML 선언을 만드는 경우</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The local name to write.</source>
          <target state="translated">작성할 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The namespace URI to associate with the name.</source>
          <target state="translated">이름과 연결할 네임스페이스 URI 입니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Writes out the namespace-qualified name.</source>
          <target state="translated">네임스페이스로 한정된 이름을 작성합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>This method looks up the prefix that is in scope for the given namespace.</source>
          <target state="translated">이 메서드는 지정된 네임스페이스의 범위에 속하는 접두사를 찾습니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>For example, the following Microsoft Visual C# code:</source>
          <target state="translated">예를 들어 다음 Microsoft Visual C# 코드:</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Generates the following output:</source>
          <target state="translated">다음과 같은 출력을 생성합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>If <ph id="ph1">`ns`</ph> maps to the current default namespace, no prefix is generated.</source>
          <target state="translated">경우 <ph id="ph1">`ns`</ph> 접두사가 없습니다. 현재 기본 네임 스페이스로 맵이 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>When writing attribute values, this method generates a prefix if <ph id="ph1">`ns`</ph> is not found.</source>
          <target state="translated">이 메서드는 접두사는 경우 생성 특성 값을 작성할 때 <ph id="ph1">`ns`</ph> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>When writing element content, it throws an exception if <ph id="ph1">`ns`</ph> is not found.</source>
          <target state="translated">이면 예외가 발생 요소 콘텐츠를 작성할 때 <ph id="ph1">`ns`</ph> 찾을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>If this writer supports namespaces (<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>), this method also checks that the name is valid according to the W3C Namespaces in XML recommendation (<ph id="ph3">http://www.w3.org/TR/REC-xml-names)</ph>.</source>
          <target state="translated">이 작성기 네임 스페이스를 지 원하는 경우 (<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> 로 설정 된 <ph id="ph2">`true`</ph>),이 메서드는 또한 W3C 네임 스페이스 XML 권장 사항에 따라 올바른 이름 인지 확인 (<ph id="ph3">http://www.w3.org/TR/REC-xml-names)</ph>합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The following example writes out a portion of a XSD schema.</source>
          <target state="translated">다음 예에서는 XSD 스키마의 일부를 작성 합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is not a valid name according to the W3C Namespaces spec.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph>이 W3C Namespaces 사양에 따르는 유효한 이름이 아닌 경우</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Writes raw markup manually.</source>
          <target state="translated">원시 태그를 직접 작성합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>String containing the text to write.</source>
          <target state="translated">작성할 텍스트를 포함하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>Writes raw markup manually from a string.</source>
          <target state="translated">문자열에서 직접 원시 태그를 작성합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>This method does not escape special characters.</source>
          <target state="translated">이 메서드는 특수 문자를 이스케이프 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 에 전달 되는 모든 데이터의 유효성을 검사 하지 않습니다는 <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">이 메서드를 임의의 데이터를 전달 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>The following example writes a string using the <ph id="ph1">`WriteRaw`</ph> method.</source>
          <target state="translated">다음 예제에서는 사용 하 여 문자열을 작성 된 <ph id="ph1">`WriteRaw`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Character array containing the text to write.</source>
          <target state="translated">쓸 텍스트가 포함된 문자 배열입니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The position within the buffer indicating the start of the text to write.</source>
          <target state="translated">쓸 텍스트의 시작을 나타내는 버퍼 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">쓸 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Writes raw markup manually from a character buffer.</source>
          <target state="translated">문자 버퍼에서 직접 원시 태그를 작성합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>This method does not escape special characters.</source>
          <target state="translated">이 메서드는 특수 문자를 이스케이프 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> 에 전달 되는 모든 데이터의 유효성을 검사 하지 않습니다는 <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">이 메서드를 임의의 데이터를 전달 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">버퍼 길이에서 <ph id="ph1">&lt;paramref name="index" /&gt;</ph>를 빼면 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>보다 작은 경우</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="Namespace" /&gt;</ph> prefix of the attribute.</source>
          <target state="translated">특성의 <ph id="ph1">&lt;see langword="Namespace" /&gt;</ph> 접두사입니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="LocalName" /&gt;</ph> of the attribute.</source>
          <target state="translated">특성의 <ph id="ph1">&lt;see langword="LocalName" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="NamespaceURI" /&gt;</ph> of the attribute</source>
          <target state="translated">특성의 <ph id="ph1">&lt;see langword="NamespaceURI" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>Writes the start of an attribute.</source>
          <target state="translated">특성의 시작을 작성합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>This is a more advanced version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> that allows you to write an attribute value using multiple write methods, such as <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>.</source>
          <target state="translated">이 고급 버전의 <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> 같은 여러 쓰기 메서드를 사용 하 여 특성 값을 작성할 수 있는 <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">다음 예제에서는 책을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Writes the XML declaration with the version "1.0".</source>
          <target state="translated">버전 "1.0"을 사용하여 XML 선언을 작성합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>Writes the XML declaration with the version "1.0".</source>
          <target state="translated">버전 "1.0"을 사용하여 XML 선언을 작성합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
          <target state="translated">문서의 인코딩 수준 작성기를 구현 하는 방법을 의해 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
          <target state="translated">예를 들어 경우는 <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> 개체에 지정 된는 <ph id="ph2">`XmlTextWriter`</ph> 생성자가 인코딩 특성의 값을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>This method does not create a standalone attribute.</source>
          <target state="translated">이 메서드는 독립형 특성을 만들지 않습니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called the writer validates that what you are writing is a well-formed XML document.</source>
          <target state="translated">때 <ph id="ph1">`WriteStartDocument`</ph> 라고 작성기 작성 하는 올바른 형식의 XML 문서 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</source>
          <target state="translated">예를 들어 XML 선언이 첫 번째 노드를 하나 있고 루트 수준 요소가 하나만 존재 하는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
          <target state="translated">이 메서드가 호출 되지 않으면 XML 조각을 쓰고 및 없는 루트 수준 규칙을 적용 작성기 가정 합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception is thrown.</source>
          <target state="translated">경우 <ph id="ph1">`WriteStartDocument`</ph> 를 호출한 다음는 <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> 메서드는 XML 선언을 다른 데, 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">다음 예제에서는 책을 나타내는 XML 파일을 씁니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>This is not the first write method called after the constructor.</source>
          <target state="translated">생성자 다음에 호출된 첫 번째 쓰기 메서드가 아닌 경우</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, it writes "standalone=yes"; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, it writes "standalone=no".</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 "standalone=yes"로 작성하고, <ph id="ph2">&lt;see langword="false" /&gt;</ph>이면 "standalone=no"로 작성합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>Writes the XML declaration with the version "1.0" and the standalone attribute.</source>
          <target state="translated">버전 "1.0"과 독립형 특성을 사용하여 XML 선언을 작성합니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
          <target state="translated">문서의 인코딩 수준 작성기를 구현 하는 방법을 의해 결정 됩니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
          <target state="translated">예를 들어 경우는 <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> 개체에 지정 된는 <ph id="ph2">`XmlTextWriter`</ph> 생성자가 인코딩 특성의 값을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called the writer validates that what you are writing is a well-formed XML document.</source>
          <target state="translated">때 <ph id="ph1">`WriteStartDocument`</ph> 라고 작성기 작성 하는 올바른 형식의 XML 문서 유효성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</source>
          <target state="translated">예를 들어 XML 선언이 첫 번째 노드를 하나 있고 루트 수준 요소가 하나만 존재 하는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
          <target state="translated">이 메서드가 호출 되지 않으면 XML 조각을 쓰고 및 없는 루트 수준 규칙을 적용 작성기 가정 합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception is thrown.</source>
          <target state="translated">경우 <ph id="ph1">`WriteStartDocument`</ph> 를 호출한 다음는 <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> 메서드는 XML 선언을 다른 데, 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>This is not the first write method called after the constructor.</source>
          <target state="translated">생성자 다음에 호출된 첫 번째 쓰기 메서드가 아닌 경우</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The namespace prefix of the element.</source>
          <target state="translated">요소의 네임스페이스 접두사입니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The local name of the element.</source>
          <target state="translated">요소의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The namespace URI to associate with the element.</source>
          <target state="translated">요소와 연결할 네임스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.</source>
          <target state="translated">이 네임스페이스가 이미 범위에 있고 관련된 접두사가 있는 경우 작성기는 해당 접두사도 자동으로 작성합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>Writes the specified start tag and associates it with the given namespace and prefix.</source>
          <target state="translated">지정된 시작 태그를 작성하고 주어진 네임스페이스 및 접두사와 연결합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>After calling this method you can either write attributes or create content using <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteComment%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteStartElement%2A&gt;</ph> for child elements.</source>
          <target state="translated">특성을 작성 하거나 만들려면이 메서드를 호출한 후 사용 하는 콘텐츠 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteComment%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>, 또는 <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteStartElement%2A&gt;</ph> 자식 요소에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>You can close the element with <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph> at which time an end tag is written out.</source>
          <target state="translated">사용 하 여 요소를 닫을 수 있습니다 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph> 될 때 끝 태그가 쓰여집니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">다음 예제에서는 책을 작성 합니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The writer is closed.</source>
          <target state="translated">작성기가 닫힌 경우</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>Gets the state of the writer.</source>
          <target state="translated">작성기의 상태를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.WriteState" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.WriteState" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Text to write.</source>
          <target state="translated">작성할 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Writes the given text content.</source>
          <target state="translated">주어진 텍스트 콘텐츠를 작성합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source><ph id="ph1">`WriteString`</ph> does the following</source>
          <target state="translated"><ph id="ph1">`WriteString`</ph> 다음 작업을 수행합니다</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The characters <ph id="ph1">`&amp;`</ph>, <ph id="ph2">`&lt;`</ph>, and <ph id="ph3">`&gt;`</ph> are replaced with <ph id="ph4">`&amp;amp;`</ph>, <ph id="ph5">`&amp;lt;`</ph>, and <ph id="ph6">`&amp;gt;`</ph>, respectively.</source>
          <target state="translated">문자 <ph id="ph1">`&amp;`</ph>, <ph id="ph2">`&lt;`</ph>, 및 <ph id="ph3">`&gt;`</ph> 바뀝니다 <ph id="ph4">`&amp;amp;`</ph>, <ph id="ph5">`&amp;lt;`</ph>, 및 <ph id="ph6">`&amp;gt;`</ph>각각.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD) are replaced with numeric character entities (<ph id="ph1">`&amp;#0;`</ph> through <ph id="ph2">`&amp;#0x1F`</ph>).</source>
          <target state="translated">범위는 0 x-0x1F (공백 문자 0x9, 0xA 및 0xD)에서 문자 값은 숫자 문자 엔터티로 바뀝니다 (<ph id="ph1">`&amp;#0;`</ph> 통해 <ph id="ph2">`&amp;#0x1F`</ph>).</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>If <ph id="ph1">`WriteString`</ph> is called in the context of an attribute value, double and single quotes are replaced with <ph id="ph2">`&amp;quot;`</ph> and <ph id="ph3">`&amp;apos;`</ph> respectively.</source>
          <target state="translated">경우 <ph id="ph1">`WriteString`</ph> 라고 큰따옴표와 작은따옴표 바뀝니다 특성 값의 컨텍스트에서 <ph id="ph2">`&amp;quot;`</ph> 및 <ph id="ph3">`&amp;apos;`</ph> 각각.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>For example, this input string <ph id="ph1">`test&lt;item&gt;test`</ph> is written as</source>
          <target state="translated">예를 들어이 입력 문자열 <ph id="ph1">`test&lt;item&gt;test`</ph> 로 작성</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a text node with no data content.</source>
          <target state="translated">경우 <ph id="ph1">`text`</ph> 있거나 <ph id="ph2">`null`</ph> 또는 <ph id="ph3">`String.Empty`</ph>,이 메서드는 데이터 콘텐츠가 없는 텍스트 노드를 씁니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">다음 예제에서는 XML 조각을 씁니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The text string contains an invalid surrogate pair.</source>
          <target state="translated">텍스트 문자열에 잘못된 서로게이트 쌍이 포함된 경우</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The low surrogate.</source>
          <target state="translated">하위 서로게이트입니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This must be a value between <ph id="ph1">&lt;see langword="0xDC00" /&gt;</ph> and <ph id="ph2">&lt;see langword="0xDFFF" /&gt;</ph>.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see langword="0xDC00" /&gt;</ph>에서 <ph id="ph2">&lt;see langword="0xDFFF" /&gt;</ph> 사이에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The high surrogate.</source>
          <target state="translated">상위 서로게이트입니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This must be a value between <ph id="ph1">&lt;see langword="0xD800" /&gt;</ph> and <ph id="ph2">&lt;see langword="0xDBFF" /&gt;</ph>.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see langword="0xD800" /&gt;</ph>에서 <ph id="ph2">&lt;see langword="0xDBFF" /&gt;</ph> 사이에 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>Generates and writes the surrogate character entity for the surrogate character pair.</source>
          <target state="translated">서로게이트 문자 쌍에 대한 서로게이트 문자 엔터티를 생성하고 작성합니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This method is only applicable on systems that use UTF-16 encoding.</source>
          <target state="translated">이 메서드는 utf-16 인코딩을 사용 하는 시스템에 적용할 수만 있습니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The surrogate character entity is written in hexadecimal format.</source>
          <target state="translated">서로게이트 문자 엔터티는 16 진수 형식으로 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The range for surrogate characters is <ph id="ph1">`#x10000`</ph> to <ph id="ph2">`#x10FFFF`</ph>.</source>
          <target state="translated">서로게이트 문자에 대 한 범위는 <ph id="ph1">`#x10000`</ph> 를 <ph id="ph2">`#x10FFFF`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The following formula is used to generate the surrogate character entity: (<ph id="ph1">`highChar`</ph><ph id="ph2"> - </ph><ph id="ph3">`0xD800`</ph>) * <ph id="ph4">`0x400`</ph> + (<ph id="ph5">`lowChar`</ph><ph id="ph6"> - </ph><ph id="ph7">`0xDC00`</ph>) + <ph id="ph8">`0x10000`</ph>.</source>
          <target state="translated">서로게이트 문자 엔터티를 생성 하려면 다음 수식을 사용 하는: (<ph id="ph1">`highChar`</ph><ph id="ph2"> - </ph><ph id="ph3">`0xD800`</ph>) * <ph id="ph4">`0x400`</ph> + (<ph id="ph5">`lowChar`</ph><ph id="ph6"> - </ph><ph id="ph7">`0xDC00`</ph>) + <ph id="ph8">`0x10000`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646].</source>
          <target state="translated">HTML 및 XML 모두에 대 한 문서 문자 집합 (및 따라서 숫자 문자 참조의 표기법) 기반으로 u c S [ISO 10646] 합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate).</source>
          <target state="translated">소스 문서에서 단일 숫자 문자 참조 (상위 서로게이트 및 하위 서로게이트) 문자열에 두 명의 16 비트 단위에 해당할 경우에 따라 따라서 수 있습니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>These 16-bit units are referred to as a surrogate pair.</source>
          <target state="translated">이러한 16 비트 단위는 서로게이트 쌍 이라고 합니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>For more information regarding surrogates or characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located at <ph id="ph1">http://www.unicode.org</ph>, or section 2.2 of the W3C XML 1.0 Recommendation located at <ph id="ph2">http://www.w3.org/TR/REC-xml#charsets</ph>.</source>
          <target state="translated">문자나 서로게이트에 관한 자세한 내용은의 섹션을 3.7는 유니코드 표준 3.0/유니코드 2.0에 있는 참조 <ph id="ph1">http://www.unicode.org</ph>, 섹션 2.2의 W3C XML 1.0 권장 사항에 위치 하거나 <ph id="ph2">http://www.w3.org/TR/REC-xml#charsets</ph>합니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>An invalid surrogate character pair was passed.</source>
          <target state="translated">잘못된 서로게이트 문자 쌍이 전달된 경우</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The string of white space characters.</source>
          <target state="translated">공백 문자의 문자열입니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Writes out the given white space.</source>
          <target state="translated">주어진 공백을 작성합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>This method is used to manually format your document.</source>
          <target state="translated">이 메서드를 수동으로 문서 형식을 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Formatting%2A&gt;</ph> property to have the writer format the output automatically.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Formatting%2A&gt;</ph> 속성을 자동으로 출력 형식을 작성기가 있습니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The following example uses the <ph id="ph1">`WriteWhitespace`</ph> method to control how the file is formatted.</source>
          <target state="translated">사용 하 여 다음 예제는 <ph id="ph1">`WriteWhitespace`</ph> 메서드는 파일 형식 지정 방법을 제어할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The string contains non-white space characters.</source>
          <target state="translated">문자열에 공백이 아닌 문자가 포함된 경우</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>Gets the current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> scope.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> 범위를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>The current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there is no <ph id="ph3">&lt;see langword="xml:lang" /&gt;</ph> in the current scope.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph>이거나, 현재 범위에 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이 없으면 <ph id="ph3">&lt;see langword="xml:lang" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>This property allows one component to find out what state another component has left the writer in.</source>
          <target state="translated">이 속성에는 한 구성 요소를 어떤 상태를 다른 구성 요소가 유지 작성기 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>For example, perhaps one component wants to tell another which language help text to generate.</source>
          <target state="translated">예를 들어 아마도 한 구성 하려고 다른 어떤 언어 도움말 텍스트를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>The language information is communicated by writing an <ph id="ph1">`xml:lang`</ph> attribute.</source>
          <target state="translated">작성 하 여 전달 되는 언어 정보는 <ph id="ph1">`xml:lang`</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph> representing the current <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> scope.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> 범위를 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>An <ph id="ph1">&lt;see langword="XmlSpace" /&gt;</ph> representing the current <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> scope.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see langword="XmlSpace" /&gt;</ph> 범위를 나타내는 <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 의미</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> None</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 없음</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This is the default if no <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph> scope exists.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 되지 않은 경우 이것이 기본값 <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph> 범위가 있습니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Default</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 기본값</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The current scope is <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="default".</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 현재 범위는 <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>= "default"입니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Preserve</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 유지</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The current scope is <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="preserve".</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 현재 범위는 <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>= "preserve"입니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">만드는 권장.NET Framework 2.0 부터는 <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> 새로운 기능을 활용 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>This property allows one component to find out in what state another component has left the writer.</source>
          <target state="translated">이 속성에는 한 구성 요소를 내 다른 구성 요소가 유지 작성기 상태를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>The following example uses the <ph id="ph1">`WriteWhitespace`</ph> method to control how the file is formatted.</source>
          <target state="translated">사용 하 여 다음 예제는 <ph id="ph1">`WriteWhitespace`</ph> 메서드는 파일 형식 지정 방법을 제어할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>