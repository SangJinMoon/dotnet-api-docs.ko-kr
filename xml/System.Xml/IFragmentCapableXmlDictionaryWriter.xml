<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IFragmentCapableXmlDictionaryWriter.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb72ca061bb62b09b418a80ca0889cbacd046e4493f5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca061bb62b09b418a80ca0889cbacd046e4493f5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.IFragmentCapableXmlDictionaryWriter">
          <source>Contains properties and methods that when implemented by a <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>, allows processing of XML fragments.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>에 의한 구현 시 XML 조각의 처리를 허용하는 속성 및 메서드를 포함합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IFragmentCapableXmlDictionaryWriter">
          <source>This class defines the properties and methods related to the capability of an <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> to redirect part of its output (a 'fragment') to a different stream than the stream it was created with and to directly insert such a fragment captured by redirection back into the main stream of the same writer at a later point.</source>
          <target state="translated">이 클래스는 해당 출력의 부분('조각')을 함께 만들어진 스트림이 아닌 다른 스트림으로 리디렉션하고 그러한 리디렉션을 통해 다시 캡처된 조각을 나중에 같은 작성기의 주 스트림으로 직접 삽입하기 위해 <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph>의 기능과 관련된 속성 및 메서드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> can process XML fragments.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>가 XML 조각을 처리할 수 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> can process XML fragments; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see langword="true" /&gt;</ph>가 XML 조각을 처리할 수 있으면 <ph id="ph2">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.IFragmentCapableXmlDictionaryWriter.CanFragment">
          <source>Returns <ph id="ph1">`true`</ph> if the writer that implements this interface can generate and accept XML fragments.</source>
          <target state="translated">반환 <ph id="ph1">`true`</ph> 이 인터페이스를 구현 하는 작성기를 생성 하 고 XML 조각을 수락 하는 경우.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment">
          <source>Ends the processing of an XML fragment.</source>
          <target state="translated">XML 조각 처리를 끝냅니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment">
          <source>Stops redirecting output to the stream supplied by the matching <ph id="ph1">`StartFragment`</ph> call.</source>
          <target state="translated">일치하는 <ph id="ph1">`StartFragment`</ph> 호출에 의해 제공되는 스트림으로의 출력 리디렉션을 중지합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.EndFragment">
          <source>After this call, the XML writing output goes to the stream originally used by the writer before the <ph id="ph1">`StartFragment`</ph> call.</source>
          <target state="translated">이 호출 후에는 XML 작성 출력이 <ph id="ph1">`StartFragment`</ph> 호출 전에 작성기에서 원래 사용한 스트림으로 전달됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
          <source>The stream to write to.</source>
          <target state="translated">쓸 스트림입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, any namespaces declared outside the fragment is declared again if used inside of it; if <ph id="ph2">&lt;see langword="false" /&gt;</ph> the namespaces are not declared again.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 내부에서 사용되는 경우 이 조각의 외부에서 선언된 모든 네임스페이스가 다시 선언되고,  <ph id="ph2">&lt;see langword="false" /&gt;</ph>이면 해당 네임스페이스가 다시 선언되지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
          <source>Starts the processing of an XML fragment.</source>
          <target state="translated">XML 조각 처리를 시작합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
          <source>Temporarily starts redirecting the writing of the XML output to the supplied stream until <ph id="ph1">`EndFragment`</ph> is called.</source>
          <target state="translated"><ph id="ph1">`EndFragment`</ph>가 호출될 때까지는 제공된 스트림으로 XML 출력의 작성을 임시로 리디렉션하기 시작합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
          <source>If <ph id="ph1">`generateSelfContainedTextFragment`</ph> is <ph id="ph2">`true`</ph>, then the redirected XML output is always text XML and is self-contained in terms of its namespace context.</source>
          <target state="translated"><ph id="ph1">`generateSelfContainedTextFragment`</ph>가 <ph id="ph2">`true`</ph>이면, 리디렉션된 XML 출력은 항상 텍스트 XML이고, 네임스페이스 컨텍스트로 자체 포함됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.StartFragment(System.IO.Stream,System.Boolean)">
          <source><ph id="ph1">`StartFragment`</ph>() calls cannot be nested.</source>
          <target state="translated"><ph id="ph1">`StartFragment`</ph>() 호출은 중첩될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to write to.</source>
          <target state="translated">쓸 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
          <source>The starting position from which to write in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>에서 쓸 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be written to the <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>에 쓸 바이트 수 입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
          <source>Writes an XML fragment to the underlying stream of the writer.</source>
          <target state="translated">XML 조각을 작성기의 기본 스트림에 씁니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a fragment captured between <ph id="ph1">`StartFragment`</ph> and <ph id="ph2">`EndFragment`</ph> and calls back into the XmlDictionaryWriter's main stream.</source>
          <target state="translated"><ph id="ph1">`StartFragment`</ph> 및 <ph id="ph2">`EndFragment`</ph> 사이에서 캡처된 조각을 쓰고 XmlDictionaryWriter의 주 스트림으로 다시 호출합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
          <source>The fragment written is <ph id="ph1">`count`</ph> bytes starting at the index <ph id="ph2">`offset`</ph> from the supplied <ph id="ph3">`buffer`</ph>.</source>
          <target state="translated">작성된 조각은 제공된 <ph id="ph1">`count`</ph>의 인덱스 <ph id="ph2">`offset`</ph>에서 시작하는 <ph id="ph3">`buffer`</ph> 바이트입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IFragmentCapableXmlDictionaryWriter.WriteFragment(System.Byte[],System.Int32,System.Int32)">
          <source>The behavior is undefined if the supplied fragment was not captured using this writer instance.</source>
          <target state="translated">제공된 조각이 이 작성자 인스턴스를 사용하여 캡처되지 않은 경우 동작이 정의되지 않습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>