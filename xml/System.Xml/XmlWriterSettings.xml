<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="83006778b80cd6f78c65f2cb617f9713fa5b526d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434171" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlWriterSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Specifies a set of features to support on the <see cref="T:System.Xml.XmlWriter" /> object created by the <see cref="Overload:System.Xml.XmlWriter.Create" /> method.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter.Create%2A> 메서드를 가져오기 위한 기본 메커니즘은 <xref:System.Xml.XmlWriter> 인스턴스. <xref:System.Xml.XmlWriter.Create%2A> 메서드는 <xref:System.Xml.XmlWriterSettings> 클래스에서 구현 하는 기능을 지정 하는 <xref:System.Xml.XmlWriter> 만들어지는 개체입니다.  
  
> [!NOTE]
>  사용 중인 경우는 <xref:System.Xml.XmlWriter> 개체는 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 사용 해야 합니다는 <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> 속성을는 <xref:System.Xml.XmlWriterSettings> 올바른 설정으로는 개체입니다. 이렇게 하면 만든 <xref:System.Xml.XmlWriter> 개체에 올바른 출력 설정 합니다.  
  
 <xref:System.Xml.XmlWriterSettings> 클래스 속성을 해당 컨트롤 데이터의 적합성 및 출력 형식을 제공 합니다.  
  
 데이터 규칙 검사 및 자동 수정에 대 한 이러한 속성을 사용 합니다.  
  
|속성|설명|값|기본|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|W3C에 정의 된 대로 올바른 xml에서 문자는 확인할 지 여부를 문자 집합을입니다.|`true` 또는 `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|올바른 형식의 XML 1.0 문서 또는 조각 출력 인지 확인 여부를 나타냅니다.|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (문서 수준), <xref:System.Xml.ConformanceLevel.Fragment> (조각 수준), 또는 <xref:System.Xml.ConformanceLevel.Auto> (자동 검색)|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (문서 수준 규칙)|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|닫히지 않은 모든 요소에 닫는 태그를 추가할 것인지 때는 <xref:System.Xml.XmlWriter.Close%2A> 메서드를 호출 합니다.|`true` 또는 `false`|`true`|  
  
 출력 형식을 지정 하려면 이러한 속성을 사용 합니다.  
  
|속성|설명|값|기본|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|사용할 텍스트 인코딩입니다.|<xref:System.Text.Encoding?displayProperty=nameWithType> 값|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|요소의 들여쓰기 여부를|`true` 또는 `false`|`false` (들여쓰기 사용 안 함)|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|들여쓸 때 사용할 문자열 (때 <xref:System.Xml.XmlWriterSettings.Indent%2A> 로 설정 된 `true`).|문자열|공백 두 개|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|줄 바꿈에 사용할 문자열입니다.|문자열|`\r\n` (캐리지 리턴, 줄 바꿈)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|줄 바꿈 문자를 처리 하는 방법입니다.|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType> 값: <xref:System.Xml.NewLineHandling.Entitize> (정규화) <xref:System.Xml.NewLineHandling.Replace> (replace) 또는 <xref:System.Xml.NewLineHandling.None> (상태로 표시 됨)|<xref:System.Xml.NewLineHandling.Replace> (지정 된 문자로 바꿀 <xref:System.Xml.XmlWriterSettings.NewLineChars%2A>)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|특성을 개별 줄에 쓸지 여부를 (이 없는 하면 적용 <xref:System.Xml.XmlWriterSettings.Indent%2A> 은 `false`).|`true` 또는 `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|XML 선언을 작성할 것인지 지정 합니다.|`true` 또는 `false`|`false`|  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> XML 파일에 기록 하 고 새 줄에 각 특성을 씁니다.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 예제는 다음과 같은 출력을 생성합니다.  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlWriterSettings" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서의 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <xref:System.Xml.XmlWriterSettings>합니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|공백 두 개입니다.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (캐리지 리턴, 줄 바꿈).|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> 들여쓰기에 탭 문자를 사용 하는 개체입니다.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether asynchronous <see cref="T:System.Xml.XmlWriter" /> methods can be used on a particular <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
        <value>
          <see langword="true" /> 이면 비동기 메서드를 사용할 수 있습니다. 그렇지 않으면 <see langword="false" />합니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 값을 설정 해야 `true` 새 만들 때 <xref:System.Xml.XmlWriter> 하려는 경우 사용 하 여 비동기 인스턴스 <xref:System.Xml.XmlWriter> 해당 인스턴스에서 메서드. 이후에 <xref:System.Xml.XmlWriter> 인스턴스를 만들는 <xref:System.Xml.XmlWriterSettings.Async%2A> 속성은 읽기 전용입니다. 이 속성의 기본값은 `false`입니다.  
  
 이 플래그는 무시 됩니다는 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 오버 로드 합니다. 하는 경우 새 <xref:System.Xml.XmlWriter> 기존 기반 <xref:System.Xml.XmlWriter>, 비동기 동작은 입력에 따라 <xref:System.Xml.XmlWriter>, 사용할 수 없는 <xref:System.Xml.XmlWriterSettings.Async%2A> 비동기 동작을 변경 하는 플래그입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the XML writer should check to ensure that all characters in the document conform to the "2.2 Characters" section of the W3C [XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml/#charsets).</summary>
        <value>
          <see langword="true" /> 문자 검사를 수행 하려면 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Xml.XmlWriter> 개체가 지원 문자 검사, 문자가 올바른 XML 문자는 W3C의 "2.2 문자" 섹션에서 지정의 범위 밖에 있으면 예외를 throw [XML 1.0 권장 사항](https://www.w3.org/TR/REC-xml/#charsets)합니다.  
  
 문자 검사 XML 이름에 잘못 된 문자에 대 한 검사 또는 모든 XML 이름이 유효한 지 검사 포함 되지 않습니다. 이러한 검사 규칙 검사의 일부 이며 항상 수행 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlWriterSettings" Usage="xmlWriterSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a copy of the <see cref="T:System.Xml.XmlWriterSettings" /> instance.</summary>
        <returns>The cloned <see cref="T:System.Xml.XmlWriterSettings" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 복제 된 <xref:System.Xml.XmlWriterSettings> 원래 개체의 설정에 영향을 주지 않고 개체를 수정할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseOutput : bool with get, set" Usage="System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the <see cref="T:System.Xml.XmlWriter" /> should also close the underlying stream or <see cref="T:System.IO.TextWriter" /> when the <see cref="M:System.Xml.XmlWriter.Close" /> method is called.</summary>
        <value>
          <see langword="true" /> 내부 스트림의 닫을 수도를 또는 <see cref="T:System.IO.TextWriter" />, 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 설정은 XML 스트림에 작성 한 다음 후 스트림의 끝에 추가 정보를 추가 하려는 경우 유용는 <xref:System.Xml.XmlWriter> 가 쓰기를 완료 합니다.  
  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> XML 출력 인스턴스 데이터를 문자열로 콘텐츠 또는 <xref:System.IO.TextWriter>, 그렇지 않으면이 설정은 무시 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 메모리 스트림을 씁니다.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the level of conformance that the XML writer checks the XML output for.</summary>
        <value>규칙 수준(문서, 조각 또는 자동 검색)을 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.ConformanceLevel.Document" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType> 속성을 확인 하 고 쓰는 스트림을 특정 규칙 집합을 준수 하는지 보장할 XML 작성기를 구성 합니다. XML 데이터는 올바른 형식의 XML 1.0 문서 또는 문서 조각에 대 한 규칙을 따르는지를 확인할 수 있습니다. 다음 표에 세 가지 설정이 있습니다. 기본값은 문서 수준 규칙.  
  
|설정|설명|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|XML 출력 일치 하는지를 확인 하 고 [올바른 형식의 XML 1.0 문서에 대 한 규칙](https://www.w3.org/TR/REC-xml/#sec-well-formed) 표준에 맞는 프로세서에서 처리할 수 있습니다.<br /><br /> 대부분의 조각 수준 검사를 포함 하 고 또한 다음을 확인 하는 문서 규칙 검사.<br /><br /> -최상위 항목에는 XML 선언, DTD, 요소, 주석, 공백 또는 처리 명령 이외의 다른 노드가 없는 경우.<br />-XML 데이터에 하나의 최상위 요소 노드가 있습니다.<br /><br /> XML 작성기로 작성 된 DTD 정보 구문 분석 하지 않습니다. 사용자가 DTD 형식이 올바른지 확인 해야 합니다.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|XML 출력 일치 하는지를 확인 하 고 [올바른 형식의 XML 1.0 문서 조각에 대 한 규칙](https://www.w3.org/TR/REC-xml/#wf-entities)합니다.<br /><br /> 이 설정은 최상위 수준에 여러 루트 요소 또는 텍스트 노드는 XML 데이터를 허용 합니다. 이 검사 수준은 프로세서에서 구문 분석된 외부 XML 1.0 엔터티로 읽히는 스트림을 사용할 수 있도록 합니다.<br /><br /> DTD 정보는 문서 조각에 허용 되지 않습니다.|  
|<xref:System.Xml.ConformanceLevel.Auto>|지정 된 XML 작성기가 들어오는 데이터를 기반으로 규칙 검사의 수준을 결정 해야 합니다. 이 설정은 생성된 된 XML이 올바른 형식의 XML 문서 또는 조각 않을 것인지 여부를 알 수 없는 경우에 유용할 수 있습니다.<br /><br /> 다음과 같은 경우 문서 규칙 검사가 적용됩니다.<br /><br /> If는 <xref:System.Xml.XmlWriter.WriteStartDocument%2A> 메서드를 호출 합니다.<br />-경우 DTD 정보가 기록 됩니다.<br /><br /> XML 데이터는 다음 중 하나 포함 되어 있는 경우 fragment 규칙 검사가 적용 됩니다.<br /><br /> 루트 수준에서 텍스트, CDATA 또는 EntityReference 노드.<br />-루트 수준에서 둘 이상의 요소입니다.<br />-루트 수준 요소입니다.<br /><br /> 루트 수준에 텍스트 노드와 DTD를 쓰려고 시도하는 경우와 같이 충돌이 있을 경우 <xref:System.Xml.XmlException>이 throw됩니다.<br /><br /> 다른 줄 바꿈 하는 경우 <xref:System.Xml.XmlWriter> 개체를 외부 개체에서 별도 규칙 검사를 수행 하지 않으면이 내부 개체에 남아 있습니다.|  
  
 XML 작성기에서 지정된 된 수준의 규칙을 위반 하는 모든 정보를 감지 하면 예외가 throw 됩니다. 경우에 따라 XML 작성기에서 규칙 오류를 자동으로 해결 합니다. 예를 들어 작성기는 예외를 throw 하지 않고 닫히지 않은 특성을 닫습니다. 다음 표에서 각 설정에서 처리 되는 다양 한 규칙 위반을 보여 줍니다.  
  
|조건|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|DTD 정보를 찾을 수 있습니다.|이 설정에 대 한 위반 하지 않습니다. 그러나 XML 작성기; DTD를 확인 하지 않습니다. 사용자는 DTD 형식이 올바른지 확인 해야 합니다.|<xref:System.Xml.XmlException> throw 됩니다.|문서 규칙 검사가 적용 됩니다.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A>가 호출된 경우|이 설정에 대 한 위반으로 간주 되지 않습니다.|<xref:System.Xml.XmlException> throw 됩니다.|문서 규칙 검사가 적용 됩니다.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A>가 여러 번 호출됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|  
|텍스트 값 (요소 또는 특성 노드) 아래 하지 최상위 수준에 나타납니다.|<xref:System.Xml.XmlException> throw 됩니다.|위반으로 간주 되지 않습니다.|Fragment 규칙 검사가 적용됩니다.|  
|여러 요소 또는 요소가 없는 최상위 수준에 나타납니다.|<xref:System.Xml.XmlException> throw 됩니다.|위반으로 간주 되지 않습니다.|Fragment 규칙 검사가 적용됩니다.|  
|최상위 항목은 공백입니다.|위반으로 간주 되지 않습니다.|위반으로 간주 되지 않습니다.|위반으로 간주 되지 않습니다.|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> 특성 노드를 종료 하기 위해 호출 되지 않습니다.|XML 작성기에 의해 수정 했습니다.|XML 작성기에 의해 수정 했습니다.|XML 작성기에 의해 수정 했습니다.|  
|XML 작성기 잘못 중첩 된 상태입니다 (예를 들어 한 <xref:System.Xml.XmlWriter.WriteStartElement%2A> 호출 뒤는 <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>).|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|  
|최상위 항목에는 특성입니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|  
|인접한 텍스트 노드가 여러 개 있을 경우|위반으로 간주 되지 않은 텍스트 노드를 연결 하려면 사용자의 책임입니다.|위반으로 간주 되지 않은 텍스트 노드를 연결 하려면 사용자의 책임입니다.|위반으로 간주 되지 않은 텍스트 노드를 연결 하려면 사용자의 책임입니다.|  
|한 요소에서 동일한 네임스페이스 접두사를 두 번 선언한 경우|두 번째 네임 스페이스에 대 한 새 접두사를 생성 하는 XML 작성기입니다.|두 번째 네임 스페이스에 대 한 새 접두사를 생성 하는 XML 작성기입니다.|두 번째 네임 스페이스에 대 한 새 접두사를 생성 하는 XML 작성기입니다.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> 접두사 및 해당 범위 내에서 선언 되지 네임 스페이스 지정 또는 접두사는 다른 네임 스페이스와 연결 합니다.|XML 작성기는 필요한 네임 스페이스 노드를 씁니다.|XML 작성기는 필요한 네임 스페이스 노드를 씁니다.|XML 작성기는 필요한 네임 스페이스 노드를 씁니다.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 접두사와 해당 범위 내에서 선언 되지 하는 네임 스페이스를 지정 합니다.|XML 작성기는 필요한 네임 스페이스 노드를 씁니다.|XML 작성기는 필요한 네임 스페이스 노드를 씁니다.|XML 작성기는 필요한 네임 스페이스 노드를 씁니다.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> 접두사 및 네임 스페이스 하지만 접두사는 다른 범위에서 네임 스페이스와 연결 된 지정 합니다.|XML 작성기는 지정 된 접두사를 무시 하 고 올바른 접두사를 조회 하거나 새 접두사를 생성 합니다.|XML 작성기는 지정 된 접두사를 무시 하 고 올바른 접두사를 조회 하거나 새 접두사를 생성 합니다.|XML 작성기는 지정 된 접두사를 무시 하 고 올바른 접두사를 조회 하거나 새 접두사를 생성 합니다.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 범위 내에서 존재 하지 않는 네임 스페이스를 사용 하 여 요소 내용을 쓰는 데 사용 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> 범위 내에서 존재 하지 않는 네임 스페이스를 사용 하 여 특성 내용을 쓰는 데 사용 됩니다.|XML 작성기에는 필요한 네임 스페이스 선언을 작성합니다.|XML 작성기에는 필요한 네임 스페이스 선언을 작성합니다.|XML 작성기에는 필요한 네임 스페이스 선언을 작성합니다.|  
|`xml:space` 특성에 유효한 값이 포함 되어 있지 않습니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|  
|잘못된 이름이 발견된 경우|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|  
|`xml` URI 접두사 일치 되지 않습니다.|XML 작성기는 이런이 종류의 위반에 대 한 검사 하지 않습니다.|XML 작성기는 이런이 종류의 위반에 대 한 검사 하지 않습니다.|XML 작성기는 이런이 종류의 위반에 대 한 검사 하지 않습니다.|  
|`xml` 접두사에 맞지는 http://www.w3.org/XML/1998/namespace URI입니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|  
|`xmlns` 접두사 또는 로컬 이름 URI와 일치 되지 않습니다.|XML 작성기는 이런이 종류의 위반에 대 한 검사 하지 않습니다.|XML 작성기는 이런이 종류의 위반에 대 한 검사 하지 않습니다.|XML 작성기는 이런이 종류의 위반에 대 한 검사 하지 않습니다.|  
|`xmlns` 접두사 또는 로컬 이름에 맞지는 http://www.w3.org/2000/xmlns URI입니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|<xref:System.Xml.XmlException> throw 됩니다.|  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 메모리 스트림을 씁니다.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoNotEscapeUriAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.XmlWriter" /> does not escape URI attributes.</summary>
        <value>
          <see langword="true" /> 경우는 <see cref="T:System.Xml.XmlWriter" /> URI 특성을 이스케이프 하지 않습니다, 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of text encoding to use.</summary>
        <value>사용할 텍스트 인코딩입니다. 기본값은 <see langword="Encoding.UTF8" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter> 한 번에 모든 것이 아니라 문자 버퍼의 문자를 인코딩합니다. 동안 예외가 throw 되는 <xref:System.Xml.XmlWriter.Flush%2A> 인코딩 오류가 발생 하는 경우 메서드가 호출 됩니다.  
  
 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 속성에만 적용 됩니다는 <xref:System.Xml.XmlWriter> 지정 된 생성 된 인스턴스 <xref:System.IO.Stream> 또는 지정 된 파일 이름입니다. 경우는 <xref:System.Xml.XmlWriter> 인스턴스가 만들어질 지정 된 <xref:System.IO.TextWriter>, <xref:System.Xml.XmlWriterSettings.Encoding%2A> 속성은 내부의 인코딩을 재정의 <xref:System.IO.TextWriter>합니다. 예를 들어,이 속성은 특정 작업에 대해 유니코드 (utf-16)로 설정 하는 경우 <xref:System.Xml.XmlWriter>, 하지만 기본 기록기는는 <xref:System.IO.StreamWriter> (에서 파생 되는 <xref:System.IO.TextWriter>) 출력은 u t F-8로 인코딩된 해당 인코딩을 u t f 8로 설정 됩니다.  
  
 경우는 <xref:System.Xml.XmlWriter> 다른 출력 매개 변수를 사용 인스턴스를 만듭니다는 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 속성은 무시 됩니다.  
  
 다음 예제에서는  
  
-   <xref:System.Xml.XmlWriterSettings.Encoding%2A>의 기본값은 `Encoding.UTF8`입니다.  
  
-   <xref:System.IO.StreamWriter> 로 설정 된 `Encoding.Unicode` 및 <xref:System.IO.StreamWriter>의 인코딩을 재정의 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 설정 합니다.  
  
-   출력 됩니다 `Encoding.Unicode`합니다.  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  동의 하지 않는 한 <xref:System.Text.Encoding> 신뢰할 수 없는 소스에서 개체입니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 메모리 스트림을 씁니다.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : bool with get, set" Usage="System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to indent elements.</summary>
        <value>
          <see langword="true" /> 새 줄과 들여쓰기;에서 개별 요소를 작성 하려면 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는, 그렇지 않으면이 설정은 무시 됩니다.  
  
 요소는 요소에는 혼합 된 내용으로 들여쓰기 됩니다. 한 번의 <xref:System.Xml.XmlWriter.WriteString%2A> 또는 <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 메서드는 혼합된 요소 콘텐츠를 작성 하는 <xref:System.Xml.XmlWriter> 들여쓰기를 중지 합니다. 혼합된 콘텐츠 요소 닫히면 들여쓰기는 다시 시작 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> 들여쓰기에 탭 문자를 사용 하는 개체입니다.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChars : string with get, set" Usage="System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the character string to use when indenting. This setting is used when the <see cref="P:System.Xml.XmlWriterSettings.Indent" /> property is set to <see langword="true" />.</summary>
        <value>들여쓰기에 사용할 문자열입니다. 이 속성에 설정할 수 있는 문자열 값에는 제한이 없습니다. 그러나 XML을 올바르게 유지하려면 공백 문자, 탭, 캐리지 리턴 또는 줄 바꿈 같은 유효한 공백 문자만 지정해야 합니다. 기본값은 공백 두 개입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는, 그렇지 않으면이 설정은 무시 됩니다. <xref:System.Xml.XmlWriter> 들여쓰기 문자로 인해 XML이 잘못 된 경우 예외를 throw 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> 들여쓰기에 탭 문자를 사용 하는 개체입니다.  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceHandling : System.Xml.NamespaceHandling with get, set" Usage="System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.XmlWriter" /> should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.</summary>
        <value>
          <see cref="T:System.Xml.NamespaceHandling" /> 열거형에 중복 된 네임 스페이스 선언을 제거할지 여부를 지정 하는 데는 <see cref="T:System.Xml.XmlWriter" />합니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineChars : string with get, set" Usage="System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the character string to use for line breaks.</summary>
        <value>줄 바꿈에 사용할 문자열입니다. 이 속성에 설정할 수 있는 문자열 값에는 제한이 없습니다. 그러나 XML을 올바르게 유지하려면 공백 문자, 탭, 캐리지 리턴 또는 줄 바꿈 같은 유효한 공백 문자만 지정해야 합니다. 기본값은 <c>\r\n</c> (캐리지 리턴, 줄 바꿈).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는, 그렇지 않으면이 설정은 무시 됩니다. <xref:System.Xml.XmlWriter> 줄 바꿈 문자로 인해 XML이 잘못 된 경우 예외를 throw 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value assigned to the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineHandling : System.Xml.NewLineHandling with get, set" Usage="System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to normalize line breaks in the output.</summary>
        <value>
          <see cref="T:System.Xml.NewLineHandling" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.NewLineHandling.Replace" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 설정은 텍스트 콘텐츠 또는 특성 값을 쓸 때 적용 됩니다. 각각의 <xref:System.Xml.NewLineHandling> 값은 다음과 같습니다.  
  
-   <xref:System.Xml.NewLineHandling.Entitize> 설정을 <xref:System.Xml.XmlWriter> 는 유지 하지는 정규화 하 여 새 줄 문자를 바꿀 <xref:System.Xml.XmlReader> 문자 엔터티로 합니다. 이를 정규화 하 여 출력을 읽어야 하는 라운드트립 시나리오에 유용한 <xref:System.Xml.XmlReader>합니다. 추가적인 정규화 규칙이 특성 값에 대 한 이후 tripping 라운드 적용 `\t`, `\n` 및 `\r` 특성 값에 공백이 있는 대체는 <xref:System.Xml.XmlReader>합니다.  
  
-   <xref:System.Xml.NewLineHandling.Replace> 설정을 <xref:System.Xml.XmlWriter> 를 새 줄 문자를 바꿀 `\r\n`, Microsoft Windows 운영 체제에서 사용 하는 새 줄 형식을 합니다. 이렇게 하면 파일이 메모장 또는 Microsoft Word 응용 프로그램에서 올바르게 표시 수를 확인 합니다. 이 설정은 특성에 새 줄을 문자를 유지 하기 위해 문자 엔터티로 바꿉니다. 기본값입니다.  
  
-   <xref:System.Xml.NewLineHandling.None> 설정을 <xref:System.Xml.XmlWriter> 를 변경 하지 않고 입력 합니다. 이 설정은 새 줄 처리 하지 않으려는 경우 사용 됩니다. 출력을 읽을 때 유용는 <xref:System.Xml.XmlReader> 정규화를 수행 하지 않습니다 (예를 들어 한 <xref:System.Xml.XmlTextReader> 기본 설정을 사용 하 여.)  
  
 다음 표에서 출력을 보여는 <xref:System.Xml.XmlWriter.WriteString%2A> 메서드는 입력 값에 따라 제공 되는 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> 속성을 설정 합니다. 표에서 텍스트 콘텐츠를 쓸 때 출력을 보여 주며 특성 값을 쓸 때.  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|아닌|& #D; \n|\n|&#D;|\t|  
|바꾸기|\r\n|\r\n|\r\n|\t|  
|없음|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|아닌|&#D;&#A;|&#A;|&#D;|&\#9;|  
|바꾸기|&#D;&#A;|&#A;|&#D;|&\#9;|  
|없음|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  <xref:System.Xml.XmlWriter> CDATA 섹션, 주석 또는 처리 명령 콘텐츠를 쓸 때 동작은 다음과 같습니다. 새 줄의 문자 엔터티를 바꾸지 않습니다 경우에는 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> 속성이 <xref:System.Xml.NewLineHandling.Entitize>합니다. 즉, 문자 엔터티는 CDATA 섹션, 주석 또는 처리 명령에서 인식 되지 않습니다. 경우는 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> 속성이 <xref:System.Xml.NewLineHandling.None> 또는 <xref:System.Xml.NewLineHandling.Replace>, 동작은 텍스트 노드 값을 작성할 때와 동일 합니다.  
  
 다음 표에서 설명 정규화 <xref:System.Xml.XmlReader> 공백 각 입력에 대해를 반환 합니다. 자세한 내용은 2.11 및 3.3.3 W3C의 섹션을 참조 하십시오. [XML 1.0 권장 사항](https://www.w3.org/TR/REC-xml/)합니다.  
  
> [!NOTE]
>  정규화 판독기는 임의의 <xref:System.Xml.XmlReader> 하 여 만든 개체는 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 메서드. 이러한 개체는 항상 줄 바꿈 정규화 및 특성의 전체 정규화를 수행합니다. <xref:System.Xml.XmlTextReader> 도 개체 일 수 정규화 판독기 경우 <xref:System.Xml.XmlTextReader.Normalization%2A> 속성이로 설정 된 `true`합니다.  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|텍스트 노드 값|\n|\n|\n|\t|  
|특성 값|단일 공간|단일 공간|단일 공간|단일 공간|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineOnAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to write attributes on a new line.</summary>
        <value>
          <see langword="true" /> 특성을 쓸지를 한 줄씩; 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.  
  
 <block subset="none" type="note"><para> 이 설정은 아무런 때 적용 된 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 속성 값은 <see langword="false" />합니다.  </para></block>  때 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> 로 설정 된 <see langword="true" />, 각 특성은 레이블이 앞에 새 줄과 들여쓰기의 한 추가 수준입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는, 그렇지 않으면이 설정은 무시 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Xml.XmlWriter> XML 파일에 기록 하 고 새 줄에 각 특성을 씁니다.  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 예제는 다음과 같은 출력을 생성합니다.  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OmitXmlDeclaration : bool with get, set" Usage="System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to omit an XML declaration.</summary>
        <value>
          <see langword="true" /> XML 선언입니다; 생략 하려면 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />, XML 선언을 씁니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성에만 적용 됩니다 <xref:System.Xml.XmlWriter> 인스턴스 텍스트 콘텐츠를 출력 하는, 그렇지 않으면이 설정은 무시 됩니다.  
  
 경우 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> 로 설정 된 `false`, XML 선언이 자동으로 작성 됩니다  
  
 XML 선언은 항상 쓰여집니다 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> 로 설정 되어 <xref:System.Xml.ConformanceLevel.Document>경우에 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> 로 설정 되어 `true`합니다.  
  
 경우에 XML 선언을 작성 되지 않습니다 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> 로 설정 된 <xref:System.Xml.ConformanceLevel.Fragment>합니다. 호출할 수 있습니다 <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> 을 명시적으로 XML 선언을 작성 합니다.  
  
   
  
## Examples  
 다음 예제에서는 XML 조각을 메모리 스트림을 씁니다.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputMethod : System.Xml.XmlOutputMethod" Usage="System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the method used to serialize the <see cref="T:System.Xml.XmlWriter" /> output.</summary>
        <value>
          <see cref="T:System.Xml.XmlOutputMethod" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.XmlOutputMethod.Xml" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성의 출력을 serialize 하는 데 사용 되는 메서드를 지정 합니다. 규칙은 HTML, XML 1.0 규칙 및 등을 사용 하 여 출력을 serialize 할 수 있습니다. 이 설정은 XSLT 프로세서에서 설정 되 고 Visual Studio에서 내부적으로 사용 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlWriterSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the members of the settings class to their default values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 기본 인스턴스에 대 한 속성 값이 표시 <xref:System.Xml.XmlWriterSettings>합니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|공백 두 개입니다.|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`.|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEndDocumentOnClose : bool with get, set" Usage="System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.XmlWriter" /> will add closing tags to all unclosed element tags when the <see cref="M:System.Xml.XmlWriter.Close" /> method is called.</summary>
        <value>
          <see langword="true" /> 모든 닫히지 않은 요소 태그가; 아웃 닫힙니다 하는 경우 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 플래그를 설정 하면 `false`, 출력 XML 파일 형식이 잘못 될 수 있습니다 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>