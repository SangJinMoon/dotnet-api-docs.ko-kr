<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlTextReader.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5df6290b1ed990878590dea7c847f332f54949935.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6290b1ed990878590dea7c847f332f54949935</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextReader">
          <source>Represents a reader that provides fast, non-cached, forward-only access to XML data.</source>
          <target state="translated">빠르고, 캐시되지 않으며 앞으로만 이동 가능한 XML 데이터 액세스를 제공하는 판독기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextReader">
          <source>Starting with the .NET Framework 2.0, we recommend that you use the <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> class instead.</source>
          <target state="translated">.NET Framework 2.0부터 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> 클래스를 대신 사용하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> provides forward-only, read-only access to a stream of XML data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> XML 데이터의 스트림에 대 한 정방향 전용, 읽기 전용 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>The current node refers to the node on which the reader is positioned.</source>
          <target state="translated">현재 노드란 판독기가 배치된 노드를 말합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>The reader is advanced using any of the read methods and properties reflect the value of the current node.</source>
          <target state="translated">읽기 메서드를 사용 하 여 판독기는 앞 및 속성은 현재 노드의 값을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>This class implements <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> and conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</source>
          <target state="translated">이 클래스는 구현 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 는 W3C Extensible Markup Language (XML) 1.0 및 XML 구성에서 네임 스페이스를 준수 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source><ph id="ph1">`XmlTextReader`</ph> provides the following functionality:</source>
          <target state="translated"><ph id="ph1">`XmlTextReader`</ph> 다음과 같은 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Enforces the rules of well-formed XML.</source>
          <target state="translated">올바른 형식의 xml 규칙을 적용합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source><ph id="ph1">`XmlTextReader`</ph> does not provide data validation.</source>
          <target state="translated"><ph id="ph1">`XmlTextReader`</ph> 데이터 유효성 검사를 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Checks that <ph id="ph1">`DocumentType`</ph> nodes are well-formed.</source>
          <target state="translated">검사 <ph id="ph1">`DocumentType`</ph> 노드가 제대로 구성 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source><ph id="ph1">`XmlTextReader`</ph> checks the DTD for well-formedness, but does not validate using the DTD.</source>
          <target state="translated"><ph id="ph1">`XmlTextReader`</ph> 올바른 형식 인지에 대 한 DTD를 확인 하지만 DTD를 사용 하 여 유효성을 검사 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>For nodes where <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.NodeType%2A&gt;</ph> is <ph id="ph2">`XmlNodeType.EntityReference`</ph>, a single empty <ph id="ph3">`EntityReference`</ph> node is returned (that is, the <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Value%2A&gt;</ph> property is <ph id="ph5">`String.Empty`</ph>).</source>
          <target state="translated">노드에 대 한 여기서 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.NodeType%2A&gt;</ph> 은 <ph id="ph2">`XmlNodeType.EntityReference`</ph>, 비어 있는 단일 <ph id="ph3">`EntityReference`</ph> 노드가 반환 됩니다 (즉,는 <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Value%2A&gt;</ph> 속성은 <ph id="ph5">`String.Empty`</ph>).</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>The actual declarations of entities in the DTD are called <ph id="ph1">`Entity`</ph> nodes.</source>
          <target state="translated">DTD의 엔터티에 대 한 실제 선언을 <ph id="ph1">`Entity`</ph> 노드.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>When you refer to these nodes in your data, they are called <ph id="ph1">`EntityReference`</ph> nodes.</source>
          <target state="translated">데이터에이 노드를 참조 하는 경우 호출할 <ph id="ph1">`EntityReference`</ph> 노드.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Does not expand default attributes.</source>
          <target state="translated">기본 특성을 확장 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Because the <ph id="ph1">`XmlTextReader`</ph> does not perform the extra checks required for data validation, it provides a fast well-formedness parser.</source>
          <target state="translated">때문에 <ph id="ph1">`XmlTextReader`</ph> 데이터 유효성 검사에 필요한 추가 검사를 수행 하지 않는 빠른 제대로 파서를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>To perform data validation, use a validating <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>.</source>
          <target state="translated">데이터 유효성 검사를 수행 하려면 유효성 검사를 사용 하 여 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>To read XML data from an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph>, use <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>.</source>
          <target state="translated">XML 데이터를 읽을 <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph>를 사용 하 여 <ph id="ph2">&lt;xref:System.Xml.XmlNodeReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source><ph id="ph1">`XmlTextReader`</ph> throws an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> on XML parse errors.</source>
          <target state="translated"><ph id="ph1">`XmlTextReader`</ph> throw 한 <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> xml 구문 분석 오류입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>After an exception is thrown the state of the reader is not predictable.</source>
          <target state="translated">예외가 throw 되는 판독기의 상태 예측 가능한있지 않습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>For example, the reported node type may be different than the actual node type of the current node.</source>
          <target state="translated">예를 들어 보고 된 노드 형식 현재 노드의 실제 노드 형식과 다를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadState%2A&gt;</ph> property to check whether a reader is in error state.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadState%2A&gt;</ph> 판독기가 오류 상태에 있는지 여부를 확인할 속성입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Security Considerations</source>
          <target state="translated">보안 고려 사항</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>The following are things to consider when using the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> class.</source>
          <target state="translated">다음은 사용 하는 경우 고려 사항에서 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Exceptions thrown the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> can disclose path information that you do not want bubbled up to the application.</source>
          <target state="translated">발생 한 예외는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 응용 프로그램에 버블링 원하지 않는 경로 정보가 공개 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Your applications must catch exceptions and process them appropriately.</source>
          <target state="translated">응용 프로그램에서는 예외를 캐치하고 적절히 처리해야 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>DTD processing is enabled by default.</source>
          <target state="translated">DTD 처리는 기본적으로 활성화되어 있습니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Disable DTD processing if you are concerned about Denial of Service issues or if you are dealing with untrusted sources.</source>
          <target state="translated">DTD 처리 하는 경우 처리 하는 신뢰할 수 없는 소스 이나 서비스 거부 문제가 염려 하는 경우 사용 하지 않도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Set the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Xml.DtdProcessing.Prohibit&gt;</ph> to disable DTD processing.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt;</ph> 속성을 <ph id="ph2">&lt;xref:System.Xml.DtdProcessing.Prohibit&gt;</ph> 에 DTD 처리를 사용 하지 않도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>If you have DTD processing enabled, you can use the <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> to restrict the resources that the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> can access.</source>
          <target state="translated">DTD 처리를 활성화하는 경우 <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph>를 사용하여 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph>가 액세스할 수 있는 리소스를 제한할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>You can also design your application so that the XML processing is memory and time constrained.</source>
          <target state="translated">또한 응용 프로그램을 직접 디자인하여 XML 처리에 필요한 메모리 및 시간을 제한할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>For example, configure time-out limits in your ASP.NET application.</source>
          <target state="translated">예를 들어, ASP.NET 응용 프로그램에서 시간 제한을 구성합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>XML data can include references to external resources such as a DTD file.</source>
          <target state="translated">XML 데이터는 DTD 파일 등의 외부 리소스에 대 한 참조를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>By default external resources are resolved using an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> object with no user credentials.</source>
          <target state="translated">기본적으로 외부 리소스는 사용자 자격 증명 없이 <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> 개체를 사용하여 확인됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>You can secure this further by doing one of the following:</source>
          <target state="translated">이러한 경우 다음 중 하나를 수행하여 보안을 강화할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Restrict the resources that the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> can access by setting the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.XmlResolver%2A&gt;</ph> property to an <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 속성을 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.XmlResolver%2A&gt;</ph> 개체로 설정하여 <ph id="ph3">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph>에서 액세스 가능한 리소스를 제한합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Do not allow the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to open any external resources by setting the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.XmlResolver%2A&gt;</ph> property to <ph id="ph3">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 속성을 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.XmlResolver%2A&gt;</ph>로 설정하여 <ph id="ph3">`null`</ph>가 모든 외부 리소스를 열 수 없도록 하십시오.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process.</source>
          <target state="translated">XML 데이터에는 처리하는 데 시간이 많이 걸리는 수많은 특성, 네임스페이스 선언, 중첩된 요소 등이 포함될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>To limit the size of the input that is sent to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph>, create a custom IStream implementation and supply it the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph>.</source>
          <target state="translated">에 전송 된 입력의 크기를 제한 하는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph>제공 하려면를 만들고 사용자 지정 IStream 구현은 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> method can be used to handle large streams of data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> 메서드는 데이터의 큰 스트림을 처리할 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>This method reads a small number of characters at a time instead of allocating a single string for the whole value.</source>
          <target state="translated">이 메서드는 전체 값에 대한 단일 문자열을 할당하는 대신 한 번에 적은 수의 문자를 읽습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>By default general entities are not expanded.</source>
          <target state="translated">기본적으로 일반 엔터티는 확장되지 않습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>General entities are expanded when you call the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ResolveEntity%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ResolveEntity%2A&gt;</ph> 메서드를 호출해야 일반 엔터티가 확장됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>This class has an inheritance demand.</source>
          <target state="translated">이 클래스는 상속 요청.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Full trust is required to inherit from <ph id="ph1">&lt;see langword="XmlTextReader" /&gt;</ph>.</source>
          <target state="translated">상속 하려면 완전 신뢰가 필요 <ph id="ph1">&lt;see langword="XmlTextReader" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextReader">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="XmlTextReader" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see langword="XmlTextReader" /&gt;</ph>의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
          <source>The stream containing the XML data to read.</source>
          <target state="translated">읽을 XML 데이터를 포함하고 있는 스트림입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified stream.</source>
          <target state="translated">지정된 스트림을 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> decodes the stream using <ph id="ph2">&lt;xref:System.Text.Encoding?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 사용 하 여 스트림의 디코딩합니다 <ph id="ph2">&lt;xref:System.Text.Encoding?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="input" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="input" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> containing the XML data to read.</source>
          <target state="translated">읽을 XML 데이터를 포함하는 <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>를 사용하여 <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
          <source>It is assumed that the <ph id="ph1">`TextReader`</ph> is already set to the correct encoding.</source>
          <target state="translated"><ph id="ph1">`TextReader`</ph>가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
          <source>This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</source>
          <target state="translated">이 작업은 일부의 원인 다중 파트 MIME 시나리오에서 스트림에서 읽기 이미 있어야 하는 클라이언트에서 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
          <source>The following example loads an XML string into the <ph id="ph1">`XmlTextReader`</ph> object using the <ph id="ph2">&lt;xref:System.IO.StringReader&gt;</ph> class.</source>
          <target state="translated">다음 예제에서는 로드는 XML 문자열에는 <ph id="ph1">`XmlTextReader`</ph> 를 사용 하 여 개체는 <ph id="ph2">&lt;xref:System.IO.StringReader&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>The URL for the file containing the XML data.</source>
          <target state="translated">XML 데이터를 포함하는 파일의 URL입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph> is set to this value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph>는 이 값으로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified file.</source>
          <target state="translated">지정된 파일을 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>If the file is located on a resource that requires access credentials, use the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.XmlResolver%2A&gt;</ph> property to specify the necessary credentials.</source>
          <target state="translated">사용 하 여 파일 액세스 자격 증명을 요구 하는 리소스에 있으면는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.XmlResolver%2A&gt;</ph> 속성을 통해 필요한 자격 증명을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>In version 1.1 of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, partially trusted code cannot set the <ph id="ph2">`XmlResolver`</ph> property.</source>
          <target state="translated">버전 1.1에에서는 <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, 코드에서 설정할 수 없습니다를 부분적으로 신뢰할 수 있는 <ph id="ph2">`XmlResolver`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>The workaround is to create an <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with the necessary credentials, pass the URI to the <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType&gt;</ph> method, and then construct the <ph id="ph3">`XmlTextReader`</ph> using the resulting <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> object.</source>
          <target state="translated">만들려면이 문제를 해결 한 <ph id="ph1">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> 에 필요한 자격 증명의 URI를 전달는 <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType&gt;</ph> 메서드와 다음 구문을 <ph id="ph3">`XmlTextReader`</ph> 결과 사용 하 여 <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>The workaround is described in the following C# code.</source>
          <target state="translated">다음 C# 코드 해결 방법을 설명 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>The following example reads an XML file and displays each of the nodes.</source>
          <target state="translated">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>The example uses the file, <ph id="ph1">`items.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`items.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>The specified file cannot be found.</source>
          <target state="translated">지정된 파일을 찾을 수 없는 경우</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>Part of the filename or directory cannot be found.</source>
          <target state="translated">파일 이름 또는 디렉터리 부분을 찾을 수 없는 경우</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="url" /&gt;</ph> is an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="url" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>The remote filename cannot be resolved.</source>
          <target state="translated">원격 파일 이름을 확인할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source>An error occurred while processing the request.</source>
          <target state="translated">이 요청을 처리하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="url" /&gt;</ph> is not a valid URI.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="url" /&gt;</ph> 경로는 유효한 URI가 아닙니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph> to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>를 사용하여 <ph id="ph2">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
          <source>The stream containing the XML data to read.</source>
          <target state="translated">읽을 XML 데이터를 포함하고 있는 스트림입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph> to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified stream and <ph id="ph2">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>.</source>
          <target state="translated">지정된 스트림, <ph id="ph2">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>를 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> decodes the stream using <ph id="ph2">&lt;xref:System.Text.Encoding?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 사용 하 여 스트림의 디코딩합니다 <ph id="ph2">&lt;xref:System.Text.Encoding?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
          <source>If you specify a name table, this constructor uses the names defined already in that table.</source>
          <target state="translated">이름 테이블을 지정 하는 경우이 생성자는 해당 테이블에 이미 정의 된 이름을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;paramref name="input" /&gt;</ph> or <ph id="ph2">&lt;paramref name="nt" /&gt;</ph> value is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="input" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="nt" /&gt;</ph> 값이 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> containing the XML data to read.</source>
          <target state="translated">읽을 XML 데이터를 포함하는 <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph> to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>를 사용하여 <ph id="ph3">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>It is assumed that the <ph id="ph1">`TextReader`</ph> is already set to the correct encoding.</source>
          <target state="translated"><ph id="ph1">`TextReader`</ph>가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</source>
          <target state="translated">이 작업은 일부의 원인 다중 파트 MIME 시나리오에서 스트림에서 읽기 이미 있어야 하는 클라이언트에서 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;paramref name="nt" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nt" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
          <source>The URL to use for resolving external resources.</source>
          <target state="translated">외부 리소스를 확인하는 데 사용할 URL입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph> is set to this value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph>는 이 값으로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
          <source>The stream containing the XML data to read.</source>
          <target state="translated">읽을 XML 데이터를 포함하고 있는 스트림입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified URL and stream.</source>
          <target state="translated">지정된 URL과 스트림을 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="input" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="input" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
          <source>The URL to use for resolving external resources.</source>
          <target state="translated">외부 리소스를 확인하는 데 사용할 URL입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph> is set to this value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph>는 이 값으로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
          <source>The <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> containing the XML data to read.</source>
          <target state="translated">읽을 XML 데이터를 포함하는 <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified URL and <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>.</source>
          <target state="translated">지정된 URL과 <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>를 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
          <source>It is assumed that the <ph id="ph1">`TextReader`</ph> is already set to the correct encoding.</source>
          <target state="translated"><ph id="ph1">`TextReader`</ph>가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
          <source>This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</source>
          <target state="translated">이 작업은 일부의 원인 다중 파트 MIME 시나리오에서 스트림에서 읽기 이미 있어야 하는 클라이언트에서 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>The URL for the file containing the XML data to read.</source>
          <target state="translated">읽을 XML 데이터를 포함하는 파일의 URL입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph> to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified file and <ph id="ph2">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>.</source>
          <target state="translated">지정된 파일과 <ph id="ph2">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>을 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;paramref name="nt" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nt" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>The specified file cannot be found.</source>
          <target state="translated">지정된 파일을 찾을 수 없는 경우</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>Part of the filename or directory cannot be found.</source>
          <target state="translated">파일 이름 또는 디렉터리 부분을 찾을 수 없는 경우</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source><ph id="ph1">&lt;paramref name="url" /&gt;</ph> is an empty string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="url" /&gt;</ph>이 빈 문자열인 경우</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>The remote filename cannot be resolved.</source>
          <target state="translated">원격 파일 이름을 확인할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source>An error occurred while processing the request.</source>
          <target state="translated">이 요청을 처리하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
          <source><ph id="ph1">&lt;paramref name="url" /&gt;</ph> is not a valid URI.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="url" /&gt;</ph> 경로는 유효한 URI가 아닙니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The stream containing the XML fragment to parse.</source>
          <target state="translated">구문 분석할 XML 조각을 포함하는 스트림입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph> of the XML fragment.</source>
          <target state="translated">XML 조각의 <ph id="ph1">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This also determines what the fragment can contain.</source>
          <target state="translated">또한 조각에 포함되는 사항을 결정합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>(See table below.)</source>
          <target state="translated">아래 표를 참조하세요.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph> in which the <bpt id="p1">&lt;c&gt;</bpt>xmlFragment<ept id="p1">&lt;/c&gt;</ept> is to be parsed.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>xmlFragment<ept id="p1">&lt;/c&gt;</ept>를 구문 분석할 <ph id="ph1">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This includes the <ph id="ph1">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph> to use, encoding, namespace scope, the current <bpt id="p1">&lt;c&gt;</bpt>xml:lang<ept id="p1">&lt;/c&gt;</ept>, and the <bpt id="p2">&lt;c&gt;</bpt>xml:space<ept id="p2">&lt;/c&gt;</ept> scope.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>, 인코딩, 네임스페이스 범위, 현재 <bpt id="p1">&lt;c&gt;</bpt>xml:lang<ept id="p1">&lt;/c&gt;</ept> 및 <bpt id="p2">&lt;c&gt;</bpt>xml:space<ept id="p2">&lt;/c&gt;</ept> 범위가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified stream, <ph id="ph2">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph>, and <ph id="ph3">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph>.</source>
          <target state="translated">지정된 스트림, <ph id="ph2">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph>를 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This constructor parses the given string as a fragment of XML.</source>
          <target state="translated">이 생성자의 XML 조각으로 지정된 된 문자열을 구문 분석합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</source>
          <target state="translated">XML 조각 요소 또는 특성 이면 올바른 형식의 XML 문서에 대 한 루트 수준 규칙을 무시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The following table lists valid values for <ph id="ph1">`fragType`</ph>.</source>
          <target state="translated">다음 표에서 유효한 값에 대 한 <ph id="ph1">`fragType`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>XmlNodeType</source>
          <target state="translated">XmlNodeType</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Fragment May Contain</source>
          <target state="translated">조각에 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</source>
          <target state="translated">모든 유효한 요소 내용 (예를 들어 요소, 주석, 처리 명령, CDATA 섹션, 텍스트 및 엔터티 참조의 조합)입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>An XML declaration can also be supplied.</source>
          <target state="translated">XML 선언을 제공할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This allows you to specify the encoding for the XML fragment, rather than having to set it on the <ph id="ph1">&lt;xref:System.Xml.XmlParserContext&gt;</ph> object.</source>
          <target state="translated">설정 하는 대신 XML 조각에 대 한 인코딩을 지정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Xml.XmlParserContext&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The value of an attribute (the part inside the quotes).</source>
          <target state="translated">(따옴표 안에 부분) 특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The contents of an entire XML document.</source>
          <target state="translated">전체 XML 문서의 내용입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This enforces document level rules.</source>
          <target state="translated">문서 수준 규칙을 적용합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The reader uses the following to determine the encoding of the stream.</source>
          <target state="translated">판독기에서 다음을 사용 하 여 스트림의 인코딩을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Checks the <ph id="ph1">&lt;xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType&gt;</ph> property to determine the encoding.</source>
          <target state="translated">확인 된 <ph id="ph1">&lt;xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType&gt;</ph> 인코딩을 결정 하는 속성입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>If the <ph id="ph1">`Encoding`</ph> property is <ph id="ph2">`null`</ph>, the reader checks for a byte-order mark at the beginning of the stream.</source>
          <target state="translated">경우는 <ph id="ph1">`Encoding`</ph> 속성은 <ph id="ph2">`null`</ph>, 판독기가 스트림의 시작 부분에서 바이트 순서 표시를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>If the <ph id="ph1">`Encoding`</ph> property is <ph id="ph2">`null`</ph>, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.</source>
          <target state="translated">경우는 <ph id="ph1">`Encoding`</ph> 속성은 <ph id="ph2">`null`</ph>, 바이트 순서 표시가 없으면 발견 되 고, 판독기 가정 스트림을 인코딩하는 u t F-8입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source><ph id="ph1">&lt;paramref name="fragType" /&gt;</ph> is not an Element, Attribute, or Document <ph id="ph2">&lt;see langword="XmlNodeType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fragType" /&gt;</ph>이 Element, Attribute 또는 Document <ph id="ph2">&lt;see langword="XmlNodeType" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source><ph id="ph1">&lt;paramref name="xmlFragment" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xmlFragment" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
          <source>The URL to use for resolving external resources.</source>
          <target state="translated">외부 리소스를 확인하는 데 사용할 URL입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph> is set to this value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph>는 이 값으로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>url<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, <ph id="ph2">&lt;see langword="BaseURI" /&gt;</ph> is set to <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>url<ept id="p1">&lt;/c&gt;</ept>이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이면 <ph id="ph2">&lt;see langword="BaseURI" /&gt;</ph>가 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
          <source>The stream containing the XML data to read.</source>
          <target state="translated">읽을 XML 데이터를 포함하고 있는 스트림입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph> to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified URL, stream and <ph id="ph2">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>.</source>
          <target state="translated">지정된 URL, 스트림 및 <ph id="ph2">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>을 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;paramref name="input" /&gt;</ph> or <ph id="ph2">&lt;paramref name="nt" /&gt;</ph> value is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="input" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="nt" /&gt;</ph> 값이 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>The URL to use for resolving external resources.</source>
          <target state="translated">외부 리소스를 확인하는 데 사용할 URL입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph> is set to this value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.BaseURI" /&gt;</ph>는 이 값으로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>url<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, <ph id="ph2">&lt;see langword="BaseURI" /&gt;</ph> is set to <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>url<ept id="p1">&lt;/c&gt;</ept>이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이면 <ph id="ph2">&lt;see langword="BaseURI" /&gt;</ph>가 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph> containing the XML data to read.</source>
          <target state="translated">읽을 XML 데이터를 포함하는 <ph id="ph1">&lt;see langword="TextReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph> to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified URL, <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>.</source>
          <target state="translated">지정된 URL과 <ph id="ph2">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> <ph id="ph3">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>를 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>It is assumed that the <ph id="ph1">`TextReader`</ph> is already set to the correct encoding.</source>
          <target state="translated"><ph id="ph1">`TextReader`</ph>가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</source>
          <target state="translated">이 작업은 일부의 원인 다중 파트 MIME 시나리오에서 스트림에서 읽기 이미 있어야 하는 클라이언트에서 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
          <source>The <ph id="ph1">&lt;paramref name="nt" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nt" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The string containing the XML fragment to parse.</source>
          <target state="translated">구문 분석할 XML 조각을 포함하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph> of the XML fragment.</source>
          <target state="translated">XML 조각의 <ph id="ph1">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This also determines what the fragment string can contain.</source>
          <target state="translated">또한 조각 문자열에 포함되는 사항을 결정합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>(See table below.)</source>
          <target state="translated">아래 표를 참조하세요.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph> in which the <bpt id="p1">&lt;c&gt;</bpt>xmlFragment<ept id="p1">&lt;/c&gt;</ept> is to be parsed.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>xmlFragment<ept id="p1">&lt;/c&gt;</ept>를 구문 분석할 <ph id="ph1">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This includes the <ph id="ph1">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph> to use, encoding, namespace scope, the current <bpt id="p1">&lt;c&gt;</bpt>xml:lang<ept id="p1">&lt;/c&gt;</ept>, and the <bpt id="p2">&lt;c&gt;</bpt>xml:space<ept id="p2">&lt;/c&gt;</ept> scope.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>, 인코딩, 네임스페이스 범위, 현재 <bpt id="p1">&lt;c&gt;</bpt>xml:lang<ept id="p1">&lt;/c&gt;</ept> 및 <bpt id="p2">&lt;c&gt;</bpt>xml:space<ept id="p2">&lt;/c&gt;</ept> 범위가 포함됩니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class with the specified string, <ph id="ph2">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph>, and <ph id="ph3">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph>.</source>
          <target state="translated">지정된 문자열, <ph id="ph2">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph>를 사용하여 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This constructor parses the given string as a fragment of XML.</source>
          <target state="translated">이 생성자의 XML 조각으로 지정된 된 문자열을 구문 분석합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</source>
          <target state="translated">XML 조각 요소 또는 특성 이면 올바른 형식의 XML 문서에 대 한 루트 수준 규칙을 무시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This constructor can handle strings returned from <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadInnerXml%2A&gt;</ph>.</source>
          <target state="translated">이 생성자에서 반환 된 문자열을 처리할 수 <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadInnerXml%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The following table lists valid values for <ph id="ph1">`fragType`</ph> and how the reader parses each of the different node types.</source>
          <target state="translated">다음 표에서 유효한 값에 대 한 <ph id="ph1">`fragType`</ph> 목록과 판독기 다양 한 노드 형식을 구문 분석 하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>XmlNodeType</source>
          <target state="translated">XmlNodeType</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Fragment May Contain</source>
          <target state="translated">조각에 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Element</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</source>
          <target state="translated">모든 유효한 요소 내용 (예를 들어 요소, 주석, 처리 명령, CDATA 섹션, 텍스트 및 엔터티 참조의 조합)입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>An XML declaration can also be supplied.</source>
          <target state="translated">XML 선언을 제공할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This allows you to specify the encoding for the XML fragment, rather than having to set it on the <ph id="ph1">&lt;xref:System.Xml.XmlParserContext&gt;</ph> object.</source>
          <target state="translated">설정 하는 대신 XML 조각에 대 한 인코딩을 지정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Xml.XmlParserContext&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Attribute</source>
          <target state="translated">특성</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The value of an attribute (the part inside the quotes).</source>
          <target state="translated">(따옴표 안에 부분) 특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>Document</source>
          <target state="translated">문서</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The contents of an entire XML document.</source>
          <target state="translated">전체 XML 문서의 내용입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>This enforces document level rules.</source>
          <target state="translated">문서 수준 규칙을 적용합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>The following example parses an XML fragment.</source>
          <target state="translated">다음 예제에서는 XML 조각을 구문 분석합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source>It uses the <ph id="ph1">`XmlParserContext`</ph> and its <ph id="ph2">&lt;xref:System.Xml.XmlNamespaceManager&gt;</ph> to handle namespace resolution.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">`XmlParserContext`</ph> 및 해당 <ph id="ph2">&lt;xref:System.Xml.XmlNamespaceManager&gt;</ph> 네임 스페이스 확인을 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source><ph id="ph1">&lt;paramref name="fragType" /&gt;</ph> is not an <ph id="ph2">&lt;see langword="Element" /&gt;</ph>, <ph id="ph3">&lt;see langword="Attribute" /&gt;</ph>, or <ph id="ph4">&lt;see langword="Document" /&gt;</ph><ph id="ph5">&lt;see langword="XmlNodeType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="fragType" /&gt;</ph>은 <ph id="ph2">&lt;see langword="Element" /&gt;</ph>, <ph id="ph3">&lt;see langword="Attribute" /&gt;</ph> 또는 <ph id="ph4">&lt;see langword="Document" /&gt;</ph><ph id="ph5">&lt;see langword="XmlNodeType" /&gt;</ph>이 아닙니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
          <source><ph id="ph1">&lt;paramref name="xmlFragment" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xmlFragment" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.AttributeCount">
          <source>Gets the number of attributes on the current node.</source>
          <target state="translated">현재 노드의 특성 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.AttributeCount">
          <source>The number of attributes on the current node.</source>
          <target state="translated">현재 노드에 포함된 특성의 수입니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.AttributeCount">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.AttributeCount">
          <source>This property is relevant to <ph id="ph1">`Element`</ph>, <ph id="ph2">`DocumentType`</ph> and <ph id="ph3">`XmlDeclaration`</ph> nodes only.</source>
          <target state="translated">이 속성은 관련이 <ph id="ph1">`Element`</ph>, <ph id="ph2">`DocumentType`</ph> 및 <ph id="ph3">`XmlDeclaration`</ph> 노드만 해당 합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.AttributeCount">
          <source>(Other node types do not have attributes.)</source>
          <target state="translated">(다른 노드 형식 특성이 없습니다.)</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.AttributeCount">
          <source>The following example displays all attributes on the current node.</source>
          <target state="translated">다음 예에서는 현재 노드의 모든 특성을 표시합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.BaseURI">
          <source>Gets the base URI of the current node.</source>
          <target state="translated">현재 노드의 기본 URI를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.BaseURI">
          <source>The base URI of the current node.</source>
          <target state="translated">현재 노드의 기본 URI입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.BaseURI">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.BaseURI">
          <source>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places.</source>
          <target state="translated">네트워크 XML 문서는 다양 한 W3C 표준 포함 구조를 사용 하 여 집계 데이터의 청크 한 이루어져 서로 다른 위치에서 제공 하는 노드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.BaseURI">
          <source>DTD entities are an example of this, but this is not limited to DTDs.</source>
          <target state="translated">DTD 엔터티가이의 예는 Dtd에 국한 되지 않음.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.BaseURI">
          <source>The base URI tells you where these nodes came from.</source>
          <target state="translated">기본 URI 출처를 보여 줍니다 여기서 이러한 노드.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.BaseURI">
          <source>If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), <ph id="ph1">`String.Empty`</ph> is returned.</source>
          <target state="translated">반환 되는 노드에 대 한 기본 URI에 없는 경우 (예를 들어 구문 분석 된 메모리에 문자열에서), <ph id="ph1">`String.Empty`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.BaseURI">
          <source>The following example displays the base URI for each of the nodes.</source>
          <target state="translated">다음 예제에서는 각 노드에 대 한 기본 URI를 표시합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.BaseURI">
          <source>The example uses the file, <ph id="ph1">`baseuri.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`baseuri.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.CanReadBinaryContent">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> implements the binary content read methods.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>가 이진 콘텐츠 읽기 메서드를 구현하는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanReadBinaryContent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the binary content read methods are implemented; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이진 콘텐츠 읽기 메서드를 구현하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanReadBinaryContent">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class always returns <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스는 항상 <ph id="ph2">&lt;see langword="true" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanReadBinaryContent">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanReadBinaryContent">
          <source>The binary content read methods include the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A&gt;</ph> methods.</source>
          <target state="translated">이진 콘텐츠 읽기는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.CanReadValueChunk">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> implements the <ph id="ph2">&lt;see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>가 <ph id="ph2">&lt;see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /&gt;</ph> 메서드를 구현하는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanReadValueChunk">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> implements the <ph id="ph3">&lt;see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /&gt;</ph> method; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>가 <ph id="ph3">&lt;see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /&gt;</ph> 메서드를 구현하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanReadValueChunk">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> class always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> 클래스는 항상 <ph id="ph2">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanReadValueChunk">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanReadValueChunk">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> throws a <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph> if the <ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> throw 한 <ph id="ph2">&lt;xref:System.NotSupportedException&gt;</ph> 경우는 <ph id="ph3">&lt;xref:System.Xml.XmlReader.ReadValueChunk%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.CanResolveEntity">
          <source>Gets a value indicating whether this reader can parse and resolve entities.</source>
          <target state="translated">이 판독기가 엔터티를 구문 분석하고 확인할 수 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanResolveEntity">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the reader can parse and resolve entities; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">판독기가 엔터티를 구문 분석하고 확인할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanResolveEntity">
          <source>The <ph id="ph1">&lt;see langword="XmlTextReader" /&gt;</ph> class always returns <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextReader" /&gt;</ph> 클래스는 항상 <ph id="ph2">&lt;see langword="true" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanResolveEntity">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanResolveEntity">
          <source>This is a change in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> release.</source>
          <target state="translated">이 변경 내용에 <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> 해제 합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.CanResolveEntity">
          <source>In previous versions, the <ph id="ph1">`XmlTextReader`</ph> class could not resolve entities and <ph id="ph2">`CanResolveEntity`</ph> always returned <ph id="ph3">`false`</ph>.</source>
          <target state="translated">이전 버전에서의 <ph id="ph1">`XmlTextReader`</ph> 엔터티 클래스를 확인할 수 없습니다 및 <ph id="ph2">`CanResolveEntity`</ph> 항상 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.Close">
          <source>Changes the <ph id="ph1">&lt;see cref="P:System.Xml.XmlReader.ReadState" /&gt;</ph> to <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlReader.ReadState" /&gt;</ph>를 <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>로 변경합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Close">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Close">
          <source>This method also releases any resources held while reading.</source>
          <target state="translated">이 메서드는 또한 읽는 동안 보유 한 모든 리소스를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Close">
          <source>If this reader was constructed using a stream, this method also calls <ph id="ph1">`Close`</ph> on the underlying stream.</source>
          <target state="translated">이 판독기가 스트림을 사용 하 여 생성 된 경우이 메서드 호출 <ph id="ph1">`Close`</ph> 내부 스트림의 합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Close">
          <source>If <ph id="ph1">`Close`</ph> has already been called, no action is performed.</source>
          <target state="translated">경우 <ph id="ph1">`Close`</ph> 가 이미 호출 아무 작업도 수행 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.Depth">
          <source>Gets the depth of the current node in the XML document.</source>
          <target state="translated">XML 문서에서 현재 노드의 수준을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Depth">
          <source>The depth of the current node in the XML document.</source>
          <target state="translated">XML 문서의 현재 노드 수준입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Depth">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Depth">
          <source>The following example displays each node including its depth, line number, and line position.</source>
          <target state="translated">다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.DtdProcessing">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Xml.DtdProcessing" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.DtdProcessing" /&gt;</ph> 열거형을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.DtdProcessing">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.DtdProcessing" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.DtdProcessing" /&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.DtdProcessing">
          <source>The <ph id="ph1">&lt;xref:System.Xml.DtdProcessing&gt;</ph> enumeration contains the <ph id="ph2">&lt;xref:System.Xml.DtdProcessing.Prohibit&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.DtdProcessing.Ignore&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.DtdProcessing.Parse&gt;</ph> enumerators.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.DtdProcessing&gt;</ph> 열거형이 포함 되어는 <ph id="ph2">&lt;xref:System.Xml.DtdProcessing.Prohibit&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.DtdProcessing.Ignore&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Xml.DtdProcessing.Parse&gt;</ph> 열거자입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.DtdProcessing">
          <source><ph id="ph1">&lt;xref:System.Xml.DtdProcessing.Parse&gt;</ph> is the default behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.DtdProcessing.Parse&gt;</ph> 기본 동작이입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.DtdProcessing">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt;</ph> property replaces the <ph id="ph2">`ProhibitDTD`</ph> property and adds the ability to ignore the DOCTYPE element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt;</ph> 속성 대신은 <ph id="ph2">`ProhibitDTD`</ph> 속성 DOCTYPE 요소를 무시 하는 기능을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.DtdProcessing">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType&gt;</ph>, the <ph id="ph3">&lt;xref:System.Xml.XmlTextReader&gt;</ph> will not report the DTDs.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.DtdProcessing%2A&gt;</ph> 속성이 <ph id="ph2">&lt;xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 는 Dtd를 보고 하지 것입니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.DtdProcessing">
          <source>This means that the DTD/DOCTYPE will be lost on output.</source>
          <target state="translated">이 출력에 DTD/DOCTYPE이 손실 되는 것을 의미 합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.Encoding">
          <source>Gets the encoding of the document.</source>
          <target state="translated">문서의 인코딩을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Encoding">
          <source>The encoding value.</source>
          <target state="translated">인코딩 값입니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Encoding">
          <source>If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</source>
          <target state="translated">인코딩 특성이 없는 경우 바이트 순서 표시가 없으면 기본값은 UTF-8로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Encoding">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Encoding">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> uses the <ph id="ph2">&lt;xref:System.Text.Encoding?displayProperty=nameWithType&gt;</ph> class, <ph id="ph3">`XmlTextReader`</ph> also supports all encodings supported by that class.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 사용 하 여는 <ph id="ph2">&lt;xref:System.Text.Encoding?displayProperty=nameWithType&gt;</ph> 클래스 <ph id="ph3">`XmlTextReader`</ph> 도 해당 클래스에서 지 원하는 인코딩을 모두 지원 합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Encoding">
          <source>The exception to this is any encoding, such as UTF-7 or EBCDIC, that maps the <ph id="ph1">`&lt;?xml`</ph> sequence to different byte values than UTF-8.</source>
          <target state="translated">이 예외는 u t F-7 또는 EBCDIC 매핑하는 등의 인코딩은 <ph id="ph1">`&lt;?xml`</ph> 시퀀스를 u t F-8 다른 바이트 값입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Gets or sets a value that specifies how the reader handles entities.</source>
          <target state="translated">판독기가 엔터티를 처리하는 방법을 지정하는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.EntityHandling" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.EntityHandling" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>If no <ph id="ph1">&lt;see langword="EntityHandling" /&gt;</ph> is specified, it defaults to <ph id="ph2">&lt;see langword="EntityHandling.ExpandCharEntities" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="EntityHandling" /&gt;</ph>을 지정하지 않으면 기본값이 <ph id="ph2">&lt;see langword="EntityHandling.ExpandCharEntities" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>This property can be changed on the fly and takes effect after the next <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> call.</source>
          <target state="translated">다음 이후 즉시 및 걸립니다 효과 대해이 속성을 변경할 수 있습니다 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> 호출 합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>When <ph id="ph1">`EntityHandling`</ph> is set to <ph id="ph2">`ExpandCharEntities`</ph>, attribute values are only partially normalized.</source>
          <target state="translated">때 <ph id="ph1">`EntityHandling`</ph> 로 설정 된 <ph id="ph2">`ExpandCharEntities`</ph>, 특성 값은 부분적 으로만 정규화 합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.</source>
          <target state="translated">판독기는 인접 한 엔터티 참조 노드 내용에서 독립적으로 각 개별 텍스트 노드를 정규화합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>To illustrate the difference between the entity handling modes consider the following XML:</source>
          <target state="translated">엔터티 간의 차이 설명 하기 위해 처리 모드는 다음과 같은 XML을 고려 합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>When <ph id="ph1">`EntityHandling`</ph> is set to <ph id="ph2">`ExpandEntities`</ph> the "doc" element node contains one text node with the expanded entity text:</source>
          <target state="translated">때 <ph id="ph1">`EntityHandling`</ph> 로 설정 된 <ph id="ph2">`ExpandEntities`</ph> "doc" 요소 노드 확장된 엔터티 텍스트와 함께 하나의 텍스트 노드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Depth</source>
          <target state="translated">깊이</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Node type</source>
          <target state="translated">노드 형식</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Name</source>
          <target state="translated">name</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Value</source>
          <target state="translated">값</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>A 123</source>
          <target state="translated">A 123</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>When <ph id="ph1">`EntityHandling`</ph> is set to <ph id="ph2">`ExpandCharEntites`</ph>, and <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.WhitespaceHandling%2A&gt;</ph> is set to <ph id="ph4">`Significant`</ph> or <ph id="ph5">`All`</ph>, the "doc" element expands the character entity and returns the general entity as a node:</source>
          <target state="translated">때 <ph id="ph1">`EntityHandling`</ph> 로 설정 되어 <ph id="ph2">`ExpandCharEntites`</ph>, 및 <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.WhitespaceHandling%2A&gt;</ph> 로 설정 되어 <ph id="ph4">`Significant`</ph> 또는 <ph id="ph5">`All`</ph>, "doc" 요소 문자 엔터티를 확장 및 노드로 일반 엔터티를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Depth</source>
          <target state="translated">깊이</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Node type</source>
          <target state="translated">노드 형식</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Name</source>
          <target state="translated">name</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>Value</source>
          <target state="translated">값</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>A</source>
          <target state="translated">A</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>num</source>
          <target state="translated">num</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EntityHandling">
          <source>1</source>
          <target state="translated">1</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.EOF">
          <source>Gets a value indicating whether the reader is positioned at the end of the stream.</source>
          <target state="translated">판독기가 스트림의 맨 끝에 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EOF">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the reader is positioned at the end of the stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">판독기가 스트림의 맨 끝에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.EOF">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextReader">
          <source>Gets the value of an attribute.</source>
          <target state="translated">특성의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
          <source>The index of the attribute.</source>
          <target state="translated">특성의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
          <source>The index is zero-based.</source>
          <target state="translated">인덱스는 0부터 시작합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
          <source>(The first attribute has index 0.)</source>
          <target state="translated">첫 번째 특성의 인덱스는 0입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
          <source>Gets the value of the attribute with the specified index.</source>
          <target state="translated">지정된 인덱스가 있는 특성의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
          <source>The value of the specified attribute.</source>
          <target state="translated">지정된 특성의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
          <source>This method does not move the reader.</source>
          <target state="translated">이 메서드는 판독기를 이동하지 않습니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="i" /&gt;</ph> parameter is less than 0 or greater than or equal to <ph id="ph2">&lt;see cref="P:System.Xml.XmlTextReader.AttributeCount" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="i" /&gt;</ph> 매개 변수가 0보다 작거나 <ph id="ph2">&lt;see cref="P:System.Xml.XmlTextReader.AttributeCount" /&gt;</ph>보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
          <source>The qualified name of the attribute.</source>
          <target state="translated">특성의 정규화된 이름입니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
          <source>Gets the value of the attribute with the specified name.</source>
          <target state="translated">지정된 이름이 있는 특성의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
          <source>The value of the specified attribute.</source>
          <target state="translated">지정된 특성의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
          <source>If the attribute is not found, <ph id="ph1">&lt;see langword="null" /&gt;</ph> is returned.</source>
          <target state="translated">특성이 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
          <source>This method does not move the reader.</source>
          <target state="translated">이 메서드는 판독기를 이동하지 않습니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
          <source>If the reader is positioned on a <ph id="ph1">`DocumentType`</ph> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <ph id="ph2">`reader.GetAttribute("PUBLIC")`</ph></source>
          <target state="translated">판독기가 배치 되 면는 <ph id="ph1">`DocumentType`</ph> 노드를이 메서드는 PUBLIC 및 시스템 리터럴, 예를 들어, 가져오는 데 사용할 수 있습니다 <ph id="ph2">`reader.GetAttribute("PUBLIC")`</ph></target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
          <source>The following example gets the value of the ISBN attribute.</source>
          <target state="translated">다음 예제에서는 ISBN 특성의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
          <source>The example uses the file, <ph id="ph1">`attrs.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`attrs.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>The local name of the attribute.</source>
          <target state="translated">특성의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>The namespace URI of the attribute.</source>
          <target state="translated">특성의 네임스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>Gets the value of the attribute with the specified local name and namespace URI.</source>
          <target state="translated">지정된 로컬 이름과 네임스페이스 URI가 있는 특성의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>The value of the specified attribute.</source>
          <target state="translated">지정된 특성의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>If the attribute is not found, <ph id="ph1">&lt;see langword="null" /&gt;</ph> is returned.</source>
          <target state="translated">특성이 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>This method does not move the reader.</source>
          <target state="translated">이 메서드는 판독기를 이동하지 않습니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>The following XML contains an attribute in a specific namespace:</source>
          <target state="translated">다음 XML 특성을 특정 네임 스페이스에 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>You can lookup the <ph id="ph1">`dt:type`</ph> attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):</source>
          <target state="translated">조회할 수 있습니다는 <ph id="ph1">`dt:type`</ph> (접두사와 로컬 이름)에 하나의 인수 또는 (로컬 이름 및 네임 스페이스 URI)는 두 개의 인수를 사용 하 여 특성:</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>To lookup the <ph id="ph1">`xmlns:dt`</ph> attribute, use one of the following arguments:</source>
          <target state="translated">조회는 <ph id="ph1">`xmlns:dt`</ph> 특성을 다음 인수 중 하나를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
          <source>You can also get this information using the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Prefix%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여이 정보를 가져올 수도 있습니다는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Prefix%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlNamespaceScope" /&gt;</ph> value that specifies the type of namespace nodes to return.</source>
          <target state="translated">반환할 네임스페이스 노드의 형식을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.XmlNamespaceScope" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>Gets a collection that contains all namespaces currently in-scope.</source>
          <target state="translated">현재 범위 내에 있는 모든 네임스페이스가 포함된 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> object that contains all the current in-scope namespaces.</source>
          <target state="translated">현재 범위 내에 있는 모든 네임스페이스가 포함된 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</source>
          <target state="translated">판독기가 요소에 배치되지 않은 경우에는 네임스페이스가 없는 빈 사전이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>The dictionary consists of a collection of namespace names keyed by prefix.</source>
          <target state="translated">사전 컬렉션 접두사가 붙은 네임 스페이스 이름으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>It can be used to enumerate the in-scope namespaces.</source>
          <target state="translated">범위 내의 네임 스페이스 열거를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>The dictionary is a disconnected copy of the namespace list of the reader.</source>
          <target state="translated">사전은 연결이 끊긴된 복사본 판독기의 네임 스페이스 목록입니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>It remains unchanged as the reader position, current in-scope namespace list, changes.</source>
          <target state="translated">변경 되지 않습니다 판독기 위치, 현재 범위에서 네임 스페이스 목록, 변경 합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>The following table describes how the <ph id="ph1">&lt;xref:System.Xml.XmlNamespaceScope&gt;</ph> enumeration value affects the whether or not the default and built-in namespaces are returned by <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A&gt;</ph>.</source>
          <target state="translated">다음 표에서 설명 방법을 <ph id="ph1">&lt;xref:System.Xml.XmlNamespaceScope&gt;</ph> 열거형 값을에 있는지 여부를 영향을 주거나 하지는 기본 및 기본 제공 네임 스페이스를 반환 하 여 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>XmlNamespaceScope Value</source>
          <target state="translated">XmlNamespaceScope 값</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>xmlns:xml</source>
          <target state="translated">xmlns:xml</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>xmlns:xmlns</source>
          <target state="translated">xmlns:xmlns</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>xmlns=""</source>
          <target state="translated">xmlns=""</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>yes</source>
          <target state="translated">예</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>no</source>
          <target state="translated">no</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>no</source>
          <target state="translated">아니요</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>no</source>
          <target state="translated">아니요</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>no</source>
          <target state="translated">아니요</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>no</source>
          <target state="translated">아니요</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>no</source>
          <target state="translated">아니요</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>no</source>
          <target state="translated">아니요</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>yes</source>
          <target state="translated">예</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetRemainder">
          <source>Gets the remainder of the buffered XML.</source>
          <target state="translated">버퍼링된 XML의 나머지 부분을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.GetRemainder">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> containing the remainder of the buffered XML.</source>
          <target state="translated">버퍼링된 XML 의 나머지 부분을 포함하는 <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetRemainder">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetRemainder">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> does a buffered <ph id="ph2">`Read`</ph>, it must be able to return the remainder of the unused buffer so that no data is lost.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 않습니다는 버퍼링 된 <ph id="ph2">`Read`</ph>, 데이터는 손실 되지 않도록 사용 되지 않는 버퍼의 나머지 부분을 반환 하는 일을 할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetRemainder">
          <source>This allows protocols (such as multi-part MIME) to package XML in the same stream as other things.</source>
          <target state="translated">이렇게 하면 패키지는 동일한 스트림에서 다른 작업으로의 XML 프로토콜 (예: 다중 파트 MIME).</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetRemainder">
          <source>After calling this method, <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.EOF%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 메서드를 호출한 후 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.EOF%2A&gt;</ph> 로 설정 된 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetRemainder">
          <source>The following example reads the first part of an XML document and then uses <ph id="ph1">`GetRemainder`</ph> to complete reading the document using a second reader.</source>
          <target state="translated">다음 예제에서는 XML 문서의 첫 번째 부분을 사용 하 여 <ph id="ph1">`GetRemainder`</ph> 에 두 번째 판독기를 사용 하 여 문서를 읽기를 완료 합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.GetRemainder">
          <source>The example uses the input file <ph id="ph1">`tworeads.xml`</ph>.</source>
          <target state="translated">이 예제에서는 입력된 파일을 사용 하 여 <ph id="ph1">`tworeads.xml`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.HasLineInfo">
          <source>Gets a value indicating whether the class can return line information.</source>
          <target state="translated">클래스에서 줄 정보를 반환할 수 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.HasLineInfo">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class can return line information; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">클래스에서 줄 정보를 반환할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.HasLineInfo">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>Gets a value indicating whether the current node can have a <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.Value" /&gt;</ph> other than <ph id="ph2">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated">현재 노드에 <ph id="ph2">&lt;see langword="String.Empty" /&gt;</ph> 이외의 <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.Value" /&gt;</ph>를 사용할 수 있는지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the node on which the reader is currently positioned can have a <ph id="ph2">&lt;see langword="Value" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 판독기가 위치한 노드에 <ph id="ph2">&lt;see langword="Value" /&gt;</ph>가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The following table lists node types that have a value to return.</source>
          <target state="translated">다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>Node type</source>
          <target state="translated">노드 형식</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>Value</source>
          <target state="translated">값</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The value of the attribute.</source>
          <target state="translated">특성 값</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The content of the CDATA section.</source>
          <target state="translated">CDATA 섹션 내용입니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The content of the comment.</source>
          <target state="translated">주석의 내용입니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The internal subset.</source>
          <target state="translated">내부 하위 집합입니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The entire content, excluding the target.</source>
          <target state="translated">대상을 제외한 전체 내용입니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The white space between markup in a mixed content model.</source>
          <target state="translated">혼합된 콘텐츠 모델의 태그 간 공백입니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The content of the text node.</source>
          <target state="translated">텍스트 노드의 내용입니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The white space between markup.</source>
          <target state="translated">태그 사이의 공백입니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The content of the declaration.</source>
          <target state="translated">선언 내용입니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The following example displays the value for every node that can have a value.</source>
          <target state="translated">다음 예제에서는 값을 가질 수 있는 모든 노드의 값을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.HasValue">
          <source>The example uses the file, <ph id="ph1">`book1.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`book1.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.IsDefault">
          <source>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</source>
          <target state="translated">현재 노드가 DTD 또는 스키마에 정의된 기본값에서 생성된 특성인지를 나타내는 값을 얻습니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsDefault">
          <source>This property always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 속성은 항상 <ph id="ph1">&lt;see langword="false" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsDefault">
          <source>(<ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> does not expand default attributes.)</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>는 기본 특성을 확장하지 않습니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsDefault">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsDefault">
          <source>This property applies only to attribute nodes.</source>
          <target state="translated">이 속성은 특성 노드에 적용합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source>Gets a value indicating whether the current node is an empty element (for example, <bpt id="p1">&lt;c&gt;</bpt><ph id="ph1">&amp;lt;</ph>MyElement/<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept>).</source>
          <target state="translated">현재 노드가 빈 요소(예: <bpt id="p1">&lt;c&gt;</bpt><ph id="ph1">&amp;lt;</ph>MyElement/<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept>)인지를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current node is an element (<ph id="ph2">&lt;see cref="P:System.Xml.XmlTextReader.NodeType" /&gt;</ph> equals <ph id="ph3">&lt;see langword="XmlNodeType.Element" /&gt;</ph>) that ends with <bpt id="p1">&lt;c&gt;</bpt><ph id="ph4">/</ph><ph id="ph5">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept>; otherwise, <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 현재 노드가 요소 이면 (<ph id="ph2">&lt;see cref="P:System.Xml.XmlTextReader.NodeType" /&gt;</ph> equals <ph id="ph3">&lt;see langword="XmlNodeType.Element" /&gt;</ph>)로 끝나는 <bpt id="p1">&lt;c&gt;</bpt> <ph id="ph4">/</ph> <ph id="ph5">&amp;gt;</ph> <ept id="p1">&lt;/c&gt;</ept>, 그렇지 않으면 <ph id="ph6">&lt;see langword="false" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source>This property enables you to determine the difference between the following:</source>
          <target state="translated">이 속성을 사용하여 다음 간의 차이를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source><ph id="ph1">`&lt;item num="123"/&gt;`</ph> (<ph id="ph2">`IsEmptyElement`</ph> is <ph id="ph3">`true`</ph>).</source>
          <target state="translated"><ph id="ph1">`&lt;item num="123"/&gt;`</ph> (<ph id="ph2">`IsEmptyElement`</ph> 은 <ph id="ph3">`true`</ph>).</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source><ph id="ph1">`&lt;item num="123"&gt;`</ph> (<ph id="ph2">`IsEmptyElement`</ph> is <ph id="ph3">`false`</ph>, although element content is empty).</source>
          <target state="translated"><ph id="ph1">`&lt;item num="123"&gt;`</ph> (<ph id="ph2">`IsEmptyElement`</ph> 은 <ph id="ph3">`false`</ph>요소 내용이 비어 있지만).</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source>A corresponding <ph id="ph1">`EndElement`</ph> node is not generated for empty elements.</source>
          <target state="translated">해당 <ph id="ph1">`EndElement`</ph> 빈 요소에 대 한 노드는 생성 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source><ph id="ph1">`IsEmptyElement`</ph> simply reports whether or not the element in the source document had an end element tag.</source>
          <target state="translated"><ph id="ph1">`IsEmptyElement`</ph> 원본 문서의 요소에 끝 요소 태그가 여부를 보고 합니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source>The following example displays the text content of each element.</source>
          <target state="translated">다음 예제에서는 각 요소의 텍스트 콘텐츠를 표시합니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.IsEmptyElement">
          <source>The example uses the file, <ph id="ph1">`elems.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`elems.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.LineNumber">
          <source>Gets the current line number.</source>
          <target state="translated">현재 줄 번호를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LineNumber">
          <source>The current line number.</source>
          <target state="translated">현재 줄 번호입니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LineNumber">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LineNumber">
          <source>This property is most commonly used for error reporting, but can be called at any time.</source>
          <target state="translated">이 속성은 오류 보고를 위해 가장 많이 사용 되지만 언제 든 지 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LineNumber">
          <source>The starting value for this property is <ph id="ph1">`1`</ph>.</source>
          <target state="translated">시작 값이 속성은 <ph id="ph1">`1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LineNumber">
          <source>Combined with <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.LinePosition%2A&gt;</ph>, a value of <ph id="ph2">`1,1`</ph> indicates the start of the document.</source>
          <target state="translated">와 결합 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.LinePosition%2A&gt;</ph>, 값이 <ph id="ph2">`1,1`</ph> 문서의 시작을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LineNumber">
          <source>The following example displays each node including its depth, line number, and line position.</source>
          <target state="translated">다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.LinePosition">
          <source>Gets the current line position.</source>
          <target state="translated">현재 줄 위치를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LinePosition">
          <source>The current line position.</source>
          <target state="translated">현재 줄 위치입니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LinePosition">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LinePosition">
          <source>This property is most commonly used for error reporting, but can be called at any time.</source>
          <target state="translated">이 속성은 오류 보고를 위해 가장 많이 사용 되지만 언제 든 지 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LinePosition">
          <source>The property's starting value is <ph id="ph1">`1`</ph>.</source>
          <target state="translated">속성의 시작 값은 <ph id="ph1">`1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LinePosition">
          <source>The position indicated is the first character of text in the markup.</source>
          <target state="translated">지정 된 위치에는 텍스트 태그에서의 첫 번째 문자입니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LinePosition">
          <source>On the first line of the preceding XML text, a <ph id="ph1">`LinePosition`</ph> of <ph id="ph2">`2`</ph> corresponds to the character <ph id="ph3">`r`</ph>; on the second line, a <ph id="ph4">`LinePosition`</ph> of <ph id="ph5">`5`</ph> corresponds to the character <ph id="ph6">`t`</ph>; and on the third line, a <ph id="ph7">`LinePosition`</ph> of <ph id="ph8">`3`</ph> corresponds to the character <ph id="ph9">`r`</ph>.</source>
          <target state="translated">위 XML 텍스트의 첫 번째 줄에는 <ph id="ph1">`LinePosition`</ph> 의 <ph id="ph2">`2`</ph> 문자에 해당 <ph id="ph3">`r`</ph>; 두 번째 줄에는 <ph id="ph4">`LinePosition`</ph> 의 <ph id="ph5">`5`</ph> 문자에 해당 <ph id="ph6">`t`</ph>; 및 세 번째 줄에서 한 <ph id="ph7">`LinePosition`</ph> 의 <ph id="ph8">`3`</ph> 문자에 해당 <ph id="ph9">`r`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LinePosition">
          <source>Combined with <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.LineNumber%2A&gt;</ph>, a value of <ph id="ph2">`1,1`</ph> indicates the start of the document.</source>
          <target state="translated">와 결합 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.LineNumber%2A&gt;</ph>, 값이 <ph id="ph2">`1,1`</ph> 문서의 시작을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LinePosition">
          <source>The following example displays each node including its depth, line number, and line position.</source>
          <target state="translated">다음 예에서는 수준, 줄 번호 및 줄 위치를 포함 하 여 각 노드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.LocalName">
          <source>Gets the local name of the current node.</source>
          <target state="translated">현재 노드의 로컬 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LocalName">
          <source>The name of the current node with the prefix removed.</source>
          <target state="translated">접두사를 제거한 현재 노드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LocalName">
          <source>For example, <ph id="ph1">&lt;see langword="LocalName" /&gt;</ph> is <ph id="ph2">&lt;see langword="book" /&gt;</ph> for the element <bpt id="p1">&lt;c&gt;</bpt><ph id="ph3">&amp;lt;</ph>bk:book<ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;see langword="LocalName" /&gt;</ph> 은 <ph id="ph2">&lt;see langword="book" /&gt;</ph> 요소에 대해 <bpt id="p1">&lt;c&gt;</bpt> <ph id="ph3">&amp;lt;</ph>예<ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LocalName">
          <source>For node types that do not have a name (like <ph id="ph1">&lt;see langword="Text" /&gt;</ph>, <ph id="ph2">&lt;see langword="Comment" /&gt;</ph>, and so on), this property returns <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated">이름이 없는 노드 형식(예: <ph id="ph1">&lt;see langword="Text" /&gt;</ph>, <ph id="ph2">&lt;see langword="Comment" /&gt;</ph> 등)의 경우 이 속성은 <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LocalName">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LocalName">
          <source>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</source>
          <target state="translated">다음 예제에서는 각 노드의 로컬 이름을 표시 하 고, 있는 경우, 접두사 및 네임 스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.LocalName">
          <source>The example uses the file, <ph id="ph1">`book2.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`book2.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
          <source>The prefix whose namespace URI you want to resolve.</source>
          <target state="translated">확인할 네임스페이스 URI의 접두사입니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
          <source>To match the default namespace, pass an empty string.</source>
          <target state="translated">기본 네임스페이스와 일치시키려면 빈 문자열을 전달합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
          <source>This string does not have to be atomized.</source>
          <target state="translated">이 문자열은 원자화할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
          <source>Resolves a namespace prefix in the current element's scope.</source>
          <target state="translated">현재 요소의 범위에서 네임스페이스 접두사를 확인합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
          <source>The namespace URI to which the prefix maps or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no matching prefix is found.</source>
          <target state="translated">접두사가 매핑되는 네임스페이스 URI이거나 일치하는 접두사가 없는 경우 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
          <source>In the following XML, if the reader is positioned on the <ph id="ph1">`href`</ph> attribute, the prefix <ph id="ph2">`a`</ph> is resolved by calling <ph id="ph3">`reader.LookupNamespace("a")`</ph>.</source>
          <target state="translated">다음 xml 판독기가 배치 되 면는 <ph id="ph1">`href`</ph> 특성을 접두사 <ph id="ph2">`a`</ph> 호출 하 여 확인 <ph id="ph3">`reader.LookupNamespace("a")`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
          <source>The returned string is <ph id="ph1">`urn:456`</ph>.</source>
          <target state="translated">반환 된 문자열은 <ph id="ph1">`urn:456`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.Namespaces" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the <ph id="ph3">&lt;paramref name="prefix" /&gt;</ph> value is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.Namespaces" /&gt;</ph> 속성이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>로 설정되어 있고 <ph id="ph3">&lt;paramref name="prefix" /&gt;</ph> 값이 <ph id="ph4">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextReader">
          <source>Moves to the specified attribute.</source>
          <target state="translated">지정된 특성으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextReader">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
          <source>The index of the attribute.</source>
          <target state="translated">특성의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
          <source>Moves to the attribute with the specified index.</source>
          <target state="translated">지정된 인덱스가 있는 특성으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
          <source>The following example displays all attributes on the current node.</source>
          <target state="translated">다음 예에서는 현재 노드의 모든 특성을 표시합니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="i" /&gt;</ph> parameter is less than 0 or greater than or equal to <ph id="ph2">&lt;see cref="P:System.Xml.XmlReader.AttributeCount" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="i" /&gt;</ph> 매개 변수가 0보다 작거나 <ph id="ph2">&lt;see cref="P:System.Xml.XmlReader.AttributeCount" /&gt;</ph>보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
          <source>The qualified name of the attribute.</source>
          <target state="translated">특성의 정규화된 이름입니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
          <source>Moves to the attribute with the specified name.</source>
          <target state="translated">지정된 이름이 있는 특성으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the attribute is found; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">특성이 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the reader's position does not change.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph>이면, 판독기의 위치는 변경되지 않습니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
          <source>After calling <ph id="ph1">`MoveToAttribute`</ph>, the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.NamespaceURI%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Prefix%2A&gt;</ph> properties reflects the properties of that attribute.</source>
          <target state="translated">호출한 후 <ph id="ph1">`MoveToAttribute`</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.NamespaceURI%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Prefix%2A&gt;</ph> 속성 해당 특성의 속성을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
          <source>The local name of the attribute.</source>
          <target state="translated">특성의 로컬 이름입니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
          <source>The namespace URI of the attribute.</source>
          <target state="translated">특성의 네임스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
          <source>Moves to the attribute with the specified local name and namespace URI.</source>
          <target state="translated">지정된 로컬 이름과 네임스페이스 URI가 있는 특성으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the attribute is found; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">특성이 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
          <source>If <ph id="ph1">&lt;see langword="false" /&gt;</ph>, the reader's position does not change.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph>이면, 판독기의 위치는 변경되지 않습니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
          <source>After calling <ph id="ph1">`MoveToAttribute`</ph>, the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.NamespaceURI%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Prefix%2A&gt;</ph> properties reflects the properties of that attribute.</source>
          <target state="translated">호출한 후 <ph id="ph1">`MoveToAttribute`</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.NamespaceURI%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Prefix%2A&gt;</ph> 속성 해당 특성의 속성을 반영 합니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToElement">
          <source>Moves to the element that contains the current attribute node.</source>
          <target state="translated">현재 특성 노드가 포함된 요소로 이동합니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToElement">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the reader is not positioned on an attribute (the position of the reader does not change).</source>
          <target state="translated">판독기가 특성에 있으면(특성이 있는 요소로 판독기가 이동하면) <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 판독기가 특성에 없으면(판독기의 위치가 바뀌지 않으면) <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToElement">
          <source>Use this method to return to an element after navigating through its attributes.</source>
          <target state="translated">이 메서드를 사용 하 여 특성을 탐색 한 후 요소 돌아갑니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToElement">
          <source>This method moves the reader to one of the following node types: <ph id="ph1">`Element`</ph>, <ph id="ph2">`DocumentType`</ph>, or <ph id="ph3">`XmlDeclaration`</ph>.</source>
          <target state="translated">이 메서드는 다음과 같은 노드 유형 중 하나에 판독기를 이동: <ph id="ph1">`Element`</ph>, <ph id="ph2">`DocumentType`</ph>, 또는 <ph id="ph3">`XmlDeclaration`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToElement">
          <source>The following example displays all attributes on the current node.</source>
          <target state="translated">다음 예에서는 현재 노드의 모든 특성을 표시합니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
          <source>Moves to the first attribute.</source>
          <target state="translated">첫 번째 특성으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if an attribute exists (the reader moves to the first attribute); otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph> (the position of the reader does not change).</source>
          <target state="translated">특성이 있으면(판독기가 첫 번째 특성으로 이동하면) <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면(판독기의 위치가 바뀌지 않으면) <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
          <source>The following example gets the value of the first attribute of the root node.</source>
          <target state="translated">다음 예제에서는 루트 노드의 첫 번째 특성의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
          <source>The example uses the file, <ph id="ph1">`attrs.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`attrs.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToNextAttribute">
          <source>Moves to the next attribute.</source>
          <target state="translated">다음 특성으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.MoveToNextAttribute">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if there is a next attribute; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if there are no more attributes.</source>
          <target state="translated">다음 특성이 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 더 이상 특성이 없으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToNextAttribute">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToNextAttribute">
          <source>If the current node is an element node, this method is equivalent to <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A&gt;</ph>.</source>
          <target state="translated">현재 노드가 요소 노드 이면이 메서드는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToNextAttribute">
          <source>If <ph id="ph1">`MoveToNextAttribute`</ph> returns <ph id="ph2">`true`</ph>, the reader moves to the next attribute; otherwise, the position of the reader does not change.</source>
          <target state="translated">경우 <ph id="ph1">`MoveToNextAttribute`</ph> 반환 <ph id="ph2">`true`</ph>, 판독기가 다음 특성으로 이동, 그렇지 않으면 판독기의 위치가 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.MoveToNextAttribute">
          <source>The following example displays all attributes on the current node.</source>
          <target state="translated">다음 예에서는 현재 노드의 모든 특성을 표시합니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.Name">
          <source>Gets the qualified name of the current node.</source>
          <target state="translated">현재 노드의 정규화된 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source>The qualified name of the current node.</source>
          <target state="translated">현재 노드의 정규화된 이름입니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source>For example, <ph id="ph1">&lt;see langword="Name" /&gt;</ph> is <ph id="ph2">&lt;see langword="bk:book" /&gt;</ph> for the element <bpt id="p1">&lt;c&gt;</bpt><ph id="ph3">&amp;lt;</ph>bk:book<ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;see langword="Name" /&gt;</ph> 은 <ph id="ph2">&lt;see langword="bk:book" /&gt;</ph> 요소에 대해 <bpt id="p1">&lt;c&gt;</bpt> <ph id="ph3">&amp;lt;</ph>예<ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source>The name returned is dependent on the <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.NodeType" /&gt;</ph> of the node.</source>
          <target state="translated">반환되는 이름은 다음과 같이 노드의 <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.NodeType" /&gt;</ph>에 따라 달라집니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source>The following node types return the listed values.</source>
          <target state="translated">다음 노드 형식은 나열된 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source>All other node types return an empty string.</source>
          <target state="translated">기타 모든 노드 형식은 빈 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Node Type</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 노드 형식</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Name</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이름</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Attribute" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The name of the attribute.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Attribute" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 특성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="DocumentType" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The document type name.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="DocumentType" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 문서 종류 이름입니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Element" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The tag name.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Element" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 태그 이름입니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="EntityReference" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The name of the entity referenced.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="EntityReference" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 참조 엔터티의 이름입니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="ProcessingInstruction" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The target of the processing instruction.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="ProcessingInstruction" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 처리 명령의 대상입니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="XmlDeclaration" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The literal string <ph id="ph6">&lt;see langword="xml" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="XmlDeclaration" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 리터럴 문자열 <ph id="ph6">&lt;see langword="xml" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source>The following example reads an XML file and displays each of the nodes.</source>
          <target state="translated">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Name">
          <source>The sample uses the file <ph id="ph1">`items.xml`</ph>.</source>
          <target state="translated">파일을 사용 하는 샘플 <ph id="ph1">`items.xml`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.Namespaces">
          <source>Gets or sets a value indicating whether to do namespace support.</source>
          <target state="translated">네임스페이스 지원 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Namespaces">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to do namespace support; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">네임스페이스를 지원하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Namespaces">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Namespaces">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Namespaces">
          <source>This property determines whether the reader supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</source>
          <target state="translated">이 속성은 판독기 www.w3.org/TR/REC-xml-names에 있는 XML 권장 사항에 W3C 네임 스페이스를 지원 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Namespaces">
          <source>The <ph id="ph1">`Namespaces`</ph> property cannot be set after a read operation has occurred.</source>
          <target state="translated"><ph id="ph1">`Namespaces`</ph> 읽기 작업이 발생 한 후 속성을 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.Namespaces">
          <source>Setting this property after a read operation has occurred (<ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.ReadState" /&gt;</ph> is not <ph id="ph2">&lt;see langword="ReadState.Initial" /&gt;</ph>).</source>
          <target state="translated">읽기 작업이 발생한 후 이 속성을 설정하는 경우(<ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.ReadState" /&gt;</ph>가 <ph id="ph2">&lt;see langword="ReadState.Initial" /&gt;</ph>이 아닌 경우)</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.NamespaceURI">
          <source>Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</source>
          <target state="translated">W3C 네임스페이스 사양에서 정의된 것처럼 판독기가 있는 노드의 네임스페이스 URI를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NamespaceURI">
          <source>The namespace URI of the current node; otherwise an empty string.</source>
          <target state="translated">현재 노드의 네임스페이스 URI이거나 빈 문자열입니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NamespaceURI">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NamespaceURI">
          <source>This property is relevant to <ph id="ph1">`Element`</ph> and <ph id="ph2">`Attribute`</ph> nodes only.</source>
          <target state="translated">이 속성은 관련이 <ph id="ph1">`Element`</ph> 및 <ph id="ph2">`Attribute`</ph> 노드만 해당 합니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NamespaceURI">
          <source>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</source>
          <target state="translated">다음 예제에서는 각 노드의 로컬 이름을 표시 하 고, 있는 경우, 접두사 및 네임 스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NamespaceURI">
          <source>The example uses the file, <ph id="ph1">`book2.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`book2.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.NameTable">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph> associated with this implementation.</source>
          <target state="translated">이 구현과 관련된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlNameTable" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NameTable">
          <source>The <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph> enabling you to get the atomized version of a string within the node.</source>
          <target state="translated">노드 내에 있는 문자열의 원자화된 버전을 가져올 수 있도록 하는 <ph id="ph1">&lt;see langword="XmlNameTable" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NameTable">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NameTable">
          <source>All node and attribute names returned from <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> are atomized using the <ph id="ph2">`NameTable`</ph>.</source>
          <target state="translated">반환 된 모든 노드 및 특성 이름은 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 사용해 원자화는 <ph id="ph2">`NameTable`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NameTable">
          <source>When the same name is returned multiple times (for example, <ph id="ph1">`Customer`</ph>), then the same <ph id="ph2">`String`</ph> object is returned for that name.</source>
          <target state="translated">이름이 같은 여러 번에 반환 될 때 (예를 들어 <ph id="ph1">`Customer`</ph>), 다음 동일한 <ph id="ph2">`String`</ph> 해당 이름에 대 한 개체를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NameTable">
          <source>This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</source>
          <target state="translated">이렇게 하면 개체 비용이 많이 드는 문자열 비교 대신이 문자열에 대해 비교를 수행 하는 효율적인 코드를 작성할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.NodeType">
          <source>Gets the type of the current node.</source>
          <target state="translated">현재 노드의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NodeType">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph> values representing the type of the current node.</source>
          <target state="translated">현재 노드의 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Xml.XmlNodeType" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NodeType">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NodeType">
          <source>This property never returns the following <ph id="ph1">`XmlNodeType`</ph> types: <ph id="ph2">`Document`</ph>, <ph id="ph3">`DocumentFragment`</ph>, <ph id="ph4">`Entity`</ph>, <ph id="ph5">`EndEntity`</ph>, or <ph id="ph6">`Notation`</ph>.</source>
          <target state="translated">이 속성이 반환 하지 않습니다. 다음 <ph id="ph1">`XmlNodeType`</ph> 형식: <ph id="ph2">`Document`</ph>, <ph id="ph3">`DocumentFragment`</ph>, <ph id="ph4">`Entity`</ph>, <ph id="ph5">`EndEntity`</ph>, 또는 <ph id="ph6">`Notation`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NodeType">
          <source>The following example reads an XML file and displays each of the nodes.</source>
          <target state="translated">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.NodeType">
          <source>The sample uses the file <ph id="ph1">`items.xml`</ph>.</source>
          <target state="translated">파일을 사용 하는 샘플 <ph id="ph1">`items.xml`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>Gets or sets a value indicating whether to normalize white space and attribute values.</source>
          <target state="translated">공백과 특성 값을 정규화할지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to normalize; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">정규화하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>This property can be changed at any time and takes effect on the next read operation.</source>
          <target state="translated">이 속성은 언제 든 지 변경할 수 있으며 다음 읽기 작업에 영향을 미칩니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> is used to construct an <ph id="ph2">&lt;xref:System.Xml.XmlValidatingReader&gt;</ph>, to normalize attribute values, <ph id="ph3">`Normalization`</ph> must be set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 생성 하는 데 사용 되는 <ph id="ph2">&lt;xref:System.Xml.XmlValidatingReader&gt;</ph>, 특성 값을 정규화 하 <ph id="ph3">`Normalization`</ph> 로 설정 해야 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>If <ph id="ph1">`Normalization`</ph> is set to <ph id="ph2">`false`</ph>, this also disables character range checking for numeric entities.</source>
          <target state="translated">경우 <ph id="ph1">`Normalization`</ph> 로 설정 된 <ph id="ph2">`false`</ph>, 문자 범위 숫자 엔터티에 대 한 검사 비활성화 합니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>As a result, character entities, such as <ph id="ph1">`&amp;#0;`</ph>, are allowed.</source>
          <target state="translated">따라서 같은 문자 엔터티를 <ph id="ph1">`&amp;#0;`</ph>, 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>The following describes attribute value normalization:</source>
          <target state="translated">다음은 특성 값 정규화에 대 한 설명입니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>For a character reference, append the referenced character to the attribute value.</source>
          <target state="translated">문자 참조의 경우 참조된 문자를 특성 값에 추가합니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>For an entity reference, recursively process the replacement text of the entity.</source>
          <target state="translated">엔터티 참조 경우 엔터티의 대체 텍스트를 재귀적으로 처리합니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>For a white space character (#x20, #xD, #xA, #x9), append #x20 to the normalized value.</source>
          <target state="translated">공백 문자 (#x x20, #xD, #xA, #x x9)를 #x x20 표준화 된 값에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>(Only a single #x20 is appended for a "#xD#xA" sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity.)</source>
          <target state="translated">(구문 분석 된 외부 엔터티로의 일부 이거나 내부 구문 분석 된 엔터티의 엔터티 리터럴 값인 "#xD #xA" 시퀀스에 대 한 단일 #x x20만 추가 됩니다.)</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>Process other characters by appending them to the normalized value.</source>
          <target state="translated">표준화된 값에 기타 문자를 추가하여 처리합니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>If the declared value is not CDATA, discard any leading and trailing space (#x20) characters and replace sequences of space (#x20) characters with a single space (#x20) character.</source>
          <target state="translated">선언 된 값 CDATA 없으면 선행 및 후행 공백 (#x 20) 문자를 무시 하 고 공백 (#x 20) 문자의 시퀀스를 단일 공백 (#x x20) 문자로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>The <ph id="ph1">`XmlTextReader`</ph> only performs attribute or CDATA normalization.</source>
          <target state="translated"><ph id="ph1">`XmlTextReader`</ph> 만 특성 또는 CDATA 정규화를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>It does not do DTD-specific normalization unless wrapped within an <ph id="ph1">`XmlValidatingReader`</ph>.</source>
          <target state="translated">내에 포함될지 경우가 아니면 DTD 관련 정규화를 수행 하지는 <ph id="ph1">`XmlValidatingReader`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>Refer to the W3C XML 1.0 recommendation for further discussion on normalization.</source>
          <target state="translated">W3C XML 1.0 권장 사항에 대 한 정규화에 자세한 내용은를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>The following example shows reader behavior with normalization turned on and then off.</source>
          <target state="translated">다음 예제에서는 정규화를 실행 된 판독기 동작을 보여 줍니다. 한 다음 해제 합니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.Normalization">
          <source>Setting this property when the reader is closed (<ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.ReadState" /&gt;</ph> is <ph id="ph2">&lt;see langword="ReadState.Closed" /&gt;</ph>).</source>
          <target state="translated">판독기를 닫은 상태에서 이 속성을 설정하는 경우(<ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.ReadState" /&gt;</ph>가 <ph id="ph2">&lt;see langword="ReadState.Closed" /&gt;</ph>인 경우)</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.Prefix">
          <source>Gets the namespace prefix associated with the current node.</source>
          <target state="translated">현재 노드와 관련된 네임스페이스 접두사를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Prefix">
          <source>The namespace prefix associated with the current node.</source>
          <target state="translated">현재 노드와 관련된 네임스페이스 접두사입니다.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Prefix">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Prefix">
          <source>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</source>
          <target state="translated">다음 예제에서는 각 노드의 로컬 이름을 표시 하 고, 있는 경우, 접두사 및 네임 스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Prefix">
          <source>The example uses the file, <ph id="ph1">`book2.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`book2.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>Gets or sets a value indicating whether to allow DTD processing.</source>
          <target state="translated">DTD 처리를 허용할지를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>This property is obsolete.</source>
          <target state="translated">이 속성은 사용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>Use <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.DtdProcessing" /&gt;</ph> instead.</source>
          <target state="translated">대신 <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.DtdProcessing" /&gt;</ph>를 사용하세요.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to disallow DTD processing; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">DTD 처리를 허용하지 않으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>DTD processing is enabled by default for backwards compatibility.</source>
          <target state="translated">DTD 처리는 기본적으로 사용할 수에 대 한 이전 버전과 호환성.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>However, unless your application requires DTD processing, you should disable this setting.</source>
          <target state="translated">그러나 응용 프로그램에서 DTD 처리를 필요한 경우가 아니면이 설정을 비활성화 해야 합니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>Disabling DTD processing can be useful in preventing certain denial of service attacks.</source>
          <target state="translated">DTD 처리를 비활성화하면 특정 서비스 거부(Denial of service) 공격을 차단하는 데 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>If set to <ph id="ph1">`true`</ph>, the reader throws an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> when any DTD content is encountered.</source>
          <target state="translated">경우로 설정 <ph id="ph1">`true`</ph>, 판독기에서 throw 한 <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> DTD 내용이 발견 되는 경우.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>If you have DTD processing enabled, you need to be aware of including DTDs from untrusted sources and possible denial of service attacks.</source>
          <target state="translated">DTD 처리를 설정한 경우 가능한 서비스 거부 공격 및 신뢰할 수 없는 소스에서 Dtd를 포함 하 여 주의 해야 할 필요 합니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> to restrict the resources that the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> can access.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Xml.XmlSecureResolver&gt;</ph> 리소스를 제한할 하는 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>You can also design your application so that the XML processing is memory and time constrained.</source>
          <target state="translated">또한 응용 프로그램을 직접 디자인하여 XML 처리에 필요한 메모리 및 시간을 제한할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ProhibitDtd">
          <source>For example, configure time-out limits in your ASP.NET application</source>
          <target state="translated">예를 들어 ASP.NET 응용 프로그램에서 시간 제한을 구성합니다</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.QuoteChar">
          <source>Gets the quotation mark character used to enclose the value of an attribute node.</source>
          <target state="translated">특성 노드의 값을 묶을 때 사용하는 인용 부호 문자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.QuoteChar">
          <source>The quotation mark character (" or ') used to enclose the value of an attribute node.</source>
          <target state="translated">특성 노드의 값을 묶을 때 사용하는 인용 부호 문자입니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.QuoteChar">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.QuoteChar">
          <source>This property applies only to an attribute node.</source>
          <target state="translated">특성 노드의 경우에이 속성이 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.Read">
          <source>Reads the next node from the stream.</source>
          <target state="translated">스트림에서 다음 노드를 읽습니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.Read">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the next node was read successfully; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if there are no more nodes to read.</source>
          <target state="translated">다음 노드를 읽었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 더 이상 읽을 노드가 없으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Read">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Read">
          <source>When a reader is first created and initialized, there is no information available.</source>
          <target state="translated">판독기가 먼저 초기화를 만들고 이면 정보가 없습니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Read">
          <source>You must call <ph id="ph1">`Read`</ph> to read the first node.</source>
          <target state="translated">호출 해야 <ph id="ph1">`Read`</ph> 첫 번째 노드를 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Read">
          <source>This method requires at least four bytes from the data stream in order to begin parsing.</source>
          <target state="translated">이 메서드는 구문 분석을 시작 하기 위해 데이터 스트림에서 4 바이트 이상 필요 합니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Read">
          <source>If fewer than four bytes are returned and there is no more data in the stream, the method will fail.</source>
          <target state="translated">4 바이트 미만 반환 되 고 스트림의 데이터가 더 이상 메서드가 실패 합니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Read">
          <source>If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</source>
          <target state="translated">스트림의 데이터가 더 경우 메서드는 네 번째 바이트가 수신 될 때까지 구문 분석 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Read">
          <source>The following example reads an XML file and displays each node.</source>
          <target state="translated">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Read">
          <source>The sample uses the file <ph id="ph1">`items.xml`</ph>.</source>
          <target state="translated">파일을 사용 하는 샘플 <ph id="ph1">`items.xml`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.Read">
          <source>An error occurred while parsing the XML.</source>
          <target state="translated">XML을 구문 분석하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadAttributeValue">
          <source>Parses the attribute value into one or more <ph id="ph1">&lt;see langword="Text" /&gt;</ph>, <ph id="ph2">&lt;see langword="EntityReference" /&gt;</ph>, or <ph id="ph3">&lt;see langword="EndEntity" /&gt;</ph> nodes.</source>
          <target state="translated">특성 값을 하나 이상의 <ph id="ph1">&lt;see langword="Text" /&gt;</ph>, <ph id="ph2">&lt;see langword="EntityReference" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="EndEntity" /&gt;</ph> 노드로 구문 분석합니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadAttributeValue">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if there are nodes to return.</source>
          <target state="translated">반환할 노드가 있는 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadAttributeValue">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</source>
          <target state="translated">처음 호출할 때 판독기가 특성 노드에 있거나 모든 특성 값을 읽은 경우 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadAttributeValue">
          <source>An empty attribute, such as, <bpt id="p1">&lt;c&gt;</bpt>misc=""<ept id="p1">&lt;/c&gt;</ept>, returns <ph id="ph1">&lt;see langword="true" /&gt;</ph> with a single node with a value of <ph id="ph2">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>misc=""<ept id="p1">&lt;/c&gt;</ept>와 같은 빈 특성은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 반환하며 이것은 단일 노드가 <ph id="ph2">&lt;see langword="String.Empty" /&gt;</ph>의 값을 갖는 것을 의미합니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadAttributeValue">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadAttributeValue">
          <source>Use this method after calling <ph id="ph1">`MoveToAttribute`</ph> to read through the text or entity reference nodes that make up the attribute value.</source>
          <target state="translated">이 메서드를 사용 하 여 호출한 후 <ph id="ph1">`MoveToAttribute`</ph> 특성 값을 구성 하는 텍스트 또는 엔터티 참조 노드를 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadAttributeValue">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.Depth%2A&gt;</ph> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlReader.Depth%2A&gt;</ph> 특성 값 노드 1을 더한 특성 노드의 깊이 이며 수를 늘리면 내부 / 외부로 일반 엔터티 참조를 단계별로 실행할 때 1 씩 감소 시킵니다.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadAttributeValue">
          <source>The following example reads an attribute with text and entity nodes.</source>
          <target state="translated">다음 예제에서는 텍스트와 엔터티 노드를 사용 하 여 특성을 읽습니다.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The array of characters that serves as the buffer to which the text contents are written.</source>
          <target state="translated">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based index into the array specifying where the method can begin to write to the buffer.</source>
          <target state="translated">메서드가 버퍼에 쓰기를 시작할 수 있는 위치를 지정하는 배열의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write into the buffer.</source>
          <target state="translated">버퍼에 쓸 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Decodes Base64 and returns the decoded binary bytes.</source>
          <target state="translated">Base64를 디코딩하고 디코딩된 이진 바이트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes written to the buffer.</source>
          <target state="translated">버퍼에 쓴 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Like <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadChars%2A&gt;</ph>, this method can be called successively to read large streams of embedded text.</source>
          <target state="translated">마찬가지로 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadChars%2A&gt;</ph>, 포함 된 텍스트의 큰 스트림을 읽도록이 메서드를 연속적으로 호출 합니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>It decodes Base64 content and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</source>
          <target state="translated">Base64 콘텐츠 디코딩하고 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 Base64 인코딩된 GIF 이미지) 버퍼에 있습니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>See RFC 1521.</source>
          <target state="translated">1521 RFC를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>(You can obtain RFCs from the Request for Comments Web site at <ph id="ph1">http://www.rfc-editor.org)</ph></source>
          <target state="translated">(에서 얻을 수 있습니다 Rfc를 의견 웹 사이트에 대 한 요청 <ph id="ph1">http://www.rfc-editor.org)</ph></target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The following example reads a file containing Base64 and BinHex data.</source>
          <target state="translated">다음 예제에서는 Base64 및 BinHex 데이터가 들어 있는 파일을 읽습니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The sample uses the file <ph id="ph1">`binary.xml`</ph></source>
          <target state="translated">파일을 사용 하는 샘플 <ph id="ph1">`binary.xml`</ph></target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The Base64 sequence is not valid.</source>
          <target state="translated">Base64 시퀀스가 잘못된 경우</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The value of <ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0, or <ph id="ph3">&lt;paramref name="len" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0, or <ph id="ph5">&lt;paramref name="len" /&gt;</ph> <ph id="ph6">&amp;gt;</ph> <ph id="ph7">&lt;paramref name="array" /&gt;</ph>.Length- <ph id="ph8">&lt;paramref name="offset" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0, <ph id="ph3">&lt;paramref name="len" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0, <ph id="ph5">&lt;paramref name="len" /&gt;</ph> <ph id="ph6">&amp;gt;</ph> <ph id="ph7">&lt;paramref name="array" /&gt;</ph>.Length- <ph id="ph8">&lt;paramref name="offset" /&gt;</ph>인 경우.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array that serves as the buffer to which the decoded binary bytes are written.</source>
          <target state="translated">디코딩된 이진 바이트를 쓸 버퍼 역할을 하는 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based index into the array specifying where the method can begin to write to the buffer.</source>
          <target state="translated">메서드가 버퍼에 쓰기를 시작할 수 있는 위치를 지정하는 배열의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write into the buffer.</source>
          <target state="translated">버퍼에 쓸 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Decodes <ph id="ph1">&lt;see langword="BinHex" /&gt;</ph> and returns the decoded binary bytes.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="BinHex" /&gt;</ph>를 디코딩하고 디코딩된 이진 바이트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes written to your buffer.</source>
          <target state="translated">버퍼에 쓴 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Like <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadChars%2A&gt;</ph>, this method can be called successively to read large streams of embedded text.</source>
          <target state="translated">마찬가지로 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadChars%2A&gt;</ph>, 포함 된 텍스트의 큰 스트림을 읽도록이 메서드를 연속적으로 호출 합니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>It decodes <ph id="ph1">`BinHex`</ph> content and returns the decoded binary bytes (for example, an inline <ph id="ph2">`BinHex`</ph> encoded GIF image) into the buffer.</source>
          <target state="translated">디코딩합니다 것 <ph id="ph1">`BinHex`</ph> 디코딩된 이진 바이트를 반환 하 고 콘텐츠 (예를 들어, 인라인 <ph id="ph2">`BinHex`</ph> 인코딩된 GIF 이미지) 버퍼에 있습니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The following example reads a file containing <ph id="ph1">`Base64`</ph> and <ph id="ph2">`BinHex`</ph> data.</source>
          <target state="translated">다음 예제에서는 포함 된 파일을 읽고 <ph id="ph1">`Base64`</ph> 및 <ph id="ph2">`BinHex`</ph> 데이터입니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The sample uses the file <ph id="ph1">`binary.xml`</ph></source>
          <target state="translated">파일을 사용 하는 샘플 <ph id="ph1">`binary.xml`</ph></target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see langword="BinHex" /&gt;</ph> sequence is not valid.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="BinHex" /&gt;</ph> 시퀀스가 잘못된 경우</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The value of <ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0, or <ph id="ph3">&lt;paramref name="len" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0, or <ph id="ph5">&lt;paramref name="len" /&gt;</ph> <ph id="ph6">&amp;gt;</ph> <ph id="ph7">&lt;paramref name="array" /&gt;</ph>.Length- <ph id="ph8">&lt;paramref name="offset" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> <ph id="ph2">&amp;lt;</ph> 0, <ph id="ph3">&lt;paramref name="len" /&gt;</ph> <ph id="ph4">&amp;lt;</ph> 0, <ph id="ph5">&lt;paramref name="len" /&gt;</ph> <ph id="ph6">&amp;gt;</ph> <ph id="ph7">&lt;paramref name="array" /&gt;</ph>.Length- <ph id="ph8">&lt;paramref name="offset" /&gt;</ph>인 경우.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>The array of characters that serves as the buffer to which the text contents are written.</source>
          <target state="translated">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>The position within <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> where the method can begin writing text contents.</source>
          <target state="translated">메서드가 텍스트 콘텐츠 쓰기를 시작할 수 있는 <bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept> 내 위치입니다.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write into <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>버퍼<ept id="p1">&lt;/c&gt;</ept>로 쓸 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>Reads the text contents of an element into a character buffer.</source>
          <target state="translated">요소의 텍스트 콘텐츠를 문자 버퍼로 읽습니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>This method is designed to read large streams of embedded text by calling it successively.</source>
          <target state="translated">이 메서드는 뒤이어 호출하면 포함된 텍스트의 큰 스트림을 읽도록 디자인되었습니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters read.</source>
          <target state="translated">읽을 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>This can be <ph id="ph1">&lt;see langword="0" /&gt;</ph> if the reader is not positioned on an element or if there is no more text content to return in the current context.</source>
          <target state="translated">판독기가 요소에 배치되지 않았거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 반환 값은 <ph id="ph1">&lt;see langword="0" /&gt;</ph>이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>This is the most efficient way to process very large streams of text embedded in an XML document.</source>
          <target state="translated">이 XML 문서에 포함 된 텍스트의 매우 큰 스트림을 처리할 수는 가장 효율적인 방법입니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>Rather than allocating large string objects, <ph id="ph1">`ReadChars`</ph> returns text content a buffer at a time.</source>
          <target state="translated">큰 문자열 개체를 할당 하는 대신 <ph id="ph1">`ReadChars`</ph> 텍스트 콘텐츠를 한 번에 버퍼를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>This method is designed to work only on element nodes.</source>
          <target state="translated">이 메서드는 요소 노드 에서만 작동 하도록 디자인 되었습니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>Other node types cause <ph id="ph1">`ReadChars`</ph> to return <ph id="ph2">`0`</ph>.</source>
          <target state="translated">다른 노드 형식을 사용 하면 <ph id="ph1">`ReadChars`</ph> 반환할 <ph id="ph2">`0`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>In the following XML, if the reader is positioned on the start tag, <ph id="ph1">`ReadChars`</ph> returns <ph id="ph2">`test`</ph> and positions the reader after the end tag.</source>
          <target state="translated">시작 태그에 판독기가 배치 하는 경우 다음과 같은 xml에서 <ph id="ph1">`ReadChars`</ph> 반환 <ph id="ph2">`test`</ph> 끝 태그 뒤 판독기를 배치 합니다.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">`ReadChars`</ph> has the following functionality:</source>
          <target state="translated"><ph id="ph1">`ReadChars`</ph> 다음과 같은 기능이 있습니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>This method is designed to work on element nodes only.</source>
          <target state="translated">이 메서드는 element 노드에서만 실행 되도록 디자인 되었습니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>Other node types cause <ph id="ph1">`ReadChars`</ph> to return 0.</source>
          <target state="translated">다른 노드 형식을 사용 하면 <ph id="ph1">`ReadChars`</ph> 0을 반환 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>This method returns the actual character content.</source>
          <target state="translated">이 메서드는 실제 문자는 콘텐츠를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>There is no attempt to resolve entities, CDATA, or any other markup encountered.</source>
          <target state="translated">엔터티, CDATA, 또는 다른 태그를 확인 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">`ReadChars`</ph> returns everything between the start tag and the end tag, including markup.</source>
          <target state="translated"><ph id="ph1">`ReadChars`</ph> 시작 태그와 끝 태그, 태그를 포함 하 여 사이의 모든 항목을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">`ReadChars`</ph> ignores XML markup that is not well-formed.</source>
          <target state="translated"><ph id="ph1">`ReadChars`</ph> 올바르지 않은 형식의 XML 태그를 무시 합니다.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>For example, when reading the following XML string <ph id="ph1">`&lt;A&gt;1&lt;A&gt;2&lt;/A&gt;`</ph>, <ph id="ph2">`ReadChars`</ph> returns <ph id="ph3">`1&lt;A&gt;2&lt;/A&gt;`</ph>.</source>
          <target state="translated">예를 들어 다음 XML 문자열을 읽을 때 <ph id="ph1">`&lt;A&gt;1&lt;A&gt;2&lt;/A&gt;`</ph>, <ph id="ph2">`ReadChars`</ph> 반환 <ph id="ph3">`1&lt;A&gt;2&lt;/A&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>(It returns markup from the matching element pair and ignores others.)</source>
          <target state="translated">(일치 하는 요소 쌍에서 태그를 반환 하 고 나머지는 무시 합니다.)</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>This method does not do any normalization.</source>
          <target state="translated">이 메서드는 정규화를 수행 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>When <ph id="ph1">`ReadChars`</ph> has reached the end of the character stream, it returns the value 0 and the reader is positioned after the end tag.</source>
          <target state="translated">때 <ph id="ph1">`ReadChars`</ph> 끝에 도달한 문자 스트림 값 0을 반환 하 고 끝 태그 뒤 판독기가 배치 합니다.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>Attribute read methods are not available while using <ph id="ph1">`ReadChars`</ph>.</source>
          <target state="translated">특성을 사용 하는 동안 메서드를 사용할 수 없는 읽을 <ph id="ph1">`ReadChars`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>For example, using the following XML:</source>
          <target state="translated">예를 들어 다음 XML을 사용 하 여:</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>The reader is positioned on the <ph id="ph1">`&lt;item&gt;`</ph> element at the end of the while loop.</source>
          <target state="translated">판독기가 <ph id="ph1">`&lt;item&gt;`</ph> while의 끝에 요소를 반복 합니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>The following example reads in XML using <ph id="ph1">`ReadChars`</ph>.</source>
          <target state="translated">다음 예제에서는 사용 하 여 XML을 읽는 <ph id="ph1">`ReadChars`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>The example uses the <ph id="ph1">`items.xml`</ph> file as input.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`items.xml`</ph> 파일을 입력으로 사용합니다.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is greater than the space specified in the <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> (buffer size - <ph id="ph3">&lt;paramref name="index" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>(buffersize - <ph id="ph3">&lt;paramref name="index" /&gt;</ph>)에 지정된 공간보다 큰 경우</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="&amp;lt; 0" /&gt;</ph> or <ph id="ph4">&lt;paramref name="count" /&gt;</ph><ph id="ph5">&lt;see langword="&amp;lt; 0" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="&amp;lt; 0" /&gt;</ph> 또는 <ph id="ph4">&lt;paramref name="count" /&gt;</ph><ph id="ph5">&lt;see langword="&amp;lt; 0" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer into which to copy the resulting text.</source>
          <target state="translated">결과 텍스트를 복사해 넣을 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>This value cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The offset into the buffer where to start copying the result.</source>
          <target state="translated">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to copy into the buffer.</source>
          <target state="translated">버퍼에 복사할 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The actual number of bytes copied is returned from this method.</source>
          <target state="translated">복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the content and returns the <ph id="ph1">&lt;see langword="Base64" /&gt;</ph> decoded binary bytes.</source>
          <target state="translated">콘텐츠를 읽고 <ph id="ph1">&lt;see langword="Base64" /&gt;</ph> 디코딩된 이진 바이트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes written to the buffer.</source>
          <target state="translated">버퍼에 쓴 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>This method streams the content, decodes the <ph id="ph1">`Base64`</ph> content, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`Base64`</ph>-encoded GIF image) into the buffer.</source>
          <target state="translated">이 메서드는 콘텐츠를 스트리밍하는 <ph id="ph1">`Base64`</ph> content 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 <ph id="ph2">`Base64`</ph>-인코딩된 GIF 이미지) 버퍼에 있습니다.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>This method can be called successively to read large streams of embedded text.</source>
          <target state="translated">이 메서드는 포함 된 텍스트의 큰 스트림을 읽도록 연속적으로 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</source>
          <target state="translated">자세한 내용은 RFC 1521을 참조 하십시오. "MIME (Multipurpose Internet Mail Extensions) 파트 1:를 지정 하 고 인터넷 메시지 본문의 형식을 설명 하는 메커니즘"입니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>You can obtain RFCs from the Request for Comments Web site at <ph id="ph1">http://www.rfc-editor.org</ph>.</source>
          <target state="translated">주석 웹 사이트에 대 한 요청에서 Rfc를 얻을 수 있습니다 <ph id="ph1">http://www.rfc-editor.org</ph>합니다.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>You should not access any of the reader properties between calls to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> method until the method returns the value 0.</source>
          <target state="translated">에 대 한 호출 간의 판독기 속성을 액세스 하지 않아야는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> 메서드 값 0을 반환 될 때까지 메서드.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>This method has the following behavior:</source>
          <target state="translated">이 메서드에 다음과 같은 동작이 있습니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> returns the value 0 when it has reached the end of the byte stream it was operating on.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> 작업 중인 바이트 스트림의 끝에 도달한 경우 값 0을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The reader is positioned on the first non-content node.</source>
          <target state="translated">첫 번째 비 콘텐츠 노드에 판독기가 있습니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</source>
          <target state="translated">요청 하거나 정확한 개수의 바이트 남아 있는 것 보다는 스트림 판독기의 현재 위치에 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> is not supported on the following XML node types: <ph id="ph2">`Element`</ph>, <ph id="ph3">`XmlDeclaration`</ph>, <ph id="ph4">`None`</ph>, <ph id="ph5">`Document`</ph>, <ph id="ph6">`DocumentType`</ph>, <ph id="ph7">`Notation`</ph>, <ph id="ph8">`Entity`</ph>, <ph id="ph9">`DocumentFragment`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> 다음 XML 노드 형식에서 지원 되지 않습니다: <ph id="ph2">`Element`</ph>, <ph id="ph3">`XmlDeclaration`</ph>, <ph id="ph4">`None`</ph>, <ph id="ph5">`Document`</ph>, <ph id="ph6">`DocumentType`</ph>, <ph id="ph7">`Notation`</ph>, <ph id="ph8">`Entity`</ph>, <ph id="ph9">`DocumentFragment`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> is not supported in the current node.</source>
          <target state="translated">현재 노드에서 <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
          <target state="translated">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer into which to copy the resulting text.</source>
          <target state="translated">결과 텍스트를 복사해 넣을 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>This value cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The offset into the buffer where to start copying the result.</source>
          <target state="translated">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to copy into the buffer.</source>
          <target state="translated">버퍼에 복사할 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The actual number of bytes copied is returned from this method.</source>
          <target state="translated">복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the content and returns the <ph id="ph1">&lt;see langword="BinHex" /&gt;</ph> decoded binary bytes.</source>
          <target state="translated">콘텐츠를 읽고 <ph id="ph1">&lt;see langword="BinHex" /&gt;</ph> 디코딩된 이진 바이트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes written to the buffer.</source>
          <target state="translated">버퍼에 쓴 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>This method streams the content, decodes the <ph id="ph1">`BinHex`</ph> content, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`BinHex`</ph> encoded GIF image) into the buffer.</source>
          <target state="translated">이 메서드는 콘텐츠를 스트리밍하는 <ph id="ph1">`BinHex`</ph> content 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 <ph id="ph2">`BinHex`</ph> 인코딩된 GIF 이미지) 버퍼에 있습니다.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>This method can be called successively to read large streams of embedded text.</source>
          <target state="translated">이 메서드는 포함 된 텍스트의 큰 스트림을 읽도록 연속적으로 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>You should not access any of the reader properties between calls to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> method until the method returns the value 0.</source>
          <target state="translated">에 대 한 호출 간의 판독기 속성을 액세스 하지 않아야는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> 메서드 값 0을 반환 될 때까지 메서드.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>This method has the following behavior:</source>
          <target state="translated">이 메서드에 다음과 같은 동작이 있습니다.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> returns the value 0 when it has reached the end of the byte stream it was operating on.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> 작업 중인 바이트 스트림의 끝에 도달한 경우 값 0을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The reader is positioned on the first non-content node.</source>
          <target state="translated">첫 번째 비 콘텐츠 노드에 판독기가 있습니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</source>
          <target state="translated">요청 하거나 정확한 개수의 바이트 남아 있는 것 보다는 스트림 판독기의 현재 위치에 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> is not supported on the following XML node types: <ph id="ph2">`Element`</ph>, <ph id="ph3">`XmlDeclaration`</ph>, <ph id="ph4">`None`</ph>, <ph id="ph5">`Document`</ph>, <ph id="ph6">`DocumentType`</ph>, <ph id="ph7">`Notation`</ph>, <ph id="ph8">`Entity`</ph>, <ph id="ph9">`DocumentFragment`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> 다음 XML 노드 형식에서 지원 되지 않습니다: <ph id="ph2">`Element`</ph>, <ph id="ph3">`XmlDeclaration`</ph>, <ph id="ph4">`None`</ph>, <ph id="ph5">`Document`</ph>, <ph id="ph6">`DocumentType`</ph>, <ph id="ph7">`Notation`</ph>, <ph id="ph8">`Entity`</ph>, <ph id="ph9">`DocumentFragment`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /&gt;</ph> is not supported on the current node.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>가 현재 노드에서 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
          <target state="translated">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> implementation does not support this method.</source>
          <target state="translated">구현된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>에서 이 메서드를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer into which to copy the resulting text.</source>
          <target state="translated">결과 텍스트를 복사해 넣을 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>This value cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The offset into the buffer where to start copying the result.</source>
          <target state="translated">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to copy into the buffer.</source>
          <target state="translated">버퍼에 복사할 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The actual number of bytes copied is returned from this method.</source>
          <target state="translated">복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the element and decodes the Base64 content.</source>
          <target state="translated">요소를 읽고 Base64 콘텐츠를 디코딩합니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes written to the buffer.</source>
          <target state="translated">버퍼에 쓴 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</source>
          <target state="translated">이 메서드는 요소 내용을 읽고 Base64 인코딩을 사용 하 여 디코딩하고 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 Base64 인코딩된 GIF 이미지) 버퍼에 있습니다.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</source>
          <target state="translated">자세한 내용은 RFC 1521을 참조 하십시오. "MIME (Multipurpose Internet Mail Extensions) 파트 1:를 지정 하 고 인터넷 메시지 본문의 형식을 설명 하는 메커니즘"입니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>You can obtain RFCs from the Request for Comments Web site at <ph id="ph1">http://www.rfc-editor.org</ph>.</source>
          <target state="translated">주석 웹 사이트에 대 한 요청에서 Rfc를 얻을 수 있습니다 <ph id="ph1">http://www.rfc-editor.org</ph>합니다.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>This method can only read simple-content elements.</source>
          <target state="translated">이 메서드는 단순 콘텐츠 요소 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</source>
          <target state="translated">요소는 텍스트, 공백, 유효 공백, CDATA 섹션, 주석 및 처리 명령을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>It can also contain entity references, which are automatically expanded.</source>
          <target state="translated">자동으로 확장 되는 엔터티 참조를 포함할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The element cannot have child elements.</source>
          <target state="translated">요소는 자식 요소를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>This method is very similar to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> method except that it can only be called on element node types.</source>
          <target state="translated">이 메서드는 매우 비슷합니다는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A&gt;</ph> 한다는 점 제외 하면 메서드는 요소 노드 형식에만 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>If the <ph id="ph1">`count`</ph> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> reads all the remaining bytes in the document and returns the number of bytes read.</source>
          <target state="translated">경우는 <ph id="ph1">`count`</ph> 값이 문서에서 바이트 수와 같은 경우 또는 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 문서에 나머지 모든 바이트를 읽고 읽은 바이트 수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The next <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> method call returns a zero and moves the reader to the node following the <ph id="ph2">&lt;xref:System.Xml.XmlNodeType.EndElement&gt;</ph>.</source>
          <target state="translated">다음 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 0을 반환 하 고 노드 다음에는 판독기를 이동 하는 메서드 호출의 <ph id="ph2">&lt;xref:System.Xml.XmlNodeType.EndElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> method was called.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> 요소 콘텐츠를 모두 사용 하기 전에 요소에서 사용 하는 경우 다음는 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> 메서드를 호출 했습니다.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>This means that the reader reads all the text until the end element is encountered.</source>
          <target state="translated">즉, 판독기 끝 요소가 발견 될 때까지 모든 텍스트를 읽습니다.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</source>
          <target state="translated">다음 끝 태그 노드를 읽고, 다음 노드를 읽고 노드로 배치 합니다.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>See <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType&gt;</ph> to see an example using this method.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType&gt;</ph> 이 메서드를 사용 하는 예제를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The current node is not an element node.</source>
          <target state="translated">현재 노드가 요소 노드가 아닌 경우</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
          <target state="translated">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph> implementation does not support this method.</source>
          <target state="translated">구현된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextReader" /&gt;</ph>에서 이 메서드를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The element contains mixed-content.</source>
          <target state="translated">요소가 혼합 콘텐츠를 포함하는 경우</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The content cannot be converted to the requested type.</source>
          <target state="translated">요소를 요청한 형식으로 변환할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer into which to copy the resulting text.</source>
          <target state="translated">결과 텍스트를 복사해 넣을 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>This value cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>일 수 없습니다.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The offset into the buffer where to start copying the result.</source>
          <target state="translated">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to copy into the buffer.</source>
          <target state="translated">버퍼에 복사할 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The actual number of bytes copied is returned from this method.</source>
          <target state="translated">복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the element and decodes the <ph id="ph1">&lt;see langword="BinHex" /&gt;</ph> content.</source>
          <target state="translated">요소를 읽고 <ph id="ph1">&lt;see langword="BinHex" /&gt;</ph> 콘텐츠를 디코딩합니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes written to the buffer.</source>
          <target state="translated">버퍼에 쓴 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>This method reads the element content, decodes it using <ph id="ph1">`BinHex`</ph> encoding, and returns the decoded binary bytes (for example, an inline <ph id="ph2">`BinHex`</ph> encoded GIF image) into the buffer.</source>
          <target state="translated">이 메서드는 요소 콘텐츠를 읽고, 사용 하 여 디코딩 <ph id="ph1">`BinHex`</ph> 인코딩 및 디코딩된 이진 바이트를 반환 합니다 (예를 들어, 인라인 <ph id="ph2">`BinHex`</ph> 인코딩된 GIF 이미지) 버퍼에 있습니다.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>This method can only read simple-content elements.</source>
          <target state="translated">이 메서드는 단순 콘텐츠 요소 읽을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</source>
          <target state="translated">요소는 텍스트, 공백, 유효 공백, CDATA 섹션, 주석 및 처리 명령을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>It can also contain entity references, which are automatically expanded.</source>
          <target state="translated">자동으로 확장 되는 엔터티 참조를 포함할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The element cannot have child elements.</source>
          <target state="translated">요소는 자식 요소를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>This method is very similar to the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> method except that it can only be called on element node types.</source>
          <target state="translated">이 메서드는 매우 비슷합니다는 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A&gt;</ph> 한다는 점 제외 하면 메서드는 요소 노드 형식에만 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>If the <ph id="ph1">`count`</ph> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> reads all the remaining bytes in the document and returns the number of bytes read.</source>
          <target state="translated">경우는 <ph id="ph1">`count`</ph> 값이 문서에서 바이트 수와 같은 경우 또는 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 문서에 나머지 모든 바이트를 읽고 읽은 바이트 수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The next <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> method call returns a zero and moves the reader to the node following the <ph id="ph2">&lt;xref:System.Xml.XmlNodeType.EndElement&gt;</ph>.</source>
          <target state="translated">다음 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 0을 반환 하 고 노드 다음에는 판독기를 이동 하는 메서드 호출의 <ph id="ph2">&lt;xref:System.Xml.XmlNodeType.EndElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>If you call <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> method was called.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> 요소 콘텐츠를 모두 사용 하기 전에 요소에서 사용 하는 경우 다음는 <ph id="ph2">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> 메서드를 호출 했습니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>This means that the reader reads all the text until the end element is encountered.</source>
          <target state="translated">즉, 판독기 끝 요소가 발견 될 때까지 모든 텍스트를 읽습니다.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</source>
          <target state="translated">다음 끝 태그 노드를 읽고, 다음 노드를 읽고 노드로 배치 합니다.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>See <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType&gt;</ph> to see an example using this method.</source>
          <target state="translated">참조 <ph id="ph1">&lt;xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType&gt;</ph> 이 메서드를 사용 하는 예제를 볼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> 값이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The current node is not an element node.</source>
          <target state="translated">현재 노드가 요소 노드가 아닌 경우</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The index into the buffer or index + count is larger than the allocated buffer size.</source>
          <target state="translated">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph> implementation does not support this method.</source>
          <target state="translated">구현된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlReader" /&gt;</ph>에서 이 메서드를 지원하지 않는 경우</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The element contains mixed-content.</source>
          <target state="translated">요소가 혼합 콘텐츠를 포함하는 경우</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The content cannot be converted to the requested type.</source>
          <target state="translated">요소를 요청한 형식으로 변환할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.ReadState">
          <source>Gets the state of the reader.</source>
          <target state="translated">판독기의 상태를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ReadState">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.ReadState" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.ReadState" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.ReadState">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>Reads the contents of an element or a text node as a string.</source>
          <target state="translated">요소 또는 텍스트 노드의 내용을 문자열로 읽습니다.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>The contents of the element or text node.</source>
          <target state="translated">요소 또는 텍스트 노드의 내용입니다.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.</source>
          <target state="translated">판독기가 요소 또는 텍스트 노드 이외의 위치에 있거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 이것은 빈 문자열입니다.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadString">
          <source><ph id="ph1">&lt;see langword="Note:" /&gt;</ph> The text node can be either an element or an attribute text node.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Note:" /&gt;</ph> 텍스트 노드는 요소 또는 특성 텍스트 노드입니다.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>If positioned on an element, <ph id="ph1">`ReadString`</ph> concatenates all text, significant white space, white space, and <ph id="ph2">`CData`</ph> section node types together and returns the concatenated data as the element content.</source>
          <target state="translated">요소에 배치 되 면 <ph id="ph1">`ReadString`</ph> 모든 텍스트, 유효 공백 문자, 공백, 연결 및 <ph id="ph2">`CData`</ph> 섹션 노드 함께 형식 및 요소 콘텐츠, 연결 된 데이터를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>It stops when any markup is encountered, including comments and processing instructions.</source>
          <target state="translated">모든 태그에 오류가 발생 하면 처리 명령 및 메모를 포함 하 여 중지 합니다.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>This could occur in a mixed content model, or when an element end tag is read.</source>
          <target state="translated">이러한 동작은 혼합 내용 모델에서 발생하거나 요소 끝 태그를 읽을 때 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>If positioned on a text node, <ph id="ph1">`ReadString`</ph> performs the same concatenation from the text node to the element end tag.</source>
          <target state="translated">텍스트 노드에 있을 경우 <ph id="ph1">`ReadString`</ph> 요소 끝 태그를 텍스트 노드를 동일한 연결을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>If the reader is positioned on an attribute text node, <ph id="ph1">`ReadString`</ph> has the same functionality as if the reader were position on the element start tag.</source>
          <target state="translated">판독기가 특성 텍스트 노드에 있을 경우 <ph id="ph1">`ReadString`</ph>에는 판독기가 요소 시작 태그에 있을 때와 같은 기능이 있습니다.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>It returns all the concatenated element text nodes.</source>
          <target state="translated">연결된 모든 요소 텍스트 노드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>The following example displays the text content of each element.</source>
          <target state="translated">다음 예제에서는 각 요소의 텍스트 콘텐츠를 표시합니다.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>The example uses the file, <ph id="ph1">`elems.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`elems.xml`</ph>입력으로 합니다.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>An error occurred while parsing the XML.</source>
          <target state="translated">XML을 구문 분석하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ReadString">
          <source>An invalid operation was attempted.</source>
          <target state="translated">잘못된 작업을 시도한 경우</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>Resets the state of the reader to ReadState.Initial.</source>
          <target state="translated">판독기의 상태를 ReadState.Initial로 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>This method enables you to parse multiple XML documents in a single stream.</source>
          <target state="translated">이 메서드를 사용 하면 단일 스트림의 여러 XML 문서를 구문 분석할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>When you reach the end of an XML document, you can call <ph id="ph1">`ResetState`</ph> to reset the state of the reader in preparation for the next XML document.</source>
          <target state="translated">XML 문서의 끝에 도달 하면 호출할 수 있습니다 <ph id="ph1">`ResetState`</ph> 다음 XML 문서에 대 한 준비 과정에서 판독기의 상태를 다시 설정 합니다.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>The documents in the stream must share the same encoding.</source>
          <target state="translated">스트림에서 문서 인코딩이 동일한 공유 해야 합니다.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>If this is not the case, when <ph id="ph1">`ResetState`</ph> is called an <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> is thrown.</source>
          <target state="translated">이 경우, 아닌 경우 때 <ph id="ph1">`ResetState`</ph> 라고는 <ph id="ph2">&lt;xref:System.Xml.XmlException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>(This is a change in behavior from .NET Framework version 1.1 and earlier).</source>
          <target state="translated">(.NET Framework 버전 1.1이와에서 동작 변경입니다).</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>The following properties are not affected by <ph id="ph1">`ResetState`</ph>.</source>
          <target state="translated">다음과 같은 속성이 영향을 받지 않는 <ph id="ph1">`ResetState`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>The following example parses two XML documents in a single stream.</source>
          <target state="translated">다음 예제에서는 단일 스트림의 두 개의 XML 문서 구문 분석합니다.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>Calling <ph id="ph1">&lt;see langword="ResetState" /&gt;</ph> if the reader was constructed using an <ph id="ph2">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Xml.XmlParserContext" /&gt;</ph>를 사용하여 판독기를 생성한 상태에서 <ph id="ph1">&lt;see langword="ResetState" /&gt;</ph>를 호출하는 경우</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ResetState">
          <source>Documents in a single stream do not share the same encoding.</source>
          <target state="translated">단일 스트림의 여러 문서가 동일한 인코딩을 사용하지 않는 경우</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.ResolveEntity">
          <source>Resolves the entity reference for <ph id="ph1">&lt;see langword="EntityReference" /&gt;</ph> nodes.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="EntityReference" /&gt;</ph> 노드에 대해 엔터티 참조를 확인합니다.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResolveEntity">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResolveEntity">
          <source>If the reader is positioned on an <ph id="ph1">`EntityReference`</ph> node (<ph id="ph2">`XmlNodeType.EntityReference`</ph>), if <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> is called after calling this method, the entity replacement text is parsed.</source>
          <target state="translated">판독기가 배치 되 면는 <ph id="ph1">`EntityReference`</ph> 노드 (<ph id="ph2">`XmlNodeType.EntityReference`</ph>) 하는 경우, <ph id="ph3">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph> 이 방법에서는 엔터티 대체 텍스트를 구문 분석 하는 호출 후에 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResolveEntity">
          <source>When the entity replacement text is finished, an <ph id="ph1">`EndEntity`</ph> node is returned to close the entity reference scope.</source>
          <target state="translated">엔터티 대체 텍스트 완료 되 면는 <ph id="ph1">`EndEntity`</ph> 노드가 엔터티 참조 범위를 닫습니다 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.ResolveEntity">
          <source>After calling this method, if the entity is part of an attribute value, you must call <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadAttributeValue%2A&gt;</ph> to step into the entity.</source>
          <target state="translated">이 메서드를 호출한 후 엔터티의 특성 값의 일부인 경우 호출 해야 <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadAttributeValue%2A&gt;</ph> 를 엔터티로 단계로 합니다.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.Skip">
          <source>Skips the children of the current node.</source>
          <target state="translated">현재 노드의 자식을 건너뜁니다.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Skip">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Skip">
          <source>In the following XML input if the reader is positioned on the <ph id="ph1">`&lt;a&gt;`</ph> node or any of its attributes, calling <ph id="ph2">`Skip`</ph> positions the reader to the <ph id="ph3">`&lt;b&gt;`</ph> node.</source>
          <target state="translated">다음 xml에서에 판독기가 배치 하는 경우 입력은 <ph id="ph1">`&lt;a&gt;`</ph> 노드 또는 특성, 호출 <ph id="ph2">`Skip`</ph> 판독기가 <ph id="ph3">`&lt;b&gt;`</ph> 노드.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Skip">
          <source>If the reader is positioned on a leaf node already (such as the <ph id="ph1">`&lt;x&gt;`</ph> node or the text node <ph id="ph2">`abc`</ph>), calling <ph id="ph3">`Skip`</ph> is the same as calling <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph>.</source>
          <target state="translated">경우 판독기가 리프 노드에 이미 (같은 <ph id="ph1">`&lt;x&gt;`</ph> 노드 또는 텍스트 노드 <ph id="ph2">`abc`</ph>) 호출, <ph id="ph3">`Skip`</ph> 호출할 때와 동일 <ph id="ph4">&lt;xref:System.Xml.XmlTextReader.Read%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.Skip">
          <source>This method checks for well-formed XML.</source>
          <target state="translated">이 메서드는 올바른 형식의 XML에 대 한 확인합니다.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlNamespaceScope" /&gt;</ph> value that specifies the type of namespace nodes to return.</source>
          <target state="translated">반환할 네임스페이스 노드의 형식을 지정하는 <ph id="ph1">&lt;see cref="T:System.Xml.XmlNamespaceScope" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph> that contains the current in-scope namespaces.</source>
          <target state="translated">현재 범위 내의 네임스페이스가 포함된 <ph id="ph1">&lt;see cref="T:System.Collections.IDictionary" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
          <source>The prefix whose namespace URI you wish to find.</source>
          <target state="translated">찾을 네임스페이스 URI의 접두사입니다.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
          <source>The namespace URI that is mapped to the prefix; <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the prefix is not mapped to a namespace URI.</source>
          <target state="translated">접두사에 매핑된 네임스페이스 URI이거나, 접두사가 네임스페이스 URI에 매핑되지 않은 경우 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextReader&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Xml.IXmlNamespaceResolver&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
          <source>The namespace URI whose prefix you wish to find.</source>
          <target state="translated">찾을 접두사의 네임스페이스 URI입니다.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
          <source>The prefix that is mapped to the namespace URI; <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the namespace URI is not mapped to a prefix.</source>
          <target state="translated">네임스페이스 URI에 매핑된 접두사이거나, 네임스페이스 URI가 접두사에 매핑되지 않은 경우 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.Value">
          <source>Gets the text value of the current node.</source>
          <target state="translated">현재 노드의 텍스트 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source>The value returned depends on the <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.NodeType" /&gt;</ph> of the node.</source>
          <target state="translated">노드의 <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.NodeType" /&gt;</ph>에 따라 반환되는 값이 달라집니다.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source>The following table lists node types that have a value to return.</source>
          <target state="translated">다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source>All other node types return <ph id="ph1">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated">다른 모든 노드 형식은 <ph id="ph1">&lt;see langword="String.Empty" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Node Type</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 노드 형식</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Attribute" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The value of the attribute.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Attribute" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 특성의 값입니다.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="CDATA" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The content of the CDATA section.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="CDATA" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> CDATA 섹션의 내용입니다.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Comment" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The content of the comment.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Comment" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 주석의 내용입니다.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="DocumentType" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The internal subset.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="DocumentType" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 내부 하위 집합입니다.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="ProcessingInstruction" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The entire content, excluding the target.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="ProcessingInstruction" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 대상을 제외한 전체 내용입니다.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="SignificantWhitespace" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The white space within an <ph id="ph6">&lt;see langword="xml:space" /&gt;</ph>= 'preserve' scope.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="SignificantWhitespace" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 공백을 <ph id="ph6">&lt;see langword="xml:space" /&gt;</ph>= 'preserve' 범위입니다.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Text" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The content of the text node.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Text" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 텍스트 노드의 내용입니다.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Whitespace" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The white space between markup.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="Whitespace" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 태그 사이의 공백입니다.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="XmlDeclaration" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> The content of the declaration.</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><bpt id="p1">&lt;term&gt;</bpt><ph id="ph4">&lt;see langword="XmlDeclaration" /&gt;</ph><ept id="p1">&lt;/term&gt;</ept><ph id="ph5">&lt;description&gt;</ph> 선언 내용입니다.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source>The following example reads an XML file and displays each node.</source>
          <target state="translated">다음 예제에서는 XML 파일을 읽고 각 노드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.Value">
          <source>The sample uses the file <ph id="ph1">`items.xml`</ph>.</source>
          <target state="translated">파일을 사용 하는 샘플 <ph id="ph1">`items.xml`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.WhitespaceHandling">
          <source>Gets or sets a value that specifies how white space is handled.</source>
          <target state="translated">공백이 처리되는 방법을 지정하는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.WhitespaceHandling">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.WhitespaceHandling" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.WhitespaceHandling" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.WhitespaceHandling">
          <source>The default is <ph id="ph1">&lt;see langword="WhitespaceHandling.All" /&gt;</ph> (returns <ph id="ph2">&lt;see langword="Whitespace" /&gt;</ph> and <ph id="ph3">&lt;see langword="SignificantWhitespace" /&gt;</ph> nodes).</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="WhitespaceHandling.All" /&gt;</ph>이고 <ph id="ph2">&lt;see langword="Whitespace" /&gt;</ph> <ph id="ph3">&lt;see langword="SignificantWhitespace" /&gt;</ph> 노드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.WhitespaceHandling">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.WhitespaceHandling">
          <source>This property can be changed at any time and takes effect on the next read operation.</source>
          <target state="translated">이 속성은 언제 든 지 변경할 수 있으며 다음 읽기 작업에 영향을 미칩니다.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.WhitespaceHandling">
          <source>Because the <ph id="ph1">`XmlTextReader`</ph> does not have DTD information available to it, <ph id="ph2">`SignificantWhitepsace`</ph> nodes are only returned within an <ph id="ph3">`xml:space='preserve'`</ph> scope.</source>
          <target state="translated">때문에 <ph id="ph1">`XmlTextReader`</ph> DTD 정보를 사용할 수 없는 <ph id="ph2">`SignificantWhitepsace`</ph> 노드 내에 정보만 반환 됩니다는 <ph id="ph3">`xml:space='preserve'`</ph> 범위입니다.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.WhitespaceHandling">
          <source>The following example reads an XML fragment.</source>
          <target state="translated">다음 예제에서는 XML 조각이 읽습니다.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.WhitespaceHandling">
          <source>Invalid value specified.</source>
          <target state="translated">잘못된 값이 지정된 경우</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.WhitespaceHandling">
          <source>Setting this property when the reader is closed (<ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.ReadState" /&gt;</ph> is <ph id="ph2">&lt;see langword="ReadState.Closed" /&gt;</ph>).</source>
          <target state="translated">판독기를 닫은 상태에서 이 속성을 설정하는 경우(<ph id="ph1">&lt;see cref="P:System.Xml.XmlTextReader.ReadState" /&gt;</ph>가 <ph id="ph2">&lt;see langword="ReadState.Closed" /&gt;</ph>인 경우)</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source>Gets the current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> scope.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> 범위를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source>The current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> scope.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> 범위입니다.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source>This property represents the <ph id="ph1">`xml:lang`</ph> scope within which the current node resides.</source>
          <target state="translated">이 속성은 나타냅니다는 <ph id="ph1">`xml:lang`</ph> 있는 현재 노드 내에서 범위입니다.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source>For example, here is an XML fragment with <ph id="ph1">`xml:lang`</ph> set to US English in the root element:</source>
          <target state="translated">예를 들어 여기는 XML 조각으로 <ph id="ph1">`xml:lang`</ph> 루트 요소에 영어 (미국)로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source><ph id="ph1">\&lt;</ph>root xml:lang="en-us"&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph>root xml:lang="en-us"&gt;</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source><ph id="ph1">\&lt;</ph>name&gt;Fred<ph id="ph2">\&lt;</ph>/name&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph>name&gt;Fred<ph id="ph2">\&lt;</ph>/name&gt;</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source><ph id="ph1">\&lt;</ph>/root&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph>/root&gt;</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source>When the reader is positioned on the <ph id="ph1">`name`</ph> element, you can use this property to find that it is in the scope of a US English <ph id="ph2">`xml:lang`</ph> attribute.</source>
          <target state="translated">에 판독기가 배치 하는 경우는 <ph id="ph1">`name`</ph> 요소를이 속성을 사용 하 여 미국 영어의 범위에 필요할 수 있습니다 <ph id="ph2">`xml:lang`</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlLang">
          <source>The following example displays the <ph id="ph1">`xml:lang`</ph> value for each of the nodes.</source>
          <target state="translated">다음 예제에서는 표시 된 <ph id="ph1">`xml:lang`</ph> 각 노드의 대 한 값입니다.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>Sets the <ph id="ph1">&lt;see cref="T:System.Xml.XmlResolver" /&gt;</ph> used for resolving DTD references.</source>
          <target state="translated">DTD 참조를 확인하는 데 사용된 <ph id="ph1">&lt;see cref="T:System.Xml.XmlResolver" /&gt;</ph>를 설정합니다.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>The <ph id="ph1">&lt;see langword="XmlResolver" /&gt;</ph> to use.</source>
          <target state="translated">사용할 <ph id="ph1">&lt;see langword="XmlResolver" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>If set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>, external resources are not resolved.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph>로 설정되면 외부 리소스는 확인되지 않습니다.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>In version 1.1 of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, the caller must be fully trusted in order to specify an <ph id="ph2">&lt;see langword="XmlResolver" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> 버전 1.1에서는 완전히 신뢰할 수 있는 호출자만 <ph id="ph2">&lt;see langword="XmlResolver" /&gt;</ph>를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>The reader uses <ph id="ph1">`XmlResolver`</ph> to resolve the location of the file loaded into the reader and also to resolve DTD references.</source>
          <target state="translated">판독기는 <ph id="ph1">`XmlResolver`</ph> 판독기에 로드 된 파일의 위치를 확인 하 고 DTD 참조를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>For example, if your XML included the DOCTYPE declaration, <ph id="ph1">`&lt;!DOCTYPE book SYSTEM book.dtd&gt;`</ph> the reader resolves this external file and ensures that the DTD is well-formed.</source>
          <target state="translated">예를 들어, XML에 포함 된 DOCTYPE 선언 <ph id="ph1">`&lt;!DOCTYPE book SYSTEM book.dtd&gt;`</ph> 판독기가이 외부 파일을 확인 하 고 DTD 형식이 올바른지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>The reader does not use the DTD for validation.</source>
          <target state="translated">판독기는 유효성 검사에 대 한 DTD를 사용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>This property can be changed at any time and takes effect on the next read operation.</source>
          <target state="translated">이 속성은 언제 든 지 변경할 수 있으며 다음 읽기 작업에 영향을 미칩니다.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>If this property is set to <ph id="ph1">`null`</ph>, any external DTD references encountered by the reader are not resolved.</source>
          <target state="translated">이 속성은로 설정 하는 경우 <ph id="ph1">`null`</ph>, 판독기에서 발견 한 모든 외부 DTD 참조는 확인 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>In version 1.1 of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, if this property is not set, the trust level of the application determines the default behavior.</source>
          <target state="translated">버전 1.1에에서는 <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>,이 속성을 설정 하지 않으면 응용 프로그램의 신뢰 수준을 기본 동작을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source><ph id="ph1">`Fully trusted code:`</ph> The reader uses a default <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> with no user credentials.</source>
          <target state="translated"><ph id="ph1">`Fully trusted code:`</ph> 판독기는 기본 <ph id="ph2">&lt;xref:System.Xml.XmlUrlResolver&gt;</ph> 자격 증명이 없는 사용자입니다.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>If authentication is required to access a network resource, use the <ph id="ph1">`XmlResolver`</ph> property to specify an <ph id="ph2">`XmlResolver`</ph> with the necessary credentials.</source>
          <target state="translated">사용 하 여 네트워크 리소스에 액세스 하는 데 인증이 필요는 <ph id="ph1">`XmlResolver`</ph> 속성을 통해 지정 된 <ph id="ph2">`XmlResolver`</ph> 에 필요한 자격 증명입니다.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source><ph id="ph1">`Semi-trusted code:`</ph> The <ph id="ph2">`XmlResolver`</ph> property is set to <ph id="ph3">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`Semi-trusted code:`</ph> <ph id="ph2">`XmlResolver`</ph> 속성이 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>External resources are not resolved.</source>
          <target state="translated">외부 리소스 확인 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlResolver">
          <source>The following example uses the <ph id="ph1">`XmlResolver`</ph> property to specify the credentials necessary to access the networked file.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`XmlResolver`</ph> 속성을 통해 네트워크로 연결 된 파일에 액세스 하는 데 필요한 자격 증명을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextReader.XmlSpace">
          <source>Gets the current <ph id="ph1">&lt;see langword="xml:space" /&gt;</ph> scope.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see langword="xml:space" /&gt;</ph> 범위를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlSpace">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlSpace">
          <source>If no <ph id="ph1">&lt;see langword="xml:space" /&gt;</ph> scope exists, this property defaults to <ph id="ph2">&lt;see langword="XmlSpace.None" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="xml:space" /&gt;</ph> 범위가 존재하지 않으면 이 속성은 기본적으로 <ph id="ph2">&lt;see langword="XmlSpace.None" /&gt;</ph>으로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlSpace">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> method to take advantage of new functionality.</source>
          <target state="translated">.NET Framework 2.0 부터는 좋습니다 만드는 <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> 를 사용 하 여 인스턴스는 <ph id="ph2">&lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType&gt;</ph> 새로운 기능을 활용 하는 메서드.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlSpace">
          <source>The following example parses a file and returns significant white space if an <ph id="ph1">`xml:space='preserve'`</ph> scope is found.</source>
          <target state="translated">다음 예제에서는 파일을 구문 분석 하 고 하는 경우 유효 공백을 반환는 <ph id="ph1">`xml:space='preserve'`</ph> 범위를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextReader.XmlSpace">
          <source>The example uses the file, <ph id="ph1">`authors.xml`</ph>, as input.</source>
          <target state="translated">이 예제에서는 파일을 사용 하 여 <ph id="ph1">`authors.xml`</ph>입력으로 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>