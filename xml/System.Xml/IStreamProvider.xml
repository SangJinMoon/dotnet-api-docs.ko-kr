<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IStreamProvider.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51e968e06adde58ff690aa9a2ded2e2fcf2ea66a7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e968e06adde58ff690aa9a2ded2e2fcf2ea66a7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.IStreamProvider">
          <source>Represents an interface that can be implemented by classes providing streams.</source>
          <target state="translated">스트림을 제공하는 클래스에서 구현할 수 있는 인터페이스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>When writing an outgoing message containing a streamed body to an XML writer, the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> will use a sequence of calls similar to the following in its <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> implementation:</source>
          <target state="translated">XML 작성기에 스트리밍된 본문이 포함된 보내는 메시지를 쓸 때 <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph>는 <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> 구현에서 다음과 유사한 호출의 시퀀스를 사용합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write any necessary information preceding the stream (For example, the opening XML tag).</source>
          <target state="translated">스트림 앞에 필요한 정보를 씁니다(예: 여는 XML 태그).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write the stream.</source>
          <target state="translated">스트림을 씁니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write any information following the stream (For example, the closing XML tag).</source>
          <target state="translated">스트림 뒤에 필요한 정보를 씁니다(예: 닫는 XML 태그).</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>This works well with encodings that are similar to the textual XML encoding.</source>
          <target state="translated">이는 텍스트 XML 인코딩과 유사한 인코딩을 사용하여 작동합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>However, there are some encodings that do not place XML infoset information (For example, tags for starting and ending XML elements) together with the data contained within elements.</source>
          <target state="translated">그러나 XML infoset 정보(예: XML 요소의 시작 및 끝 태그)를 요소 내에 포함된 데이터와 함께 사용하지 않는 일부 인코딩이 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>For example, in the MTOM encoding, the message is split into multiple parts.</source>
          <target state="translated">예를 들어 MTOM 인코딩에서 메시지는 여러 부분으로 나누어집니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>One part contains the XML infoset, which may contain references to other parts for actual element contents.</source>
          <target state="translated">하나의 부분에는 실제 요소 콘텐츠의 다른 부분에 대한 참조가 포함될 수 있는 XML infoset이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Since the XML infoset will normally be small compared to the streamed contents, it makes sense to buffer the infoset, write it out, and then write the contents in a streamed way.</source>
          <target state="translated">XML infoset이 일반적으로 스트리밍된 콘텐츠와 비교하여 작으므로 infoset을 버퍼링하고 쓴 다음 스트리밍된 방법으로 콘텐츠를 쓰는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>This means that by the time the closing element tag is written, we should not have written out the stream yet.</source>
          <target state="translated">즉, 이는 닫는 요소 태그가 작성될 때까지는 스트림을 쓰면 안 된다는 것을 의미합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>For this purpose, the <ph id="ph1">&lt;xref:System.Xml.IStreamProvider&gt;</ph> interface is used.</source>
          <target state="translated">이를 위해 <ph id="ph1">&lt;xref:System.Xml.IStreamProvider&gt;</ph> 인터페이스가 사용됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>The interface has a <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> method that returns the stream to be written.</source>
          <target state="translated">인터페이스에는 작성할 스트림을 반환하는 <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> 메서드가 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>The correct way to write out a streamed message body in <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> is as follows:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> 에서 스트리밍된 메시지 본문을 쓰는 올바른 방법은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write any necessary information preceding the stream (For example, the opening XML tag)</source>
          <target state="translated">스트림 앞에 필요한 정보를 씁니다(예: 여는 XML 태그).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Call the <ph id="ph1">`WriteValue`</ph> overload on the <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> that takes an <ph id="ph3">&lt;xref:System.Xml.IStreamProvider&gt;</ph>, with an <ph id="ph4">`IStreamProvider`</ph> implementation that returns the stream to be written.</source>
          <target state="translated">쓸 스트림을 반환하는 <ph id="ph1">`WriteValue`</ph> 구현과 함께 <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph>를 사용하는 <ph id="ph3">&lt;xref:System.Xml.IStreamProvider&gt;</ph>에서 <ph id="ph4">`IStreamProvider`</ph> 오버로드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write any information following the stream (For example, the closing XML tag)</source>
          <target state="translated">스트림 뒤에 필요한 정보를 씁니다(예: 닫는 XML 태그).</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>With this approach, the XML writer has a choice of when to call <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> and write out the streamed data.</source>
          <target state="translated">이 방법을 사용하면 <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> 을 호출하고 스트리밍된 데이터를 작성할 때 XML 작성기를 선택할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>For example, the textual and binary XML writers will call it immediately and write out the streamed contents in between the start and end tags.</source>
          <target state="translated">예를 들어 텍스트 및 이진 XML 작성기는 이를 즉각 호출하고 시작 및 끝 태그 사이에서 스트리밍된 콘텐츠를 작성합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>The MTOM writer may decide to call <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> later, when it is ready to write the appropriate part of the message.</source>
          <target state="translated">MTOM 작성기는 메시지의 적절한 일부를 쓸 준비가 되면 나중에 <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> 을 호출할지 결정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xml.IStreamProvider.GetStream">
          <source>Gets a stream.</source>
          <target state="translated">스트림을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xml.IStreamProvider.GetStream">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IStreamProvider.GetStream">
          <source>This method can be used to return the stream to be written.</source>
          <target state="translated">이 메서드는 작성할 스트림을 반환하는 데 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)">
          <source>The stream being released.</source>
          <target state="translated">해제할 스트림입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)">
          <source>Releases a stream to output.</source>
          <target state="translated">스트림을 출력으로 해제합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>