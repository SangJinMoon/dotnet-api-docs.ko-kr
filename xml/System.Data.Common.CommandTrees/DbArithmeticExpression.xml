<Type Name="DbArithmeticExpression" FullName="System.Data.Common.CommandTrees.DbArithmeticExpression">
  <TypeSignature Language="C#" Value="public sealed class DbArithmeticExpression : System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DbArithmeticExpression extends System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DbArithmeticExpression&#xA;Inherits DbExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbArithmeticExpression sealed : System::Data::Common::CommandTrees::DbExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.CommandTrees.DbExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d7a4b-101">숫자 인수에 적용되는 산술 연산을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-101">Represents an arithmetic operation applied to numeric arguments.</span></span> <span data-ttu-id="d7a4b-102">산술 연산에는 더하기, 빼기, 곱하기, 나누기, 나머지 및 부정이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-102">Addition, subtraction, multiplication, division, modulo, and negation are arithmetic operations.</span></span> <span data-ttu-id="d7a4b-103">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-103">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7a4b-104"><xref:System.Data.Common.CommandTrees.DbArithmeticExpression> 인수의 결과 형식은 일반 숫자 형식이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-104">The <xref:System.Data.Common.CommandTrees.DbArithmeticExpression> requires that its arguments have a common numeric result type.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (System.Data.Common.CommandTrees.DbExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class System.Data.Common.CommandTrees.DbExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As DbExpressionVisitor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Accept(System::Data::Common::CommandTrees::DbExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Data.Common.CommandTrees.DbExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="d7a4b-105"><see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-105">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</span></span></param>
        <summary><span data-ttu-id="d7a4b-106">@FSHO2@결과 값을 생성하지 않는 식의 visitor 패턴을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-106">Implements the visitor pattern for expressions that do not produce a result value.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d7a4b-107"><paramref name="visitor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7a4b-107"><paramref name="visitor" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public override TResultType Accept&lt;TResultType&gt; (System.Data.Common.CommandTrees.DbExpressionVisitor&lt;TResultType&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResultType Accept&lt;TResultType&gt;(class System.Data.Common.CommandTrees.DbExpressionVisitor`1&lt;!!TResultType&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResultType) (visitor As DbExpressionVisitor(Of TResultType)) As TResultType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; override TResultType Accept(System::Data::Common::CommandTrees::DbExpressionVisitor&lt;TResultType&gt; ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResultType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="System.Data.Common.CommandTrees.DbExpressionVisitor&lt;TResultType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResultType"><span data-ttu-id="d7a4b-108">생성 되는 결과의 형식 <c>방문자</c>합니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-108">The type of the result produced by <c>visitor</c>.</span></span></typeparam>
        <param name="visitor"><span data-ttu-id="d7a4b-109">특정 형식의 결과 값을 생성하는 형식화된 <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-109">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</span></span></param>
        <summary><span data-ttu-id="d7a4b-110">특정 형식의 결과 값을 생성하는 식의 visitor 패턴을 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-110">Implements the visitor pattern for expressions that produce a result value of a specific type.</span></span></summary>
        <returns><span data-ttu-id="d7a4b-111"><see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />에서 생성한 특정 형식의 결과 값입니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-111">A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d7a4b-112"><paramref name="visitor" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="d7a4b-112"><paramref name="visitor" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Data.Common.CommandTrees.DbExpression&gt; Arguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Data.Common.CommandTrees.DbExpression&gt; Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbArithmeticExpression.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Arguments As IList(Of DbExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Data::Common::CommandTrees::DbExpression ^&gt; ^ Arguments { System::Collections::Generic::IList&lt;System::Data::Common::CommandTrees::DbExpression ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Data.Common.CommandTrees.DbExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7a4b-113">현재 인수를 정의하는 <see cref="T:System.Data.Common.CommandTrees.DbExpression" />요소의 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-113">Gets the list of <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> elements that define the current arguments.</span></span></summary>
        <value><span data-ttu-id="d7a4b-114"><see cref="T:System.Data.Common.CommandTrees.DbExpression" /> 요소의 크기가 고정된 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-114">A fixed-size list of <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> elements.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7a4b-115"><xref:System.Data.Common.CommandTrees.DbArithmeticExpression>에서는 인수 목록에 있는 모든 요소의 결과 형식이 일반 숫자 형식이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="d7a4b-115">The <xref:System.Data.Common.CommandTrees.DbArithmeticExpression> requires that all the elements in the arguments list have a common numeric result type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>