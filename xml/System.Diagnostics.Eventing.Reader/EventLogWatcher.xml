<Type Name="EventLogWatcher" FullName="System.Diagnostics.Eventing.Reader.EventLogWatcher">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="beca2390f45a9d8d21f6a5a5421c445a24b825f1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37665827" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLogWatcher : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogWatcher extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLogWatcher&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogWatcher : IDisposable" />
  <TypeSignature Language="F#" Value="type EventLogWatcher = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="72804-101">들어오는 이벤트를 구독할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="72804-101">Allows you to subscribe to incoming events.</span>
      </span>
      <span data-ttu-id="72804-102">원하는 이벤트가 이벤트 로그에 게시될 때마다 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 이벤트가 발생하고 이 이벤트를 처리하는 메서드가 실행됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="72804-102">Each time a desired event is published to an event log, the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised, and the method that handles this event will be executed.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="72804-103">이 클래스의 인스턴스를 만들 <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> 이벤트 구독에 대 한 쿼리를 지정 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="72804-103">The instances of this class are created from <xref:System.Diagnostics.Eventing.Reader.EventLogQuery> objects, which specify a query for the event subscription.</span></span> <span data-ttu-id="72804-104">쿼리에 표현된 조건에 맞는 이벤트가 기록되면 <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="72804-104">When an event is logged that matches the criteria expressed in the query, then the <xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten> event is raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="72804-105">예를 들어이 클래스를 사용 하 여 코드 참조 [방법: 이벤트 로그의 이벤트를 구독할](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4)합니다.</span><span class="sxs-lookup"><span data-stu-id="72804-105">For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72804-106">
            <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-106">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.Reader.EventLogWatcher : System.Diagnostics.Eventing.Reader.EventLogQuery -&gt; System.Diagnostics.Eventing.Reader.EventLogWatcher" Usage="new System.Diagnostics.Eventing.Reader.EventLogWatcher eventQuery" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="72804-107">이벤트 구독에 대한 쿼리를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-107">Specifies a query for the event subscription.</span>
          </span>
          <span data-ttu-id="72804-108">쿼리에 표현된 조건에 맞는 이벤트가 기록되면 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 이벤트가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-108">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72804-109">이벤트 쿼리를 지정하여 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-109">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.Reader.EventLogWatcher : string -&gt; System.Diagnostics.Eventing.Reader.EventLogWatcher" Usage="new System.Diagnostics.Eventing.Reader.EventLogWatcher path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="72804-110">이벤트에 대한 이벤트 로그 모니터의 경로 또는 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-110">The path or name of the event log monitor for events.</span>
          </span>
          <span data-ttu-id="72804-111">이 이벤트 로그에 이벤트가 기록되면 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 이벤트가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-111">If any event is logged in this event log, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72804-112">이벤트 로그에 대한 이름 또는 경로를 지정하여 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-112">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying the name or path to an event log.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, class System.Diagnostics.Eventing.Reader.EventBookmark bookmark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery, bookmark As EventBookmark)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery, System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.Reader.EventLogWatcher : System.Diagnostics.Eventing.Reader.EventLogQuery * System.Diagnostics.Eventing.Reader.EventBookmark -&gt; System.Diagnostics.Eventing.Reader.EventLogWatcher" Usage="new System.Diagnostics.Eventing.Reader.EventLogWatcher (eventQuery, bookmark)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="72804-113">이벤트 구독에 대한 쿼리를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-113">Specifies a query for the event subscription.</span>
          </span>
          <span data-ttu-id="72804-114">쿼리에 표현된 조건에 맞는 이벤트가 기록되면 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 이벤트가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-114">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <param name="bookmark">
          <span data-ttu-id="72804-115">이벤트 로그 또는 이벤트 스트림의 시작 위치로 사용되는 책갈피(자리 표시자)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-115">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span>
          </span>
          <span data-ttu-id="72804-116">책갈피 이벤트보다 나중에 기록되는 이벤트만 쿼리에서 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-116">Only events that have been logged after the bookmark event will be returned by the query.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72804-117">이벤트 쿼리 및 쿼리의 시작 위치로 사용되는 책갈피를 지정하여 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-117">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query and a bookmark that is used as starting position for the query.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, class System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventQuery As EventLogQuery, bookmark As EventBookmark, readExistingEvents As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLogWatcher(System::Diagnostics::Eventing::Reader::EventLogQuery ^ eventQuery, System::Diagnostics::Eventing::Reader::EventBookmark ^ bookmark, bool readExistingEvents);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.Eventing.Reader.EventLogWatcher : System.Diagnostics.Eventing.Reader.EventLogQuery * System.Diagnostics.Eventing.Reader.EventBookmark * bool -&gt; System.Diagnostics.Eventing.Reader.EventLogWatcher" Usage="new System.Diagnostics.Eventing.Reader.EventLogWatcher (eventQuery, bookmark, readExistingEvents)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventQuery" Type="System.Diagnostics.Eventing.Reader.EventLogQuery" />
        <Parameter Name="bookmark" Type="System.Diagnostics.Eventing.Reader.EventBookmark" />
        <Parameter Name="readExistingEvents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="eventQuery">
          <span data-ttu-id="72804-118">이벤트 구독에 대한 쿼리를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-118">Specifies a query for the event subscription.</span>
          </span>
          <span data-ttu-id="72804-119">쿼리에 표현된 조건에 맞는 이벤트가 기록되면 <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> 이벤트가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-119">When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</span>
          </span>
        </param>
        <param name="bookmark">
          <span data-ttu-id="72804-120">이벤트 로그 또는 이벤트 스트림의 시작 위치로 사용되는 책갈피(자리 표시자)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-120">The bookmark (placeholder) used as a starting position in the event log or stream of events.</span>
          </span>
          <span data-ttu-id="72804-121">책갈피 이벤트보다 나중에 기록되는 이벤트만 쿼리에서 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-121">Only events that have been logged after the bookmark event will be returned by the query.</span>
          </span>
        </param>
        <param name="readExistingEvents">
          <span data-ttu-id="72804-122">이벤트 로그에 이미 있는 이벤트를 읽을지 여부를 결정하는 부울 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-122">A Boolean value that determines whether to read the events that already exist in the event log.</span>
          </span>
          <span data-ttu-id="72804-123">이 값이 <see langword="true" />이면 기존 이벤트를 읽고, 이 값이 <see langword="false" />이면 기존 이벤트를 읽지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-123">If this value is <see langword="true" />, then the existing events are read and if this value is <see langword="false" />, then the existing events are not read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72804-124">이벤트 쿼리, 쿼리의 시작 위치로 사용되는 책갈피 및 이벤트 로그에 이미 있는 이벤트를 읽을지 여부를 결정하는 부울 값을 지정하여 <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-124">Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="72804-125">이 개체에서 사용하는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-125">Releases the resources used by this object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="eventLogWatcher.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="72804-126">이 개체에서 사용하는 리소스를 모두 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-126">Releases all the resources used by this object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="eventLogWatcher.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="72804-127">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-127">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="72804-128">이 개체에서 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-128">Releases the unmanaged resources used by this object, and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="72804-129">이 개체에서 이벤트 대리자에 이벤트를 전달하는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-129">Determines whether this object starts delivering events to the event delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="72804-130">이 개체가 이벤트 대리자에 이벤트를 전달할 수 있으면 <see langword="true" />를 반환하고, 이 개체가 전달을 중지했으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-130">Returns <see langword="true" /> when this object can deliver events to the event delegate, and returns <see langword="false" /> when this object has stopped delivery.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventRecordWritten">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; EventRecordWritten;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; EventRecordWritten" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />
      <MemberSignature Language="VB.NET" Value="Public Event EventRecordWritten As EventHandler(Of EventRecordWrittenEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Diagnostics::Eventing::Reader::EventRecordWrittenEventArgs ^&gt; ^ EventRecordWritten;" />
      <MemberSignature Language="F#" Value="member this.EventRecordWritten : EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; " Usage="member this.EventRecordWritten : System.EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="72804-131">이 개체의 이벤트 쿼리에 지정된 조건에 맞는 이벤트가 게시될 때마다 호출되는 대리자(이벤트 처리기 메서드)를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="72804-131">Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="72804-132">예를 들어이 클래스를 사용 하 여 코드 참조 [방법: 이벤트 로그의 이벤트를 구독할](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4)합니다.</span><span class="sxs-lookup"><span data-stu-id="72804-132">For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/library/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>