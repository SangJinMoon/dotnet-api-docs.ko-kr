<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SafeBuffer.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac575b109650bc09c5660bda32818a0982011ca6ad0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75b109650bc09c5660bda32818a0982011ca6ad0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Provides a controlled memory buffer that can be used for reading and writing.</source>
          <target state="translated">읽기 및 쓰기에 사용할 수 있는 제어되는 메모리 버퍼를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.</source>
          <target state="translated">제어되는 버퍼 외부의 메모리에 액세스(언더런 및 오버런)하려고 하면 예외가 발생합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>You must call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=nameWithType&gt;</ph> method before you use any instance of <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>.</source>
          <target state="translated">호출 해야 합니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Initialize%2A?displayProperty=nameWithType&gt;</ph> 메서드의 모든 인스턴스를 사용 하기 전에 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>To avoid races when you store an instance of a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph> object in a static variable, you should use one of the following approaches:</source>
          <target state="translated">인스턴스를 저장 하는 경우 경합을 방지 하기 위해는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph> 개체를 정적 변수에 다음 방법 중 하나를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Create a lock when publishing the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>.</source>
          <target state="translated">게시할 때 잠금을 만듭니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Create a local variable, initialize the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>, and then assign the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph> to the static variable, for example, by using the <ph id="ph3">&lt;xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">로컬 변수를 초기화할 만들기는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph>, 한 다음 할당는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer&gt;</ph> 를 정적 변수에 예를 들어, 사용 하 여는 <ph id="ph3">&lt;xref:System.Threading.Interlocked.CompareExchange%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Assignments in a static class constructor are implicitly locked.</source>
          <target state="translated">정적 클래스 생성자에서 암시적으로 잠깁니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to reliably release the handle during the finalization phase; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to prevent reliable release (not recommended).</source>
          <target state="translated">종료 단계에서 안정적으로 핸들을 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 안정적으로 해제되지 않게 하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다(권장되지 않음).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> class, and specifies whether the buffer handle is to be reliably released.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> 클래스의 새 인스턴스를 만들고 버퍼 핸들이 안정적으로 해제될지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>A byte pointer, passed by reference, to receive the pointer from within the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> 개체 내부에서 포인터를 받기 위해 참조에서 전달하는 바이트 포인터입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>You must set this pointer to <ph id="ph1">&lt;see langword="null" /&gt;</ph> before you call this method.</source>
          <target state="translated">이 메서드를 호출하기 전에 이 포인터를 <ph id="ph1">&lt;see langword="null" /&gt;</ph>로 설정해야 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>Obtains a pointer from a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> object for a block of memory.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> 개체에서 메모리 블록에 대한 포인터를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>When <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> returns, you should perform bounds checking by verifying that the <ph id="ph2">`pointer`</ph> parameter is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> 반환 범위 있는지 확인 하 여 검사를 수행 해야는 <ph id="ph2">`pointer`</ph> 매개 변수는 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>If it is not <ph id="ph1">`null`</ph>, you must call the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=nameWithType&gt;</ph> method in a constrained execution region (CER).</source>
          <target state="translated">없으면 <ph id="ph1">`null`</ph>를 호출 해야 합니다는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeBuffer.ReleasePointer%2A?displayProperty=nameWithType&gt;</ph> (CER) 제약이 있는 실행 영역에는 메서드.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=nameWithType&gt;</ph> method and exposes the pointer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> 호출 된 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A?displayProperty=nameWithType&gt;</ph> 메서드 포인터를 노출 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Read%2A&gt;</ph> method, it does not change the current position of the pointer.</source>
          <target state="translated">와 달리는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.Read%2A&gt;</ph> 메서드, 포인터의 현재 위치를 변경 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>The following exampledemonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> method:</source>
          <target state="translated">다음 exampledemonstrates 사용 하는 방법의 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.SafeBuffer.AcquirePointer%2A&gt;</ph> 메서드:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>If you cast <ph id="ph1">`pointer`</ph> (which is a pointer to a byte) as a pointer to a different type (T*), you may have pointer alignment issues.</source>
          <target state="translated">캐스팅 하는 경우 <ph id="ph1">`pointer`</ph> (되는 바이트에 대 한 포인터)를 다른 유형 (T *) 포인터로 포인터 맞춤 문제가 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>You must take responsibility for all bounds checking with this pointer.</source>
          <target state="translated">이 포인터를 확인 하 여 모든 범위에 대 한 책임을 수행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> 메서드가 호출되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
          <source>Gets the size of the buffer, in bytes.</source>
          <target state="translated">버퍼의 크기(바이트)를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
          <source>The number of bytes in the memory buffer.</source>
          <target state="translated">메모리 버퍼의 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> 메서드가 호출되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>Specifies the size of the memory buffer to allocate.</source>
          <target state="translated">할당할 메모리 버퍼의 크기를 지정합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.SafeBuffer">
          <source>You must call this method before you use the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source>The number of bytes in the buffer.</source>
          <target state="translated">버퍼의 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source>Defines the allocation size of the memory region in bytes.</source>
          <target state="translated">메모리 영역의 할당 크기(바이트)를 정의합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source>You must call this method before you use the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph> is greater than the available address space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numBytes" /&gt;</ph>가 사용 가능한 주소 공간보다 큽니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>The number of elements in the buffer.</source>
          <target state="translated">버퍼의 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>The size of each element in the buffer.</source>
          <target state="translated">버퍼의 각 요소 크기입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>Specifies the allocation size of the memory buffer by using the specified number of elements and element size.</source>
          <target state="translated">지정된 요소 수 및 요소 크기를 사용하여 메모리 버퍼의 할당 크기를 지정합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>You must call this method before you use the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>This method defines the required size of the memory region as the number of elements in an array multiplied by the size of each element.</source>
          <target state="translated">이 메서드는 각 요소의 크기와 곱하면 배열의 요소 수와 필요한 크기의 메모리 영역을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="sizeOfEachElement" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sizeOfEachElement" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> multiplied by <ph id="ph2">&lt;paramref name="sizeOfEachElement" /&gt;</ph> is greater than the available address space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph>에 <ph id="ph2">&lt;paramref name="sizeOfEachElement" /&gt;</ph>를 곱한 크기가 사용 가능한 주소 공간보다 큽니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>The value type to allocate memory for.</source>
          <target state="translated">메모리를 할당할 값 형식입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>The number of elements of the value type to allocate memory for.</source>
          <target state="translated">메모리를 할당할 값 형식의 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>Defines the allocation size of the memory region by specifying the number of value types.</source>
          <target state="translated">값 형식의 수를 지정하여 메모리 영역의 할당 크기를 정의합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>You must call this method before you use the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph> multiplied by the size of each element is greater than the available address space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="numElements" /&gt;</ph>는 각 요소의 크기를 곱한 것으로 사용 가능한 주소 공간보다 큽니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>The value type to read.</source>
          <target state="translated">읽을 값 형식입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>The location from which to read the value type.</source>
          <target state="translated">값 형식을 읽어올 위치입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>You may have to consider alignment issues.</source>
          <target state="translated">정렬 문제를 고려해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>Reads a value type from memory at the specified offset.</source>
          <target state="translated">메모리의 지정된 오프셋 위치에서 값 형식을 읽습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>The value type that was read from memory.</source>
          <target state="translated">메모리에서 읽어온 값 형식입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> 메서드가 호출되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The value type to read.</source>
          <target state="translated">읽을 값 형식입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The location from which to start reading.</source>
          <target state="translated">읽기를 시작할 위치입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The output array to write to.</source>
          <target state="translated">쓸 출력 배열입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The location in the output array to begin writing to.</source>
          <target state="translated">출력 배열에서 쓰기를 시작할 위치입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The number of value types to read from the input array and to write to the output array.</source>
          <target state="translated">입력 배열에서 읽어서 출력 배열에 쓸 값 형식의 수입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index.</source>
          <target state="translated">메모리의 오프셋 시작 위치에서 지정된 수의 값 형식을 읽어서 이를 배열의 인덱스 시작 위치에 씁니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The length of the array minus the index is less than <ph id="ph1">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">배열에서 인덱스를 뺀 길이가 <ph id="ph1">&lt;paramref name="count" /&gt;</ph>보다 작은 경우</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> 메서드가 호출되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
          <source>Releases a pointer that was obtained by the <ph id="ph1">&lt;see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /&gt;</ph> 메서드에서 가져온 포인터를 해제합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
          <source>After this method returns, the pointer cannot be used.</source>
          <target state="translated">이 메서드가 반환 된 후 포인터를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> 메서드가 호출되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>The value type to write.</source>
          <target state="translated">쓸 값 형식입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>The location at which to start writing.</source>
          <target state="translated">쓰기를 시작할 위치입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>You may have to consider alignment issues.</source>
          <target state="translated">정렬 문제를 고려해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>The value to write.</source>
          <target state="translated">작성할 값입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>Writes a value type to memory at the given location.</source>
          <target state="translated">메모리의 지정된 위치에 값 형식을 씁니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>This method is equivalent to the following code:</source>
          <target state="translated">이 메서드는 다음 코드와 같습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> 메서드가 호출되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The value type to write.</source>
          <target state="translated">쓸 값 형식입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The location in memory to write to.</source>
          <target state="translated">메모리에서 쓸 위치입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The input array.</source>
          <target state="translated">입력 배열입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The offset in the array to start reading from.</source>
          <target state="translated">배열에서 읽기를 시작할 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The number of value types to write.</source>
          <target state="translated">쓸 값 형식의 수입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.</source>
          <target state="translated">입력 배열의 지정된 위치에서 시작하여 바이트를 읽어 메모리 위치에 지정된 수의 값 형식을 씁니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>Each element in the input array consists of the generic value type of the class.</source>
          <target state="translated">클래스의 제네릭 값 형식 입력된 배열의 각 요소에에서 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The length of the input array minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">입력 배열에서 <ph id="ph1">&lt;paramref name="index" /&gt;</ph>를 뺀 길이가 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>보다 작습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /&gt;</ph> 메서드가 호출되지 않았습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>