<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="39f080201b9247188e6562c5fd981137ce4f6fec" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36538233" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2e2e9-101">메서드 호출 처리를 위한 사용자 지정 래퍼를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e2e9-101">Provides custom wrappers for handling method calls.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e2e9-102">마샬러와 새 인터페이스 이전 기능 사이의 다리 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-102">A marshaler provides a bridge between the functionality of old and new interfaces.</span></span> <span data-ttu-id="2e2e9-103">사용자 지정 마샬링 다음과 같은 이점을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-103">Custom marshaling provides the following benefits:</span></span>  
  
-   <span data-ttu-id="2e2e9-104">새 인터페이스를 구현 하는 서버도 사용 하려면 이전 인터페이스와 함께 작동 하도록 설계 된 클라이언트 응용 프로그램 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-104">It enables client applications that were designed to work with an old interface to also work with servers that implement a new interface.</span></span>  
  
-   <span data-ttu-id="2e2e9-105">클라이언트 응용 프로그램을 새 인터페이스를 사용 하도록 빌드된 이전 인터페이스를 구현 하는 서버를 작업할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-105">It enables client applications built to work with a new interface to work with servers that implement an old interface.</span></span>  
  
 <span data-ttu-id="2e2e9-106">다양 한 마샬링 동작을 소개 하는 하거나에 COM 구성 요소 개체 모델 ()를 다른 방식으로 노출 되는 인터페이스를 사용 하도록 설정한 경우에 interop 마샬러만 사용 하는 대신 사용자 지정 마샬러를 디자인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-106">If you have an interface that introduces different marshaling behavior or that is exposed to the Component Object Model (COM) in a different way, you can design a custom marshaler instead of using the interop marshaler.</span></span> <span data-ttu-id="2e2e9-107">사용자 지정 마샬러를 사용 하 여 새.NET Framework 구성 요소 및 기존 COM 구성 요소 간 구분을 최소화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-107">By using a custom marshaler, you can minimize the distinction between new .NET Framework components and existing COM components.</span></span>  
  
 <span data-ttu-id="2e2e9-108">예를 들어, 이라는 관리 되는 인터페이스를 개발 하는 경우 `INew`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-108">For example, suppose that you are developing a managed interface called `INew`.</span></span> <span data-ttu-id="2e2e9-109">COM에는 표준 COM 호출 가능 래퍼 (CCW)를 통해이 인터페이스를 노출 하는 경우 관리 되는 인터페이스와 동일한 메서드를 포함 하 고는 interop 마샬러만에 기본 제공 마샬링 규칙을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-109">When this interface is exposed to COM through a standard COM callable wrapper (CCW), it has the same methods as the managed interface and uses the marshaling rules built into the interop marshaler.</span></span> <span data-ttu-id="2e2e9-110">이제 가정해 잘 알려진 COM 인터페이스 `IOld` 와 동일한 기능을 이미 제공 된 `INew` 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-110">Now suppose that a well-known COM interface called `IOld` already provides the same functionality as the `INew` interface.</span></span> <span data-ttu-id="2e2e9-111">사용자 지정 마샬러를 디자인 하 여 관리 되지 않는 구현을 제공할 수 있습니다 `IOld` 의 관리 되는 구현에 대 한 호출을 위임 하는 `INew` 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-111">By designing a custom marshaler, you can provide an unmanaged implementation of `IOld` that simply delegates the calls to the managed implementation of the `INew` interface.</span></span> <span data-ttu-id="2e2e9-112">따라서 사용자 지정 마샬러는 스레드와 관리 되지 않는 인터페이스 간의 다리 역할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-112">Therefore, the custom marshaler acts as a bridge between the managed and unmanaged interfaces.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2e2e9-113">사용자 지정 마샬러 디스패치 전용 인터페이스에서 관리 되는 코드에서 비관리 코드를 호출할 때는 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-113">Custom marshalers are not invoked when calling from managed code to unmanaged code on a dispatch-only interface.</span></span>  
  
## <a name="defining-the-marshaling-type"></a><span data-ttu-id="2e2e9-114">마샬링 형식 정의</span><span class="sxs-lookup"><span data-stu-id="2e2e9-114">Defining the Marshaling Type</span></span>  
 <span data-ttu-id="2e2e9-115">사용자 지정 마샬러를 작성 하기 전에 관리 되는 인터페이스와 관리 되지 않는 인터페이스를 마샬링하는 정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-115">Before you can build a custom marshaler, you must define the managed and unmanaged interfaces that will be marshaled.</span></span> <span data-ttu-id="2e2e9-116">이러한 인터페이스는 일반적으로 동일한 기능을 수행 하지만 스레드와 관리 되지 않는 개체에 다르게 노출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-116">These interfaces commonly perform the same function but are exposed differently to managed and unmanaged objects.</span></span>  
  
 <span data-ttu-id="2e2e9-117">관리 되는 컴파일러에서 메타 데이터에서 관리 되는 인터페이스 및 결과 인터페이스는 다른 관리 되는 인터페이스를 같습니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-117">A managed compiler produces a managed interface from metadata, and the resulting interface looks like any other managed interface.</span></span> <span data-ttu-id="2e2e9-118">다음 예제에서는 일반적인 인터페이스를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-118">The following example shows a typical interface.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 <span data-ttu-id="2e2e9-119">관리 되지 않는 형식에서 언어 IDL (인터페이스 정의)를 정의 하 고 인터페이스 정의 언어 (MIDL) 컴파일러를 사용 하 여 컴파일합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-119">You define the unmanaged type in Interface Definition Language (IDL) and compile it with the Microsoft Interface Definition Language (MIDL) compiler.</span></span> <span data-ttu-id="2e2e9-120">라이브러리 문 내에서 인터페이스를 정의 하 고 다음 예제에서 보여 주듯이 인터페이스 ID 범용 고유 식별자 (UUID) 특성으로 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-120">You define the interface within a library statement and assign it an interface ID with the universal unique identifier (UUID) attribute, as the following example demonstrates.</span></span>  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 <span data-ttu-id="2e2e9-121">MIDL 컴파일러에는 여러 개의 출력 파일이 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-121">The MIDL compiler produces several output files.</span></span> <span data-ttu-id="2e2e9-122">를 Old.idl에서 인터페이스를 정의 하는 경우 출력 파일은 Old_i.c 정의 `const` 다음 예제에서는 인터페이스의 인터페이스 (IID) 식별자와 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-122">If the interface is defined in Old.idl, the output file Old_i.c defines a `const` variable with the interface identifier (IID) of the interface, as the following example demonstrates.</span></span>  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 <span data-ttu-id="2e2e9-123">Old.h 파일은 또한 MIDL에 의해 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-123">The Old.h file is also produced by MIDL.</span></span> <span data-ttu-id="2e2e9-124">C + + 소스 코드에 포함 될 수 있는 인터페이스의 c + + 정의 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-124">It contains a C++ definition of the interface that can be included in your C++ source code.</span></span>  
  
## <a name="implementing-the-icustommarshaler-interface"></a><span data-ttu-id="2e2e9-125">ICustomMarshaler 인터페이스 구현</span><span class="sxs-lookup"><span data-stu-id="2e2e9-125">Implementing the ICustomMarshaler Interface</span></span>  
 <span data-ttu-id="2e2e9-126">사용자 지정 마샬러에서 구현 해야 합니다는 <xref:System.Runtime.InteropServices.ICustomMarshaler> 런타임에 적절 한 래퍼를 제공 하는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-126">Your custom marshaler must implement the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface to provide the appropriate wrappers to the runtime.</span></span>  
  
 <span data-ttu-id="2e2e9-127">다음 C# 코드에서 모든 사용자 지정 마샬러 구현 해야 하는 기본 인터페이스를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-127">The following C# code displays the base interface that must be implemented by all custom marshalers.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <span data-ttu-id="2e2e9-128"><xref:System.Runtime.InteropServices.ICustomMarshaler> 인터페이스 변환 지원, 정리 지원 및 데이터를 마샬링할 수에 대 한 정보를 제공 하는 메서드가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-128">The <xref:System.Runtime.InteropServices.ICustomMarshaler> interface includes methods that provide conversion support, cleanup support, and information about the data to be marshaled.</span></span>  
  
|<span data-ttu-id="2e2e9-129">작업의 유형</span><span class="sxs-lookup"><span data-stu-id="2e2e9-129">Type of operation</span></span>|<span data-ttu-id="2e2e9-130">ICustomMarshaler 메서드</span><span class="sxs-lookup"><span data-stu-id="2e2e9-130">ICustomMarshaler method</span></span>|<span data-ttu-id="2e2e9-131">설명</span><span class="sxs-lookup"><span data-stu-id="2e2e9-131">Description</span></span>|  
|-----------------------|-----------------------------|-----------------|  
|<span data-ttu-id="2e2e9-132">변환 (코드에서 관리 되는 코드를 네이티브)</span><span class="sxs-lookup"><span data-stu-id="2e2e9-132">Conversion (from native to managed code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|<span data-ttu-id="2e2e9-133">관리 되는 개체를 네이티브 데이터에 대 한 포인터를 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-133">Marshals a pointer to native data into a managed object.</span></span> <span data-ttu-id="2e2e9-134">이 메서드는 사용자 지정 런타임 호출 가능 래퍼 RCW ()를 인수로 전달 되는 관리 되지 않는 인터페이스를 마샬링할 수 있는 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-134">This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</span></span> <span data-ttu-id="2e2e9-135">마샬러는 해당 형식에 대 한 사용자 지정 RCW의 인스턴스를 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-135">The marshaler should return an instance of the custom RCW for that type.</span></span>|  
|<span data-ttu-id="2e2e9-136">변환 (코드에서 네이티브로 관리 코드)</span><span class="sxs-lookup"><span data-stu-id="2e2e9-136">Conversion (from managed to native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|<span data-ttu-id="2e2e9-137">관리 되는 개체를 네이티브 데이터에 대 한 포인터를 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-137">Marshals a managed object into a pointer to native data.</span></span> <span data-ttu-id="2e2e9-138">이 메서드는 사용자 지정 COM 호출 가능 래퍼 (CCW)를 인수로 전달 되는 관리 되는 인터페이스를 마샬링할 수 있는 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-138">This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</span></span> <span data-ttu-id="2e2e9-139">마샬러는 해당 형식에 대 한 사용자 지정 CCW의 인스턴스를 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-139">The marshaler should return an instance of the custom CCW for that type.</span></span>|  
|<span data-ttu-id="2e2e9-140">네이티브 코드) (의 정리</span><span class="sxs-lookup"><span data-stu-id="2e2e9-140">Cleanup (of native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|<span data-ttu-id="2e2e9-141">사용에서 반환 되는 원시 데이터 (CCW)를 정리 하려면 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-141">Enables the marshaler to clean up the native data (the CCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> method.</span></span>|  
|<span data-ttu-id="2e2e9-142">관리 코드) (의 정리</span><span class="sxs-lookup"><span data-stu-id="2e2e9-142">Cleanup (of managed code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|<span data-ttu-id="2e2e9-143">사용 하 여 반환 되는 관리 되는 데이터 (RCW)를 정리 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-143">Enables the marshaler to clean up the managed data (the RCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> method.</span></span>|  
|<span data-ttu-id="2e2e9-144">(네이티브 코드)에 대 한 정보</span><span class="sxs-lookup"><span data-stu-id="2e2e9-144">Information (about native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|<span data-ttu-id="2e2e9-145">마샬링할 수를 관리 되지 않는 데이터의 크기를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-145">Returns the size of the unmanaged data to be marshaled.</span></span>|  
  
### <a name="conversion"></a><span data-ttu-id="2e2e9-146">변환</span><span class="sxs-lookup"><span data-stu-id="2e2e9-146">Conversion</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="2e2e9-147">관리 되는 개체를 네이티브 데이터에 대 한 포인터를 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-147">Marshals a pointer to native data into a managed object.</span></span> <span data-ttu-id="2e2e9-148">이 메서드는 사용자 지정 런타임 호출 가능 래퍼 RCW ()를 인수로 전달 되는 관리 되지 않는 인터페이스를 마샬링할 수 있는 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-148">This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</span></span> <span data-ttu-id="2e2e9-149">마샬러는 해당 형식에 대 한 사용자 지정 RCW의 인스턴스를 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-149">The marshaler should return an instance of the custom RCW for that type.</span></span>  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="2e2e9-150">관리 되는 개체를 네이티브 데이터에 대 한 포인터를 마샬링합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-150">Marshals a managed object into a pointer to native data.</span></span> <span data-ttu-id="2e2e9-151">이 메서드는 사용자 지정 COM 호출 가능 래퍼 (CCW)를 인수로 전달 되는 관리 되는 인터페이스를 마샬링할 수 있는 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-151">This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</span></span> <span data-ttu-id="2e2e9-152">마샬러는 해당 형식에 대 한 사용자 지정 CCW의 인스턴스를 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-152">The marshaler should return an instance of the custom CCW for that type.</span></span>  
  
### <a name="cleanup"></a><span data-ttu-id="2e2e9-153">정리</span><span class="sxs-lookup"><span data-stu-id="2e2e9-153">Cleanup</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="2e2e9-154">사용에서 반환 되는 원시 데이터 (CCW)를 정리 하려면 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-154">Enables the marshaler to clean up the native data (the CCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> method.</span></span>  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="2e2e9-155">사용 하 여 반환 되는 관리 되는 데이터 (RCW)를 정리 마샬러가 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-155">Enables the marshaler to clean up the managed data (the RCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> method.</span></span>  
  
### <a name="size-information"></a><span data-ttu-id="2e2e9-156">크기 정보</span><span class="sxs-lookup"><span data-stu-id="2e2e9-156">Size Information</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="2e2e9-157">마샬링할 수를 관리 되지 않는 데이터의 크기를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-157">Returns the size of the unmanaged data to be marshaled.</span></span>  
  
## <a name="implementing-the-getinstance-method"></a><span data-ttu-id="2e2e9-158">GetInstance 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-158">Implementing the GetInstance Method</span></span>  
 <span data-ttu-id="2e2e9-159">구현 외에도 <xref:System.Runtime.InteropServices.ICustomMarshaler> 인터페이스를 사용자 지정 마샬러 구현 해야 합니다는 `static` 라는 메서드가 `GetInstance` 수락 하는 <xref:System.String> 매개 변수로 반환 형식이 고 <xref:System.Runtime.InteropServices.ICustomMarshaler>합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-159">In addition to implementing the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface, custom marshalers must implement a `static` method called `GetInstance` that accepts a <xref:System.String> as a parameter and has a return type of <xref:System.Runtime.InteropServices.ICustomMarshaler>.</span></span> <span data-ttu-id="2e2e9-160">이 `static` 사용자 지정 마샬러의 인스턴스를 인스턴스화하는 공용 언어 런타임의 COM interop 계층 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-160">This `static` method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler.</span></span> <span data-ttu-id="2e2e9-161">에 전달 되는 문자열 `GetInstance` 는 메서드가 반환된 하는 사용자 지정 마샬러를 사용자 지정 하는 데 사용할 수 있는 쿠키입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-161">The string that is passed to `GetInstance` is a cookie that the method can use to customize the returned custom marshaler.</span></span>  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a><span data-ttu-id="2e2e9-162">MarshalAsAttribute를 적용합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-162">Applying MarshalAsAttribute</span></span>  
 <span data-ttu-id="2e2e9-163">적용 해야 하는 사용자 지정 마샬러를 사용 하려면는 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 특성을 매개 변수 또는 마샬링할 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-163">To use a custom marshaler, you must apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute to the parameter or field that is being marshaled.</span></span>  
  
 <span data-ttu-id="2e2e9-164">전달 해야 합니다는 <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> 열거형 값의 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-164">You must also pass the <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> enumeration value to the <xref:System.Runtime.InteropServices.MarshalAsAttribute> constructor.</span></span> <span data-ttu-id="2e2e9-165">또한 지정 해야 합니다는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 다음 매개 변수 중 하나가 지정 된 필드:</span><span class="sxs-lookup"><span data-stu-id="2e2e9-165">In addition, you must specify the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field with one of the following named parameters:</span></span>  
  
-   <span data-ttu-id="2e2e9-166"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (필수): 사용자 지정 마샬러의 어셈블리 한정 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-166"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (required): The assembly-qualified name of the custom marshaler.</span></span> <span data-ttu-id="2e2e9-167">네임 스페이스 및 사용자 지정 마샬러는 클래스 이름이 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-167">The name should include the namespace and class of the custom marshaler.</span></span> <span data-ttu-id="2e2e9-168">사용자 지정 마샬러에 사용 되는 어셈블리를 정의 하지 않은 경우에 정의 되어 있는 어셈블리의 이름을 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-168">If the custom marshaler is not defined in the assembly it is used in, you must specify the name of the assembly in which it is defined.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="2e2e9-169">사용할 수는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> 필드 대신는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-169">You can use the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> field instead of the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field.</span></span> <span data-ttu-id="2e2e9-170"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> 쉽게 지정할 수 있는 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-170"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> takes a type that is easier to specify.</span></span>  
  
-   <span data-ttu-id="2e2e9-171"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (선택 사항): 사용자 지정 마샬러에 전달 되는 쿠키입니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-171"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (optional): A cookie that is passed to the custom marshaler.</span></span> <span data-ttu-id="2e2e9-172">마샬러에 추가 정보를 제공 하는 쿠키를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-172">You can use the cookie to provide additional information to the marshaler.</span></span> <span data-ttu-id="2e2e9-173">예를 들어 동일한 마샬러는 다양 한 래퍼를 제공 하는 데 사용 되, 쿠키는 특정 래퍼를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-173">For example, if the same marshaler is used to provide a number of wrappers, the cookie identifies a specific wrapper.</span></span> <span data-ttu-id="2e2e9-174">쿠키에 전달 되는 `GetInstance` 마샬러의 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-174">The cookie is passed to the `GetInstance` method of the marshaler.</span></span>  
  
 <span data-ttu-id="2e2e9-175"><xref:System.Runtime.InteropServices.MarshalAsAttribute> 특성은 적절 한 래퍼를 활성화할 수 있도록 사용자 지정 마샬러를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-175">The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute identifies the custom marshaler so it can activate the appropriate wrapper.</span></span> <span data-ttu-id="2e2e9-176">공용 언어 런타임의 interop 서비스는 다음 특성을 조사 하 고 사용자 지정 마샬러 첫 번째 시간 마샬링할 인수 (매개 변수 또는 필드) 요구를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-176">The common language runtime's interop service then examines the attribute and creates the custom marshaler the first time the argument (parameter or field) needs to be marshaled.</span></span>  
  
 <span data-ttu-id="2e2e9-177">호출 된 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 및 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 메서드 호출을 처리 하는 올바른 래퍼를 활성화 하려면 사용자 지정 마샬러를 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-177">The runtime then calls the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> and <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> methods on the custom marshaler to activate the correct wrapper to handle the call.</span></span>  
  
## <a name="using-a-custom-marshaler"></a><span data-ttu-id="2e2e9-178">사용자 지정 마샬러를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="2e2e9-178">Using a Custom Marshaler</span></span>  
 <span data-ttu-id="2e2e9-179">사용자 지정 마샬러 완료 되 면 특정 형식에 대 한 사용자 지정 래퍼로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-179">When the custom marshaler is complete, you can use it as a custom wrapper for a particular type.</span></span> <span data-ttu-id="2e2e9-180">다음 예제에서는의 정의 `IUserData` 관리 되는 인터페이스:</span><span class="sxs-lookup"><span data-stu-id="2e2e9-180">The following example shows the definition of the `IUserData` managed interface:</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 <span data-ttu-id="2e2e9-181">다음 예제에서는 `IUserData` 사용 하 여 인터페이스는 `NewOldMarshaler` 전달 하는 관리 되지 않는 클라이언트 응용 프로그램을 사용 하도록 설정 하려면 사용자 지정 마샬러는 `IOld` 인터페이스는 `DoSomeStuff` 메서드.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-181">In the following example, the `IUserData` interface uses the `NewOldMarshaler` custom marshaler to enable unmanaged client applications to pass an `IOld` interface to the `DoSomeStuff` method.</span></span> <span data-ttu-id="2e2e9-182">에 대 한 관리 되는 설명은 `DoSomeStuff` 메서드는 `INew` 반면 이전 예에서 본 것 처럼 인터페이스의 관리 되지 않는 버전 `DoSomeStuff` 사용는 `IOld` 인터페이스 포인터를 다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-182">The managed description of the `DoSomeStuff` method takes an `INew` interface, as shown in the previous example, whereas the unmanaged version of `DoSomeStuff` takes an `IOld` interface pointer, as shown in the following example.</span></span>  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 <span data-ttu-id="2e2e9-183">관리 되는 정의 의해 생성 된 형식 라이브러리 `IUserData` 표준 정의 하는 대신 다음 예와에서 같이 관리 되지 않는 정의 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-183">The type library that is generated by exporting the managed definition of `IUserData` yields the unmanaged definition shown in this example instead of the standard definition.</span></span> <span data-ttu-id="2e2e9-184"><xref:System.Runtime.InteropServices.MarshalAsAttribute> 에 적용 된 특성의 `INew` 의 관리 되는 정의에 인수는 `DoSomeStuff` 메서드 인수 다음 예제와 같이 사용자 지정 마샬러를 사용 함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-184">The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute applied to the `INew` argument in the managed definition of the `DoSomeStuff` method indicates that the argument uses a custom marshaler, as the following example shows.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 <span data-ttu-id="2e2e9-185">이전 예제에서 첫 번째 매개 변수를 제공 된 <xref:System.Runtime.InteropServices.MarshalAsAttribute> 특성은는 <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> 열거형 값 `UnmanagedType.CustomMarshaler`합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-185">In the previous examples, the first parameter provided to the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute is the <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> enumeration value `UnmanagedType.CustomMarshaler`.</span></span>  
  
 <span data-ttu-id="2e2e9-186">두 번째 매개 변수는 <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 필드 사용자 지정 마샬러의 어셈블리로 한정 된 이름을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="2e2e9-186">The second parameter is the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field, which provides the assembly-qualified name of the custom marshaler.</span></span> <span data-ttu-id="2e2e9-187">이 이름은 네임 스페이스 및 사용자 지정 마샬러는 클래스 (`MarshalType="MyCompany.NewOldMarshaler"`).</span><span class="sxs-lookup"><span data-stu-id="2e2e9-187">This name consists of the namespace and class of the custom marshaler (`MarshalType="MyCompany.NewOldMarshaler"`).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">
          <span data-ttu-id="2e2e9-188">소멸될 관리되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-188">The managed object to be destroyed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e2e9-189">관리되는 데이터가 필요 없는 경우 이 데이터의 필요한 정리 작업을 수행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-189">Performs necessary cleanup of the managed data when it is no longer needed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">
          <span data-ttu-id="2e2e9-190">소멸될 관리되지 않는 데이터에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-190">A pointer to the unmanaged data to be destroyed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e2e9-191">관리되지 않는 데이터가 필요 없는 경우 이 데이터의 필요한 정리 작업을 수행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-191">Performs necessary cleanup of the unmanaged data when it is no longer needed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e2e9-192">마샬링될 네이티브 데이터의 크기를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-192">Returns the size of the native data to be marshaled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e2e9-193">네이티브 데이터의 크기(바이트)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-193">The size, in bytes, of the native data.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">
          <span data-ttu-id="2e2e9-194">변환될 관리되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-194">The managed object to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e2e9-195">관리되는 데이터를 관리되지 않는 데이터로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-195">Converts the managed data to unmanaged data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e2e9-196">관리되는 개체의 COM 뷰에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-196">A pointer to the COM view of the managed object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">
          <span data-ttu-id="2e2e9-197">래핑될 관리되지 않는 형식에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-197">A pointer to the unmanaged data to be wrapped.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e2e9-198">관리되지 않는 데이터를 관리되는 데이터로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-198">Converts the unmanaged data to managed data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e2e9-199">COM 데이터의 관리되는 뷰를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e2e9-199">An object that represents the managed view of the COM data.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>