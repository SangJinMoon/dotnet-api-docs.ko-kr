<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ClassInterfaceType.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5dd6849853fb663f418c52154f9eadb78d4eadd68.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd6849853fb663f418c52154f9eadb78d4eadd68</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.ClassInterfaceType">
          <source>Identifies the type of class interface that is generated for a class.</source>
          <target state="translated">클래스에 대해 생성된 클래스 인터페이스의 형식을 식별합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceType">
          <source>This enumeration is used in conjunction with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> attribute.</source>
          <target state="translated">이 열거형은와 함께에서 사용 되는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceType">
          <source>This example shows how to apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> to a type, setting the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph>.</source>
          <target state="translated">적용 하는 방법을 보여 주는이 예제는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> 설정 형식에는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceType">
          <source>Classes defined this way can be used from unmanaged COM.</source>
          <target state="translated">이러한 방식으로 정의 하는 클래스는 관리 되지 않는 COM에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
          <source>Indicates that the class only supports late binding for COM clients.</source>
          <target state="translated">클래스가 COM 클라이언트에 대해 런타임에 바인딩만 지원함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
          <source>A <ph id="ph1">&lt;see langword="dispinterface" /&gt;</ph> for the class is automatically exposed to COM clients on request.</source>
          <target state="translated">클래스의 <ph id="ph1">&lt;see langword="dispinterface" /&gt;</ph>는 요청 시 COM 클라이언트에 자동으로 노출됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
          <source>The type library produced by <bpt id="p1">[</bpt>Tlbexp.exe (Type Library Exporter)<ept id="p1">](~/docs/framework/tools/tlbexp-exe-type-library-exporter.md)</ept> does not contain type information for the <ph id="ph1">&lt;see langword="dispinterface" /&gt;</ph> in order to prevent clients from caching the DISPIDs of the interface.</source>
          <target state="translated"><bpt id="p1">[</bpt>Tlbexp.exe(Type Library Exporter)<ept id="p1">](~/docs/framework/tools/tlbexp-exe-type-library-exporter.md)</ept>에서 생성된 형식 라이브러리는 클라이언트가 인터페이스의 DISPID를 캐시하지 못하게 하기 위해 <ph id="ph1">&lt;see langword="dispinterface" /&gt;</ph>에 대한 형식 정보를 포함하지 않습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
          <source>The <ph id="ph1">&lt;see langword="dispinterface" /&gt;</ph> does not exhibit the versioning problems described in <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> because clients can only late-bind to the interface.</source>
          <target state="translated">클라이언트는 런타임에만 인터페이스에 바인딩할 수 있으므로 <ph id="ph1">&lt;see langword="dispinterface" /&gt;</ph>에는 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph>에서 설명한 버전 관리 문제가 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
          <source>This is the default setting for <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph>.</source>
          <target state="translated">이 값에 대 한 기본 설정 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
          <source>Indicates that a dual class interface is automatically generated for the class and exposed to COM.</source>
          <target state="translated">이중 클래스 인터페이스가 클래스에 대해 자동으로 생성되고 COM에 노출됨을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
          <source>Type information is produced for the class interface and published in the type library.</source>
          <target state="translated">클래스 인터페이스에 대해 형식 정보가 생성되어 형식 라이브러리에 게시됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
          <source>Using <ph id="ph1">&lt;see langword="AutoDual" /&gt;</ph> is strongly discouraged because of the versioning limitations described in <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph>에서 설명하는 것처럼 버전 관리 제한 때문에 <ph id="ph1">&lt;see langword="AutoDual" /&gt;</ph>은 사용하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.None">
          <source>Indicates that no class interface is generated for the class.</source>
          <target state="translated">해당 클래스에 대해 클래스 인터페이스가 생성되지 않음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.None">
          <source>If no interfaces are implemented explicitly, the class can only provide late-bound access through the <ph id="ph1">&lt;see langword="IDispatch" /&gt;</ph> interface.</source>
          <target state="translated">명시적으로 구현되는 인터페이스가 없으면 런타임에 바인딩될 때 <ph id="ph1">&lt;see langword="IDispatch" /&gt;</ph> 인터페이스를 통해서만 클래스에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.None">
          <source>This is the recommended setting for <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph>.</source>
          <target state="translated">이것이 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph>에 대해 권장되는 설정입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.ClassInterfaceType.None">
          <source>Using <ph id="ph1">&lt;see langword="ClassInterfaceType.None" /&gt;</ph> is the only way to expose functionality through interfaces implemented explicitly by the class.</source>
          <target state="translated">클래스에서 명시적으로 구현한 인터페이스를 통해 기능을 노출시키는 유일한 방법은 <ph id="ph1">&lt;see langword="ClassInterfaceType.None" /&gt;</ph>을 사용하는 것입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.ClassInterfaceType.None">
          <source><bpt id="p1">[</bpt>Tlbexp.exe (Type Library Exporter)<ept id="p1">](~/docs/framework/tools/tlbexp-exe-type-library-exporter.md)</ept> exposes the first public, COM-visible interface implemented by the class as the default interface of the coclass.</source>
          <target state="translated"><bpt id="p1">[</bpt>Tlbexp.exe (형식 라이브러리 내보내기)<ept id="p1">](~/docs/framework/tools/tlbexp-exe-type-library-exporter.md)</ept> 으로 기본 인터페이스가 coclass의 클래스에 의해 구현 첫 번째 공개, COM 노출 인터페이스를 노출 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.ClassInterfaceType.None">
          <source>Beginning with the .NET Framework version 2.0, you can specify the default interface exposed to COM by using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&gt;</ph> attribute.</source>
          <target state="translated">.NET Framework 버전 2.0 부터는 지정할 수 있습니다를 사용 하 여 COM에 노출 되는 기본 인터페이스는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&gt;</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.ClassInterfaceType.None">
          <source>If the class implements no interfaces, the first public, COM-visible interface implemented by a base class becomes the default interface (starting with the most recently derived base class and working backward).</source>
          <target state="translated">클래스 인터페이스가 없는 구현 하는 경우 기본 클래스에서 구현 된 첫 번째 공개, COM 노출 인터페이스 기본 인터페이스 (가장 최근에 파생 된 기본 클래스와 함께 시작 하 고 작업) 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.ClassInterfaceType.None">
          <source>Tlbexp.exe exposes <ph id="ph1">`_Object`</ph> as the default interface if neither the class nor its base classes implement interfaces.</source>
          <target state="translated">Tlbexp.exe 노출 <ph id="ph1">`_Object`</ph> 클래스도 아니고 해당 기본 클래스 인터페이스를 구현 하는 경우 기본 인터페이스로 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>