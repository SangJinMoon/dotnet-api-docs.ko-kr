<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="StructLayoutAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac540521d9554f0cf59a81ca8f000f7fb5aa654a557.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40521d9554f0cf59a81ca8f000f7fb5aa654a557</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>Lets you control the physical layout of the data fields of a class or structure in memory.</source>
          <target state="translated">메모리에 있는 클래스 또는 구조체의 데이터 필드에 대한 실제 레이아웃을 제어할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>You can apply this attribute to classes or structures.</source>
          <target state="translated">이 특성은 클래스 또는 구조체에 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>The common language runtime controls the physical layout of the data fields of a class or structure in managed memory.</source>
          <target state="translated">공용 언어 런타임 클래스 또는 구조체의 관리 되는 메모리의 데이터 필드의 실제 레이아웃을 제어합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>However, if you want to pass the type to unmanaged code, you can use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute to control the unmanaged layout of the type.</source>
          <target state="translated">그러나 해당 형식을 관리 되지 않는 코드에 전달 하려는 경우 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> 특성 형식이 관리 되지 않는 레이아웃을 제어 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>Use the attribute with <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> to force the members to be laid out sequentially in the order they appear.</source>
          <target state="translated">가 있는 특성을 사용 하 여 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> 하며 멤버 순서 대로 순차적으로 레이아웃 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>For , <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> controls both the layout in managed memory and the layout in unmanaged memory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> 모두 관리 되는 메모리의 레이아웃 및 관리 되지 않는 메모리의 레이아웃을 제어 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>For non-blittable types, it controls the layout when the class or structure is marshaled to unmanaged code, but does not control the layout in managed memory.</source>
          <target state="translated">비 blittable 형식 레이아웃 클래스 또는 구조체 비관리 코드로 마샬링되 하지만 관리 되는 메모리의 레이아웃을 제어 하지는 않습니다 때 제어 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>Use the attribute with <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType&gt;</ph> to control the precise position of each data member.</source>
          <target state="translated">가 있는 특성을 사용 하 여 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType&gt;</ph> 각 데이터 멤버의 정확한 위치를 제어할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>This affects both managed and unmanaged layout, for both blittable and non-blittable types.</source>
          <target state="translated">이 둘 다 blittable 형식 및 비 blittable 형식에 대 한 관리 되는 관리 되지 않는 레이아웃을 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>Using <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType&gt;</ph> requires that you use the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.FieldOffsetAttribute&gt;</ph> attribute to indicate the position of each field within the type.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType&gt;</ph> 사용 해야 하는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.FieldOffsetAttribute&gt;</ph> 형식 내에서 각 필드의 위치를 나타내는 특성입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>C#, Visual Basic, and C++ compilers apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential&gt;</ph> layout value to structures by default.</source>
          <target state="translated">C#, Visual Basic 및 c + + 컴파일러에서 적용 된 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential&gt;</ph> 기본적으로 구조에 레이아웃 값입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>For classes, you must apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> value explicitly.</source>
          <target state="translated">클래스에 대 한 적용 해야 합니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> 값을 명시적으로 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> also applies the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute; it always applies the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> value when it imports a type library.</source>
          <target state="translated"><bpt id="p1">[</bpt>Tlbimp.exe (형식 라이브러리 가져오기)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> 도 적용 됩니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> 특성; 항상 적용는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> 형식 라이브러리를 가져올 때 값입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>The following example demonstrates a managed declaration of the <ph id="ph1">`GetSystemTime`</ph> function and defines <ph id="ph2">`MySystemTime`</ph> class with <ph id="ph3">&lt;xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType&gt;</ph> layout.</source>
          <target state="translated">다음 예제에서는 관리 되는 선언 된 <ph id="ph1">`GetSystemTime`</ph> 작동 하 고 정의 <ph id="ph2">`MySystemTime`</ph> 클래스와 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType&gt;</ph> 레이아웃 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source><ph id="ph1">`GetSystemTime`</ph> gets the system time and prints to the console.</source>
          <target state="translated"><ph id="ph1">`GetSystemTime`</ph> 시스템 시간을 가져오고 콘솔에 출력 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.StructLayoutAttribute">
          <source>Initalizes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
          <source>A 16-bit integer that represents one of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.LayoutKind" /&gt;</ph> values that specifes how the class or structure should be arranged.</source>
          <target state="translated">클래스나 구조체의 정렬 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.LayoutKind" /&gt;</ph> 값 중 하나를 나타내는 16비트 정수입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
          <source>Initalizes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.LayoutKind" /&gt;</ph> enumeration member.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.LayoutKind" /&gt;</ph> 열거형 멤버를 사용하여 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
          <source>This constructor takes an underlying 16-bit integer that represents each <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind&gt;</ph> enumeration member.</source>
          <target state="translated">이 생성자는 기본 16 비트 정수를 각각 나타내는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind&gt;</ph> 열거형 멤버입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> uses this constructor.</source>
          <target state="translated"><bpt id="p1">[</bpt>Tlbimp.exe (형식 라이브러리 가져오기)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> 이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
          <source>One of the enumeration values that specifes how the class or structure should be arranged.</source>
          <target state="translated">클래스나 구조체의 정렬 방법을 지정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
          <source>Initalizes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.LayoutKind" /&gt;</ph> enumeration member.</source>
          <target state="translated">지정된 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.LayoutKind" /&gt;</ph> 열거형 멤버를 사용하여 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
          <source>For readable code that is less prone to error, always use this constructor.</source>
          <target state="translated">오류가 발생할 가능성이 감소 되는 읽을 수 있는 코드에 대 한 항상이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
          <source>Indicates whether string data fields within the class should be marshaled as <ph id="ph1">&lt;see langword="LPWSTR" /&gt;</ph> or <ph id="ph2">&lt;see langword="LPSTR" /&gt;</ph> by default.</source>
          <target state="translated">클래스 내의 문자열 데이터 필드가 기본적으로 <ph id="ph1">&lt;see langword="LPWSTR" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="LPSTR" /&gt;</ph>(으)로 마샬링되어야 하는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
          <source>If the <ph id="ph1">`CharSet`</ph> field is set to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType&gt;</ph>, all string arguments are converted to Unicode characters (<ph id="ph3">`LPWSTR`</ph>) before they are passed to the unmanaged implementation.</source>
          <target state="translated">경우는 <ph id="ph1">`CharSet`</ph> 필드가로 설정 된 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType&gt;</ph>, 모든 문자열 인수는 유니코드 문자로 변환 되는지 (<ph id="ph3">`LPWSTR`</ph>) 관리 되지 않는 구현에 전달 하기 전에.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
          <source>If the field is set to <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType&gt;</ph>, the strings are converted to ANSI strings (<ph id="ph2">`LPSTR`</ph>).</source>
          <target state="translated">필드 설정 된 경우 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType&gt;</ph>, ANSI 문자열로 변환 됩니다 (<ph id="ph2">`LPSTR`</ph>).</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
          <source>If the <ph id="ph1">`CharSet`</ph> field is set to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType&gt;</ph>, the conversion is platform-dependent (ANSI on Windows 98 and Windows Me, and Unicode on later versions).</source>
          <target state="translated">경우는 <ph id="ph1">`CharSet`</ph> 필드가로 설정 된 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType&gt;</ph>, 플랫폼별 변환이 (Windows 98 및 Windows Me, 및 이후 버전에는 유니코드에서 ANSI)입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>Controls the alignment of data fields of a class or structure in memory.</source>
          <target state="translated">메모리에 있는 클래스 또는 구조체의 데이터 필드 맞춤을 제어합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> field controls the alignment of a type's fields in memory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> 필드 형식의 필드에 메모리의 맞춤을 제어 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>It affects both <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">둘 다에 영향을 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>By default, the value is 0, indicating the default packing size for the current platform.</source>
          <target state="translated">기본적으로 값은 0, 압축 크기는 현재 플랫폼에 대 한 기본값을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>The value of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> must be 0, 1, 2, 4, 8, 16, 32, 64, or 128:</source>
          <target state="translated">값 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> 0, 1, 2, 4, 8, 16, 32, 64, 또는 128 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>The fields of a type instance are aligned by using the following rules:</source>
          <target state="translated">다음 규칙을 사용 하 여 형식 인스턴스 필드 정렬 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>The alignment of the type is the size of its largest element (1, 2, 4, 8, etc., bytes) or the specified packing size, whichever is smaller.</source>
          <target state="translated">형식의 맞춤의 가장 큰 요소의 크기입니다 (1, 2, 4, 8, 바이트 이상) 또는 지정한 압축 크기 중 더 작은 값입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>Each field must align with fields of its own size (1, 2, 4, 8, etc., bytes) or the alignment of the type, whichever is smaller.</source>
          <target state="translated">각 필드는 자체 크기의 필드와 일치 해야 합니다 (1, 2, 4, 8, 바이트 이상) 또는 형식의 맞춤 중 더 작은 값입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>Because the default alignment of the type is the size of its largest element, which is greater than or equal to all other field lengths, this usually means that fields are aligned by their size.</source>
          <target state="translated">형식의 기본 맞춤은 다른 모든 필드 길이 보다 크거나 같은 경우이 가장 큰 요소의 크기 때문에 일반적으로 즉 필드의 크기에 따라 정렬 됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>For example, even if the largest field in a type is a 64-bit (8-byte) integer or the Pack field is set to 8, <ph id="ph1">&lt;xref:System.Byte&gt;</ph> fields align on 1-byte boundaries, <ph id="ph2">&lt;xref:System.Int16&gt;</ph> fields align on 2-byte boundaries, and <ph id="ph3">&lt;xref:System.Int32&gt;</ph> fields align on 4-byte boundaries.</source>
          <target state="translated">64 비트 (8 바이트) 정수 또는 팩 필드 형식에서 가장 큰 필드는 경우에 8로 설정 되어 예를 들어 <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 1 바이트 경계에 정렬 필드 <ph id="ph2">&lt;xref:System.Int16&gt;</ph> 필드 2 바이트 경계에 정렬 및 <ph id="ph3">&lt;xref:System.Int32&gt;</ph> 필드는 4 바이트 경계에 정렬 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>Padding is added between fields to satisfy the alignment requirements.</source>
          <target state="translated">안쪽 여백 맞춤 요구 사항을 만족 하도록 필드 사이 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>For example, consider the following structure, which consists of two <ph id="ph1">&lt;xref:System.Byte&gt;</ph> fields and one <ph id="ph2">&lt;xref:System.Int32&gt;</ph> field, when it is used with various values for the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> field.</source>
          <target state="translated">예를 들어 두 개의 구성 된 다음과 같은 구조를 <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 필드와 한 <ph id="ph2">&lt;xref:System.Int32&gt;</ph> 필드에 대 한 다양 한 값을 함께 사용 하는 경우는 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>To successfully compile the C# examples, you must specify the <ph id="ph1">`/unsafe`</ph> compiler switch.</source>
          <target state="translated">C# 예제를 성공적으로 컴파일하려면 지정 해야 합니다는 <ph id="ph1">`/unsafe`</ph> 컴파일러 스위치입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>If you specify the default packing size, the size of the structure is 8 bytes.</source>
          <target state="translated">기본 압축 크기를 지정 하는 구조체의 크기는 8 바이트입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>The two bytes occupy the first two bytes of memory, because bytes must align on one-byte boundaries.</source>
          <target state="translated">바이트는 1 바이트 경계에 정렬 해야 하기 때문에 메모리의 처음 2 바이트를 차지 하는 2 바이트입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>Because the default alignment of the type is 4 bytes, which is the size of its largest fields, <ph id="ph1">`i3`</ph>, there are two bytes of padding followed by the integer field.</source>
          <target state="translated">형식의 기본 맞춤은 4 바이트는 가장 큰 필드 크기 때문에 <ph id="ph1">`i3`</ph>, 없는 2 바이트 정수 필드 뒤 안쪽 여백입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>If <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> is set to 2, the size of the structure is 6 bytes.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> 설정 된 구조체의 크기는 6 바이트를 2로 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>As before, the two bytes occupy the first two bytes of memory.</source>
          <target state="translated">로 이전에 2 바이트를 차지 하므로 메모리의 처음 두 바이트.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>Because fields now align on 2-byte boundaries, there is no padding between the second byte and the integer.</source>
          <target state="translated">필드는 이제 2 바이트 경계에 맞춤, 때문에 두 번째 바이트와 정수 간의 채우지는 않습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>If <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> is set to 4, the size of the structure is the same as in the default case, where the type's alignment was defined by the size of its largest field, <ph id="ph2">`i3`</ph>, which is 4.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> 설정 된 구조체의 크기는 기본적으로, 해당 형식의 맞춤의 가장 큰 필드의 크기에 따라 정의 된 위치, 동일 4로, <ph id="ph2">`i3`</ph>은 4입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>If <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> is set to 8, the size of the structure is the still same as in the default case, because the <ph id="ph2">`i3`</ph> field aligns on a 4-byte boundary, which is smaller than the 8-byte boundary specified by the Pack field.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> 설정 된 구조체의 크기는 여전히 8, 기본 에서도 동일 경우 때문에 <ph id="ph2">`i3`</ph> 필드 팩 필드로 지정 된 8 바이트 경계 보다 작은 4 바이트 경계에 맞춥니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>To take another example, consider the following structure, which consists of two byte fields, one 32-bit signed integer field, one single-element byte array, and a decimal value.</source>
          <target state="translated">또 다른 예로, 2 바이트 필드, 하나의 32 비트 부호 있는 정수 필드, 하나의 단일 요소 바이트 배열 및 10 진수 값으로 구성 되는 다음과 같은 구조를 고려 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>With the default packing size, the size of the structure is 28 bytes.</source>
          <target state="translated">기본값은 압축 크기 구조체의 크기는 28 바이트입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>The two bytes occupy the first two bytes of memory, followed by two bytes of padding, followed by the integer.</source>
          <target state="translated">메모리에 2 바이트 정수 뒤 안쪽 뒤의 처음 두 바이트를 차지 하는 2 바이트입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>Next is the one-byte array, followed by three bytes of padding.</source>
          <target state="translated">다음은 세 가지 바이트의 패딩이 이어서 1 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> field, d5, aligns on a 4-byte boundary because a decimal value consists of four <ph id="ph2">&lt;xref:System.Int32&gt;</ph> fields, so its alignment is based on the size of the largest of its fields rather than on the size of the <ph id="ph3">&lt;xref:System.Decimal&gt;</ph> structure as a whole.</source>
          <target state="translated">마지막으로 <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> 4의 10 진수 값을 구성 하기 때문에 4 바이트 경계에 정렬 되는 필드, d5, <ph id="ph2">&lt;xref:System.Int32&gt;</ph> 있으므로 해당 맞춤은 위에 가장 큰 값의 크기에 따라 필드의 크기 보다는 필드의는 <ph id="ph3">&lt;xref:System.Decimal&gt;</ph> 전체 구조입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>If <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> is set to 2, the size of the structure is 24 bytes.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> 설정 된 구조체의 크기는 24 바이트 2로 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>In comparison with the default alignment, the two bytes of padding between the two bytes and the integer have been removed because the type's alignment is now 4 rather than 2.</source>
          <target state="translated">기본 맞춤 비해 형식의 맞춤은 2가 아닌 4 이제 때문에 2 바이트와 정수 사이의 여백 2 바이트 없어졌습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>And the three bytes of padding after <ph id="ph1">`a4`</ph> have been replaced by one byte of padding, since <ph id="ph2">`d5`</ph> now aligns on a 2-byte boundary rather than a 4-byte boundary.</source>
          <target state="translated">및 이후 안쪽 3 바이트 <ph id="ph1">`a4`</ph> 이후로 1 바이트의 안쪽 여백으로 대체 되었습니다 <ph id="ph2">`d5`</ph> 이제 4 바이트 경계 보다는 2 바이트 경계에 맞춥니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>If <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> is set to 8, the size of the structure is the same as in the default case, because all the alignment requirements in this structure are less than 8.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> 설정의 8, 구조체의 크기는 기본적인 경우 처럼 동일한이 구조에서는 모든 맞춤 요구 사항은 8 보다 작으면 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> field is frequently used when structures are exported during disk and network write operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack&gt;</ph> 필드는 / 네트워크 쓰기 작업을 하는 동안 디스크에 구조체를 내보낼 때 자주 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>The field is also frequently used during platform invoke and interop operations.</source>
          <target state="translated">필드는 또한 자주 사용 하는 플랫폼 중 호출 및 interop 작업 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>Occasionally, the field is used to reduce memory requirements by producing a tighter packing size.</source>
          <target state="translated">경우에 따라서는 필드 보다 엄격한 압축 크기를 생성 하 여 메모리 요구 사항을 줄이기 위해 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
          <source>However, this usage requires careful consideration of actual hardware constraints, and may actually degrade performance.</source>
          <target state="translated">그러나이 사용량 실제 하드웨어 제약 조건을 신중 하 게 고려해 야 하 고 실제로 성능이 저하 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
          <source>Indicates the absolute size of the class or structure.</source>
          <target state="translated">클래스나 구조체의 절대적인 크기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
          <source>This field must be equal or greater than the total size, in bytes, of the members of the class or structure.</source>
          <target state="translated">이 필드는 클래스 또는 구조체의 멤버를 바이트 단위로 전체 크기 보다 크거나 같은 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
          <source>This field is primarily for compiler writers who want to extend the memory occupied by a structure for direct, unmanaged access.</source>
          <target state="translated">이 필드는 직접, 관리 되지 않는 액세스에 대 한 구조에서 사용한 메모리를 확장 하려는 컴파일러 작성기에 대 한 주로입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
          <source>For example, you can use this field when working with unions that are not represented in metadata directly.</source>
          <target state="translated">예를 들어 직접 메타 데이터로 표현 되지 않는 공용 구조체를 작업할 때이 필드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.LayoutKind" /&gt;</ph> value that specifies how the class or structure is arranged.</source>
          <target state="translated">클래스나 구조의 배열 방법을 지정하는 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.LayoutKind" /&gt;</ph> 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
          <source>One of the enumeration values that specifies how the class or structure is arranged.</source>
          <target state="translated">클래스나 구조체의 정렬 방법을 지정하는 열거형 값 중 하나입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>