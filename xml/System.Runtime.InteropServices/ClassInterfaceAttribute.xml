<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ClassInterfaceAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac522885b9e9704325229ae4e4688727e3be90e630f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22885b9e9704325229ae4e4688727e3be90e630f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.</source>
          <target state="translated">인터페이스가 생성될 경우 COM에 노출된 클래스에 대해 생성될 클래스 인터페이스의 형식을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>You can apply this attribute to assemblies or classes.</source>
          <target state="translated">어셈블리 또는 클래스에이 특성을 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>This attribute controls whether the Type Library Exporter (Tlbexp.exe) automatically generates a class interface for the attributed class.</source>
          <target state="translated">이 특성은 형식 라이브러리 내보내기 (Tlbexp.exe) 특성 사용된 클래스에 대 한 클래스 인터페이스를 자동으로 생성 하는지 여부를 제어 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>A class interface carries the same name as the class itself, but the name is prefixed with an underscore.</source>
          <target state="translated">클래스 인터페이스는 클래스 자체와 같은 이름을 전달 하지만 이름에 밑줄 앞입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>When exposed, the class interface contains all the <ph id="ph1">`public`</ph>, non- <ph id="ph2">`static`</ph> members of the managed class, including members inherited from its base class.</source>
          <target state="translated">클래스 인터페이스를 노출 하면 모든 포함 된 <ph id="ph1">`public`</ph>, 비- <ph id="ph2">`static`</ph> 기본 클래스에서 상속 된 멤버를 포함 하는 관리 되는 클래스의 멤버입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Managed classes cannot access a class interface and have no need to as they can access the class members directly.</source>
          <target state="translated">관리 되는 클래스는 클래스 인터페이스에 액세스 하 고 클래스 멤버에 직접 액세스할 수 있으므로 필요가 없는 수 없습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Tlbexp.exe generates a unique interface identifier (IID) for the class interface.</source>
          <target state="translated">Tlbexp.exe는 클래스 인터페이스에 대 한 고유 인터페이스 마다 식별자 (IID)를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Class interfaces can be dual or dispatch-only interfaces.</source>
          <target state="translated">클래스 인터페이스는 이중 또는 디스패치 전용 인터페이스 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Optionally, you can suppress the generation of the class interface and provide a custom interface instead.</source>
          <target state="translated">필요에 따라 클래스 인터페이스의 생성 되지 않도록 수 있으며 대신 사용자 지정 인터페이스를 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>You expose or suppress a class interface by specifying a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType?displayProperty=nameWithType&gt;</ph> enumeration member.</source>
          <target state="translated">노출 하거나 클래스 인터페이스를 지정 하 여 표시 하지 않는 한 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType?displayProperty=nameWithType&gt;</ph> 열거형 멤버입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>When you apply <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> to an assembly, the attribute pertains to all classes in the assembly unless the individual classes override the setting with their own attribute.</source>
          <target state="translated">적용 하는 경우 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> 어셈블리에 특성 관련 된 모든 클래스는 어셈블리에서 개별 클래스에는 자신의 특성으로 설정을 재정의 하지 않는 한 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Although class interfaces eliminate the task of explicitly defining interfaces for each class, their use in production applications is strongly discouraged.</source>
          <target state="translated">명시적으로 각 클래스에 대 한 인터페이스를 정의 하는 작업을 제거 하는 클래스 인터페이스가 있지만 프로덕션 응용 프로그램에서 사용 되는 좋습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Dual class interfaces allow clients to bind to a specific interface layout that is subject to change as the class evolves.</source>
          <target state="translated">이중 클래스 인터페이스 통해 클라이언트가 클래스 진화 함에 따라 변경 될 수 있는 특정 인터페이스 레이아웃에 바인딩할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>For example, consider a managed class that exposes a class interface to COM clients.</source>
          <target state="translated">예를 들어 관리 되는 클래스를를 COM 클라이언트는 클래스 인터페이스를 노출 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>The first version of the class contains methods <ph id="ph1">`North`</ph> and <ph id="ph2">`South`</ph>.</source>
          <target state="translated">메서드를 포함 하는 클래스의 첫 번째 버전 <ph id="ph1">`North`</ph> 및 <ph id="ph2">`South`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>An unmanaged client can bind to the class interface, which provides <ph id="ph1">`North`</ph> as the first method in the class interface and method <ph id="ph2">`South`</ph> as the second method.</source>
          <target state="translated">관리 되지 않는 클라이언트가 제공 하는 클래스 인터페이스에 바인딩할 수 <ph id="ph1">`North`</ph> 방법과 클래스 인터페이스의 첫 번째 메서드와 <ph id="ph2">`South`</ph> 두 번째 방법으로 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Now consider the next version of the class, which has a new method, <ph id="ph1">`East`</ph>, inserted between methods <ph id="ph2">`North`</ph> and <ph id="ph3">`South`</ph>.</source>
          <target state="translated">이제 새 메서드가 들어 있는 클래스의 다음 버전을 고려해 <ph id="ph1">`East`</ph>메서드 사이 삽입 된 <ph id="ph2">`North`</ph> 및 <ph id="ph3">`South`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Unmanaged clients that try to bind to the new class through the old class interface end up calling method <ph id="ph1">`East`</ph> when they intend to call method <ph id="ph2">`South`</ph>, because the positioning of methods within the interface has changed.</source>
          <target state="translated">이전 클래스 인터페이스를 통해 새 클래스에 바인딩하려고 하는 관리 되지 않는 클라이언트 메서드를 호출 결국 <ph id="ph1">`East`</ph> 메서드를 호출 하려고 할 때 <ph id="ph2">`South`</ph>인터페이스 내에서 메서드 위치가 변경 되었기 때문에, 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Moreover, any change to the layout of a base class also affects the layout of the class interface for all derived classes.</source>
          <target state="translated">또한 기본 클래스의 레이아웃을 변경한 모든 파생된 클래스에 대 한 클래스 인터페이스의 레이아웃을 달라 집니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Managed clients, which bind directly to classes, do not exhibit the same versioning problems.</source>
          <target state="translated">클라이언트에 바인딩되는 직접 클래스를 노출 하지 않는 동일한 버전 관리 문제를 관리 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>For specific guidelines on using a class interface, see <bpt id="p1">[</bpt>COM Callable Wrapper<ept id="p1">](~/docs/framework/interop/com-callable-wrapper.md)</ept>.</source>
          <target state="translated">클래스 인터페이스를 사용 하는 특정 지침을 참조 하십시오. <bpt id="p1">[</bpt>COM 호출 가능 래퍼<ept id="p1">](~/docs/framework/interop/com-callable-wrapper.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> always applies to imported classes the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.None?displayProperty=nameWithType&gt;</ph> enumeration member to indicate that existing COM classes never expose managed interfaces.</source>
          <target state="translated"><bpt id="p1">[</bpt>Tlbimp.exe (형식 라이브러리 가져오기)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> 가져온된 클래스에 항상 적용 됩니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.None?displayProperty=nameWithType&gt;</ph> 관리 인터페이스를 기존 COM 노출 되지 클래스가 나타내는 열거형 멤버입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>The following example shows how to apply the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> with the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph> value <ph id="ph3">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch&gt;</ph>, which generates an <ph id="ph4">`IDispatch`</ph> interface for <ph id="ph5">`MyClass`</ph>.</source>
          <target state="translated">적용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceAttribute&gt;</ph> 와 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph> 값 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch&gt;</ph>를 생성 하는 <ph id="ph4">`IDispatch`</ph> 에 대 한 인터페이스 <ph id="ph5">`MyClass`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
          <source>Describes the type of interface that is generated for a class.</source>
          <target state="translated">클래스에 대해 생성되는 인터페이스의 형식을 설명합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> enumeration value.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> 열거형 값을 사용하여 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
          <source>This constructor takes an underlying 16-bit signed integer that represents each <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph> enumeration member.</source>
          <target state="translated">이 생성자는 각각 나타내는 기본 16 비트 부호 있는 정수 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ClassInterfaceType&gt;</ph> 열거형 멤버입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
          <source>The <bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> uses this constructor.</source>
          <target state="translated"><bpt id="p1">[</bpt>Tlbimp.exe (형식 라이브러리 가져오기)<ept id="p1">](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> 이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> values that describes the type of interface that is generated for a class.</source>
          <target state="translated">클래스에 대해 생성된 인터페이스의 형식을 설명하는 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> class with the specified <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> enumeration member.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /&gt;</ph> 열거형 멤버를 사용하여 <ph id="ph2">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
          <source>For readable code that is less prone to error, always use this constructor.</source>
          <target state="translated">오류가 발생할 가능성이 감소 되는 읽을 수 있는 코드에 대 한 항상이 생성자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> value that describes which type of interface should be generated for the class.</source>
          <target state="translated">클래스에 대해 어떤 형식의 인터페이스가 생성되어야 하는지를 설명하는 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> value that describes which type of interface should be generated for the class.</source>
          <target state="translated">클래스에 대해 어떤 형식의 인스턴스가 생성되어야 하는지를 설명하는 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /&gt;</ph> 값입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>