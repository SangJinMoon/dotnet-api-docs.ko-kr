<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="VariantWrapper.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5756043660b69b0075e319179d9908a02a325c276.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">756043660b69b0075e319179d9908a02a325c276</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>Marshals data of type <ph id="ph1">&lt;see langword="VT_VARIANT | VT_BYREF" /&gt;</ph> from managed to unmanaged code.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="VT_VARIANT | VT_BYREF" /&gt;</ph> 형식의 데이터를 관리 코드에서 비관리 코드로 마샬링합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>The purpose of <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> is to add one level of indirection when marshaling a managed type to the corresponding <ph id="ph2">`VARIANT`</ph> type.</source>
          <target state="translated">목적은 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> 해당 하는 관리 되는 종류를 마샬링할 때 한 수준의 간접 참조를 추가 하는 것 <ph id="ph2">`VARIANT`</ph> 유형입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>You can use this class to wrap an <ph id="ph1">&lt;xref:System.Object&gt;</ph> that the interop marshaler passes as <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>.</source>
          <target state="translated">이 클래스를 사용 하 여를 래핑하는 <ph id="ph1">&lt;xref:System.Object&gt;</ph> 로 전달 하면 interop 마샬러가 하 <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> to unmanaged code.</source>
          <target state="translated">Variant 데이터 형식 마샬링할 수 없기 버전 1.0 및 1.1의.NET Framework에서는 <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> 비관리 코드에 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>The interop marshaler passed a variant of the managed type (for example, <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> for <ph id="ph2">&lt;xref:System.String&gt;</ph>, or <ph id="ph3">`VT_I4 | VT_BYREF`</ph> for <ph id="ph4">&lt;xref:System.Int32&gt;</ph>), but not <ph id="ph5">`VT_VARIANT | VT_BYREF`</ph>.</source>
          <target state="translated">Interop 마샬러는 관리 되는 형식의 variant를 전달 (예를 들어 <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> 에 대 한 <ph id="ph2">&lt;xref:System.String&gt;</ph>, 또는 <ph id="ph3">`VT_I4 | VT_BYREF`</ph> 에 대 한 <ph id="ph4">&lt;xref:System.Int32&gt;</ph>), 아닌 <ph id="ph5">`VT_VARIANT | VT_BYREF`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>One advantage of using <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> variant types is that the type of data can be changed during a method call.</source>
          <target state="translated">사용 하 여 한 가지 이점은 <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> variant 형식의 데이터 형식의 메서드를 호출 하는 동안 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>For example, you can pass a <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> variant type that contains a <ph id="ph2">`VT_BSTR`</ph> and get a variant returned that contains a <ph id="ph3">`VT_I4`</ph> after a method call.</source>
          <target state="translated">예를 들어 전달할 수 있습니다는 <ph id="ph1">`VT_VARIANT | VT_BYREF`</ph> variant 형식을 포함 하는 <ph id="ph2">`VT_BSTR`</ph> 및 포함 된 variant를 반환 하는 get는 <ph id="ph3">`VT_I4`</ph> 메서드 호출 후 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>Because the COM interop marshaler has no way of knowing when to pass <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> and when to pass <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>, which points to a variant that contains a <ph id="ph3">`BSTR`</ph> for parameters declared as <ph id="ph4">`VARIANT *`</ph>, you can instruct the marshaler by using <ph id="ph5">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.</source>
          <target state="translated">COM interop 마샬러가 전달 하는 시기를 알 수 없습니다 있기 때문에 <ph id="ph1">`VT_BSTR | VT_BYREF`</ph> 전달 하는 시기와 <ph id="ph2">`VT_VARIANT | VT_BYREF`</ph>, 포함 하는 variant를 가리키는 <ph id="ph3">`BSTR`</ph> 로 선언 된 매개 변수의 <ph id="ph4">`VARIANT *`</ph>, 마샬러가 를사용하여명령을추가할수있습니다<ph id="ph5">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>Note that early binding is not supported; you can use <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> only when calling <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A&gt;</ph> or with a Dispatch-only interface called in an early bound fashion.</source>
          <target state="translated">Note는 초기 바인딩 지원 되지 않습니다. 사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> 호출할 때만 <ph id="ph2">&lt;xref:System.Type.InvokeMember%2A&gt;</ph> 또는 초기 바인딩된 방식으로 호출 하는 디스패치 전용 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>In C#, you must also use the <ph id="ph1">`ref`</ph> keyword to specify <ph id="ph2">`ByRef`</ph> semantics for any parameter of type <ph id="ph3">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>.</source>
          <target state="translated">C#에서 사용 해야는 <ph id="ph1">`ref`</ph> 지정 하려면 키워드 <ph id="ph2">`ByRef`</ph> 형식의 모든 매개 변수에 대 한 의미 체계 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>In Visual Basic, <ph id="ph1">`ByRef`</ph> semantics are added automatically for every implicit late binding call.</source>
          <target state="translated">Visual Basic에서는 <ph id="ph1">`ByRef`</ph> 의미 체계는 모든 암시적 런타임에 바인딩 호출에 대해 자동으로 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>Also note that nesting <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> objects and arrays of <ph id="ph2">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> objects is not supported.</source>
          <target state="translated">또한 중첩 시킬 참고 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> 개체 및 배열을 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> 개체는 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.VariantWrapper">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> class to wrap an <ph id="ph2">&lt;xref:System.Object&gt;</ph> that the interop marshaler passes as <ph id="ph3">`VT_VARIANT | VT_BYREF`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> 클래스를 래핑하는 <ph id="ph2">&lt;xref:System.Object&gt;</ph> 로 전달 하면 interop 마샬러가 하 <ph id="ph3">`VT_VARIANT | VT_BYREF`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
          <source>The object to marshal.</source>
          <target state="translated">마샬링할 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> parameter.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> 매개 변수에 대해 <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> class to wrap an <ph id="ph2">&lt;xref:System.Object&gt;</ph> that the interop marshaler passes as <ph id="ph3">`VT_VARIANT | VT_BYREF`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.VariantWrapper&gt;</ph> 클래스를 래핑하는 <ph id="ph2">&lt;xref:System.Object&gt;</ph> 로 전달 하면 interop 마샬러가 하 <ph id="ph3">`VT_VARIANT | VT_BYREF`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
          <source>Gets the object wrapped by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> 개체로 래핑된 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
          <source>The object wrapped by the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.VariantWrapper" /&gt;</ph> 개체로 래핑된 개체입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>