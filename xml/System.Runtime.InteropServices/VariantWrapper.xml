<Type Name="VariantWrapper" FullName="System.Runtime.InteropServices.VariantWrapper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3739f0425913dce797ff68bfadc593b35900fd9c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36537190" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VariantWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit VariantWrapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.VariantWrapper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VariantWrapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class VariantWrapper sealed" />
  <TypeSignature Language="F#" Value="type VariantWrapper = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d4032-101">
        <see langword="VT_VARIANT | VT_BYREF" /> 형식의 데이터를 관리 코드에서 비관리 코드로 마샬링합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4032-101">Marshals data of type <see langword="VT_VARIANT | VT_BYREF" /> from managed to unmanaged code.</span>
      </span>
      <span data-ttu-id="d4032-102">이 클래스는 상속될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d4032-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d4032-103">목적은 <xref:System.Runtime.InteropServices.VariantWrapper> 해당 하는 관리 되는 종류를 마샬링할 때 한 수준의 간접 참조를 추가 하는 것 `VARIANT` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-103">The purpose of <xref:System.Runtime.InteropServices.VariantWrapper> is to add one level of indirection when marshaling a managed type to the corresponding `VARIANT` type.</span></span>  
  
 <span data-ttu-id="d4032-104">이 클래스를 사용 하 여를 래핑하는 <xref:System.Object> 로 전달 하면 interop 마샬러가 하 `VT_VARIANT | VT_BYREF`합니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-104">You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span> <span data-ttu-id="d4032-105">Variant 데이터 형식 마샬링할 수 없기 버전 1.0 및 1.1의.NET Framework에서는 `VT_VARIANT | VT_BYREF` 비관리 코드에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-105">In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code.</span></span> <span data-ttu-id="d4032-106">Interop 마샬러는 관리 되는 형식의 variant를 전달 (예를 들어 `VT_BSTR | VT_BYREF` 에 대 한 <xref:System.String>, 또는 `VT_I4 | VT_BYREF` 에 대 한 <xref:System.Int32>), 아닌 `VT_VARIANT | VT_BYREF`합니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-106">The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`.</span></span>  
  
 <span data-ttu-id="d4032-107">사용 하 여 한 가지 이점은 `VT_VARIANT | VT_BYREF` variant 형식의 데이터 형식의 메서드를 호출 하는 동안 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-107">One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call.</span></span> <span data-ttu-id="d4032-108">예를 들어 전달할 수 있습니다는 `VT_VARIANT | VT_BYREF` variant 형식을 포함 하는 `VT_BSTR` 및 포함 된 variant를 반환 하는 get는 `VT_I4` 메서드 호출 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-108">For example, you can pass a `VT_VARIANT | VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call.</span></span> <span data-ttu-id="d4032-109">COM interop 마샬러가 전달 하는 시기를 알 수 없습니다 있기 때문에 `VT_BSTR | VT_BYREF` 전달 하는 시기와 `VT_VARIANT | VT_BYREF`, 포함 하는 variant를 가리키는 `BSTR` 로 선언 된 매개 변수의 `VARIANT *`, 마샬러가 를사용하여명령을추가할수있습니다<xref:System.Runtime.InteropServices.VariantWrapper>.</span><span class="sxs-lookup"><span data-stu-id="d4032-109">Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span>  
  
 <span data-ttu-id="d4032-110">Note는 초기 바인딩 지원 되지 않습니다. 사용할 수 있습니다 <xref:System.Runtime.InteropServices.VariantWrapper> 호출할 때만 <xref:System.Type.InvokeMember%2A> 또는 초기 바인딩된 방식으로 호출 하는 디스패치 전용 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-110">Note that early binding is not supported; you can use <xref:System.Runtime.InteropServices.VariantWrapper> only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion.</span></span> <span data-ttu-id="d4032-111">C#에서 사용 해야는 `ref` 지정 하려면 키워드 `ByRef` 형식의 모든 매개 변수에 대 한 의미 체계 <xref:System.Runtime.InteropServices.VariantWrapper>합니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-111">In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span> <span data-ttu-id="d4032-112">Visual Basic에서는 `ByRef` 의미 체계는 모든 암시적 런타임에 바인딩 호출에 대해 자동으로 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-112">In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call.</span></span> <span data-ttu-id="d4032-113">또한 중첩 시킬 참고 <xref:System.Runtime.InteropServices.VariantWrapper> 개체 및 배열을 <xref:System.Runtime.InteropServices.VariantWrapper> 개체는 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-113">Also note that nesting <xref:System.Runtime.InteropServices.VariantWrapper> objects and arrays of <xref:System.Runtime.InteropServices.VariantWrapper> objects is not supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d4032-114">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Runtime.InteropServices.VariantWrapper> 클래스를 래핑하는 <xref:System.Object> 로 전달 하면 interop 마샬러가 하 `VT_VARIANT | VT_BYREF`합니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-114">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VariantWrapper (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VariantWrapper(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.VariantWrapper : obj -&gt; System.Runtime.InteropServices.VariantWrapper" Usage="new System.Runtime.InteropServices.VariantWrapper obj" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="d4032-115">마샬링할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4032-115">The object to marshal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d4032-116">지정된 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 매개 변수에 대해 <see cref="T:System.Object" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4032-116">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> class for the specified <see cref="T:System.Object" /> parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d4032-117">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Runtime.InteropServices.VariantWrapper> 클래스를 래핑하는 <xref:System.Object> 로 전달 하면 interop 마샬러가 하 `VT_VARIANT | VT_BYREF`합니다.</span><span class="sxs-lookup"><span data-stu-id="d4032-117">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrappedObject">
      <MemberSignature Language="C#" Value="public object WrappedObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrappedObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WrappedObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WrappedObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WrappedObject : obj" Usage="System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d4032-118">
            <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 개체로 래핑된 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4032-118">Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d4032-119">
            <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 개체로 래핑된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d4032-119">The object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>