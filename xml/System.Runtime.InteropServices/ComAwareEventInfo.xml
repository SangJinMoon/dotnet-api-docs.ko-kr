<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ComAwareEventInfo.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a50bc1c6bf61c6387ace86a09185889744af6d54.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a50bc1c6bf61c6387ace86a09185889744af6d54</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.ComAwareEventInfo">
          <source>Permits late-bound registration of an event handler.</source>
          <target state="translated">이벤트 처리기의 런타임에 바인딩된 등록을 허용합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComAwareEventInfo">
          <source>Normally, compilers will automatically embed calls to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> methods instead of using regular add handler and remove handler methods for events.</source>
          <target state="translated">컴파일러에 대 한 호출은 자동으로 포함 하는 일반적으로 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> regular 사용 하는 대신 메서드 처리기를 추가 및 이벤트 처리기 메서드를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComAwareEventInfo">
          <source>This occurs if the interface that the corresponding event is defined on needs to be embedded.</source>
          <target state="translated">이 발생 하는 경우 해당 이벤트가 포함 하도록 요구 사항에 정의 된 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComAwareEventInfo">
          <source>You can specify this by embedding the entire assembly that contains the interface by using the <bpt id="p1">**</bpt>/link<ept id="p1">**</ept> option on the compilers or by setting the <bpt id="p2">**</bpt>Embed Interop Types<ept id="p2">**</ept> property to <ph id="ph1">`True`</ph> in Visual Studio.</source>
          <target state="translated">사용 하 여 인터페이스를 포함 하는 전체 어셈블리를 포함 하 여이 지정할 수 있습니다는 <bpt id="p1">**</bpt>/link<ept id="p1">**</ept> 옵션을 설정 하 여 또는 컴파일러에는 <bpt id="p2">**</bpt>Interop 형식 포함<ept id="p2">**</ept> 속성을 <ph id="ph1">`True`</ph> 시각적 개체에 Studio 지정 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.ComAwareEventInfo">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo&gt;</ph> type derives from the <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> class and overrides the <ph id="ph3">&lt;xref:System.Reflection.EventInfo.AddEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph4">&lt;xref:System.Reflection.EventInfo.RemoveEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo&gt;</ph> 에서 파생 되는 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 클래스 및 재정의 <ph id="ph3">&lt;xref:System.Reflection.EventInfo.AddEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Reflection.EventInfo.RemoveEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
          <source>The type of object.</source>
          <target state="translated">개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
          <source>The name of an event on <bpt id="p1">&lt;c&gt;</bpt>type<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>형식<ept id="p1">&lt;/c&gt;</ept>의 이벤트 이름입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /&gt;</ph> class by using the specified type and a name of the event on the type.</source>
          <target state="translated">지정된 형식과 해당 형식의 이벤트 이름을 사용하여 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The target object that the event delegate should bind to.</source>
          <target state="translated">이벤트 대리자가 바인딩될 대상 개체입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The event delegate.</source>
          <target state="translated">이벤트 대리자입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Attaches an event handler to a COM object.</source>
          <target state="translated">이벤트 처리기를 COM 개체에 연결합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> method except that it allows you to attach events to COM objects.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> 한다는 점 제외 하면 메서드를 사용 하면 COM 개체에 이벤트를 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>If <ph id="ph1">`target`</ph> is a COM object, this method adds a delegate to an event by using the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Combine%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">경우 <ph id="ph1">`target`</ph> 이 COM 개체를이 메서드를 사용 하 여 이벤트에 대리자를 추가 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Combine%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler%2A&gt;</ph> facilitates registering COM event sinks that forward calls to corresponding managed delegates.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler%2A&gt;</ph> 해당 하는 관리 되는 대리자는 호출을 전달 하는 등록 하는 중 COM 이벤트 싱크를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>It requires the following information:</source>
          <target state="translated">다음과 같은 정보가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The target object itself (<ph id="ph1">`target`</ph>).</source>
          <target state="translated">대상 개체 자체 (<ph id="ph1">`target`</ph>).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The GUID of the source interface.</source>
          <target state="translated">소스 인터페이스의 GUID입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The DispID of the method on the COM interface that corresponds to the specified event.</source>
          <target state="translated">지정된 된 이벤트에 해당 하는 COM 인터페이스에서 메서드 DispID를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The delegate that would be invoked when the COM object triggers the corresponding event (<ph id="ph1">`handler`</ph>).</source>
          <target state="translated">COM 개체는 해당 이벤트를 트리거할 때 호출 되는 대리자 (<ph id="ph1">`handler`</ph>).</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler%2A&gt;</ph> looks up the corresponding COM source interface (specified as the first parameter of the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventInterfaceAttribute.%23ctor%28System.Type%2CSystem.Type%29?displayProperty=nameWithType&gt;</ph> constructor).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler%2A&gt;</ph> 해당 COM 소스 인터페이스를 조회 (의 첫 번째 매개 변수로 지정 된 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventInterfaceAttribute.%23ctor%28System.Type%2CSystem.Type%29?displayProperty=nameWithType&gt;</ph> 생성자).</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>It then looks up a method on the source interface whose name is identical to the event name.</source>
          <target state="translated">다음 메서드 이름이 이벤트 이름과 동일 소스 인터페이스를 찾습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The value of <ph id="ph1">`GuidAttribute`</ph> on the source interface is the GUID that is passed to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Combine%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph>; the value of <ph id="ph3">`DispIDAttribute`</ph> on the method is the DispID value that is passed to <ph id="ph4">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Combine%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">값 <ph id="ph1">`GuidAttribute`</ph> 소스 인터페이스에 전달 되는 GUID는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Combine%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph>;의 값 <ph id="ph3">`DispIDAttribute`</ph> 메서드에 DispID 값에 전달 되는 <ph id="ph4">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Combine%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>for operating with unmanaged code.</source>
          <target state="translated">에 비관리 코드와 작동 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
          <source>Gets the attributes for this event.</source>
          <target state="translated">이 이벤트에 대한 특성을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
          <source>The read-only attributes for this event.</source>
          <target state="translated">이 이벤트에 대한 읽기 전용 특성입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
          <source>The attributes are returned in a 4-byte integer, which represents a bitmap of the attributes set for the event that is reflected by this instance.</source>
          <target state="translated">이 인스턴스에 의해 반영 하는 이벤트에 대해 설정 된 특성의 비트맵을 나타내는 4 바이트 정수에는 특성이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
          <source>Gets the class that declares this member.</source>
          <target state="translated">이 멤버를 선언하는 클래스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object for the class that declares this member.</source>
          <target state="translated">이 멤버를 선언하는 클래스에 대한 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to return non-public methods; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">public이 아닌 메서드를 반환하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 설정하고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>를 설정합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
          <source>Gets the method that was used to add an event handler delegate to the event source.</source>
          <target state="translated">이벤트 처리기 대리자를 이벤트 소스에 추가하는 데 사용된 메서드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
          <source>The method that was used to add an event handler delegate to the event source.</source>
          <target state="translated">이벤트 처리기 대리자를 이벤트 소스에 추가하는 데 사용된 메서드입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
          <source>This method calls the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph>이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이고 이벤트 처리기 대리자를 추가하는 데 사용된 메서드가 public이 아니지만 호출자가 public이 아닌 메서드를 리플렉션할 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.ComAwareEventInfo">
          <source>When overridden in a derived class, returns all attributes that are applied to this member.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 이 멤버에 적용된 모든 특성을 반환합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
          <source>When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 이 멤버에 적용된 사용자 지정 특성을 모두 포함하는 배열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
          <source>An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.</source>
          <target state="translated">모든 사용자 지정 특성을 포함하는 배열이거나, 정의된 특성이 없는 경우 요소가 없는 배열입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
          <source>This method calls the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> method of the underlying <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> object.</source>
          <target state="translated">이 메서드를 호출는 <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> 메서드 내부 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">이 멤버가 리플렉션 전용 컨텍스트에 로드된 형식에 속하는 경우.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 리플렉션 전용 컨텍스트에 어셈블리 로드<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">사용자 지정 특성 형식을 로드할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The attribute type to search for.</source>
          <target state="translated">검색할 특성 형식입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Only attributes that are assignable to this type can be returned.</source>
          <target state="translated">이 형식에 할당할 수 있는 특성만 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 이 멤버에 적용된, 지정된 형식의 사용자 지정 특성을 모두 포함하는 배열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.</source>
          <target state="translated">지정된 형식의 모든 사용자 지정 특성을 포함하는 배열이거나, 정의된 특성이 없는 경우 요소가 없는 배열입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>This member belongs to a type that is loaded into the reflection-only context.</source>
          <target state="translated">이 멤버가 리플렉션 전용 컨텍스트에 로드된 형식에 속하는 경우.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>방법: 리플렉션 전용 컨텍스트에 어셈블리 로드<ept id="p1">](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A custom attribute type cannot be loaded.</source>
          <target state="translated">사용자 지정 특성 형식을 로드할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to return non-public methods; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">public이 아닌 메서드를 반환하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 설정하고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>를 설정합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the method that was called when the event was raised.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 이벤트가 발생했을 때 호출된 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
          <source>The object that was called when the event was raised.</source>
          <target state="translated">이벤트가 발생했을 때 호출된 개체입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
          <source>This method returns <ph id="ph1">`null`</ph> for events that are declared with the C# <ph id="ph2">`event`</ph> keyword or the Visual Basic <ph id="ph3">`Event`</ph> keyword.</source>
          <target state="translated">이 메서드가 반환 <ph id="ph1">`null`</ph> C#으로 선언 된 이벤트에 대 한 <ph id="ph2">`event`</ph> 키워드 또는 Visual Basic <ph id="ph3">`Event`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
          <source>This is because the C# and Visual Basic compilers do not generate such a method.</source>
          <target state="translated">즉, C# 및 Visual Basic 컴파일러는 이러한 메서드를 생성 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph>이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이고 이벤트 처리기 대리자를 추가하는 데 사용된 메서드가 public이 아니지만 호출자가 public이 아닌 메서드를 리플렉션할 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to return non-public methods; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">public이 아닌 메서드를 반환하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>를 설정하고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>를 설정합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
          <source>When overridden in a derived class, retrieves the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for removing a method of the event.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 해당 이벤트의 메서드를 제거하기 위해 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 개체를 검색합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
          <source>The method that was used to remove an event handler delegate from the event source.</source>
          <target state="translated">이벤트 처리기 대리자를 이벤트 소스에서 제거하는 데 사용된 메서드입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph> and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph>이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이고 이벤트 처리기 대리자를 추가하는 데 사용된 메서드가 public이 아니지만 호출자가 public이 아닌 메서드를 리플렉션할 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
          <source>The attribute type to search for.</source>
          <target state="translated">검색할 특성 형식입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search this member's inheritance chain to find the attributes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
          <source>Indicates whether one or more instances of the specified attribute are applied to this member.</source>
          <target state="translated">지정된 특성을 가진 하나 이상의 인스턴스가 이 멤버에 적용되었는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified attribute has been applied to this member; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 특성이 이 멤버에 적용되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
          <source>Gets the name of the current member.</source>
          <target state="translated">현재 멤버의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
          <source>The name of this member.</source>
          <target state="translated">이 멤버의 이름입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
          <source>Gets the class object that was used to initialize this instance.</source>
          <target state="translated">이 인스턴스를 초기화하는 데 사용된 클래스 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that was used to initialize the current object.</source>
          <target state="translated">현재 개체를 초기화하는 데 사용된 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The target object that the event delegate is bound to.</source>
          <target state="translated">이벤트 대리자가 바인딩되는 대상 개체입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event delegate.</source>
          <target state="translated">이벤트 대리자입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Detaches an event handler from a COM object.</source>
          <target state="translated">COM 개체에서 이벤트 처리기를 분리합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.RemoveEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> method, except that it allows you to detach events from COM objects.</source>
          <target state="translated">이 메서드는 비슷합니다는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.RemoveEventHandler%28System.Object%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> 메서드를 COM 개체에서 이벤트를 분리할 수 있다는 점을 제외 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>If <ph id="ph1">`target`</ph> is a COM object, this method releases a delegate to an event by using the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Remove%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">경우 <ph id="ph1">`target`</ph> 이 COM 개체를 사용 하 여 이벤트에 대리자를 해제 하는이 메서드는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Remove%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler%2A&gt;</ph> facilitates unregistering COM event sinks that forward calls to corresponding managed delegates.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler%2A&gt;</ph> 해당 하는 관리 되는 대리자 호출을 전달 하는 COM 이벤트 싱크를 등록 취소를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>It requires the following information:</source>
          <target state="translated">다음과 같은 정보가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The target object itself (<ph id="ph1">`target`</ph>).</source>
          <target state="translated">대상 개체 자체 (<ph id="ph1">`target`</ph>).</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The GUID of the source interface.</source>
          <target state="translated">소스 인터페이스의 GUID입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The DispID of the method on the COM interface that corresponds to the specified event.</source>
          <target state="translated">지정된 된 이벤트에 해당 하는 COM 인터페이스에서 메서드 DispID를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The delegate that would be invoked when the COM object triggers the corresponding event (<ph id="ph1">`handler`</ph>).</source>
          <target state="translated">COM 개체는 해당 이벤트를 트리거할 때 호출 되는 대리자 (<ph id="ph1">`handler`</ph>).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler%2A&gt;</ph> looks up the corresponding COM source interface (specified as the first parameter of the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventInterfaceAttribute.%23ctor%28System.Type%2CSystem.Type%29?displayProperty=nameWithType&gt;</ph> constructor).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler%2A&gt;</ph> 해당 COM 소스 인터페이스를 조회 (의 첫 번째 매개 변수로 지정 된 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventInterfaceAttribute.%23ctor%28System.Type%2CSystem.Type%29?displayProperty=nameWithType&gt;</ph> 생성자).</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>It then it looks up a method on the source interface whose name is identical to the event name.</source>
          <target state="translated">해당 이름이 이벤트 이름이 동일한 소스 인터페이스에서 메서드를 조회 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The value of <ph id="ph1">`GuidAttribute`</ph> on the source interface is the GUID that is passed to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Remove%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph>; the value of <ph id="ph3">`DispIDAttribute`</ph> on the method is the DispID value that is passed to <ph id="ph4">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Remove%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">값 <ph id="ph1">`GuidAttribute`</ph> 소스 인터페이스에 전달 되는 GUID는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Remove%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph>;의 값 <ph id="ph3">`DispIDAttribute`</ph> 메서드에 DispID 값에 전달 되는 <ph id="ph4">&lt;xref:System.Runtime.InteropServices.ComEventsHelper.Remove%28System.Object%2CSystem.Guid%2CSystem.Int32%2CSystem.Delegate%29?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event does not have a public <ph id="ph1">&lt;see langword="remove" /&gt;</ph> accessor.</source>
          <target state="translated">이 이벤트에 public <ph id="ph1">&lt;see langword="remove" /&gt;</ph> 접근자가 없는 경우</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The handler that was passed in cannot be used.</source>
          <target state="translated">전달된 처리기를 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 <bpt id="p2">[</bpt>이식 가능한 클래스 라이브러리<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>에서 대신 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the event is not static.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 이벤트가 static이 아닌 경우</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> is not declared on the target.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>가 대상에서 선언되지 않은 경우</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 <bpt id="p2">[</bpt>이식 가능한 클래스 라이브러리<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>에서 대신 기본 클래스 예외 <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The caller does not have access permission to the member.</source>
          <target state="translated">호출자에게 멤버에 대한 액세스 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>for operating with unmanaged code.</source>
          <target state="translated">에 비관리 코드와 작동 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>