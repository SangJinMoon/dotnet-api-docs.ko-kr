<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="45aa5-101">특성 사용 메서드가 관리되지 않는 DLL(동적 연결 라이브러리)에 의해 정적 진입점으로 노출된다는 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-101">Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-102">메서드에이 특성을 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-102">You can apply this attribute to methods.</span></span>  
  
 <span data-ttu-id="45aa5-103"><xref:System.Runtime.InteropServices.DllImportAttribute> 특성은 관리 되지 않는 DLL에서 내보낸 함수를 호출 하는 데 필요한 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-103">The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL.</span></span> <span data-ttu-id="45aa5-104">최소 요구 사항으로의 진입점을 포함 하는 DLL의 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-104">As a minimum requirement, you must supply the name of the DLL containing the entry point.</span></span>  
  
 <span data-ttu-id="45aa5-105">C# 및 c + + 메서드 정의;에 직접이 특성을 적용 사용 하는 경우이 특성 Visual Basic 컴파일러에서 하는 반면는 `Declare` 문.</span><span class="sxs-lookup"><span data-stu-id="45aa5-105">You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement.</span></span> <span data-ttu-id="45aa5-106">포함 하는 복잡 한 메서드 정의 대 한 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, 또는 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 필드, Visual Basic 메서드 정의에 직접이 특성을 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-106">For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.</span></span>  
  
 <span data-ttu-id="45aa5-107">**참고** JScript이이 특성을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-107">**Note** JScript does not support this attribute.</span></span> <span data-ttu-id="45aa5-108">JScript 프로그램에서 관리 되지 않는 API 메서드를 액세스 하는 C# 또는 Visual Basic 래퍼 클래스를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-108">You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</span></span>  
  
 <span data-ttu-id="45aa5-109">플랫폼을 사용 하는 방법에 대 한 자세한 내용은 서비스 액세스 관리 되지 않는 Dll 함수를 호출 하십시오 참조 [관리 되지 않는 DLL 함수를 사용해](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-109">For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45aa5-110"><xref:System.Runtime.InteropServices.DllImportAttribute> 제네릭 형식의 마샬링은 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-110">The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-111">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Runtime.InteropServices.DllImportAttribute> 가져오려면 Win32 특성 `MessageBox` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-111">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="45aa5-112">다음 코드 예제에서는 가져온된 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-112">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName"><span data-ttu-id="45aa5-113">관리되지 않는 메서드를 포함하는 DLL의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-113">The name of the DLL that contains the unmanaged method.</span></span> <span data-ttu-id="45aa5-114">DLL이 어셈블리에 포함되어 있는 경우 이 이름에는 어셈블리 표시 이름이 포함될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-114">This can include an assembly display name, if the DLL is included in an assembly.</span></span></param>
        <summary><span data-ttu-id="45aa5-115">가져올 메서드가 포함된 DLL의 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-116">관리 되지 않는 DLL 파일에에서 포함 된 경우 어셈블리, 예를 들어 링커를 사용 하 여 또는 `/linkresource` 컴파일러 옵션의 일부로 어셈블리 표시 이름을 지정할 수 `dllName`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-116">If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`.</span></span> <span data-ttu-id="45aa5-117">예를 들어 명명 된 하는 관리 되지 않는 DLL `unmanaged.dll` 이라는 관리 되는 어셈블리에 포함 되어 `MyAssembly`, 다음 코드에 표시 된 대로 특성을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-117">For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-118">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Runtime.InteropServices.DllImportAttribute> 가져오려면 Win32 특성 `MessageBox` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-118">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="45aa5-119">다음 코드 예제에서는 가져온된 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-119">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45aa5-120">유니코드 문자를 ANSI 문자로 변환할 때 가장 적합한 매핑 동작을 활성화 또는 비활성화합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-120">Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-121">경우 `true`, 가장 적합 한 동작 매핑을 사용할 수 있습니다; 그렇지 않으면 가장 적합 한 매핑이 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-121">If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</span></span> <span data-ttu-id="45aa5-122"><xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> 필드는 `true` 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-122">The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default.</span></span> <span data-ttu-id="45aa5-123">이 필드에 대 한 설정에 대 한 모든 수준의 설정을 재정의 <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-123">Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> attribute.</span></span>  
  
 <span data-ttu-id="45aa5-124">공용 언어 런타임을 관리 하는 유니코드 문자를 Windows 98 또는 Windows me에서 실행 되는 관리 되지 않는 메서드를 전달 하는 ANSI 문자로 변환</span><span class="sxs-lookup"><span data-stu-id="45aa5-124">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="45aa5-125">최적된 매핑은 정확한 일치 항목이 때 하 문자를 제공 하는 interop 마샬러만 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-125">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="45aa5-126">예를 들어 마샬러를 'c' ANSI 문자를 허용 하는 관리 되지 않는 메서드에 대 한 저작권 유니코드 문자를 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-126">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="45aa5-127">일부 문자에 가장 적합된 한 표현을; 부족 이러한 문자를 매핑할 수 없는 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-127">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="45aa5-128">기본에 매핑할 수 없는 문자는 주로 '?' ANSI 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-128">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="45aa5-129">특정 유니코드 문자는 백슬래시와 같은 위험한 문자로 변환 되는지 '\\' 경로 변경할 수 있는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-129">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="45aa5-130">설정 하 여는 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 필드를 `true`, 예외를 throw 하 여 호출자에 게 매핑할 수 없는 문자는의 존재 여부를 알릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-130">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="45aa5-131">제공 된 기본값을 변경할 수 없습니다는 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> 및 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 때이 관리 되는 배열 요소의 전달 ANSI Char 또는 Lpstr 관리 되지 않는 안전 배열 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-131">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="45aa5-132">최적된 매핑을 항상 사용 하도록 설정 하 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-132">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="45aa5-133">주의이 조합은 보안 모델이 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-133">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-134">Visual Basic 개발자가 경우에 따라 사용 하 여는 <xref:System.Runtime.InteropServices.DllImportAttribute>, 대신는 `Declare` 문, 관리 코드에서 DLL 함수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-134">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="45aa5-135">설정의 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> 필드는 이러한 경우 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-135">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases.</span></span> <span data-ttu-id="45aa5-136">다음 예제에서는 가장 엄격한 적용 하는 방법을 보여 줍니다 문자 매핑을 보안을 플랫폼 호출 메서드 정의 ANSI 문자 집합을 지정 하 여 가장 적합된 한 매핑 동작을 사용 하지 않도록 설정 매핑되지 않는 유니코드 문자에 대해 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-136">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45aa5-137">진입점의 호출 규칙을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-137">Indicates the calling convention of an entry point.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-138">이 필드 중 하나를 설정 된 <xref:System.Runtime.InteropServices.CallingConvention> 열거형 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-138">You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members.</span></span> <span data-ttu-id="45aa5-139">기본값은 <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> 필드는 <xref:System.Runtime.InteropServices.CallingConvention.Winapi>는 기본값이 <xref:System.Runtime.InteropServices.CallingConvention.StdCall> 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-139">The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.</span></span>  
  
 <span data-ttu-id="45aa5-140">자세한 내용은 MSDN library에서 호출 규칙을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="45aa5-140">For more information, see Calling Convention in the MSDN library.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-141">Visual Basic 개발자가 경우에 따라 사용 하 여는 <xref:System.Runtime.InteropServices.DllImportAttribute>, 대신는 `Declare` 문, 관리 코드에서 DLL 함수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-141">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="45aa5-142">설정의 <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> 필드는 이러한 경우 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-142">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.</span></span>  
  
 <span data-ttu-id="45aa5-143">System.Runtime.InteropServices.DllImportAttribute#1</span><span class="sxs-lookup"><span data-stu-id="45aa5-143">System.Runtime.InteropServices.DllImportAttribute#1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45aa5-144">문자열 매개 변수를 메서드로 마샬링하는 방법을 지정하고 이름 관리를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-144">Indicates how to marshal string parameters to the method and controls name mangling.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-145">이 필드를 사용 하 여 멤버와는 <xref:System.Runtime.InteropServices.CharSet> 문자열 매개 변수 마샬링 동작을 지정 하 고 (지정 된 정확한 이름 또는 "A" 또는 "W"로 끝나는 이름)을 호출 하는 진입점 이름을 지정 하는 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-145">Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</span></span> <span data-ttu-id="45aa5-146">C# 및 Visual Basic에 대 한 기본 열거형 멤버는 `CharSet.Ansi` c + +에 대 한 기본 열거형 멤버 이며 `CharSet.None`, 값은 `CharSet.Ansi`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-146">The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`.</span></span> <span data-ttu-id="45aa5-147">Visual Basic을 사용 하 여는 `Declare` 문을 지정 하는 `CharSet` 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-147">In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.</span></span>  
  
 <span data-ttu-id="45aa5-148"><xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> 필드의 동작에 영향을 `CharSet` 를 호출 하는 진입점 이름을 결정 하는 데 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-148">The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke.</span></span> <span data-ttu-id="45aa5-149">자세한 설명 및 문자열 마샬링 및 이름 일치와 관련 된 동작의 예에 대 한는 `CharSet` 필드 참조, [문자 집합 지정](~/docs/framework/interop/specifying-a-character-set.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-149">For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-150">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Runtime.InteropServices.DllImportAttribute> 가져오려면 Win32 특성 `MessageBox` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-150">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="45aa5-151">다음 코드 예제에서는 가져온된 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-151">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45aa5-152">호출할 DLL 진입점의 이름 또는 서수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-152">Indicates the name or ordinal of the DLL entry point to be called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-153">진입점을 포함 하는 DLL의 이름을 나타내는 문자열을 제공 하 여 진입점 이름을 지정 하거나 해당 서 수로 진입점을 식별할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-153">You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</span></span> <span data-ttu-id="45aa5-154">서 수는 예를 들어 #&#1; 기호로 접두사로 됩니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-154">Ordinals are prefixed with the # sign, for example, #1.</span></span> <span data-ttu-id="45aa5-155">공용 언어 런타임으로 표시 되는 the.NET 메서드의 이름을 사용 하 여이 필드를 생략 하면는 <xref:System.Runtime.InteropServices.DllImportAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-155">If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>  
  
 <span data-ttu-id="45aa5-156">자세한 내용은 참조 하십시오. [Dll 함수 식별](~/docs/framework/interop/identifying-functions-in-dlls.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-156">For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md).</span></span> <span data-ttu-id="45aa5-157">사용 하는 방법을 보여 주는 예제에 대 한는 <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> 필드 참조, [진입점 지정](~/docs/framework/interop/specifying-an-entry-point.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-157">For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-158">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Runtime.InteropServices.DllImportAttribute> 가져오려면 Win32 특성 `MessageBox` 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-158">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="45aa5-159">사용 하 여 코드 예제는 <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> 속성을 가져오는 함수를 지정 하려면 다음 이름을 변경 `MyNewMessageBoxMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-159">The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45aa5-160"><see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 필드로 인해 공용 언어 런타임이 지정된 이름 이외의 진입점 이름을 관리되지 않는 DLL에서 검색할지 여부를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-160">Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-161">경우 `false`, 진입점 이름을 A로 추가 호출 때는 <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> 필드가로 설정 된 `CharSet.Ansi`와 W 문자 진입점 이름을 호출 하는 때는 <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> 필드로 설정 됩니다는 `CharSet.Unicode`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-161">If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to the `CharSet.Unicode`.</span></span> <span data-ttu-id="45aa5-162">일반적으로 관리 되는 컴파일러는이 필드를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-162">Typically, managed compilers set this field.</span></span>  
  
 <span data-ttu-id="45aa5-163">다음 표에서 간의 관계를 보여 줍니다.는 <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> 및 <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> 프로그래밍 언어에 따라 적용 되는 기본 값에 따라 필드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-163">The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language.</span></span> <span data-ttu-id="45aa5-164">기본 설정을 재정의할 수 있지만 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-164">You can override the default setting, but do so with caution.</span></span>  
  
|<span data-ttu-id="45aa5-165">언어</span><span class="sxs-lookup"><span data-stu-id="45aa5-165">Language</span></span>|<span data-ttu-id="45aa5-166">ANSI</span><span class="sxs-lookup"><span data-stu-id="45aa5-166">ANSI</span></span>|<span data-ttu-id="45aa5-167">유니코드(Unicode)</span><span class="sxs-lookup"><span data-stu-id="45aa5-167">Unicode</span></span>|<span data-ttu-id="45aa5-168">자동</span><span class="sxs-lookup"><span data-stu-id="45aa5-168">Auto</span></span>|  
|--------------|----------|-------------|----------|  
|<span data-ttu-id="45aa5-169">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="45aa5-169">Visual Basic</span></span>|<span data-ttu-id="45aa5-170">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="45aa5-170">ExactSpelling:=True</span></span>|<span data-ttu-id="45aa5-171">ExactSpelling:=True</span><span class="sxs-lookup"><span data-stu-id="45aa5-171">ExactSpelling:=True</span></span>|<span data-ttu-id="45aa5-172">ExactSpelling:=False</span><span class="sxs-lookup"><span data-stu-id="45aa5-172">ExactSpelling:=False</span></span>|  
|<span data-ttu-id="45aa5-173">C#</span><span class="sxs-lookup"><span data-stu-id="45aa5-173">C#</span></span>|<span data-ttu-id="45aa5-174">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="45aa5-174">ExactSpelling=false</span></span>|<span data-ttu-id="45aa5-175">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="45aa5-175">ExactSpelling=false</span></span>|<span data-ttu-id="45aa5-176">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="45aa5-176">ExactSpelling=false</span></span>|  
|<span data-ttu-id="45aa5-177">C++</span><span class="sxs-lookup"><span data-stu-id="45aa5-177">C++</span></span>|<span data-ttu-id="45aa5-178">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="45aa5-178">ExactSpelling=false</span></span>|<span data-ttu-id="45aa5-179">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="45aa5-179">ExactSpelling=false</span></span>|<span data-ttu-id="45aa5-180">ExactSpelling=false</span><span class="sxs-lookup"><span data-stu-id="45aa5-180">ExactSpelling=false</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-181">Visual Basic 개발자가 경우에 따라 사용 하 여는 <xref:System.Runtime.InteropServices.DllImportAttribute>, 사용 하는 대신는 `Declare` 문, 관리 코드에서 DLL 함수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-181">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="45aa5-182">설정의 <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> 필드는 이러한 경우 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-182">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45aa5-183"><see langword="HRESULT" /> 또는 <see langword="retval" /> 반환 값이 있는 관리되지 않는 메서드가 직접 변환되는지 아니면 <see langword="HRESULT" /> 또는 <see langword="retval" /> 반환 값이 자동으로 예외로 변환되는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-183">Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-184">설정는 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 필드를 `true` 직접 사용 하 여 관리 되지 않는 서명 변환할 `HRESULT` 또는 `retval` 값;로 설정 `false` 이 자동으로 변환 `HRESULT` 또는 `retval` 예외에 대 한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-184">Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions.</span></span> <span data-ttu-id="45aa5-185">기본적으로는 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 필드는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-185">By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.</span></span>  
  
 <span data-ttu-id="45aa5-186">때 `true`, 포함 된 정수 값을 반환 하는 결과 메서드 시그니처는 `HRESULT` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-186">When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.</span></span>  <span data-ttu-id="45aa5-187">이 경우 수동으로 반환 값을 검사 하며 그에 따라 응답 응용 프로그램에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-187">In this case, you must manually inspect the return value and respond accordingly in your application.</span></span>  
  
 <span data-ttu-id="45aa5-188">설정 하는 경우는 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 필드를 `false`, 결과 메서드 시그니처는 void 반환 형식을 정수 대신 포함 (`HRESULT`) 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-188">When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.</span></span>  <span data-ttu-id="45aa5-189">관리 되지 않는 메서드가 `HRESULT`, 형식의 반환 값을 자동으로 무시 `S_OK` (또는 0) 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-189">When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.</span></span>  <span data-ttu-id="45aa5-190">에 대 한 `HRESULT`이외의 s `S_OK`, 런타임에서 자동으로 해당 하는 예외를 throw는 `HRESULT`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-190">For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.</span></span>  <span data-ttu-id="45aa5-191"><xref:System.Runtime.InteropServices.DllImportAttribute> 특성에는 반환 하는 방법으로이 변환을 수행는 `HRESULT`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-191">Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.</span></span>  
  
 <span data-ttu-id="45aa5-192">기본 오류 보고 동작을 변경 하려는 경우 `HRESULT`s 오류 보고 응용 프로그램의 구조에 예외 보다 적합 한 경우에는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-192">You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.</span></span>  
  
 <span data-ttu-id="45aa5-193">이 필드는 비슷합니다는 <xref:System.Runtime.InteropServices.PreserveSigAttribute>; 그러나 달리 하는 것에 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 필드, 기본 값에는 특성은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-193">This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.</span></span>  
  
 <span data-ttu-id="45aa5-194">Visual Basic 개발자가 경우에 따라 사용 하 여는 <xref:System.Runtime.InteropServices.DllImportAttribute>, 사용 하는 대신는 `Declare` 문, 관리 코드에서 DLL 함수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-194">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="45aa5-195">설정의 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 필드는 이러한 경우 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-195">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-196">다음 코드 예제에서는 <xref:System.Runtime.InteropServices.DllImportAttribute> 관리 되지 않는 가져오려는 `SHAutoComplete` 함수는 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 필드 설정 `true` 및 사용 하 여 다시는 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> 필드로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-196">The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.</span></span>  <span data-ttu-id="45aa5-197">이 코드 예제에서는 `SHAutoComplete` 한 번은 예외를 사용 하 여 모든 오류를 생성 하는 함수 및 `HRESULT` 다음 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-197">This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45aa5-198">특성 사용 메서드에서 반환하기 전에 호출 수신자가 Win32 API <see langword="SetLastError" />를 호출할지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-198">Indicates whether the callee calls the <see langword="SetLastError" /> Win32 API function before returning from the attributed method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-199">`true` 호출 수신자를 호출 합니다 나타내기 위해 `SetLastError`, 그렇지 않으면 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-199">`true` to indicate that the callee will call `SetLastError`; otherwise, `false`.</span></span> <span data-ttu-id="45aa5-200">기본값은 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-200">The default is `false`.</span></span>  
  
 <span data-ttu-id="45aa5-201">런타임 마샬러 호출 `GetLastError` 하 고 다른 API 호출에 의해 덮어쓰여지지 않도록 방지 하기 위해 반환 되는 값을 캐시 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-201">The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls.</span></span> <span data-ttu-id="45aa5-202">오류 코드를 호출 하 여 검색할 수 있습니다 <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-202">You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-203">Visual Basic 개발자가 경우에 따라 사용 하 여는 <xref:System.Runtime.InteropServices.DllImportAttribute>, 사용 하는 대신는 `Declare` 문, 관리 코드에서 DLL 함수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-203">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="45aa5-204">설정의 <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> 필드는 이러한 경우 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-204">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45aa5-205">ANSI "?" 문자로 변환되는 매핑할 수 없는 유니코드 문자가 나오면 예외를 throw하거나 throw하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-205">Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-206">`true` interop 마샬러가 예외가 발생 될 때마다 나타내려면 매핑할 수 없는 문자. `false` 임을 나타내는 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 필드가 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-206">`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled.</span></span> <span data-ttu-id="45aa5-207">이 필드는 `false` 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-207">This field is `false` by default.</span></span>  
  
 <span data-ttu-id="45aa5-208">공용 언어 런타임을 관리 하는 유니코드 문자를 Windows 98 또는 Windows me에서 실행 되는 관리 되지 않는 메서드를 전달 하는 ANSI 문자로 변환</span><span class="sxs-lookup"><span data-stu-id="45aa5-208">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="45aa5-209">최적된 매핑은 정확한 일치 항목이 때 하 문자를 제공 하는 interop 마샬러만 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-209">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="45aa5-210">예를 들어 마샬러를 'c' ANSI 문자를 허용 하는 관리 되지 않는 메서드에 대 한 저작권 유니코드 문자를 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-210">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="45aa5-211">일부 문자에 가장 적합된 한 표현을; 부족 이러한 문자를 매핑할 수 없는 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-211">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="45aa5-212">기본에 매핑할 수 없는 문자는 주로 '?' ANSI 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-212">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="45aa5-213">특정 유니코드 문자는 백슬래시와 같은 위험한 문자로 변환 되는지 '\\' 경로 변경할 수 있는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-213">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="45aa5-214">설정 하 여는 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 필드를 `true`, 예외를 throw 하 여 호출자에 게 매핑할 수 없는 문자는의 존재 여부를 알릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-214">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="45aa5-215">제공 된 기본값을 변경할 수 없습니다는 <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> 및 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 때이 관리 되는 배열 요소의 전달 ANSI Char 또는 Lpstr 관리 되지 않는 안전 배열 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-215">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="45aa5-216">최적된 매핑을 항상 사용 하도록 설정 하 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-216">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="45aa5-217">주의이 조합은 보안 모델이 손상 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-217">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45aa5-218">Visual Basic 개발자가 사용 하 여 일부 경우에는 <xref:System.Runtime.InteropServices.DllImportAttribute> 사용 하는 대신 관리 코드에서 DLL 함수를 정의 하는 `Declare` 문.</span><span class="sxs-lookup"><span data-stu-id="45aa5-218">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement.</span></span> <span data-ttu-id="45aa5-219">설정의 <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> 필드는 이러한 경우 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-219">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases.</span></span> <span data-ttu-id="45aa5-220">다음 예제에서는 가장 엄격한 적용 하는 방법을 보여 줍니다 문자 매핑을 보안을 플랫폼 호출 메서드 정의 ANSI 문자 집합을 지정 하 여 가장 적합된 한 매핑 동작을 사용 하지 않도록 설정 매핑되지 않는 유니코드 문자에 대해 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-220">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="45aa5-221">진입점을 포함하는 DLL 파일의 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-221">Gets the name of the DLL file that contains the entry point.</span></span></summary>
        <value><span data-ttu-id="45aa5-222">진입점을 포함하는 DLL 파일의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-222">The name of the DLL file that contains the entry point.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45aa5-223">전체 또는 상대 경로 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-223">You can provide a full or relative path.</span></span> <span data-ttu-id="45aa5-224">경로 제공 하는 경우 메시지 DLL이 다른 방법으로 로드 하지 않는 한 실행 시 현재 경로에 DLL 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-224">If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</span></span> <span data-ttu-id="45aa5-225">하지만, 정규화 된 경로 사용 하는 결과가 나타날 수 있습니다. 부정확 한 DLL이 이동 된 경우, 인식 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="45aa5-225">Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>