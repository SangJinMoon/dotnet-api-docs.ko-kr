<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DllImportAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac523e3cd02f7b0f8ccc396f11c5abc9af18628f6b7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23e3cd02f7b0f8ccc396f11c5abc9af18628f6b7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</source>
          <target state="translated">특성 사용 메서드가 관리되지 않는 DLL(동적 연결 라이브러리)에 의해 정적 진입점으로 노출된다는 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can apply this attribute to methods.</source>
          <target state="translated">메서드에이 특성을 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute provides the information needed to call a function exported from an unmanaged DLL.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> 특성은 관리 되지 않는 DLL에서 내보낸 함수를 호출 하는 데 필요한 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>As a minimum requirement, you must supply the name of the DLL containing the entry point.</source>
          <target state="translated">최소 요구 사항으로의 진입점을 포함 하는 DLL의 이름을 제공 해야 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the <ph id="ph1">`Declare`</ph> statement.</source>
          <target state="translated">C# 및 c + + 메서드 정의;에 직접이 특성을 적용 사용 하는 경우이 특성 Visual Basic 컴파일러에서 하는 반면는 <ph id="ph1">`Declare`</ph> 문.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For complex method definitions that include <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, or <ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields, you apply this attribute directly to Visual Basic method definitions.</source>
          <target state="translated">포함 하는 복잡 한 메서드 정의 대 한 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> 필드, Visual Basic 메서드 정의에 직접이 특성을 적용 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> JScript does not support this attribute.</source>
          <target state="translated"><bpt id="p1">**</bpt>참고<ept id="p1">**</ept> JScript이이 특성을 지원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</source>
          <target state="translated">JScript 프로그램에서 관리 되지 않는 API 메서드를 액세스 하는 C# 또는 Visual Basic 래퍼 클래스를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>For additional information about using the platform invoke service to access functions in unmanaged DLLs, see <bpt id="p1">[</bpt>Consuming Unmanaged DLL Functions<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>.</source>
          <target state="translated">플랫폼을 사용 하는 방법에 대 한 자세한 내용은 서비스 액세스 관리 되지 않는 Dll 함수를 호출 하십시오 참조 <bpt id="p1">[</bpt>관리 되지 않는 DLL 함수를 사용해<ept id="p1">](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> does not support marshaling of generic types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> 제네릭 형식의 마샬링은 지원 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> 가져오려면 Win32 특성 <ph id="ph2">`MessageBox`</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.InteropServices.DllImportAttribute">
          <source>The code example then calls the imported method.</source>
          <target state="translated">다음 코드 예제에서는 가져온된 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The name of the DLL that contains the unmanaged method.</source>
          <target state="translated">관리되지 않는 메서드를 포함하는 DLL의 이름입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>This can include an assembly display name, if the DLL is included in an assembly.</source>
          <target state="translated">DLL이 어셈블리에 포함되어 있는 경우 이 이름에는 어셈블리 표시 이름이 포함될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph> class with the name of the DLL containing the method to import.</source>
          <target state="translated">가져올 메서드가 포함된 DLL의 이름을 사용하여 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.DllImportAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>If an unmanaged DLL file is included in an assembly, for example, by using the linker or the <ph id="ph1">`/linkresource`</ph> compiler option, you can specify the assembly display name as part of <ph id="ph2">`dllName`</ph>.</source>
          <target state="translated">관리 되지 않는 DLL 파일에에서 포함 된 경우 어셈블리, 예를 들어 링커를 사용 하 여 또는 <ph id="ph1">`/linkresource`</ph> 컴파일러 옵션의 일부로 어셈블리 표시 이름을 지정할 수 <ph id="ph2">`dllName`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>For example, if an unmanaged DLL named <ph id="ph1">`unmanaged.dll`</ph> is included in a managed assembly named <ph id="ph2">`MyAssembly`</ph>, the attribute might be specified as shown in the following code.</source>
          <target state="translated">예를 들어 명명 된 하는 관리 되지 않는 DLL <ph id="ph1">`unmanaged.dll`</ph> 이라는 관리 되는 어셈블리에 포함 되어 <ph id="ph2">`MyAssembly`</ph>, 다음 코드에 표시 된 대로 특성을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> 가져오려면 Win32 특성 <ph id="ph2">`MessageBox`</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
          <source>The code example then calls the imported method.</source>
          <target state="translated">다음 코드 예제에서는 가져온된 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</source>
          <target state="translated">유니코드 문자를 ANSI 문자로 변환할 때 가장 적합한 매핑 동작을 활성화 또는 비활성화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>If <ph id="ph1">`true`</ph>, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</source>
          <target state="translated">경우 <ph id="ph1">`true`</ph>, 가장 적합 한 동작 매핑을 사용할 수 있습니다; 그렇지 않으면 가장 적합 한 매핑이 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is <ph id="ph2">`true`</ph> by default.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> 필드는 <ph id="ph2">`true`</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Settings for this field override the any level settings for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph> attribute.</source>
          <target state="translated">이 필드에 대 한 설정에 대 한 모든 수준의 설정을 재정의 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType&gt;</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">공용 언어 런타임을 관리 하는 유니코드 문자를 Windows 98 또는 Windows me에서 실행 되는 관리 되지 않는 메서드를 전달 하는 ANSI 문자로 변환</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">최적된 매핑은 정확한 일치 항목이 때 하 문자를 제공 하는 interop 마샬러만 수 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">예를 들어 마샬러를 'c' ANSI 문자를 허용 하는 관리 되지 않는 메서드에 대 한 저작권 유니코드 문자를 변환 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">일부 문자에 가장 적합된 한 표현을; 부족 이러한 문자를 매핑할 수 없는 라고 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">기본에 매핑할 수 없는 문자는 주로 '?' ANSI 문자입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">특정 유니코드 문자는 백슬래시와 같은 위험한 문자로 변환 되는지 '<ph id="ph1">\\</ph>' 경로 변경할 수 있는 문자입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">설정 하 여는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> 필드를 <ph id="ph2">`true`</ph>, 예외를 throw 하 여 호출자에 게 매핑할 수 없는 문자는의 존재 여부를 알릴 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">제공 된 기본값을 변경할 수 없습니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> 때이 관리 되는 배열 요소의 전달 ANSI Char 또는 Lpstr 관리 되지 않는 안전 배열 필드입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">최적된 매핑을 항상 사용 하도록 설정 하 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">주의이 조합은 보안 모델이 손상 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">Visual Basic 개발자가 경우에 따라 사용 하 여는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, 대신는 <ph id="ph2">`Declare`</ph> 문, 관리 코드에서 DLL 함수를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> field is one of those cases.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> 필드는 이러한 경우 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">다음 예제에서는 가장 엄격한 적용 하는 방법을 보여 줍니다 문자 매핑을 보안을 플랫폼 호출 메서드 정의 ANSI 문자 집합을 지정 하 여 가장 적합된 한 매핑 동작을 사용 하지 않도록 설정 매핑되지 않는 유니코드 문자에 대해 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Indicates the calling convention of an entry point.</source>
          <target state="translated">진입점의 호출 규칙을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>You set this field to one of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> enumeration members.</source>
          <target state="translated">이 필드 중 하나를 설정 된 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> 열거형 멤버입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>The default value for the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>, which in turn defaults to <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> convention.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> 필드는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.CallingConvention.Winapi&gt;</ph>는 기본값이 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.CallingConvention.StdCall&gt;</ph> 규칙입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>For more information, see Calling Convention in the MSDN library.</source>
          <target state="translated">자세한 내용은 MSDN library에서 호출 규칙을 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">Visual Basic 개발자가 경우에 따라 사용 하 여는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, 대신는 <ph id="ph2">`Declare`</ph> 문, 관리 코드에서 DLL 함수를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> field is one of those cases.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention&gt;</ph> 필드는 이러한 경우 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
          <source>System.Runtime.InteropServices.DllImportAttribute#1</source>
          <target state="translated">System.Runtime.InteropServices.DllImportAttribute#1</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Indicates how to marshal string parameters to the method and controls name mangling.</source>
          <target state="translated">문자열 매개 변수를 메서드로 마샬링하는 방법을 지정하고 이름 관리를 제어합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>Use this field with a member of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</source>
          <target state="translated">이 필드를 사용 하 여 멤버와는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet&gt;</ph> 문자열 매개 변수 마샬링 동작을 지정 하 고 (지정 된 정확한 이름 또는 "A" 또는 "W"로 끝나는 이름)을 호출 하는 진입점 이름을 지정 하는 열거형입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The default enumeration member for C# and Visual Basic is <ph id="ph1">`CharSet.Ansi`</ph> and the default enumeration member for C++ is <ph id="ph2">`CharSet.None`</ph>, which is equivalent to <ph id="ph3">`CharSet.Ansi`</ph>.</source>
          <target state="translated">C# 및 Visual Basic에 대 한 기본 열거형 멤버는 <ph id="ph1">`CharSet.Ansi`</ph> c + +에 대 한 기본 열거형 멤버 이며 <ph id="ph2">`CharSet.None`</ph>, 값은 <ph id="ph3">`CharSet.Ansi`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>In Visual Basic, you use the <ph id="ph1">`Declare`</ph> statement to specify the <ph id="ph2">`CharSet`</ph> field.</source>
          <target state="translated">Visual Basic을 사용 하 여는 <ph id="ph1">`Declare`</ph> 문을 지정 하는 <ph id="ph2">`CharSet`</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field influences the behavior of the <ph id="ph2">`CharSet`</ph> field in determining which entry-point name to invoke.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> 필드의 동작에 영향을 <ph id="ph2">`CharSet`</ph> 를 호출 하는 진입점 이름을 결정 하는 데 필드입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>For a detailed description and examples of the string marshaling and name matching behavior associated with the <ph id="ph1">`CharSet`</ph> field, see <bpt id="p1">[</bpt>Specifying a Character Set<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>.</source>
          <target state="translated">자세한 설명 및 문자열 마샬링 및 이름 일치와 관련 된 동작의 예에 대 한는 <ph id="ph1">`CharSet`</ph> 필드 참조, <bpt id="p1">[</bpt>문자 집합 지정<ept id="p1">](~/docs/framework/interop/specifying-a-character-set.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> 가져오려면 Win32 특성 <ph id="ph2">`MessageBox`</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
          <source>The code example then calls the imported method.</source>
          <target state="translated">다음 코드 예제에서는 가져온된 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Indicates the name or ordinal of the DLL entry point to be called.</source>
          <target state="translated">호출할 DLL 진입점의 이름 또는 서수를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</source>
          <target state="translated">진입점을 포함 하는 DLL의 이름을 나타내는 문자열을 제공 하 여 진입점 이름을 지정 하거나 해당 서 수로 진입점을 식별할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>Ordinals are prefixed with the # sign, for example, #1.</source>
          <target state="translated">서 수는 예를 들어 #&amp;#1; 기호로 접두사로 됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>If you omit this field, the common language runtime uses the name of the.NET method marked with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>.</source>
          <target state="translated">공용 언어 런타임으로 표시 되는 the.NET 메서드의 이름을 사용 하 여이 필드를 생략 하면는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For additional information, see <bpt id="p1">[</bpt>Identifying Functions in DLLs<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>Dll 함수 식별<ept id="p1">](~/docs/framework/interop/identifying-functions-in-dlls.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>For examples showing how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> field, see <bpt id="p1">[</bpt>Specifying an Entry Point<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>.</source>
          <target state="translated">사용 하는 방법을 보여 주는 예제에 대 한는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> 필드 참조, <bpt id="p1">[</bpt>진입점 지정<ept id="p1">](~/docs/framework/interop/specifying-an-entry-point.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute to import the Win32 <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> 가져오려면 Win32 특성 <ph id="ph2">`MessageBox`</ph> 함수입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> property to specify the function to import and then changes the name to <ph id="ph2">`MyNewMessageBoxMethod`</ph>.</source>
          <target state="translated">사용 하 여 코드 예제는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint&gt;</ph> 속성을 가져오는 함수를 지정 하려면 다음 이름을 변경 <ph id="ph2">`MyNewMessageBoxMethod`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Controls whether the <ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /&gt;</ph> 필드로 인해 공용 언어 런타임이 지정된 이름 이외의 진입점 이름을 관리되지 않는 DLL에서 검색할지 여부를 제어합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>If <ph id="ph1">`false`</ph>, the entry point name appended with the letter A is invoked when the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to <ph id="ph3">`CharSet.Ansi`</ph>, and the entry-point name appended with the letter W is invoked when the <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> field is set to the <ph id="ph5">`CharSet.Unicode`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`false`</ph>, 진입점 이름을 A로 추가 호출 때는 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> 필드가로 설정 된 <ph id="ph3">`CharSet.Ansi`</ph>와 W 문자 진입점 이름을 호출 하는 때는 <ph id="ph4">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType&gt;</ph> 필드로 설정 됩니다는 <ph id="ph5">`CharSet.Unicode`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Typically, managed compilers set this field.</source>
          <target state="translated">일반적으로 관리 되는 컴파일러는이 필드를 설정합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>The following table shows the relationship between the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> fields, based on default values imposed by the programming language.</source>
          <target state="translated">다음 표에서 간의 관계를 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> 프로그래밍 언어에 따라 적용 되는 기본 값에 따라 필드가 있습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>You can override the default setting, but do so with caution.</source>
          <target state="translated">기본 설정을 재정의할 수 있지만 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Language</source>
          <target state="translated">언어</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ANSI</source>
          <target state="translated">ANSI</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Unicode</source>
          <target state="translated">유니코드(Unicode)</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Auto</source>
          <target state="translated">자동</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Visual Basic</source>
          <target state="translated">Visual Basic</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling:=True</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=True</source>
          <target state="translated">ExactSpelling:=True</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling:=False</source>
          <target state="translated">ExactSpelling:=False</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C#</source>
          <target state="translated">C#</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>C++</source>
          <target state="translated">C++</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>ExactSpelling=false</source>
          <target state="translated">ExactSpelling=false</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">Visual Basic 개발자가 경우에 따라 사용 하 여는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, 사용 하는 대신는 <ph id="ph2">`Declare`</ph> 문, 관리 코드에서 DLL 함수를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> field is one of those cases.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling&gt;</ph> 필드는 이러한 경우 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Indicates whether unmanaged methods that have <ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph2">&lt;see langword="retval" /&gt;</ph> return values are directly translated or whether <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph> or <ph id="ph4">&lt;see langword="retval" /&gt;</ph> return values are automatically converted to exceptions.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="HRESULT" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="retval" /&gt;</ph> 반환 값이 있는 관리되지 않는 메서드가 직접 변환되는지 아니면 <ph id="ph3">&lt;see langword="HRESULT" /&gt;</ph> 또는 <ph id="ph4">&lt;see langword="retval" /&gt;</ph> 반환 값이 자동으로 예외로 변환되는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`true`</ph> to directly translate unmanaged signatures with <ph id="ph3">`HRESULT`</ph> or <ph id="ph4">`retval`</ph> values; set it to <ph id="ph5">`false`</ph> to automatically convert <ph id="ph6">`HRESULT`</ph> or <ph id="ph7">`retval`</ph> values to exceptions.</source>
          <target state="translated">설정는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> 필드를 <ph id="ph2">`true`</ph> 직접 사용 하 여 관리 되지 않는 서명 변환할 <ph id="ph3">`HRESULT`</ph> 또는 <ph id="ph4">`retval`</ph> 값;로 설정 <ph id="ph5">`false`</ph> 이 자동으로 변환 <ph id="ph6">`HRESULT`</ph> 또는 <ph id="ph7">`retval`</ph> 예외에 대 한 값입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>By default, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> 필드는 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When <ph id="ph1">`true`</ph>, the resulting method signature returns an integer value that contains the <ph id="ph2">`HRESULT`</ph> value.</source>
          <target state="translated">때 <ph id="ph1">`true`</ph>, 포함 된 정수 값을 반환 하는 결과 메서드 시그니처는 <ph id="ph2">`HRESULT`</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In this case, you must manually inspect the return value and respond accordingly in your application.</source>
          <target state="translated">이 경우 수동으로 반환 값을 검사 하며 그에 따라 응답 응용 프로그램에서 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When you set the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field to <ph id="ph2">`false`</ph>, the resulting method signature contains a void return type instead of an integer (<ph id="ph3">`HRESULT`</ph>) return type.</source>
          <target state="translated">설정 하는 경우는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> 필드를 <ph id="ph2">`false`</ph>, 결과 메서드 시그니처는 void 반환 형식을 정수 대신 포함 (<ph id="ph3">`HRESULT`</ph>) 형식을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>When the unmanaged method produces an <ph id="ph1">`HRESULT`</ph>, the runtime automatically ignores a return value of <ph id="ph2">`S_OK`</ph> (or 0) and does not throw an exception.</source>
          <target state="translated">관리 되지 않는 메서드가 <ph id="ph1">`HRESULT`</ph>, 형식의 반환 값을 자동으로 무시 <ph id="ph2">`S_OK`</ph> (또는 0) 예외를 throw 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>For <ph id="ph1">`HRESULT`</ph>s other than <ph id="ph2">`S_OK`</ph>, the runtime automatically throws an exception that corresponds to the <ph id="ph3">`HRESULT`</ph>.</source>
          <target state="translated">에 대 한 <ph id="ph1">`HRESULT`</ph>이외의 s <ph id="ph2">`S_OK`</ph>, 런타임에서 자동으로 해당 하는 예외를 throw는 <ph id="ph3">`HRESULT`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Note that the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> attribute only performs this conversion to methods that return an <ph id="ph2">`HRESULT`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> 특성에는 반환 하는 방법으로이 변환을 수행는 <ph id="ph2">`HRESULT`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>You might decide to change the default error reporting behavior from <ph id="ph1">`HRESULT`</ph>s to exceptions in cases where exceptions better fit the error reporting structure of your application.</source>
          <target state="translated">기본 오류 보고 동작을 변경 하려는 경우 <ph id="ph1">`HRESULT`</ph>s 오류 보고 응용 프로그램의 구조에 예외 보다 적합 한 경우에는 예외입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This field is similar to the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; however, in contrast to the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field, the default value for the attribute is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">이 필드는 비슷합니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.PreserveSigAttribute&gt;</ph>; 그러나 달리 하는 것에 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> 필드, 기본 값에는 특성은 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">Visual Basic 개발자가 경우에 따라 사용 하 여는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, 사용 하는 대신는 <ph id="ph2">`Declare`</ph> 문, 관리 코드에서 DLL 함수를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field is one of those cases.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> 필드는 이러한 경우 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to import the unmanaged <ph id="ph2">`SHAutoComplete`</ph> function once with the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph4">`true`</ph> and again with the <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> field set to <ph id="ph6">`false`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> 관리 되지 않는 가져오려는 <ph id="ph2">`SHAutoComplete`</ph> 함수는 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> 필드 설정 <ph id="ph4">`true`</ph> 및 사용 하 여 다시는 <ph id="ph5">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig&gt;</ph> 필드로 설정 <ph id="ph6">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
          <source>This code example causes the <ph id="ph1">`SHAutoComplete`</ph> function to generate any errors with an exception one time and an <ph id="ph2">`HRESULT`</ph> the next.</source>
          <target state="translated">이 코드 예제에서는 <ph id="ph1">`SHAutoComplete`</ph> 한 번은 예외를 사용 하 여 모든 오류를 생성 하는 함수 및 <ph id="ph2">`HRESULT`</ph> 다음 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Indicates whether the callee calls the <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph> Win32 API function before returning from the attributed method.</source>
          <target state="translated">특성 사용 메서드에서 반환하기 전에 호출 수신자가 Win32 API <ph id="ph1">&lt;see langword="SetLastError" /&gt;</ph>를 호출할지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source><ph id="ph1">`true`</ph> to indicate that the callee will call <ph id="ph2">`SetLastError`</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`true`</ph> 호출 수신자를 호출 합니다 나타내기 위해 <ph id="ph2">`SetLastError`</ph>, 그렇지 않으면 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">`false`</ph>입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>The runtime marshaler calls <ph id="ph1">`GetLastError`</ph> and caches the value returned to prevent it from being overwritten by other API calls.</source>
          <target state="translated">런타임 마샬러 호출 <ph id="ph1">`GetLastError`</ph> 하 고 다른 API 호출에 의해 덮어쓰여지지 않도록 방지 하기 위해 반환 되는 값을 캐시 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>You can retrieve the error code by calling <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>.</source>
          <target state="translated">오류 코드를 호출 하 여 검색할 수 있습니다 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, instead of using the <ph id="ph2">`Declare`</ph> statement, to define a DLL function in managed code.</source>
          <target state="translated">Visual Basic 개발자가 경우에 따라 사용 하 여는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>, 사용 하는 대신는 <ph id="ph2">`Declare`</ph> 문, 관리 코드에서 DLL 함수를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph> field is one of those cases.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError&gt;</ph> 필드는 이러한 경우 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</source>
          <target state="translated">ANSI "?" 문자로 변환되는 매핑할 수 없는 유니코드 문자가 나오면 예외를 throw하거나 throw하지 않습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source><ph id="ph1">`true`</ph> to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; <ph id="ph2">`false`</ph> to indicate that the <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is disabled.</source>
          <target state="translated"><ph id="ph1">`true`</ph> interop 마샬러가 예외가 발생 될 때마다 나타내려면 매핑할 수 없는 문자. <ph id="ph2">`false`</ph> 임을 나타내는 <ph id="ph3">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> 필드가 비활성화 됩니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>This field is <ph id="ph1">`false`</ph> by default.</source>
          <target state="translated">이 필드는 <ph id="ph1">`false`</ph> 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</source>
          <target state="translated">공용 언어 런타임을 관리 하는 유니코드 문자를 Windows 98 또는 Windows me에서 실행 되는 관리 되지 않는 메서드를 전달 하는 ANSI 문자로 변환</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</source>
          <target state="translated">최적된 매핑은 정확한 일치 항목이 때 하 문자를 제공 하는 interop 마샬러만 수 있습니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</source>
          <target state="translated">예를 들어 마샬러를 'c' ANSI 문자를 허용 하는 관리 되지 않는 메서드에 대 한 저작권 유니코드 문자를 변환 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Some characters lack a best-fit representation; these characters are called unmappable.</source>
          <target state="translated">일부 문자에 가장 적합된 한 표현을; 부족 이러한 문자를 매핑할 수 없는 라고 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Unmappable characters are usually converted to the default '?' ANSI character.</source>
          <target state="translated">기본에 매핑할 수 없는 문자는 주로 '?' ANSI 문자입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Certain Unicode characters are converted to dangerous characters, such as the backslash '<ph id="ph1">\\</ph>' character, which can inadvertently change a path.</source>
          <target state="translated">특정 유니코드 문자는 백슬래시와 같은 위험한 문자로 변환 되는지 '<ph id="ph1">\\</ph>' 경로 변경할 수 있는 문자입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>By setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field to <ph id="ph2">`true`</ph>, you can signal the presence of an unmappable character to the caller by throwing an exception.</source>
          <target state="translated">설정 하 여는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> 필드를 <ph id="ph2">`true`</ph>, 예외를 throw 하 여 호출자에 게 매핑할 수 없는 문자는의 존재 여부를 알릴 수 있습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>You cannot change the default values provided by the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</source>
          <target state="translated">제공 된 기본값을 변경할 수 없습니다는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> 때이 관리 되는 배열 요소의 전달 ANSI Char 또는 Lpstr 관리 되지 않는 안전 배열 필드입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Best-fit mapping is always enabled and no exception is thrown.</source>
          <target state="translated">최적된 매핑을 항상 사용 하도록 설정 하 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Be aware that this combination can compromise your security model.</source>
          <target state="translated">주의이 조합은 보안 모델이 손상 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>In some cases, Visual Basic developers use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> to define a DLL function in managed code, instead of using the <ph id="ph2">`Declare`</ph> statement.</source>
          <target state="translated">Visual Basic 개발자가 사용 하 여 일부 경우에는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> 사용 하는 대신 관리 코드에서 DLL 함수를 정의 하는 <ph id="ph2">`Declare`</ph> 문.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>Setting the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> field is one of those cases.</source>
          <target state="translated">설정의 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar&gt;</ph> 필드는 이러한 경우 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
          <source>The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</source>
          <target state="translated">다음 예제에서는 가장 엄격한 적용 하는 방법을 보여 줍니다 문자 매핑을 보안을 플랫폼 호출 메서드 정의 ANSI 문자 집합을 지정 하 여 가장 적합된 한 매핑 동작을 사용 하지 않도록 설정 매핑되지 않는 유니코드 문자에 대해 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Gets the name of the DLL file that contains the entry point.</source>
          <target state="translated">진입점을 포함하는 DLL 파일의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>The name of the DLL file that contains the entry point.</source>
          <target state="translated">진입점을 포함하는 DLL 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>You can provide a full or relative path.</source>
          <target state="translated">전체 또는 상대 경로 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</source>
          <target state="translated">경로 제공 하는 경우 메시지 DLL이 다른 방법으로 로드 하지 않는 한 실행 시 현재 경로에 DLL 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.InteropServices.DllImportAttribute.Value">
          <source>Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</source>
          <target state="translated">하지만, 정규화 된 경로 사용 하는 결과가 나타날 수 있습니다. 부정확 한 DLL이 이동 된 경우, 인식 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>