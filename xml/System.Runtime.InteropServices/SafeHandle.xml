<Type Name="SafeHandle" FullName="System.Runtime.InteropServices.SafeHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6c4334868cde5130ed9da65bfda7e798c24b12cd" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480627" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit SafeHandle extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SafeHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SafeHandle&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SafeHandle abstract : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Handles</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>운영 체제 핸들의 래퍼 클래스를 나타냅니다. 이 클래스는 상속되어야 합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.SafeHandle> 클래스 중간 가비지 수집에 의해 회수 및 의도 하지 않은 관리 되지 않는 개체 참조를 위해 Windows에서 재생 되 고 핸들을 방지 하는 핸들 리소스의 중요 한 종료를 제공 합니다.  
  
 이 항목은 다음 섹션으로 구성되어 있습니다.  
  
 [이유 SafeHandle?](#Why)   
 [SafeHandle이 수행 하는 작업](#Does)   
 [SafeHandle에서 파생 된 클래스](#Derived)  
  
<a name="Why"></a>   
## <a name="why-safehandle"></a>이유 SafeHandle?  
 .NET Framework 버전 2.0, 모든 운영 체제에 핸들을 캡슐화 할만 하기 전에 <xref:System.IntPtr> 관리 되는 래퍼 개체입니다. 이 네이티브 코드와 상호 운용 하는 편리한 방법, 핸들 스레드 예기치 않게 중단 또는 스택 오버플로와 같은 비동기 예외로 인해 누수 될 수 없습니다. 이러한 비동기 예외는 운영 체제 리소스를 정리 하는 데 방해가 되며 응용 프로그램에서 거의 모든 곳에서 발생할 수 있습니다.  
  
 하지만에 대 한 재정의 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드가 사용할 수 있는 개체는 가비지 수집 된 경우에 따라 중인 경우 관리 되지 않는 리소스 정리, 플랫폼 내에서 메서드를 실행 하는 동안 가비지 수집에 의해 종료 가능 개체를 확보할 수 있는 호출 호출 합니다. 해당 플랫폼에 전달 된 핸들을 해제 하는 종료 자가 호출, 핸들이 손상 될 수 있습니다. 메서드는 플랫폼 중 차단 되어 있는 동안 핸들을 회수할 수도 파일을 읽을 때와 같은 호출을 호출 합니다.  
  
 보다 Windows 핸들을 적극적으로 재활용 하기 때문에 대 한 핸들 수 재활용 되 고 중요 한 데이터가 포함 될 수 있는 다른 리소스를 가리킵니다. 이 재생 공격 이라고 잠재적으로 데이터를 손상 하 고 수 보안상 위험할 수 있습니다.  
  
<a name="Does"></a>   
## <a name="what-safehandle-does"></a>SafeHandle이 수행 하는 작업  
 <xref:System.Runtime.InteropServices.SafeHandle> 클래스는 이러한 개체 수명 문제 중 몇 가지를 단순화 하 고 플랫폼에 통합은 운영 체제 리소스가 누수 되지 않도록 호출 합니다. <xref:System.Runtime.InteropServices.SafeHandle> 클래스 할당 하 고 중단 없이 핸들을 해제 하 여 개체 수명 문제를 해결 합니다. 핸들이 닫혀 있으며 예기치 않은 실행 되도록 보장 하는 중요 한 종료 자가 포함 된 <xref:System.AppDomain> 플랫폼 호출이 때 경우에도 언로드, 손상 된 상태인 것으로 간주 됩니다.  
  
 때문에 <xref:System.Runtime.InteropServices.SafeHandle> 에서 상속 <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, 하지 이전에 중요 한 종료 자가 호출 됩니다. 동일한 가비지 수집이 더 이상 라이브 개체에는 종료 자가 호출 됩니다. 예를 들어 한 <xref:System.IO.FileStream> 개체 핸들이 유출 되거나 재활용 될 위험 없이 버퍼링 된 기존 데이터 플러시는 일반적인 종료자를 실행할 수 있습니다. 일반적인 용도 위한 중요 하 고 단순한 종료자 간의 매우 약한 순서이 없습니다. 사용 하 여 해당 라이브러리를 허용 하 여 기존 라이브러리의 마이그레이션을 지원 하기 위해 주로 존재 <xref:System.Runtime.InteropServices.SafeHandle> 해당 의미를 변경 하지 않고 있습니다. 또한 중요 한 종료 자가 및 모든 항목을 호출 등의 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType> 메서드를 제약이 있는 실행 영역에 있어야 합니다. 이 인해 제약 조건을 종료자의 호출 그래프 내에서 코드를 작성할 수 있습니다.  
  
 플랫폼 작업을 자동으로 호출에 의해 캡슐화 하는 핸들의 참조 횟수를 증가 <xref:System.Runtime.InteropServices.SafeHandle> 및 완료 되 면 해당 감소 합니다. 이렇게 하면 있는지 핸들은 재활용 되거나 되지 예기치 않게 닫혔습니다.  
  
 생성할 때 내부 핸들의 소유권을 지정할 수 있습니다 <xref:System.Runtime.InteropServices.SafeHandle> 값을 제공 하 여 개체는 `ownsHandle` 인수에는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스 생성자입니다. 이 제어 여부는 <xref:System.Runtime.InteropServices.SafeHandle> 개체가 삭제 된 후 개체 핸들을 해제 합니다.  특이 한 수명 요구 사항과 핸들에 대 한 또는 수명이 다른 사용자에 의해 제어 되는 핸들을 사용 하기 위한 유용 합니다.  
  
<a name="Derived"></a>   
## <a name="classes-derived-from-safehandle"></a>SafeHandle에서 파생 된 클래스  
 <xref:System.Runtime.InteropServices.SafeHandle> 운영 체제 핸들에 대 한 추상 래퍼 클래스가입니다. 이 클래스로부터 파생은 어렵습니다. 대신 <xref:Microsoft.Win32.SafeHandles> 네임스페이스에서 다음에 대해 SafeHandle을 제공하는 파생된 클래스를 사용하십시오.  
  
-   파일 (의 <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> 클래스).  
  
-   메모리 매핑된 파일 (의 <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> 클래스).  
  
-   파이프 (의 <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> 클래스).  
  
-   메모리 뷰에 (의 <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> 클래스).  
  
-   암호화 구문 (의 <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, 및 <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> 클래스).  
  
-   프로세스 (의 <xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> 클래스).  
  
-   레지스트리 키 (의 <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> 클래스).  
  
-   대기 핸들 (의 <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 클래스).  
  
   
  
## Examples  
 다음 코드 예제에서 파생 되는 운영 체제 파일 핸들에 대 한 사용자 지정 safehandle 만듭니다 <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>합니다. 파일에서 바이트를 읽고 해당 16 진수 값을 표시 합니다. 오류 테스트 도구도 포함 된 스레드를 중단 되도록 하지만 핸들 값은 해제 합니다.  사용 하는 경우는 <xref:System.IntPtr> 핸들을 나타내는, 핸들은 비동기 스레드 중단으로 인해 누락 가끔 있습니다.  
  
 컴파일된 응용 프로그램과 같은 폴더에 텍스트 파일이 필요 합니다. "HexViewer" 응용 프로그램 이름을 명령줄 사용법은:  
  
 `HexViewer <filename> -Fault`  
  
 필요에 따라 지정 `-Fault` 하려고 의도적으로 특정 창에서 스레드를 중단 하 여 핸들을 노출 합니다. Windows Perform.exe 도구를 사용 하 여 오류를 삽입 하는 동안 핸들 수를 모니터링할 수 있습니다.  
  
 [!code-csharp[SafeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">상속자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</permission>
    <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
    <block subset="none" type="overrides">
      <para>파생 된 클래스를 만들려면 <see cref="T:System.Runtime.InteropServices.SafeHandle" />를 만들고 운영 체제 핸들을 해제 하는 방법을 알고 있어야 합니다. 이 프로세스는 몇 가지 사용 때문에 다른 핸들 형식에 대 한 다른는 [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) 함수를 사용 하 고 다른 함수 보다 구체적인와 같은 [UnmapViewOfFile](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx) 또는 [FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx). 이러한 이유로 파생된 클래스 만들어야 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> safehandle에서 원하는 각 운영 체제 핸들 형식에 대 한 합니다.  
  
 <see cref="T:System.Runtime.InteropServices.SafeHandle" />에서 상속하는 경우 <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 및 <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" /> 멤버를 재정의해야 합니다.  
  
 잘못 된 핸들 값을 나타내는 값을 사용 하 여 기본 생성자를 호출 하는 기본 생성자도 제공 해야 및 <see cref="T:System.Boolean" /> 네이티브 핸들은에서 소유 하는지 여부를 나타내는 값의 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 하 고 결과적으로 해제 해야 경우 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 삭제 되었습니다.</para>
    </block>
    <altmember cref="N:Microsoft.Win32.SafeHandles" />
    <altmember cref="T:System.Runtime.InteropServices.CriticalHandle" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int invalidHandleValue, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (invalidHandleValue As IntPtr, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle(IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="invalidHandleValue" Type="System.IntPtr" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidHandleValue">잘못된 핸들의 값(일반적으로 0 또는 -1)입니다.  구현한 <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />는 이 값에 대해 <see langword="true" />를 반환해야 합니다.</param>
        <param name="ownsHandle">
          종료 단계에 <see langword="true" />에서 핸들을 안정적으로 해제할 수 있게 하려면 <see cref="T:System.Runtime.InteropServices.SafeHandle" />이고, 그렇지 않으면 <see langword="false" />(권장되지 않음)입니다.</param>
        <summary>지정된 잘못된 핸들 값을 사용하여 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `ownsHandle` 매개 변수는 `false`, <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 호출 되지 않습니다; 따라서은 하지 것이 좋습니다 코드 리소스 누수 될 수 있습니다이 매개 변수 값을 사용 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">파생 클래스가 비관리 코드 액세스 권한이 없는 어셈블리에 상주합니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">상속자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>핸들의 리소스를 해제하도록 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 메서드를 사용 하면 리소스를 해제 합니다. 이 경우 다른 스레드가 동일한 safehandle 개체를 사용 하는 즉시 발생 하지 않을 수 있지만 해당 되는 경우 더 이상으로 수행 됩니다. 대부분의 클래스를 사용 하지만 <xref:System.Runtime.InteropServices.SafeHandle> 클래스 제공 종료자에서는 필요한 경우에 따라 이것이 필요가 없습니다 (예를 들어 파일 버퍼를 플러시 또는 쓰려고 일부 데이터를 다시 메모리에). 이 경우 클래스 보다 먼저 실행 되도록 보장 하는 종료자를 제공할 수는 <xref:System.Runtime.InteropServices.SafeHandle> 중요 한 종료 자가 실행 합니다.  
  
 호출의 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 했으면 메서드를 사용 하는 <xref:System.Runtime.InteropServices.SafeHandle> 개체입니다.  
  
> [!NOTE]
>  항상 호출 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Runtime.InteropServices.SafeHandle> 개체입니다. 이렇게 하지 않으면 가비지 수집기가 <xref:System.Runtime.InteropServices.SafeHandle> 개체의 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousAddRef">
      <MemberSignature Language="C#" Value="public void DangerousAddRef (ref bool success);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousAddRef(bool&amp; success) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousAddRef (ByRef success As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousAddRef(bool % success);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="success" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="success">
          참조 카운터 값이 성공적으로 증가하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>
          <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 인스턴스의 참조 카운터의 값을 수동으로 증가시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 메서드를 핸들에 의해 사용 되는 메모리를 회수 공용 언어 런타임 않도록 (런타임에서 호출 하는 경우 발생 하는 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 메서드). 이 메서드를 수동으로 버전의 참조 횟수를 사용할 수는 <xref:System.Runtime.InteropServices.SafeHandle> 인스턴스. <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 사용 하 여 부울 값을 반환는 `ref` 매개 변수 (`success`)의 참조 횟수 값이 성공적으로 증가 하는지 여부를 나타내는입니다. 따라서 프로그램 논리를 오류가 발생 한 경우 돌아갈 수 있습니다. 설정 해야 `success` 를 `false` 호출 하기 전에 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>합니다. 경우 `success` 은 `true`에 대 한 호출을 비교 하 여 리소스 누수를 방지 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 해당 호출 하 여 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>합니다.  
  
> [!CAUTION]
>  이 메서드는 고급 사용자를 대상으로 하며 항상 신중 하 게 사용 해야 합니다. 핸들 리소스 누수를 방지 하려면 항상 스레드 중단 처리를 중단할 수 없도록 제약이 있는 실행 영역 cer (제약이) 내에이 메서드를 호출 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      </Docs>
    </Member>
    <Member MemberName="DangerousGetHandle">
      <MemberSignature Language="C#" Value="public IntPtr DangerousGetHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int DangerousGetHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr DangerousGetHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 필드의 값을 반환합니다.</summary>
        <returns>
          <see langword="IntPtr" /> 필드의 값을 나타내는 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" />입니다. <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />를 사용하여 핸들을 잘못된 핸들로 표시했으면 이 메서드는 오래된 값일 수 있는 원래 핸들 값을 그대로 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 인스턴스의 실제 핸들 값을 검색 하는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스를 파생 합니다. 이 메서드는 이전 버전과 호환성 때문에에 필요한.NET Framework에서 여러 속성을 반환할 `IntPtr` 형식을 처리 합니다. `IntPtr` 핸들 유형은 포인터나 핸들을 나타내는 데 사용 되는 플랫폼별 형식입니다.  
  
> [!CAUTION]
>  사용 하 여는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> 메서드 때문에 보안 위험을 내포할 수 있습니다, 핸들 같이 잘못 된 핸들로 표시 했으면 <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>, <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> 여전히 원래, 잠재적으로 유효 하지 않은 핸들 값을 반환 합니다. 반환 된 핸들이 언제 든 지 재생 될 수도 있습니다. 가장 좋은 경우 즉, 핸들 작업을 갑자기 중지 될 수 있습니다. 최악의 경우 핸들 또는 리소스 핸들을 나타내는 신뢰할 수 없는 코드에 노출 되는 경우 재생 보안 공격에서 재사용 되거나 반환 된 핸들에서 발생할 수 있습니다. 예를 들어 신뢰할 수 없는 호출자 반환 된 정당한 핸들에 대 한 데이터를 쿼리하고 완전히 관련이 없는 리소스에 대 한 정보를 받을 수 있습니다. 참조는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 및 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 메서드를 사용 하는 방법에 대 한 자세한 내용은 <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> 메서드를 참조 하십시오.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousRelease">
      <MemberSignature Language="C#" Value="public void DangerousRelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousRelease() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousRelease ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousRelease();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 인스턴스의 참조 카운터의 값을 수동으로 감소시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 메서드는의 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>합니다. 에 대 한 호출을 항상 일치 해야는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 메서드를 성공적으로 호출 하 여 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>합니다.  
  
> [!CAUTION]
>  이 메서드는 고급 사용자를 대상으로 하며 항상 신중 하 게 사용 해야 합니다. 핸들 리소스 누수를 방지 하려면 항상 스레드 중단 처리를 중단할 수 없도록 제약이 있는 실행 영역 cer (제약이) 내에이 메서드를 호출 합니다. 동일한 방식으로 일치 하지 않는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 호출이 일치 하지 않는 리소스 노출이 발생할 수 있습니다 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 호출 다른 스레드에 표시 될 수 있는 잘못 된 핸들 상태가 발생할 수 있습니다. 노출 하지 마십시오. <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 신뢰할 수 없는 코드를 호출 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 클래스에서 사용하는 리소스를 해제합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 클래스에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 메서드를 사용 하면 리소스를 해제 합니다. 이 경우 다른 스레드에서 safehandle의 같은 인스턴스를 사용 하는 즉시 발생 하지 않을 수 있지만 해당 되는 경우 더 이상으로 수행 됩니다. 하지만 클래스를 사용 하 여 가장 <xref:System.Runtime.InteropServices.SafeHandle> 종료자를 제공 하지 않아도,이 경우가 가끔 (예: 파일 버퍼를 플러시 하거나 일부 데이터를 다시 메모리에 쓸). 이 경우 보다 먼저 실행 되도록 보장 하는 종료자를 제공 하는 <xref:System.Runtime.InteropServices.SafeHandle> 중요 한 종료 자가 실행 합니다.  
  
 호출의 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 했으면 메서드를 사용 하는 <xref:System.Runtime.InteropServices.SafeHandle> 개체입니다. <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 메서드는 <xref:System.Runtime.InteropServices.SafeHandle> 불안정 한 상태가 개체입니다.  
  
> [!NOTE]
>  항상 호출 하는 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 방법에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Runtime.InteropServices.SafeHandle> 개체입니다. 이렇게 하지 않으면 가비지 수집기가 <xref:System.Runtime.InteropServices.SafeHandle> 개체의 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          일반적인 삭제 작업을 수행하려면 <see langword="true" />로 설정하고, 핸들을 종료하려면 <see langword="false" />로 설정합니다.</param>
        <summary>일반적인 삭제 작업을 수행할지 여부를 지정하여 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 클래스에서 사용하는 관리되지 않는 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 명시적으로 호출 해야는 <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 메서드는 `disposing` 매개 변수 설정 `false`합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SafeHandle ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>핸들에 연결된 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> 메서드는에 대 한 소멸자는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스입니다. 응용 프로그램 코드에서이 메서드를 직접 호출 하지 않아야 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="handle">
      <MemberSignature Language="C#" Value="protected IntPtr handle;" />
      <MemberSignature Language="ILAsm" Value=".field family native int handle" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberSignature Language="VB.NET" Value="Protected handle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: IntPtr handle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>래핑할 핸들을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 핸들을 공개적으로 노출 하지 마십시오 (즉, 파생된 클래스 외부에).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>핸들이 닫혔는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          핸들이 닫혔으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> 메서드를 나타내는 값을 반환 여부는 <xref:System.Runtime.InteropServices.SafeHandle> 개체의 핸들 네이티브 리소스와 연결 되어 있지 않습니다. 정의에서이 점에서 차이가 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 있는지 여부를 지정 된 핸들은 항상 잘못 된 것으로 계산 하는 속성입니다. <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> 메서드가 반환 되는 `true` 다음과 같은 경우에는 값:  
  
-   <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> 메서드를 호출 했습니다.  
  
-   <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> 메서드 또는 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 메서드를 호출 하 고에 참조가 없는 <xref:System.Runtime.InteropServices.SafeHandle> 다른 스레드에서 개체입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="IsInvalid">
      <MemberSignature Language="C#" Value="public abstract bool IsInvalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvalid" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsInvalid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsInvalid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>파생 클래스에서 재정의된 경우 핸들 값이 잘못되었는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          핸들 값이 잘못되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생된 클래스에서 구현 해야 합니다는 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 속성 공용 언어 런타임에서 중요 한 종료를 수행할지 여부를 결정할 수 있도록 합니다. 파생된 클래스의 핸들을 지 원하는 일반 유형을 적합 한 구현을 제공 해야 (0 또는-1 잘못 되었습니다.). 이러한 클래스 안전한 특정 핸들 형식에 대 한 추가 파생 다음 수 있습니다.  
  
 와 달리는 <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> 속성을 보고 하는 여부는 <xref:System.Runtime.InteropServices.SafeHandle> 개체가 기본 핸들을 사용 하 여 완료 했습니다는 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 속성이 있는지 여부를 지정 된 핸들 값은 항상 잘못 된 것으로 계산 합니다. 따라서는 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 속성은 항상 하나의 핸들 값에 대해 같은 값을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 한 파일을 성공적으로 연 경우를 확인 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스입니다.  
  
 [!code-csharp[SafeHandle#2](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="protected abstract bool ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReleaseHandle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ReleaseHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생 클래스에서 재정의된 경우 핸들을 해제하는 데 필요한 코드를 실행합니다.</summary>
        <returns>
          핸들이 성공적으로 해제되면 <see langword="true" />이고, 심각한 오류가 발생하면 <see langword="false" />입니다. 이러한 경우 [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) 관리 디버깅 도우미가 생성됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 메서드는 항상이 핸들은에 정의 된 대로 유효한 경우에만 한 번만 호출할 수는 <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> 속성입니다. 이 메서드를 구현 하면 <xref:System.Runtime.InteropServices.SafeHandle> 핸들을 해제 하는 데 필요한 코드를 실행 하기 위해 파생 클래스입니다. 때문에의 기능 중 하나 <xref:System.Runtime.InteropServices.SafeHandle> 구현에서 코드, 즉 리소스 누수 방지를 보장 하는 것 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 실패 하지 해야 합니다. 가비지 컬렉션이 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 동시에 가비지 수집 된 개체에 대 한 일반 종료 자가 실행 된 후입니다. 가비지 수집기는이 메서드를 호출 하는 리소스를 보장 하 고 진행 중인 동안 메서드를 중단 되지 것입니다. 이 메서드는 인스턴스 생성 시의 모든 메서드는 정적으로 결정할 수 있는 호출 그래프) (함께 제약이 있는 실행 영역 (CER)으로 준비 됩니다. 하지만 이렇게 하면 스레드 중단을 계속 해야에서 재정의 된 모든 오류 경로 적용 하지 않도록 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 메서드. 특히 적용 된 <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> 특성에서 호출 하면 모든 메서드에을 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>합니다. 대부분의 경우에서이 코드 여야 합니다.  
  
 `ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)`  
  
 또한 간단한 정리를 위한 (Win32 API를 호출 하는 예를 들어 `CloseHandle` 열려 있는 파일 핸들에) 단일 플랫폼 호출에 대 한 반환 값을 확인할 수 있습니다. 복잡 한 정리를 위해 많은 프로그램 논리와 중 일부는 실패할 수 있습니다, 많은 메서드 호출을 할 수 있습니다. 프로그램 논리는 이러한 각 경우에 대 한 대체 (fallback) 코드에 있는지 확인 해야 합니다.  
  
 경우 <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> 반환 `false` 어떤 이유로 든 생성 한 [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) 관리 디버깅 도우미입니다.  이 리소스를 해제 하 여 시도 실패 하는 경우를 검색할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 핸들을 해제에 대해 제공 된 큰 예제의 일부는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스입니다.  
  
 [!code-csharp[SafeHandle#3](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandle">
      <MemberSignature Language="C#" Value="protected void SetHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">사용할 기존 핸들입니다.</param>
        <summary>지정된 기존 핸들에 대한 핸들을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> 메서드는.NET Framework COM interop 인프라 마샬링을 지원 하지 않으므로 (예를 들어 핸들이 반환 되 면 구조체의) 기존 핸들을 지원 해야 하는 경우에 출력 구조에 대 한 핸들입니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandleAsInvalid">
      <MemberSignature Language="C#" Value="public void SetHandleAsInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHandleAsInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHandleAsInvalid ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHandleAsInvalid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>더 이상 사용되지 않는 핸들로 표시합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 된 <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> 메서드 핸들에 더 이상 리소스 참조를 알고 있는 경우에 합니다. 값 바뀌지는 <xref:System.Runtime.InteropServices.SafeHandle.handle> 필드; 닫기 핸들의만 표시 합니다. 핸들 수 오래 된 값을 포함 합니다. 이 호출의 영향은은 시도 되지 않습니다는 리소스를 해제 합니다.  
  
 과 마찬가지로 <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> 메서드를 사용 하 여 <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> 기존 핸들을 지원 해야 하는 경우에 합니다.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">관리 되지 않는 코드를 호출할 수 있는 권한입니다. 보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>