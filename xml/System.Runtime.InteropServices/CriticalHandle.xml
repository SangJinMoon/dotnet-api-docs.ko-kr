<Type Name="CriticalHandle" FullName="System.Runtime.InteropServices.CriticalHandle">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="56d9d023a154981435b37666fa081861ca0100c2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CriticalHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CriticalHandle extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.CriticalHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CriticalHandle&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CriticalHandle abstract : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Handles</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c35a8-101">핸들 리소스에 대한 래퍼 클래스를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c35a8-101">Represents a wrapper class for handle resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-102"><xref:System.Runtime.InteropServices.CriticalHandle> 클래스는 비슷합니다는 <xref:System.Runtime.InteropServices.SafeHandle> 점을 제외 하 고 클래스 <xref:System.Runtime.InteropServices.SafeHandle> 참조 횟수를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-102">The <xref:System.Runtime.InteropServices.CriticalHandle> class is similar to the <xref:System.Runtime.InteropServices.SafeHandle> class, except that <xref:System.Runtime.InteropServices.SafeHandle> implements reference counting.</span></span> <span data-ttu-id="c35a8-103">사용할 수 있습니다 <xref:System.Runtime.InteropServices.CriticalHandle> 대신 <xref:System.Runtime.InteropServices.SafeHandle> 성능 문제를 해결할 때 필요한 동기화를 더 제공할 수 있습니다를 효율적으로 직접 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-103">You can use <xref:System.Runtime.InteropServices.CriticalHandle> instead of <xref:System.Runtime.InteropServices.SafeHandle> to address performance considerations when you can provide the necessary synchronization more efficiently yourself.</span></span>  
  
 <span data-ttu-id="c35a8-104">때문에 <xref:System.Runtime.InteropServices.CriticalHandle> 클래스 참조 횟수 계산을 수행 하지 않습니다, 핸들 재활용 보안 공격 으로부터 보호를 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-104">Because the <xref:System.Runtime.InteropServices.CriticalHandle> class does not perform reference counting, it does not provide protection from handle recycling security attacks.</span></span> <span data-ttu-id="c35a8-105">참조 알고리즘을 암시적으로 계산 작업이 직렬화, 때문에 어느 정도의 스레드 보안 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-105">Because the reference counting algorithm implicitly serializes operations, a certain amount of thread safety is also lost.</span></span> <span data-ttu-id="c35a8-106">호출 하는 경우는 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 메서드 핸들을 사용 하는 작업은 다른 스레드에서 하는 동안 또는 호출 하는 경우 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 또는 <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> 결과 동시에 두 개의 스레드에서 명확 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-106">If you call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> or <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method while an operation that is using the handle is outstanding on another thread, or if you call <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> or <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> from two threads at the same time, the results are non-deterministic.</span></span> <span data-ttu-id="c35a8-107"><xref:System.Runtime.InteropServices.CriticalHandle> 클래스에서 제공 하는 결정적 종료를 계속 제공는 <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-107">The <xref:System.Runtime.InteropServices.CriticalHandle> class still provides the guaranteed critical finalization provided by the <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject> class.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="c35a8-108">상속자에 대 한 완전 신뢰 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c35a8-108">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="c35a8-109">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c35a8-109">This member cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <permission cref="T:System.Security.SecurityCriticalAttribute">
      <span data-ttu-id="c35a8-110">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c35a8-110">requires full trust for the immediate caller.</span>
      </span>
      <span data-ttu-id="c35a8-111">이 클래스는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c35a8-111">This class cannot be used by partially trusted or transparent code.</span>
      </span>
    </permission>
    <altmember cref="T:System.Runtime.InteropServices.SafeHandle" />
    <altmember cref="N:Microsoft.Win32.SafeHandles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CriticalHandle (IntPtr invalidHandleValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int invalidHandleValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (invalidHandleValue As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CriticalHandle(IntPtr invalidHandleValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="invalidHandleValue" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="invalidHandleValue">
          <span data-ttu-id="c35a8-112">잘못된 핸들의 값(일반적으로 0 또는 -1)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-112">The value of an invalid handle (usually 0 or -1).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c35a8-113">지정된 잘못된 핸들 값을 사용하여 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-113">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> class with the specified invalid handle value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="c35a8-114">파생 클래스가 비관리 코드 액세스 권한이 없는 어셈블리에 상주합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-114">The derived class resides in an assembly without unmanaged code access permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
          <span data-ttu-id="c35a8-115">상속자에 대 한 완전 신뢰 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-115">for full trust for inheritors.</span>
          </span>
          <span data-ttu-id="c35a8-116">이 멤버는 부분적으로 신뢰할 수 있는 코드에서 상속할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-116">This member cannot be inherited by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="c35a8-117">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-117">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="c35a8-118">이 클래스는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-118">This class cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CriticalHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c35a8-119">핸들의 리소스를 해제하도록 표시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-119">Marks the handle for releasing and freeing resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-120">호출 된 <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 메서드를 사용 하면 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-120">Calling the <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> or <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="c35a8-121">와 달리는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스를 항상 수행 됩니다이를 나타내는 다른 스레드가이 핸들에 사용 하는 참조 횟수가 없기 때문에 즉시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-121">Unlike the <xref:System.Runtime.InteropServices.SafeHandle> class, this will always happen immediately since there is no reference count to indicate that other threads are using this handle.</span></span> <span data-ttu-id="c35a8-122">호출 해도 지 확인 한 동기화 메커니즘을 사용 해야 따라서는 <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c35a8-122">Therefore, you must employ a synchronization mechanism to ensure it is safe to call the <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> method.</span></span> <span data-ttu-id="c35a8-123">대부분의 클래스를 사용 하지만 <xref:System.Runtime.InteropServices.CriticalHandle> 클래스 제공 종료자에서는 필요한 경우에 따라 이것이 필요가 없습니다 (예를 들어 파일 버퍼를 플러시 또는 쓰려고 일부 데이터를 다시 메모리에).</span><span class="sxs-lookup"><span data-stu-id="c35a8-123">Although most classes that use the <xref:System.Runtime.InteropServices.CriticalHandle> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="c35a8-124">이 경우 클래스 보다 먼저 실행 되도록 보장 하는 종료자를 제공할 수는 <xref:System.Runtime.InteropServices.CriticalHandle> 중요 한 종료 자가 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-124">In this case, the class can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.CriticalHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="c35a8-125">호출의 <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 했으면 메서드를 사용 하는 <xref:System.Runtime.InteropServices.CriticalHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-125">Call the <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> or <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.CriticalHandle> object.</span></span> <span data-ttu-id="c35a8-126"><xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 메서드는 <xref:System.Runtime.InteropServices.CriticalHandle> 불안정 한 상태가 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-126">The <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> method leaves the <xref:System.Runtime.InteropServices.CriticalHandle> object in an unusable state.</span></span>  
  
 <span data-ttu-id="c35a8-127">**참고** 항상 호출 <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Runtime.InteropServices.CriticalHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-127">**Note** Always call <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> or <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> before you release your last reference to the <xref:System.Runtime.InteropServices.CriticalHandle> object.</span></span> <span data-ttu-id="c35a8-128">이렇게 하지 않으면 가비지 수집기가 <xref:System.Runtime.InteropServices.CriticalHandle> 개체의 <xref:System.Runtime.InteropServices.CriticalHandle.Finalize%2A> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-128">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.CriticalHandle> object's <xref:System.Runtime.InteropServices.CriticalHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c35a8-129">핸들의 리소스를 해제하도록 표시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-129">Marks the handle for releasing and freeing resources.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CriticalHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c35a8-130">
            <see cref="T:System.Runtime.InteropServices.CriticalHandle" />에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-130">Releases all resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-131">호출 된 <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 메서드를 사용 하면 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-131">Calling the <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> or <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="c35a8-132">와 달리는 <xref:System.Runtime.InteropServices.SafeHandle> 클래스를 항상 수행 됩니다이를 나타내는 다른 스레드가이 핸들에 사용 하는 참조 횟수가 없기 때문에 즉시 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-132">Unlike the <xref:System.Runtime.InteropServices.SafeHandle> class, this will always happen immediately since there is no reference count to indicate that other threads are using this handle.</span></span> <span data-ttu-id="c35a8-133">호출 해도 지 확인 한 동기화 메커니즘을 사용 해야 따라서는 <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c35a8-133">Therefore, you must employ a synchronization mechanism to ensure it is safe to call the <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> method.</span></span> <span data-ttu-id="c35a8-134">대부분의 클래스를 사용 하지만 <xref:System.Runtime.InteropServices.CriticalHandle> 클래스 제공 종료자에서는 필요한 경우에 따라 이것이 필요가 없습니다 (예를 들어 파일 버퍼를 플러시 또는 쓰려고 일부 데이터를 다시 메모리에).</span><span class="sxs-lookup"><span data-stu-id="c35a8-134">Although most classes that use the <xref:System.Runtime.InteropServices.CriticalHandle> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="c35a8-135">이 경우 클래스 보다 먼저 실행 되도록 보장 하는 종료자를 제공할 수는 <xref:System.Runtime.InteropServices.CriticalHandle> 중요 한 종료 자가 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-135">In this case, the class can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.CriticalHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="c35a8-136">호출의 <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 했으면 메서드를 사용 하는 <xref:System.Runtime.InteropServices.CriticalHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-136">Call the <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> or <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.CriticalHandle> object.</span></span> <span data-ttu-id="c35a8-137"><xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 메서드는 <xref:System.Runtime.InteropServices.CriticalHandle> 불안정 한 상태가 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-137">The <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> method leaves the <xref:System.Runtime.InteropServices.CriticalHandle> object in an unusable state.</span></span>  
  
 <span data-ttu-id="c35a8-138">**참고** 항상 호출은 <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 방법에 대 한 마지막 참조를 해제 하기 전에 <xref:System.Runtime.InteropServices.CriticalHandle> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-138">**Note** Always call the <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> or <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> method before you release your last reference to the <xref:System.Runtime.InteropServices.CriticalHandle> object.</span></span> <span data-ttu-id="c35a8-139">이렇게 하지 않으면 가비지 수집기가 <xref:System.Runtime.InteropServices.CriticalHandle> 개체의 <xref:System.Runtime.InteropServices.CriticalHandle.Finalize%2A> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-139">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.CriticalHandle> object's <xref:System.Runtime.InteropServices.CriticalHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="c35a8-140">일반적인 삭제 작업을 수행하려면 <see langword="true" />로 설정하고, 핸들을 종료하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-140">
              <see langword="true" /> for a normal dispose operation; <see langword="false" /> to finalize the handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c35a8-141">일반적인 삭제 작업을 수행할지 여부를 지정하여 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 클래스에서 사용하는 관리되지 않는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-141">Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> class specifying whether to perform a normal dispose operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-142">명시적으로 호출 해야는 <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 메서드는 `disposing` 매개 변수 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-142">You should never explicitly call the <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> method with the `disposing` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CriticalHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CriticalHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!CriticalHandle ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c35a8-143">핸들에 연결된 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-143">Frees all resources associated with the handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-144"><xref:System.Runtime.InteropServices.CriticalHandle.Finalize%2A> 메서드는에 대 한 소멸자는 <xref:System.Runtime.InteropServices.CriticalHandle> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-144">The <xref:System.Runtime.InteropServices.CriticalHandle.Finalize%2A> method is the destructor for the <xref:System.Runtime.InteropServices.CriticalHandle> class.</span></span> <span data-ttu-id="c35a8-145">응용 프로그램 코드에서이 메서드를 직접 호출 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-145">Application code should not call this method directly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.CriticalHandle.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="handle">
      <MemberSignature Language="C#" Value="protected IntPtr handle;" />
      <MemberSignature Language="ILAsm" Value=".field family native int handle" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.CriticalHandle.handle" />
      <MemberSignature Language="VB.NET" Value="Protected handle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: IntPtr handle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c35a8-146">래핑할 핸들을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-146">Specifies the handle to be wrapped.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-147">핸들을 공개적으로 노출 하지 마십시오 (즉, 파생된 클래스 외부에).</span><span class="sxs-lookup"><span data-stu-id="c35a8-147">Do not expose the handle publicly (that is, outside of the derived class).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.CriticalHandle.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c35a8-148">핸들이 닫혔는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-148">Gets a value indicating whether the handle is closed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c35a8-149">핸들이 닫혔으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-149">
              <see langword="true" /> if the handle is closed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-150"><xref:System.Runtime.InteropServices.CriticalHandle.IsClosed%2A> 메서드를 나타내는 값을 반환 여부는 <xref:System.Runtime.InteropServices.CriticalHandle> 개체의 핸들 네이티브 리소스와 연결 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-150">The <xref:System.Runtime.InteropServices.CriticalHandle.IsClosed%2A> method returns a value indicating whether the <xref:System.Runtime.InteropServices.CriticalHandle> object's handle is no longer associated with a native resource.</span></span> <span data-ttu-id="c35a8-151">정의에서이 점에서 차이가 <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> 있는지 여부를 지정 된 핸들은 항상 잘못 된 것으로 계산 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-151">This differs from the definition of the <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> property, which computes whether a given handle is always considered invalid.</span></span> <span data-ttu-id="c35a8-152"><xref:System.Runtime.InteropServices.CriticalHandle.IsClosed%2A> 메서드가 반환 되는 `true` 다음과 같은 경우에는 값:</span><span class="sxs-lookup"><span data-stu-id="c35a8-152">The <xref:System.Runtime.InteropServices.CriticalHandle.IsClosed%2A> method returns a `true` value in the following cases:</span></span>  
  
-   <span data-ttu-id="c35a8-153"><xref:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid%2A> 메서드를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-153">The <xref:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid%2A> method was called.</span></span>  
  
-   <span data-ttu-id="c35a8-154"><xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 메서드 또는 <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 메서드를 호출 하 고에 참조가 없는 <xref:System.Runtime.InteropServices.CriticalHandle> 다른 스레드에서 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-154">The <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> method or <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> method was called and there are no references to the <xref:System.Runtime.InteropServices.CriticalHandle> object on other threads.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalid">
      <MemberSignature Language="C#" Value="public abstract bool IsInvalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvalid" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsInvalid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsInvalid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c35a8-155">파생 클래스에서 재정의된 경우 핸들 값이 잘못되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-155">When overridden in a derived class, gets a value indicating whether the handle value is invalid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c35a8-156">핸들이 잘못되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-156">
              <see langword="true" /> if the handle is valid; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-157">파생된 클래스에서 구현 해야 합니다는 <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> 속성 공용 언어 런타임에서 중요 한 종료를 수행할지 여부를 결정할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-157">Derived classes must implement the <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> property so that the common language runtime can determine whether critical finalization is required.</span></span> <span data-ttu-id="c35a8-158">파생된 클래스의 핸들을 지 원하는 일반 유형을 적합 한 구현을 제공 해야 (0 또는-1 잘못 되었습니다.).</span><span class="sxs-lookup"><span data-stu-id="c35a8-158">Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid).</span></span> <span data-ttu-id="c35a8-159">이러한 클래스 안전한 특정 핸들 형식에 대 한 추가 파생 다음 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-159">These classes can then be further derived for specific safe handle types.</span></span>  
  
 <span data-ttu-id="c35a8-160">와 달리는 <xref:System.Runtime.InteropServices.CriticalHandle.IsClosed%2A> 속성을 보고 하는 여부는 <xref:System.Runtime.InteropServices.CriticalHandle> 개체가 기본 핸들을 사용 하 여 완료 했습니다는 <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> 속성이 있는지 여부를 지정 된 핸들 값은 항상 잘못 된 것으로 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-160">Unlike the <xref:System.Runtime.InteropServices.CriticalHandle.IsClosed%2A> property, which reports whether the <xref:System.Runtime.InteropServices.CriticalHandle> object has finished using the underlying handle, the <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> property calculates whether the given handle value is always considered invalid.</span></span> <span data-ttu-id="c35a8-161">따라서는 <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> 속성은 항상 하나의 핸들 값에 대해 같은 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-161">Therefore, the <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> property always returns the same value for any one handle value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="protected abstract bool ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReleaseHandle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ReleaseHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c35a8-162">파생 클래스에서 재정의된 경우 핸들을 해제하는 데 필요한 코드를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-162">When overridden in a derived class, executes the code required to free the handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c35a8-163">핸들이 성공적으로 해제되면 <see langword="true" />이고, 심각한 오류가 발생하면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-163">
              <see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="c35a8-164">이러한 경우 [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) 관리 디버깅 도우미가 생성됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-164">In this case, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-165"><xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> 메서드는 항상 한 번만 호출할 수 적절 한 동기화 메커니즘을 호출 하는 하나의을 구현 하면는 <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> 또는 <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> 메서드 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-165">The <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> method is guaranteed to be called only once, provided that you employ proper synchronization mechanisms to ensure that only one call to the <xref:System.Runtime.InteropServices.CriticalHandle.Close%2A> or <xref:System.Runtime.InteropServices.CriticalHandle.Dispose%2A> method is made.</span></span> <span data-ttu-id="c35a8-166"><xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> 경우 메서드는 호출 하지는 <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> 또는 <xref:System.Runtime.InteropServices.CriticalHandle.IsClosed%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-166">The <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> method will not be called if the <xref:System.Runtime.InteropServices.CriticalHandle.IsInvalid%2A> or <xref:System.Runtime.InteropServices.CriticalHandle.IsClosed%2A> property is `true`.</span></span> <span data-ttu-id="c35a8-167">이 메서드를 구현 하면 <xref:System.Runtime.InteropServices.CriticalHandle> 핸들을 해제 하는 데 필요한 코드를 실행 하기 위해 파생 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-167">Implement this method in your <xref:System.Runtime.InteropServices.CriticalHandle> derived classes to execute any code that is required to free the handle.</span></span> <span data-ttu-id="c35a8-168">때문에의 기능 중 하나 <xref:System.Runtime.InteropServices.CriticalHandle> 구현에서 코드, 즉 리소스 누수 방지를 보장 하는 것 <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> 실패 하지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-168">Because one of the functions of <xref:System.Runtime.InteropServices.CriticalHandle> is to guarantee prevention of resource leaks, the code in your implementation of <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> must never fail.</span></span> <span data-ttu-id="c35a8-169">가비지 컬렉션이 <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> 가비지 같은 시간에 수집된 된 개체에 대해 일반 종료자를 실행 하 고 진행 중 이므로 중단할 수 없습니다를 호출 하는 리소스 동안 보장입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-169">The garbage collector calls <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> after normal finalizers have been run for objects that were garbage collected at the same time, and guarantees the resources to invoke it and that it will not be interrupted while it is in progress.</span></span> <span data-ttu-id="c35a8-170">이 메서드는 인스턴스 생성 시의 모든 메서드는 정적으로 결정할 수 있는 호출 그래프) (함께 제약이 있는 실행 영역 (CER)으로 준비 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-170">This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph).</span></span> <span data-ttu-id="c35a8-171">하지만 이렇게 하면 스레드 중단을 계속 해야에서 재정의 된 모든 오류 경로 적용 하지 않도록 <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c35a8-171">Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> method.</span></span> <span data-ttu-id="c35a8-172">특히 적용 된 <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> 특성에서 호출 하면 모든 메서드에을 <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-172">In particular, apply the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to any methods you call from <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A>.</span></span> <span data-ttu-id="c35a8-173">대부분의 경우에서이 코드 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-173">In most cases this code should be:</span></span>  
  
 `ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)`  
  
 <span data-ttu-id="c35a8-174">또한 간단한 정리를 위한 (Win32 API를 호출 하는 예를 들어 `CloseHandle` 열려 있는 파일 핸들에) 단일 플랫폼 호출에 대 한 반환 값을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-174">Additionally, for simple cleanup (for example, calling the Win32 API `CloseHandle` on a file handle) you can check the return value for the single platform invoke call.</span></span> <span data-ttu-id="c35a8-175">복잡 한 정리를 위해 많은 프로그램 논리와 중 일부는 실패할 수 있습니다, 많은 메서드 호출을 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-175">For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail.</span></span> <span data-ttu-id="c35a8-176">프로그램 논리는 이러한 각 경우에 대 한 대체 (fallback) 코드에 있는지 확인 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-176">You must ensure that your program logic has fallback code for each of those cases.</span></span>  
  
 <span data-ttu-id="c35a8-177">경우는 <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> 메서드 반환 `false` 생성 어떤 이유로 든는 [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) 관리 디버깅 도우미입니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-177">If the <xref:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle%2A> method returns `false` for any reason, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandle">
      <MemberSignature Language="C#" Value="protected void SetHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="c35a8-178">사용할 기존 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-178">The pre-existing handle to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c35a8-179">지정된 기존 핸들에 대한 핸들을 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-179">Sets the handle to the specified pre-existing handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-180">사용 된 <xref:System.Runtime.InteropServices.CriticalHandle.SetHandle%2A> 구조체의 메서드는.NET Framework COM interop 인프라 마샬링을 지원 하지 않으므로 (예를 들어 핸들이 반환 되 면 구조체의) 기존 핸들을 지원 해야 하는 경우에 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-180">Use the <xref:System.Runtime.InteropServices.CriticalHandle.SetHandle%2A> method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling handles in a structure.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHandleAsInvalid">
      <MemberSignature Language="C#" Value="public void SetHandleAsInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHandleAsInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHandleAsInvalid ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHandleAsInvalid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c35a8-181">핸들을 잘못된 것으로 표시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c35a8-181">Marks a handle as invalid.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c35a8-182">호출 된 <xref:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid%2A> 메서드 핸들이 잘못 되었습니다. 하 고 표시 하려는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-182">Call the <xref:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid%2A> method only when you know that your handle is invalid and you want to mark it as such.</span></span> <span data-ttu-id="c35a8-183">값 바뀌지는 <xref:System.Runtime.InteropServices.CriticalHandle.handle> 필드; 핸들 잘못 된 것으로 표시만 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-183">Doing so does not change the value of the <xref:System.Runtime.InteropServices.CriticalHandle.handle> field; it only marks the handle as invalid.</span></span> <span data-ttu-id="c35a8-184">핸들 수 오래 된 값을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-184">The handle might then contain a potentially stale value.</span></span> <span data-ttu-id="c35a8-185">이 호출의 영향은은 시도 되지 않습니다는 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-185">The effect of this call is that no attempt is made to free the resources.</span></span>  
  
 <span data-ttu-id="c35a8-186">과 마찬가지로 <xref:System.Runtime.InteropServices.CriticalHandle.SetHandle%2A> 메서드를 사용 하 여 <xref:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid%2A> 기존 핸들을 지원 해야 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="c35a8-186">As with the <xref:System.Runtime.InteropServices.CriticalHandle.SetHandle%2A> method, use <xref:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid%2A> only if you need to support a pre-existing handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>