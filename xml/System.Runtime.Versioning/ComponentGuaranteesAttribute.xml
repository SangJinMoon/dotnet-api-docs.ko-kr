<Type Name="ComponentGuaranteesAttribute" FullName="System.Runtime.Versioning.ComponentGuaranteesAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="419d48be0fd64c8d209fc03bcc2d4676c2742593" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30490027" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ComponentGuaranteesAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ComponentGuaranteesAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ComponentGuaranteesAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ComponentGuaranteesAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>여러 버전으로 확장될 수 있는 구성 요소, 형식 또는 형식 멤버의 호환성 보장을 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> 라이브러리의 소비자가 여러 버전에서 기대할 수 있는 호환성 수준을 지정 하려면 구성 요소 및 클래스 라이브러리의 개발자가 사용 됩니다. 이후 버전의 라이브러리 또는 구성 요소는 기존 클라이언트를 중단 하지 않는다는 보증 수준을 나타냅니다. 그런 다음 클라이언트가 사용할 수는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> 버전에서 안정성을 유지 하기 위해 자신의 인터페이스를 설계에 보조 도구로 합니다.  
  
> [!NOTE]
>  공용 언어 런타임 (CLR)는 어떤 식으로든에서이 특성을 사용 하지 않습니다. 해당 값은 구성 요소 작성자의 의도 공식적으로 문서화에 있습니다. 컴파일 타임 도구 선언 된 보증을 위반 하는 컴파일 타임 오류를 감지 하 이러한 선언을 사용할 수도 있습니다.  
  
## <a name="levels-of-compatibility"></a>호환성 수준  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> 의 구성원으로 표시 되는 다음 호환성 수준을 지원는 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 열거형:  
  
-   버전 간 호환성 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType>). 클라이언트는 이후 버전은 기존 클라이언트를 중단 될 수 있습니다. 자세한 내용은 참조는 [아니요 호환성](#None) 이 항목의 뒷부분에 나오는 섹션.  
  
-   병렬 버전 간 호환성 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType>). 구성 요소는 어셈블리의 여러 버전이 같은 응용 프로그램 도메인에 로드 될 때 실행 되도록 테스트 되었습니다. 일반적으로 이후 버전 호환성을 않을 수 있습니다. 그러나 발생할 경우 주요 변경 사항이, 이전 버전은 수정 되지 않습니다 새 버전과 함께 존재 합니다. 병렬 실행은 기존 클라이언트에 주요 변경 내용이 있을 때 사용할 수 있는 방법의입니다. 자세한 내용은 참조는 [-병렬 호환성](#SideBySide) 이 항목의 뒷부분에 나오는 섹션.  
  
-   버전 간 호환성 안정적인 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType>). 이후 버전의 클라이언트를 해제 하지 말아야 하 고-병렬 실행 필요 하지 않습니다. 그러나 클라이언트 갑자기 중단 되는 경우 문제를 해결 하려면-병렬 실행을 수 있습니다. 자세한 내용은 참조는 [안정적인 호환성](#Standard) 섹션.  
  
-   버전 간 호환성 교환 (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType>). 이후 버전의 클라이언트를 중단 되지 것입니다 보장 하는 특별 한 주의 필요 합니다. 클라이언트는 서로 독립적으로 배포 되는 다른 어셈블리와의 통신에 사용 되는 인터페이스의 서명에 있는 이러한 형식을 사용 해야 합니다. 클라이언트가 차단 되는 경우-병렬 실행 수 없는 호환성 문제가 해결는 특정된 응용 프로그램 도메인에 포함 되도록 이러한 형식의 버전을 하나만 사용할 수 있습니다. 자세한 내용은 참조는 [교환 형식 호환성](#Exchange) 섹션.  
  
 다음 섹션에서는 각 보다 자세히 설명에서 하는 보증 수준에 설명 합니다.  
  
<a name="None"></a>   
### <a name="no-compatibility"></a>비 호환성  
 구성 요소 구성 요소로 표시 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None?displayProperty=nameWithType> 에서 됨을 나타냅니다 공급자 호환성을 보장 하지 않습니다. 클라이언트는 노출 된 인터페이스에 대 한 모든 종속 관계를 수행 하지 않아야 합니다. 이 호환성 수준은 실험적 되거나은 공개적으로 노출 하는 있지만을 위한 동시에 항상 업데이트는 구성 요소 형식에 유용 합니다. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> 명시적으로 외부 구성 요소에서이 구성 요소를 사용 하지 해야 함을 나타냅니다.  
  
<a name="SideBySide"></a>   
### <a name="side-by-side-compatibility"></a>Side-by-side 호환성  
 구성 요소 구성 요소로 표시 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide?displayProperty=nameWithType> 구성 요소는 테스트 어셈블리의 여러 버전이 같은 응용 프로그램 도메인에 로드 되 면 작업을 나타냅니다. 주요 변경 내용은 더 큰 버전 번호를 가진 어셈블리에 적용 되 긴 허용 됩니다. 이전 버전의 어셈블리에 바인딩되는 구성 요소는 이전 버전에 바인딩할 것으로 예상 되 고 다른 구성 요소는 새 버전으로 바인딩할 수 있습니다. 으로 선언 하는 구성 요소를 업데이트할 수 이기도 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide> 데이터 손실 없이 이전 버전을 수정 하 여 합니다.  
  
<a name="Standard"></a>   
### <a name="stable-compatibility"></a>안정적인 호환성  
 으로 형식을 표시 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable?displayProperty=nameWithType> 버전에서 형식을 안정적인 계속 해야 나타냅니다. 그러나 동일한 응용 프로그램 도메인에 존재 하는 안정적인 종류의 병렬-버전에 대 한 수 있습니다 수도 있습니다.  
  
 안정적인 형식은 이진 호환성 높은 막대를 유지 관리합니다. 이 때문에 공급자 안정적인 형식을 주요 변경 내용 작업을 하지 말아야 합니다. 다음과 같은 종류의 변경이 허용 됩니다.  
  
-   전용 인스턴스 필드에 필드 추가 또는 제거 형식에서으로 serialization 형식을이 중단 되지 않습니다.  
  
-   순차 불가능 형식을 직렬화 가능 형식으로 변경 합니다. 그러나 (직렬화 가능 형식이 변경할 수 없습니다 순차 불가능 형식으로.)  
  
-   메서드에서 보다 파생 된 예외를 새로 만들기를 throw 합니다.  
  
-   메서드는 성능을 향상 시킬 수 있습니다.  
  
-   변경 내용을 저하 대부분의 클라이언트 상태로 반환 값의 범위를 변경 합니다.  
  
-   심각한 버그를 수정 하는 사유 높은 고 부정적인 영향을 받는 클라이언트 수가 적습니다.  
  
 새 버전의 안정적인 구성 해도 기존 클라이언트가 중지 되지 않을, 때문에 일반적으로 안정 된 구성 요소의 버전을 하나만 필요 응용 프로그램 도메인에서 합니다. 그러나 하지 요구 사항 때문에 이것이 안정적인 형식은 모든 구성 요소에 동의 하는 잘 알려진 교환 형식으로 사용 되지 않습니다. 따라서 새 버전의 안정적인 구성 일부 구성 요소를 실수로 손상지 않습니다 및 다른 구성 요소 버전은 새 버전이 필요 하는 경우 모두 이전 및 새 구성 요소를 로드 하 여 문제를 해결 수 있습니다.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> 보다 강력한 버전 호환성 보장을 제공 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>합니다. 다중 버전 구성 요소에 대 한 공통 기본 것합니다.  
  
 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> 함께 사용할 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide>, 구성 요소의 호환성을 중단 하지 것입니다 하지만 여러 개의 버전이 지정 된 응용 프로그램 도메인에 로드 될 때 제대로 작동 하는지 테스트는 적용 가능한 상태입니다.  
  
 형식 또는 메서드의 것으로 표시 된 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>로 업그레이드할 수 있습니다 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>합니다. 그러나이 다운 그레이드할 수 없습니다 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>합니다.  
  
<a name="Exchange"></a>   
### <a name="exchange-type-compatibility"></a>교환 형식 호환성  
 으로 형식을 표시 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange?displayProperty=nameWithType> 보다 더 강력한 버전 호환성 보장 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>, 가장 안정적인 모든 형식에 적용 해야 합니다. 이러한 형식은 모두 시간 (CLR의 모든 버전) 또는 구성 요소 또는 응용 프로그램의 모든 버전에서에서 모든 구성 요소 경계를 넘어 독립적으로 작성 된 구성 요소와 공간 (프로세스 간, 단일 프로세스에서 크로스-CLR 간 교환에 대해 사용 하는 데 사용 됩니다. 응용 프로그램 간 도메인 한 CLR에). Exchange 형식에 대 한 주요 변경 내용 이루어지면 경우 유형의 여러 버전을 로드 하 여 문제를 해결 하는 것이 불가능 합니다.  
  
 교환 형식은 문제는 매우 심각 (예: 심각한 보안 문제) 또는 파손 가능성이 매우 적습니다. (즉, 하는 경우 코드 없습니다 소요 되었을 수 있으므로 종속성에 있는 임의의 방식으로 동작 이미 끊었습니다) 하는 경우에 변경 해야 합니다. 다음과 같은 모든 종류의 변경 형식으로 만들 수 있습니다.  
  
-   새 인터페이스 정의의 상속을 추가 합니다.  
  
-   새로 상속 된 인터페이스 정의의 메서드를 구현 하는 새 개인 메서드를 추가 합니다.  
  
-   새 정적 필드를 추가 합니다.  
  
-   새 정적 메서드를 추가 합니다.  
  
-   새 가상이 아닌 인스턴스 메서드를 추가 합니다.  
  
 다음 주요 변경 내용 간주 되 고 기본 형식에 허용 되지 않습니다.  
  
-   직렬화 형식을 변경 합니다. 버전 독립적 serialization가 필요 합니다.  
  
-   추가 또는 전용 인스턴스 필드를 제거 합니다. 이 형식의 serialization 형식을 변경 하 고 리플렉션을 사용 하 여 클라이언트 코드를 깰 위험 합니다.  
  
-   형식의 순차성을 변경 합니다. 순차 불가능 형식 하지 만들 수 있습니다, 직렬화 가능 하며 그 반대 과정도 수행 합니다.  
  
-   메서드에서 서로 다른 예외를 throw 하는 방법  
  
-   멤버 정의 이러한 가능성 하 고 클라이언트에서 알 수 없는 값을 처리 하는 방법을 분명 하 게 표시 하지 않는 한 메서드의 반환 값의 범위를 변경 합니다.  
  
-   대부분의 버그를 수정 합니다. 해당 형식의 소비자는 기존 동작에 의존 합니다.  
  
 구성 요소, 형식 또는 멤버는 기본적으로 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> 보장로 변경할 수 없는 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> 또는 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None>합니다.  
  
 Exchange 유형은 기본 유형, 일반적으로 (같은 <xref:System.Int32> 및 <xref:System.String> .NET framework에서) 및 인터페이스 (같은 <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, 및 <xref:System.IComparable%601>) 공용 인터페이스에서 일반적으로 사용 되 합니다.  
  
 Exchange 형식을 다른 형식으로 표시 된를 공개적으로 노출 될 수 있습니다 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange> 호환성. 또한 exchange 유형을 변경 되기 쉬운 하는 Windows Api의 동작에 종속 될 수 없습니다.  
  
## <a name="component-guarantees-a-summary"></a>구성 요소 보장: 요약  
 다음 표에서 구성 요소의 특성 및 사용 해당 호환성 보장에 영향을 보여 줍니다.  
  
|구성 요소 특성|Exchange|안정|-나란히|없음|  
|-------------------------------|--------------|------------|--------------------|----------|  
|가능 구성 요소 간 인터페이스에 해당 버전 독립적으로 사용 합니다.|Y|N|N|N|  
|일 수 있습니다 (개인적으로) 어셈블리에서 해당 버전 독립적으로 사용 합니다.|Y|Y|Y|N|  
|단일 응용 프로그램 도메인의 여러 버전이 있을 수 있습니다.|N|Y|Y|Y|  
|주요 변경 내용 확인 수 있습니다.|N|N|Y|Y|  
|특정 어셈블리의 여러 버전을 함께 로드 될 수 있도록 테스트 합니다.|N|N|Y|N|  
|위치에 주요 변경 내용 가능 합니다.|N|N|N|Y|  
|매우 안전 사소한 변경 사항이 서비스를 만들 수 있습니다.|Y|Y|Y|Y|  
  
## <a name="applying-the-attribute"></a>특성 적용  
 적용할 수는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> 어셈블리, 형식 또는 형식 멤버입니다. 해당 응용 프로그램은 계층적입니다. 즉, 기본적으로 정의 된 보장 하 여는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> 어셈블리 수준에서 특성의 속성 어셈블리 및 해당 형식의 모든 멤버에 모든 종류의 보증을 정의 합니다. 마찬가지로, 형식에 적용 하는 보증은 기본적으로도 적용 형식의 각 멤버에.  
  
 이 상속 된 수준의 보증을 적용 하 여 재정의할 수 있습니다는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> 개별 형식 및 형식 멤버에 있습니다. 그러나 기본값을 재정의 하는 보증만 약화 되어 수 있게 보증은; 높일 수 없습니다. 예를 들어, 어셈블리 표시 되는 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> 보장 해당 형식과 멤버 호환성 보장 되지 있고 어셈블리에서 형식 또는 멤버에 적용 되는 다른 모든 보장은 무시 됩니다.  
  
## <a name="testing-the-guarantee"></a>보증은 테스트  
 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> 속성의 멤버를 반환 합니다.는 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions> 열거형으로 표시 되는 <xref:System.FlagsAttribute> 특성입니다. 즉, 플래그 트래버스하여 잠재적으로 알 수 없는 플래그를 가장 하 여 관심 있는 테스트 해야 합니다. 다음 예제에서는 형식으로 표시 되는지 여부를 테스트 하는 예를 들어 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable>합니다.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#1)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#1)]  
  
 다음 예제에서는 형식이로 표시 되어 있는지 여부를 테스트 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> 또는 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>합니다.  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#2)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#2)]  
  
 다음 형식이 되는지 여부를 테스트 하는 예제로 표시 되어 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.None> (즉, 둘 다 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable> 나 <xref:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange>).  
  
 [!code-csharp[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/cs/apply1.cs#3)]
 [!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.versioning.componentguaranteesattribute.class/vb/apply1.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Versioning.ComponentGuaranteesOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Versioning.ComponentGuaranteesOptions guarantees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (guarantees As ComponentGuaranteesOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ComponentGuaranteesAttribute(System::Runtime::Versioning::ComponentGuaranteesOptions guarantees);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="guarantees" Type="System.Runtime.Versioning.ComponentGuaranteesOptions" />
      </Parameters>
      <Docs>
        <param name="guarantees">여러 버전에서 보장되는 호환성 수준을 지정하는 열거형 값 중 하나입니다.</param>
        <summary>라이브러리, 형식 또는 여러 버전에서 보장되는 멤버의 호환성 수준을 나타내는 값을 사용하여 <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 때는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute> 클래스가 인스턴스화되면의 값은 `guarantees` 에 할당 된 매개 변수는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> 속성.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Guarantees">
      <MemberSignature Language="C#" Value="public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Guarantees As ComponentGuaranteesOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Versioning::ComponentGuaranteesOptions Guarantees { System::Runtime::Versioning::ComponentGuaranteesOptions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Versioning.ComponentGuaranteesOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>여러 버전으로 확장되는 라이브러리, 형식 또는 형식 멤버의 보장된 호환성 수준을 나타내는 값을 가져옵니다.</summary>
        <value>여러 버전에서 보장되는 호환성 수준을 지정하는 열거형 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값은 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> 속성에 해당 하는 `guarantees` 의 매개 변수는 <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A> 생성자입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>