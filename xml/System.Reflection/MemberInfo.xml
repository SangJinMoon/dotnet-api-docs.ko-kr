<Type Name="MemberInfo" FullName="System.Reflection.MemberInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8db62a3ed31bdc693e0000017df74ab65286b3e5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MemberInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit MemberInfo extends System.Object implements class System.Reflection.ICustomAttributeProvider, class System.Runtime.InteropServices._MemberInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MemberInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MemberInfo&#xA;Implements _MemberInfo, ICustomAttributeProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemberInfo abstract : System::Reflection::ICustomAttributeProvider, System::Runtime::InteropServices::_MemberInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.ICustomAttributeProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._MemberInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MemberInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2c141-101">멤버의 특성에 대한 정보를 얻고 멤버 메타데이터에 액세스할 수 있도록 해줍니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c141-101">Obtains information about the attributes of a member and provides access to member metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-102"><xref:System.Reflection.MemberInfo> 클래스는 클래스 (생성자, 이벤트, 필드, 메서드 및 속성) 클래스의 모든 멤버에 대 한 정보를 가져오는 데에 대 한 추상 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-102">The <xref:System.Reflection.MemberInfo> class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).</span></span>  
  
 <span data-ttu-id="2c141-103">이 클래스는 모든 멤버에서 제공 하는 기본 기능을 소개 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-103">This class introduces the basic functionality that all members provide.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c141-104">이 예제에는 다양 한 리플렉션 클래스를 사용 하 여 어셈블리에 포함 된 메타 데이터를 분석 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-104">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="2c141-105">상속자에 대 한 완전 신뢰 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c141-105">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="2c141-106">부분적으로 신뢰할 수 있는 코드에서이 클래스는 상속 될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c141-106">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="2c141-107">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2c141-107">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="2c141-108">상속 하는 경우 <see cref="T:System.Reflection.MemberInfo" /> 멤버를 재정의 해야 합니다: <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 및 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="2c141-108">When you inherit from <see cref="T:System.Reflection.MemberInfo" /> you must override the following members: <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> and <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span>
        </span>
      </para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MemberInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MemberInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c141-109">
            <see cref="T:System.Reflection.MemberInfo" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-109">Initializes a new instance of the <see cref="T:System.Reflection.MemberInfo" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-110">이 파생된 클래스를 만들 수만 `MemberInfo` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-110">Only a derived class can create this `MemberInfo` class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.CustomAttributeData&gt; CustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.CustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ CustomAttributes { System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c141-111">이 멤버의 사용자 지정 특성을 포함하는 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-111">Gets a collection that contains this member's custom attributes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c141-112">이 멤버의 사용자 지정 특성을 포함하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-112">A collection that contains this member's custom attributes.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public abstract Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MemberInfo.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c141-113">이 멤버를 선언하는 클래스를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-113">Gets the class that declares this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c141-114">이 멤버를 선언하는 클래스에 대한 <see langword="Type" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-114">The <see langword="Type" /> object for the class that declares this member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-115"><xref:System.Reflection.MemberInfo.DeclaringType%2A> 속성 검색에 대 한 참조는 <xref:System.Type> 이 멤버를 선언 하는 형식에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-115">The <xref:System.Reflection.MemberInfo.DeclaringType%2A> property retrieves a reference to the <xref:System.Type> object for the type that declares this member.</span></span> <span data-ttu-id="2c141-116">형식의 멤버 형식에 의해 선언 되거나 기본 형식에서 상속 하므로 `Type` 에서 반환 된 개체는 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 속성 하지 못할 동일는 `Type` 현재 가져오는 데 사용 되는 개체 <xref:System.Reflection.MemberInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-116">A member of a type is either declared by the type or inherited from a base type, so the `Type` object returned by the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property might not be the same as the `Type` object used to obtain the current <xref:System.Reflection.MemberInfo> object.</span></span>  
  
-   <span data-ttu-id="2c141-117">경우는 `Type` 이 개체 `MemberInfo` 개체를 가져온이 멤버를 선언 하지 않았습니다.는 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 속성은 기본 형식 중 하나를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-117">If the `Type` object from which this `MemberInfo` object was obtained did not declare this member, the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property will represent one of its base types.</span></span>  
  
-   <span data-ttu-id="2c141-118">경우는 `MemberInfo` 개체는 전역 멤버 (즉,에서 가져온 경우는 <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> 모듈에서 전역 메서드를 반환 하는 메서드), 반환 된 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-118">If the `MemberInfo` object is a global member (that is, if it was obtained from the <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> method, which returns global methods on a module), the returned <xref:System.Reflection.MemberInfo.DeclaringType%2A> will be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c141-119">인터페이스를 정의 하는 다음 예제에서는 `IValue`, 단일 멤버와 `GetValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-119">The following example defines an interface, `IValue`, with a single member, `GetValue`.</span></span> <span data-ttu-id="2c141-120">또한 4 개의 클래스 정의: `A`를 구현 하는 기본 클래스는 `IValue` ; 인터페이스 `B`에서 상속한 `A` 고의 구현을 숨기 `GetValue` ;의 기본 클래스 구현에서 `C`, 단순히에서 상속한 `A`; 및 `D`에서 상속 되 `A` 재정의 하 고 해당 `GetValue` 메서드.</span><span class="sxs-lookup"><span data-stu-id="2c141-120">It also defines four classes: `A`, a base class that implements the `IValue` interface; `B`, which inherits from `A` and hides its implementation of `GetValue` from the base class implementation; `C`, which simply inherits from `A`; and `D`, which inherits from `A` and overrides its `GetValue` method.</span></span>  <span data-ttu-id="2c141-121">이 예제에서는 다음 검색는 <xref:System.Reflection.MemberInfo> 형식의 각 멤버에 대 한 개체 (에서 상속 된 멤버를 포함 하 여 <xref:System.Object>)의 값을 표시 하 고 해당 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="2c141-121">The example then retrieves a <xref:System.Reflection.MemberInfo> object for each member of the type (including members inherited from <xref:System.Object>) and displays the value of its <xref:System.Reflection.MemberInfo.DeclaringType%2A> property.</span></span>  
  
 [!code-csharp[Classic MemberInfo.DeclaringType Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.DeclaringType Example/CS/Example2.cs#2)]
 [!code-vb[Classic MemberInfo.DeclaringType Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.DeclaringType Example/VB/Example2.vb#2)]  
  
 <span data-ttu-id="2c141-122">선언 형식이 `A.GetValue` 은 `A`, 해당 `B` 두 포함 `GetValue` 메서드, 하나 선언 `A` 하 여 하나 및 `B`의 형식에서 선언 하 고 `D.GetValue` 은 `D`합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-122">Note that the declaring type of `A.GetValue` is `A`, that `B` includes two `GetValue` methods, one declared by `A` and one by `B`, and that the declaring type of `D.GetValue` is `D`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c141-123">`DeclaringType` 멤버 이름과 선언 형식의 이름을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-123">`DeclaringType` returns only the member names and the names of their declaring types.</span></span> <span data-ttu-id="2c141-124">호출 된 멤버 이름을 프로토타입 사용을 반환 하려면 `MemberInfo.ToString`합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-124">To return the member names with their prototypes, call `MemberInfo.ToString`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="2c141-125">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-125">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-126">@FSHO2@이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-126">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c141-127">
            <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-127">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2c141-128">파생 클래스에서 재정의되는 경우 이 멤버에 적용된 사용자 지정 특성을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-128">When overridden in a derived class, returns custom attributes applied to this member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public abstract object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="2c141-129">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-129">
              <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2c141-130">이 매개 변수는 속성 및 이벤트에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-130">This parameter is ignored for properties and events.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-131">파생 클래스에서 재정의되는 경우 이 멤버에 적용된 모든 사용자 지정 특성의 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-131">When overridden in a derived class, returns an array of all custom attributes applied to this member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c141-132">이 멤버에 적용된 모든 사용자 지정 특성을 포함하는 배열이며, 정의된 특성이 없는 경우 요소가 없는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-132">An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-133">이 메서드는 `inherit` 속성 및 이벤트에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-133">This method ignores the `inherit` parameter for properties and events.</span></span> <span data-ttu-id="2c141-134">속성 및 이벤트에 특성의 상속 체인을 검색 하려면 적절 한 오버 로드를 사용 하 여는 <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2c141-134">To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c141-135">.NET Framework 버전 2.0에서에서이 메서드 새 메타 데이터 형식으로 저장 되는 경우 메서드, 생성자 및 형식에 보안 특성을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-135">In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if they are stored in the new metadata format.</span></span> <span data-ttu-id="2c141-136">버전 2.0으로 컴파일된 어셈블리에는이 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-136">Assemblies compiled with version 2.0 use this format.</span></span> <span data-ttu-id="2c141-137">동적 어셈블리 및 이전 버전의.NET Framework를 사용 하 여 컴파일된 이전 XML 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-137">Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</span></span> <span data-ttu-id="2c141-138">참조 [선언적 보안 특성 내보내기를](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-138">See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c141-139">사용자 지정 특성을 정의 하 고 있는 특성을 연결 하는 다음 예제에서는 `MyClass.MyMethod`, 실행 시 특성을 검색 하 고 결과 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-139">The following example defines a custom attribute and associates the attribute with `MyClass.MyMethod`, retrieves the attribute at run time, and displays the result.</span></span>  
  
 [!code-cpp[MemberInfo_GetCustomAttributes1#1](~/samples/snippets/cpp/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/CPP/memberinfo_getcustomattributes1.cpp#1)]
 [!code-csharp[MemberInfo_GetCustomAttributes1#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/CS/memberinfo_getcustomattributes1.cs#1)]
 [!code-vb[MemberInfo_GetCustomAttributes1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/VB/memberinfo_getcustomattributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c141-140">이 멤버가 리플렉션 전용 컨텍스트에 로드된 형식에 속하는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-140">This member belongs to a type that is loaded into the reflection-only context.</span>
          </span>
          <span data-ttu-id="2c141-141">[방법: 리플렉션 전용 컨텍스트에 어셈블리 로드](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-141">See [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c141-142">사용자 지정 특성 형식을 로드할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-142">A custom attribute type could not be loaded.</span>
          </span>
        </exception>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Reflection.Emit.CustomAttributeBuilder" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public abstract object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="2c141-143">검색할 특성의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-143">The type of attribute to search for.</span>
          </span>
          <span data-ttu-id="2c141-144">이 형식에 할당할 수 있는 특성만 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-144">Only attributes that are assignable to this type are returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="2c141-145">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-145">
              <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2c141-146">이 매개 변수는 속성 및 이벤트에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-146">This parameter is ignored for properties and events.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-147">파생된 클래스에서 재정의하는 경우 이 멤버에 적용되고 <see cref="T:System.Type" />으로 식별되는 사용자 지정 특성의 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-147">When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c141-148">이 멤버에 적용되는 사용자 지정 특성의 배열이거나, <paramref name="attributeType" />에 할당 가능한 특성이 적용되지 않은 경우 요소가 0개인 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-148">An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <paramref name="attributeType" /> have been applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-149">이 메서드는 `inherit` 속성 및 이벤트에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-149">This method ignores the `inherit` parameter for properties and events.</span></span> <span data-ttu-id="2c141-150">속성 및 이벤트에 특성의 상속 체인을 검색 하려면 적절 한 오버 로드를 사용 하 여는 <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2c141-150">To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c141-151">.NET Framework 버전 2.0에서에서이 메서드는 특성이 새 메타 데이터 형식으로 저장 된 경우 메서드, 생성자 및 형식에 보안 특성을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-151">In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format.</span></span> <span data-ttu-id="2c141-152">버전 2.0으로 컴파일된 어셈블리에는이 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-152">Assemblies compiled with version 2.0 use this format.</span></span> <span data-ttu-id="2c141-153">동적 어셈블리 및 이전 버전의.NET Framework를 사용 하 여 컴파일된 이전 XML 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-153">Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</span></span> <span data-ttu-id="2c141-154">참조 [선언적 보안 특성 내보내기를](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-154">See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c141-155">다음 예제에서는 클래스를 정의 `BaseClass` 있는 두 명의 상속 되지 않은 멤버: 라는 스레드 정적 필드 `total` 는 CLS 규격이 아닌 메서드 `MethodA`합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-155">The following example defines a class named `BaseClass` that has two non-inherited members: a thread static field named `total` and a non-CLS-compliant method named `MethodA`.</span></span>  <span data-ttu-id="2c141-156">라는 클래스 `DerivedClass` 에서 상속 `BaseClass` 재정의 하 고 해당 `MethodA` 메서드.</span><span class="sxs-lookup"><span data-stu-id="2c141-156">A class named `DerivedClass` inherits from `BaseClass` and overrides its `MethodA` method.</span></span> <span data-ttu-id="2c141-157">특성이 없는 멤버에 적용 됩니다 `DerivedClass`합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-157">Note that no attributes are applied to the members of `DerivedClass`.</span></span> <span data-ttu-id="2c141-158">예제에서는 반복의 멤버 `DerivedClass` 확인 하려면 여부는 <xref:System.CLSCompliantAttribute> 또는 <xref:System.ThreadStaticAttribute> 에 적용 된 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-158">The example iterates the members of `DerivedClass` to determine whether the <xref:System.CLSCompliantAttribute> or <xref:System.ThreadStaticAttribute> attribute as been applied to them.</span></span> <span data-ttu-id="2c141-159">때문에 `inherit` 은 `true`, 상속 계층 구조를 검색 하는 메서드 `DerivedClass` 지정 된 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-159">Because `inherit` is `true`, the method searches the inheritance hierarchy of `DerivedClass` for the specified attribute.</span></span> <span data-ttu-id="2c141-160">예제에서 출력으로의 `total` 필드도 데코레이팅되 어는 <xref:System.ThreadStaticAttribute> 특성 및 `MethodA` 메서드도 데코레이팅되 어는 <xref:System.CLSCompliantAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-160">As the output from the example shows, the `total` field is decorated with the <xref:System.ThreadStaticAttribute> attribute, and the `MethodA` method is decorated with the <xref:System.CLSCompliantAttribute> attribute.</span></span>  
  
 [!code-csharp[System.Reflection.MemberInfo.GetCustomAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Reflection.MemberInfo.GetCustomAttributes/cs/GetCustomAttributes1.cs#1)]
 [!code-vb[System.Reflection.MemberInfo.GetCustomAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Reflection.MemberInfo.GetCustomAttributes/vb/GetCustomAttributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="2c141-161">사용자 지정 특성 형식을 로드할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-161">A custom attribute type cannot be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2c141-162">
            <paramref name="attributeType" />이 <see langword="null" />인 경우입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-162">If <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c141-163">이 멤버가 리플렉션 전용 컨텍스트에 로드된 형식에 속하는 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-163">This member belongs to a type that is loaded into the reflection-only context.</span>
          </span>
          <span data-ttu-id="2c141-164">[방법: 리플렉션 전용 컨텍스트에 어셈블리 로드](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-164">See [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c141-165">대상 멤버에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 목록을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-165">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c141-166">대상 멤버에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 제네릭 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-166">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-167">리플렉션 전용 컨텍스트에 사용자 지정 특성 자체 리플렉션 전용 컨텍스트로 로드 된 코드에 정의 되어 있는 경우 코드의 한 사용자 지정 특성을 검사 하려면이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-167">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="2c141-168">와 같은 메서드 <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> 및 <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> 특성의 인스턴스를 만들기 때문에 이러한 경우에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-168">Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="2c141-169">리플렉션 전용 컨텍스트에서 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-169">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="2c141-170">자세한 내용 및 예를 들어 코드를 실행 하는 것에 대 한 참조는 <xref:System.Reflection.CustomAttributeData> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-170">For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 <span data-ttu-id="2c141-171">때문에이 메서드 형식, 중첩된 형식 및 형식 멤버에 대 한 사용자 지정 특성 데이터를 가져옵니다는 <xref:System.Type> 클래스와 클래스에는 <xref:System.Reflection> 네임 스페이스에서 파생 되는 모든 형식 멤버를 나타내는 <xref:System.Reflection.MemberInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-171">This method gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c141-172">이 인스턴스의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-172">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c141-173">부호 있는 32비트 정수 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-173">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameMetadataDefinitionAs">
      <MemberSignature Language="C#" Value="public virtual bool HasSameMetadataDefinitionAs (System.Reflection.MemberInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasSameMetadataDefinitionAs(class System.Reflection.MemberInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.HasSameMetadataDefinitionAs(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSameMetadataDefinitionAs (other As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasSameMetadataDefinitionAs(System::Reflection::MemberInfo ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public abstract bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="2c141-174">검색할 사용자 지정 특성의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-174">The type of custom attribute to search for.</span>
          </span>
          <span data-ttu-id="2c141-175">검색 대상에는 파생 형식이 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-175">The search includes derived types.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="2c141-176">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-176">
              <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2c141-177">이 매개 변수는 속성 및 이벤트에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-177">This parameter is ignored for properties and events.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-178">파생 클래스에서 재정의되는 경우 지정된 형식 또는 파생 형식의 특성이 하나 이상 이 멤버에 적용되는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-178">When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c141-179">이 멤버에 <paramref name="attributeType" /> 또는 파생 형식의 인스턴스가 하나 이상 적용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-179">
              <see langword="true" /> if one or more instances of <paramref name="attributeType" /> or any of its derived types is applied to this member; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-180">이 메서드는 `inherit` 속성 및 이벤트에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-180">This method ignores the `inherit` parameter for properties and events.</span></span> <span data-ttu-id="2c141-181">속성 및 이벤트에 특성의 상속 체인을 검색 하려면 적절 한 오버 로드를 사용 하 여는 <xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="2c141-181">To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c141-182">.NET framework 버전 2.0의 경우이 메서드가 반환 `true` 유형, 메서드 또는 생성자에 새 메타 데이터 형식에 저장 된 보안 특성이 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="2c141-182">In the .NET Framework version 2.0, this method returns `true` if a type, method, or constructor has security attributes stored in the new metadata format.</span></span> <span data-ttu-id="2c141-183">버전 2.0으로 컴파일된 어셈블리에는이 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-183">Assemblies compiled with version 2.0 use this format.</span></span> <span data-ttu-id="2c141-184">동적 어셈블리 및 이전 버전의.NET Framework를 사용 하 여 컴파일된 이전 XML 형식을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-184">Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</span></span> <span data-ttu-id="2c141-185">참조 [선언적 보안 특성 내보내기를](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-185">See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c141-186">다음 예제에서는 지정 된 특성이 지정된 된 멤버에 적용 되는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-186">The following example determines whether the specified attribute is applied to the specified member.</span></span>  
  
 [!code-cpp[MemberInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/cpp/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/CPP/memberinfo_getcustomattribute_isdefined.cpp#1)]
 [!code-csharp[MemberInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/CS/memberinfo_getcustomattribute_isdefined.cs#1)]
 [!code-vb[MemberInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/VB/memberinfo_getcustomattribute_isdefined.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MemberInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c141-187">파생된 클래스에서 재정의될 경우 멤버의 형식(메서드, 생성자, 이벤트 등)을 나타내는 <see cref="T:System.Reflection.MemberTypes" /> 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-187">When overridden in a derived class, gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of the member — method, constructor, event, and so on.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c141-188">멤버 형식을 나타내는 <see cref="T:System.Reflection.MemberTypes" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-188">A <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-189">이 속성은 파생된 클래스에서 재정의 하 고 재정의 적절 한 멤버 유형을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-189">This property is overridden in derived classes, and the override returns the appropriate member type.</span></span> <span data-ttu-id="2c141-190">따라서 집합을 조사할 때 <xref:System.Reflection.MemberInfo> 개체-예를 들어 반환 하는 배열 <xref:System.Type.GetMembers%2A> -는 <xref:System.Reflection.MemberInfo.MemberType%2A> 지정된 된 멤버의 멤버 유형을 결정 하도록 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-190">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property can be used to determine the member type of any given member.</span></span>  
  
 <span data-ttu-id="2c141-191">가져오려는 `MemberType` 속성을 클래스를 가져옵니다 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-191">To get the `MemberType` property, get the class <xref:System.Type>.</span></span> <span data-ttu-id="2c141-192">`Type`, 가져오기는 <xref:System.Reflection.MethodInfo> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-192">From the `Type`, get the <xref:System.Reflection.MethodInfo> array.</span></span> <span data-ttu-id="2c141-193">`MethodInfo` 배열, 가져오기는 `MemberTypes`합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-193">From the `MethodInfo` array, get the `MemberTypes`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c141-194">다음 예제에서는 지정된 된 클래스의 형식과 멤버 이름을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-194">The following example displays the member name and type of a specified class.</span></span>  
  
 [!code-cpp[Classic MemberInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MemberInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MemberInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic MemberInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="MetadataToken">
      <MemberSignature Language="C#" Value="public virtual int MetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.MetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MetadataToken { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c141-195">메타데이터 요소를 식별하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-195">Gets a value that identifies a metadata element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c141-196">
            <see cref="P:System.Reflection.MemberInfo.Module" />과 함께 메타데이터 요소를 고유하게 식별하는 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-196">A value which, in combination with <see cref="P:System.Reflection.MemberInfo.Module" />, uniquely identifies a metadata element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-197">관리 되지 않는 리플렉션 API에이 속성을 사용 하 여 얻은 토큰을 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-197">The tokens obtained using this property can be passed to the unmanaged reflection API.</span></span> <span data-ttu-id="2c141-198">자세한 내용은 참조 하십시오 [관리 되지 않는 리플렉션 API](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-198">For more information, please see [Unmanaged Reflection API](http://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2c141-199">관리 되지 않는 리플렉션 API를 사용 하 여 공용 언어 인프라 (CLI) 설명서의 "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합" 익숙하다고가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-199">Using the unmanaged reflection API requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="2c141-200">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="2c141-200">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2c141-201">현재 <see cref="T:System.Reflection.MemberInfo" />는 요소 형식이 완료되지 않은 동적 형식인 배열 형식에서 <see langword="Address" />와 같은 배열 메서드를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-201">The current <see cref="T:System.Reflection.MemberInfo" /> represents an array method, such as <see langword="Address" />, on an array type whose element type is a dynamic type that has not been completed.</span>
          </span>
          <span data-ttu-id="2c141-202">이 경우 메타데이터 토큰을 가져오려면 <see cref="T:System.Reflection.MemberInfo" /> 개체를 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> 메서드에 전달하거나, <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 메서드를 사용하여 <see cref="T:System.Reflection.MethodInfo" />를 먼저 가져오는 대신, <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 메서드를 사용하여 토큰을 직접 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-202">To get a metadata token in this case, pass the <see cref="T:System.Reflection.MemberInfo" /> object to the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> method; or use the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get the token directly, instead of using the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get a <see cref="T:System.Reflection.MethodInfo" /> first.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c141-203">현재 <see cref="T:System.Reflection.MemberInfo" />가 나타내는 멤버를 선언하는 형식이 정의된 모듈을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-203">Gets the module in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c141-204">현재 <see cref="T:System.Reflection.Module" />가 나타내는 멤버를 선언하는 형식이 정의된 <see cref="T:System.Reflection.MemberInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-204">The <see cref="T:System.Reflection.Module" /> in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-205">이 속성은 편의 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-205">This property is provided as a convenience.</span></span> <span data-ttu-id="2c141-206">사용 하는 것과 같습니다는 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 메서드가 선언 된 형식을 가져올 속성을 다음 호출에서 <xref:System.Type.Module%2A> 결과 속성 <xref:System.Type> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-206">It is equivalent to using the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property to get the type in which the method is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c141-207">다음 코드 예제에서는 상속 되는 클래스 선언 <xref:System.Object> 재정의 <xref:System.Object.ToString%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-207">The following code example declares a class that inherits <xref:System.Object> and overrides <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2c141-208">이 예제에서는 가져옵니다 <xref:System.Reflection.MethodInfo> 클래스의 개체 `ToString` 메서드 및 상속 된 항목에 대 한 <xref:System.Object.GetHashCode%2A> 메서드를 두 가지 방법을 선언 된 모듈의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-208">The example obtains <xref:System.Reflection.MethodInfo> objects for the class's `ToString` method and for the inherited <xref:System.Object.GetHashCode%2A> method, and displays the names of the modules in which the two methods are declared.</span></span>  
  
 [!code-cpp[System.Reflection.MemberInfo.Module#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.MemberInfo.Module/cpp/source.cpp#1)]
 [!code-csharp[System.Reflection.MemberInfo.Module#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.MemberInfo.Module/CS/source.cs#1)]
 [!code-vb[System.Reflection.MemberInfo.Module#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.MemberInfo.Module/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2c141-209">이 메서드가 구현되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-209">This method is not implemented.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MemberInfo.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c141-210">현재 멤버의 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-210">Gets the name of the current member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c141-211">이 멤버의 이름이 포함된 <see cref="T:System.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-211">A <see cref="T:System.String" /> containing the name of this member.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-212">멤버의 단순한 이름에만 반환 됩니다, 정규화 된 이름이 아니라.</span><span class="sxs-lookup"><span data-stu-id="2c141-212">Only the simple name of the member is returned, not the fully qualified name.</span></span>  
  
 <span data-ttu-id="2c141-213">가져오려는 <xref:System.Reflection.MemberInfo.Name%2A> 속성을 클래스를 가져옵니다 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-213">To get the <xref:System.Reflection.MemberInfo.Name%2A> property, get the class <xref:System.Type>.</span></span> <span data-ttu-id="2c141-214">`Type`, 가져오기는 <xref:System.Reflection.MemberInfo> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-214">From the `Type`, get the <xref:System.Reflection.MemberInfo> array.</span></span> <span data-ttu-id="2c141-215">`MemberInfo` 는 배열의 요소를 가져올는 `Name` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-215">From a `MemberInfo` element of the array, obtain the `Name` property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c141-216">이 예에서는 나열 된 `Name` 및 `DeclaringType` 지정된 된 클래스의 각 구성원의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-216">This example lists the `Name` and `DeclaringType` property of each member of the specified class.</span></span>  
  
 [!code-cpp[Classic MemberInfo.Name Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MemberInfo.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MemberInfo.Name Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.Name Example/CS/source.cs#1)]
 [!code-vb[Classic MemberInfo.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.Name Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.MemberInfo left, class System.Reflection.MemberInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As MemberInfo, right As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::MemberInfo ^ left, System::Reflection::MemberInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MemberInfo" />
        <Parameter Name="right" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="2c141-217">
            <c>오른쪽</c>과 비교할 <see cref="T:System.Reflection.MemberInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-217">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <c>right</c>.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="2c141-218">
            <c>왼쪽</c>과 비교할 <see cref="T:System.Reflection.MemberInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-218">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <c>left</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-219">두 <see cref="T:System.Reflection.MemberInfo" /> 개체가 같은지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-219">Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c141-220">
            <paramref name="left" />가 <paramref name="right" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-220">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.MemberInfo left, class System.Reflection.MemberInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As MemberInfo, right As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::MemberInfo ^ left, System::Reflection::MemberInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MemberInfo" />
        <Parameter Name="right" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="2c141-221">
            <c>오른쪽</c>과 비교할 <see cref="T:System.Reflection.MemberInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-221">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <c>right</c>.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="2c141-222">
            <c>왼쪽</c>과 비교할 <see cref="T:System.Reflection.MemberInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-222">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <c>left</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-223">두 <see cref="T:System.Reflection.MemberInfo" /> 개체가 같지 않은지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-223">Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c141-224">
            <paramref name="left" />가 <paramref name="right" />와 같지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-224">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public abstract Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._MemberInfo.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2c141-225">
            <see langword="MemberInfo" />의 이 인스턴스를 가져오는 데 사용된 클래스 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-225">Gets the class object that was used to obtain this instance of <see langword="MemberInfo" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2c141-226">이 <see langword="Type" /> 개체를 얻는 데 사용된 <see langword="MemberInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-226">The <see langword="Type" /> object through which this <see langword="MemberInfo" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-227">`ReflectedType` 속성 검색에서 <xref:System.Type> 의이 인스턴스를 얻는 데 사용 된 개체 `MemberInfo`합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-227">The `ReflectedType` property retrieves the <xref:System.Type> object that was used to obtain this instance of `MemberInfo`.</span></span> <span data-ttu-id="2c141-228">값과에서 다를 수 있습니다이 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 경우이 속성을 <xref:System.Reflection.MemberInfo> 개체는 기본 클래스에서 상속 된 멤버를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-228">This may differ from the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property if this <xref:System.Reflection.MemberInfo> object represents a member that is inherited from a base class.</span></span>  
  
 <span data-ttu-id="2c141-229">경우는 `MemberInfo` 개체는 전역 멤버 (즉,에서 가져온 경우는 <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> 모듈에서 전역 메서드를 반환 하는 메서드), 반환 된 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-229">If the `MemberInfo` object is a global member (that is, if it was obtained from the <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> method, which returns global methods on a module), the returned <xref:System.Reflection.MemberInfo.DeclaringType%2A> will be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2c141-230">다음 코드 예제는 방법을 <xref:System.Reflection.MemberInfo.ReflectedType%2A> 때 변경 멤버 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 에서 볼 수 있으므로 한 <xref:System.Reflection.MemberInfo> 형식에서 가져온 <xref:System.Object> 들어오고는 <xref:System.Reflection.MemberInfo> 에서 가져온는 <xref:System.Reflection.MemberInfo> 상속하는자체클래스<xref:System.Object> 하지만 재정의 하지 않습니다 <xref:System.Object.ToString%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-230">The following code example shows how the <xref:System.Reflection.MemberInfo.ReflectedType%2A> changes when the member <xref:System.Object.ToString%2A?displayProperty=nameWithType> is viewed from a <xref:System.Reflection.MemberInfo> obtained from type <xref:System.Object> and from a <xref:System.Reflection.MemberInfo> obtained from the <xref:System.Reflection.MemberInfo> class itself, which inherits <xref:System.Object> but does not override <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Classic MemberInfo.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MemberInfo.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MemberInfo.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic MemberInfo.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.IsDefined">
      <MemberSignature Language="C#" Value="bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Reflection.ICustomAttributeProvider.IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Reflection.ICustomAttributeProvider.IsDefined(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::IsDefined;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MemberInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MemberInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MemberInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="2c141-231">나중에 사용하기 위해 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-231">Reserved for future use.</span>
          </span>
          <span data-ttu-id="2c141-232">IID_NULL이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-232">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="2c141-233">매핑할 전달된 이름의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-233">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="2c141-234">매핑할 이름의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-234">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="2c141-235">이름을 해석할 로캘 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-235">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="2c141-236">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-236">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-237">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-237">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-238">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-238">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2c141-239">에 대 한 자세한 내용은 `IDispatch::GetIDsOfNames`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-239">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2c141-240">이 메서드는 COM <c>IDispatch</c> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-240">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetType">
      <MemberSignature Language="C#" Value="Type _MemberInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._MemberInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _MemberInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._MemberInfo.GetType() = System::Runtime::InteropServices::_MemberInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2c141-241">
            <see cref="T:System.Type" /> 클래스를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-241">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MemberInfo" /> class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2c141-242">
            <see cref="T:System.Type" /> 클래스를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-242">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MemberInfo" /> class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MemberInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MemberInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MemberInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="2c141-243">반환할 형식 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-243">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="2c141-244">형식 정보의 로캘 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-244">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="2c141-245">요청된 형식 정보 개체에 대한 포인터를 받습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-245">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-246">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-246">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-247">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-247">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2c141-248">에 대 한 자세한 내용은 `IDispatch::GetTypeInfo`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-248">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2c141-249">이 메서드는 COM <c>IDispatch</c> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-249">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MemberInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MemberInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MemberInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="2c141-250">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-250">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-251">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-251">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-252">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-252">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2c141-253">에 대 한 자세한 내용은 `IDispatch::GetTypeInfoCount`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-253">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2c141-254">이 메서드는 COM <c>IDispatch</c> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-254">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.Invoke">
      <MemberSignature Language="C#" Value="void _MemberInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MemberInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MemberInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="2c141-255">멤버를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-255">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="2c141-256">나중에 사용하기 위해 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-256">Reserved for future use.</span>
          </span>
          <span data-ttu-id="2c141-257">IID_NULL이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-257">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="2c141-258">인수를 해석할 로캘 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-258">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="2c141-259">호출의 컨텍스트를 설명하는 플래그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-259">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="2c141-260">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-260">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="2c141-261">결과를 저장할 위치에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-261">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="2c141-262">예외 정보가 포함된 구조체에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-262">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="2c141-263">오류가 있는 첫 번째 인수의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-263">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2c141-264">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-264">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2c141-265">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-265">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2c141-266">에 대 한 자세한 내용은 `IDispatch::Invoke`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="2c141-266">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2c141-267">이 메서드는 COM <c>IDispatch</c> 인터페이스를 사용하여 런타임에 바인딩된 상태로 호출됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2c141-267">The method is called late-bound using the COM <c>IDispatch</c> interface.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>