<Type Name="EventInfo" FullName="System.Reflection.EventInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9bda12daa17b91e3190c3905b39d15462fcb260" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit EventInfo extends System.Reflection.MemberInfo implements class System.Runtime.InteropServices._EventInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.EventInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EventInfo&#xA;Inherits MemberInfo&#xA;Implements _EventInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInfo abstract : System::Reflection::MemberInfo, System::Runtime::InteropServices::_EventInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._EventInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EventInfo))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="af740-101">이벤트의 특성을 검색하고 이벤트 메타데이터에 액세스할 수 있도록 해줍니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="af740-101">Discovers the attributes of an event and provides access to event metadata.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-102">사용 하 여는 <xref:System.Reflection.EventInfo> 클래스에 대 한 예제 코드에 나와 있는 것 처럼 이벤트 처리기를 연결 하 고 이벤트를 검사 하는 <xref:System.Reflection.EventInfo.AddEventHandler%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="af740-102">Use the <xref:System.Reflection.EventInfo> class to inspect events and to hook up event handlers, as shown in the example code for the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af740-103"><xref:System.Reflection.EventInfo> 이벤트를 발생 시키는 데 사용할 적합 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-103"><xref:System.Reflection.EventInfo> is not intended to be used to raise events.</span></span> <span data-ttu-id="af740-104">개체의 내부 상태에 따라 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="af740-104">An object raises events as dictated by its internal state.</span></span>  
  
 <span data-ttu-id="af740-105">이벤트는 대리자와 함께 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="af740-105">Events are used with delegates.</span></span> <span data-ttu-id="af740-106">이벤트 수신기 이벤트 소스에서 이벤트 발생 될 때마다 호출 되는 이벤트 처리기 대리자를 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-106">An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</span></span> <span data-ttu-id="af740-107">이벤트 소스에 연결 하기 위해 이벤트 수신기는이 대리자를 호출 목록에는 소스에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-107">In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</span></span> <span data-ttu-id="af740-108">이벤트는 이벤트 처리기 대리자에 invoke 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="af740-108">When the event is raised, the invoke method of the event-handler delegate is called.</span></span> <span data-ttu-id="af740-109">두 멀티 캐스트 및 단일 캐스트 이벤트 알림에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-109">Both multicast and single-cast event notifications are supported.</span></span> <span data-ttu-id="af740-110">`Add` 및 `Remove` 으로 메서드를 이벤트 처리기 대리자 클래스는 이벤트와 연결 된 메타 데이터에 표시 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-110">The `Add` and `Remove` methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</span></span>  
  
 <span data-ttu-id="af740-111">대리자는 개체 지향 함수 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-111">Delegates are object-oriented function pointers.</span></span> <span data-ttu-id="af740-112">C 또는 c + + 함수 포인터는 메서드에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-112">In C or C++, a function pointer is a reference to a method.</span></span> <span data-ttu-id="af740-113">C 또는 c + + 함수 포인터와 달리 대리자는 두 개의 참조를 포함: 메서드 및 메서드를 지 원하는 개체에 대 한 참조에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-113">In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</span></span> <span data-ttu-id="af740-114">대리자를 선언 하거나 메서드를 상속 하는 클래스 형식을 알지 못해도 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-114">Delegates can invoke a method without knowing the class type that declares or inherits the method.</span></span> <span data-ttu-id="af740-115">대리자 알면 메서드의 반환 형식 및 매개 변수 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-115">Delegates need only know the return type and parameter list of the method.</span></span>  
  
 <span data-ttu-id="af740-116">이벤트 모델은 동일 하 게 작동 단일 캐스트 및 멀티 캐스트 대리자에 효과적입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-116">The event model works equally well for single-cast and multicast delegates.</span></span> <span data-ttu-id="af740-117">대리자의 호출 하는 경우에 단일 개체 이므로 호출 하는 메서드를 사용할 됩니다 메서드 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="af740-117">When the delegate's invoke method is called, only a single object will have a method called on it.</span></span> <span data-ttu-id="af740-118">한정자를 멀티 캐스트 대리자의 invoke 메서드가 호출 될 때 호출 되는 여러 메서드가 있는 대리자 선언에 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-118">A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</span></span>  
  
 <span data-ttu-id="af740-119">호출 <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> 에 `EventInfo` 때는 `inherit` 의 매개 변수 `GetCustomAttributes` 은 `true` 형식 계층 구조를 검색 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-119">Calling <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType> on `EventInfo` when the `inherit` parameter of `GetCustomAttributes` is `true` does not walk the type hierarchy.</span></span> <span data-ttu-id="af740-120">사용 하 여 <xref:System.Attribute?displayProperty=nameWithType> 사용자 지정 특성을 상속 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-120">Use <xref:System.Attribute?displayProperty=nameWithType> to inherit custom attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af740-121">다음 코드에서는 <xref:System.Reflection.EventInfo> 개체에 대 한는 <xref:System.Windows.Forms.Control.Click> 의 이벤트는 <xref:System.Windows.Forms.Button> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-121">The following code gets an <xref:System.Reflection.EventInfo> object for the <xref:System.Windows.Forms.Control.Click> event of the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[type_getevent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[type_getevent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[type_getevent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="af740-122">상속자에 대 한 완전 신뢰 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="af740-122">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="af740-123">부분적으로 신뢰할 수 있는 코드에서이 클래스는 상속 될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="af740-123">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="af740-124">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="af740-124">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="af740-125">상속 하는 경우 <see langword="EventInfo" />, 멤버를 재정의 해야 합니다: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, 및 <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="af740-125">When you inherit from <see langword="EventInfo" />, you must override the following members: <see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />, <see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />, and <see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />.</span>
        </span>
      </para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EventInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="af740-126">
            <see langword="EventInfo" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-126">Initializes a new instance of the <see langword="EventInfo" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="af740-127">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-127">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="af740-128">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-128">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="public virtual void AddEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="af740-129">이벤트 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-129">The event source.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="af740-130">이벤트가 대상에 의해 발생할 때 호출될 메서드를 캡슐화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-130">Encapsulates a method or methods to be invoked when the event is raised by the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-131">이벤트 소스에 이벤트 처리기를 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-131">Adds an event handler to an event source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-132">이 메서드는 대상 개체에 이벤트를 동기화 하는 대리자를 추가 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-132">This method attempts to add a delegate to synchronize the event on the target object.</span></span>  
  
 <span data-ttu-id="af740-133">이 이벤트는 대상 매개 변수에 의해 발생 될 때마다 메서드 또는 처리기에서 캡슐화 된 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="af740-133">Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af740-134">다음 코드 예제에서는 어셈블리를 로드, 어셈블리에서 형식의 인스턴스를 작성, 동적 어셈블리를 사용 하 여 이벤트 처리기를 만들고 및 동적 이벤트 처리기를 연결 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="af740-134">The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler.</span></span> <span data-ttu-id="af740-135">런타임에 바인딩을 사용 하 여 모든 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-135">All actions are performed using late binding.</span></span>  
  
 <span data-ttu-id="af740-136">코드 예제에서는 System.dll을 로드 하 고 인스턴스를 만듭니다는 <xref:System.Timers.Timer?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-136">The code example loads System.dll and creates an instance of the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="af740-137">이 예제에서는 사용는 <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> 가져올 메서드를는 <xref:System.Timers.Timer.Elapsed> 이벤트 및 <xref:System.Reflection.EventInfo.EventHandlerType%2A> 이벤트에 대 한 대리자 형식을 가져올 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-137">The example uses the <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method to get the <xref:System.Timers.Timer.Elapsed> event, and the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to get the delegate type for the event.</span></span>  
  
 <span data-ttu-id="af740-138">코드 예제는 <xref:System.Reflection.MethodInfo> 에 대 한는 `Invoke` 대리자 형식의 들어오고 메서드는 <xref:System.Reflection.MethodInfo> 대리자의 시그니처를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="af740-138">The code example gets a <xref:System.Reflection.MethodInfo> for the `Invoke` method of the delegate type, and from the <xref:System.Reflection.MethodInfo> obtains the signature of the delegate.</span></span> <span data-ttu-id="af740-139">다음 코드 예제에서는 라는 단일 형식을 포함 하는 한 개의 모듈이 있는 동적 어셈블리를 만듭니다 `Handler`, 해당 형식을 제공는 `static` 메서드 (`Shared` Visual Basic의에서 메서드) 라는 `DynamicHandler` 이벤트를 처리 하는 데 사용 될 됩니다.</span><span class="sxs-lookup"><span data-stu-id="af740-139">The code example then creates a dynamic assembly with one module containing a single type named `Handler`, and gives the type a `static` method (`Shared` method in Visual Basic) named `DynamicHandler` that will be used to handle the event.</span></span>  
  
 <span data-ttu-id="af740-140">코드 예제에서는 가져옵니다 동적 형식이 만든 후는 <xref:System.Reflection.MethodInfo> 완료 된 메서드에 대 한 사용 하 여 대리자 인스턴스를 만들려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-140">After the dynamic type is created, the code example gets a <xref:System.Reflection.MethodInfo> for the finished method and uses it to create a delegate instance.</span></span> <span data-ttu-id="af740-141">이 인스턴스의에 전달 되는 <xref:System.Reflection.EventInfo.AddEventHandler%2A> 메서드 이벤트를 후크를 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-141">This instance is passed to the <xref:System.Reflection.EventInfo.AddEventHandler%2A> method to hook up the event.</span></span> <span data-ttu-id="af740-142">프로그램은 다음 이벤트를 발생 수 있도록 일시 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-142">The program then pauses to allow the event to be raised.</span></span>  
  
 [!code-cpp[AddEventHandler#1](~/samples/snippets/cpp/VS_Snippets_CLR/AddEventHandler/cpp/source.cpp#1)]
 [!code-csharp[AddEventHandler#1](~/samples/snippets/csharp/VS_Snippets_CLR/AddEventHandler/cs/source.cs#1)]
 [!code-vb[AddEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddEventHandler/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="af740-143">이 이벤트에 public <see langword="add" /> 접근자가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-143">The event does not have a public <see langword="add" /> accessor.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="af740-144">전달된 처리기를 사용할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-144">The handler that was passed in cannot be used.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="af740-145">[Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.MemberAccessException" />을 catch합니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="af740-145">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="af740-146">호출자에게 멤버에 대한 액세스 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-146">The caller does not have access permission to the member.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="af740-147">[Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 <see cref="T:System.Exception" />을 catch합니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="af740-147">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="af740-148">
            <paramref name="target" /> 매개 변수가 <see langword="null" />이고 이벤트가 static이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-148">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span>
          </span>
          <span data-ttu-id="af740-149">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-149">-or-</span>
          </span>
          <span data-ttu-id="af740-150">
            <see cref="T:System.Reflection.EventInfo" />가 대상에서 선언되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-150">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="af740-151">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-151">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="af740-152">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-152">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="AddMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo AddMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo AddMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.AddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AddMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ AddMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="af740-153">비공용 메서드를 포함하여 이벤트의 <see cref="T:System.Reflection.MethodInfo" /> 메서드에 대한 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-153">Gets the <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, including non-public methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="af740-154">
            <see cref="T:System.Reflection.MethodInfo" /> 메서드의 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-154">The <see cref="T:System.Reflection.MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-155">이 속성은 해당 호출에서 <xref:System.Reflection.EventInfo.GetAddMethod%2A> 값 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-155">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetAddMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.EventAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As EventAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::EventAttributes Attributes { System::Reflection::EventAttributes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="af740-156">이 이벤트에 대한 특성을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-156">Gets the attributes for this event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="af740-157">이 이벤트에 대한 읽기 전용 특성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-157">The read-only attributes for this event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-158">이 인스턴스에 의해 반영 된 이벤트에 대 한 설정 특성의 비트맵을 나타내는 4 바이트 정수에는 특성이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="af740-158">The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="af740-159">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-159">An object to compare with this instance, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-160">@FSHO2@이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-160">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-161">
            <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-161">
              <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerType">
      <MemberSignature Language="C#" Value="public virtual Type EventHandlerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EventHandlerType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.EventHandlerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventHandlerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ EventHandlerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.EventHandlerType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="af740-162">이 이벤트와 연결된 내부 이벤트 처리기 대리자의 <see langword="Type" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-162">Gets the <see langword="Type" /> object of the underlying event-handler delegate associated with this event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="af740-163">대리자 이벤트 처리기를 나타내는 읽기 전용 <see langword="Type" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-163">A read-only <see langword="Type" /> object representing the delegate event handler.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="af740-164">다음 예제에서는 <xref:System.Reflection.EventInfo.EventHandlerType%2A> 속성 이벤트의 대리자 형식을 검색 하 고 해당 매개 변수 형식을 표시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-164">The following example uses the <xref:System.Reflection.EventInfo.EventHandlerType%2A> property to discover the delegate type of an event and to display its parameter types.</span></span>  
  
 <span data-ttu-id="af740-165">이 예제에서는 라는 대리자를 정의 `MyDelegate` 라는 이벤트가 `ev` 형식의 `MyDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-165">The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`.</span></span> <span data-ttu-id="af740-166">코드는 `Main` 메서드는 이벤트의 대리자 형식과 하 여 이벤트 서명의 검색 가져오기는 `Invoke` 메서드는 대리자 형식을 다음 검색 및 매개 변수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-166">The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.</span></span>  
  
 [!code-cpp[eventarg#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventArg/CPP/eventarg.cpp#1)]
 [!code-csharp[eventarg#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventArg/CS/eventarg.cs#1)]
 [!code-vb[eventarg#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventArg/VB/eventarg.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="af740-167">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-167">The caller does not have the required permission.</span>
          </span>
        </exception>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAddMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="af740-168">이벤트 소스에 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-168">Returns the method used to add an event handler delegate to the event source.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetAddMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetAddMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="af740-169">이벤트 소스에 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-169">Returns the method used to add an event handler delegate to the event source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-170">이벤트 소스에 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-170">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-171">`GetAddMethod` 초기화 하 고 이벤트 추가 메서드를 구독 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-171">`GetAddMethod` initializes and adds the event subscribe method.</span></span> <span data-ttu-id="af740-172">`AddEventHandler` 이벤트 처리기 대리자는 이벤트 소스가의 호출 목록에 추가할 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-172">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af740-173">일반적으로 메서드가는 다음 서명이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-173">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="af740-174">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-174">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="af740-175">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-175">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetAddMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetAddMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetAddMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetAddMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="af740-176">public이 아닌 메서드를 반환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-176">
              <see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-177">파생된 클래스에서 재정의된 경우 이벤트의 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 메서드에 대한 <see langword="MethodInfo" /> 개체를 검색하고 public이 아닌 메서드를 반환할지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-177">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for the <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> method of the event, specifying whether to return non-public methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-178">이벤트 소스에 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-178">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to add an event handler delegate to the event source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-179">`GetAddMethod` 초기화 하 고 추가 하는 이벤트 메서드는 부울 값으로 구독 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-179">The `GetAddMethod` initializes and adds the event subscribe method as a Boolean value.</span></span> <span data-ttu-id="af740-180">`AddEventHandler` 이벤트 처리기 대리자는 이벤트 소스가의 호출 목록에 추가할 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-180">The `AddEventHandler` method is used to add an event-handler delegate to the invocation list of an event source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af740-181">일반적으로 메서드가는 다음 서명이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-181">Typically, the method has the following signature:</span></span>  
  
```  
add_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="af740-182">
            <paramref name="nonPublic" />이 <see langword="true" />이고, 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드가 public이 아니고, 호출자에게 public이 아닌 메서드에 반영할 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-182">
              <paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="af740-183">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-183">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="af740-184">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-184">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="af740-185">이 인스턴스의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-185">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-186">부호 있는 32비트 정수 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-186">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetOtherMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="af740-187">
            <see langword=".other" /> 지시문을 사용하여 MSIL의 이벤트에 연결된 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-187">Returns the methods that were associated with an event in MSIL using the <see langword=".other" /> directive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetOtherMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo[] GetOtherMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOtherMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="af740-188">
            <see langword=".other" /> 지시문을 사용하여 메타데이터의 이벤트에 연결된 public 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-188">Returns the public methods that have been associated with an event in metadata using the <see langword=".other" /> directive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-189">
            <see langword=".other" /> 지시문을 사용하여 메타데이터의 이벤트에 연결된 public 메서드를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-189">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing the public methods that have been associated with the event in metadata by using the <see langword=".other" /> directive.</span>
          </span>
          <span data-ttu-id="af740-190">해당되는 public 메서드가 없으면 빈 배열이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-190">If there are no such public methods, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-191">이벤트에 대 한 메타 데이터는 이벤트 네 가지 종류의 메서드에 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-191">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="af740-192">`.addon` 지시문 이벤트 처리기를 추가 하는 데 사용 하는 방법을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-192">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="af740-193">사용 하 여는 <xref:System.Reflection.EventInfo.GetAddMethod%2A> 를 검색할 메서드는 <xref:System.Reflection.EventInfo> 해당 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-193">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="af740-194">`.removeon` 지시문 이벤트 처리기를 분리 하는 데 사용 하는 방법을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-194">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="af740-195">사용 하 여는 <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> 를 검색할 메서드는 <xref:System.Reflection.EventInfo> 해당 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-195">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="af740-196">`.fire` 지시문 이벤트를 발생 하는 데 사용 하는 방법을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-196">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="af740-197">사용 하 여는 <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> 를 검색할 메서드는 <xref:System.Reflection.EventInfo> 해당 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-197">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="af740-198">`.other` 지시문 이벤트와 연결 된 다른 모든 메서드를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-198">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="af740-199">사용 하 여는 <xref:System.Reflection.EventInfo.GetOtherMethods%2A> 의 배열을 검색 하는 메서드 <xref:System.Reflection.EventInfo> 이러한 메서드에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-199">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="af740-200">사용 하 여 이벤트와 연결 된 메서드는 `.other` 지시문 특별 한 의미가 없습니다 런타임에 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-200">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="af740-201">C# 및 Visual Basic 컴파일러를 사용 하지 않는 `.other` 지시문입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-201">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOtherMethods">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetOtherMethods(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOtherMethods (nonPublic As Boolean) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetOtherMethods(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="af740-202">public이 아닌 메서드를 포함하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-202">
              <see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-203">
            <see langword=".other" /> 지시문을 사용하여 메타데이터의 이벤트에 연결된 메서드를 반환합니다. 이때 public이 아닌 메서드를 포함할지 여부를 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-203">Returns the methods that have been associated with the event in metadata using the <see langword=".other" /> directive, specifying whether to include non-public methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-204">
            <see langword=".other" /> 지시문을 사용하여 메타데이터의 이벤트에 연결된 메서드를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-204">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing methods that have been associated with an event in metadata by using the <see langword=".other" /> directive.</span>
          </span>
          <span data-ttu-id="af740-205">지정한 사양과 일치하는 메서드가 없으면 빈 배열이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-205">If there are no methods matching the specification, an empty array is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-206">이벤트에 대 한 메타 데이터는 이벤트 네 가지 종류의 메서드에 연결할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-206">The metadata for an event can associate four kinds of methods with the event:</span></span>  
  
-   <span data-ttu-id="af740-207">`.addon` 지시문 이벤트 처리기를 추가 하는 데 사용 하는 방법을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-207">The `.addon` directive specifies the method used to add event handlers.</span></span> <span data-ttu-id="af740-208">사용 하 여는 <xref:System.Reflection.EventInfo.GetAddMethod%2A> 를 검색할 메서드는 <xref:System.Reflection.EventInfo> 해당 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-208">Use the <xref:System.Reflection.EventInfo.GetAddMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for that method.</span></span>  
  
-   <span data-ttu-id="af740-209">`.removeon` 지시문 이벤트 처리기를 분리 하는 데 사용 하는 방법을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-209">The `.removeon` directive specifies the method used to detach event handlers.</span></span> <span data-ttu-id="af740-210">사용 하 여는 <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> 를 검색할 메서드는 <xref:System.Reflection.EventInfo> 이 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-210">Use the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="af740-211">`.fire` 지시문 이벤트를 발생 하는 데 사용 하는 방법을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-211">The `.fire` directive specifies the method used to raise the event.</span></span> <span data-ttu-id="af740-212">사용 하 여는 <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> 를 검색할 메서드는 <xref:System.Reflection.EventInfo> 이 메서드에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-212">Use the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> method to retrieve an <xref:System.Reflection.EventInfo> for this method.</span></span>  
  
-   <span data-ttu-id="af740-213">`.other` 지시문 이벤트와 연결 된 다른 모든 메서드를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-213">The `.other` directive specifies any other methods associated with the event.</span></span> <span data-ttu-id="af740-214">사용 하 여는 <xref:System.Reflection.EventInfo.GetOtherMethods%2A> 의 배열을 검색 하는 메서드 <xref:System.Reflection.EventInfo> 이러한 메서드에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-214">Use the <xref:System.Reflection.EventInfo.GetOtherMethods%2A> method to retrieve an array of <xref:System.Reflection.EventInfo> objects for those methods.</span></span>  
  
 <span data-ttu-id="af740-215">사용 하 여 이벤트와 연결 된 메서드는 `.other` 지시문 특별 한 의미가 없습니다 런타임에 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-215">The methods associated with an event using the `.other` directive have no special significance to the runtime.</span></span> <span data-ttu-id="af740-216">C# 및 Visual Basic 컴파일러를 사용 하지 않는 `.other` 지시문입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-216">The C# and Visual Basic compilers do not use the `.other` directive.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="af740-217">이 메서드가 구현되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-217">This method is not implemented.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRaiseMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="af740-218">이벤트가 발생할 때 호출되는 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-218">Returns the method that is called when the event is raised.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRaiseMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRaiseMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRaiseMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="af740-219">이벤트가 발생할 때 호출되는 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-219">Returns the method that is called when the event is raised.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-220">이벤트가 발생할 때 호출되는 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-220">The method that is called when the event is raised.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-221">이 메서드는 일반적으로 반환 `null` C#으로 선언 된 이벤트에 대 한 `event` 키워드 또는 Visual Basic `Event` 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-221">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="af740-222">C# 및 Visual Basic 컴파일러 생성 하지 않습니다 이러한 메서드를 기본적으로 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-222">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="af740-223">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-223">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="af740-224">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-224">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRaiseMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRaiseMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRaiseMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="af740-225">public이 아닌 메서드를 반환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-225">
              <see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-226">파생된 클래스에서 재정의된 경우 이벤트가 발생될 때 호출되는 메서드를 반환하고 public이 아닌 메서드를 반환할지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-226">When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-227">이벤트가 발생될 때 호출되는 <see langword="MethodInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-227">A <see langword="MethodInfo" /> object that was called when the event was raised.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-228">이 메서드는 일반적으로 반환 `null` C#으로 선언 된 이벤트에 대 한 `event` 키워드 또는 Visual Basic `Event` 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-228">This method usually returns `null` for events declared with the C# `event` keyword or the Visual Basic `Event` keyword.</span></span> <span data-ttu-id="af740-229">C# 및 Visual Basic 컴파일러 생성 하지 않습니다 이러한 메서드를 기본적으로 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-229">This is because the C# and Visual Basic compilers do not generate such a method by default.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="af740-230">
            <paramref name="nonPublic" />이 <see langword="true" />이고, 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드가 public이 아니고, 호출자에게 public이 아닌 메서드에 반영할 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-230">
              <paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="af740-231">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-231">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="af740-232">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-232">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRemoveMethod">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="af740-233">이벤트 소스에서 이벤트 처리기 대리자를 제거하는 데 사용되는 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-233">Returns the method used to remove an event handler delegate from the event source.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetRemoveMethod ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemoveMethod () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetRemoveMethod();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="af740-234">이벤트 소스에서 이벤트 처리기 대리자를 제거하는 데 사용되는 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-234">Returns the method used to remove an event handler delegate from the event source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-235">이벤트 소스에서 이벤트 처리기 대리자를 제거하는 데 사용되는 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-235">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="af740-236">일반적으로 메서드가는 다음 서명이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-236">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="af740-237">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-237">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="af740-238">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-238">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetRemoveMethod">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetRemoveMethod (nonPublic As Boolean) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::MethodInfo ^ GetRemoveMethod(bool nonPublic);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nonPublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nonPublic">
          <span data-ttu-id="af740-239">public이 아닌 메서드를 반환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-239">
              <see langword="true" /> if non-public methods can be returned; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-240">파생된 클래스에서 재정의된 경우 이벤트의 메서드를 제거하기 위해 <see langword="MethodInfo" /> 개체를 검색하고 public이 아닌 메서드를 반환할지 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-240">When overridden in a derived class, retrieves the <see langword="MethodInfo" /> object for removing a method of the event, specifying whether to return non-public methods.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-241">이벤트 소스에서 이벤트 처리기 대리자를 제거하는 데 사용되는 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-241">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method used to remove an event handler delegate from the event source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="af740-242">일반적으로 메서드가는 다음 서명이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-242">Typically, the method has the following signature:</span></span>  
  
```  
remove_<EventName>(<EventHandlerType> handler)  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="af740-243">
            <paramref name="nonPublic" />이 <see langword="true" />이고, 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드가 public이 아니고, 호출자에게 public이 아닌 메서드에 반영할 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-243">
              <paramref name="nonPublic" /> is <see langword="true" />, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="af740-244">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-244">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="af740-245">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-245">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="IsMulticast">
      <MemberSignature Language="C#" Value="public virtual bool IsMulticast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMulticast" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsMulticast" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsMulticast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMulticast { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsMulticast</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="af740-246">이벤트가 멀티캐스트인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-246">Gets a value indicating whether the event is multicast.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="af740-247">대리자가 멀티캐스트 대리자의 인스턴스이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-247">
              <see langword="true" /> if the delegate is an instance of a multicast delegate; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="af740-248">호출자에게 필요한 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-248">The caller does not have the required permission.</span>
          </span>
        </exception>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="af740-249">
            <see langword="EventInfo" />의 이름에 특수한 의미가 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-249">Gets a value indicating whether the <see langword="EventInfo" /> has a name with a special meaning.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="af740-250">이벤트에 특수한 이름이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-250">
              <see langword="true" /> if this event has a special name; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-251">이 속성은 이벤트의 이름 특별 한 의미가 있는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-251">This property determines whether the event's name has a special meaning.</span></span> <span data-ttu-id="af740-252">이름으로 시작 하거나 밑줄 문자 (_)을 속성 접근자 메서드 오버 로드 된 연산자를 포함 하는 예 일부 컴파일러에서 특별 한 취급이 필요할 수 있는 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-252">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventAttributes" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._EventInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="af740-253">이 멤버가 이벤트임을 나타내는 <see cref="T:System.Reflection.MemberTypes" /> 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-253">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="af740-254">이 멤버가 이벤트임을 나타내는 <see cref="T:System.Reflection.MemberTypes" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-254">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is an event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-255">이 속성을 재정의 <xref:System.Reflection.MemberInfo.MemberType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-255">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>.</span></span> <span data-ttu-id="af740-256">따라서 집합을 조사할 때 <xref:System.Reflection.MemberInfo> 개체-예를 들어 반환 하는 배열 <xref:System.Type.GetMembers%2A> -는 <xref:System.Reflection.MemberInfo.MemberType%2A> 속성에서 반환 <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> 지정된 된 멤버에는 이벤트 인 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-256">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType> only when a given member is an event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="af740-257">비교할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-257">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="af740-258">비교할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-258">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-259">두 <see cref="T:System.Reflection.EventInfo" /> 개체가 같은지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-259">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-260">
            <see langword="true" />가 <paramref name="left" />와 같으면 <paramref name="right" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-260">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.EventInfo left, System.Reflection.EventInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.EventInfo left, class System.Reflection.EventInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As EventInfo, right As EventInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::EventInfo ^ left, System::Reflection::EventInfo ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.EventInfo" />
        <Parameter Name="right" Type="System.Reflection.EventInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="af740-261">비교할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-261">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="af740-262">비교할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-262">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-263">두 <see cref="T:System.Reflection.EventInfo" /> 개체가 같지 않은지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-263">Indicates whether two <see cref="T:System.Reflection.EventInfo" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-264">
            <see langword="true" />가 <paramref name="left" />와 다르면 <paramref name="right" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-264">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RaiseMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RaiseMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RaiseMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RaiseMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RaiseMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="af740-265">이벤트가 발생할 때 호출되는 메서드(public이 아닌 메서드 포함)를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-265">Gets the method that is called when the event is raised, including non-public methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="af740-266">이벤트가 발생할 때 호출되는 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-266">The method that is called when the event is raised.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-267">이 속성은 해당 호출에서 <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> 값 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-267">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRaiseMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public virtual void RemoveEventHandler (object target, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventHandler(object target, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveEventHandler (target As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveEventHandler(System::Object ^ target, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="af740-268">이벤트 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-268">The event source.</span>
          </span>
        </param>
        <param name="handler">
          <span data-ttu-id="af740-269">대상에 의해 발생한 이벤트에서 연결 해제할 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-269">The delegate to be disassociated from the events raised by target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-270">이벤트 소스에서 이벤트 처리기를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-270">Removes an event handler from an event source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-271">이 메서드는 대상 개체에이 이벤트를 동기화 할 수 있는 대리자를 제거 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-271">This method attempts to remove the delegate that may synchronize this event on the target object.</span></span>  
  
 <span data-ttu-id="af740-272">대상, 메서드 또는에서 캡슐화 된 메서드가에서 이벤트가 발생 한 경우 `handler` 더 이상 호출 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="af740-272">When an event is raised by target, the method or methods encapsulated by `handler` will no longer be invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="af740-273">이 이벤트에 public <see langword="remove" /> 접근자가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-273">The event does not have a public <see langword="remove" /> accessor.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="af740-274">전달된 처리기를 사용할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-274">The handler that was passed in cannot be used.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="af740-275">[Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 <see cref="T:System.Exception" />을 catch합니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="af740-275">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <see cref="T:System.Exception" /> instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="af740-276">
            <paramref name="target" /> 매개 변수가 <see langword="null" />이고 이벤트가 static이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-276">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.</span>
          </span>
          <span data-ttu-id="af740-277">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-277">-or-</span>
          </span>
          <span data-ttu-id="af740-278">
            <see cref="T:System.Reflection.EventInfo" />가 대상에서 선언되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-278">The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="af740-279">[Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.MemberAccessException" />을 catch합니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="af740-279">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="af740-280">호출자에게 멤버에 대한 액세스 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-280">The caller does not have access permission to the member.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="af740-281">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-281">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="af740-282">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-282">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Delegate" />
        <altmember cref="T:System.EventHandler" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo RemoveMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo RemoveMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.EventInfo.RemoveMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoveMethod As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ RemoveMethod { System::Reflection::MethodInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="af740-283">비공용 메서드를 포함하여 이벤트 메서드를 제거하기 위한 <see langword="MethodInfo" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-283">Gets the <see langword="MethodInfo" /> object for removing a method of the event, including non-public methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="af740-284">이벤트의 메서드를 제거하는 <see langword="MethodInfo" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-284">The <see langword="MethodInfo" /> object for removing a method of the event.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-285">이 속성은 해당 호출에서 <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> 값 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-285">This property is the equivalent of calling the <xref:System.Reflection.EventInfo.GetRemoveMethod%2A> with a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _EventInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_EventInfo::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="af740-286">나중에 사용하기 위해 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-286">Reserved for future use.</span>
          </span>
          <span data-ttu-id="af740-287">IID_NULL이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-287">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="af740-288">매핑할 전달된 이름의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-288">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="af740-289">매핑할 이름의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-289">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="af740-290">이름을 해석할 로캘 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-290">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="af740-291">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-291">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-292">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-292">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-293">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-293">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="af740-294">에 대 한 자세한 내용은 `IDispatch::GetIDsOfNames`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-294">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="af740-295">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-295">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetType">
      <MemberSignature Language="C#" Value="Type _EventInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._EventInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _EventInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._EventInfo.GetType() = System::Runtime::InteropServices::_EventInfo::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="af740-296">
            <see cref="T:System.Reflection.EventInfo" /> 형식을 나타내는 <c>T:System.Type</c> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-296">Returns a <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="af740-297">
            <see cref="T:System.Reflection.EventInfo" /> 형식을 나타내는 <c>T:System.Type</c> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-297">A <c>T:System.Type</c> object representing the <see cref="T:System.Reflection.EventInfo" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _EventInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="af740-298">반환할 형식 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-298">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="af740-299">형식 정보의 로캘 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-299">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="af740-300">요청된 형식 정보 개체에 대한 포인터를 받습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-300">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-301">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-301">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-302">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-302">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="af740-303">에 대 한 자세한 내용은 `IDispatch::GetTypeInfo`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-303">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="af740-304">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-304">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _EventInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _EventInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_EventInfo::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="af740-305">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-305">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-306">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-306">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-307">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-307">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="af740-308">에 대 한 자세한 내용은 `IDispatch::GetTypeInfoCount`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-308">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="af740-309">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-309">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._EventInfo.Invoke">
      <MemberSignature Language="C#" Value="void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._EventInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _EventInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._EventInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_EventInfo::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="af740-310">멤버를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-310">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="af740-311">나중에 사용하기 위해 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-311">Reserved for future use.</span>
          </span>
          <span data-ttu-id="af740-312">IID_NULL이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-312">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="af740-313">인수를 해석할 로캘 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-313">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="af740-314">호출의 컨텍스트를 설명하는 플래그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-314">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="af740-315">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-315">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="af740-316">결과를 저장할 위치에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-316">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="af740-317">예외 정보가 포함된 구조체에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-317">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="af740-318">오류가 있는 첫 번째 인수의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-318">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="af740-319">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-319">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af740-320">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="af740-320">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="af740-321">에 대 한 자세한 내용은 `IDispatch::Invoke`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="af740-321">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="af740-322">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="af740-322">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>