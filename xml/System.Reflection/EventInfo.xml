<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EventInfo.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f9bda12daa17b91e3190c3905b39d15462fcb260.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9bda12daa17b91e3190c3905b39d15462fcb260</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Discovers the attributes of an event and provides access to event metadata.</source>
          <target state="translated">이벤트의 특성을 검색하고 이벤트 메타데이터에 액세스할 수 있도록 해줍니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> class to inspect events and to hook up event handlers, as shown in the example code for the <ph id="ph2">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> method.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> 클래스에 대 한 예제 코드에 나와 있는 것 처럼 이벤트 처리기를 연결 하 고 이벤트를 검사 하는 <ph id="ph2">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> is not intended to be used to raise events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> 이벤트를 발생 시키는 데 사용할 적합 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>An object raises events as dictated by its internal state.</source>
          <target state="translated">개체의 내부 상태에 따라 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Events are used with delegates.</source>
          <target state="translated">이벤트는 대리자와 함께 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source.</source>
          <target state="translated">이벤트 수신기 이벤트 소스에서 이벤트 발생 될 때마다 호출 되는 이벤트 처리기 대리자를 인스턴스화합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In order to connect to the event source, the event listener adds this delegate to the invocation list on the source.</source>
          <target state="translated">이벤트 소스에 연결 하기 위해 이벤트 수신기는이 대리자를 호출 목록에는 소스에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When the event is raised, the invoke method of the event-handler delegate is called.</source>
          <target state="translated">이벤트는 이벤트 처리기 대리자에 invoke 메서드가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Both multicast and single-cast event notifications are supported.</source>
          <target state="translated">두 멀티 캐스트 및 단일 캐스트 이벤트 알림에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The <ph id="ph1">`Add`</ph> and <ph id="ph2">`Remove`</ph> methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</source>
          <target state="translated"><ph id="ph1">`Add`</ph> 및 <ph id="ph2">`Remove`</ph> 으로 메서드를 이벤트 처리기 대리자 클래스는 이벤트와 연결 된 메타 데이터에 표시 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates are object-oriented function pointers.</source>
          <target state="translated">대리자는 개체 지향 함수 포인터입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In C or C++, a function pointer is a reference to a method.</source>
          <target state="translated">C 또는 c + + 함수 포인터는 메서드에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method.</source>
          <target state="translated">C 또는 c + + 함수 포인터와 달리 대리자는 두 개의 참조를 포함: 메서드 및 메서드를 지 원하는 개체에 대 한 참조에 대 한 참조입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates can invoke a method without knowing the class type that declares or inherits the method.</source>
          <target state="translated">대리자를 선언 하거나 메서드를 상속 하는 클래스 형식을 알지 못해도 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Delegates need only know the return type and parameter list of the method.</source>
          <target state="translated">대리자 알면 메서드의 반환 형식 및 매개 변수 목록입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The event model works equally well for single-cast and multicast delegates.</source>
          <target state="translated">이벤트 모델은 동일 하 게 작동 단일 캐스트 및 멀티 캐스트 대리자에 효과적입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When the delegate's invoke method is called, only a single object will have a method called on it.</source>
          <target state="translated">대리자의 호출 하는 경우에 단일 개체 이므로 호출 하는 메서드를 사용할 됩니다 메서드 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</source>
          <target state="translated">한정자를 멀티 캐스트 대리자의 invoke 메서드가 호출 될 때 호출 되는 여러 메서드가 있는 대리자 선언에 적용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Calling <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> on <ph id="ph2">`EventInfo`</ph> when the <ph id="ph3">`inherit`</ph> parameter of <ph id="ph4">`GetCustomAttributes`</ph> is <ph id="ph5">`true`</ph> does not walk the type hierarchy.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A?displayProperty=nameWithType&gt;</ph> 에 <ph id="ph2">`EventInfo`</ph> 때는 <ph id="ph3">`inherit`</ph> 의 매개 변수 <ph id="ph4">`GetCustomAttributes`</ph> 은 <ph id="ph5">`true`</ph> 형식 계층 구조를 검색 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>Use <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> to inherit custom attributes.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Attribute?displayProperty=nameWithType&gt;</ph> 사용자 지정 특성을 상속 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>The following code gets an <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> object for the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event of the <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> class.</source>
          <target state="translated">다음 코드에서는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo&gt;</ph> 개체에 대 한는 <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> 의 이벤트는 <ph id="ph3">&lt;xref:System.Windows.Forms.Button&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">부분적으로 신뢰할 수 있는 코드에서이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>This type is thread safe.</source>
          <target state="translated">이 형식은 스레드로부터 안전합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.EventInfo">
          <source>When you inherit from <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /&gt;</ph>, and <ph id="ph4">&lt;see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /&gt;</ph>.</source>
          <target state="translated">상속 하는 경우 <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>, 멤버를 재정의 해야 합니다: <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)" /&gt;</ph>, 및 <ph id="ph4">&lt;see cref="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The event source.</source>
          <target state="translated">이벤트 소스입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Encapsulates a method or methods to be invoked when the event is raised by the target.</source>
          <target state="translated">이벤트가 대상에 의해 발생할 때 호출될 메서드를 캡슐화합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Adds an event handler to an event source.</source>
          <target state="translated">이벤트 소스에 이벤트 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>This method attempts to add a delegate to synchronize the event on the target object.</source>
          <target state="translated">이 메서드는 대상 개체에 이벤트를 동기화 하는 대리자를 추가 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.</source>
          <target state="translated">이 이벤트는 대상 매개 변수에 의해 발생 될 때마다 메서드 또는 처리기에서 캡슐화 된 메서드가 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler.</source>
          <target state="translated">다음 코드 예제에서는 어셈블리를 로드, 어셈블리에서 형식의 인스턴스를 작성, 동적 어셈블리를 사용 하 여 이벤트 처리기를 만들고 및 동적 이벤트 처리기를 연결 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>All actions are performed using late binding.</source>
          <target state="translated">런타임에 바인딩을 사용 하 여 모든 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example loads System.dll and creates an instance of the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">코드 예제에서는 System.dll을 로드 하 고 인스턴스를 만듭니다는 <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Type.GetEvent%2A?displayProperty=nameWithType&gt;</ph> method to get the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, and the <ph id="ph3">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> property to get the delegate type for the event.</source>
          <target state="translated">이 예제에서는 사용는 <ph id="ph1">&lt;xref:System.Type.GetEvent%2A?displayProperty=nameWithType&gt;</ph> 가져올 메서드를는 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트 및 <ph id="ph3">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> 이벤트에 대 한 대리자 형식을 가져올 속성입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example gets a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the <ph id="ph2">`Invoke`</ph> method of the delegate type, and from the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> obtains the signature of the delegate.</source>
          <target state="translated">코드 예제는 <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> 에 대 한는 <ph id="ph2">`Invoke`</ph> 대리자 형식의 들어오고 메서드는 <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> 대리자의 시그니처를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The code example then creates a dynamic assembly with one module containing a single type named <ph id="ph1">`Handler`</ph>, and gives the type a <ph id="ph2">`static`</ph> method (<ph id="ph3">`Shared`</ph> method in Visual Basic) named <ph id="ph4">`DynamicHandler`</ph> that will be used to handle the event.</source>
          <target state="translated">다음 코드 예제에서는 라는 단일 형식을 포함 하는 한 개의 모듈이 있는 동적 어셈블리를 만듭니다 <ph id="ph1">`Handler`</ph>, 해당 형식을 제공는 <ph id="ph2">`static`</ph> 메서드 (<ph id="ph3">`Shared`</ph> Visual Basic의에서 메서드) 라는 <ph id="ph4">`DynamicHandler`</ph> 이벤트를 처리 하는 데 사용 될 됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>After the dynamic type is created, the code example gets a <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for the finished method and uses it to create a delegate instance.</source>
          <target state="translated">코드 예제에서는 가져옵니다 동적 형식이 만든 후는 <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> 완료 된 메서드에 대 한 사용 하 여 대리자 인스턴스를 만들려고 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>This instance is passed to the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> method to hook up the event.</source>
          <target state="translated">이 인스턴스의에 전달 되는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.AddEventHandler%2A&gt;</ph> 메서드 이벤트를 후크를 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The program then pauses to allow the event to be raised.</source>
          <target state="translated">프로그램은 다음 이벤트를 발생 수 있도록 일시 중지 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The event does not have a public <ph id="ph1">&lt;see langword="add" /&gt;</ph> accessor.</source>
          <target state="translated">이 이벤트에 public <ph id="ph1">&lt;see langword="add" /&gt;</ph> 접근자가 없는 경우</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The handler that was passed in cannot be used.</source>
          <target state="translated">전달된 처리기를 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 <bpt id="p2">[</bpt>이식 가능한 클래스 라이브러리<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>에서 대신 기본 클래스 예외 <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The caller does not have access permission to the member.</source>
          <target state="translated">호출자에게 멤버에 대한 액세스 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 <bpt id="p2">[</bpt>이식 가능한 클래스 라이브러리<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>에서 대신 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the event is not static.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 이벤트가 static이 아닌 경우</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> is not declared on the target.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>가 대상에서 선언되지 않은 경우</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method of the event, including non-public methods.</source>
          <target state="translated">비공용 메서드를 포함하여 이벤트의 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 메서드에 대한 <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 메서드의 <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.AddMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 속성은 해당 호출에서 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> 값 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.Attributes">
          <source>Gets the attributes for this event.</source>
          <target state="translated">이 이벤트에 대한 특성을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.Attributes">
          <source>The read-only attributes for this event.</source>
          <target state="translated">이 이벤트에 대한 읽기 전용 특성입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.Attributes">
          <source>The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</source>
          <target state="translated">이 인스턴스에 의해 반영 된 이벤트에 대 한 설정 특성의 비트맵을 나타내는 4 바이트 정수에는 특성이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 인스턴스와 비교할 개체 또는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">@FSHO2@이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 이 인스턴스의 형식 및 값과 같으면 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>Gets the <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object of the underlying event-handler delegate associated with this event.</source>
          <target state="translated">이 이벤트와 연결된 내부 이벤트 처리기 대리자의 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>A read-only <ph id="ph1">&lt;see langword="Type" /&gt;</ph> object representing the delegate event handler.</source>
          <target state="translated">대리자 이벤트 처리기를 나타내는 읽기 전용 <ph id="ph1">&lt;see langword="Type" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> property to discover the delegate type of an event and to display its parameter types.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.EventHandlerType%2A&gt;</ph> 속성 이벤트의 대리자 형식을 검색 하 고 해당 매개 변수 형식을 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The example defines a delegate named <ph id="ph1">`MyDelegate`</ph> and an event named <ph id="ph2">`ev`</ph> of type <ph id="ph3">`MyDelegate`</ph>.</source>
          <target state="translated">이 예제에서는 라는 대리자를 정의 <ph id="ph1">`MyDelegate`</ph> 라는 이벤트가 <ph id="ph2">`ev`</ph> 형식의 <ph id="ph3">`MyDelegate`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The code in the <ph id="ph1">`Main`</ph> method discovers the event signature by getting the delegate type of the event, getting the <ph id="ph2">`Invoke`</ph> method of the delegate type, and then retrieving and displaying the parameters.</source>
          <target state="translated">코드는 <ph id="ph1">`Main`</ph> 메서드는 이벤트의 대리자 형식과 하 여 이벤트 서명의 검색 가져오기는 <ph id="ph2">`Invoke`</ph> 메서드는 대리자 형식을 다음 검색 및 매개 변수를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.EventHandlerType">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method used to add an event handler delegate to the event source.</source>
          <target state="translated">이벤트 소스에 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Returns the method used to add an event handler delegate to the event source.</source>
          <target state="translated">이벤트 소스에 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to add an event handler delegate to the event source.</source>
          <target state="translated">이벤트 소스에 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source><ph id="ph1">`GetAddMethod`</ph> initializes and adds the event subscribe method.</source>
          <target state="translated"><ph id="ph1">`GetAddMethod`</ph> 초기화 하 고 이벤트 추가 메서드를 구독 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>The <ph id="ph1">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.</source>
          <target state="translated"><ph id="ph1">`AddEventHandler`</ph> 이벤트 처리기 대리자는 이벤트 소스가의 호출 목록에 추가할 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">일반적으로 메서드가는 다음 서명이 있습니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">public이 아닌 메서드를 반환할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>When overridden in a derived class, retrieves the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for the <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> method of the event, specifying whether to return non-public methods.</source>
          <target state="translated">파생된 클래스에서 재정의된 경우 이벤트의 <ph id="ph2">&lt;see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /&gt;</ph> 메서드에 대한 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 개체를 검색하고 public이 아닌 메서드를 반환할지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to add an event handler delegate to the event source.</source>
          <target state="translated">이벤트 소스에 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>The <ph id="ph1">`GetAddMethod`</ph> initializes and adds the event subscribe method as a Boolean value.</source>
          <target state="translated"><ph id="ph1">`GetAddMethod`</ph> 초기화 하 고 추가 하는 이벤트 메서드는 부울 값으로 구독 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>The <ph id="ph1">`AddEventHandler`</ph> method is used to add an event-handler delegate to the invocation list of an event source.</source>
          <target state="translated"><ph id="ph1">`AddEventHandler`</ph> 이벤트 처리기 대리자는 이벤트 소스가의 호출 목록에 추가할 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">일반적으로 메서드가는 다음 서명이 있습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph>이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이고, 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드가 public이 아니고, 호출자에게 public이 아닌 메서드에 반영할 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">이 인스턴스의 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">부호 있는 32비트 정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the methods that were associated with an event in MSIL using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated"><ph id="ph1">&lt;see langword=".other" /&gt;</ph> 지시문을 사용하여 MSIL의 이벤트에 연결된 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Returns the public methods that have been associated with an event in metadata using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated"><ph id="ph1">&lt;see langword=".other" /&gt;</ph> 지시문을 사용하여 메타데이터의 이벤트에 연결된 public 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing the public methods that have been associated with the event in metadata by using the <ph id="ph2">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated"><ph id="ph2">&lt;see langword=".other" /&gt;</ph> 지시문을 사용하여 메타데이터의 이벤트에 연결된 public 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>If there are no such public methods, an empty array is returned.</source>
          <target state="translated">해당되는 public 메서드가 없으면 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The metadata for an event can associate four kinds of methods with the event:</source>
          <target state="translated">이벤트에 대 한 메타 데이터는 이벤트 네 가지 종류의 메서드에 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.addon`</ph> directive specifies the method used to add event handlers.</source>
          <target state="translated"><ph id="ph1">`.addon`</ph> 지시문 이벤트 처리기를 추가 하는 데 사용 하는 방법을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> 를 검색할 메서드는 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 해당 메서드에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.removeon`</ph> directive specifies the method used to detach event handlers.</source>
          <target state="translated"><ph id="ph1">`.removeon`</ph> 지시문 이벤트 처리기를 분리 하는 데 사용 하는 방법을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> 를 검색할 메서드는 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 해당 메서드에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.fire`</ph> directive specifies the method used to raise the event.</source>
          <target state="translated"><ph id="ph1">`.fire`</ph> 지시문 이벤트를 발생 하는 데 사용 하는 방법을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> 를 검색할 메서드는 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 해당 메서드에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The <ph id="ph1">`.other`</ph> directive specifies any other methods associated with the event.</source>
          <target state="translated"><ph id="ph1">`.other`</ph> 지시문 이벤트와 연결 된 다른 모든 메서드를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> 의 배열을 검색 하는 메서드 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 이러한 메서드에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The methods associated with an event using the <ph id="ph1">`.other`</ph> directive have no special significance to the runtime.</source>
          <target state="translated">사용 하 여 이벤트와 연결 된 메서드는 <ph id="ph1">`.other`</ph> 지시문 특별 한 의미가 없습니다 런타임에 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods">
          <source>The C# and Visual Basic compilers do not use the <ph id="ph1">`.other`</ph> directive.</source>
          <target state="translated">C# 및 Visual Basic 컴파일러를 사용 하지 않는 <ph id="ph1">`.other`</ph> 지시문입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to include non-public methods; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">public이 아닌 메서드를 포함하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Returns the methods that have been associated with the event in metadata using the <ph id="ph1">&lt;see langword=".other" /&gt;</ph> directive, specifying whether to include non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;see langword=".other" /&gt;</ph> 지시문을 사용하여 메타데이터의 이벤트에 연결된 메서드를 반환합니다. 이때 public이 아닌 메서드를 포함할지 여부를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects representing methods that have been associated with an event in metadata by using the <ph id="ph2">&lt;see langword=".other" /&gt;</ph> directive.</source>
          <target state="translated"><ph id="ph2">&lt;see langword=".other" /&gt;</ph> 지시문을 사용하여 메타데이터의 이벤트에 연결된 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>If there are no methods matching the specification, an empty array is returned.</source>
          <target state="translated">지정한 사양과 일치하는 메서드가 없으면 빈 배열이 반환됩니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The metadata for an event can associate four kinds of methods with the event:</source>
          <target state="translated">이벤트에 대 한 메타 데이터는 이벤트 네 가지 종류의 메서드에 연결할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.addon`</ph> directive specifies the method used to add event handlers.</source>
          <target state="translated"><ph id="ph1">`.addon`</ph> 지시문 이벤트 처리기를 추가 하는 데 사용 하는 방법을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for that method.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetAddMethod%2A&gt;</ph> 를 검색할 메서드는 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 해당 메서드에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.removeon`</ph> directive specifies the method used to detach event handlers.</source>
          <target state="translated"><ph id="ph1">`.removeon`</ph> 지시문 이벤트 처리기를 분리 하는 데 사용 하는 방법을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> 를 검색할 메서드는 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 이 메서드에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.fire`</ph> directive specifies the method used to raise the event.</source>
          <target state="translated"><ph id="ph1">`.fire`</ph> 지시문 이벤트를 발생 하는 데 사용 하는 방법을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> method to retrieve an <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> for this method.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> 를 검색할 메서드는 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 이 메서드에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The <ph id="ph1">`.other`</ph> directive specifies any other methods associated with the event.</source>
          <target state="translated"><ph id="ph1">`.other`</ph> 지시문 이벤트와 연결 된 다른 모든 메서드를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> method to retrieve an array of <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> objects for those methods.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetOtherMethods%2A&gt;</ph> 의 배열을 검색 하는 메서드 <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph> 이러한 메서드에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The methods associated with an event using the <ph id="ph1">`.other`</ph> directive have no special significance to the runtime.</source>
          <target state="translated">사용 하 여 이벤트와 연결 된 메서드는 <ph id="ph1">`.other`</ph> 지시문 특별 한 의미가 없습니다 런타임에 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>The C# and Visual Basic compilers do not use the <ph id="ph1">`.other`</ph> directive.</source>
          <target state="translated">C# 및 Visual Basic 컴파일러를 사용 하지 않는 <ph id="ph1">`.other`</ph> 지시문입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
          <source>This method is not implemented.</source>
          <target state="translated">이 메서드가 구현되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method that is called when the event is raised.</source>
          <target state="translated">이벤트가 발생할 때 호출되는 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>Returns the method that is called when the event is raised.</source>
          <target state="translated">이벤트가 발생할 때 호출되는 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>The method that is called when the event is raised.</source>
          <target state="translated">이벤트가 발생할 때 호출되는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>This method usually returns <ph id="ph1">`null`</ph> for events declared with the C# <ph id="ph2">`event`</ph> keyword or the Visual Basic <ph id="ph3">`Event`</ph> keyword.</source>
          <target state="translated">이 메서드는 일반적으로 반환 <ph id="ph1">`null`</ph> C#으로 선언 된 이벤트에 대 한 <ph id="ph2">`event`</ph> 키워드 또는 Visual Basic <ph id="ph3">`Event`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>This is because the C# and Visual Basic compilers do not generate such a method by default.</source>
          <target state="translated">C# 및 Visual Basic 컴파일러 생성 하지 않습니다 이러한 메서드를 기본적으로 때문입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">public이 아닌 메서드를 반환할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>When overridden in a derived class, returns the method that is called when the event is raised, specifying whether to return non-public methods.</source>
          <target state="translated">파생된 클래스에서 재정의된 경우 이벤트가 발생될 때 호출되는 메서드를 반환하고 public이 아닌 메서드를 반환할지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object that was called when the event was raised.</source>
          <target state="translated">이벤트가 발생될 때 호출되는 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>This method usually returns <ph id="ph1">`null`</ph> for events declared with the C# <ph id="ph2">`event`</ph> keyword or the Visual Basic <ph id="ph3">`Event`</ph> keyword.</source>
          <target state="translated">이 메서드는 일반적으로 반환 <ph id="ph1">`null`</ph> C#으로 선언 된 이벤트에 대 한 <ph id="ph2">`event`</ph> 키워드 또는 Visual Basic <ph id="ph3">`Event`</ph> 키워드입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>This is because the C# and Visual Basic compilers do not generate such a method by default.</source>
          <target state="translated">C# 및 Visual Basic 컴파일러 생성 하지 않습니다 이러한 메서드를 기본적으로 때문입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph>이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이고, 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드가 public이 아니고, 호출자에게 public이 아닌 메서드에 반영할 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="T:System.Reflection.EventInfo">
          <source>Returns the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">이벤트 소스에서 이벤트 처리기 대리자를 제거하는 데 사용되는 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Returns the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">이벤트 소스에서 이벤트 처리기 대리자를 제거하는 데 사용되는 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">이벤트 소스에서 이벤트 처리기 대리자를 제거하는 데 사용되는 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">일반적으로 메서드가는 다음 서명이 있습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if non-public methods can be returned; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">public이 아닌 메서드를 반환할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>When overridden in a derived class, retrieves the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event, specifying whether to return non-public methods.</source>
          <target state="translated">파생된 클래스에서 재정의된 경우 이벤트의 메서드를 제거하기 위해 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 개체를 검색하고 public이 아닌 메서드를 반환할지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> object representing the method used to remove an event handler delegate from the event source.</source>
          <target state="translated">이벤트 소스에서 이벤트 처리기 대리자를 제거하는 데 사용되는 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>Typically, the method has the following signature:</source>
          <target state="translated">일반적으로 메서드가는 다음 서명이 있습니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph> is <ph id="ph2">&lt;see langword="true" /&gt;</ph>, the method used to add an event handler delegate is non-public, and the caller does not have permission to reflect on non-public methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="nonPublic" /&gt;</ph>이 <ph id="ph2">&lt;see langword="true" /&gt;</ph>이고, 이벤트 처리기 대리자를 추가하는 데 사용되는 메서드가 public이 아니고, 호출자에게 public이 아닌 메서드에 반영할 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source>Gets a value indicating whether the event is multicast.</source>
          <target state="translated">이벤트가 멀티캐스트인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the delegate is an instance of a multicast delegate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">대리자가 멀티캐스트 대리자의 인스턴스이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsMulticast">
          <source>The caller does not have the required permission.</source>
          <target state="translated">호출자에게 필요한 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph> has a name with a special meaning.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="EventInfo" /&gt;</ph>의 이름에 특수한 의미가 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this event has a special name; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이벤트에 특수한 이름이 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>This property determines whether the event's name has a special meaning.</source>
          <target state="translated">이 속성은 이벤트의 이름 특별 한 의미가 있는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.IsSpecialName">
          <source>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</source>
          <target state="translated">이름으로 시작 하거나 밑줄 문자 (_)을 속성 접근자 메서드 오버 로드 된 연산자를 포함 하는 예 일부 컴파일러에서 특별 한 취급이 필요할 수 있는 이름입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is an event.</source>
          <target state="translated">이 멤버가 이벤트임을 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is an event.</source>
          <target state="translated">이 멤버가 이벤트임을 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">이 속성을 재정의 <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType&gt;</ph> only when a given member is an event.</source>
          <target state="translated">따라서 집합을 조사할 때 <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> 개체-예를 들어 반환 하는 배열 <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> -는 <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> 속성에서 반환 <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Event?displayProperty=nameWithType&gt;</ph> 지정된 된 멤버에는 이벤트 인 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The first object to compare.</source>
          <target state="translated">비교할 첫 번째 개체입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The second object to compare.</source>
          <target state="translated">비교할 두 번째 개체입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">두 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 개체가 같은지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="left" /&gt;</ph>와 같으면 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>이고, 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The first object to compare.</source>
          <target state="translated">비교할 첫 번째 개체입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>The second object to compare.</source>
          <target state="translated">비교할 두 번째 개체입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">두 <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 개체가 같지 않은지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="left" /&gt;</ph>와 다르면 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>이고, 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>Gets the method that is called when the event is raised, including non-public methods.</source>
          <target state="translated">이벤트가 발생할 때 호출되는 메서드(public이 아닌 메서드 포함)를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>The method that is called when the event is raised.</source>
          <target state="translated">이벤트가 발생할 때 호출되는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RaiseMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 속성은 해당 호출에서 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRaiseMethod%2A&gt;</ph> 값 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event source.</source>
          <target state="translated">이벤트 소스입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The delegate to be disassociated from the events raised by target.</source>
          <target state="translated">대상에 의해 발생한 이벤트에서 연결 해제할 대리자입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Removes an event handler from an event source.</source>
          <target state="translated">이벤트 소스에서 이벤트 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>This method attempts to remove the delegate that may synchronize this event on the target object.</source>
          <target state="translated">이 메서드는 대상 개체에이 이벤트를 동기화 할 수 있는 대리자를 제거 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>When an event is raised by target, the method or methods encapsulated by <ph id="ph1">`handler`</ph> will no longer be invoked.</source>
          <target state="translated">대상, 메서드 또는에서 캡슐화 된 메서드가에서 이벤트가 발생 한 경우 <ph id="ph1">`handler`</ph> 더 이상 호출 되지 것입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The event does not have a public <ph id="ph1">&lt;see langword="remove" /&gt;</ph> accessor.</source>
          <target state="translated">이 이벤트에 public <ph id="ph1">&lt;see langword="remove" /&gt;</ph> 접근자가 없는 경우</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The handler that was passed in cannot be used.</source>
          <target state="translated">전달된 처리기를 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 <bpt id="p2">[</bpt>이식 가능한 클래스 라이브러리<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>에서 대신 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the event is not static.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 이벤트가 static이 아닌 경우</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> is not declared on the target.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>가 대상에서 선언되지 않은 경우</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 <bpt id="p2">[</bpt>이식 가능한 클래스 라이브러리<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>에서 대신 기본 클래스 예외 <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>The caller does not have access permission to the member.</source>
          <target state="translated">호출자에게 멤버에 대한 액세스 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>Gets the <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event, including non-public methods.</source>
          <target state="translated">비공용 메서드를 포함하여 이벤트 메서드를 제거하기 위한 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>The <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> object for removing a method of the event.</source>
          <target state="translated">이벤트의 메서드를 제거하는 <ph id="ph1">&lt;see langword="MethodInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.EventInfo.RemoveMethod">
          <source>This property is the equivalent of calling the <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> with a value of <ph id="ph2">`true`</ph>.</source>
          <target state="translated">이 속성은 해당 호출에서 <ph id="ph1">&lt;xref:System.Reflection.EventInfo.GetRemoveMethod%2A&gt;</ph> 값 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하기 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL이어야 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">매핑할 전달된 이름의 배열입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">매핑할 이름의 수입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">이름을 해석할 로캘 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType">
          <source>Returns a <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> object representing the <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 형식을 나타내는 <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetType">
          <source>A <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> object representing the <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> 형식을 나타내는 <bpt id="p1">&lt;c&gt;</bpt>T:System.Type<ept id="p1">&lt;/c&gt;</ept> 개체입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">반환할 형식 정보입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">형식 정보의 로캘 식별자입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">요청된 형식 정보 개체에 대한 포인터를 받습니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">멤버를 식별합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하기 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL이어야 합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">인수를 해석할 로캘 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">호출의 컨텍스트를 설명하는 플래그입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">결과를 저장할 위치에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">예외 정보가 포함된 구조체에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">오류가 있는 첫 번째 인수의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::Invoke`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.EventInfo.System#Runtime#InteropServices#_EventInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>