<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FieldAttributes.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e8bf52b4f1fa66ade72084eab3513fc567da3417.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8bf52b4f1fa66ade72084eab3513fc567da3417</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldAttributes">
          <source>Specifies flags that describe the attributes of a field.</source>
          <target state="translated">필드의 특성을 설명하는 플래그를 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source><ph id="ph1">`FieldAttributes`</ph> uses the value from <ph id="ph2">`FieldAccessMask`</ph> to mask off only the parts of the attribute value that pertain to the accessibility.</source>
          <target state="translated"><ph id="ph1">`FieldAttributes`</ph> 값을 사용 하 여 <ph id="ph2">`FieldAccessMask`</ph> 마스크 접근성 관련 특성 값의 일부만 해제 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>For example, the following code determines if <ph id="ph1">`Attributes`</ph> has the public bit set.</source>
          <target state="translated">다음 코드는 경우를 결정 하는 예를 들어 <ph id="ph1">`Attributes`</ph> 에 공용 비트가 설정 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>To get the <ph id="ph1">`FieldAttributes`</ph>, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">가져오려는 <ph id="ph1">`FieldAttributes`</ph>, 클래스를 먼저 가져온 <ph id="ph2">`Type`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>, 가져오기는 <ph id="ph2">`FieldInfo`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`Attributes`</ph>.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>, 가져오기는 <ph id="ph2">`Attributes`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>The enumerated value is a number representing the bitwise OR of the attributes implemented on the field.</source>
          <target state="translated">열거형된 값은 필드에 구현 된 특성의 비트 OR을 나타내는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>In this example, three fields are built and the <ph id="ph1">`FieldAttributes`</ph> values are displayed.</source>
          <target state="translated">이 예제에서는 세 가지 필드가 만들어지고 및 <ph id="ph1">`FieldAttributes`</ph> 값이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldAttributes">
          <source>A <ph id="ph1">`FieldAttributes`</ph> value can contain more than one attribute, for example, both <ph id="ph2">`Public`</ph> and <ph id="ph3">`Literal`</ph>, as shown in the third field.</source>
          <target state="translated">A <ph id="ph1">`FieldAttributes`</ph> 값 모두 예를 들어 둘 이상의 특성이 포함 될 수 있습니다 <ph id="ph2">`Public`</ph> 및 <ph id="ph3">`Literal`</ph>세 번째 필드에 표시 된 것 처럼 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Assembly">
          <source>Specifies that the field is accessible throughout the assembly.</source>
          <target state="translated">어셈블리 전체에서 필드에 액세스할 수 있도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.FamANDAssem">
          <source>Specifies that the field is accessible only by subtypes in this assembly.</source>
          <target state="translated">이 어셈블리의 하위 형식에서만 필드에 액세스할 수 있도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Family">
          <source>Specifies that the field is accessible only by type and subtypes.</source>
          <target state="translated">형식 및 하위 형식에서만 필드에 액세스할 수 있도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.FamORAssem">
          <source>Specifies that the field is accessible by subtypes anywhere, as well as throughout this assembly.</source>
          <target state="translated">이 어셈블리 전체는 물론 모든 위치의 하위 형식에서 필드에 액세스할 수 있도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.FieldAccessMask">
          <source>Specifies the access level of a given field.</source>
          <target state="translated">지정된 필드의 액세스 수준을 지정합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasDefault">
          <source>Specifies that the field has a default value.</source>
          <target state="translated">필드가 기본값을 갖도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasFieldMarshal">
          <source>Specifies that the field has marshaling information.</source>
          <target state="translated">필드에 마샬링 정보가 포함되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasFieldRVA">
          <source>Specifies that the field has a relative virtual address (RVA).</source>
          <target state="translated">필드에 RVA(상대 가상 주소)가 포함되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.HasFieldRVA">
          <source>The RVA is the location of the method body in the current image, as an address relative to the start of the image file in which it is located.</source>
          <target state="translated">RVA는 자신이 위치한 이미지 파일의 시작에 상대적인 주소로 현재 이미지에 있는 메서드 본문의 위치입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.InitOnly">
          <source>Specifies that the field is initialized only, and can be set only in the body of a constructor.</source>
          <target state="translated">필드가 초기화만 되었으며 생성자 본문에서만 설정할 수 있음을 지정합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Literal">
          <source>Specifies that the field's value is a compile-time (static or early bound) constant.</source>
          <target state="translated">필드의 값이 정적 또는 초기 바인딩된 컴파일 타임 상수가 되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Literal">
          <source>Any attempt to set it throws a <ph id="ph1">&lt;see cref="T:System.FieldAccessException" /&gt;</ph>.</source>
          <target state="translated">설정을 시도하면 <ph id="ph1">&lt;see cref="T:System.FieldAccessException" /&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.NotSerialized">
          <source>Specifies that the field does not have to be serialized when the type is remoted.</source>
          <target state="translated">원격 형식일 때 필드를 serialize하지 않도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.PinvokeImpl">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하기 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Private">
          <source>Specifies that the field is accessible only by the parent type.</source>
          <target state="translated">부모 형식에서만 필드에 액세스할 수 있도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.PrivateScope">
          <source>Specifies that the field cannot be referenced.</source>
          <target state="translated">필드를 참조할 수 없도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Public">
          <source>Specifies that the field is accessible by any member for whom this scope is visible.</source>
          <target state="translated">이 범위를 볼 수 있는 모든 멤버가 필드에 액세스할 수 있도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.ReservedMask">
          <source>Reserved.</source>
          <target state="translated">예약됨.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.RTSpecialName">
          <source>Specifies that the common language runtime (metadata internal APIs) should check the name encoding.</source>
          <target state="translated">공용 언어 런타임(메타데이터 내부 API)에서 이름 인코딩을 확인하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.SpecialName">
          <source>Specifies a special method, with the name describing how the method is special.</source>
          <target state="translated">메서드의 특수성을 설명하는 이름을 가진 특수 메서드를 지정합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.Reflection.FieldAttributes.Static">
          <source>Specifies that the field represents the defined type, or else it is per-instance.</source>
          <target state="translated">필드가 정의된 형식을 나타내도록 지정합니다. 그렇지 않으면 인스턴스 단위가 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>