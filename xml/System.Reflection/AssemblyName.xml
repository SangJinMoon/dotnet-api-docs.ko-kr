<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AssemblyName.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55e8d575c8f6baf9dd58560db2cd8c587433f5908.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e8d575c8f6baf9dd58560db2cd8c587433f5908</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Describes an assembly's unique identity in full.</source>
          <target state="translated">어셈블리의 고유 ID에 대해 전부 설명합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object contains information about an assembly, which you can use to bind to that assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 어셈블리를 사용 하 여 해당 어셈블리에 바인딩할 수에 대 한 정보를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly's identity consists of the following:</source>
          <target state="translated">어셈블리의 id는 다음과 같이 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Simple name.</source>
          <target state="translated">단순한 이름입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Version number.</source>
          <target state="translated">버전 번호입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Cryptographic key pair.</source>
          <target state="translated">암호화 키 쌍입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Supported culture.</source>
          <target state="translated">지원 되는 문화권입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The simple name is typically the file name for the manifest file without its extension.</source>
          <target state="translated">단순한 이름은 일반적으로 파일 이름 확장명이 없는 매니페스트 파일에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The key pair includes a public and private key, used to create strong-name signatures for assemblies.</source>
          <target state="translated">공용 및 개인 키를 포함 하는 키 쌍을 어셈블리에 대 한 강력한 이름 서명을 만드는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</source>
          <target state="translated">공용 언어 런타임을 지 원하는 모든 컴파일러는 중첩 된 클래스의 단순한 이름을 내보내고 리플렉션에서 다음 규칙에 따라 쿼리 시 형식 표시 이름을 생성 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Delimiter</source>
          <target state="translated">구분 기호</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Meaning</source>
          <target state="translated">의미</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Backslash (<ph id="ph1">\\</ph>)</source>
          <target state="translated">백슬래시(<ph id="ph1">\\</ph>)</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Escape character.</source>
          <target state="translated">이스케이프 문자입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Comma (,)</source>
          <target state="translated">쉼표 ()</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes the assembly name.</source>
          <target state="translated">어셈블리 이름을 앞에 옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Plus sign (+)</source>
          <target state="translated">더하기 기호 (+)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Precedes a nested class.</source>
          <target state="translated">중첩된 된 클래스 앞에 옵니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For example, the fully qualified name for a class might look like this:</source>
          <target state="translated">예를 들어 클래스에 대 한 정규화 된 이름을 다음과 같이 표시 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>ContainingClass+NestedClass,MyAssembly</source>
          <target state="translated">ContainingClass+NestedClass,MyAssembly</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A "++" becomes "<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+", and a "<ph id="ph4">\\</ph>" becomes "<ph id="ph5">\\</ph><ph id="ph6">\\</ph>".</source>
          <target state="translated">A "+ +"가 "<ph id="ph1">\\</ph><ph id="ph2">+</ph><ph id="ph3">\\</ph>+", 및 "<ph id="ph4">\\</ph>"가 "<ph id="ph5">\\</ph><ph id="ph6">\\</ph>"입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This qualified name can be persisted and later used to load the <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated">이 정규화 된 이름은 유지 되었다가 나중에 로드 하는 데 사용 된 <ph id="ph1">&lt;xref:System.Type&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To search for and load a <ph id="ph1">&lt;xref:System.Type&gt;</ph>, use <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> either with the type name only or with the assembly qualified type name.</source>
          <target state="translated">찾아 로드 하는 <ph id="ph1">&lt;xref:System.Type&gt;</ph>를 사용 하 여 <ph id="ph2">&lt;xref:System.Type.GetType%2A&gt;</ph> 만 또는 어셈블리의 정규화 된 형식 이름으로 이름 형식을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the type name only will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in the caller's assembly and then in the System assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> 형식으로 이름을 찾을 것은 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 호출자의 어셈블리에서 찾은 다음 시스템 어셈블리에서 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> with the assembly qualified type name will look for the <ph id="ph2">&lt;xref:System.Type&gt;</ph> in any assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Type.GetType%2A&gt;</ph> 어셈블리와 정규화 된 형식 이름에 대 한 표시 됩니다는 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 모든 어셈블리에 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>A fully specified <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> must have the name, culture, public key or public key token, major version, minor version, build number, and revision number parameters.</source>
          <target state="translated">완전히 지정 된 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 이름, culture, 공개 키 또는 공개 키 토큰 주 버전, 부 버전, 빌드 번호 및 수정 번호 매개 변수가 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The last four are packaged in the <ph id="ph1">&lt;xref:System.Version&gt;</ph> type.</source>
          <target state="translated">마지막 4 개는 패키지에 포함 되는 <ph id="ph1">&lt;xref:System.Version&gt;</ph> 유형입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a simple name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>.</source>
          <target state="translated">단순한 이름을 만들려면 만들기는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 기본 생성자를 사용 하 여 개체를 설정의 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">다른 속성은 선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To create a full strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>.</source>
          <target state="translated">전체 이름을 만들려면 만들기는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 기본 생성자를 사용 하 여 개체를 설정의 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The other properties are optional.</source>
          <target state="translated">다른 속성은 선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Use <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> to set the public key and the strong name.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> 공개 키와 강력한 이름을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The strong name signing always uses the <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> hash algorithm.</source>
          <target state="translated">강력한 이름으로 사용 하 여 항상 서명는 <ph id="ph1">&lt;xref:System.Security.Cryptography.SHA1&gt;</ph> 해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>To ensure that the names are constructed correctly, use the following properties:</source>
          <target state="translated">이름을 제대로 생성을 보장 하려면 다음과 같은 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>You can also get the name by using the <ph id="ph1">`/l`</ph> option with the <bpt id="p1">[</bpt>Gacutil.exe (Global Assembly Cache Tool)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></source>
          <target state="translated">사용 하 여 이름을 가져올 수도 있습니다는 <ph id="ph1">`/l`</ph> 옵션과 함께 <bpt id="p1">[</bpt>Gacutil.exe (전역 어셈블리 캐시 도구)<ept id="p1">](~/docs/framework/tools/gacutil-exe-gac-tool.md)</ept></target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>For a partially specified strong name, create an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object using the default constructor and set the name and public key.</source>
          <target state="translated">부분적으로 지정 된 강력한 이름에 대 한 만들기는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 기본 생성자를 사용 하 여 개체를 이름 및 공개 키를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>An assembly created using such an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> can be signed later using the Assembly Linker (Al.exe).</source>
          <target state="translated">예를 사용 하 여 만든 어셈블리는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 어셈블리 링커 (Al.exe)를 사용 하 여 나중에 서명할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>It is possible to specify a public key and a <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> with inconsistent values.</source>
          <target state="translated">공개 키를 지정 수와 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> 값이 일치 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This can be useful in developer scenarios.</source>
          <target state="translated">이 개발자 시나리오에서 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>In this case, the public key retrieved with <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> specifies the correct public key, while the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> specifies the public and private keys used during development.</source>
          <target state="translated">공개 키와 함께 검색 되는 경우 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> 올바른 공개 키, while 지정는 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> 개발 하는 동안 사용 되는 공용 및 개인 키를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When the runtime detects a mismatch between the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> and the public key, it looks up in the registry the correct key that matches the public key.</source>
          <target state="translated">런타임에서 사이 불일치가 감지 하는 경우는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> 공개 키를 조회 레지스트리에 공개 키와 일치 하는 올바른 키입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The format of the display name of an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is a comma-delimited Unicode string that begins with the name, as follows:</source>
          <target state="translated">표시 이름 형식은 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 다음과 같은 이름으로 시작 하는 쉼표로 구분 된 유니코드 문자열:</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Name`</ph> is the textual name of the assembly.</source>
          <target state="translated"><ph id="ph1">`Name`</ph> 어셈블리의 텍스트 이름이입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`CultureInfo`</ph> is the RFC1766-format-defined culture.</source>
          <target state="translated"><ph id="ph1">`CultureInfo`</ph> 정의 된 형식 RFC1766 문화권이입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`Major`</ph>, <ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, and <ph id="ph4">`Revision`</ph> are the major version, minor version, build number, and revision number of the assembly.</source>
          <target state="translated"><ph id="ph1">`Major`</ph><ph id="ph2">`Minor`</ph>, <ph id="ph3">`Build`</ph>, 및 <ph id="ph4">`Revision`</ph> 은 주 버전, 부 버전, 빌드 번호 및 어셈블리의 버전 번호입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`StrongName`</ph> is the hexadecimal-encoded low-order 64 bits of the hash value of the public key generated using the SHA-1 hashing algorithm and the public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`StrongName`</ph> 16 진수 인코딩 하위 64 비트 sha-1 해시 알고리즘을 사용 하 여 생성 한 공개 키와 지정 된 공개 키의 해시 값은 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source><ph id="ph1">`PublicKeyToken`</ph> is the hexadecimal-encoded public key specified by <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`PublicKeyToken`</ph> 로 지정 된 16 진수로 인코딩된 공개 키 이며 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Hexadecimal encoding is defined as the conversion of each byte of a binary object to two hexadecimal characters, progressing from least to most significant byte.</source>
          <target state="translated">부터 진행 하는 두 개의 16 진수 문자를 이진 개체의 각 바이트의 변환으로 정의 된 16 진수 인코딩 가장 중요 한 바이트를 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additional display values will be added as deemed necessary.</source>
          <target state="translated">필요에 따라 추가 표시 값이 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>If the full public key is known, then PublicKey may be substituted for StrongName.</source>
          <target state="translated">전체 공개 키를 알 경우 PublicKey는 강력한 이름에 대 한 대체 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Also note that except for <ph id="ph1">`Name`</ph>, which must come first, the lexical order of parameters is unimportant.</source>
          <target state="translated">제외 하 고는 <ph id="ph1">`Name`</ph>, 먼저에 야 하는, 어휘 매개 변수 순서가 중요 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>However, any parameter (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> or <ph id="ph4">`PublicKey`</ph>) not specifically set is considered to be omitted, and the <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> is then considered partial.</source>
          <target state="translated">그러나 모든 매개 변수 (<ph id="ph1">`Version`</ph>, <ph id="ph2">`Culture`</ph>, <ph id="ph3">`StrongName`</ph> 또는 <ph id="ph4">`PublicKey`</ph>) 명시적으로 집합은 생략 된 것으로 간주 및 <ph id="ph5">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 부분 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When specifying partial information, Name parameters must be specified in the order described above.</source>
          <target state="translated">부분 정보를 지정할 때 위에서 설명한 순서 대로 이름 매개 변수를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>When supplying a display name, the convention <ph id="ph1">`StrongName =null`</ph> or <ph id="ph2">`PublicKey= null`</ph> indicates that binding and matching against a simply named assembly is required.</source>
          <target state="translated">규칙에 따라 표시 이름을 제공할 때 <ph id="ph1">`StrongName =null`</ph> 또는 <ph id="ph2">`PublicKey= null`</ph> 바인딩 및 간단한 이름의 어셈블리에 대해 일치 필요 함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>Additionally, the convention <ph id="ph1">`Culture= ""`</ph> (double quote representing an empty string) indicates matching against the default culture.</source>
          <target state="translated">또한 규칙 <ph id="ph1">`Culture= ""`</ph> (큰따옴표는 빈 문자열을 나타냄) 기본 문화권에 대해 일치를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a simply named assembly with default culture.</source>
          <target state="translated">다음 예제와 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 간단한 이름의 어셈블리의 기본 문화권을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>The following example shows a fully specified reference for a strongly named assembly with culture "en".</source>
          <target state="translated">다음 예제에서는 문화권 "en"을 사용하는 강력한 이름의 어셈블리에 대한 완전히 지정된 참조를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblyName">
          <source>This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</source>
          <target state="translated">이 예제에는 다양 한 리플렉션 클래스를 사용 하 여 어셈블리에 포함 된 메타 데이터를 분석 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblyName">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>The following example creates a dynamic assembly named <ph id="ph1">`MyAssembly.exe`</ph> and saves it to your hard disk.</source>
          <target state="translated">다음 예제에서는 명명 된 동적 어셈블리 <ph id="ph1">`MyAssembly.exe`</ph> 하드 디스크에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor">
          <source>After running the example, you can use the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the assembly metadata.</source>
          <target state="translated">예제를 실행 한 후 사용할 수 있습니다는 <bpt id="p1">[</bpt>Ildasm.exe (IL 디스어셈블러)<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> 어셈블리 메타 데이터를 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The display name of the assembly, as returned by the <ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Reflection.AssemblyName.FullName" /&gt;</ph> 속성에서 반환된 어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> class with the specified display name.</source>
          <target state="translated">지정된 표시 이름을 사용하여 <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The supplied <ph id="ph1">`assemblyName`</ph> is parsed, and the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> are initialized with values from the display name.</source>
          <target state="translated">제공 된 <ph id="ph1">`assemblyName`</ph> 구문 분석 되 면 새 적절 한 필드 및 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 의 표시 이름 값으로 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>This is the recommended way of parsing display names.</source>
          <target state="translated">이것이 표시 이름을 구문 분석할 권장된 방법입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">표시 이름을 구문 분석 하는 사용자 고유의 코드 작성 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The following example creates an instance of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> from a display name.</source>
          <target state="translated">다음 예제에서는의 인스턴스를 만들고 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 보낸 사람 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The individual elements of the display name are output to the console as properties of the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object.</source>
          <target state="translated">개별의 표시 이름 요소가 콘솔에 출력의 속성으로는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph> is a zero length string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyName" /&gt;</ph>이 길이가 0인 문자열인 경우</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>, instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 <bpt id="p2">[</bpt>이식 가능한 클래스 라이브러리<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>에서 대신 기본 클래스 예외 <ph id="ph1">&lt;see cref="T:System.IO.IOException" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.#ctor(System.String)">
          <source>The referenced assembly could not be found, or could not be loaded.</source>
          <target state="translated">참조된 어셈블리를 찾을 수 없거나 로드할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>Makes a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> 개체의 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.Clone">
          <source>An object that is a copy of this <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> 개체의 복사본인 개체입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.Clone">
          <source>A new object is created, identical to the original.</source>
          <target state="translated">새 개체가 만들어진, 원본과 동일 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Gets or sets the location of the assembly as a URL.</source>
          <target state="translated">어셈블리의 위치를 URL로 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>A string that is the URL location of the assembly.</source>
          <target state="translated">어셈블리의 URL 위치인 문자열입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">어셈블리를 로드할 때는이 값도 얻을 수 있습니다를 사용 하 여 <ph id="ph1">&lt;xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>If the assembly was loaded as a byte array, this property returns the location of the caller of the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> method overload, not the location of the loaded assembly.</source>
          <target state="translated">이 속성의 호출자의 위치를 반환 된 어셈블리 바이트 배열로 로드 되었으면는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%29&gt;</ph> 메서드 오버 로드, 로드 된 어셈블리의 위치에 없습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Do not use an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> with only the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property set.</source>
          <target state="translated">사용 하지 않는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 으로 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> 속성 집합입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> 요소를 모두 제공 하지 않는 어셈블리 id는 (예: 이름 또는 버전)의 로드가 발생 하지 않습니다 부하 id 별 규칙에 따라에서 예상한 대로 <ph id="ph2">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>Instead, the assembly is loaded using load-from rules.</source>
          <target state="translated">대신, 어셈블리에서 로드 한 규칙을 사용 하 여 로드 됩니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>For information about the disadvantages of using the load-from context, see the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> method overload or <bpt id="p1">[</bpt>Best Practices for Assembly Loading<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.</source>
          <target state="translated">로드 컨텍스트를 사용 하 여의 단점에 대 한 정보를 참조 하십시오.는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드 또는 <bpt id="p1">[</bpt>어셈블리 로드에 대 한 유용한<ept id="p1">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CodeBase">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property is used to specify the directory where the assembly is saved.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> 속성을 사용 하는 디렉터리를 지정 어셈블리가 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>Gets or sets a value that indicates what type of content the assembly contains.</source>
          <target state="translated">어셈블리가 포함하는 콘텐츠의 형식을 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ContentType">
          <source>A value that indicates what type of content the assembly contains.</source>
          <target state="translated">어셈블리가 포함하는 콘텐츠의 형식을 나타내는 값입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>Gets or sets the culture supported by the assembly.</source>
          <target state="translated">어셈블리에서 지원하는 문화권을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>An object that represents the culture supported by the assembly.</source>
          <target state="translated">어셈블리에서 지원하는 문화권을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureInfo">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> property is used to specify the culture, which is part of the assembly's display name.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph> 속성은 어셈블리의 표시 이름에 참가 하는 문화권을 지정 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>Gets or sets the name of the culture associated with the assembly.</source>
          <target state="translated">어셈블리와 연결된 문화권의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.CultureName">
          <source>The culture name.</source>
          <target state="translated">문화권 이름입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>Gets the URI, including escape characters, that represents the codebase.</source>
          <target state="translated">코드베이스를 나타내는 URI를 가져옵니다(이스케이프 문자 포함).</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.EscapedCodeBase">
          <source>A URI with escape characters.</source>
          <target state="translated">이스케이프 문자를 포함하는 URI입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Flags">
          <source>Gets or sets the attributes of the assembly.</source>
          <target state="translated">어셈블리의 특성을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>A value that represents the attributes of the assembly.</source>
          <target state="translated">어셈블리의 특성을 나타내는 값입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Flags">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> property is used to specify that the assembly has a public key.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Flags%2A&gt;</ph> 속성은 어셈블리에 공개 키 포함을 지정 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Gets the full name of the assembly, also known as the display name.</source>
          <target state="translated">표시 이름이라고도 하는 어셈블리의 전체 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>A string that is the full name of the assembly, also known as the display name.</source>
          <target state="translated">표시 이름이라고도 하는 어셈블리의 전체 이름인 문자열입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The display name typically consists of the simple name, version number, supported culture, and public key.</source>
          <target state="translated">표시 이름은 단순한 이름, 버전 번호, 지원 되는 문화권 및 공개 키의 일반적으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>For example:</source>
          <target state="translated">예:</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Writing your own code to parse display names is not recommended.</source>
          <target state="translated">표시 이름을 구문 분석 하는 사용자 고유의 코드 작성 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>Instead, pass the display name to the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> constructor, which parses it and populates the appropriate fields of the new <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.</source>
          <target state="translated">대신, 표시 이름에 전달 된 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> 생성자를 구문 분석 하 고 새의 해당 필드를 채웁니다 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When an assembly is loaded, this value can also be obtained using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">어셈블리를 로드할 때는이 값도 얻을 수 있습니다를 사용 하 여 <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>When the assembly is created, the code example sets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> properties, which together comprise an assembly's full name, or display name.</source>
          <target state="translated">코드 예제에서는 설정 된 어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> 속성을 함께 구성 어셈블리의 전체 이름 또는 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.FullName">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> property is then used to retrieve the display name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.FullName%2A&gt;</ph> 속성은 다음 표시 이름을 검색 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The path for the assembly whose <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> is to be returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>이 반환될 어셈블리의 경로입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph> for a given file.</source>
          <target state="translated">지정된 파일의 <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblyName" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An object that represents the given assembly file.</source>
          <target state="translated">제공된 어셈블리 파일을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This will only work if the file contains an assembly manifest.</source>
          <target state="translated">이 기능은 파일에 어셈블리 매니페스트가 포함 된 경우에 작동 됩니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>This method causes the file to be opened and closed, but the assembly is not added to this domain.</source>
          <target state="translated">이 메서드를 사용 하면 파일을 열고, 닫을 수 있지만이 도메인에 어셈블리가 추가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The following example gets the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for an assembly on disk.</source>
          <target state="translated">다음 예제에서는 가져옵니다는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 디스크에 있는 어셈블리에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>It will not run unless you replace the string "MyAssembly.exe" with the file name of an assembly (including the path, if necessary) on your hard disk.</source>
          <target state="translated">실행 되지 않습니다 "MyAssembly.exe" 문자열을 대체 하지 않는 한 (필요한 경우의 경로 포함) 어셈블리의 파일 이름으로 하드 디스크에 있습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Alternatively, you can compile this example as "MyAssembly.exe".</source>
          <target state="translated">또는 "MyAssembly.exe"으로이 예제를 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is invalid, such as an assembly with an invalid culture.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph>이 잘못된 경우(예: 잘못된 문화권을 사용하는 어셈블리)</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph>가 없는 경우</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>The caller does not have path discovery permission.</source>
          <target state="translated">호출자에게 경로 검색 권한이 없습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph> is not a valid assembly.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="assemblyFile" /&gt;</ph>는 유효한 어셈블리가 아닙니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>An assembly or module was loaded twice with two different sets of evidence.</source>
          <target state="translated">어셈블리 또는 모듈이 서로 다른 두 증명 정보 집합으로 두 번 로드되었습니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>for access to information in the path.</source>
          <target state="translated">경로에 대 한 정보에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object to be populated with serialization information.</source>
          <target state="translated">serialization 정보로 채울 개체입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination context of the serialization.</source>
          <target state="translated">serialization의 대상 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Gets serialization information with all the data needed to recreate an instance of this <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see langword="AssemblyName" /&gt;</ph>의 인스턴스를 다시 만드는 데 필요한 모든 데이터가 포함된 serialization 정보를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>Gets the public key of the assembly.</source>
          <target state="translated">어셈블리의 공개 키를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A byte array that contains the public key of the assembly.</source>
          <target state="translated">어셈블리의 공개 키가 포함된 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> 메서드는 어셈블리 공개 키를 지정 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> 메서드는 다음 콘솔에 표시 되는 공개 키를 검색 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKey">
          <source>A public key was provided (for example, by using the <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph> method), but no public key token was provided.</source>
          <target state="translated">공개 키가 제공되지만(예: <ph id="ph1">&lt;see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /&gt;</ph> 메서드 사용) 공개 키 토큰은 제공되지 않습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">응용 프로그램이나 어셈블리 서명에 사용된 공개 키 SHA-1 해시의 마지막 8자인 공개 키 토큰을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>A byte array that contains the public key token.</source>
          <target state="translated">공개 키 토큰이 들어 있는 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> 메서드는 어셈블리의 공개 키 토큰을 설정 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.GetPublicKeyToken">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> 메서드는 다음 콘솔에 표시 되는 공개 키 토큰을 검색 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Gets or sets the hash algorithm used by the assembly manifest.</source>
          <target state="translated">어셈블리 매니페스트에 사용되는 해시 알고리즘을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The hash algorithm used by the assembly manifest.</source>
          <target state="translated">어셈블리 매니페스트에 사용되는 해시 알고리즘입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property of an <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object that is returned by the <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> method is <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> enumeration.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> 속성은 <ph id="ph3">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 에서 반환 되는 개체는 <ph id="ph4">&lt;xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType&gt;</ph> 메서드는 <ph id="ph5">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType&gt;</ph> 참조 된 어셈블리에 대 한 해시 알고리즘이 없는 또는 경우 참조 된 해시 알고리즘 어셈블리를 식별 하지는 <ph id="ph6">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>In previous versions of the .NET Framework, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property returned <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> in this situation.</source>
          <target state="translated">이전 버전의.NET Framework에는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> 반환 된 속성 <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType&gt;</ph> 이 상황에서.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.HashAlgorithm">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property is used to set the hash algorithm for the assembly manifest.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> 속성은 어셈블리 매니페스트에 대 한 해시 알고리즘을 설정 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>Gets or sets the public and private cryptographic key pair that is used to create a strong name signature for the assembly.</source>
          <target state="translated">어셈블리에 대한 강력한 이름 서명을 만드는 데 사용되는 공개 및 개인 암호화 키 쌍을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The public and private cryptographic key pair to be used to create a strong name for the assembly.</source>
          <target state="translated">어셈블리에 대한 강력한 이름을 만드는 데 사용할 공개 및 개인 암호화 키 쌍입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the runtime loads an assembly, it does not set the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property.</source>
          <target state="translated">설정 하지 않으면 런타임에서 어셈블리를 로드 하는 경우는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The getter for the property is only useful if the user set the property before using the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object to create a dynamic assembly, and subsequently wants to retrieve the key pair.</source>
          <target state="translated">속성 getter에만 유용 사용 하기 전에 속성을 설정 하는 사용자는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 동적 어셈블리를 만드는 개체와 키 쌍을 검색 하려는 합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> property is used to set the assembly's public and private cryptographic keys.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.KeyPair%2A&gt;</ph> 속성은 어셈블리의 공개 및 개인 암호화 키를 설정 하는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.KeyPair">
          <source>.</source>
          <target state="translated">이어야 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>Gets or sets the simple name of the assembly.</source>
          <target state="translated">어셈블리의 단순한 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Name">
          <source>This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</source>
          <target state="translated">어셈블리의 단순한 이름은 대개 어셈블리의 매니페스트 파일 이름에서 확장명을 제외한 것입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The simple name of the assembly.</source>
          <target state="translated">어셈블리의 단순한 이름입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The manifest file is the file that contains the assembly manifest.</source>
          <target state="translated">매니페스트 파일은 어셈블리 매니페스트가 포함 된 파일입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>For example, the simple name of a single-file assembly named "MyAssembly.dll" is "MyAssembly".</source>
          <target state="translated">예를 들어 "MyAssembly.dll" 라는 단일 파일 어셈블리의 단순한 이름을 "MyAssembly" 됩니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Name">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> property is used to set the simple name of the dynamic assembly.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Name%2A&gt;</ph> 속성을 사용 하는 동적 어셈블리의 단순한 이름을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>The source of the deserialization event.</source>
          <target state="translated">deserialization 이벤트의 소스입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and is called back by the deserialization event when deserialization is complete.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> 인터페이스를 구현하고 역직렬화가 완료되면 역직렬화 이벤트에 의해 콜백됩니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">실행 파일의 대상이 되는 플랫폼의 프로세서 및 워드 당 비트 수를 식별하는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.</source>
          <target state="translated">실행 파일의 대상이 되는 플랫폼의 프로세서 및 워드 당 비트 수를 식별하는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.ProcessorArchitecture">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, this property always returns <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> for reference assemblies.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>,이 속성은 항상 반환 <ph id="ph2">&lt;xref:System.Reflection.ProcessorArchitecture.None?displayProperty=nameWithType&gt;</ph> 참조 어셈블리에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The reference assembly name.</source>
          <target state="translated">참조 어셈블리 이름입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The assembly name that is compared to the reference assembly.</source>
          <target state="translated">참조 어셈블리와 비교할 어셈블리 이름입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>Returns a value indicating whether two assembly names are the same.</source>
          <target state="translated">두 어셈블리 이름이 같은지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison is based on the simple assembly names.</source>
          <target state="translated">비교는 단순 어셈블리 이름을 기반으로 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the simple assembly names are the same; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">단순 어셈블리 이름이 동일하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>The comparison depends only on the simple assembly name.</source>
          <target state="translated">비교는 단순 어셈블리 이름에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
          <source>It ignores version, culture, and public key token.</source>
          <target state="translated">버전, culture 및 공개 키 토큰을 무시 합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>A byte array containing the public key of the assembly.</source>
          <target state="translated">어셈블리의 공개 키가 포함된 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Sets the public key identifying the assembly.</source>
          <target state="translated">어셈블리를 식별하는 공개 키를 설정합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>You must also use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">사용 해야는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> 메서드를 공개 키 토큰을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 경우 throw 되는 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method is used to give the assembly a public key.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> 메서드는 어셈블리 공개 키를 지정 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is then used to retrieve the public key, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> 메서드는 다음 콘솔에 표시 되는 공개 키를 검색 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>A byte array containing the public key token of the assembly.</source>
          <target state="translated">어셈블리의 공개 키 토큰이 포함된 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</source>
          <target state="translated">응용 프로그램이나 어셈블리 서명에 사용된 공개 키 SHA-1 해시의 마지막 8바이트인 공개 키 토큰을 설정합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When you set the public key by calling the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> method, you must also use the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method to provide a public key token.</source>
          <target state="translated">호출 하 여 공개 키를 설정 하면는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKey%2A&gt;</ph> 메서드를 사용 해야는 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> 메서드를 공개 키 토큰을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> method is called.</source>
          <target state="translated">그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 경우 throw 되는 <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.GetPublicKey%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> method is used to set the assembly's public key token.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A&gt;</ph> 메서드는 어셈블리의 공개 키 토큰을 설정 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> method is then used to retrieve the public key token, which is displayed to the console.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A&gt;</ph> 메서드는 다음 콘솔에 표시 되는 공개 키 토큰을 검색 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하기 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL이어야 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">매핑할 전달된 이름의 배열입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">매핑할 이름의 수입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">이름을 해석할 로캘 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array that receives the IDs corresponding to the names.</source>
          <target state="translated">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">반환할 형식 정보입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">형식 정보의 로캘 식별자입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">요청된 형식 정보 개체에 대한 포인터를 받습니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">멤버를 식별합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하기 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL이어야 합니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">인수를 해석할 로캘 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">호출의 컨텍스트를 설명하는 플래그입니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">결과를 저장할 위치에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">예외 정보가 포함된 구조체에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">오류가 있는 첫 번째 인수의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::Invoke`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>Returns the full name of the assembly, also known as the display name.</source>
          <target state="translated">표시 이름이라고도 하는 어셈블리의 전체 이름을 반환합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The full name of the assembly, or the class name if the full name cannot be determined.</source>
          <target state="translated">어셈블리의 전체 이름입니다. 어셈블리의 전체 이름을 확인할 수 없는 경우에는 클래스 이름입니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>See the description of <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for the format of the returned string.</source>
          <target state="translated">에 대 한 설명을 참조 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 반환된 된 문자열의 형식에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblyName.ToString">
          <source>The following example gets an <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object for a hypothetical <ph id="ph2">`MyAssembly.exe`</ph> assembly, and then uses the <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> method to retrieve the full assembly name, or display name.</source>
          <target state="translated">다음 예제에서는 가져옵니다는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName&gt;</ph> 가상에 대 한 개체 <ph id="ph2">`MyAssembly.exe`</ph> 어셈블리, 한 다음 사용 하는 <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ToString%2A&gt;</ph> 메서드를 검색 하는 전체 어셈블리 이름 또는 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.Version">
          <source>Gets or sets the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">어셈블리의 주 번호, 부 번호, 빌드 번호 및 수정 번호를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>An object that represents the major, minor, build, and revision numbers of the assembly.</source>
          <target state="translated">어셈블리의 주 번호, 부 번호, 빌드 번호 및 수정 번호를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>All components of the version must be integers greater than or equal to zero.</source>
          <target state="translated">버전의 모든 구성 요소에는 0 보다 크거나 정수 여야 합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>Metadata restricts the major, minor, build, and revision components for an assembly to a maximum value of <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> - 1.</source>
          <target state="translated">메타 데이터 제한 주, 부 버전, 빌드 및 버전 구성 요소 어셈블리의 최대 값 수에 대 한 <ph id="ph1">&lt;xref:System.UInt16.MaxValue?displayProperty=nameWithType&gt;</ph> -1입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>If a component exceeds this value, no error is thrown; however, in a dynamic assembly, that component is zero.</source>
          <target state="translated">구성 요소는이 값을 초과 하는 경우 오류가 throw 되지 않으면 그러나 동적 어셈블리에서 해당 구성 요소는 0입니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>This section contains two examples.</source>
          <target state="translated">이 섹션에는 다음 두 가지 예제가 있습니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The first example shows how to retrieve the version of the currently executing assembly.</source>
          <target state="translated">첫 번째 예에서는 현재 실행 중인 어셈블리의 버전을 검색 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The second example shows how to use the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property to specify the assembly version when you emit a dynamic assembly.</source>
          <target state="translated">두 번째 예에서는 사용 하는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> 속성을 통해 동적 어셈블리를 생성 하는 경우 어셈블리 버전을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example retrieves and displays the version numbers of the currently executing assembly and the assembly that contains the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">다음 예제에서는 검색 하 고 현재 실행 중인 어셈블리 및 포함 된 어셈블리의 버전 번호를 표시는 <ph id="ph1">&lt;xref:System.String&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예제 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>The following example emits a dynamic assembly and saves it to the current directory.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 내보내 현재 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.Version">
          <source>When the assembly is created, the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> property is used to specify version information for the assembly.</source>
          <target state="translated">어셈블리를 만들 때의 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph> 속성을 사용 하는 어셈블리에 대 한 버전 정보를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Gets or sets the information related to the assembly's compatibility with other assemblies.</source>
          <target state="translated">이 어셈블리와 다른 어셈블리의 호환성과 관련된 정보를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>A value that represents information about the assembly's compatibility with other assemblies.</source>
          <target state="translated">이 어셈블리와 다른 어셈블리의 호환성에 대한 정보를 나타내는 값입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> information indicates, for example, that the assembly cannot execute side-by-side with other versions due to conflicts over a device driver.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> 정보를 나타내며, 예를 들어 장치 드라이버를 통해 어셈블리 나란히 충돌로 인해 다른 버전과 함께 실행할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>Currently, <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>, and is not used by the loader.</source>
          <target state="translated">현재 <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.VersionCompatibility%2A&gt;</ph> 항상 반환 <ph id="ph2">&lt;xref:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine?displayProperty=nameWithType&gt;</ph>를 로더에 의해 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblyName.VersionCompatibility">
          <source>This property is reserved for a future feature.</source>
          <target state="translated">이 속성은 이후 기능에 대 한 예약 되어 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>