<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BindingFlags.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac589084f16161d1fd3b1457d1121781a4306af5292.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89084f16161d1fd3b1457d1121781a4306af5292</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.BindingFlags">
          <source>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</source>
          <target state="translated">리플렉션으로 멤버 및 형식에 대한 검색을 수행하는 방법과 바인딩을 제어하는 플래그를 지정합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>These <ph id="ph1">`BindingFlags`</ph> control binding for a great many classes in the <ph id="ph2">`System`</ph>, <ph id="ph3">`System.Reflection`</ph>, and <ph id="ph4">`System.Runtime`</ph> namespaces that invoke, create, get, set, and find members and types.</source>
          <target state="translated">이러한 <ph id="ph1">`BindingFlags`</ph> 많은 클래스에 대 한 바인딩을 제어는 <ph id="ph2">`System`</ph>, <ph id="ph3">`System.Reflection`</ph>, 및 <ph id="ph4">`System.Runtime`</ph> 호출, 만들기, get, set 및 멤버 및 유형이 찾을 네임 스페이스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`BindingFlags`</ph> are used in the following <ph id="ph2">&lt;xref:System.Type&gt;</ph> methods and other places such as <ph id="ph3">&lt;xref:System.Reflection.MethodBase.Invoke%2A?displayProperty=nameWithType&gt;</ph> :</source>
          <target state="translated"><ph id="ph1">`BindingFlags`</ph> 다음에 사용 되 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 메서드 및와 같은 다른 위치 <ph id="ph3">&lt;xref:System.Reflection.MethodBase.Invoke%2A?displayProperty=nameWithType&gt;</ph> :</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`InvokeMember`</ph> and <ph id="ph2">`GetMethod`</ph> are especially important.</source>
          <target state="translated"><ph id="ph1">`InvokeMember`</ph> 및 <ph id="ph2">`GetMethod`</ph> 특히 중요 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>The binding flags can be categorized by how they identify a type member, as listed in the following table.</source>
          <target state="translated">바인딩 플래그는 다음 표에 나열 된 이러한 형식 멤버를 식별 하는 방법으로 분류할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Identified by Accessibility</source>
          <target state="translated">내게 필요한 옵션으로 식별</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Identified by Binding Argument</source>
          <target state="translated">바인딩 인수로 식별</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Identified by Operation</source>
          <target state="translated">작업으로 식별</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>DeclaredOnly</source>
          <target state="translated">DeclaredOnly</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>FlattenHierarchy</source>
          <target state="translated">FlattenHierarchy</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>IgnoreCase</source>
          <target state="translated">IgnoreCase</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>IgnoreReturn</source>
          <target state="translated">IgnoreReturn</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Instance</source>
          <target state="translated">인스턴스</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>NonPublic</source>
          <target state="translated">NonPublic</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Public</source>
          <target state="translated">Public</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Static</source>
          <target state="translated">정적</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>ExactBinding</source>
          <target state="translated">ExactBinding</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>OptionalParamBinding</source>
          <target state="translated">OptionalParamBinding</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>CreateInstance</source>
          <target state="translated">CreateInstance</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>GetField</source>
          <target state="translated">GetField</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>SetField</source>
          <target state="translated">SetField</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>GetProperty</source>
          <target state="translated">GetProperty</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>SetProperty</source>
          <target state="translated">SetProperty</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>InvokeMethod</source>
          <target state="translated">InvokeMethod</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>PutDispProperty</source>
          <target state="translated">PutDispProperty</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>PutRefDispProperty</source>
          <target state="translated">PutRefDispProperty</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>You must specify <ph id="ph1">`Instance`</ph> or <ph id="ph2">`Static`</ph> along with <ph id="ph3">`Public`</ph> or <ph id="ph4">`NonPublic`</ph> or no members will be returned.</source>
          <target state="translated">지정 해야 <ph id="ph1">`Instance`</ph> 또는 <ph id="ph2">`Static`</ph> 와 함께 <ph id="ph3">`Public`</ph> 또는 <ph id="ph4">`NonPublic`</ph> 또는 멤버가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>The following table lists the coercions performed by the default <ph id="ph1">&lt;xref:System.Reflection.Binder.ChangeType%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">다음 표에서 기본적으로 수행 된 변환이 <ph id="ph1">&lt;xref:System.Reflection.Binder.ChangeType%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>This table applies especially to the <ph id="ph1">`ExactBinding`</ph> binding flag.</source>
          <target state="translated">이 테이블에 특히 됩니다는 <ph id="ph1">`ExactBinding`</ph> 바인딩 플래그입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Source Type</source>
          <target state="translated">원본 유형</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Target Type</source>
          <target state="translated">대상 유형</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Any type</source>
          <target state="translated">모든 형식</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Its base type.</source>
          <target state="translated">해당 기본 형식입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Any type</source>
          <target state="translated">모든 형식</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>The interface it implements.</source>
          <target state="translated">구현 하는 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`UInt16`</ph>, <ph id="ph2">`UInt32`</ph>, <ph id="ph3">`Int32`</ph>, <ph id="ph4">`UInt64`</ph>, <ph id="ph5">`Int64`</ph>, <ph id="ph6">`Single`</ph>, <ph id="ph7">`Double`</ph></source>
          <target state="translated"><ph id="ph1">`UInt16`</ph>, <ph id="ph2">`UInt32`</ph>, <ph id="ph3">`Int32`</ph>, <ph id="ph4">`UInt64`</ph>, <ph id="ph5">`Int64`</ph>, <ph id="ph6">`Single`</ph>, <ph id="ph7">`Double`</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`Char`</ph>, <ph id="ph2">`UInt16`</ph>, <ph id="ph3">`Int16`</ph>, <ph id="ph4">`UInt32`</ph>, <ph id="ph5">`Int32`</ph>, <ph id="ph6">`UInt64`</ph>, <ph id="ph7">`Int64`</ph>, <ph id="ph8">`Single`</ph>, <ph id="ph9">`Double`</ph></source>
          <target state="translated"><ph id="ph1">`Char`</ph>, <ph id="ph2">`UInt16`</ph>, <ph id="ph3">`Int16`</ph>, <ph id="ph4">`UInt32`</ph>, <ph id="ph5">`Int32`</ph>, <ph id="ph6">`UInt64`</ph>, <ph id="ph7">`Int64`</ph>, <ph id="ph8">`Single`</ph>, <ph id="ph9">`Double`</ph></target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`Int16`</ph>, <ph id="ph2">`Int32`</ph>, <ph id="ph3">`Int64`</ph>, <ph id="ph4">`Single`</ph>, <ph id="ph5">`Double`</ph></source>
          <target state="translated"><ph id="ph1">`Int16`</ph>, <ph id="ph2">`Int32`</ph>, <ph id="ph3">`Int64`</ph>, <ph id="ph4">`Single`</ph>, <ph id="ph5">`Double`</ph></target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`UInt32`</ph>, <ph id="ph2">`Int32`</ph>, <ph id="ph3">`UInt64`</ph>, <ph id="ph4">`Int64`</ph>, <ph id="ph5">`Single`</ph>, <ph id="ph6">`Double`</ph></source>
          <target state="translated"><ph id="ph1">`UInt32`</ph>, <ph id="ph2">`Int32`</ph>, <ph id="ph3">`UInt64`</ph>, <ph id="ph4">`Int64`</ph>, <ph id="ph5">`Single`</ph>, <ph id="ph6">`Double`</ph></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`Int32`</ph>, <ph id="ph2">`Int64`</ph>, <ph id="ph3">`Single`</ph>, <ph id="ph4">`Double`</ph></source>
          <target state="translated"><ph id="ph1">`Int32`</ph>, <ph id="ph2">`Int64`</ph>, <ph id="ph3">`Single`</ph>, <ph id="ph4">`Double`</ph></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`UInt64`</ph>, <ph id="ph2">`Int64`</ph>, <ph id="ph3">`Single`</ph>, <ph id="ph4">`Double`</ph></source>
          <target state="translated"><ph id="ph1">`UInt64`</ph>, <ph id="ph2">`Int64`</ph>, <ph id="ph3">`Single`</ph>, <ph id="ph4">`Double`</ph></target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`Int64`</ph>, <ph id="ph2">`Single`</ph>, <ph id="ph3">`Double`</ph></source>
          <target state="translated"><ph id="ph1">`Int64`</ph>, <ph id="ph2">`Single`</ph>, <ph id="ph3">`Double`</ph></target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`Single`</ph>, <ph id="ph2">`Double`</ph></source>
          <target state="translated"><ph id="ph1">`Single`</ph>, <ph id="ph2">`Double`</ph></target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source><ph id="ph1">`Single`</ph>, <ph id="ph2">`Double`</ph></source>
          <target state="translated"><ph id="ph1">`Single`</ph>, <ph id="ph2">`Double`</ph></target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>Non-reference</source>
          <target state="translated">비참조 형식</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>By-reference.</source>
          <target state="translated">참조로 전달 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.BindingFlags">
          <source>The following example demonstrates many of the binding flags.</source>
          <target state="translated">다음 예제에서는 다양 한 바인딩 플래그를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.CreateInstance">
          <source>Specifies that reflection should create an instance of the specified type.</source>
          <target state="translated">리플렉션에서 지정된 형식의 인스턴스를 만들도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.CreateInstance">
          <source>Calls the constructor that matches the given arguments.</source>
          <target state="translated">지정된 인수와 일치하는 생성자를 호출합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.CreateInstance">
          <source>The supplied member name is ignored.</source>
          <target state="translated">지정된 멤버 이름은 무시됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.CreateInstance">
          <source>If the type of lookup is not specified, (Instance | Public) will apply.</source>
          <target state="translated">조회 형식을 지정하지 않으면 (인스턴스 | 공용)이 적용됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.CreateInstance">
          <source>It is not possible to call a type initializer.</source>
          <target state="translated">형식 이니셜라이저를 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.CreateInstance">
          <source>This flag is passed to an <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> method to invoke a constructor.</source>
          <target state="translated">이 플래그는 생성자를 호출하기 위해 <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> 메서드에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.DeclaredOnly">
          <source>Specifies that only members declared at the level of the supplied type's hierarchy should be considered.</source>
          <target state="translated">지정된 형식의 계층 구조 수준에서 선언된 멤버만 고려하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.DeclaredOnly">
          <source>Inherited members are not considered.</source>
          <target state="translated">상속된 멤버는 고려되지 않습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.Default">
          <source>Specifies that no binding flags are defined.</source>
          <target state="translated">바인딩 플래그가 정의되지 않도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters.</source>
          <target state="translated">지정된 인수의 형식이 해당 정식 매개 변수의 형식과 정확히 일치하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>Reflection throws an exception if the caller supplies a non-null <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> object, since that implies that the caller is supplying <ph id="ph2">&lt;see langword="BindToXXX" /&gt;</ph> implementations that will pick the appropriate method.</source>
          <target state="translated">호출자가 null이 아닌 <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> 개체를 제공하는 경우 호출자가 적절한 메서드를 선택하는 <ph id="ph2">&lt;see langword="BindToXXX" /&gt;</ph> 구현을 제공하는 것이므로 리플렉션에서 예외가 발생합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>Reflection models the accessibility rules of the common type system.</source>
          <target state="translated">리플렉션 공용 형식 시스템의 액세스 가능성 규칙을 모델링합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</source>
          <target state="translated">예를 들어 호출자에 게 동일한 어셈블리에 포함 된 경우 호출자에 게 필요는 없습니다 특별 한 권한이 내부 멤버에 대 한.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>Otherwise, the caller needs <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.</source>
          <target state="translated">그렇지 않은 경우 호출자가 <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>This is consistent with lookup of members that are protected, private, and so on.</source>
          <target state="translated">이것은 보호 되는 멤버 조회 일치, private, 및 등입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>The general principle is that <ph id="ph1">&lt;xref:System.Reflection.Binder.ChangeType%2A&gt;</ph> should perform only widening coercions, which never lose data.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Reflection.Binder.ChangeType%2A&gt;</ph> 없는 데이터 손실이 없는 확장을 수행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>An example of a widening coercion is coercing a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</source>
          <target state="translated">확장 강제 변환의 예로 64 비트 부호 있는 정수 값으로 사용 되는 32 비트 부호 있는 정수 값 강제 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>This is distinguished from a narrowing coercion, which may lose data.</source>
          <target state="translated">이 데이터가 손실 될 수 있는 축소 변환에서 구분 됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>An example of a narrowing coercion is coercing a 64-bit signed integer to a 32-bit signed integer.</source>
          <target state="translated">축소 변환의 예로 64 비트 부호 있는 정수는 32 비트 부호 있는 정수를 강제 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.ExactBinding">
          <source>The default binder ignores this flag, while custom binders can implement the semantics of this flag.</source>
          <target state="translated">기본 바인더 사용자 지정 바인더가이 플래그의 의미를 구현할 수 있습니다 하는 동안이 플래그를 무시 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.FlattenHierarchy">
          <source>Specifies that public and protected static members up the hierarchy should be returned.</source>
          <target state="translated">계층 구조에서 위에 있는 public 및 protected 정적 멤버를 반환하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.FlattenHierarchy">
          <source>Private static members in inherited classes are not returned.</source>
          <target state="translated">상속된 클래스의 전용 정적 멤버는 반환되지 않습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.FlattenHierarchy">
          <source>Static members include fields, methods, events, and properties.</source>
          <target state="translated">정적 멤버에는 필드, 메서드, 이벤트 및 속성이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.FlattenHierarchy">
          <source>Nested types are not returned.</source>
          <target state="translated">중첩 형식은 반환되지 않습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.GetField">
          <source>Specifies that the value of the specified field should be returned.</source>
          <target state="translated">지정된 필드의 값을 반환하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.GetField">
          <source>This flag is passed to an <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> method to get a field value.</source>
          <target state="translated">이 플래그는 필드 값을 가져오기 위해 <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> 메서드에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.GetProperty">
          <source>Specifies that the value of the specified property should be returned.</source>
          <target state="translated">지정된 속성의 값을 반환하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.GetProperty">
          <source>This flag is passed to an <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> method to invoke a property getter.</source>
          <target state="translated">이 플래그는 속성 getter를 호출하기 위해 <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> 메서드에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.IgnoreCase">
          <source>Specifies that the case of the member name should not be considered when binding.</source>
          <target state="translated">바인딩할 때 멤버 이름의 대/소문자를 고려하지 않도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.IgnoreReturn">
          <source>Used in COM interop to specify that the return value of the member can be ignored.</source>
          <target state="translated">COM interop에서 멤버의 반환 값을 무시할 수 있도록 지정하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.Instance">
          <source>Specifies that instance members are to be included in the search.</source>
          <target state="translated">인스턴스 멤버를 검색에 포함하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.InvokeMethod">
          <source>Specifies that a method is to be invoked.</source>
          <target state="translated">메서드를 호출하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.InvokeMethod">
          <source>This must not be a constructor or a type initializer.</source>
          <target state="translated">생성자 또는 형식 이니셜라이저가 아니어야 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.InvokeMethod">
          <source>This flag is passed to an <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> method to invoke a method.</source>
          <target state="translated">이 플래그는 메서드를 호출하기 위해 <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> 메서드에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.NonPublic">
          <source>Specifies that non-public members are to be included in the search.</source>
          <target state="translated">public이 아닌 멤버를 검색에 포함하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.OptionalParamBinding">
          <source>Returns the set of members whose parameter count matches the number of supplied arguments.</source>
          <target state="translated">해당 매개 변수 개수가 제공된 인수 개수와 일치하는 멤버 집합을 반환합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.OptionalParamBinding">
          <source>This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs).</source>
          <target state="translated">이 바인딩 플래그는 기본값을 가진 매개 변수가 있는 메서드 및 가변 인수(varargs)가 있는 메서드에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.OptionalParamBinding">
          <source>This flag should only be used with <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">이 플래그는 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>하고만 사용해야 합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.OptionalParamBinding">
          <source>Parameters with default values are used only in calls where trailing arguments are omitted.</source>
          <target state="translated">기본값이 있는 매개 변수는 후행 인수가 생략 되 호출 에서만에서 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Reflection.BindingFlags.OptionalParamBinding">
          <source>They must be the last arguments.</source>
          <target state="translated">마지막 인수 여야 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.Public">
          <source>Specifies that public members are to be included in the search.</source>
          <target state="translated">public 멤버를 검색에 포함하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.PutDispProperty">
          <source>Specifies that the <ph id="ph1">&lt;see langword="PROPPUT" /&gt;</ph> member on a COM object should be invoked.</source>
          <target state="translated">COM 개체의 <ph id="ph1">&lt;see langword="PROPPUT" /&gt;</ph> 멤버를 호출하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.PutDispProperty">
          <source><ph id="ph1">&lt;see langword="PROPPUT" /&gt;</ph> specifies a property-setting function that uses a value.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="PROPPUT" /&gt;</ph>은 값을 사용하는 속성 설정 함수를 지정합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.PutDispProperty">
          <source>Use <ph id="ph1">&lt;see langword="PutDispProperty" /&gt;</ph> if a property has both <ph id="ph2">&lt;see langword="PROPPUT" /&gt;</ph> and <ph id="ph3">&lt;see langword="PROPPUTREF" /&gt;</ph> and you need to distinguish which one is called.</source>
          <target state="translated">속성이 <ph id="ph2">&lt;see langword="PROPPUT" /&gt;</ph> 및 <ph id="ph3">&lt;see langword="PROPPUTREF" /&gt;</ph> 둘 다를 포함하고 호출할 항목을 구분해야 하는 경우 <ph id="ph1">&lt;see langword="PutDispProperty" /&gt;</ph>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.PutRefDispProperty">
          <source>Specifies that the <ph id="ph1">&lt;see langword="PROPPUTREF" /&gt;</ph> member on a COM object should be invoked.</source>
          <target state="translated">COM 개체의 <ph id="ph1">&lt;see langword="PROPPUTREF" /&gt;</ph> 멤버를 호출하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.PutRefDispProperty">
          <source><ph id="ph1">&lt;see langword="PROPPUTREF" /&gt;</ph> specifies a property-setting function that uses a reference instead of a value.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="PROPPUTREF" /&gt;</ph>는 값이 아니라 참조를 사용하는 속성 설정 함수를 지정합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.PutRefDispProperty">
          <source>Use <ph id="ph1">&lt;see langword="PutRefDispProperty" /&gt;</ph> if a property has both <ph id="ph2">&lt;see langword="PROPPUT" /&gt;</ph> and <ph id="ph3">&lt;see langword="PROPPUTREF" /&gt;</ph> and you need to distinguish which one is called.</source>
          <target state="translated">속성이 <ph id="ph2">&lt;see langword="PROPPUT" /&gt;</ph> 및 <ph id="ph3">&lt;see langword="PROPPUTREF" /&gt;</ph> 둘 다를 포함하고 호출할 항목을 구분해야 하는 경우 <ph id="ph1">&lt;see langword="PutRefDispProperty" /&gt;</ph>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.SetField">
          <source>Specifies that the value of the specified field should be set.</source>
          <target state="translated">지정된 필드의 값을 설정하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.SetField">
          <source>This flag is passed to an <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> method to set a field value.</source>
          <target state="translated">이 플래그는 필드 값을 설정하기 위해 <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> 메서드에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.SetProperty">
          <source>Specifies that the value of the specified property should be set.</source>
          <target state="translated">지정된 속성의 값을 설정하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.SetProperty">
          <source>For COM properties, specifying this binding flag is equivalent to specifying <ph id="ph1">&lt;see langword="PutDispProperty" /&gt;</ph> and <ph id="ph2">&lt;see langword="PutRefDispProperty" /&gt;</ph>.</source>
          <target state="translated">COM 속성의 경우 이 바인딩 플래그 지정은 <ph id="ph1">&lt;see langword="PutDispProperty" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="PutRefDispProperty" /&gt;</ph>를 지정하는 것과 같습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.SetProperty">
          <source>This flag is passed to an <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> method to invoke a property setter.</source>
          <target state="translated">이 플래그는 속성 setter를 호출하기 위해 <ph id="ph1">&lt;see langword="InvokeMember" /&gt;</ph> 메서드에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.Static">
          <source>Specifies that static members are to be included in the search.</source>
          <target state="translated">정적 멤버를 검색에 포함하도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="F:System.Reflection.BindingFlags.SuppressChangeType">
          <source>Not implemented.</source>
          <target state="translated">구현되지 않았습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>