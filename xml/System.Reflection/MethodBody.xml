<Type Name="MethodBody" FullName="System.Reflection.MethodBody">
  <TypeSignature Language="C#" Value="public class MethodBody" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit MethodBody extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodBody" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodBody" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBody" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="33b96-101">메서드 본문의 메타데이터와 MSIL에 대한 액세스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-101">Provides access to the metadata and MSIL for the body of a method.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33b96-102"><xref:System.Reflection.MethodBody> 클래스는 Microsoft intermediate language (MSIL) 메서드 본문을 구성 하는 지역 변수 및 메서드 본문에서 예외 처리 절에 대 한 정보에 대 한 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-102">The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.</span></span>  
  
 <span data-ttu-id="33b96-103">와 같은 모듈 클래스의 토큰 확인 메서드를 사용할 수 <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, 및 <xref:System.Reflection.Module.ResolveType%2A>, 메서드 본문에서 토큰을 확인 하려면 <xref:System.Type> 개체 <xref:System.Reflection.MethodInfo> 개체 및 <xref:System.Reflection.FieldInfo> 제공 하는 개체 형식, 메서드 및 필드 메서드 본문에서 MSIL에서 액세스 하는 방법에 대 한 자세한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-103">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33b96-104">메서드 본문을 구문 분석 메타 데이터 및 MSIL 명령 형식 철저 하 게 파악을 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-104">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="33b96-105">공용 언어 인프라 (CLI) 설명서의 "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합"에 정보를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-105">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="33b96-106">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33b96-106">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="33b96-107">가져올는 <xref:System.Reflection.MethodBody> 지정된 메서드에 대 한 개체를 먼저는 <xref:System.Reflection.MethodInfo> 개체는 메서드에 대 한 호출에서 <xref:System.Reflection.MethodInfo> 개체의 <xref:System.Reflection.MethodBase.GetMethodBody%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="33b96-107">To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33b96-108">다음 코드 예제에서는 라는 테스트 메서드를 정의 `MethodBodyExample` 해당 로컬 변수 정보 및 예외 처리 절이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-108">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="33b96-109"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> 메서드를 가져올를 사용 하는 <xref:System.Reflection.MethodBody> 테스트 메서드에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-109">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span>  
  
 <span data-ttu-id="33b96-110">이 예제에서는 사용는 <xref:System.Reflection.MethodBody.LocalVariables%2A> 속성의 목록을 가져오려면 <xref:System.Reflection.LocalVariableInfo> 개체 및 해당 형식 및 인덱스 순서를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-110">The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order.</span></span> <span data-ttu-id="33b96-111"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> 속성은 예외 처리 절의 목록을 가져오는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-111">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33b96-112">일부 컴퓨터 언어 <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> 절.</span><span class="sxs-lookup"><span data-stu-id="33b96-112">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="33b96-113">Visual Basic 예제에서는 Visual Basic을 사용 하 여 필터 절을 `When` 다른 언어에 대 한 예제에서 생략 되는 식입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-113">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]
 [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]
 [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBody ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBody();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33b96-114"><see cref="T:System.Reflection.MethodBody" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-114">Initializes a new instance of the <see cref="T:System.Reflection.MethodBody" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33b96-115">생성 하는 동안이 생성자는 파생된 클래스에서 호출 <xref:System.Reflection.MethodBody> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-115">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandlingClauses">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExceptionHandlingClauses As IList(Of ExceptionHandlingClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ ExceptionHandlingClauses { System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33b96-116">메서드 본문의 모든 예외 처리 절을 포함하는 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-116">Gets a list that includes all the exception-handling clauses in the method body.</span></span></summary>
        <value><span data-ttu-id="33b96-117">메서드 본문의 예외 처리 절을 나타내는 <see cref="T:System.Reflection.ExceptionHandlingClause" /> 개체의 <see cref="T:System.Collections.Generic.IList`1" />입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-117">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.ExceptionHandlingClause" /> objects representing the exception-handling clauses in the body of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33b96-118">메서드 본문에서 모든 try 블록에서 모든 절을 포함 하는 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-118">The list includes all clauses from all try blocks in the method body.</span></span> <span data-ttu-id="33b96-119">각 <xref:System.Reflection.ExceptionHandlingClause> 개체와 관련 된 try 블록을 식별 하는 정보가 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-119">Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33b96-120">작업 예외 처리 절에는 메타 데이터 및 MSIL 명령 형식 완전히 이해를 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-120">Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="33b96-121">공용 언어 인프라 (CLI) 설명서의 "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합"에 정보를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-121">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="33b96-122">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33b96-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33b96-123">다음 코드 예제에서는 라는 테스트 메서드를 정의 `MethodBodyExample` 의 예외 처리 절에 대 한 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-123">The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses.</span></span> <span data-ttu-id="33b96-124"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> 메서드를 가져올를 사용 하는 <xref:System.Reflection.MethodBody> 테스트 메서드에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-124">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="33b96-125"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> 속성 목록을 가져오는 데 사용 됩니다 <xref:System.Reflection.ExceptionHandlingClause> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-125">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33b96-126">일부 컴퓨터 언어 <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> 절.</span><span class="sxs-lookup"><span data-stu-id="33b96-126">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="33b96-127">Visual Basic 예제에서는 Visual Basic을 사용 하 여 필터 절을 `When` 다른 언어에 대 한 예제에서 생략 되는 식입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-127">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="33b96-128">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.MethodBody> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-128">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetILAsByteArray">
      <MemberSignature Language="C#" Value="public virtual byte[] GetILAsByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetILAsByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.GetILAsByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetILAsByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetILAsByteArray();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="33b96-129">메서드 본문의 MSIL을 바이트 배열로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-129">Returns the MSIL for the method body, as an array of bytes.</span></span></summary>
        <returns><span data-ttu-id="33b96-130">메서드 본문의 MSIL이 포함된 <see cref="T:System.Byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-130">An array of type <see cref="T:System.Byte" /> that contains the MSIL for the method body.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33b96-131">와 같은 모듈 클래스의 토큰 확인 메서드를 사용할 수 <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, 및 <xref:System.Reflection.Module.ResolveMember%2A>, 메서드 본문에서 토큰을 확인 하려면 <xref:System.Type> 개체 <xref:System.Reflection.MethodInfo> 개체 및 <xref:System.Reflection.FieldInfo> 제공 하는 개체 형식, 메서드 및 필드 메서드 본문에서 MSIL에서 액세스 하는 방법에 대 한 자세한 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-131">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33b96-132">메서드 본문을 구문 분석 메타 데이터 및 MSIL 명령 형식 철저 하 게 파악을 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-132">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="33b96-133">공용 언어 인프라 (CLI) 설명서의 "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합"에 정보를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-133">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="33b96-134">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33b96-134">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])" />
        <altmember cref="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public virtual bool InitLocals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool InitLocals { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33b96-135">메서드 본문에 있는 지역 변수를 해당 변수 형식의 기본값으로 초기화하는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-135">Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</span></span></summary>
        <value>
          <span data-ttu-id="33b96-136">참조 형식의 지역 변수는 <see langword="true" />로 초기화하고 값 형식의 지역 변수는 0으로 초기화하는 코드가 메서드 본문에 포함되어 있으면 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-136"><see langword="true" /> if the method body contains code to initialize local variables to <see langword="null" /> for reference types, or to the zero-initialized value for value types; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33b96-137"><xref:System.Reflection.MethodBody.InitLocals%2A> 속성은 참조 변수를 명시적으로 초기화 되지 않았습니다; 즉, 같은 구문을 사용 하 여 선언 된 변수 `int x;` C# 또는 `Dim x As Integer` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-137">The <xref:System.Reflection.MethodBody.InitLocals%2A> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.</span></span>  
  
 <span data-ttu-id="33b96-138">참조 변수가 초기화 됩니다 `null` 기본적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-138">Reference variables are initialized to `null` by default.</span></span> <span data-ttu-id="33b96-139">숫자 변수를 0으로 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-139">Numeric variables are initialized to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33b96-140">다음 코드 예제에서는 라는 테스트 메서드를 정의 `MethodBodyExample` 해당 로컬 변수 정보 및 예외 처리 절이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-140">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="33b96-141"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> 메서드를 가져올를 사용 하는 <xref:System.Reflection.MethodBody> 테스트 메서드에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-141">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="33b96-142"><xref:System.Reflection.MethodBody.MaxStackSize%2A> 및 <xref:System.Reflection.MethodBody.InitLocals%2A> 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-142">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="33b96-143">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.MethodBody> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-143">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalSignatureMetadataToken">
      <MemberSignature Language="C#" Value="public virtual int LocalSignatureMetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LocalSignatureMetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalSignatureMetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LocalSignatureMetadataToken { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33b96-144">메타데이터에서 메서드의 지역 변수를 설명하는 시그니처에 대한 메타데이터 토큰을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-144">Gets a metadata token for the signature that describes the local variables for the method in metadata.</span></span></summary>
        <value><span data-ttu-id="33b96-145">메타데이터 토큰을 나타내는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-145">An integer that represents the metadata token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33b96-146">사용 하 여는 <xref:System.Reflection.MethodBody.LocalVariables%2A> 속성 메서드의 로컬 변수에 대 한 정보를 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-146">Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="33b96-147">공용 언어 인프라 (CLI) 설명서의 "II: 메타 데이터 정의 및 의미"에 로컬 변수 서명에 대 한 정보를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-147">Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="33b96-148">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33b96-148">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalVariables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt; LocalVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.LocalVariableInfo&gt; LocalVariables" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalVariables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalVariables As IList(Of LocalVariableInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ LocalVariables { System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33b96-149">메서드 본문에 선언된 지역 변수 목록을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-149">Gets the list of local variables declared in the method body.</span></span></summary>
        <value><span data-ttu-id="33b96-150">메서드 본문에 선언된 지역 변수를 설명하는 <see cref="T:System.Collections.Generic.IList`1" /> 개체의 <see cref="T:System.Reflection.LocalVariableInfo" />입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-150">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.LocalVariableInfo" /> objects that describe the local variables declared in the method body.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33b96-151">제공 하는 로컬 변수 서명에 대 한 메타 데이터 토큰 않아도 <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-151">You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33b96-152">다음 코드 예제에서는 라는 테스트 메서드를 정의 `MethodBodyExample` 해당 로컬 변수 정보가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-152">The following code example defines a test method named `MethodBodyExample` and displays its local variable information.</span></span> <span data-ttu-id="33b96-153"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> 메서드를 가져올를 사용 하는 <xref:System.Reflection.MethodBody> 테스트 메서드에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-153">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="33b96-154"><xref:System.Reflection.MethodBody.LocalVariables%2A> 속성 목록을 가져오는 데 사용 됩니다 <xref:System.Reflection.LocalVariableInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-154">The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.</span></span>  
  
 <span data-ttu-id="33b96-155">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.MethodBody> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-155">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#3)]
[!code-csharp[MethodBody#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#3)]
[!code-vb[MethodBody#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#3)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#6](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#6)]
[!code-csharp[MethodBody#6](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#6)]
[!code-vb[MethodBody#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.LocalVariableInfo" />
      </Docs>
    </Member>
    <Member MemberName="MaxStackSize">
      <MemberSignature Language="C#" Value="public virtual int MaxStackSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxStackSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.MaxStackSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaxStackSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxStackSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="33b96-156">메서드를 실행 중일 때 피연산자 스택에 있는 최대 항목 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-156">Gets the maximum number of items on the operand stack when the method is executing.</span></span></summary>
        <value><span data-ttu-id="33b96-157">메서드를 실행 중일 때 피연산자 스택에 있는 최대 항목 수입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-157">The maximum number of items on the operand stack when the method is executing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="33b96-158">자세한 내용은 "II: 메타 데이터 정의 및 의미" 및 "III 파티션: CIL 명령 집합" 인프라 CLI (공용 언어) 설명서를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-158">For more information, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="33b96-159">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="33b96-159">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="33b96-160">다음 코드 예제에서는 라는 테스트 메서드를 정의 `MethodBodyExample` 해당 로컬 변수 정보 및 예외 처리 절이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-160">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="33b96-161"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> 메서드를 가져올를 사용 하는 <xref:System.Reflection.MethodBody> 테스트 메서드에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-161">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="33b96-162"><xref:System.Reflection.MethodBody.MaxStackSize%2A> 및 <xref:System.Reflection.MethodBody.InitLocals%2A> 속성이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-162">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="33b96-163">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.MethodBody> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="33b96-163">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>