<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeInfo.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51b83aad3fe8f6a61474824a2428045a9cb69f48d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b83aad3fe8f6a61474824a2428045a9cb69f48d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.TypeInfo">
          <source>Represents type declarations for class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</source>
          <target state="translated">클래스 형식, 인터페이스 형식, 배열 형식, 값 형식, 열거형 형식, 형식 매개 변수, 제네릭 형식 정의 및 개방형 생성 제네릭 형식이나 폐쇄형 생성 제네릭 형식에 대한 형식 선언을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Reflection.TypeInfo&gt;</ph> class is included in the <ph id="ph3">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> subset for use in creating Windows Store apps.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 에 클래스가 포함 되는 <ph id="ph3">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> 하위 집합에 대 한 Windows 스토어 앱을 만드는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> is available in the full .NET Framework as well.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 전체.NET Framework에서 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>For more information about reflection for Windows Store apps, see <bpt id="p1">[</bpt>System.Reflection namespaces<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/hh441595\(v=vs.110\).aspx)</ept> in the Windows Dev Center and <bpt id="p2">[</bpt>Reflection in the .NET Framework for Windows Store Apps<ept id="p2">](~/docs/framework/reflection-and-codedom/reflection-for-windows-store-apps.md)</ept> in the MSDN Library.</source>
          <target state="translated">Windows 스토어 앱에 대 한 리플렉션에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>System.Reflection 네임 스페이스<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/hh441595\(v=vs.110\).aspx)</ept> Windows 개발자 센터에서 및 <bpt id="p2">[</bpt>Windows 스토어 앱.NET Framework의에서 리플렉션<ept id="p2">](~/docs/framework/reflection-and-codedom/reflection-for-windows-store-apps.md)</ept> MSDN에서 라이브러리입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> contains many of the members available in the <ph id="ph2">&lt;xref:System.Type&gt;</ph> class, and many of the reflection properties in the <ph id="ph3">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> return collections of <ph id="ph4">&lt;xref:System.Reflection.TypeInfo&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 사용할 수 있는 멤버를 여러 개 포함는 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 클래스 및 다양 한 리플렉션 속성은는 <ph id="ph3">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> 의 컬렉션을 반환할 <ph id="ph4">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>To get a <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> object from a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object, use the <ph id="ph3">&lt;xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%28System.Type%29?displayProperty=nameWithType&gt;</ph> extension method.</source>
          <target state="translated">가져오려는 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 에서 개체는 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 개체를 가져오려면는 <ph id="ph3">&lt;xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%28System.Type%29?displayProperty=nameWithType&gt;</ph> 확장 메서드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> object represents the type definition itself, whereas a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object represents a reference to the type definition.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 개체 자체를 형식 정의 나타내는 반면는 <ph id="ph2">&lt;xref:System.Type&gt;</ph> 개체의 형식 정의에 대 한 참조를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>Getting a <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> object forces the assembly that contains that type to load.</source>
          <target state="translated">가져오기는 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 개체 로드할 해당 형식을 포함 하는 어셈블리를 강제로 수행 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>In comparison, you can manipulate <ph id="ph1">&lt;xref:System.Type&gt;</ph> objects without necessarily requiring the runtime to load the assembly they reference.</source>
          <target state="translated">조작할 수에 비해 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 하면 런타임에서 참조 하는 어셈블리를 로드 하지 않고도 개체입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>In the <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph>, you use the reflection properties of <ph id="ph2">&lt;xref:System.Reflection.TypeInfo&gt;</ph> that return <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> collections instead of methods that return arrays.</source>
          <target state="translated">에 <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph>의 리플렉션 속성을 사용 하 여 <ph id="ph2">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 반환 하는 <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 메서드 배열을 반환 하는 대신 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>For example, use the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredMembers%2A&gt;</ph> property to get all declared members, or the <ph id="ph2">&lt;xref:System.Reflection.TypeInfo.DeclaredProperties%2A&gt;</ph> property to get all declared properties.</source>
          <target state="translated">사용 예를 들어는 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredMembers%2A&gt;</ph> 모든 선언 된 멤버를 가져올 속성 또는 <ph id="ph2">&lt;xref:System.Reflection.TypeInfo.DeclaredProperties%2A&gt;</ph> 모든 선언 된 속성을 가져올 속성입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>Reflection contexts can implement lazy traversal of these collections for large assemblies or types.</source>
          <target state="translated">리플렉션 컨텍스트는 큰 어셈블리 또는 형식에 대해 이러한 컬렉션의 지연 순회를 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>To get specific members, use methods such as <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.GetDeclaredMethod%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.TypeInfo.GetDeclaredProperty%2A&gt;</ph>, and pass the name of the method or property you would like to retrieve.</source>
          <target state="translated">특정 멤버를 얻으려면와 같은 메서드 사용 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.GetDeclaredMethod%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Reflection.TypeInfo.GetDeclaredProperty%2A&gt;</ph>, 메서드 또는 검색 하려는 속성의 이름을 전달 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>To filter the results of <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> properties, use LINQ queries.</source>
          <target state="translated">결과 필터링 하려면 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 속성을 LINQ 쿼리를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
          <target state="translated">런타임에 발생 하는 리플렉션 개체 (예를 들어의 결과로 <ph id="ph1">`typeof(Object)`</ph>)의 메서드를 사용 하 여 상속 트리를 이동할 수 있습니다는 <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
          <target state="translated">사용자 지정된 리플렉션 컨텍스트의 개체 소비자는 이러한 메서드를 사용할 수 없는 자체를 트래버스해야 상속 트리입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>This example uses the reflection types and members in the <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> subset to retrieve the methods and properties of the <ph id="ph2">&lt;xref:System.Globalization.Calendar&gt;</ph> type, including inherited methods and properties.</source>
          <target state="translated">리플렉션 형식 및 멤버에 사용 하 여이 예제는 <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> 메서드 및 속성을 검색 하는 하위 집합은 <ph id="ph2">&lt;xref:System.Globalization.Calendar&gt;</ph> 상속 된 메서드 및 속성을 포함 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.TypeInfo">
          <source>To run this code, paste it into the code file for a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> XAML app that contains a <bpt id="p1">[</bpt>Windows.UI.Xaml.Controls.Textblock<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</ept> control named <ph id="ph2">`textblock1`</ph>.</source>
          <target state="translated">이 코드를 실행 하려면에 대 한 코드 파일에 붙여는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> XAML 앱을 포함 한 <bpt id="p1">[</bpt>Windows.UI.Xaml.Controls.Textblock<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</ept> 라는 컨트롤 <ph id="ph2">`textblock1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.AsType">
          <source>Returns the current type as a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object.</source>
          <target state="translated">현재 형식을 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체로 반환합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.AsType">
          <source>The current type.</source>
          <target state="translated">현재 형식입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeInfo.DeclaredConstructors">
          <source>Gets a collection of the constructors declared by the current type.</source>
          <target state="translated">현재 형식이 선언하는 생성자의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredConstructors">
          <source>A collection of the constructors declared by the current type.</source>
          <target state="translated">현재 형식이 선언하는 생성자의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredConstructors">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredConstructors%2A&gt;</ph> property, use LINQ queries.</source>
          <target state="translated">결과 필터링 하는 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredConstructors%2A&gt;</ph> 속성, LINQ 쿼리를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredConstructors">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
          <target state="translated">런타임에 발생 하는 리플렉션 개체 (예를 들어의 결과로 <ph id="ph1">`typeof(Object)`</ph>)의 메서드를 사용 하 여 상속 트리를 이동할 수 있습니다는 <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredConstructors">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
          <target state="translated">사용자 지정된 리플렉션 컨텍스트의 개체 소비자는 이러한 메서드를 사용할 수 없는 자체를 트래버스해야 상속 트리입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeInfo.DeclaredEvents">
          <source>Gets a collection of the events defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 이벤트의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredEvents">
          <source>A collection of the events defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 이벤트의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredEvents">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredEvents%2A&gt;</ph> property, use LINQ queries.</source>
          <target state="translated">결과 필터링 하는 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredEvents%2A&gt;</ph> 속성, LINQ 쿼리를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredEvents">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
          <target state="translated">런타임에 발생 하는 리플렉션 개체 (예를 들어의 결과로 <ph id="ph1">`typeof(Object)`</ph>)의 메서드를 사용 하 여 상속 트리를 이동할 수 있습니다는 <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredEvents">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
          <target state="translated">사용자 지정된 리플렉션 컨텍스트의 개체 소비자는 이러한 메서드를 사용할 수 없는 자체를 트래버스해야 상속 트리입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeInfo.DeclaredFields">
          <source>Gets a collection of the fields defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 필드의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredFields">
          <source>A collection of the fields defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 필드의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredFields">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredFields%2A&gt;</ph> property, use LINQ queries.</source>
          <target state="translated">결과 필터링 하는 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredFields%2A&gt;</ph> 속성, LINQ 쿼리를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredFields">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
          <target state="translated">런타임에 발생 하는 리플렉션 개체 (예를 들어의 결과로 <ph id="ph1">`typeof(Object)`</ph>)의 메서드를 사용 하 여 상속 트리를 이동할 수 있습니다는 <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredFields">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
          <target state="translated">사용자 지정된 리플렉션 컨텍스트의 개체 소비자는 이러한 메서드를 사용할 수 없는 자체를 트래버스해야 상속 트리입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeInfo.DeclaredMembers">
          <source>Gets a collection of the members defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 멤버의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMembers">
          <source>A collection of the members defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 멤버의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMembers">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredMembers%2A&gt;</ph> property, use LINQ queries.</source>
          <target state="translated">결과 필터링 하는 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredMembers%2A&gt;</ph> 속성, LINQ 쿼리를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMembers">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
          <target state="translated">런타임에 발생 하는 리플렉션 개체 (예를 들어의 결과로 <ph id="ph1">`typeof(Object)`</ph>)의 메서드를 사용 하 여 상속 트리를 이동할 수 있습니다는 <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMembers">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
          <target state="translated">사용자 지정된 리플렉션 컨텍스트의 개체 소비자는 이러한 메서드를 사용할 수 없는 자체를 트래버스해야 상속 트리입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeInfo.DeclaredMethods">
          <source>Gets a collection of the methods defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 메서드의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMethods">
          <source>A collection of the methods defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 메서드의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMethods">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredMethods%2A&gt;</ph> property, use LINQ queries.</source>
          <target state="translated">결과 필터링 하는 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredMethods%2A&gt;</ph> 속성, LINQ 쿼리를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMethods">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
          <target state="translated">런타임에 발생 하는 리플렉션 개체 (예를 들어의 결과로 <ph id="ph1">`typeof(Object)`</ph>)의 메서드를 사용 하 여 상속 트리를 이동할 수 있습니다는 <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMethods">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
          <target state="translated">사용자 지정된 리플렉션 컨텍스트의 개체 소비자는 이러한 메서드를 사용할 수 없는 자체를 트래버스해야 상속 트리입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMethods">
          <source>This example uses the reflection types and members in the <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> subset to retrieve the methods and properties of the <ph id="ph2">&lt;xref:System.Globalization.Calendar&gt;</ph> type, including inherited methods and properties.</source>
          <target state="translated">리플렉션 형식 및 멤버에 사용 하 여이 예제는 <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> 메서드 및 속성을 검색 하는 하위 집합은 <ph id="ph2">&lt;xref:System.Globalization.Calendar&gt;</ph> 상속 된 메서드 및 속성을 포함 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredMethods">
          <source>To run this code, paste it into the code file for a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> XAML app that contains a <bpt id="p1">[</bpt>Windows.UI.Xaml.Controls.Textblock<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</ept> control named <ph id="ph2">`textblock1`</ph>.</source>
          <target state="translated">이 코드를 실행 하려면에 대 한 코드 파일에 붙여는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> XAML 앱을 포함 한 <bpt id="p1">[</bpt>Windows.UI.Xaml.Controls.Textblock<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</ept> 라는 컨트롤 <ph id="ph2">`textblock1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeInfo.DeclaredNestedTypes">
          <source>Gets a collection of the nested types defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 중첩 형식의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredNestedTypes">
          <source>A collection of nested types defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 중첩 형식의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredNestedTypes">
          <source>To filter the results of the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredNestedTypes%2A&gt;</ph> property, use LINQ queries.</source>
          <target state="translated">결과 필터링 하는 <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.DeclaredNestedTypes%2A&gt;</ph> 속성, LINQ 쿼리를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredNestedTypes">
          <source>For reflection objects that originate with the runtime (for example, as the result of <ph id="ph1">`typeof(Object)`</ph>), you can traverse the inheritance tree by using the methods in the <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> class.</source>
          <target state="translated">런타임에 발생 하는 리플렉션 개체 (예를 들어의 결과로 <ph id="ph1">`typeof(Object)`</ph>)의 메서드를 사용 하 여 상속 트리를 이동할 수 있습니다는 <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredNestedTypes">
          <source>Consumers of objects from customized reflection contexts cannot use these methods and must traverse the inheritance tree themselves.</source>
          <target state="translated">사용자 지정된 리플렉션 컨텍스트의 개체 소비자는 이러한 메서드를 사용할 수 없는 자체를 트래버스해야 상속 트리입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeInfo.DeclaredProperties">
          <source>Gets a collection of the properties defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 속성의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredProperties">
          <source>A collection of the properties defined by the current type.</source>
          <target state="translated">현재 형식이 정의하는 속성의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredProperties">
          <source>This example uses the reflection types and members in the <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> subset to retrieve the methods and properties of the <ph id="ph2">&lt;xref:System.Globalization.Calendar&gt;</ph> type, including inherited methods and properties.</source>
          <target state="translated">리플렉션 형식 및 멤버에 사용 하 여이 예제는 <ph id="ph1">[!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)]</ph> 메서드 및 속성을 검색 하는 하위 집합은 <ph id="ph2">&lt;xref:System.Globalization.Calendar&gt;</ph> 상속 된 메서드 및 속성을 포함 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.DeclaredProperties">
          <source>To run this code, paste it into the code file for a <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> XAML app that contains a <bpt id="p1">[</bpt>Windows.UI.Xaml.Controls.Textblock<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</ept> control named <ph id="ph2">`textblock1`</ph>.</source>
          <target state="translated">이 코드를 실행 하려면에 대 한 코드 파일에 붙여는 <ph id="ph1">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> XAML 앱을 포함 한 <bpt id="p1">[</bpt>Windows.UI.Xaml.Controls.Textblock<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</ept> 라는 컨트롤 <ph id="ph2">`textblock1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeInfo.GenericTypeParameters">
          <source>Gets an array of the generic type parameters of the current instance.</source>
          <target state="translated">현재 인스턴스의 제네릭 형식 매개 변수 배열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.GenericTypeParameters">
          <source>An array that contains the current instance's generic type parameters, or an array of <ph id="ph1">&lt;see cref="P:System.Array.Length" /&gt;</ph> zero if the current instance has no generic type parameters.</source>
          <target state="translated">현재 인스턴스의 제네릭 형식 매개 변수를 포함 하는 배열 또는 현재 인스턴스에 제네릭 형식 매개 변수가 없는 경우 <ph id="ph1">&lt;see cref="P:System.Array.Length" /&gt;</ph> 0의 배열입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)">
          <source>The name of the event.</source>
          <target state="translated">이벤트의 이름입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)">
          <source>Returns an object that represents the specified public event declared by the current type.</source>
          <target state="translated">현재 형식에서 선언한 지정된 공용 이벤트를 나타내는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)">
          <source>An object that represents the specified event, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">해당 항목이 있으면 지정된 이벤트를 나타내는 개체이며, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredField(System.String)">
          <source>The name of the field.</source>
          <target state="translated">@FSHO2@필드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredField(System.String)">
          <source>Returns an object that represents the specified public field declared by the current type.</source>
          <target state="translated">현재 형식에서 선언한 지정된 공용 필드를 나타내는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredField(System.String)">
          <source>An object that represents the specified field, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">해당 항목이 있으면 지정된 필드를 나타내는 개체이며, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredField(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)">
          <source>The name of the method.</source>
          <target state="translated">메서드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)">
          <source>Returns an object that represents the specified public method declared by the current type.</source>
          <target state="translated">현재 형식에서 선언한 지정된 공용 메서드를 나타내는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)">
          <source>An object that represents the specified method, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">해당 항목이 있으면 지정된 메서드를 나타내는 개체이며, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)">
          <source>The method name to search for.</source>
          <target state="translated">검색할 메서드 이름입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)">
          <source>Returns a collection that contains all public methods declared on the current type that match the specified name.</source>
          <target state="translated">지정된 이름과 일치하며 현재 형식에 선언된 모든 공용 메서드를 포함하는 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)">
          <source>A collection that contains methods that match <ph id="ph1">&lt;paramref name="name" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>과 일치하는 메서드를 포함하는 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)">
          <source>The name of the nested type.</source>
          <target state="translated">중첩 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)">
          <source>Returns an object that represents the specified public nested type declared by the current type.</source>
          <target state="translated">현재 형식에서 선언한 지정된 공용 중첩 형식을 나타내는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)">
          <source>An object that represents the specified nested type, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">해당 항목이 있으면 지정된 중첩 형식을 나타내는 개체이며, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)">
          <source>The name of the property.</source>
          <target state="translated">속성의 이름입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)">
          <source>Returns an object that represents the specified public property declared by the current type.</source>
          <target state="translated">현재 형식에서 선언한 지정된 공용 속성을 나타내는 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)">
          <source>An object that represents the specified property, if found; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">해당 항목이 있으면 지정된 속성을 나타내는 개체이며, 그렇지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.Reflection.TypeInfo.ImplementedInterfaces">
          <source>Gets a collection of the interfaces implemented by the current type.</source>
          <target state="translated">현재 형식에 의해 구현된 인터페이스의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.TypeInfo.ImplementedInterfaces">
          <source>A collection of the interfaces implemented by the current type.</source>
          <target state="translated">현재 형식에 의해 구현된 인터페이스의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>The type to check.</source>
          <target state="translated">확인할 형식입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source>Returns a value that indicates whether the specified type can be assigned to the current type.</source>
          <target state="translated">지정한 형식을 현재 형식으로 할당할 수 있는지를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified type can be assigned to this type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 형식을 이 형식에 할당할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 할당할 수 없으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo">
          <source>Returns a representation of the current type as a <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> object.</source>
          <target state="translated">현재 형식의 표현을 <ph id="ph1">&lt;see cref="T:System.Reflection.TypeInfo" /&gt;</ph> 개체로 반환합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo">
          <source>A reference to the current type.</source>
          <target state="translated">현재 형식에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Reflection.IReflectableType&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TypeInfo&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Reflection.IReflectableType&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>