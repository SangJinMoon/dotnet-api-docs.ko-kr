<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="FieldInfo.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5eaf3da8149c7beea481d56464ce8b739bcbe0488.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eaf3da8149c7beea481d56464ce8b739bcbe0488</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Discovers the attributes of a field and provides access to field metadata.</source>
          <target state="translated">필드의 특성을 검색하고 필드 메타데이터에 액세스할 수 있도록 해줍니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The field information is obtained from metadata.</source>
          <target state="translated">필드 정보를 메타 데이터에서 가져옵니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> class does not have a public constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 클래스에는 공용 생성자가 없습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects are obtained by calling either the <ph id="ph2">&lt;xref:System.Type.GetFields%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Type.GetField%2A&gt;</ph> method of a <ph id="ph4">`Type`</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 호출 하 여 가져온 개체는 <ph id="ph2">&lt;xref:System.Type.GetFields%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Type.GetField%2A&gt;</ph> 의 메서드는 <ph id="ph4">`Type`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>Fields are variables defined in the class.</source>
          <target state="translated">필드는 클래스에 정의 된 변수입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 클래스 내의 필드에 대 한 메타 데이터에 대 한 액세스를 제공 하 고 필드에 대 한 동적 집합 및 get 기능을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The class is not loaded into memory until invoke or get is called on the object.</source>
          <target state="translated">클래스 호출 될 때까지 메모리에 로드 되지 않습니다 또는 get 개체에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get the field-related information from the <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> class, and then displays field attributes.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> 필드 관련 정보를 얻을 수 있는 메서드는 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 클래스 및 필드 특성을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>for full trust for inheritors.</source>
          <target state="translated">상속자에 대 한 완전 신뢰 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">부분적으로 신뢰할 수 있는 코드에서이 클래스는 상속 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>This type is thread safe.</source>
          <target state="translated">이 형식은 스레드로부터 안전합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.FieldInfo">
          <source>When you inherit from <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>, you must override the following members: <ph id="ph2">&lt;see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>에서 상속하는 경우 <ph id="ph2">&lt;see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)" /&gt;</ph> 및 <ph id="ph3">&lt;see cref="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)" /&gt;</ph> 멤버를 재정의해야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="FieldInfo" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.#ctor">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>Gets the attributes associated with this field.</source>
          <target state="translated">이 필드와 관련된 특성을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>The <ph id="ph1">&lt;see langword="FieldAttributes" /&gt;</ph> for this field.</source>
          <target state="translated">이 필드에 대한 <ph id="ph1">&lt;see langword="FieldAttributes" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>All members have a set of attributes, which are defined in relation to the specific type of member.</source>
          <target state="translated">모든 멤버는 특정 형식의 멤버를 기준으로 정의 된 특성의 집합을 갖습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source><ph id="ph1">`FieldAttributes`</ph> informs the user whether this field is the private field, a static field, and so on.</source>
          <target state="translated"><ph id="ph1">`FieldAttributes`</ph> 이 필드는 private 필드, 정적 필드 및에 있는지 여부를 사용자에 게 알립니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>To get the <ph id="ph1">`Attributes`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">가져오려는 <ph id="ph1">`Attributes`</ph> 속성을 클래스를 먼저 가져온 <ph id="ph2">`Type`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>, 가져오기는 <ph id="ph2">`FieldInfo`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`Attributes`</ph>.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>, 가져오기는 <ph id="ph2">`Attributes`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>The following code example builds three fields and displays their field attributes.</source>
          <target state="translated">다음 코드 예제에서는 세 개의 필드 하 고 해당 필드 특성을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.Attributes">
          <source>A <ph id="ph1">`FieldAttributes`</ph> value can contain more than one attribute, such as both <ph id="ph2">`Public`</ph> and <ph id="ph3">`Literal`</ph>, as shown in the third field.</source>
          <target state="translated">A <ph id="ph1">`FieldAttributes`</ph> 값 모두 같은 둘 이상의 특성이 포함 될 수 있습니다 <ph id="ph2">`Public`</ph> 및 <ph id="ph3">`Literal`</ph>세 번째 필드에 표시 된 것 처럼 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">이 인스턴스와 비교할 개체 또는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">@FSHO2@이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> equals the type and value of this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 이 인스턴스의 형식 및 값과 같으면 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>Gets a <ph id="ph1">&lt;see langword="RuntimeFieldHandle" /&gt;</ph>, which is a handle to the internal metadata representation of a field.</source>
          <target state="translated">필드의 내부 메타데이터 표현에 대한 핸들인 <ph id="ph1">&lt;see langword="RuntimeFieldHandle" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>A handle to the internal metadata representation of a field.</source>
          <target state="translated">필드의 내부 메타데이터 표현에 대한 핸들입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>The handles are valid only in the appdomain in which they were obtained.</source>
          <target state="translated">핸들은 가져온 된 appdomain에만 유효 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldHandle">
          <source>The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.</source>
          <target state="translated">다음 예제에서는 MyClass.MyField 필드 정보를 검색 하 고 필드 핸들에 연결 된 필드를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>Gets the type of this field object.</source>
          <target state="translated">이 필드 개체의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The type of this field object.</source>
          <target state="translated">이 필드 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The type is some primitive data type, such as <ph id="ph1">`String`</ph>, <ph id="ph2">`Boolean`</ph>, or <ph id="ph3">`GUID`</ph>.</source>
          <target state="translated">형식이 몇 가지 기본 데이터 형식을 같은 <ph id="ph1">`String`</ph>, <ph id="ph2">`Boolean`</ph>, 또는 <ph id="ph3">`GUID`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>To get the <ph id="ph1">`FieldType`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">가져오려는 <ph id="ph1">`FieldType`</ph> 속성을 클래스를 먼저 가져온 <ph id="ph2">`Type`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>, 가져오기는 <ph id="ph2">`FieldInfo`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`FieldType`</ph> value.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>, 가져오기는 <ph id="ph2">`FieldType`</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.FieldType">
          <source>The following example creates a field, gets its type and <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, and displays its <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 필드를 만들고, 해당 형식을 가져옵니다 및 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph>, 표시 및 해당 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.FieldType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by a handle.</source>
          <target state="translated">핸들이 나타내는 필드의 <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> structure that contains the handle to the internal metadata representation of a field.</source>
          <target state="translated">필드의 내부 메타데이터 표현에 대한 핸들이 들어 있는 <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> 구조체입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by the specified handle.</source>
          <target state="translated">지정된 핸들이 나타내는 필드의 <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field specified by <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="handle" /&gt;</ph>로 지정된 필드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Handles are valid only in the application domain in which they were obtained.</source>
          <target state="translated">핸들은 얻은 것 응용 프로그램 도메인에만 유효 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects for the fields of a type, gets a <ph id="ph3">&lt;xref:System.RuntimeFieldHandle&gt;</ph> structure for each field, and then retrieves the <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects from the handles using this overload of the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> 가져올 메서드를 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 된 형식의 필드에 대 한 개체를 가져옵니다는 <ph id="ph3">&lt;xref:System.RuntimeFieldHandle&gt;</ph> 한 다음 각 필드를 검색에 대 한 구조는 <ph id="ph4">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 개체는 가오버이로드를사용하여핸들에서<ph id="ph5">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A&gt;</ph>메서드.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph>이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> structure that contains the handle to the internal metadata representation of a field.</source>
          <target state="translated">필드의 내부 메타데이터 표현에 대한 핸들이 들어 있는 <ph id="ph1">&lt;see cref="T:System.RuntimeFieldHandle" /&gt;</ph> 구조체입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.RuntimeTypeHandle" /&gt;</ph> structure that contains the handle to the generic type that defines the field.</source>
          <target state="translated">필드를 정의하는 제네릭 형식에 대한 핸들이 들어 있는 <ph id="ph1">&lt;see cref="T:System.RuntimeTypeHandle" /&gt;</ph> 구조체입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> for the field represented by the specified handle, for the specified generic type.</source>
          <target state="translated">지정된 제네릭 형식에 대해 지정된 핸들이 나타내는 필드의 <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> object representing the field specified by <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>, in the generic type specified by <ph id="ph3">&lt;paramref name="declaringType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="handle" /&gt;</ph>으로 지정된 제네릭 형식에서 <ph id="ph3">&lt;paramref name="declaringType" /&gt;</ph>로 지정된 필드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Handles are valid only in the application domain in which they were obtained.</source>
          <target state="translated">핸들은 얻은 것 응용 프로그램 도메인에만 유효 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The recommended practice is that <ph id="ph1">`declaringType`</ph> should always be the runtime type handle of the constructed type that <ph id="ph2">`handle`</ph> belongs to.</source>
          <target state="translated">권장된 방법 <ph id="ph1">`declaringType`</ph> 는 항상 생성 된 런타임 형식 핸들 형식 이어야 <ph id="ph2">`handle`</ph> 에 속합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>That is, if <ph id="ph1">`handle`</ph> is a runtime field handle for a field that belongs to <ph id="ph2">`MyType&lt;int&gt;`</ph> (<ph id="ph3">`MyType(Of Integer)`</ph> in Visual Basic), <ph id="ph4">`declaringType`</ph> is the runtime type handle for <ph id="ph5">`MyType&lt;int&gt;`</ph>.</source>
          <target state="translated">즉, 경우 <ph id="ph1">`handle`</ph> 에 속하는 필드에 대 한 런타임 필드 핸들은 <ph id="ph2">`MyType&lt;int&gt;`</ph> (<ph id="ph3">`MyType(Of Integer)`</ph> Visual basic에서), <ph id="ph4">`declaringType`</ph> 런타임 형식에 대 한 핸들은 <ph id="ph5">`MyType&lt;int&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.</source>
          <target state="translated">런타임 필드 핸들 제네릭 형식 정의의 필드를 나타내는 경우가 아니면 제네릭 형식 정의의 런타임 형식 핸들을 사용 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Implementations are compatible in some cases.</source>
          <target state="translated">구현은 일부 경우에 호환 되는입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments.</source>
          <target state="translated">예를 들어 단일 구현의 제네릭 형식 인수에 대 한 참조 형식을 사용 하 여 특정 제네릭 형식 정의에서 생성 된 모든 형식에서 공유 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, <ph id="ph1">`MyType&lt;string&gt;`</ph>, <ph id="ph2">`MyType&lt;object&gt;`</ph>, and <ph id="ph3">`MyType&lt;ArrayList&gt;`</ph> all share the same implementation.</source>
          <target state="translated">예를 들어 <ph id="ph1">`MyType&lt;string&gt;`</ph>, <ph id="ph2">`MyType&lt;object&gt;`</ph>, 및 <ph id="ph3">`MyType&lt;ArrayList&gt;`</ph> 모두 동일한 구현을 공유 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In this situation, the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> object that is returned represents a field on the type that <ph id="ph2">`declaringType`</ph> specifies, regardless of the original source of <ph id="ph3">`handle`</ph>.</source>
          <target state="translated">이 경우에는 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 반환 되는 개체 형식에 필드를 나타냅니다는 <ph id="ph2">`declaringType`</ph> 의 원래 소스에 관계 없이 지정 <ph id="ph3">`handle`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.</source>
          <target state="translated">생성된 된 형식 제네릭 형식 인수는 참조 형식의 경우에 작동 하기 때문에이 방법은 권장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position.</source>
          <target state="translated">제네릭 인수 값 형식인 경우 생성 된 형식의 런타임 형식 핸들 입력 같은 제네릭 매개 변수 위치에 대 한 참조 또는 해당 위치에 입력 합니다. 다른 값을 포함 하는 생성자 로부터 런타임 필드 처리와 호환 되지 않습니다. .</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In that case, the only way to use the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType&gt;</ph> overload is to ensure that <ph id="ph2">`declaringType`</ph> is the runtime type handle for the constructed type that <ph id="ph3">`handle`</ph> belongs to.</source>
          <target state="translated">사용 하는 유일한 방법은 경우는 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=nameWithType&gt;</ph> 되도록 오버 로드는 <ph id="ph2">`declaringType`</ph> 생성 된 형식에 대 한 런타임 형식 핸들은 <ph id="ph3">`handle`</ph> 에 속합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The following example shows how to retrieve <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects for fields on constructed generic classes.</source>
          <target state="translated">다음 예제에서는 검색 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 생성 된 제네릭 클래스의 필드에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The example defines the generic type <ph id="ph1">`Test&lt;T&gt;`</ph> (<ph id="ph2">`Test(Of T)`</ph> in Visual Basic) with a single field named <ph id="ph3">`TestField`</ph>, of type <ph id="ph4">`T`</ph>.</source>
          <target state="translated">이 예제에서는 제네릭 형식 정의 <ph id="ph1">`Test&lt;T&gt;`</ph> (<ph id="ph2">`Test(Of T)`</ph> Visual basic에서) 라는 단일 필드와 <ph id="ph3">`TestField`</ph>, 형식의 <ph id="ph4">`T`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>The example gets the <ph id="ph1">&lt;xref:System.RuntimeFieldHandle&gt;</ph> and <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> for the case where <ph id="ph3">`T`</ph> is <ph id="ph4">&lt;xref:System.String&gt;</ph>, and demonstrates the following:</source>
          <target state="translated">예제에서는 가져옵니다는 <ph id="ph1">&lt;xref:System.RuntimeFieldHandle&gt;</ph> 및 <ph id="ph2">&lt;xref:System.RuntimeTypeHandle&gt;</ph> 경우 여기서 <ph id="ph3">`T`</ph> 은 <ph id="ph4">&lt;xref:System.String&gt;</ph>, 다음 방법을 보여 줍니다:</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>An exception is thrown if the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29&gt;</ph> method overload is used.</source>
          <target state="translated">예외가 발생 하는 경우는 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29&gt;</ph> 메서드 오버 로드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>This is true even if the field is not of type <ph id="ph1">`T`</ph>.</source>
          <target state="translated">필드가 형식이 아닙니다. 경우에 그렇습니다 <ph id="ph1">`T`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>A <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case <ph id="ph2">`Test&lt;string&gt;`</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 런타임 형식 핸들은 동일한 구조에서 런타임 필드 핸들로 예제의 경우 성공적으로 검색 됩니다 <ph id="ph2">`Test&lt;string&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If the runtime type handle is from a compatible construction, in this case <ph id="ph1">`Test&lt;object&gt;`</ph>, a <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> for the field on the compatible construction is retrieved.</source>
          <target state="translated">런타임 형식 핸들 경우 호환 되는 생성,이 경우 <ph id="ph1">`Test&lt;object&gt;`</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 호환 되는 생성에서 필드를 검색에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>If the runtime type handle is not from a compatible construction, an exception is thrown.</source>
          <target state="translated">런타임 형식 핸들이 호환 되는 생성에서 없으면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>In this case, a value type is specified for <ph id="ph1">`T`</ph>.</source>
          <target state="translated">에 대 한 값 형식이 지정 되는 경우 <ph id="ph1">`T`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source><ph id="ph1">&lt;paramref name="handle" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="handle" /&gt;</ph>이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source><ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> is not compatible with <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph>이 <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>과 호환되지 않는 경우.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>For example, <ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph> is the runtime type handle of the generic type definition, and <ph id="ph2">&lt;paramref name="handle" /&gt;</ph> comes from a constructed type.</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;paramref name="declaringType" /&gt;</ph>은 제네렉 형식 정의의 런타임 형식 핸들이며 <ph id="ph2">&lt;paramref name="handle" /&gt;</ph>은 생성된 형식에서 만들어집니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">이 인스턴스의 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">부호 있는 32비트 정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>Gets an array of types that identify the optional custom modifiers of the field.</source>
          <target state="translated">필드의 선택적 사용자 지정 한정자를 식별하는 형식의 배열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the optional custom modifiers of the current field, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>와 같은 현재 필드의 선택적 사용자 지정 한정자를 식별하는 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> 관리 되는 컴파일러의 디자이너에 대 한 메서드가 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">사용자 지정 한정자에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> 및 관련 클래스에는 <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> 네임 스페이스 및 ECMA Partition II 설명서에 있는 메타 데이터 사양입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인으로 제공됩니다. MSDN의 <bpt id="p1">[</bpt>ECMA C# 및 공용 언어 인프라 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> 및 Ecma International 웹 사이트의 <bpt id="p2">[</bpt>표준 ECMA-335 - CLI(공용 언어 인프라)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Returns a literal value associated with the field by a compiler.</source>
          <target state="translated">컴파일러에서 필드와 연결한 리터럴 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that contains the literal value associated with the field.</source>
          <target state="translated">필드와 연결된 리터럴 값이 포함된 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>If the literal value is a class type with an element value of zero, the return value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">리터럴 값이 요소 값 0인 클래스 형식인 경우 반환 값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>This method is provided for designers of managed compilers and code analyzers.</source>
          <target state="translated">이 메서드는 관리 되는 컴파일러 및 코드 분석기의 디자이너를 위해 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>This method can be used in both the execution context and the reflection-only context.</source>
          <target state="translated">실행 컨텍스트 및 리플렉션 전용 컨텍스트에 모두에서이 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties.</source>
          <target state="translated">관리 되지 않는 메타 데이터에 상수 테이블 필드, 매개 변수 및 속성에 대 한 상수 값을 저장을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Constant information does not directly influence runtime behavior.</source>
          <target state="translated">상수 정보 런타임 동작 직접 영향을 미치지 않습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>Compilers inspect this information, at compile time, when importing metadata.</source>
          <target state="translated">컴파일러에는 컴파일 타임에이 정보를 검사 메타 데이터를 가져올 때.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits.</source>
          <target state="translated">을 사용 하는 경우 컴파일러에서 Microsoft MSIL (intermediate language) 스트림이에 상수 값이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>There are no MSIL instructions that can be used to access the Constant table at run time.</source>
          <target state="translated">런타임 시 상수 테이블에 액세스 하는 데 사용할 수 없는 MSIL 지침이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>For more information on constant values and the Constant table, see the ECMA Partition II documentation.</source>
          <target state="translated">상수 값과의 고정 테이블에 대 한 자세한 내용은 ECMA Partition II 설명서를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인으로 제공됩니다. MSDN의 <bpt id="p1">[</bpt>ECMA C# 및 공용 언어 인프라 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> 및 Ecma International 웹 사이트의 <bpt id="p2">[</bpt>표준 ECMA-335 - CLI(공용 언어 인프라)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The Constant table in unmanaged metadata does not contain a constant value for the current field.</source>
          <target state="translated">관리되지 않는 메타데이터의 고정 테이블에 현재 필드에 대한 상수 값이 없습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The type of the value is not one of the types permitted by the Common Language Specification (CLS).</source>
          <target state="translated">값의 형식이 CLS(공용 언어 사양)에서 허용하는 형식 중 하나가 아닙니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.</source>
          <target state="translated">ECMA Partition II 사양, 메타데이터 논리 형식: 기타 구조, 서명에 사용된 요소 형식을 참조하세요.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRawConstantValue">
          <source>The constant value for the field is not set.</source>
          <target state="translated">필드에 대한 상수 값이 설정되지 않은 경우</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>Gets an array of types that identify the required custom modifiers of the property.</source>
          <target state="translated">속성의 필수 사용자 지정 한정자를 식별하는 형식의 배열을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects that identify the required custom modifiers of the current property, such as <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Runtime.CompilerServices.IsConst" /&gt;</ph>와 같은 현재 속성의 필수적 사용자 지정 한정자를 식별하는 <ph id="ph3">&lt;see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" /&gt;</ph> 개체의 배열입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> methods are provided for designers of managed compilers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A&gt;</ph> 관리 되는 컴파일러의 디자이너에 대 한 메서드가 제공 됩니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>For more information on custom modifiers, see <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> and related classes in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> namespace and the metadata specification in the ECMA Partition II documentation.</source>
          <target state="translated">사용자 지정 한정자에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.IsBoxed&gt;</ph> 및 관련 클래스에는 <ph id="ph2">&lt;xref:System.Runtime.CompilerServices&gt;</ph> 네임 스페이스 및 ECMA Partition II 설명서에 있는 메타 데이터 사양입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
          <source>The documentation is available online; see <bpt id="p1">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id="p2">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.</source>
          <target state="translated">이 설명서는 온라인으로 제공됩니다. MSDN의 <bpt id="p1">[</bpt>ECMA C# 및 공용 언어 인프라 표준<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> 및 Ecma International 웹 사이트의 <bpt id="p2">[</bpt>표준 ECMA-335 - CLI(공용 언어 인프라)<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The object whose field value will be returned.</source>
          <target state="translated">필드 값이 반환될 개체입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>When overridden in a derived class, returns the value of a field supported by a given object.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 지정된 개체에서 지원하는 필드의 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>An object containing the value of the field reflected by this instance.</source>
          <target state="translated">이 인스턴스에서 반영한 필드의 값을 포함하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> is ignored.</source>
          <target state="translated">필드가 정적 이면 <ph id="ph1">`obj`</ph> 는 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">Static이 아닌 필드에 대 한 <ph id="ph1">`obj`</ph> 상속 하거나 필드를 선언 하는 클래스의 인스턴스여야 합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Note that the return type of <ph id="ph1">`GetValue`</ph> is <ph id="ph2">`Object`</ph>.</source>
          <target state="translated">반환 형식이 참고 <ph id="ph1">`GetValue`</ph> 은 <ph id="ph2">`Object`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>For example, if the field holds a Boolean primitive value, an instance of <ph id="ph1">`Object`</ph> with the appropriate Boolean value is returned.</source>
          <target state="translated">예를 들어 필드가 기본 부울 갖는 경우 값을 인스턴스 <ph id="ph1">`Object`</ph> 와 적절 한 부울 값이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Before returning the value, <ph id="ph1">`GetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">값을 반환 하기 전에 <ph id="ph1">`GetValue`</ph> 사용자에 대 한 액세스 권한이 있는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Access restrictions are ignored for fully trusted code.</source>
          <target state="translated">완전히 신뢰할 수 있는 코드에 대 한 액세스 제한이 없습니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</source>
          <target state="translated">즉, private 생성자, 메서드, 필드 및 속성 액세스 하 고 수 코드를 완전히 신뢰할 수 있는 경우 리플렉션을 통해 호출 합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>,이 메서드를 사용 하 여 호출자에 게 부여 된 경우 public이 아닌 멤버에 액세스할 수 수 <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> 플래그 지정 및 public이 아닌 멤버의 권한 부여 집합은 호출자에 게 제한 하는 경우 집합 또는 하위 집합을 부여 해당 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(참조 <bpt id="p1">[</bpt>리플렉션의 보안 고려 사항<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">이 기능을 사용하려면 응용 프로그램이 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 이상을 대상으로 해야 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> method to retrieve the value of a static field.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> 정적 필드의 값을 검색 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Note that the value of the <ph id="ph1">`obj`</ph> argument is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">값은 <ph id="ph1">`obj`</ph> 인수는 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The following example retrieves an array of <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that represents the fields of the <ph id="ph2">`FieldsClass`</ph> type, and then calls the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> to display the value of each field for the <ph id="ph4">`fieldsInst`</ph> object.</source>
          <target state="translated">다음 예제에서는 배열을 검색 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo&gt;</ph> 의 필드를 나타내는 개체는 <ph id="ph2">`FieldsClass`</ph> 유형 및 호출은 <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetValue%2A&gt;</ph> 의 각 필드의 값을 표시 하는 <ph id="ph4">`fieldsInst`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 이식 가능한 클래스 라이브러리에서 대신 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The field is non-static and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">필드가 비정적이며 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>A field is marked literal, but the field does not have one of the accepted literal types.</source>
          <target state="translated">필드가 리터럴로 표시되지만 필드에 허용된 리터럴 형식이 하나도 없는 경우</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the Portable Class Library, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 이식 가능한 클래스 라이브러리에서 대신 기본 클래스 예외 <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">호출자에게 이 필드에 액세스할 수 있는 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>The method is neither declared nor inherited by the class of <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 클래스에서 메서드를 선언하지도 않고 상속하지도 않은 경우</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValue(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.</source>
          <target state="translated">특정 위치에 대한 관리되는 포인터와 해당 위치에 저장될 수 있는 형식의 런타임 표현을 캡슐화하는 <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> 구조체입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>Returns the value of a field supported by a given object.</source>
          <target state="translated">지정된 개체에서 지원하는 필드 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>An <ph id="ph1">&lt;see langword="Object" /&gt;</ph> containing a field value.</source>
          <target state="translated">필드 값을 포함하는 <ph id="ph1">&lt;see langword="Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</source>
          <target state="translated">호출자에게 대체할 수 있는 CLS(공용 언어 사양)가 필요하지만 이 메서드가 대신 호출된 경우</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>Gets a value indicating whether the potential visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>에서 이 필드의 잠재적 표시 유형을 설명하는지 여부를 나타내는 값을 가져옵니다. 즉, 이 필드는 같은 어셈블리의 다른 형식에만 표시되고 어셈블리 외부의 파생 형식에는 표시되지 않습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the visibility of this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Assembly" /&gt;</ph>에서 이 필드의 표시 유형을 정확하게 설명하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The actual visibility of a field is limited by the visibility of its type.</source>
          <target state="translated">필드의 실제 표시 유형은 해당 형식의 표시 유형으로 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph> property might be <ph id="ph2">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph> 속성 수 <ph id="ph2">`true`</ph> 필드의 경우 있지만 경우 개인 중첩 형식의 필드는 필드를 포함 하는 형식 외부에서 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType&gt;</ph> if the only visibility modifier is <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic).</source>
          <target state="translated">필드의 표시 유형을 정확 하 게 설명 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Assembly?displayProperty=nameWithType&gt;</ph> 유일한 표시 한정자가 있는 경우 <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> Visual basic에서).</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>This property is <ph id="ph1">`false`</ph> for fields that are <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++); use the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.</source>
          <target state="translated">이 속성은 <ph id="ph1">`false`</ph> 필드에 대 한 <ph id="ph2">`protected internal`</ph> C#에서 (<ph id="ph3">`Protected Friend`</ph> Visual Basic의 <ph id="ph4">`protected public`</ph> c + +에서); 사용 하 여는 <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> 속성을 해당 필드를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">다음 코드 예제에서는 다양 한 수준의 표시 유형 필드를 정의 하 고 값을 표시 자신의 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Visual Basic 및 C# 언어와 필드를 정의할 수 없습니다 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> 가시성; 액세스 수준을 c + + 예제 나타나도록 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>Gets a value indicating whether the visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; that is, the field is visible only within its class and derived classes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>에서 이 필드의 표시 유형을 설명하는지 여부를 나타내는 값을 가져옵니다. 즉, 이 필드는 해당 클래스 및 파생 클래스에만 표시됩니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.Family" /&gt;</ph>에서 이 필드에 대한 액세스를 정확하게 설명하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType&gt;</ph> if the only visibility modifier is <ph id="ph2">`protected`</ph>.</source>
          <target state="translated">필드의 표시 유형을 정확 하 게 설명 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.Family?displayProperty=nameWithType&gt;</ph> 유일한 표시 한정자가 있는 경우 <ph id="ph2">`protected`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>This property is <ph id="ph1">`false`</ph> for fields that are <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++); use the <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property to identify such fields.</source>
          <target state="translated">이 속성은 <ph id="ph1">`false`</ph> 필드에 대 한 <ph id="ph2">`protected internal`</ph> C#에서 (<ph id="ph3">`Protected Friend`</ph> Visual Basic의 <ph id="ph4">`protected public`</ph> c + +에서); 사용 하 여는 <ph id="ph5">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> 속성을 해당 필드를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">다음 코드 예제에서는 다양 한 수준의 표시 유형 필드를 정의 하 고 값을 표시 자신의 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamily">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Visual Basic 및 C# 언어와 필드를 정의할 수 없습니다 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> 가시성; 액세스 수준을 c + + 예제 나타나도록 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>Gets a value indicating whether the visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>에서 이 필드의 표시 유형을 설명하는지 여부를 나타내는 값을 가져옵니다. 즉, 이 필드는 같은 어셈블리에 있는 경우에만 파생 클래스에서 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /&gt;</ph>에서 이 필드에 대한 액세스를 정확하게 설명하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>If a field has <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem&gt;</ph> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.</source>
          <target state="translated">필드에 있으면 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem&gt;</ph> 수준 표시 유형이 호출 될 수 같은 어셈블리에도 사용 되는 파생된 클래스에 있는 멤버에서 있지만 다른 형식 없습니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> if the visibility modifier is <ph id="ph2">`protected private`</ph> in C++.</source>
          <target state="translated">필드의 표시 유형을 정확 하 게 설명 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> 표시 한정자가 있으면 <ph id="ph2">`protected private`</ph> c + +에서입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>Fields with this visibility cannot be defined in Visual Basic or C#.</source>
          <target state="translated">Visual Basic 또는 C#에서이 표시 유형으로 된 필드를 정의할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">다음 코드 예제에서는 다양 한 수준의 표시 유형 필드를 정의 하 고 값을 표시 자신의 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Visual Basic 및 C# 언어와 필드를 정의할 수 없습니다 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> 가시성; 액세스 수준을 c + + 예제 나타나도록 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>Gets a value indicating whether the potential visibility of this field is described by <ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>에서 이 필드의 잠재적 표시 유형을 설명하는지 여부를 나타내는 값을 가져옵니다. 즉, 이 필드는 파생 클래스(있는 경우) 및 같은 어셈블리의 클래스에서 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to this field is exactly described by <ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="F:System.Reflection.FieldAttributes.FamORAssem" /&gt;</ph>에서 이 필드에 대한 액세스를 정확하게 설명하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>If a field has <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem&gt;</ph> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</source>
          <target state="translated">필드에 있으면 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem&gt;</ph> 수준 표시를 호출할 수 있습니다 파생된 클래스에서 또는 동일한 어셈블리의 모든 멤버에서 있지만 다른 형식 없습니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The actual visibility of a field is limited by the visibility of its type.</source>
          <target state="translated">필드의 실제 표시 유형은 해당 형식의 표시 유형으로 제한 됩니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> property might be <ph id="ph2">`true`</ph> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph> 속성 수 <ph id="ph2">`true`</ph> 필드의 경우 있지만 경우 개인 중첩 형식의 필드는 필드를 포함 하는 형식 외부에서 볼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The visibility of a field is exactly described by <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType&gt;</ph> if the visibility modifier is <ph id="ph2">`protected internal`</ph> in C# (<ph id="ph3">`Protected Friend`</ph> in Visual Basic, <ph id="ph4">`protected public`</ph> in C++).</source>
          <target state="translated">필드의 표시 유형을 정확 하 게 설명 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamORAssem?displayProperty=nameWithType&gt;</ph> 표시 한정자가 있으면 <ph id="ph2">`protected internal`</ph> C#에서 (<ph id="ph3">`Protected Friend`</ph> Visual Basic의 <ph id="ph4">`protected public`</ph> c + +에서).</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The following code example defines fields with varying levels of visibility, and displays the values of their <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> properties.</source>
          <target state="translated">다음 코드 예제에서는 다양 한 수준의 표시 유형 필드를 정의 하 고 값을 표시 자신의 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsAssembly%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsFamily%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
          <source>The Visual Basic and C# languages cannot define fields with <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> visibility; that access level appears only in the C++ example.</source>
          <target state="translated">Visual Basic 및 C# 언어와 필드를 정의할 수 없습니다 <ph id="ph1">&lt;xref:System.Reflection.FieldAttributes.FamANDAssem?displayProperty=nameWithType&gt;</ph> 가시성; 액세스 수준을 c + + 예제 나타나도록 합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Gets a value indicating whether the field can only be set in the body of the constructor.</source>
          <target state="translated">필드가 생성자의 본문에만 적용될 수 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="InitOnly" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">필드에 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 특성 집합이 있으면 <ph id="ph2">&lt;see langword="InitOnly" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>If the returned value is <ph id="ph1">`true`</ph>, the field can only be initialized, and is read-only thereafter.</source>
          <target state="translated">반환된 값이 <ph id="ph1">`true`</ph>, 필드를 초기화할 수만 이며 그 이후에 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>To get the <ph id="ph1">`IsInitOnly`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">가져오려는 <ph id="ph1">`IsInitOnly`</ph> 속성을 클래스를 먼저 가져온 <ph id="ph2">`Type`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>, 가져오기는 <ph id="ph2">`FieldInfo`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsInitOnly`</ph> property.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>, 가져오기는 <ph id="ph2">`IsInitOnly`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>To access a non-public field, combine <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph> with either or both of <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType&gt;</ph> in the <ph id="ph4">`GetField`</ph> method.</source>
          <target state="translated">Public이 아닌 필드에 액세스 하려면 결합 <ph id="ph1">&lt;xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType&gt;</ph> 중 하나 또는 모두와 <ph id="ph2">&lt;xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType&gt;</ph> 에 <ph id="ph4">`GetField`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>The <ph id="ph1">`IsInitOnly`</ph> property is set when the <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType&gt;</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsInitOnly`</ph> 속성을 설정 하는 경우는 <ph id="ph2">&lt;xref:System.Reflection.FieldAttributes.InitOnly?displayProperty=nameWithType&gt;</ph> 특성이 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>In the following example, two fields are created.</source>
          <target state="translated">다음 예제에서는 두 개의 필드가 만들어집니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>The second field is read-only, having no set accessor, and <ph id="ph1">`IsInitOnly`</ph> is set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">두 번째 필드는 읽기 전용 이며 set 접근자가 없고 및 <ph id="ph1">`IsInitOnly`</ph> 로 설정 된 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Myfielda - A- modified, IsInitOnly = False</source>
          <target state="translated">Myfielda - A- modified, IsInitOnly = False</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsInitOnly">
          <source>Myfieldb - B readonly field, IsInitOnly = True</source>
          <target state="translated">Myfieldb - B readonly field, IsInitOnly = True</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>Gets a value indicating whether the value is written at compile time and cannot be changed.</source>
          <target state="translated">값을 컴파일 타임에만 쓰고 변경할 수 없는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="Literal" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">필드에 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 특성 집합이 있으면 <ph id="ph2">&lt;see langword="Literal" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>The <ph id="ph1">`IsLiteral`</ph> property is set when the <ph id="ph2">`FieldAttributes.Literal`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsLiteral`</ph> 속성을 설정 하는 경우는 <ph id="ph2">`FieldAttributes.Literal`</ph> 특성이 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsLiteral">
          <source>If this attribute is set, the field cannot be changed and is constant.</source>
          <target state="translated">이 특성을 설정 하는 경우 필드를 변경할 수 없습니다 하며 일정.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>Gets a value indicating whether this field has the <ph id="ph1">&lt;see langword="NotSerialized" /&gt;</ph> attribute.</source>
          <target state="translated">이 필드에 <ph id="ph1">&lt;see langword="NotSerialized" /&gt;</ph> 특성이 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field has the <ph id="ph2">&lt;see langword="NotSerialized" /&gt;</ph> attribute set; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">필드에 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 특성 집합이 있으면 <ph id="ph2">&lt;see langword="NotSerialized" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>The <ph id="ph1">`IsNotSerialized`</ph> property returns <ph id="ph2">`true`</ph> when the field is marked with the <ph id="ph3">`FieldAttributes.NotSerialized`</ph> flag.</source>
          <target state="translated"><ph id="ph1">`IsNotSerialized`</ph> 속성에서 반환 <ph id="ph2">`true`</ph> 필드와 표시 된 경우는 <ph id="ph3">`FieldAttributes.NotSerialized`</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.</source>
          <target state="translated">필드에서이 플래그를 설정 하는 경우 필드 형식이 원격으로 연결할 때 직렬화 필요가 없습니다 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsNotSerialized">
          <source>The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.</source>
          <target state="translated">다음 예제에서는 MyClass 필드의 필드 정보를 가져오고, 필드를 serialize 할 수 있는지 확인 하 고 결과 표시 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source>Gets a value indicating whether the corresponding <ph id="ph1">&lt;see langword="PinvokeImpl" /&gt;</ph> attribute is set in <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>.</source>
          <target state="translated">해당 <ph id="ph1">&lt;see langword="PinvokeImpl" /&gt;</ph> 속성이 <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>에 설정되어 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="PinvokeImpl" /&gt;</ph> attribute is set in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 특성이 <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>에 설정되어 있으면 <ph id="ph2">&lt;see langword="PinvokeImpl" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPinvokeImpl">
          <source>The following example creates a class and displays the name, field and <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A&gt;</ph> property value of the field.</source>
          <target state="translated">다음 예제에서는 클래스를 만들고, 이름을 표시 하는 필드 및 <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A&gt;</ph> 필드의 속성 값입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>Gets a value indicating whether the field is private.</source>
          <target state="translated">private 필드인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field is private; otherwise; <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">private 필드이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>Private fields are accessible only from member functions.</source>
          <target state="translated">전용 필드는 멤버 함수 에서만에서 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>The <ph id="ph1">`IsPrivate`</ph> property is set when the <ph id="ph2">`FieldAttributes.Private`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsPrivate`</ph> 속성을 설정 하는 경우는 <ph id="ph2">`FieldAttributes.Private`</ph> 특성이 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>To get the <ph id="ph1">`IsPrivate`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">가져오려는 <ph id="ph1">`IsPrivate`</ph> 속성을 클래스를 먼저 가져온 <ph id="ph2">`Type`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>, 가져오기는 <ph id="ph2">`FieldInfo`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsPrivate`</ph> property.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>, 가져오기는 <ph id="ph2">`IsPrivate`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>To access a non-public field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph>, and either <ph id="ph3">`Static`</ph> or <ph id="ph4">`Instance`</ph> in the <ph id="ph5">`GetField`</ph> method.</source>
          <target state="translated">Public이 아닌 필드에 액세스 하려면 설정는 <ph id="ph1">`BindingFlags`</ph> 를 <ph id="ph2">`NonPublic`</ph>, 고 <ph id="ph3">`Static`</ph> 또는 <ph id="ph4">`Instance`</ph> 에 <ph id="ph5">`GetField`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPrivate">
          <source>The following example returns a value indicating whether or not the field of the class is private.</source>
          <target state="translated">다음 예제에서는 클래스의 필드는 private 인지 여부를 나타내는 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>Gets a value indicating whether the field is public.</source>
          <target state="translated">public 필드인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this field is public; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">public 필드이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>Public fields are accessible everywhere their corresponding classes are visible.</source>
          <target state="translated">공용 필드는 액세스할 수 everywhere 해당 클래스가 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>The <ph id="ph1">`IsPublic`</ph> property is set when the <ph id="ph2">`FieldAttributes.Public`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsPublic`</ph> 속성을 설정 하는 경우는 <ph id="ph2">`FieldAttributes.Public`</ph> 특성이 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>To get the <ph id="ph1">`IsPublic`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">가져오려는 <ph id="ph1">`IsPublic`</ph> 속성을 클래스를 먼저 가져온 <ph id="ph2">`Type`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>, 가져오기는 <ph id="ph2">`FieldInfo`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsPublic`</ph> property.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>, 가져오기는 <ph id="ph2">`IsPublic`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>If the field is other than public, it is protected and cannot be readily accessed.</source>
          <target state="translated">보호 된 필드가 public이 아닌 경우 쉽게 액세스할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>To access a nonpublic field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph>, specify either <ph id="ph3">`BindingFlags.Instance`</ph> or <ph id="ph4">`BindingFlags.Static`</ph>, and use this for the <ph id="ph5">`GetField`</ph> method.</source>
          <target state="translated">Public이 아닌 필드에 액세스 하려면 설정는 <ph id="ph1">`BindingFlags`</ph> 를 <ph id="ph2">`NonPublic`</ph>, 지정 <ph id="ph3">`BindingFlags.Instance`</ph> 또는 <ph id="ph4">`BindingFlags.Static`</ph>에 대해이 사용 하는 <ph id="ph5">`GetField`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsPublic">
          <source>The following example returns a value indicating whether or not the field of the class is public or private.</source>
          <target state="translated">다음 예제에서는 클래스의 필드는 공용 또는 개인 인지 여부를 나타내는 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.</source>
          <target state="translated">현재 필드가 현재 신뢰 수준에서 보안에 중요한 필드이거나 보안 안전에 중요한 필드인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current field is security-critical or security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is transparent.</source>
          <target state="translated">현재 필드가 보안에 중요한 필드이거나 보안 안전에 중요한 필드인 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 투명 필드인 경우 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> 속성 공용 언어 런타임 (CLR)에 의해 결정 된 가장 현재 신뢰 수준에서 필드의 투명도 수준을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">다음 표에서 이러한 속성의 조합은 같습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Security level</source>
          <target state="translated">보안 수준</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">위험</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Safe critical</source>
          <target state="translated">안전 중요</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">투명</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">이러한 속성을 사용 하는 것이 어셈블리 및 형식 및 멤버의 보안 주석을 검사 하 고 현재 신뢰 수준을 확인 런타임 규칙을 복제 하는 보다 훨씬 간단 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">부분 신뢰 어셈블리에 대 한이 속성의 값은 어셈블리의 현재 신뢰 수준에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">(예를 들어 샌드 박싱된 응용 프로그램 도메인) 부분적으로 신뢰할 수 있는 응용 프로그램 도메인에 로드 된 어셈블리가 있으면 런타임에서 어셈블리의 보안 주석을 무시 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">어셈블리 및 모든 해당 형식은 투명 하 게 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">런타임에서는 어셈블리가 위치 (예를 들어 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인)에 완전히 신뢰할 수 있는 응용 프로그램 도메인에 로드 되어 있는 경우에 부분 신뢰 어셈블리의 보안 주석에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">반면, 신뢰할 수 있는 어셈블리 (즉, 강력한 이름의 어셈블리를 전역 어셈블리 캐시에 설치 된)은 응용 프로그램 도메인의 신뢰 수준에 관계 없이 완전히 신뢰 되어 로드 항상 현재 신뢰 수준은 완전히 신뢰할 수 있는 항상 이므로.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">사용 하 여 어셈블리 및 응용 프로그램 도메인의 현재 신뢰 수준을 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">리플렉션 및 투명도 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>리플렉션의 보안 고려 사항<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">투명도 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>보안 변경 내용<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Gets a value that indicates whether the current field is security-safe-critical at the current trust level.</source>
          <target state="translated">현재 필드가 현재 신뢰 수준에서 보안 안전에 중요한 필드인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current field is security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is security-critical or transparent.</source>
          <target state="translated">현재 필드가 현재 신뢰 수준에서 보안 안전에 중요한 필드인 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 보안에 중요한 필드이거나 투명 필드인 경우 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> 속성 공용 언어 런타임 (CLR)에 의해 결정 된 가장 현재 신뢰 수준에서 필드의 투명도 수준을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">다음 표에서 이러한 속성의 조합은 같습니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Security level</source>
          <target state="translated">보안 수준</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">위험</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Safe critical</source>
          <target state="translated">안전 중요</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">투명</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">이러한 속성을 사용 하는 것이 어셈블리 및 형식 및 멤버의 보안 주석을 검사 하 고 현재 신뢰 수준을 확인 런타임 규칙을 복제 하는 보다 훨씬 간단 합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">부분 신뢰 어셈블리에 대 한이 속성의 값은 어셈블리의 현재 신뢰 수준에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">(예를 들어 샌드 박싱된 응용 프로그램 도메인) 부분적으로 신뢰할 수 있는 응용 프로그램 도메인에 로드 된 어셈블리가 있으면 런타임에서 어셈블리의 보안 주석을 무시 합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">어셈블리 및 모든 해당 형식은 투명 하 게 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">런타임에서는 어셈블리가 위치 (예를 들어 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인)에 완전히 신뢰할 수 있는 응용 프로그램 도메인에 로드 되어 있는 경우에 부분 신뢰 어셈블리의 보안 주석에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">반면, 신뢰할 수 있는 어셈블리 (즉, 강력한 이름의 어셈블리를 전역 어셈블리 캐시에 설치 된)은 응용 프로그램 도메인의 신뢰 수준에 관계 없이 완전히 신뢰 되어 로드 항상 현재 신뢰 수준은 완전히 신뢰할 수 있는 항상 이므로.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">사용 하 여 어셈블리 및 응용 프로그램 도메인의 현재 신뢰 수준을 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">리플렉션 및 투명도 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>리플렉션의 보안 고려 사항<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">투명도 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>보안 변경 내용<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Gets a value that indicates whether the current field is transparent at the current trust level.</source>
          <target state="translated">현재 필드가 현재 신뢰 수준에서 투명 필드인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the field is security-transparent at the current trust level; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">필드가 현재 신뢰 수준에서 보안에 투명하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.FieldInfo.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A&gt;</ph> 속성 공용 언어 런타임 (CLR)에 의해 결정 된 가장 현재 신뢰 수준에서 필드의 투명도 수준을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">다음 표에서 이러한 속성의 조합은 같습니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Security level</source>
          <target state="translated">보안 수준</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">위험</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Safe critical</source>
          <target state="translated">안전 중요</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">투명</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">이러한 속성을 사용 하는 것이 어셈블리 및 형식 및 멤버의 보안 주석을 검사 하 고 현재 신뢰 수준을 확인 런타임 규칙을 복제 하는 보다 훨씬 간단 합니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</source>
          <target state="translated">부분 신뢰 어셈블리에 대 한이 속성의 값은 어셈블리의 현재 신뢰 수준에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">(예를 들어 샌드 박싱된 응용 프로그램 도메인) 부분적으로 신뢰할 수 있는 응용 프로그램 도메인에 로드 된 어셈블리가 있으면 런타임에서 어셈블리의 보안 주석을 무시 합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The assembly and all its types are treated as transparent.</source>
          <target state="translated">어셈블리 및 모든 해당 형식은 투명 하 게 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</source>
          <target state="translated">런타임에서는 어셈블리가 위치 (예를 들어 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인)에 완전히 신뢰할 수 있는 응용 프로그램 도메인에 로드 되어 있는 경우에 부분 신뢰 어셈블리의 보안 주석에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</source>
          <target state="translated">반면, 신뢰할 수 있는 어셈블리 (즉, 강력한 이름의 어셈블리를 전역 어셈블리 캐시에 설치 된)은 응용 프로그램 도메인의 신뢰 수준에 관계 없이 완전히 신뢰 되어 로드 항상 현재 신뢰 수준은 완전히 신뢰할 수 있는 항상 이므로.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>You can determine the current trust levels of assemblies and application domains by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">사용 하 여 어셈블리 및 응용 프로그램 도메인의 현재 신뢰 수준을 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For more information about reflection and transparency, see <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.</source>
          <target state="translated">리플렉션 및 투명도 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>리플렉션의 보안 고려 사항<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSecurityTransparent">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">투명도 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>보안 변경 내용<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>Gets a value indicating whether the corresponding <ph id="ph1">&lt;see langword="SpecialName" /&gt;</ph> attribute is set in the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> enumerator.</source>
          <target state="translated">해당 <ph id="ph1">&lt;see langword="SpecialName" /&gt;</ph> 특성이 <ph id="ph2">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph> 열거자에 설정되어 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="SpecialName" /&gt;</ph> attribute is set in <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> 특성이 <ph id="ph3">&lt;see cref="T:System.Reflection.FieldAttributes" /&gt;</ph>에 설정되어 있으면 <ph id="ph2">&lt;see langword="SpecialName" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</source>
          <target state="translated">이름으로 시작 하거나 밑줄 문자 (_)을 속성 접근자 메서드 오버 로드 된 연산자를 포함 하는 예 일부 컴파일러에서 특별 한 취급이 필요할 수 있는 이름입니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsSpecialName">
          <source>The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.</source>
          <target state="translated">다음 예제에서는 클래스의 필드 SpecialName이 특성을 포함 하는지 여부를 나타내는 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Gets a value indicating whether the field is static.</source>
          <target state="translated">정적 필드인지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this field is static; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 필드가 정적 필드이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>When a field is static, one copy of the field is shared by all instances of the type.</source>
          <target state="translated">필드가 정적 인지, 필드의 한 복사본만 유형의 모든 인스턴스에서 공유 됩니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>The <ph id="ph1">`IsStatic`</ph> property is set when the <ph id="ph2">`FieldAttributes.Static`</ph> attribute is set.</source>
          <target state="translated"><ph id="ph1">`IsStatic`</ph> 속성을 설정 하는 경우는 <ph id="ph2">`FieldAttributes.Static`</ph> 특성이 설정 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>To get the <ph id="ph1">`IsStatic`</ph> property, first get the class <ph id="ph2">`Type`</ph>.</source>
          <target state="translated">가져오려는 <ph id="ph1">`IsStatic`</ph> 속성을 클래스를 먼저 가져온 <ph id="ph2">`Type`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>From the <ph id="ph1">`Type`</ph>, get the <ph id="ph2">`FieldInfo`</ph>.</source>
          <target state="translated"><ph id="ph1">`Type`</ph>, 가져오기는 <ph id="ph2">`FieldInfo`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>From the <ph id="ph1">`FieldInfo`</ph>, get the <ph id="ph2">`IsStatic`</ph> property.</source>
          <target state="translated"><ph id="ph1">`FieldInfo`</ph>, 가져오기는 <ph id="ph2">`IsStatic`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>To access a non-public field, set the <ph id="ph1">`BindingFlags`</ph> to <ph id="ph2">`NonPublic`</ph> in the <ph id="ph3">`GetField`</ph> method and set the accessibility to <ph id="ph4">`Instance`</ph> or <ph id="ph5">`Static`</ph>.</source>
          <target state="translated">Public이 아닌 필드에 액세스 하려면 설정는 <ph id="ph1">`BindingFlags`</ph> 를 <ph id="ph2">`NonPublic`</ph> 에 <ph id="ph3">`GetField`</ph> 메서드 접근성을 설정 하 고 <ph id="ph4">`Instance`</ph> 또는 <ph id="ph5">`Static`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>The following example determines whether the specified field is static and displays the result.</source>
          <target state="translated">다음 예제에서는 지정된 된 필드는 정적이 고 결과 표시 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Myfielda - A private field; IsStatic - False</source>
          <target state="translated">Myfielda-전용 필드입니다. IsStatic-False</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.IsStatic">
          <source>Myfieldb - B static field; IsStatic - True</source>
          <target state="translated">Myfieldb-B 정적 필드입니다. IsStatic-True</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a field.</source>
          <target state="translated">이 멤버가 필드임을 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> value indicating that this member is a field.</source>
          <target state="translated">이 멤버가 필드임을 나타내는 <ph id="ph1">&lt;see cref="T:System.Reflection.MemberTypes" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>.</source>
          <target state="translated">이 속성을 재정의 <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Therefore, when you examine a set of <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects — for example, the array returned by <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> — the <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property returns <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType&gt;</ph> only when a given member is a field.</source>
          <target state="translated">따라서 집합을 조사할 때 <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> 개체-예를 들어 반환 하는 배열 <ph id="ph2">&lt;xref:System.Type.GetMembers%2A&gt;</ph> -는 <ph id="ph3">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> 속성에서 반환 <ph id="ph4">&lt;xref:System.Reflection.MemberTypes.Field?displayProperty=nameWithType&gt;</ph> 지정된 된 멤버는 필드를은 하는 경우에 합니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>The following example determines whether the specified member is a field and displays the result.</source>
          <target state="translated">다음 예제에서는 지정된 된 멤버는 필드 하 고 결과 표시 하는지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Reflection.FieldInfo</source>
          <target state="translated">Reflection.FieldInfo</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.FieldInfo.MemberType">
          <source>Myfield.field - a private field; MemberType is a Field</source>
          <target state="translated">Myfield.field-전용 필드입니다. MemberType 필드입니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The first object to compare.</source>
          <target state="translated">비교할 첫 번째 개체입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The second object to compare.</source>
          <target state="translated">비교할 두 번째 개체입니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects are equal.</source>
          <target state="translated">두 <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> 개체가 같은지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="left" /&gt;</ph>와 같으면 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>이고, 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The first object to compare.</source>
          <target state="translated">비교할 첫 번째 개체입니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>The second object to compare.</source>
          <target state="translated">비교할 두 번째 개체입니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source>Indicates whether two <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> objects are not equal.</source>
          <target state="translated">두 <ph id="ph1">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> 개체가 같지 않은지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is not equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="left" /&gt;</ph>와 다르면 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>이고, 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="T:System.Reflection.FieldInfo">
          <source>Sets the value of the field for the given object to the given value.</source>
          <target state="translated">지정된 값에 대한 개체의 필드 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The object whose field value will be set.</source>
          <target state="translated">필드 값이 설정될 개체입니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The value to assign to the field.</source>
          <target state="translated">필드에 할당할 값입니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Sets the value of the field supported by the given object.</source>
          <target state="translated">지정된 개체에서 지원하는 필드 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>This method will assign <ph id="ph1">`value`</ph> to the field reflected by this instance on object <ph id="ph2">`obj`</ph>.</source>
          <target state="translated">이 메서드는 할당 <ph id="ph1">`value`</ph> 개체에이 인스턴스에서 반영한 필드에 <ph id="ph2">`obj`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> will be ignored.</source>
          <target state="translated">필드가 정적 이면 <ph id="ph1">`obj`</ph> 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">Static이 아닌 필드에 대 한 <ph id="ph1">`obj`</ph> 상속 하거나 필드를 선언 하는 클래스의 인스턴스여야 합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The new value is passed as an <ph id="ph1">`Object`</ph>.</source>
          <target state="translated">새 값으로 전달 되는 <ph id="ph1">`Object`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>For example, if the field's type is Boolean, an instance of <ph id="ph1">`Object`</ph> with the appropriate Boolean value is passed.</source>
          <target state="translated">예를 들어, 필드의 형식이 부울, 인스턴스의 <ph id="ph1">`Object`</ph> 와 적절 한 부울 값이 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Before setting the value, <ph id="ph1">`SetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">값을 설정 하기 전에 <ph id="ph1">`SetValue`</ph> 사용자에 대 한 액세스 권한이 있는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>This final method is a convenience method for calling the following <ph id="ph1">`SetValue`</ph> method.</source>
          <target state="translated">이 마지막 메서드는 다음을 호출 하는 데 편리한 메서드입니다 <ph id="ph1">`SetValue`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</source>
          <target state="translated">완전히 신뢰할 수 있는 코드에 액세스 하 고 private 생성자, 메서드, 필드 및 리플렉션을 사용 하 여 속성을 호출 하는 데 필요한 권한이 있습니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>,이 메서드를 사용 하 여 호출자에 게 부여 된 경우 public이 아닌 멤버에 액세스할 수 수 <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> 플래그 지정 및 public이 아닌 멤버의 권한 부여 집합은 호출자에 게 제한 하는 경우 집합 또는 하위 집합을 부여 해당 합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(참조 <bpt id="p1">[</bpt>리플렉션의 보안 고려 사항<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">이 기능을 사용하려면 응용 프로그램이 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 이상을 대상으로 해야 합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.</source>
          <target state="translated">다음 예제에서는 필드의 값을 설정, 및 값을 표시, 필드를 수정 가져오고 결과 표시 합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>, instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 <bpt id="p2">[</bpt>이식 가능한 클래스 라이브러리<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>에서 대신 기본 클래스 예외 <ph id="ph1">&lt;see cref="T:System.MemberAccessException" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">호출자에게 이 필드에 액세스할 수 있는 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>In the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id="p2">[</bpt>Portable Class Library<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> instead.</source>
          <target state="translated"><bpt id="p1">[</bpt>Windows 스토어 앱용 .NET<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> 또는 <bpt id="p2">[</bpt>이식 가능한 클래스 라이브러리<ept id="p2">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>에서 대신 <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>을 catch합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the field is an instance field.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 필드는 인스턴스 필드인 경우</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The field does not exist on the object.</source>
          <target state="translated">필드가 이벤트에 없는 경우</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter cannot be converted and stored in the field.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 매개 변수를 변환하고 필드에 저장할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>for updating init-only fields.</source>
          <target state="translated">초기화 전용 필드를 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The object whose field value will be set.</source>
          <target state="translated">필드 값이 설정될 개체입니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The value to assign to the field.</source>
          <target state="translated">필드에 할당할 값입니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>A field of <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> that specifies the type of binding that is desired (for example, <ph id="ph2">&lt;see langword="Binder.CreateInstance" /&gt;</ph> or <ph id="ph3">&lt;see langword="Binder.ExactBinding" /&gt;</ph>).</source>
          <target state="translated">필요한 바인딩 형식을 지정하는 <ph id="ph1">&lt;see langword="Binder" /&gt;</ph> 필드(예: <ph id="ph2">&lt;see langword="Binder.CreateInstance" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="Binder.ExactBinding" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection.</source>
          <target state="translated">리플렉션을 통해 바인딩, 인수의 형식 변환 및 멤버 호출을 가능하게 하는 속성 집합입니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, then <ph id="ph2">&lt;see langword="Binder.DefaultBinding" /&gt;</ph> is used.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>바인더<ept id="p1">&lt;/c&gt;</ept>가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이면 <ph id="ph2">&lt;see langword="Binder.DefaultBinding" /&gt;</ph>이 사용됩니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The software preferences of a particular culture.</source>
          <target state="translated">특정 문화권의 소프트웨어 기본 설정입니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>When overridden in a derived class, sets the value of the field supported by the given object.</source>
          <target state="translated">파생 클래스에 재정의할 때 지정된 개체에서 지원하는 필드 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>This method will assign <ph id="ph1">`value`</ph> to the field reflected by this instance on <ph id="ph2">`obj`</ph>.</source>
          <target state="translated">이 메서드는 할당 <ph id="ph1">`value`</ph> 이 인스턴스에서 반영한 필드에 <ph id="ph2">`obj`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>If the field is static, <ph id="ph1">`obj`</ph> will be ignored.</source>
          <target state="translated">필드가 정적 이면 <ph id="ph1">`obj`</ph> 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>For non-static fields, <ph id="ph1">`obj`</ph> should be an instance of a class that inherits or declares the field.</source>
          <target state="translated">Static이 아닌 필드에 대 한 <ph id="ph1">`obj`</ph> 상속 하거나 필드를 선언 하는 클래스의 인스턴스여야 합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The new value is passed as an <ph id="ph1">`Object`</ph>.</source>
          <target state="translated">새 값으로 전달 되는 <ph id="ph1">`Object`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>For example, if the field's type is <ph id="ph1">`Boolean`</ph>, an instance of <ph id="ph2">`Object`</ph> with the appropriate Boolean value is passed.</source>
          <target state="translated">예를 들어, 필드의 형식이 <ph id="ph1">`Boolean`</ph>, 인스턴스의 <ph id="ph2">`Object`</ph> 와 적절 한 부울 값이 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Before setting the value, <ph id="ph1">`SetValue`</ph> checks to see if the user has access permission.</source>
          <target state="translated">값을 설정 하기 전에 <ph id="ph1">`SetValue`</ph> 사용자에 대 한 액세스 권한이 있는지를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</source>
          <target state="translated">완전히 신뢰할 수 있는 코드에 액세스 하 고 private 생성자, 메서드, 필드 및 리플렉션을 사용 하 여 속성을 호출 하는 데 필요한 권한이 있습니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>,이 메서드를 사용 하 여 호출자에 게 부여 된 경우 public이 아닌 멤버에 액세스할 수 수 <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> 플래그 지정 및 public이 아닌 멤버의 권한 부여 집합은 호출자에 게 제한 하는 경우 집합 또는 하위 집합을 부여 해당 합니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(참조 <bpt id="p1">[</bpt>리플렉션의 보안 고려 사항<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">이 기능을 사용하려면 응용 프로그램이 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 이상을 대상으로 해야 합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The caller does not have permission to access this field.</source>
          <target state="translated">호출자에게 이 필드에 액세스할 수 있는 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and the field is an instance field.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 필드는 인스턴스 필드인 경우</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The field does not exist on the object.</source>
          <target state="translated">필드가 이벤트에 없는 경우</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> parameter cannot be converted and stored in the field.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 매개 변수를 변환하고 필드에 저장할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>for updating init-only fields.</source>
          <target state="translated">초기화 전용 필드를 업데이트 합니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.</source>
          <target state="translated">위치의 관리되는 포인터와 해당 위치에서 저장될 수 있는 형식의 런타임 표현을 캡슐화하는 <ph id="ph1">&lt;see cref="T:System.TypedReference" /&gt;</ph> 구조체입니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>The value to assign to the field.</source>
          <target state="translated">필드에 할당할 값입니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Sets the value of the field supported by the given object.</source>
          <target state="translated">지정된 개체에서 지원하는 필드 값을 설정합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method can be used to access non-public members if the caller has been granted <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>,이 메서드를 사용 하 여 호출자에 게 부여 된 경우 public이 아닌 멤버에 액세스할 수 수 <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> 플래그 지정 및 public이 아닌 멤버의 권한 부여 집합은 호출자에 게 제한 하는 경우 집합 또는 하위 집합을 부여 해당 합니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>(See <bpt id="p1">[</bpt>Security Considerations for Reflection<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</source>
          <target state="translated">(참조 <bpt id="p1">[</bpt>리플렉션의 보안 고려 사항<ept id="p1">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">이 기능을 사용하려면 응용 프로그램이 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> 이상을 대상으로 해야 합니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>The caller requires the Common Language Specification (CLS) alternative, but called this method instead.</source>
          <target state="translated">호출자에게 대체할 수 있는 CLS(공용 언어 사양)가 필요하지만 이 메서드가 대신 호출된 경우</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하기 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL이어야 합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Passed-in array of names to be mapped.</source>
          <target state="translated">매핑할 전달된 이름의 배열입니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Count of the names to be mapped.</source>
          <target state="translated">매핑할 이름의 수입니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale context in which to interpret the names.</source>
          <target state="translated">이름을 해석할 로캘 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Caller-allocated array which receives the IDs corresponding to the names.</source>
          <target state="translated">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Maps a set of names to a corresponding set of dispatch identifiers.</source>
          <target state="translated">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetIDsOfNames`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 형식을 나타내는 <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object representing the <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> 형식을 나타내는 <ph id="ph2">&lt;see cref="T:System.Reflection.FieldInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The type information to return.</source>
          <target state="translated">반환할 형식 정보입니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>The locale identifier for the type information.</source>
          <target state="translated">형식 정보의 로캘 식별자입니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Receives a pointer to the requested type information object.</source>
          <target state="translated">요청된 형식 정보 개체에 대한 포인터를 받습니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Retrieves the type information for an object, which can then be used to get the type information for an interface.</source>
          <target state="translated">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfo`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Points to a location that receives the number of type information interfaces provided by the object.</source>
          <target state="translated">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</source>
          <target state="translated">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>For more information about <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::GetTypeInfoCount`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Identifies the member.</source>
          <target state="translated">멤버를 식별합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Reserved for future use.</source>
          <target state="translated">나중에 사용하기 위해 예약되어 있습니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Must be IID_NULL.</source>
          <target state="translated">IID_NULL이어야 합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The locale context in which to interpret arguments.</source>
          <target state="translated">인수를 해석할 로캘 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Flags describing the context of the call.</source>
          <target state="translated">호출의 컨텍스트를 설명하는 플래그입니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</source>
          <target state="translated">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to the location where the result is to be stored.</source>
          <target state="translated">결과를 저장할 위치에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Pointer to a structure that contains exception information.</source>
          <target state="translated">예외 정보가 포함된 구조체에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>The index of the first argument that has an error.</source>
          <target state="translated">오류가 있는 첫 번째 인수의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Provides access to properties and methods exposed by an object.</source>
          <target state="translated">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>This method is for access to managed classes from unmanaged code, and should not be called from managed code.</source>
          <target state="translated">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>For more information about <ph id="ph1">`IDispatch::Invoke`</ph>, see the MSDN Library.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">`IDispatch::Invoke`</ph>, MSDN Library를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
          <source>Late-bound access using the COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> interface is not supported.</source>
          <target state="translated">COM <bpt id="p1">&lt;c&gt;</bpt>IDispatch<ept id="p1">&lt;/c&gt;</ept> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>