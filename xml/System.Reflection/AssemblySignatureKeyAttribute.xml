<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AssemblySignatureKeyAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5492f05f4ac23cc4c0812e59f78830d0583ca6743.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">492f05f4ac23cc4c0812e59f78830d0583ca6743</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>Provides migration from an older, simpler strong name key to a larger key with a stronger hashing algorithm.</source>
          <target state="translated">이전의 더 간단한 강력한 이름 키에서 더 강력한 해시 알고리즘이 있는 크기가 더 큰 키로 마이그레이션합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>The new larger key is the signature key.</source>
          <target state="translated">새 더 큰 키 서명 키를입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>In versions before the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the signature key was identical to the identity key.</source>
          <target state="translated">이전 버전에서의 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, 서명 키가 id 키와 동일 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Reflection.AssemblySignatureKeyAttribute&gt;</ph> attribute allows the assembly metadata to continue to have the old public key token and binary large object (BLOB) so that existing assembly references continue to work.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblySignatureKeyAttribute&gt;</ph> 특성을 사용 하면 어셈블리 메타 데이터를 계속 하려면 기존 어셈블리 참조를 계속 사용할 수 있도록 이전 공개 키 토큰 및 이진 대형 개체 (BLOB) 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>It also ensures that the mapping comes from an owner of the identity key.</source>
          <target state="translated">또한 매핑을 id 키의 소유자 로부터 나오도록 보장 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>The presence of the attribute does not necessarily mean that strong name validation takes place.</source>
          <target state="translated">특성의 존재 나타내지는지 않습니다는 강력한 이름 유효성 검사를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>In common full-trust scenarios, the attribute is never considered, because strong name signatures are never validated.</source>
          <target state="translated">완전 신뢰 공통 시나리오 특성은 고려 되지 않습니다, 강력한 이름 서명의 유효성을 검사 하지는 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>However, when the strong name signature does have to be validated, both the strong name signature and the countersignature must be validated.</source>
          <target state="translated">그러나 강력한 이름 서명을 유효성을 검사할 수 있어서는 때 강력한 이름 서명을 연대 서명을 유효성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>The assembly’s identity key does not have to be identical to the signature key (the key used to do the actual signing and validation).</source>
          <target state="translated">어셈블리의 id 키 서명 키 (실제 서명 작업을 수행 하는 데 사용 되는 키와 유효성 검사)와 동일할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>The identity key can be mapped to a different (more robust) signing key.</source>
          <target state="translated">Id 키를 다른 (보다 강력한) 서명 키에 매핑할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>This lets you set the identity of an assembly, and update the signing keys and algorithms to more secure versions.</source>
          <target state="translated">이 어셈블리의 id를 설정 하 고 더 안전한 버전에는 서명 키 및 알고리즘을 업데이트할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>The countersignature addresses security concerns when a malicious assembly claims some other identity.</source>
          <target state="translated">연대 서명은 아무런 주소 보안 문제 때 악의적인 어셈블리가 다른 id를 클레임입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>For example, a malicious System.Core.dll assembly could contain the Microsoft public key in its metadata, and use the attribute to tell strong name validation to use the attacker’s signature key if no countersignature is present.</source>
          <target state="translated">예를 들어, 악의적인 System.Core.dll 어셈블리는 메타 데이터에 Microsoft 공개 키를 포함 하 고 특성이 없는 연대 서명을 있는 경우 공격자의 서명 키를 사용 하려면 강력한 이름 유효성 검사를 사용 하 여 수 없습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>Thus, it could masquerade as a strong name-validated Microsoft assembly.</source>
          <target state="translated">따라서 강력한 이름의 유효성을 검사할 Microsoft 어셈블리를 알아내는 없습니다 것입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.AssemblySignatureKeyAttribute">
          <source>For information about how to sign assemblies for use with this new attribute, see <bpt id="p1">[</bpt>Enhanced Strong Naming<ept id="p1">](~/docs/framework/app-domains/enhanced-strong-naming.md)</ept>.</source>
          <target state="translated">이 새 특성으로 사용할 어셈블리를 서명 하는 방법에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>향상 된 강력한 이름 지정<ept id="p1">](~/docs/framework/app-domains/enhanced-strong-naming.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
          <source>The public or identity key.</source>
          <target state="translated">공개 또는 ID 키입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
          <source>The countersignature, which is the signature key portion of the strong-name key.</source>
          <target state="translated">연대 서명으로, 강력한 이름 키의 서명 키 부분입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /&gt;</ph> class by using the specified public key and countersignature.</source>
          <target state="translated">지정된 공개 키 및 연대 서명을 사용하여 <ph id="ph1">&lt;see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
          <source>Use Sn.exe to generate the parameters for this constructor.</source>
          <target state="translated">Sn.exe를 사용 하 여이 생성자에 대 한 매개 변수를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
          <source>Gets the countersignature for the strong name for this assembly.</source>
          <target state="translated">이 어셈블리에 대한 강력한 이름의 연대 서명을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
          <source>The countersignature for this signature key.</source>
          <target state="translated">이 서명 키에 대한 연대 서명입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
          <source>The countersignature represents the public key that is signed by the identity key.</source>
          <target state="translated">연대 서명은 아무런 id 키로 서명 된 공개 키를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
          <source>Gets the public key for the strong name used to sign the assembly.</source>
          <target state="translated">어셈블리를 서명하는 데 사용되는 강력한 이름의 공용 키를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
          <source>The public key for this assembly.</source>
          <target state="translated">이 어셈블리의 공개 키입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>