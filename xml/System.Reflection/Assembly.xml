<Type Name="Assembly" FullName="System.Reflection.Assembly">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61e41f0ea0e2ba2b5b68e7d5dde114072003f536" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39726332" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._Assembly, System.Runtime.Serialization.ISerializable, System.Security.IEvidenceFactory" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Assembly extends System.Object implements class System.Reflection.ICustomAttributeProvider, class System.Runtime.InteropServices._Assembly, class System.Runtime.Serialization.ISerializable, class System.Security.IEvidenceFactory" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Assembly" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Assembly&#xA;Implements _Assembly, ICustomAttributeProvider, IEvidenceFactory, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Assembly abstract : System::Reflection::ICustomAttributeProvider, System::Runtime::InteropServices::_Assembly, System::Runtime::Serialization::ISerializable, System::Security::IEvidenceFactory" />
  <TypeSignature Language="F#" Value="type Assembly = class&#xA;    interface ICustomAttributeProvider&#xA;    interface _Assembly&#xA;    interface IEvidenceFactory&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.ICustomAttributeProvider</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Assembly</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IEvidenceFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Assembly))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="865a4-101">다시 사용 및 버전 지정이 가능한, 공용 언어 런타임 응용 프로그램의 자체 설명 빌딩 블록인 어셈블리를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="865a4-101">Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-102">사용 된 <xref:System.Reflection.Assembly> 어셈블리, 어셈블리에 포함 된 형식을 검색 하 고 해당 형식의 인스턴스를 만들 수의 메타 데이터 및 구성 요소를 탐색 하려면 어셈블리를 로드 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-102">Use the <xref:System.Reflection.Assembly> class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types.</span></span>  
  
 <span data-ttu-id="865a4-103">배열을 가져오려면 <xref:System.Reflection.Assembly> 어셈블리를 현재 나타내는 로드 응용 프로그램 도메인 (예를 들어, 응용 프로그램의 기본 도메인 간단한 프로젝트를)를 사용 하 여 개체를 <xref:System.AppDomain.GetAssemblies%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-103">To get an array of <xref:System.Reflection.Assembly> objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <xref:System.AppDomain.GetAssemblies%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="865a4-104">어셈블리를 동적으로 로드 하는 <xref:System.Reflection.Assembly> 정적 메서드를 제공 하는 클래스 (`Shared` Visual Basic의 메서드).</span><span class="sxs-lookup"><span data-stu-id="865a4-104">To load assemblies dynamically, the <xref:System.Reflection.Assembly> class provides the following static methods (`Shared` methods in Visual Basic).</span></span> <span data-ttu-id="865a4-105">어셈블리 로드 작업이 발생 하는 응용 프로그램 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-105">Assemblies are loaded into the application domain where the load operation occurs.</span></span>  
  
-   <span data-ttu-id="865a4-106">어셈블리를 로드 하는 권장된 방법은 사용 하는 것은 <xref:System.AppDomain.Load%2A> 표시 이름을 사용 하 여 로드할 어셈블리를 식별 하는 메서드 (예를 들어, "System.Windows.Forms, 버전 2.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089 =").</span><span class="sxs-lookup"><span data-stu-id="865a4-106">The recommended way to load assemblies is to use the <xref:System.AppDomain.Load%2A> method, which identifies the assembly to be loaded by its display name (for example, "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089").</span></span> <span data-ttu-id="865a4-107">어셈블리에 대 한 검색에 설명 된 규칙을 따릅니다 [런타임 어셈블리를 찾는 방법](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-107">The search for the assembly follows the rules described in [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md).</span></span>  
  
-   <span data-ttu-id="865a4-108">합니다 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> 및 <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> 메서드를 사용 하면 실행 아니라 리플렉션을 위해 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-108">The <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods enable you to load an assembly for reflection, but not for execution.</span></span> <span data-ttu-id="865a4-109">예를 들어 32 비트 플랫폼에서 실행 되는 코드에서 64 비트 플랫폼을 대상으로 하는 어셈블리를 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-109">For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.</span></span>  
  
-   <span data-ttu-id="865a4-110">합니다 <xref:System.Reflection.Assembly.LoadFile%2A> 고 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드는 어셈블리 경로로 식별 해야 하는 드문 시나리오에 대 한 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-110">The <xref:System.Reflection.Assembly.LoadFile%2A> and <xref:System.Reflection.Assembly.LoadFrom%2A> methods are provided for rare scenarios in which an assembly must be identified by path.</span></span>  
  
 <span data-ttu-id="865a4-111">가져올는 <xref:System.Reflection.Assembly> 사용 하 여 현재 실행 중인 어셈블리에 대 한 개체는 <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-111">To get an <xref:System.Reflection.Assembly> object for the currently executing assembly, use the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method.</span></span>  
  
 <span data-ttu-id="865a4-112">많은 멤버를 <xref:System.Reflection.Assembly> 클래스는 어셈블리에 대 한 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-112">Many members of the <xref:System.Reflection.Assembly> class provide information about an assembly.</span></span> <span data-ttu-id="865a4-113">예:</span><span class="sxs-lookup"><span data-stu-id="865a4-113">For example:</span></span>  
  
-   <span data-ttu-id="865a4-114">합니다 <xref:System.Reflection.Assembly.GetName%2A> 메서드가 반환 되는 <xref:System.Reflection.AssemblyName> 어셈블리 표시 이름 부분에 대 한 액세스를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-114">The <xref:System.Reflection.Assembly.GetName%2A> method returns an <xref:System.Reflection.AssemblyName> object that provides access to the parts of the assembly display name.</span></span>  
  
-   <span data-ttu-id="865a4-115"><xref:System.Reflection.Assembly.GetCustomAttributes%2A> 메서드는 어셈블리에 적용할 특성을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-115">The <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method lists the attributes applied to the assembly.</span></span>  
  
-   <span data-ttu-id="865a4-116"><xref:System.Reflection.Assembly.GetFiles%2A> 메서드는 어셈블리 매니페스트가 있는 파일에 대 한 액세스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-116">The <xref:System.Reflection.Assembly.GetFiles%2A> method provides access to the files in the assembly manifest.</span></span>  
  
-   <span data-ttu-id="865a4-117"><xref:System.Reflection.Assembly.GetManifestResourceNames%2A> 메서드 어셈블리 매니페스트에서 리소스의 이름을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-117">The <xref:System.Reflection.Assembly.GetManifestResourceNames%2A> method provides the names of the resources in the assembly manifest.</span></span>  
  
 <span data-ttu-id="865a4-118"><xref:System.Reflection.Assembly.GetTypes%2A> 메서드는 어셈블리의 모든 형식을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-118">The <xref:System.Reflection.Assembly.GetTypes%2A> method lists all the types in the assembly.</span></span> <span data-ttu-id="865a4-119"><xref:System.Reflection.Assembly.GetExportedTypes%2A> 메서드 호출자가 어셈블리 외부에 표시 되는 형식을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-119">The <xref:System.Reflection.Assembly.GetExportedTypes%2A> method lists the types that are visible to callers outside the assembly.</span></span> <span data-ttu-id="865a4-120"><xref:System.Reflection.Assembly.GetType%2A> 어셈블리에서 특정 형식을 검색할 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-120">The <xref:System.Reflection.Assembly.GetType%2A> method can be used to search for a particular type in the assembly.</span></span> <span data-ttu-id="865a4-121"><xref:System.Reflection.Assembly.CreateInstance%2A> 메서드를 사용 하 여 어셈블리에서 형식의 인스턴스를 만들고 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-121">The <xref:System.Reflection.Assembly.CreateInstance%2A> method can be used to search for and create instances of types in the assembly.</span></span>  
  
 <span data-ttu-id="865a4-122">어셈블리에 대 한 자세한 내용은 "응용 프로그램 도메인 및 어셈블리" 섹션을 참조 합니다 [응용 프로그램 도메인](~/docs/framework/app-domains/application-domains.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-122">For more information on assemblies, see the "Application Domains and Assemblies" section in the [Application Domains](~/docs/framework/app-domains/application-domains.md) topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-123">다음 코드 예제에는 현재 실행 중인 어셈블리를 가져올, 해당 어셈블리에 포함 된 형식의 인스턴스를 만들고, 런타임에 바인딩을 사용 하 여 형식의 메서드 중 하나를 호출 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-123">The following code example shows how to obtain the currently executing assembly, create an instance of a type contained in that assembly, and invoke one of the type's methods with late binding.</span></span> <span data-ttu-id="865a4-124">코드 예제에서는이 목적을 위해 라는 클래스를 정의 `Example`, 라는 메서드를 사용 하 여 `SampleMethod`입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-124">For this purpose, the code example defines a class named `Example`, with a method named `SampleMethod`.</span></span> <span data-ttu-id="865a4-125">클래스의 생성자는 메서드의 반환 값을 계산 하는 데 사용 되는 정수를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-125">The constructor of the class accepts an integer, which is used to compute the return value of the method.</span></span>  
  
 <span data-ttu-id="865a4-126">코드 예제에서는 또한의 사용을 보여 줍니다 합니다 <xref:System.Reflection.Assembly.GetName%2A> 메서드는 <xref:System.Reflection.AssemblyName> 어셈블리의 전체 이름을 구문 분석 하는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-126">The code example also demonstrates the use of the <xref:System.Reflection.Assembly.GetName%2A> method to obtain an <xref:System.Reflection.AssemblyName> object that can be used to parse the full name of the assembly.</span></span> <span data-ttu-id="865a4-127">이 예제에서는 어셈블리의 버전 번호를 표시 합니다 <xref:System.Reflection.Assembly.CodeBase%2A> 속성인 및 <xref:System.Reflection.Assembly.EntryPoint%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="865a4-127">The example displays the version number of the assembly, the <xref:System.Reflection.Assembly.CodeBase%2A> property, and the <xref:System.Reflection.Assembly.EntryPoint%2A> property.</span></span>  
  
 [!code-cpp[AssemblyClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyClass/cpp/source.cpp#1)]
 [!code-csharp[AssemblyClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyClass/cs/source.cs#1)]
 [!code-vb[AssemblyClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyClass/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="865a4-128">상속자에 대 한 완전 신뢰 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="865a4-128">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="865a4-129">부분적으로 신뢰할 수 있는 코드에서이 클래스를 상속할 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="865a4-129">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <threadsafe>
      <span data-ttu-id="865a4-130">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="865a4-130">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.AppDomain" />
    <altmember cref="T:System.Reflection.AssemblyName" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Assembly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Assembly();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-131">
            <see cref="T:System.Reflection.Assembly" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-131">Initializes a new instance of the <see cref="T:System.Reflection.Assembly" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-132">파생된 클래스에서 생성 하는 동안이 생성자가 호출 <xref:System.Reflection.Assembly> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-132">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Assembly> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBase">
      <MemberSignature Language="C#" Value="public virtual string CodeBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CodeBase" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.CodeBase" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CodeBase As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CodeBase { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBase : string" Usage="System.Reflection.Assembly.CodeBase" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.CodeBase</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-133">예를 들어 <see cref="T:System.Reflection.AssemblyName" /> 개체에 원래 지정된 어셈블리 위치를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-133">Gets the location of the assembly as specified originally, for example, in an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-134">원래 지정된 어셈블리 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-134">The location of the assembly as specified originally.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-135">로드 된 매니페스트가 들어 있는 파일의 절대 경로 가져오려면는 <xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType> 속성 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-135">To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 <span data-ttu-id="865a4-136">오버 로드를 사용 하 여 어셈블리를 바이트 배열로 로드 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 바이트 배열을 사용 하는 메서드를이 속성에는 로드 된 어셈블리의 위치가 아닌 메서드의 호출자의 위치를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-136">If the assembly was loaded as a byte array, using an overload of the <xref:System.Reflection.Assembly.Load%2A> method that takes an array of bytes, this property returns the location of the caller of the method, not the location of the loaded assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-137">다음 예제에서는 <xref:System.Reflection.Assembly.CodeBase%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-137">The following example uses the <xref:System.Reflection.Assembly.CodeBase%2A> property.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/codebase1.cpp#1)]
 [!code-csharp[System.Reflection.Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/codebase1.cs#1)]
 [!code-vb[System.Reflection.Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/codebase1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-138">경로에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-138">for access to the path.</span>
          </span>
          <span data-ttu-id="865a4-139">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-139">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-140">이 어셈블리에서 형식을 찾은 다음 시스템 활성기를 사용하여 해당 형식의 인스턴스를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-140">Locates a type from this assembly and creates an instance of it using the system activator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public object CreateInstance (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.CreateInstance(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (typeName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string -&gt; obj&#xA;override this.CreateInstance : string -&gt; obj" Usage="assembly.CreateInstance typeName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="865a4-141">찾을 형식의 <see cref="P:System.Type.FullName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-141">The <see cref="P:System.Type.FullName" /> of the type to locate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-142">대/소문자 구분 검색 기능을 사용하여 이 어셈블리에서 지정된 형식을 찾은 다음 시스템 활성기를 사용하여 해당 형식의 인스턴스를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-142">Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-143">
            <see langword="null" />을 찾을 수 있는 경우 기본 생성자로 만든 지정된 형식의 인스턴스이며, 그렇지 않은 경우는 <paramref name="typeName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-143">An instance of the specified type created with the default constructor; or <see langword="null" /> if <paramref name="typeName" /> is not found.</span>
          </span>
          <span data-ttu-id="865a4-144">형식은 문화권 또는 활성화 특성을 지정하지 않고 <see cref="T:System.Reflection.BindingFlags" />를 <see langword="Public" /> 또는 <see langword="Instance" />로 설정하여 기본 바인더를 사용하여 확인됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-144">The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags" /> set to <see langword="Public" /> or <see langword="Instance" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-145">런타임에서 찾을 수 없으면 `typeName` 에 <xref:System.Reflection.Assembly> 인스턴스를 반환 합니다 `null` 예외를 throw 하는 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-145">If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception.</span></span> <span data-ttu-id="865a4-146">이 때문에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-146">This might happen because:</span></span>  
  
-   <span data-ttu-id="865a4-147">형식의 정규화 된 이름을 지정 하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-147">You haven't specified the fully qualified name of the type.</span></span>  
  
-   <span data-ttu-id="865a4-148">정규화 된 형식 이름을 지정한 이지만 해당 사례 형식의 소문자가 일치 하지 않습니다 <xref:System.Type.FullName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-148">You've specified the fully qualified type name, but its case doesn’t match the case of the type's <xref:System.Type.FullName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="865a4-149">대/소문자 구분 비교 `typeName` 형식의 전체 이름을 사용 하 여 호출 합니다 <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> 오버 로드 하 고 지정 `true` 에 대 한는 `ignoreCase` 인수.</span><span class="sxs-lookup"><span data-stu-id="865a4-149">For a case-insensitive comparison of `typeName` with the type's full name, call the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specify `true` for the `ignoreCase` argument.</span></span>  
  
-   <span data-ttu-id="865a4-150">현재에서 형식이 없는 <xref:System.Reflection.Assembly> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="865a4-150">The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-151">다음 예제에서는 정의 `Person` 클래스 및 호출 된 <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> 메서드를 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-151">The following example defines a `Person` class and calls the <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> method to instantiate it.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.CreateInstance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/cs/createinstance1.cs#1)]
 [!code-vb[System.Reflection.Assembly.CreateInstance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/vb/createinstance1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-152">
            <paramref name="typeName" />이 빈 문자열("") 또는 null 문자로 시작하는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-152">
              <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.</span>
          </span>
          <span data-ttu-id="865a4-153">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-153">-or-</span>
          </span>
          <span data-ttu-id="865a4-154">현재 어셈블리가 리플렉션 전용 컨텍스트에 로드되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-154">The current assembly was loaded into the reflection-only context.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-155">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-155">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="865a4-156">일치하는 생성자를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-156">No matching constructor was found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-157">
            <paramref name="typeName" />에 종속 어셈블리가 필요하지만 이 어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-157">
              <paramref name="typeName" /> requires a dependent assembly that could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-158">
            <paramref name="typeName" />에 종속 어셈블리가 필요하며 이 어셈블리를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-158">
              <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-159">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-159">-or-</span>
          </span>
          <span data-ttu-id="865a4-160">현재 어셈블리가 리플렉션 전용 컨텍스트에 로드되었으며 <paramref name="typeName" />에 종속 어셈블리가 필요하지만 이 어셈블리가 미리 로드되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-160">The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-161">
            <paramref name="typeName" />에 종속 어셈블리가 필요하지만 파일이 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-161">
              <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-162">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-162">-or-</span>
          </span>
          <span data-ttu-id="865a4-163">
            <paramref name="typeName" />에 현재 로드된 버전보다 높은 런타임 버전용으로 컴파일된 종속 어셈블리가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-163">
              <paramref name="typeName" /> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-164">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-164">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-165">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-165">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public object CreateInstance (string typeName, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(string typeName, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (typeName As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(System::String ^ typeName, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * bool -&gt; obj&#xA;override this.CreateInstance : string * bool -&gt; obj" Usage="assembly.CreateInstance (typeName, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="865a4-166">찾을 형식의 <see cref="P:System.Type.FullName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-166">The <see cref="P:System.Type.FullName" /> of the type to locate.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="865a4-167">형식 이름의 대/소문자를 무시하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-167">
              <see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-168">대/소문자 구분 검색 기능을 선택적으로 사용하여, 지정된 형식을 이 어셈블리에서 찾은 다음 시스템 활성기를 사용하여 해당 인스턴스를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-168">Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-169">
            <see langword="null" />을 찾을 수 있는 경우 기본 생성자로 만든 지정된 형식의 인스턴스이며, 그렇지 않은 경우는 <paramref name="typeName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-169">An instance of the specified type created with the default constructor; or <see langword="null" /> if <paramref name="typeName" /> is not found.</span>
          </span>
          <span data-ttu-id="865a4-170">형식은 문화권 또는 활성화 특성을 지정하지 않고 <see cref="T:System.Reflection.BindingFlags" />를 <see langword="Public" /> 또는 <see langword="Instance" />로 설정하여 기본 바인더를 사용하여 확인됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-170">The type is resolved using the default binder, without specifying culture or activation attributes, and with <see cref="T:System.Reflection.BindingFlags" /> set to <see langword="Public" /> or <see langword="Instance" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-171">런타임에서 찾을 수 없으면 `typeName` 에 <xref:System.Reflection.Assembly> 인스턴스를 반환 합니다 `null` 예외를 throw 하는 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-171">If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception.</span></span> <span data-ttu-id="865a4-172">이 때문에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-172">This might happen because:</span></span>  
  
-   <span data-ttu-id="865a4-173">형식의 정규화 된 이름을 지정 하지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-173">You haven't specified the fully qualified name of the type.</span></span>  
  
-   <span data-ttu-id="865a4-174">현재에서 형식이 없는 <xref:System.Reflection.Assembly> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="865a4-174">The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-175">다음 예제에서는 정의 `Person` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-175">The following example defines a `Person` class.</span></span> <span data-ttu-id="865a4-176">그런 다음 호출 하는 <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> 를 인스턴스화하기 위한 메서드를 하지만의 대/소문자를 `typeName` 인수 형식의 일치 하지 않는 <xref:System.Type.FullName%2A> 속성, 메서드는 반환 `null`.</span><span class="sxs-lookup"><span data-stu-id="865a4-176">It then calls the <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> method to instantiate it, but because the casing of the `typeName` argument doesn’t match that of the type's <xref:System.Type.FullName%2A> property, the method returns `null`.</span></span> <span data-ttu-id="865a4-177">이 예제에서는 동일한 문자열을 전달 하는 경우는 <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> 오버 로드 하 고 비교, 대/소문자 이어야 함을 지정 합니다 `Person` 클래스를 찾을 수 및 `Person` 이 개체가 인스턴스화.</span><span class="sxs-lookup"><span data-stu-id="865a4-177">When the example passes the same string to the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specifies that the comparison should be case-insensitive, the `Person` class is found, and a `Person` object is successfully instantiated.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.CreateInstance#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/cs/createinstance2.cs#2)]
 [!code-vb[System.Reflection.Assembly.CreateInstance#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/vb/createinstance2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-178">
            <paramref name="typeName" />이 빈 문자열("") 또는 null 문자로 시작하는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-178">
              <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.</span>
          </span>
          <span data-ttu-id="865a4-179">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-179">-or-</span>
          </span>
          <span data-ttu-id="865a4-180">현재 어셈블리가 리플렉션 전용 컨텍스트에 로드되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-180">The current assembly was loaded into the reflection-only context.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="865a4-181">일치하는 생성자를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-181">No matching constructor was found.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-182">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-182">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-183">
            <paramref name="typeName" />에 종속 어셈블리가 필요하지만 이 어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-183">
              <paramref name="typeName" /> requires a dependent assembly that could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-184">
            <paramref name="typeName" />에 종속 어셈블리가 필요하며 이 어셈블리를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-184">
              <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-185">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-185">-or-</span>
          </span>
          <span data-ttu-id="865a4-186">현재 어셈블리가 리플렉션 전용 컨텍스트에 로드되었으며 <paramref name="typeName" />에 종속 어셈블리가 필요하지만 이 어셈블리가 미리 로드되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-186">The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-187">
            <paramref name="typeName" />에 종속 어셈블리가 필요하지만 파일이 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-187">
              <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-188">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-188">-or-</span>
          </span>
          <span data-ttu-id="865a4-189">
            <paramref name="typeName" />에 현재 로드된 버전보다 높은 런타임 버전용으로 컴파일된 종속 어셈블리가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-189">
              <paramref name="typeName" /> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-190">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-190">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-191">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-191">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual object CreateInstance (string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateInstance(string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ CreateInstance(System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; obj&#xA;override this.CreateInstance : string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; obj" Usage="assembly.CreateInstance (typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="865a4-192">찾을 형식의 <see cref="P:System.Type.FullName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-192">The <see cref="P:System.Type.FullName" /> of the type to locate.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="865a4-193">형식 이름의 대/소문자를 무시하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-193">
              <see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="865a4-194">검색 수행 방법에 영향을 주는 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-194">A bitmask that affects the way in which the search is conducted.</span>
          </span>
          <span data-ttu-id="865a4-195">이 값은 <see cref="T:System.Reflection.BindingFlags" />의 비트 플래그 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-195">The value is a combination of bit flags from <see cref="T:System.Reflection.BindingFlags" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="865a4-196">리플렉션을 사용하여 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see langword="MemberInfo" /> 개체 검색을 사용할 수 있도록 하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-196">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see langword="MemberInfo" /> objects via reflection.</span>
          </span>
          <span data-ttu-id="865a4-197">
            <c>바인더</c>가 <see langword="null" />이면 기본 바인더가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-197">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="865a4-198">생성자에 전달되는 인수를 포함하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-198">An array that contains the arguments to be passed to the constructor.</span>
          </span>
          <span data-ttu-id="865a4-199">이 인수 배열은 실행될 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-199">This array of arguments must match in number, order, and type the parameters of the constructor to be invoked.</span>
          </span>
          <span data-ttu-id="865a4-200">기본 생성자를 사용하려면 <c>args</c>가 빈 배열이거나 <see langword="null" />이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-200">If the default constructor is desired, <c>args</c> must be an empty array or <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="865a4-201">형식의 강제 변환을 제어하는 데 사용되는 <see langword="CultureInfo" />의 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-201">An instance of <see langword="CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="865a4-202">이 매개 변수가 <see langword="null" />이면 현재 스레드에 대한 <see langword="CultureInfo" />가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-202">If this is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="865a4-203">예를 들어 1,000은 각 문화권마다 다르게 표현되므로 1,000을 나타내는 <see langword="String" />을 <see langword="Double" /> 값으로 변환하기 위해 이 매개 변수가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-203">(This is necessary to convert a <see langword="String" /> that represents 1000 to a <see langword="Double" /> value, for example, since 1000 is represented differently by different cultures.)</span>
          </span>
        </param>
        <param name="activationAttributes">
          <span data-ttu-id="865a4-204">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-204">An array of one or more attributes that can participate in activation.</span>
          </span>
          <span data-ttu-id="865a4-205">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-205">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span>
          </span>
          <span data-ttu-id="865a4-206">이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-206">This parameter is related to client-activated objects.</span>
          </span>
          <span data-ttu-id="865a4-207">클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-207">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span>
          </span>
          <span data-ttu-id="865a4-208">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-208">Distributed applications should instead use Windows Communication Foundation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-209">대/소문자 구분 검색 기능을 선택적으로 사용하고 지정된 문화권, 인수, 바인딩 및 활성화 특성을 사용하여, 지정된 형식을 이 어셈블리에서 찾은 다음 시스템 활성기를 사용하여 해당 인스턴스를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-209">Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-210">지정된 형식의 인스턴스 또는 <see langword="null" />이 없으면 <paramref name="typeName" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-210">An instance of the specified type, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span>
          </span>
          <span data-ttu-id="865a4-211">제공된 인수는 형식을 확인하고 인스턴스를 만드는 데 사용된 생성자를 바인딩하는 데 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-211">The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-212">
            <paramref name="typeName" />이 빈 문자열("") 또는 null 문자로 시작하는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-212">
              <paramref name="typeName" /> is an empty string ("") or a string beginning with a null character.</span>
          </span>
          <span data-ttu-id="865a4-213">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-213">-or-</span>
          </span>
          <span data-ttu-id="865a4-214">현재 어셈블리가 리플렉션 전용 컨텍스트에 로드되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-214">The current assembly was loaded into the reflection-only context.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-215">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-215">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="865a4-216">일치하는 생성자를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-216">No matching constructor was found.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="865a4-217">비어 있지 않은 활성화 특성 배열이 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 형식에 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-217">A non-empty activation attributes array is passed to a type that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-218">
            <paramref name="typeName" />에 종속 어셈블리가 필요하지만 이 어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-218">
              <paramref name="typeName" /> requires a dependent assembly that could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-219">
            <paramref name="typeName" />에 종속 어셈블리가 필요하며 이 어셈블리를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-219">
              <paramref name="typeName" /> requires a dependent assembly that was found but could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-220">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-220">-or-</span>
          </span>
          <span data-ttu-id="865a4-221">현재 어셈블리가 리플렉션 전용 컨텍스트에 로드되었으며 <paramref name="typeName" />에 종속 어셈블리가 필요하지만 이 어셈블리가 미리 로드되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-221">The current assembly was loaded into the reflection-only context, and <paramref name="typeName" /> requires a dependent assembly that was not preloaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-222">
            <paramref name="typeName" />에 종속 어셈블리가 필요하지만 파일이 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-222">
              <paramref name="typeName" /> requires a dependent assembly, but the file is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-223">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-223">-or-</span>
          </span>
          <span data-ttu-id="865a4-224">
            <paramref name="typeName" />에 현재 로드된 버전보다 높은 런타임 버전용으로 컴파일된 종속 어셈블리가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-224">
              <paramref name="typeName" /> requires a dependent assembly which that was compiled for a version of the runtime that is later than the currently loaded version.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-225">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-225">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-226">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-226">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-227">대리자의 인스턴스를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-227">to create an instance of a delegate.</span>
          </span>
          <span data-ttu-id="865a4-228">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-228">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CreateQualifiedName">
      <MemberSignature Language="C#" Value="public static string CreateQualifiedName (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CreateQualifiedName(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateQualifiedName (assemblyName As String, typeName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CreateQualifiedName(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member CreateQualifiedName : string * string -&gt; string" Usage="System.Reflection.Assembly.CreateQualifiedName (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">
          <span data-ttu-id="865a4-229">어셈블리의 표시 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-229">The display name of an assembly.</span>
          </span>
        </param>
        <param name="typeName">
          <span data-ttu-id="865a4-230">형식의 전체 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-230">The full name of a type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-231">어셈블리의 표시 이름에 의해 정규화된 형식의 이름을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-231">Creates the name of a type qualified by the display name of its assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-232">어셈블리의 표시 이름으로 정규화된 이 형식의 전체 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-232">The full name of the type qualified by the display name of the assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-233">반환된 된 문자열의 형식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-233">The format of the returned string is:</span></span>  
  
 <span data-ttu-id="865a4-234">\<FullTypeName>, \<AssemblyDisplayName></span><span class="sxs-lookup"><span data-stu-id="865a4-234">\<FullTypeName>, \<AssemblyDisplayName></span></span>  
  
 <span data-ttu-id="865a4-235">참조 <xref:System.Reflection.AssemblyName> 형식의 어셈블리의 표시 이름에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-235">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
 <span data-ttu-id="865a4-236">공용 언어 런타임의 버전의 변경 내용에 맞게, 직접 정규화 된 이름을 생성 하는 대신이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-236">To accommodate changes in versions of the common language runtime, use this method rather than constructing the qualified name yourself.</span></span>  <span data-ttu-id="865a4-237">정규화 된 어셈블리 이름에 대 한 자세한 내용은 <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-237">For information about qualified assembly names, see <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.CustomAttributeData&gt; CustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.CustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ CustomAttributes { System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomAttributes : seq&lt;System.Reflection.CustomAttributeData&gt;" Usage="System.Reflection.Assembly.CustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-238">이 어셈블리의 사용자 지정 특성을 포함하는 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-238">Gets a collection that contains this assembly's custom attributes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-239">이 어셈블리의 사용자 지정 특성을 포함하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-239">A collection that contains this assembly's custom attributes.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefinedTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt; DefinedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.TypeInfo&gt; DefinedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.DefinedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DefinedTypes As IEnumerable(Of TypeInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ DefinedTypes { System::Collections::Generic::IEnumerable&lt;System::Reflection::TypeInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefinedTypes : seq&lt;System.Reflection.TypeInfo&gt;" Usage="System.Reflection.Assembly.DefinedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.TypeInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-240">이 어셈블리에 정의된 형식의 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-240">Gets a collection of the types defined in this assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-241">이 어셈블리에 정의된 형식의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-241">A collection of the types defined in this assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-242"><xref:System.Reflection.Assembly.DefinedTypes%2A> 속성은 비교할 합니다 <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> 메서드는 <xref:System.Reflection.Assembly.DefinedTypes%2A> 속성의 컬렉션을 반환 <xref:System.Reflection.TypeInfo> 개체 및 <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> 의 배열을 반환 합니다 <xref:System.Type> 개체.</span><span class="sxs-lookup"><span data-stu-id="865a4-242">The <xref:System.Reflection.Assembly.DefinedTypes%2A> property is comparable to the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> method, except that the <xref:System.Reflection.Assembly.DefinedTypes%2A> property returns a collection of <xref:System.Reflection.TypeInfo> objects, and the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType> method returns an array of <xref:System.Type> objects.</span></span>  
  
 <span data-ttu-id="865a4-243">반환된 된 배열에는 중첩된 형식이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-243">The returned array includes nested types.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Assembly.GetTypes" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodInfo EntryPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo EntryPoint" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EntryPoint As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodInfo ^ EntryPoint { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryPoint : System.Reflection.MethodInfo" Usage="System.Reflection.Assembly.EntryPoint" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.EntryPoint</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-244">이 어셈블리의 진입점을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-244">Gets the entry point of this assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-245">이 어셈블리의 진입점을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-245">An object that represents the entry point of this assembly.</span>
          </span>
          <span data-ttu-id="865a4-246">예를 들어 어셈블리가 DLL이어서 진입점을 찾을 수 없는 경우에는 <see langword="null" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-246">If no entry point is found (for example, the assembly is a DLL), <see langword="null" /> is returned.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="assembly.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="865a4-247">이 인스턴스와 비교할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-247">The object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-248">이 어셈블리와 지정된 개체가 서로 같은지 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-248">Determines whether this assembly and the specified object are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-249">
            <see langword="true" />가 이 인스턴스와 같으면 <paramref name="o" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-249">
              <see langword="true" /> if <paramref name="o" /> is equal to this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-250"><xref:System.Reflection.Assembly.Equals%2A> 메서드를 확인 하려면 참조 같음 테스트를 수행 하는지 여부를 현재 인스턴스 및 `o` 같은지 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-250">The <xref:System.Reflection.Assembly.Equals%2A> method performs a test for reference equality to determine whether the current instance and `o` are equal.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EscapedCodeBase">
      <MemberSignature Language="C#" Value="public virtual string EscapedCodeBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EscapedCodeBase" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.EscapedCodeBase" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EscapedCodeBase As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EscapedCodeBase { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EscapedCodeBase : string" Usage="System.Reflection.Assembly.EscapedCodeBase" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.EscapedCodeBase</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-251">코드베이스를 나타내는 URI를 가져옵니다(이스케이프 문자 포함).</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-251">Gets the URI, including escape characters, that represents the codebase.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-252">이스케이프 문자를 포함하는 URI입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-252">A URI with escape characters.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-253">경로에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-253">for access to the path.</span>
          </span>
          <span data-ttu-id="865a4-254">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-254">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public virtual System.Security.Policy.Evidence Evidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence" Usage="System.Reflection.Assembly.Evidence" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.Evidence</InterfaceMember>
        <InterfaceMember>P:System.Security.IEvidenceFactory.Evidence</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-255">이 어셈블리의 증명을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-255">Gets the evidence for this assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-256">이 어셈블리에 대한 증명 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-256">The evidence for this assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-257">증명 정보는 코드에 부여할 수 있는 권한 같이 보안 정책을 결정하기 위해 입력하는 정보 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-257">Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-258">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-258">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-259">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-259">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="ExportedTypes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; ExportedTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; ExportedTypes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.ExportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExportedTypes As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ ExportedTypes { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExportedTypes : seq&lt;Type&gt;" Usage="System.Reflection.Assembly.ExportedTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-260">이 어셈블리에 정의된 형식 중 어셈블리 외부에서 볼 수 있는 public 형식의 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-260">Gets a collection of the public types defined in this assembly that are visible outside the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-261">이 어셈블리에 정의된 형식 중 어셈블리 외부에서 볼 수 있는 public 형식의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-261">A collection of the public types defined in this assembly that are visible outside the assembly.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public virtual string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.FullName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Reflection.Assembly.FullName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-262">어셈블리의 표시 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-262">Gets the display name of the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-263">어셈블리의 표시 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-263">The display name of the assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-264">참조 <xref:System.Reflection.AssemblyName> 형식의 어셈블리의 표시 이름에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-264">See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-265">표시 이름을 구문 분석 하려면 사용자 고유의 코드를 작성 하는 것은 좋지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-265">Writing your own code to parse display names is not recommended.</span></span> <span data-ttu-id="865a4-266">대신, 표시 이름을 전달 합니다 <xref:System.Reflection.AssemblyName.%23ctor%2A> 생성자를 구문 분석 하 고 새의 적절 한 필드를 채웁니다 <xref:System.Reflection.AssemblyName>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-266">Instead, pass the display name to the <xref:System.Reflection.AssemblyName.%23ctor%2A> constructor, which parses it and populates the appropriate fields of the new <xref:System.Reflection.AssemblyName>.</span></span>  
  
 <span data-ttu-id="865a4-267">.NET framework 버전 2.0에서 프로세서 아키텍처가 어셈블리 id에 추가 되 고 어셈블리 이름 문자열의 일부로 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-267">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="865a4-268">그러나 반환 하는 문자열에서 제외 됩니다는 <xref:System.Reflection.Assembly.FullName%2A> 호환성을 위해 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-268">However, it is not included in the string returned by the <xref:System.Reflection.Assembly.FullName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="865a4-269"><xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="865a4-269">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-270">다음 예제에서는 현재 실행 중인 어셈블리의 표시 이름 및 포함 된 어셈블리의 표시 이름을 검색 합니다 <xref:System.Int32> 형식 (`int` C#에서 `Integer` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="865a4-270">The following example retrieves the display name of the currently executing assembly, and the display name of the assembly that contains the <xref:System.Int32> type (`int` in C#, `Integer` in Visual Basic).</span></span>  
  
 [!code-cpp[Assembly.FullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.FullName/CPP/Example.cpp#1)]
 [!code-csharp[Assembly.FullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.FullName/CS/Example.cs#1)]
 [!code-vb[Assembly.FullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.FullName/VB/Example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GetAssembly (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GetAssembly(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GetAssembly(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetAssembly : Type -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.GetAssembly type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="865a4-271">어셈블리에서 반환될 형식을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-271">An object representing a type in the assembly that will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-272">지정된 형식이 정의되어 있는 현재 로드된 어셈블리를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-272">Gets the currently loaded assembly in which the specified type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-273">지정된 형식이 정의되어 있는 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-273">The assembly in which the specified type is defined.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-274">이 메서드 호출의 값을 검색 하는 것은 <xref:System.Type.Assembly?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-274">Calling this method is equivalent to retrieving the value of the  <xref:System.Type.Assembly?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="865a4-275">그러나는 <xref:System.Type.Assembly?displayProperty=nameWithType> 속성에는 일반적으로 뛰어난 성능을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-275">However, the <xref:System.Type.Assembly?displayProperty=nameWithType> property typically offers superior performance.</span></span>  
  
 <span data-ttu-id="865a4-276">이 메서드를 호출 하려면 있어야를 <xref:System.Type> 개체 클래스 정의 되어 있는 어셈블리가 이미 로드 되어 있어야 함을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-276">In order to call this method, you must have a <xref:System.Type> object, which means that the assembly in which the class is defined must already be loaded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-277">다음 예제에서는 포함 된 어셈블리를 검색 합니다 <xref:System.Int32> 형식과 해당 이름 및 파일 위치를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-277">The following example retrieves the assembly that contains the <xref:System.Int32> type and displays its name and file location.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/GetAssembly1.cpp#12)]
 [!code-csharp[System.Reflection.Assembly#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/GetAssembly1.cs#12)]
 [!code-vb[System.Reflection.Assembly#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/GetAssembly1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-278">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-278">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-279">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-279">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-280">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-280">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetCallingAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GetCallingAssembly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GetCallingAssembly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetCallingAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCallingAssembly () As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GetCallingAssembly();" />
      <MemberSignature Language="F#" Value="static member GetCallingAssembly : unit -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.GetCallingAssembly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-281">현재 실행 중인 메서드를 호출한 메서드의 <see cref="T:System.Reflection.Assembly" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-281">Returns the <see cref="T:System.Reflection.Assembly" /> of the method that invoked the currently executing method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-282">현재 실행 중인 메서드를 호출하는 메서드의 <see langword="Assembly" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-282">The <see langword="Assembly" /> object of the method that invoked the currently executing method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-283">호출 하는 메서드를 <xref:System.Reflection.Assembly.GetCallingAssembly%2A> 메서드는 시간 (JIT) 컴파일러에 의해 확장 된 인라인 또는 해당 호출자에 게 확장 된 인라인 인 경우 어셈블리는 반환한 <xref:System.Reflection.Assembly.GetCallingAssembly%2A> 예기치 않게 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-283">If the method that calls the <xref:System.Reflection.Assembly.GetCallingAssembly%2A> method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by <xref:System.Reflection.Assembly.GetCallingAssembly%2A> may differ unexpectedly.</span></span> <span data-ttu-id="865a4-284">예를 들어 다음 메서드 및 어셈블리를 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-284">For example, consider the following methods and assemblies:</span></span>  
  
-   <span data-ttu-id="865a4-285">메서드 `M1` 어셈블리에서 `A1` 호출 <xref:System.Reflection.Assembly.GetCallingAssembly%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-285">Method `M1` in assembly `A1` calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.</span></span>  
  
-   <span data-ttu-id="865a4-286">메서드 `M2` 어셈블리에서 `A2` 호출 `M1`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-286">Method `M2` in assembly `A2` calls `M1`.</span></span>  
  
-   <span data-ttu-id="865a4-287">메서드 `M3` 어셈블리에서 `A3` 호출 `M2`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-287">Method `M3` in assembly `A3` calls `M2`.</span></span>  
  
 <span data-ttu-id="865a4-288">때 `M1` 인라인 화 되지 <xref:System.Reflection.Assembly.GetCallingAssembly%2A> 반환 `A2`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-288">When `M1` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`.</span></span> <span data-ttu-id="865a4-289">때 `M1` 인라인 <xref:System.Reflection.Assembly.GetCallingAssembly%2A> 반환 `A3`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-289">When `M1` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`.</span></span> <span data-ttu-id="865a4-290">마찬가지로, `M2` 인라인 화 되지 <xref:System.Reflection.Assembly.GetCallingAssembly%2A> 반환 `A2`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-290">Similarly, when `M2` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`.</span></span> <span data-ttu-id="865a4-291">때 `M2` 인라인 <xref:System.Reflection.Assembly.GetCallingAssembly%2A> 반환 `A3`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-291">When `M2` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`.</span></span>  
  
 <span data-ttu-id="865a4-292">이 효과도 발생 하면 `M1` 마무리 호출에서 실행 되 `M2`, 때나 `M2` 마무리 호출에서 실행 되 `M3`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-292">This effect also occurs when `M1` executes as a tail call from `M2`, or when `M2` executes as a tail call from `M3`.</span></span> <span data-ttu-id="865a4-293">JIT 컴파일러를 방지할 수 있습니다 인라인 호출 하는 메서드 <xref:System.Reflection.Assembly.GetCallingAssembly%2A>를 적용 하 여는 <xref:System.Runtime.CompilerServices.MethodImplAttribute> 특성과 <xref:System.Runtime.CompilerServices.MethodImplOptions.NoInlining?displayProperty=nameWithType> 플래그를 이지만 마무리 호출을 방지 하는 것에 대 한 유사한 메커니즘이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-293">You can prevent the JIT compiler from inlining the method that calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>, by applying the <xref:System.Runtime.CompilerServices.MethodImplAttribute> attribute with the <xref:System.Runtime.CompilerServices.MethodImplOptions.NoInlining?displayProperty=nameWithType> flag, but there is no similar mechanism for preventing tail calls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-294">다음 예에서는 현재 메서드의 호출 어셈블리를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-294">The following example gets the calling assembly of the current method.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/getcallingassembly1.cpp#4)]
 [!code-csharp[System.Reflection.Assembly#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/getcallingassembly1.cs#4)]
 [!code-vb[System.Reflection.Assembly#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/getcallingassembly1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-295">이 어셈블리에 대한 사용자 지정 특성을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-295">Gets the custom attributes for this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public virtual object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]&#xA;override this.GetCustomAttributes : bool -&gt; obj[]" Usage="assembly.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="865a4-296">이 인수는 <see cref="T:System.Reflection.Assembly" /> 형식의 개체에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-296">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-297">이 어셈블리에 대한 사용자 지정 특성을 모두 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-297">Gets all the custom attributes for this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-298">이 어셈블리에 대한 사용자 지정 특성이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-298">An array that contains the custom attributes for this assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-299">이 메서드는 해당 구현 <xref:System.Reflection.ICustomAttributeProvider> 인터페이스 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-299">This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method.</span></span> <span data-ttu-id="865a4-300">따라서는 `inherit` 무시 하는 경우에 매개 변수를 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-300">Therefore, the `inherit` parameter must be specified even though it is ignored.</span></span>  
  
 <span data-ttu-id="865a4-301">의사 (pseudo) 특성을 특성이 있는 경우 설정 해야 하는 핵심적인 메타 데이터의 비트를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-301">A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present.</span></span> <span data-ttu-id="865a4-302">형식에 대 한 메타 데이터를 확장 하 고 유형과 함께 저장 되는 사용자 지정 특성을 달리 의사 (pseudo) 특성을 형식에 대 한 메타 데이터를 수정 하 고 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-302">Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded.</span></span> <span data-ttu-id="865a4-303">결과 비트 중 일부 기존 리플렉션 Api를 사용 하 여 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-303">Some of the resulting bits cannot be accessed using existing reflection APIs.</span></span>  
  
 <span data-ttu-id="865a4-304">다음 표에서 다양 한 의사 (pseudo) 특성 및 리플렉션을 사용할 수 있는 비트에 대 한 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-304">The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.</span></span>  
  
|<span data-ttu-id="865a4-305">의사 (pseudo) 특성</span><span class="sxs-lookup"><span data-stu-id="865a4-305">Pseudo-Attribute</span></span>|<span data-ttu-id="865a4-306">메타 데이터 비트</span><span class="sxs-lookup"><span data-stu-id="865a4-306">Metadata Bits</span></span>|<span data-ttu-id="865a4-307">리플렉션 접근자</span><span class="sxs-lookup"><span data-stu-id="865a4-307">Reflection Accessor</span></span>|  
|-----------------------|-------------------|-------------------------|  
|<span data-ttu-id="865a4-308">DllImportAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-308">DllImportAttribute</span></span>|<span data-ttu-id="865a4-309">CorPInvokeMap</span><span class="sxs-lookup"><span data-stu-id="865a4-309">CorPInvokeMap</span></span><br /><br /> <span data-ttu-id="865a4-310">DLL 이름</span><span class="sxs-lookup"><span data-stu-id="865a4-310">DLL name</span></span>|<span data-ttu-id="865a4-311">일반 메서드/전역 메서드 특성에 대 한 PInvokeMap에 없는 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-311">No accessor for PInvokeMap for ordinary method/global method attributes.</span></span><br /><br /> <span data-ttu-id="865a4-312">DLL 이름에 대 한 접근자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-312">No accessor for DLL name.</span></span>|  
|<span data-ttu-id="865a4-313">GuidAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-313">GuidAttribute</span></span>|<span data-ttu-id="865a4-314">실제 사용자 지정 특성으로 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-314">Stored as a real custom attribute.</span></span>|<span data-ttu-id="865a4-315">실제 사용자 지정 특성으로 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-315">Accessed as a real custom attribute.</span></span>|  
|<span data-ttu-id="865a4-316">ComImportAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-316">ComImportAttribute</span></span>|<span data-ttu-id="865a4-317">CorTypeAttr.tdImport</span><span class="sxs-lookup"><span data-stu-id="865a4-317">CorTypeAttr.tdImport</span></span>|<span data-ttu-id="865a4-318">Type.Attributes.Import</span><span class="sxs-lookup"><span data-stu-id="865a4-318">Type.Attributes.Import</span></span>|  
|<span data-ttu-id="865a4-319">SerializableAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-319">SerializableAttribute</span></span>|<span data-ttu-id="865a4-320">CorTypeAttr.tdSerializable</span><span class="sxs-lookup"><span data-stu-id="865a4-320">CorTypeAttr.tdSerializable</span></span>|<span data-ttu-id="865a4-321">Type.Attributes.Serializable</span><span class="sxs-lookup"><span data-stu-id="865a4-321">Type.Attributes.Serializable</span></span>|  
|<span data-ttu-id="865a4-322">NonSerializedAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-322">NonSerializedAttribute</span></span>|<span data-ttu-id="865a4-323">CorFieldAttr.fdNotSerialized</span><span class="sxs-lookup"><span data-stu-id="865a4-323">CorFieldAttr.fdNotSerialized</span></span>|<span data-ttu-id="865a4-324">FieldInfo.Attributes.NotSerialized</span><span class="sxs-lookup"><span data-stu-id="865a4-324">FieldInfo.Attributes.NotSerialized</span></span>|  
|<span data-ttu-id="865a4-325">MethodImplAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-325">MethodImplAttribute</span></span>|<span data-ttu-id="865a4-326">CorMethodImpl</span><span class="sxs-lookup"><span data-stu-id="865a4-326">CorMethodImpl</span></span>|<span data-ttu-id="865a4-327">MethodInfo.GetMethodImplementationFlags()</span><span class="sxs-lookup"><span data-stu-id="865a4-327">MethodInfo.GetMethodImplementationFlags()</span></span><br /><br /> <span data-ttu-id="865a4-328">ConstructorInfo.GetMethodImplementationFlags()</span><span class="sxs-lookup"><span data-stu-id="865a4-328">ConstructorInfo.GetMethodImplementationFlags()</span></span>|  
|<span data-ttu-id="865a4-329">MarshalAsAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-329">MarshalAsAttribute</span></span>|<span data-ttu-id="865a4-330">다양 한 비트입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-330">Various bits.</span></span>|<span data-ttu-id="865a4-331">접근자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-331">No accessor.</span></span>|  
|<span data-ttu-id="865a4-332">PreserveSigAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-332">PreserveSigAttribute</span></span>|<span data-ttu-id="865a4-333">CorMethodImpl.miOLE</span><span class="sxs-lookup"><span data-stu-id="865a4-333">CorMethodImpl.miOLE</span></span>|<span data-ttu-id="865a4-334">MethodInfo.GetMethodImplementationFlags().OLE</span><span class="sxs-lookup"><span data-stu-id="865a4-334">MethodInfo.GetMethodImplementationFlags().OLE</span></span><br /><br /> <span data-ttu-id="865a4-335">ConstructorInfo.GetMethodImplementationFlags().OLE</span><span class="sxs-lookup"><span data-stu-id="865a4-335">ConstructorInfo.GetMethodImplementationFlags().OLE</span></span>|  
|<span data-ttu-id="865a4-336">InAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-336">InAttribute</span></span>|<span data-ttu-id="865a4-337">CorParamAttr.pdIn</span><span class="sxs-lookup"><span data-stu-id="865a4-337">CorParamAttr.pdIn</span></span>|<span data-ttu-id="865a4-338">ParameterInfo.Attributes.In</span><span class="sxs-lookup"><span data-stu-id="865a4-338">ParameterInfo.Attributes.In</span></span>|  
|<span data-ttu-id="865a4-339">OutAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-339">OutAttribute</span></span>|<span data-ttu-id="865a4-340">CorParamAttr.pdOut</span><span class="sxs-lookup"><span data-stu-id="865a4-340">CorParamAttr.pdOut</span></span>|<span data-ttu-id="865a4-341">ParameterInfo.Attributes.Out</span><span class="sxs-lookup"><span data-stu-id="865a4-341">ParameterInfo.Attributes.Out</span></span>|  
|<span data-ttu-id="865a4-342">StructLayoutAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-342">StructLayoutAttribute</span></span>|<span data-ttu-id="865a4-343">CorTypeAttr.tdLayoutSequential</span><span class="sxs-lookup"><span data-stu-id="865a4-343">CorTypeAttr.tdLayoutSequential</span></span><br /><br /> <span data-ttu-id="865a4-344">CorTypeAttr.tdExplicitLayout</span><span class="sxs-lookup"><span data-stu-id="865a4-344">CorTypeAttr.tdExplicitLayout</span></span><br /><br /> <span data-ttu-id="865a4-345">CorTypeAttr.tdAnsiClass</span><span class="sxs-lookup"><span data-stu-id="865a4-345">CorTypeAttr.tdAnsiClass</span></span><br /><br /> <span data-ttu-id="865a4-346">CorTypeAttr.tdUnicodeClass</span><span class="sxs-lookup"><span data-stu-id="865a4-346">CorTypeAttr.tdUnicodeClass</span></span><br /><br /> <span data-ttu-id="865a4-347">CorTypeAttr.tdAutoClass</span><span class="sxs-lookup"><span data-stu-id="865a4-347">CorTypeAttr.tdAutoClass</span></span><br /><br /> <span data-ttu-id="865a4-348">클래스 압축 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-348">Class packing.</span></span>|<span data-ttu-id="865a4-349">Type.Attributes.LayoutSequential</span><span class="sxs-lookup"><span data-stu-id="865a4-349">Type.Attributes.LayoutSequential</span></span><br /><br /> <span data-ttu-id="865a4-350">Type.Attributes.ExplicitLayout</span><span class="sxs-lookup"><span data-stu-id="865a4-350">Type.Attributes.ExplicitLayout</span></span><br /><br /> <span data-ttu-id="865a4-351">Type.Attributes.AnsiClass</span><span class="sxs-lookup"><span data-stu-id="865a4-351">Type.Attributes.AnsiClass</span></span><br /><br /> <span data-ttu-id="865a4-352">Type.Attributes.UnicodeClass</span><span class="sxs-lookup"><span data-stu-id="865a4-352">Type.Attributes.UnicodeClass</span></span><br /><br /> <span data-ttu-id="865a4-353">Type.Attributes.AutoClass</span><span class="sxs-lookup"><span data-stu-id="865a4-353">Type.Attributes.AutoClass</span></span><br /><br /> <span data-ttu-id="865a4-354">접근자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-354">No accessor.</span></span>|  
|<span data-ttu-id="865a4-355">FieldOffsetAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-355">FieldOffsetAttribute</span></span>|<span data-ttu-id="865a4-356">필드 오프셋입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-356">Field offset.</span></span>|<span data-ttu-id="865a4-357">접근자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-357">No accessor.</span></span>|  
|<span data-ttu-id="865a4-358">AssemblyLoadAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-358">AssemblyLoadAttribute</span></span>|<span data-ttu-id="865a4-359">CorAssemblyFlags</span><span class="sxs-lookup"><span data-stu-id="865a4-359">CorAssemblyFlags</span></span>|<span data-ttu-id="865a4-360">접근자 또는 열거자 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-360">No accessor or enumerator.</span></span>|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-361">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-361">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-362">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-362">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]&#xA;override this.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="assembly.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="865a4-363">사용자 지정 특성이 반환될 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-363">The type for which the custom attributes are to be returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="865a4-364">이 인수는 <see cref="T:System.Reflection.Assembly" /> 형식의 개체에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-364">This argument is ignored for objects of type <see cref="T:System.Reflection.Assembly" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-365">형식에 의해 지정된 대로, 이 어셈블리에 대한 사용자 지정 특성을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-365">Gets the custom attributes for this assembly as specified by type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-366">
            <paramref name="attributeType" />에 의해 지정된 대로 이 어셈블리에 대한 사용자 지정 특성이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-366">An array that contains the custom attributes for this assembly as specified by <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-367">이 메서드는 해당 구현 <xref:System.Reflection.ICustomAttributeProvider> 인터페이스 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-367">This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method.</span></span> <span data-ttu-id="865a4-368">따라서는 `inherit` 무시 하는 경우에 매개 변수를 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-368">Therefore, the `inherit` parameter must be specified even though it is ignored.</span></span>  
  
 <span data-ttu-id="865a4-369">의사 (pseudo) 특성을 특성이 있는 경우 설정 해야 하는 핵심적인 메타 데이터의 비트를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-369">A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present.</span></span> <span data-ttu-id="865a4-370">형식에 대 한 메타 데이터를 확장 하 고 유형과 함께 저장 되는 사용자 지정 특성을 달리 의사 (pseudo) 특성을 형식에 대 한 메타 데이터를 수정 하 고 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-370">Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded.</span></span> <span data-ttu-id="865a4-371">결과 비트 중 일부 기존 리플렉션 Api를 사용 하 여 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-371">Some of the resulting bits cannot be accessed using existing reflection APIs.</span></span>  
  
 <span data-ttu-id="865a4-372">다음 표에서 다양 한 의사 (pseudo) 특성 및 리플렉션을 사용할 수 있는 비트에 대 한 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-372">The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.</span></span>  
  
|<span data-ttu-id="865a4-373">의사 (pseudo) 특성</span><span class="sxs-lookup"><span data-stu-id="865a4-373">Pseudo-Attribute</span></span>|<span data-ttu-id="865a4-374">메타 데이터 비트</span><span class="sxs-lookup"><span data-stu-id="865a4-374">Metadata Bits</span></span>|<span data-ttu-id="865a4-375">리플렉션 접근자</span><span class="sxs-lookup"><span data-stu-id="865a4-375">Reflection Accessor</span></span>|  
|-----------------------|-------------------|-------------------------|  
|<span data-ttu-id="865a4-376">DllImportAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-376">DllImportAttribute</span></span>|<span data-ttu-id="865a4-377">CorPInvokeMap</span><span class="sxs-lookup"><span data-stu-id="865a4-377">CorPInvokeMap</span></span><br /><br /> <span data-ttu-id="865a4-378">DLL 이름</span><span class="sxs-lookup"><span data-stu-id="865a4-378">DLL name</span></span>|<span data-ttu-id="865a4-379">일반 메서드/전역 메서드 특성에 대 한 PInvokeMap에 없는 접근자입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-379">No accessor for PInvokeMap for ordinary method/global method attributes.</span></span><br /><br /> <span data-ttu-id="865a4-380">DLL 이름에 대 한 접근자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-380">No accessor for DLL name.</span></span>|  
|<span data-ttu-id="865a4-381">GuidAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-381">GuidAttribute</span></span>|<span data-ttu-id="865a4-382">실제 사용자 지정 특성으로 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-382">Stored as a real custom attribute.</span></span>|<span data-ttu-id="865a4-383">실제 사용자 지정 특성으로 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-383">Accessed as a real custom attribute.</span></span>|  
|<span data-ttu-id="865a4-384">ComImportAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-384">ComImportAttribute</span></span>|<span data-ttu-id="865a4-385">CorTypeAttr.tdImport</span><span class="sxs-lookup"><span data-stu-id="865a4-385">CorTypeAttr.tdImport</span></span>|<span data-ttu-id="865a4-386">Type.Attributes.Import</span><span class="sxs-lookup"><span data-stu-id="865a4-386">Type.Attributes.Import</span></span>|  
|<span data-ttu-id="865a4-387">SerializableAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-387">SerializableAttribute</span></span>|<span data-ttu-id="865a4-388">CorTypeAttr.tdSerializable</span><span class="sxs-lookup"><span data-stu-id="865a4-388">CorTypeAttr.tdSerializable</span></span>|<span data-ttu-id="865a4-389">Type.Attributes.Serializable</span><span class="sxs-lookup"><span data-stu-id="865a4-389">Type.Attributes.Serializable</span></span>|  
|<span data-ttu-id="865a4-390">NonSerializedAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-390">NonSerializedAttribute</span></span>|<span data-ttu-id="865a4-391">CorFieldAttr.fdNotSerialized</span><span class="sxs-lookup"><span data-stu-id="865a4-391">CorFieldAttr.fdNotSerialized</span></span>|<span data-ttu-id="865a4-392">FieldInfo.Attributes.NotSerialized</span><span class="sxs-lookup"><span data-stu-id="865a4-392">FieldInfo.Attributes.NotSerialized</span></span>|  
|<span data-ttu-id="865a4-393">MethodImplAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-393">MethodImplAttribute</span></span>|<span data-ttu-id="865a4-394">CorMethodImpl</span><span class="sxs-lookup"><span data-stu-id="865a4-394">CorMethodImpl</span></span>|<span data-ttu-id="865a4-395">MethodInfo.GetMethodImplementationFlags()</span><span class="sxs-lookup"><span data-stu-id="865a4-395">MethodInfo.GetMethodImplementationFlags()</span></span><br /><br /> <span data-ttu-id="865a4-396">ConstructorInfo.GetMethodImplementationFlags()</span><span class="sxs-lookup"><span data-stu-id="865a4-396">ConstructorInfo.GetMethodImplementationFlags()</span></span>|  
|<span data-ttu-id="865a4-397">MarshalAsAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-397">MarshalAsAttribute</span></span>|<span data-ttu-id="865a4-398">다양 한 비트입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-398">Various bits.</span></span>|<span data-ttu-id="865a4-399">접근자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-399">No accessor.</span></span>|  
|<span data-ttu-id="865a4-400">PreserveSigAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-400">PreserveSigAttribute</span></span>|<span data-ttu-id="865a4-401">CorMethodImpl.miOLE</span><span class="sxs-lookup"><span data-stu-id="865a4-401">CorMethodImpl.miOLE</span></span>|<span data-ttu-id="865a4-402">MethodInfo.GetMethodImplementationFlags().OLE</span><span class="sxs-lookup"><span data-stu-id="865a4-402">MethodInfo.GetMethodImplementationFlags().OLE</span></span><br /><br /> <span data-ttu-id="865a4-403">ConstructorInfo.GetMethodImplementationFlags().OLE</span><span class="sxs-lookup"><span data-stu-id="865a4-403">ConstructorInfo.GetMethodImplementationFlags().OLE</span></span>|  
|<span data-ttu-id="865a4-404">InAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-404">InAttribute</span></span>|<span data-ttu-id="865a4-405">CorParamAttr.pdIn</span><span class="sxs-lookup"><span data-stu-id="865a4-405">CorParamAttr.pdIn</span></span>|<span data-ttu-id="865a4-406">ParameterInfo.Attributes.In</span><span class="sxs-lookup"><span data-stu-id="865a4-406">ParameterInfo.Attributes.In</span></span>|  
|<span data-ttu-id="865a4-407">OutAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-407">OutAttribute</span></span>|<span data-ttu-id="865a4-408">CorParamAttr.pdOut</span><span class="sxs-lookup"><span data-stu-id="865a4-408">CorParamAttr.pdOut</span></span>|<span data-ttu-id="865a4-409">ParameterInfo.Attributes.Out</span><span class="sxs-lookup"><span data-stu-id="865a4-409">ParameterInfo.Attributes.Out</span></span>|  
|<span data-ttu-id="865a4-410">StructLayoutAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-410">StructLayoutAttribute</span></span>|<span data-ttu-id="865a4-411">CorTypeAttr.tdLayoutSequential</span><span class="sxs-lookup"><span data-stu-id="865a4-411">CorTypeAttr.tdLayoutSequential</span></span><br /><br /> <span data-ttu-id="865a4-412">CorTypeAttr.tdExplicitLayout</span><span class="sxs-lookup"><span data-stu-id="865a4-412">CorTypeAttr.tdExplicitLayout</span></span><br /><br /> <span data-ttu-id="865a4-413">CorTypeAttr.tdAnsiClass</span><span class="sxs-lookup"><span data-stu-id="865a4-413">CorTypeAttr.tdAnsiClass</span></span><br /><br /> <span data-ttu-id="865a4-414">CorTypeAttr.tdUnicodeClass</span><span class="sxs-lookup"><span data-stu-id="865a4-414">CorTypeAttr.tdUnicodeClass</span></span><br /><br /> <span data-ttu-id="865a4-415">CorTypeAttr.tdAutoClass</span><span class="sxs-lookup"><span data-stu-id="865a4-415">CorTypeAttr.tdAutoClass</span></span><br /><br /> <span data-ttu-id="865a4-416">클래스 압축 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-416">Class packing.</span></span>|<span data-ttu-id="865a4-417">Type.Attributes.LayoutSequential</span><span class="sxs-lookup"><span data-stu-id="865a4-417">Type.Attributes.LayoutSequential</span></span><br /><br /> <span data-ttu-id="865a4-418">Type.Attributes.ExplicitLayout</span><span class="sxs-lookup"><span data-stu-id="865a4-418">Type.Attributes.ExplicitLayout</span></span><br /><br /> <span data-ttu-id="865a4-419">Type.Attributes.AnsiClass</span><span class="sxs-lookup"><span data-stu-id="865a4-419">Type.Attributes.AnsiClass</span></span><br /><br /> <span data-ttu-id="865a4-420">Type.Attributes.UnicodeClass</span><span class="sxs-lookup"><span data-stu-id="865a4-420">Type.Attributes.UnicodeClass</span></span><br /><br /> <span data-ttu-id="865a4-421">Type.Attributes.AutoClass</span><span class="sxs-lookup"><span data-stu-id="865a4-421">Type.Attributes.AutoClass</span></span><br /><br /> <span data-ttu-id="865a4-422">접근자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-422">No accessor.</span></span>|  
|<span data-ttu-id="865a4-423">FieldOffsetAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-423">FieldOffsetAttribute</span></span>|<span data-ttu-id="865a4-424">필드 오프셋입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-424">Field offset.</span></span>|<span data-ttu-id="865a4-425">접근자가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-425">No accessor.</span></span>|  
|<span data-ttu-id="865a4-426">AssemblyLoadAttribute</span><span class="sxs-lookup"><span data-stu-id="865a4-426">AssemblyLoadAttribute</span></span>|<span data-ttu-id="865a4-427">CorAssemblyFlags</span><span class="sxs-lookup"><span data-stu-id="865a4-427">CorAssemblyFlags</span></span>|<span data-ttu-id="865a4-428">접근자 또는 열거자 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-428">No accessor or enumerator.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-429">
            <paramref name="attributeType" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-429">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-430">
            <paramref name="attributeType" />이 런타임 형식이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-430">
              <paramref name="attributeType" /> is not a runtime type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-431">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-431">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-432">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-432">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributesData : unit -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;&#xA;override this.GetCustomAttributesData : unit -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="assembly.GetCustomAttributesData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-433">
            <see cref="T:System.Reflection.Assembly" /> 개체로 표현되는, 현재 <see cref="T:System.Reflection.CustomAttributeData" />에 적용된 특성 관련 정보를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-433">Returns information about the attributes that have been applied to the current <see cref="T:System.Reflection.Assembly" />, expressed as <see cref="T:System.Reflection.CustomAttributeData" /> objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-434">현재 어셈블리에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 제네릭 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-434">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-435">리플렉션 전용 컨텍스트에 리플렉션 전용 컨텍스트에 로드 되는 코드에서 직접 사용자 지정 특성이 정의 되어 있는 경우 코드의 사용자 지정 특성을 검사할이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-435">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="865a4-436">와 같은 메서드 <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> 고 <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> 특성의 인스턴스를 만들기 때문에 이러한 경우에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-436">Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="865a4-437">리플렉션 전용 컨텍스트에서 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-437">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="865a4-438">자세한 내용 및 예를 들어 코드를 실행 하는 것에 대 한 참조를 <xref:System.Reflection.CustomAttributeData> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-438">For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEntryAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GetEntryAssembly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GetEntryAssembly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetEntryAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEntryAssembly () As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GetEntryAssembly();" />
      <MemberSignature Language="F#" Value="static member GetEntryAssembly : unit -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.GetEntryAssembly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-439">기본 응용 프로그램 도메인에 있는 프로세스 실행 파일을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-439">Gets the process executable in the default application domain.</span>
          </span>
          <span data-ttu-id="865a4-440">이 실행 파일은 다른 응용 프로그램 도메인에서 <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />에 의해 실행된 첫 번째 실행 파일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-440">In other application domains, this is the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-441">어셈블리는 기본 응용 프로그램 도메인에 있는 프로세스 실행 파일이거나 <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />에 의해 실행된 첫 번째 실행 파일입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-441">The assembly that is the process executable in the default application domain, or the first executable that was executed by <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" />.</span>
          </span>
          <span data-ttu-id="865a4-442">비관리 코드에서 호출한 경우에는 <see langword="null" />이 반환될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-442">Can return <see langword="null" /> when called from unmanaged code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-443">합니다 <xref:System.Reflection.Assembly.GetEntryAssembly%2A> 메서드를 반환할 수 있습니다 `null` 경우 관리 되는 어셈블리를 관리 되지 않는 응용 프로그램에서 로드 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-443">The <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method can return `null` when a managed assembly has been loaded from an unmanaged application.</span></span> <span data-ttu-id="865a4-444">예를 들어 관리 되지 않는 응용 프로그램 C#에 대 한 호출에서 작성 한 COM 구성 요소의 인스턴스를 만듭니다는 <xref:System.Reflection.Assembly.GetEntryAssembly%2A> 관리 되는 어셈블리 보다는 비관리 코드 진입점 프로세스에 있어서 메서드는 C# 구성 요소에서 null을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-444">For example, if an unmanaged application creates an instance of a COM component written in C#, a call to the <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method from the C# component returns null, because the entry point for the process was unmanaged code rather than a managed assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExecutingAssembly">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly GetExecutingAssembly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly GetExecutingAssembly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetExecutingAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExecutingAssembly () As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ GetExecutingAssembly();" />
      <MemberSignature Language="F#" Value="static member GetExecutingAssembly : unit -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.GetExecutingAssembly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-445">현재 실행 중인 코드가 포함된 어셈블리를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-445">Gets the assembly that contains the code that is currently executing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-446">현재 실행 중인 코드가 포함된 어셈블리를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-446">The assembly that contains the code that is currently executing.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-447">성능상의 이유로 알 수 없는 디자인 타임에 어셈블리는 현재 실행 중인 경우에이 메서드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-447">For performance reasons, you should call this method only when you do not know at design time what assembly is currently executing.</span></span> <span data-ttu-id="865a4-448">검색 하는 권장된 방법은 <xref:System.Reflection.Assembly> 현재 어셈블리를 나타내는 개체를 사용 하는 것은 <xref:System.Type.Assembly%2A?displayProperty=nameWithType> 다음 예제와 같이 어셈블리에서 형식의 속성을 찾을.</span><span class="sxs-lookup"><span data-stu-id="865a4-448">The recommended way to retrieve an <xref:System.Reflection.Assembly> object that represents the current assembly is to use the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property of a type found in the assembly, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/assembly1.cs#1)]
 [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/assembly1.vb#1)]  
  
 <span data-ttu-id="865a4-449">현재 실행 중인 코드를 호출한 메서드를 포함 하는 어셈블리를 가져오려면 <xref:System.Reflection.Assembly.GetCallingAssembly%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-449">To get the assembly that contains the method that called the currently executing code, use <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-450">다음 예제에서는 <xref:System.Type.Assembly%2A?displayProperty=nameWithType> 현재 실행 중인 어셈블리를 가져올 속성 형식을 기반으로 해당 어셈블리에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-450">The following example uses the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property to get the currently executing assembly based on a type contained in that assembly.</span></span> <span data-ttu-id="865a4-451">또한 호출을 <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> 표시를 반환 하는 방법은 <xref:System.Reflection.Assembly> 동일한 어셈블리를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-451">It also calls the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method to show that it returns an <xref:System.Reflection.Assembly> object that represents the same assembly.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cpp/getexecutingassembly1.cpp#5)]
 [!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/getexecutingassembly1.cs#5)]
 [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/getexecutingassembly1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportedTypes">
      <MemberSignature Language="C#" Value="public virtual Type[] GetExportedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetExportedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetExportedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExportedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetExportedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetExportedTypes : unit -&gt; Type[]&#xA;override this.GetExportedTypes : unit -&gt; Type[]" Usage="assembly.GetExportedTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetExportedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-452">이 어셈블리에 정의된 형식 중 어셈블리 외부에서 볼 수 있는 public 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-452">Gets the public types defined in this assembly that are visible outside the assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-453">이 어셈블리에 정의되어 있고 어셈블리 외부에서 볼 수 있는 형식을 나타내는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-453">An array that represents the types defined in this assembly that are visible outside the assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-454">Public 형식 및 다른 공용 형식에 중첩 된 public 형식의 하는 어셈블리 외부에 표시 형식 뿐입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-454">The only types visible outside an assembly are public types and public types nested within other public types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-455">다양 한 액세스 수준 및 호출을 사용 하 여 클래스 수를 정의 하는 다음 코드 샘플 <xref:System.Reflection.Assembly.GetExportedTypes%2A> 어셈블리 외부에서 표시 되는 것을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-455">The following code sample defines a number of classes with various access levels, and calls <xref:System.Reflection.Assembly.GetExportedTypes%2A> to display the ones that are visible from outside the assembly.</span></span>  
  
 [!code-cpp[Assembly.GetExportedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.GetExportedTypes/CPP/source.cpp#1)]
 [!code-csharp[Assembly.GetExportedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.GetExportedTypes/CS/source.cs#1)]
 [!code-vb[Assembly.GetExportedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.GetExportedTypes/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="865a4-456">어셈블리가 동적 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-456">The assembly is a dynamic assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-457">종속 어셈블리를 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-457">Unable to load a dependent assembly.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual System.IO.FileStream GetFile (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.FileStream GetFile(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFile (name As String) As FileStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::FileStream ^ GetFile(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetFile : string -&gt; System.IO.FileStream&#xA;override this.GetFile : string -&gt; System.IO.FileStream" Usage="assembly.GetFile name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetFile(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="865a4-458">지정된 파일의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-458">The name of the specified file.</span>
          </span>
          <span data-ttu-id="865a4-459">파일 경로는 포함하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-459">Do not include the path to the file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-460">이 어셈블리의 매니페스트 파일 테이블에서 지정된 파일에 대한 <see cref="T:System.IO.FileStream" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-460">Gets a <see cref="T:System.IO.FileStream" /> for the specified file in the file table of the manifest of this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-461">파일이 없는 경우 지정된 파일 또는 <see langword="null" />을 포함하는 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-461">A stream that contains the specified file, or <see langword="null" /> if the file is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-462">이 메서드는 공용 및 개인 리소스 파일을 모두에서 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-462">This method works on both public and private resource files.</span></span>  
  
 <span data-ttu-id="865a4-463">`name` 파일 경로가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-463">The `name` should not include the path to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-464">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-464">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-465">
            <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-465">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-466">
            <paramref name="name" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-466">The <paramref name="name" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-467">
            <paramref name="name" />을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-467">
              <paramref name="name" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-468">
            <paramref name="name" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-468">
              <paramref name="name" /> is not a valid assembly.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-469">경로 지정 된 파일을 읽는 데 필요한 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-469">for access to the path and for reading the specified file.</span>
          </span>
          <span data-ttu-id="865a4-470">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> 및 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-470">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> and <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFiles">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-471">어셈블리 매니페스트의 파일 테이블에 있는 파일을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-471">Gets the files in the file table of an assembly manifest.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public virtual System.IO.FileStream[] GetFiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.FileStream[] GetFiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetFiles" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFiles () As FileStream()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::IO::FileStream ^&gt; ^ GetFiles();" />
      <MemberSignature Language="F#" Value="abstract member GetFiles : unit -&gt; System.IO.FileStream[]&#xA;override this.GetFiles : unit -&gt; System.IO.FileStream[]" Usage="assembly.GetFiles " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetFiles</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-472">어셈블리 매니페스트의 파일 테이블에 있는 파일을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-472">Gets the files in the file table of an assembly manifest.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-473">파일을 포함하는 스트림의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-473">An array of streams that contain the files.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-474">이 메서드는 공용 및 개인 리소스 파일에서 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-474">This method works on public and private resource files.</span></span>  
  
 <span data-ttu-id="865a4-475">이 오버 로드는 호출에 해당 하는 <xref:System.Reflection.Assembly.GetFiles%28System.Boolean%29> 오버 로드 하 고 지정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-475">This overload is equivalent to calling the <xref:System.Reflection.Assembly.GetFiles%28System.Boolean%29> overload and specifying `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-476">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-476">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-477">파일을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-477">A file was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-478">파일이 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-478">A file was not a valid assembly.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public virtual System.IO.FileStream[] GetFiles (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.FileStream[] GetFiles(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetFiles(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFiles (getResourceModules As Boolean) As FileStream()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::IO::FileStream ^&gt; ^ GetFiles(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="abstract member GetFiles : bool -&gt; System.IO.FileStream[]&#xA;override this.GetFiles : bool -&gt; System.IO.FileStream[]" Usage="assembly.GetFiles getResourceModules" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetFiles(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileStream[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="getResourceModules">
          <span data-ttu-id="865a4-479">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-479">
              <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-480">리소스 모듈의 포함 여부를 지정하여 어셈블리 매니페스트의 파일 테이블에서 파일을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-480">Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-481">파일을 포함하는 스트림의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-481">An array of streams that contain the files.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-482">이 메서드는 공용 및 개인 리소스 파일에서 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-482">This method works on public and private resource files.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-483">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-483">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-484">파일을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-484">A file was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-485">파일이 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-485">A file was not a valid assembly.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetForwardedTypes">
      <MemberSignature Language="C#" Value="public virtual Type[] GetForwardedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetForwardedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetForwardedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetForwardedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetForwardedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetForwardedTypes : unit -&gt; Type[]&#xA;override this.GetForwardedTypes : unit -&gt; Type[]" Usage="assembly.GetForwardedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="assembly.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-486">이 인스턴스의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-486">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-487">부호 있는 32비트 정수 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-487">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetLoadedModules">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-488">이 어셈블리의 일부인 로드된 모듈을 모두 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-488">Gets all the loaded modules that are part of this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetLoadedModules">
      <MemberSignature Language="C#" Value="public System.Reflection.Module[] GetLoadedModules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module[] GetLoadedModules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetLoadedModules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedModules () As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Module ^&gt; ^ GetLoadedModules();" />
      <MemberSignature Language="F#" Value="abstract member GetLoadedModules : unit -&gt; System.Reflection.Module[]&#xA;override this.GetLoadedModules : unit -&gt; System.Reflection.Module[]" Usage="assembly.GetLoadedModules " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetLoadedModules</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-489">이 어셈블리의 일부인 로드된 모듈을 모두 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-489">Gets all the loaded modules that are part of this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-490">모듈의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-490">An array of modules.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedModules">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module[] GetLoadedModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module[] GetLoadedModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLoadedModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Module ^&gt; ^ GetLoadedModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="abstract member GetLoadedModules : bool -&gt; System.Reflection.Module[]&#xA;override this.GetLoadedModules : bool -&gt; System.Reflection.Module[]" Usage="assembly.GetLoadedModules getResourceModules" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetLoadedModules(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="getResourceModules">
          <span data-ttu-id="865a4-491">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-491">
              <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-492">이 어셈블리의 일부인 로드된 모듈을 모두 가져오며 리소스 모듈의 포함 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-492">Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-493">모듈의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-493">An array of modules.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceInfo">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManifestResourceInfo (resourceName As String) As ManifestResourceInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ManifestResourceInfo ^ GetManifestResourceInfo(System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="abstract member GetManifestResourceInfo : string -&gt; System.Reflection.ManifestResourceInfo&#xA;override this.GetManifestResourceInfo : string -&gt; System.Reflection.ManifestResourceInfo" Usage="assembly.GetManifestResourceInfo resourceName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetManifestResourceInfo(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ManifestResourceInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceName">
          <span data-ttu-id="865a4-494">리소스의 이름(대/소문자 구분)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-494">The case-sensitive name of the resource.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-495">지정된 리소스가 지속되는 방법에 대한 정보를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-495">Returns information about how the given resource has been persisted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-496">리소스의 토폴로지에 대한 정보로 채워진 개체이거나, 리소스를 찾을 수 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-496">An object that is populated with information about the resource's topology, or <see langword="null" /> if the resource is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-497">리소스 정보 리소스 호출자에 게 표시 되는지 또는 호출자에 게 하는 경우에 반환 됩니다 <xref:System.Security.Permissions.ReflectionPermission>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-497">Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-498">
            <paramref name="resourceName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-498">
              <paramref name="resourceName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-499">
            <paramref name="resourceName" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-499">The <paramref name="resourceName" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-500">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-500">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-501">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-501">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceNames" />
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetManifestResourceNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetManifestResourceNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetManifestResourceNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManifestResourceNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetManifestResourceNames();" />
      <MemberSignature Language="F#" Value="abstract member GetManifestResourceNames : unit -&gt; string[]&#xA;override this.GetManifestResourceNames : unit -&gt; string[]" Usage="assembly.GetManifestResourceNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetManifestResourceNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-502">이 어셈블리에 있는 모든 리소스의 이름을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-502">Returns the names of all the resources in this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-503">모든 리소스의 이름이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-503">An array that contains the names of all the resources.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-504">다음과 같이이 메서드에서 반환 된 배열의 각 리소스 이름을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-504">You can use each resource name in the array returned by this method as follows:</span></span>  
  
-   <span data-ttu-id="865a4-505">리소스 이름을 전달할 수 있습니다는 <xref:System.Reflection.Assembly.GetManifestResourceInfo%2A> 메서드는 리소스에 대 한 추가 정보를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-505">You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceInfo%2A> method to get additional information about the resource.</span></span>  
  
-   <span data-ttu-id="865a4-506">.Resources 파일 확장명을 제거 하 고 전달할 수 이름을 이진.resources 파일을 식별 하는 경우는 <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=nameWithType> 리소스 관리자를 인스턴스화하는 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-506">If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=nameWithType> constructor to instantiate the resource manager.</span></span>  
  
-   <span data-ttu-id="865a4-507">리소스 이름을 전달할 수 있습니다는 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> 검색 하는 메서드를 <xref:System.IO.Stream> 개체를 전달할 수 있습니다는 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-507">You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=nameWithType> constructor.</span></span>  
  
-   <span data-ttu-id="865a4-508">리소스 이름을 전달할 수 있습니다는 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> 검색 하는 메서드를 <xref:System.IO.Stream> 개체를 전달할 수 있습니다는 <xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=nameWithType> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-508">You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=nameWithType> constructor.</span></span>  
  
 <span data-ttu-id="865a4-509">리소스 정보 리소스 호출자에 게 표시 되는지 또는 호출자에 게 하는 경우에 반환 됩니다 <xref:System.Security.Permissions.ReflectionPermission>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-509">Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-510">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-510">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-511">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-511">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetManifestResourceStream">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-512">지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-512">Loads the specified manifest resource from this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream GetManifestResourceStream (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetManifestResourceStream(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManifestResourceStream (name As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetManifestResourceStream(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetManifestResourceStream : string -&gt; System.IO.Stream&#xA;override this.GetManifestResourceStream : string -&gt; System.IO.Stream" Usage="assembly.GetManifestResourceStream name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="865a4-513">요청된 매니페스트 리소스의 이름(대/소문자 구분)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-513">The case-sensitive name of the manifest resource being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-514">지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-514">Loads the specified manifest resource from this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-515">매니페스트 리소스이거나 컴파일하는 동안 리소스가 지정되지 않은 경우 또는 호출자가 리소스를 볼 수 없는 경우에는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-515">The manifest resource; or <see langword="null" /> if no resources were specified during compilation or if the resource is not visible to the caller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-516">매니페스트 리소스는 컴파일 타임에 어셈블리에 포함 된 리소스 (예: 이미지 파일).</span><span class="sxs-lookup"><span data-stu-id="865a4-516">A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time.</span></span> <span data-ttu-id="865a4-517">매니페스트 리소스에 대 한 자세한 내용은 참조 하세요. [Microsoft.NET Framework 리소스의 기본](http://go.microsoft.com/fwlink/?LinkId=204554) MSDN 라이브러리에서.</span><span class="sxs-lookup"><span data-stu-id="865a4-517">For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.</span></span>  
  
 <span data-ttu-id="865a4-518">리소스 정보 리소스 호출자에 게 표시 되는지 또는 호출자에 게 하는 경우에 반환 됩니다 <xref:System.Security.Permissions.ReflectionPermission>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-518">Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-519">이 메서드는 반환 `null` 다른 어셈블리의 전용 리소스에 액세스 하 고 호출자에 게 없는 경우 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-519">This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="865a4-520">어셈블리 매니페스트 리소스 파일을 나열 하는 경우 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> 반환을 <xref:System.IO.Stream> 시 디스크에 리소스 파일을 찾을 수 없는 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-520">If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time.</span></span> <span data-ttu-id="865a4-521">리소스 파일을 찾을 수 없습니다를 전달 하는 경우 결과 <xref:System.IO.Stream> 개체를 <xref:System.Resources.ResourceReader> 생성자에 의해는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-521">If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-522">
            <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-522">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-523">
            <paramref name="name" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-523">The <paramref name="name" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-524">
            <block subset="none" type="note">
              <para> Windows 스토어 앱용 [.NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.IO.IOException" />을 catch합니다.  </para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-524">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  </para>
              </block>
            </span>
          </span>
          <span data-ttu-id="865a4-525">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-525">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-526">
            <paramref name="name" />을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-526">
              <paramref name="name" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-527">
            <paramref name="name" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-527">
              <paramref name="name" /> is not a valid assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="865a4-528">리소스 길이는 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-528">Resource length is greater than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-529">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-529">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-530">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-530">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceNames" />
      </Docs>
    </Member>
    <Member MemberName="GetManifestResourceStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream GetManifestResourceStream (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetManifestResourceStream(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetManifestResourceStream(Type ^ type, System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetManifestResourceStream : Type * string -&gt; System.IO.Stream&#xA;override this.GetManifestResourceStream : Type * string -&gt; System.IO.Stream" Usage="assembly.GetManifestResourceStream (type, name)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.Type,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="865a4-531">해당 네임스페이스가 매니페스트 리소스 이름의 범위를 지정하는 데 사용된 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-531">The type whose namespace is used to scope the manifest resource name.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="865a4-532">요청된 매니페스트 리소스의 이름(대/소문자 구분)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-532">The case-sensitive name of the manifest resource being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-533">지정된 형식의 네임스페이스에 의해 범위가 지정된 매니페스트 리소스를 이 어셈블리에서 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-533">Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-534">매니페스트 리소스이거나 컴파일하는 동안 리소스가 지정되지 않은 경우 또는 호출자가 리소스를 볼 수 없는 경우에는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-534">The manifest resource; or <see langword="null" /> if no resources were specified during compilation or if the resource is not visible to the caller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-535">예를 들어의 전체 이름을 지정 하는 경우 `type` "MyNameSpace.MyClasses"은 및 `name` "MyNameSpace.Net" 라는 리소스 검색을 오버 로드는 "Net",이 메서드는 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-535">For example, if the full name specified for `type` is "MyNameSpace.MyClasses" and `name` is "Net", this method overload searches for a resource named "MyNameSpace.Net".</span></span>  
  
 <span data-ttu-id="865a4-536">매니페스트 리소스는 컴파일 타임에 어셈블리에 포함 된 리소스 (예: 이미지 파일).</span><span class="sxs-lookup"><span data-stu-id="865a4-536">A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time.</span></span> <span data-ttu-id="865a4-537">매니페스트 리소스에 대 한 자세한 내용은 참조 하세요. [Microsoft.NET Framework 리소스의 기본](http://go.microsoft.com/fwlink/?LinkId=204554) MSDN 라이브러리에서.</span><span class="sxs-lookup"><span data-stu-id="865a4-537">For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.</span></span>  
  
 <span data-ttu-id="865a4-538">리소스 정보 리소스 호출자에 게 표시 되는지 또는 호출자에 게 하는 경우에 반환 됩니다 <xref:System.Security.Permissions.ReflectionPermission>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-538">Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-539">이 메서드는 반환 `null` 다른 어셈블리의 전용 리소스에 액세스 하 고 호출자에 게 없는 경우 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-539">This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="865a4-540">어셈블리 매니페스트 리소스 파일을 나열 하는 경우 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> 반환을 <xref:System.IO.Stream> 시 디스크에 리소스 파일을 찾을 수 없는 경우에 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-540">If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time.</span></span> <span data-ttu-id="865a4-541">리소스 파일을 찾을 수 없습니다를 전달 하는 경우 결과 <xref:System.IO.Stream> 개체를 <xref:System.Resources.ResourceReader> 생성자에 의해는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-541">If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-542">
            <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-542">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-543">
            <paramref name="name" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-543">The <paramref name="name" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-544">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-544">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-545">
            <paramref name="name" />을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-545">
              <paramref name="name" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-546">
            <paramref name="name" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-546">
              <paramref name="name" /> is not a valid assembly.</span>
          </span>
        </exception>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="865a4-547">리소스 길이는 <see cref="F:System.Int64.MaxValue" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-547">Resource length is greater than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="865a4-548">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-548">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="865a4-549">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-549">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceNames" />
      </Docs>
    </Member>
    <Member MemberName="GetModule">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module GetModule (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module GetModule(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetModule(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModule (name As String) As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Module ^ GetModule(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetModule : string -&gt; System.Reflection.Module&#xA;override this.GetModule : string -&gt; System.Reflection.Module" Usage="assembly.GetModule name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetModule(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="865a4-550">요청되는 모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-550">The name of the module being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-551">이 어셈블리에 있는 지정된 모듈을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-551">Gets the specified module in this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-552">요청되는 모듈 또는 모듈이 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-552">The module being requested, or <see langword="null" /> if the module is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-553">이 메서드는 파일 이름에서 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-553">This method works on file names.</span></span>  
  
 <span data-ttu-id="865a4-554">클래스는 `Reflection.Emit` 네임 스페이스는 동적 모듈에 대 한 범위 이름을 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-554">Classes in the `Reflection.Emit` namespace emit the scope name for a dynamic module.</span></span> <span data-ttu-id="865a4-555">범위 이름으로 확인할 수 있습니다는 <xref:System.Reflection.Module.ScopeName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-555">The scope name can be determined by the <xref:System.Reflection.Module.ScopeName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="865a4-556">전달 하려는 모듈의 종류 `Assembly.GetModule`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-556">Pass the kind of module you want to `Assembly.GetModule`.</span></span> <span data-ttu-id="865a4-557">예를 들어, 어셈블리 매니페스트가 포함 된 모듈을 사용 하도록 하려는 경우 모듈의 범위 이름을 전달 `GetModule`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-557">For example, if you want the module that contains the assembly manifest, pass the scope name of the module to `GetModule`.</span></span> <span data-ttu-id="865a4-558">그렇지 않은 경우 모듈의 파일 이름을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-558">Otherwise, pass the file name of the module.</span></span> <span data-ttu-id="865a4-559">어셈블리 중 하나에 의해 로드 된 `Load` 메서드는 byte 매개 변수는 모듈 하나만 있고 매니페스트 모듈입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-559">Assemblies loaded by one of the `Load` methods that have a byte[] parameter have only one module, and that is the manifest module.</span></span> <span data-ttu-id="865a4-560">항상 범위 이름을 사용 하 여 이러한 모듈을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-560">Always seek these modules using the scope name.</span></span>  
  
 <span data-ttu-id="865a4-561">형식을 사용 하 여 특정 모듈에서 검색할 수 있습니다 <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-561">A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="865a4-562">호출 `Module.GetType` 모듈 매니페스트를 포함 하는 시작 하지 않습니다 전체 어셈블리를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-562">Calling `Module.GetType` on the module containing the manifest will not initiate a search of the entire assembly.</span></span> <span data-ttu-id="865a4-563">에서는 이기는 모듈에 관계 없이 어셈블리에서 형식을 검색 하려면 <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-563">To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-564">
            <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-564">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-565">
            <paramref name="name" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-565">The <paramref name="name" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-566">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-566">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-567">
            <paramref name="name" />을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-567">
              <paramref name="name" /> was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-568">
            <paramref name="name" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-568">
              <paramref name="name" /> is not a valid assembly.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetModules">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-569">이 어셈블리의 일부인 모듈을 모두 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-569">Gets all the modules that are part of this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetModules">
      <MemberSignature Language="C#" Value="public System.Reflection.Module[] GetModules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module[] GetModules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetModules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModules () As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Module ^&gt; ^ GetModules();" />
      <MemberSignature Language="F#" Value="abstract member GetModules : unit -&gt; System.Reflection.Module[]&#xA;override this.GetModules : unit -&gt; System.Reflection.Module[]" Usage="assembly.GetModules " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetModules</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-570">이 어셈블리의 일부인 모듈을 모두 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-570">Gets all the modules that are part of this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-571">모듈의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-571">An array of modules.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-572">이 메서드는 공용 및 개인 리소스 파일에서 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-572">This method works on public and private resource files.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-573">파일 이름 확장명을 사용 하 여 모듈을 내보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-573">Modules must be emitted with file name extensions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-574">다음 예제에서는 반환 되는 어셈블리 매니페스트가 포함 된 배열에서 모듈의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-574">The following example displays the name of the module in the returned array that contains the assembly manifest.</span></span>  
  
 [!code-cpp[Classic Assembly.GetModules Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Assembly.GetModules Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/CS/source.cs#1)]
 [!code-vb[Classic Assembly.GetModules Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-575">로드할 모듈은 파일 이름 확장명을 지정하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-575">The module to be loaded does not specify a file name extension.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetModules">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module[] GetModules (bool getResourceModules);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module[] GetModules(bool getResourceModules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetModules(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModules (getResourceModules As Boolean) As Module()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Module ^&gt; ^ GetModules(bool getResourceModules);" />
      <MemberSignature Language="F#" Value="abstract member GetModules : bool -&gt; System.Reflection.Module[]&#xA;override this.GetModules : bool -&gt; System.Reflection.Module[]" Usage="assembly.GetModules getResourceModules" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetModules(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="getResourceModules" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="getResourceModules">
          <span data-ttu-id="865a4-576">리소스 모듈을 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-576">
              <see langword="true" /> to include resource modules; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-577">이 어셈블리의 일부인 모듈을 모두 가져오며 리소스 모듈의 포함 여부를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-577">Gets all the modules that are part of this assembly, specifying whether to include resource modules.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-578">모듈의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-578">An array of modules.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-579">이 메서드는 공용 및 개인 리소스 파일에서 작동합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-579">This method works on public and private resource files.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-580">파일 이름 확장명을 사용 하 여 모듈을 내보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-580">Modules must be emitted with file name extensions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetName">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-581">이 어셈블리에 대한 <see cref="T:System.Reflection.AssemblyName" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-581">Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.AssemblyName GetName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.AssemblyName GetName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetName () As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::AssemblyName ^ GetName();" />
      <MemberSignature Language="F#" Value="abstract member GetName : unit -&gt; System.Reflection.AssemblyName&#xA;override this.GetName : unit -&gt; System.Reflection.AssemblyName" Usage="assembly.GetName " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-582">이 어셈블리에 대한 <see cref="T:System.Reflection.AssemblyName" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-582">Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-583">이 어셈블리에 대해 완전히 구문 분석된 표시 이름을 포함하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-583">An object that contains the fully parsed display name for this assembly.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-584">어셈블리의 경로에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-584">for access to the path of the assembly.</span>
          </span>
          <span data-ttu-id="865a4-585">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-585">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.AssemblyName GetName (bool copiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.AssemblyName GetName(bool copiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetName(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetName (copiedName As Boolean) As AssemblyName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::AssemblyName ^ GetName(bool copiedName);" />
      <MemberSignature Language="F#" Value="abstract member GetName : bool -&gt; System.Reflection.AssemblyName&#xA;override this.GetName : bool -&gt; System.Reflection.AssemblyName" Usage="assembly.GetName copiedName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetName(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="copiedName" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="copiedName">
          <span data-ttu-id="865a4-586">어셈블리를 섀도 복사한 후 <see langword="true" />를 어셈블리 위치로 설정하려면 <see cref="P:System.Reflection.Assembly.CodeBase" />이고, <see langword="false" />를 원래 위치로 설정하려면 <see cref="P:System.Reflection.Assembly.CodeBase" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-586">
              <see langword="true" /> to set the <see cref="P:System.Reflection.Assembly.CodeBase" /> to the location of the assembly after it was shadow copied; <see langword="false" /> to set <see cref="P:System.Reflection.Assembly.CodeBase" /> to the original location.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-587">이 어셈블리에 대한 <see cref="T:System.Reflection.AssemblyName" />을 가져오며 <paramref name="copiedName" />에 의해 지정된 대로 코드베이스를 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-587">Gets an <see cref="T:System.Reflection.AssemblyName" /> for this assembly, setting the codebase as specified by <paramref name="copiedName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-588">이 어셈블리에 대해 완전히 구문 분석된 표시 이름을 포함하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-588">An object that contains the fully parsed display name for this assembly.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-589">어셈블리의 경로에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-589">for access to the path of the assembly.</span>
          </span>
          <span data-ttu-id="865a4-590">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-590">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="assembly.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="865a4-591">serialization 정보로 채울 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-591">The object to be populated with serialization information.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="865a4-592">serialization의 대상 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-592">The destination context of the serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-593">이 어셈블리를 다시 인스턴스화하는 데 필요한 데이터가 모두 포함된 serialization 정보를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-593">Gets serialization information with all of the data needed to reinstantiate this assembly.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-594">
            <paramref name="info" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-594">
              <paramref name="info" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="865a4-595">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-595">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="865a4-596">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-596">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedAssemblies">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.AssemblyName[] GetReferencedAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.AssemblyName[] GetReferencedAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReferencedAssemblies () As AssemblyName()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::AssemblyName ^&gt; ^ GetReferencedAssemblies();" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedAssemblies : unit -&gt; System.Reflection.AssemblyName[]&#xA;override this.GetReferencedAssemblies : unit -&gt; System.Reflection.AssemblyName[]" Usage="assembly.GetReferencedAssemblies " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetReferencedAssemblies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.AssemblyName[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-597">이 어셈블리가 참조하는 모든 어셈블리에 대한 <see cref="T:System.Reflection.AssemblyName" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-597">Gets the <see cref="T:System.Reflection.AssemblyName" /> objects for all the assemblies referenced by this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-598">이 어셈블리가 참조하는 모든 어셈블리의 완전 구문 분석된 표시 이름이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-598">An array that contains the fully parsed display names of all the assemblies referenced by this assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="865a4-599">부터 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> 의 속성을 <xref:System.Reflection.AssemblyName> 이 메서드에 의해 반환 되는 개체는 <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType> 참조 된 어셈블리에 대 한 해시 알고리즘이 없는 경우 또는 참조 된 어셈블리의 해시 알고리즘이 아닌 경우 로 식별 되는 <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-599">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property of an <xref:System.Reflection.AssemblyName> object that is returned by this method is <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.None?displayProperty=nameWithType> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="865a4-600">이전 버전의.NET Framework에는 <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> 반환 되는 속성 <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType> 이런에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-600">In previous versions of the .NET Framework, the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property returned <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1?displayProperty=nameWithType> in this situation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-601">다음 코드 예제에서는 호출 된 <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-601">The following code example demonstrates calling the <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A> method.</span></span> <span data-ttu-id="865a4-602">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Reflection.Assembly> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-602">This code example is part of a larger example provided for the <xref:System.Reflection.Assembly> class.</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSatelliteAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-603">위성 어셈블리를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-603">Gets the satellite assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSatelliteAssembly (culture As CultureInfo) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetSatelliteAssembly : System.Globalization.CultureInfo -&gt; System.Reflection.Assembly&#xA;override this.GetSatelliteAssembly : System.Globalization.CultureInfo -&gt; System.Reflection.Assembly" Usage="assembly.GetSatelliteAssembly culture" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="865a4-604">지정된 문화권입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-604">The specified culture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-605">지정된 문화권에 대한 위성 어셈블리를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-605">Gets the satellite assembly for the specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-606">지정된 위성 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-606">The specified satellite assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-607">위성 어셈블리에 지역화할 수 없는 실행 코드와 기본 또는 중립 문화권으로 사용 되는 단일 문화권에 대 한 리소스를 포함 하는 기본 응용 프로그램 어셈블리와 구별 하 여 지역화 된 리소스를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-607">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="865a4-608">현재 어셈블리 버전을 사용 하려면이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-608">Call this method to use your current assembly version.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-609">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-609">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-610">어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-610">The assembly cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-611">일치하는 파일 이름을 가진 위성 어셈블리는 있지만 <see langword="CultureInfo" />가 지정된 어셈블리와 일치하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-611">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> did not match the one specified.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-612">위성 어셈블리가 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-612">The satellite assembly is not a valid assembly.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSatelliteAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture, class System.Version version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ GetSatelliteAssembly(System::Globalization::CultureInfo ^ culture, Version ^ version);" />
      <MemberSignature Language="F#" Value="abstract member GetSatelliteAssembly : System.Globalization.CultureInfo * Version -&gt; System.Reflection.Assembly&#xA;override this.GetSatelliteAssembly : System.Globalization.CultureInfo * Version -&gt; System.Reflection.Assembly" Usage="assembly.GetSatelliteAssembly (culture, version)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="version" Type="System.Version" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="865a4-613">지정된 문화권입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-613">The specified culture.</span>
          </span>
        </param>
        <param name="version">
          <span data-ttu-id="865a4-614">위성 어셈블리의 버전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-614">The version of the satellite assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-615">지정된 문화권에 대한 지정된 버전의 위성 어셈블리를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-615">Gets the specified version of the satellite assembly for the specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-616">지정된 위성 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-616">The specified satellite assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-617">위성 어셈블리에 지역화할 수 없는 실행 코드와 기본 또는 중립 문화권으로 사용 되는 단일 문화권에 대 한 리소스를 포함 하는 기본 응용 프로그램 어셈블리와 구별 하 여 지역화 된 리소스를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-617">Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.</span></span>  
  
 <span data-ttu-id="865a4-618">호출 된 <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> 오버 로드를 현재 어셈블리 버전을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-618">Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version.</span></span>  
  
 <span data-ttu-id="865a4-619">하는 경우 `version` 는 `null`, 리소스와 주 어셈블리가 서명 된 경우 현재 어셈블리 버전이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-619">If `version` is `null`, the current assembly version is used if both the resource and main assemblies are signed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-620">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-620">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-621">일치하는 파일 이름을 가진 위성 어셈블리는 있지만 <see langword="CultureInfo" /> 또는 버전이 지정된 어셈블리와 일치하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-621">The satellite assembly with a matching file name was found, but the <see langword="CultureInfo" /> or the version did not match the one specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-622">어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-622">The assembly cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-623">위성 어셈블리가 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-623">The satellite assembly is not a valid assembly.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-624">지정된 형식을 나타내는 <see cref="T:System.Type" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-624">Gets the <see cref="T:System.Type" /> object that represents the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="assembly.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public virtual Type GetType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetType : string -&gt; Type" Usage="assembly.GetType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="865a4-625">형식의 전체 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-625">The full name of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-626">어셈블리 인스턴스에서 지정된 이름을 가진 <see cref="T:System.Type" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-626">Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-627">지정된 클래스를 나타내는 개체이며 클래스가 없는 경우 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-627">An object that represents the specified class, or <see langword="null" /> if the class is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-628">이 메서드는 현재 어셈블리 인스턴스에서 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-628">This method only searches the current assembly instance.</span></span> <span data-ttu-id="865a4-629">`name` 어셈블리를 제외한 네임 스페이스 매개 변수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-629">The `name` parameter includes the namespace but not the assembly.</span></span> <span data-ttu-id="865a4-630">다른 어셈블리의 형식 검색 하려면 사용 된 <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> 메서드 오버 로드를 어셈블리 표시 이름을 형식 이름의 일부로 선택적으로 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-630">To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> method overload, which can optionally include an assembly display name as part of the type name.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-631">형식을 다른 어셈블리로 전달 되었습니다, 하는 경우 여전히이 메서드에서 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-631">If the type has been forwarded to another assembly, it is still returned by this method.</span></span> <span data-ttu-id="865a4-632">형식 전달에 대 한 내용은 참조 하세요 [공용 언어 런타임의 형식 전달](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-632">For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-633">다음 예제에서는 추상 `MeansOfTransportation` 클래스는 `Transportation` 네임 스페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-633">The following example defines an abstract `MeansOfTransportation` class in the `Transportation` namespace.</span></span> <span data-ttu-id="865a4-634">호출를 <xref:System.Reflection.Assembly.GetType%28System.String%29> 검색 하는 방법 해당 <xref:System.Type> 개체를 호출 합니다 <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> 배열을 가져올 메서드를 <xref:System.Reflection.PropertyInfo> 속성을 추상화 하는 형식에서 정보를 표시 한 다음 형식의 속성을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-634">It calls the <xref:System.Reflection.Assembly.GetType%28System.String%29> method to retrieve its <xref:System.Type> object, calls the <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.PropertyInfo> objects that represent the type's properties, and then displays information on the type's abstract properties.</span></span> <span data-ttu-id="865a4-635">에 대 한 호출을 <xref:System.Reflection.Assembly.GetType%28System.String%29> 메서드 형식의 정규화 된 이름 (즉, 해당 네임 스페이스의 형식 이름과 함께)를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-635">Note that the call to the <xref:System.Reflection.Assembly.GetType%28System.String%29> method uses the type's fully qualified name (that is, its namespace along with its type name).</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.gettype/cs/gettype1.cs#1)]
 [!code-vb[System.Reflection.Assembly.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.gettype/vb/gettype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-636">
            <paramref name="name" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-636">
              <paramref name="name" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-637">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-637">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-638">
            <paramref name="name" />에 종속 어셈블리가 필요하지만 이 어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-638">
              <paramref name="name" /> requires a dependent assembly that could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-639">
            <block subset="none" type="note">
              <para> Windows 스토어 앱용 [.NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.IO.IOException" />을 catch합니다.  </para>
            </block>
            <paramref name="name" />에서 종속 어셈블리를 필요로 하며 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-639">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  </para>
              </block>
              <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-640">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-640">-or-</span>
          </span>
          <span data-ttu-id="865a4-641">현재 어셈블리가 리플렉션 전용 컨텍스트에 로드되었으며 <paramref name="name" />에 종속 어셈블리가 필요하지만 이 어셈블리가 미리 로드되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-641">The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-642">
            <paramref name="name" />에 종속 어셈블리가 필요하지만 파일이 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-642">
              <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-643">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-643">-or-</span>
          </span>
          <span data-ttu-id="865a4-644">
            <paramref name="name" />에 현재 로드된 버전보다 높은 런타임 버전용으로 컴파일된 종속 어셈블리가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-644">
              <paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public virtual Type GetType (string name, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetType (name As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name, bool throwOnError);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool -&gt; Type" Usage="assembly.GetType (name, throwOnError)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="865a4-645">형식의 전체 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-645">The full name of the type.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="865a4-646">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, <see langword="false" />을 반환하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-646">
              <see langword="true" /> to throw an exception if the type is not found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-647">어셈블리 인스턴스에서 지정된 이름을 가진 <see cref="T:System.Type" /> 개체를 가져오고, 형식을 찾을 수 없는 경우 선택적으로 예외를 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-647">Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-648">지정된 클래스를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-648">An object that represents the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-649">이 메서드는 현재 어셈블리 인스턴스에서 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-649">This method only searches the current assembly instance.</span></span> <span data-ttu-id="865a4-650">`name` 어셈블리를 제외한 네임 스페이스 매개 변수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-650">The `name` parameter includes the namespace but not the assembly.</span></span> <span data-ttu-id="865a4-651">다른 어셈블리의 형식 검색 하려면 사용 된 <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> 메서드 오버 로드를 어셈블리 표시 이름을 형식 이름의 일부로 선택적으로 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-651">To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> method overload, which can optionally include an assembly display name as part of the type name.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-652">형식을 다른 어셈블리로 전달 되었습니다, 하는 경우 여전히이 메서드에서 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-652">If the type has been forwarded to another assembly, it is still returned by this method.</span></span> <span data-ttu-id="865a4-653">형식 전달에 대 한 내용은 참조 하세요 [공용 언어 런타임의 형식 전달](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-653">For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).</span></span>  
  
 <span data-ttu-id="865a4-654">`throwOnError` 형식을 찾을 수 없으면 어떻게 되나요 매개 변수에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-654">The `throwOnError` parameter only affects what happens when the type is not found.</span></span> <span data-ttu-id="865a4-655">Throw 될 수 있는 다른 모든 예외에는 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-655">It does not affect any other exceptions that might be thrown.</span></span> <span data-ttu-id="865a4-656">특히, 형식을 찾았지만 로드할 수 없으면 <xref:System.TypeLoadException> throw 할 수 있습니다 경우에 `throwOnError` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-656">In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-657">
            <paramref name="name" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-657">
              <paramref name="name" /> is invalid.</span>
          </span>
          <span data-ttu-id="865a4-658">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-658">-or-</span>
          </span>
          <span data-ttu-id="865a4-659">
            <paramref name="name" />의 길이가 1024자를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-659">The length of <paramref name="name" /> exceeds 1024 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-660">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-660">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="865a4-661">
            <paramref name="throwOnError" />가 <see langword="true" />이고 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-661">
              <paramref name="throwOnError" /> is <see langword="true" />, and the type cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-662">
            <paramref name="name" />에 종속 어셈블리가 필요하지만 이 어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-662">
              <paramref name="name" /> requires a dependent assembly that could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-663">
            <paramref name="name" />에 종속 어셈블리가 필요하며 이 어셈블리를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-663">
              <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-664">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-664">-or-</span>
          </span>
          <span data-ttu-id="865a4-665">현재 어셈블리가 리플렉션 전용 컨텍스트에 로드되었으며 <paramref name="name" />에 종속 어셈블리가 필요하지만 이 어셈블리가 미리 로드되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-665">The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-666">
            <paramref name="name" />에 종속 어셈블리가 필요하지만 파일이 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-666">
              <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-667">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-667">-or-</span>
          </span>
          <span data-ttu-id="865a4-668">
            <paramref name="name" />에 현재 로드된 버전보다 높은 런타임 버전용으로 컴파일된 종속 어셈블리가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-668">
              <paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public virtual Type GetType (string name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType(string name, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetType (name As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType(System::String ^ name, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="override this.GetType : string * bool * bool -&gt; Type" Usage="assembly.GetType (name, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType(System.String,System.Boolean,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="865a4-669">형식의 전체 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-669">The full name of the type.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="865a4-670">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, <see langword="false" />을 반환하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-670">
              <see langword="true" /> to throw an exception if the type is not found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="865a4-671">형식 이름의 대/소문자를 무시하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-671">
              <see langword="true" /> to ignore the case of the type name; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-672">대/소문자를 무시할지 여부와 형식이 없으면 예외를 throw할지를 선택적으로 지정하여 어셈블리 인스턴스에서 지정된 이름을 가진 <see cref="T:System.Type" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-672">Gets the <see cref="T:System.Type" /> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-673">지정된 클래스를 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-673">An object that represents the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-674">이 메서드는 현재 어셈블리 인스턴스에서 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-674">This method only searches the current assembly instance.</span></span> <span data-ttu-id="865a4-675">`name` 어셈블리를 제외한 네임 스페이스 매개 변수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-675">The `name` parameter includes the namespace but not the assembly.</span></span> <span data-ttu-id="865a4-676">다른 어셈블리의 형식 검색 하려면 사용 된 <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> 메서드 오버 로드를 어셈블리 표시 이름을 형식 이름의 일부로 선택적으로 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-676">To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=nameWithType> method overload, which can optionally include an assembly display name as part of the type name.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-677">형식을 다른 어셈블리로 전달 되었습니다, 하는 경우 여전히이 메서드에서 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-677">If the type has been forwarded to another assembly, it is still returned by this method.</span></span> <span data-ttu-id="865a4-678">형식 전달에 대 한 내용은 참조 하세요 [공용 언어 런타임의 형식 전달](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-678">For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).</span></span>  
  
 <span data-ttu-id="865a4-679">`throwOnError` 형식을 찾을 수 없으면 어떻게 되나요 매개 변수에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-679">The `throwOnError` parameter only affects what happens when the type is not found.</span></span> <span data-ttu-id="865a4-680">Throw 될 수 있는 다른 모든 예외에는 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-680">It does not affect any other exceptions that might be thrown.</span></span> <span data-ttu-id="865a4-681">특히, 형식을 찾았지만 로드할 수 없으면 <xref:System.TypeLoadException> throw 할 수 있습니다 경우에 `throwOnError` 는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-681">In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-682">
            <paramref name="name" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-682">
              <paramref name="name" /> is invalid.</span>
          </span>
          <span data-ttu-id="865a4-683">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-683">-or-</span>
          </span>
          <span data-ttu-id="865a4-684">
            <paramref name="name" />의 길이가 1024자를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-684">The length of <paramref name="name" /> exceeds 1024 characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-685">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-685">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="865a4-686">
            <paramref name="throwOnError" />가 <see langword="true" />이고 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-686">
              <paramref name="throwOnError" /> is <see langword="true" />, and the type cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-687">
            <paramref name="name" />에 종속 어셈블리가 필요하지만 이 어셈블리를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-687">
              <paramref name="name" /> requires a dependent assembly that could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-688">
            <paramref name="name" />에 종속 어셈블리가 필요하며 이 어셈블리를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-688">
              <paramref name="name" /> requires a dependent assembly that was found but could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-689">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-689">-or-</span>
          </span>
          <span data-ttu-id="865a4-690">현재 어셈블리가 리플렉션 전용 컨텍스트에 로드되었으며 <paramref name="name" />에 종속 어셈블리가 필요하지만 이 어셈블리가 미리 로드되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-690">The current assembly was loaded into the reflection-only context, and <paramref name="name" /> requires a dependent assembly that was not preloaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-691">
            <paramref name="name" />에 종속 어셈블리가 필요하지만 파일이 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-691">
              <paramref name="name" /> requires a dependent assembly, but the file is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-692">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-692">-or-</span>
          </span>
          <span data-ttu-id="865a4-693">
            <paramref name="name" />에 현재 로드된 버전보다 높은 런타임 버전용으로 컴파일된 종속 어셈블리가 필요합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-693">
              <paramref name="name" /> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypes">
      <MemberSignature Language="C#" Value="public virtual Type[] GetTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.GetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetTypes : unit -&gt; Type[]&#xA;override this.GetTypes : unit -&gt; Type[]" Usage="assembly.GetTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-694">이 어셈블리에 정의되어 있는 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-694">Gets the types defined in this assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-695">이 어셈블리에 정의되어 있는 모든 형식이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-695">An array that contains all the types that are defined in this assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-696">반환된 된 배열에는 중첩된 형식이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-696">The returned array includes nested types.</span></span>  
  
 <span data-ttu-id="865a4-697">경우는 <xref:System.Reflection.Assembly.GetTypes%2A> 어셈블리가 로드 되지 않은 (예를 들어 경우 두 번째 어셈블리의 형식에서 파생), 어셈블리의 형식에 종속 되는 어셈블리 및 형식에 메서드를 호출을 <xref:System.Reflection.ReflectionTypeLoadException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-697">If the <xref:System.Reflection.Assembly.GetTypes%2A> method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <xref:System.Reflection.ReflectionTypeLoadException> is thrown.</span></span> <span data-ttu-id="865a4-698">예를 들어, 첫 번째 어셈블리를 사용 하 여 로드 된 경우 발생할 수 있습니다 합니다 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> 또는 <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> 메서드 및 두 번째 어셈블리 로드 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-698">For example, this can happen if the first assembly was loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> or <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods, and the second assembly was not loaded.</span></span> <span data-ttu-id="865a4-699">사용 하 여 로드 된 어셈블리를 사용 하 여 발생할 수도 있습니다는 <xref:System.Reflection.Assembly.Load%2A> 및 <xref:System.Reflection.Assembly.LoadFile%2A> 두 번째 어셈블리를 찾을 수 없는 경우 메서드를 <xref:System.Reflection.Assembly.GetTypes%2A> 메서드가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-699">It can also happen with assemblies loaded using the <xref:System.Reflection.Assembly.Load%2A> and <xref:System.Reflection.Assembly.LoadFile%2A> methods if the second assembly cannot be located when the <xref:System.Reflection.Assembly.GetTypes%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-700">형식을 다른 어셈블리로 전달 되었습니다, 반환된 된 배열에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-700">If a type has been forwarded to another assembly, it is not included in the returned array.</span></span> <span data-ttu-id="865a4-701">형식 전달에 대 한 내용은 참조 하세요 [공용 언어 런타임의 형식 전달](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-701">For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).</span></span>  
  
 <span data-ttu-id="865a4-702">컬렉션을 검색할 <xref:System.Reflection.TypeInfo> 개체의 배열이 아닌 <xref:System.Type> 개체를 사용 하 여는 <xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-702">To retrieve a collection of <xref:System.Reflection.TypeInfo> objects instead of an array of <xref:System.Type> objects, use the <xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-703">다음 예제에서는 지정된 된 어셈블리의 형식에 대 한 메서드의 매개 변수를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-703">The following example displays parameters of one method on a type in the specified assembly.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#11)]
 [!code-csharp[System.Reflection.Assembly#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#11)]
 [!code-vb[System.Reflection.Assembly#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.ReflectionTypeLoadException">
          <span data-ttu-id="865a4-704">어셈블리에 로드할 수 없는 하나 이상의 형식이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-704">The assembly contains one or more types that cannot be loaded.</span>
          </span>
          <span data-ttu-id="865a4-705">
            <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> 속성에는 로드할 수 없는 각 형식에 대한 예외가 포함되어 있으나, 이 예외의 <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> 속성에 의해 반환된 배열에는 로드된 각 형식에 대한 <see cref="T:System.Type" /> 개체 및 로드할 수 없는 각 형식에 대한 <see langword="null" /> 개체가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-705">The array returned by the <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> property of this exception contains a <see cref="T:System.Type" /> object for each type that was loaded and <see langword="null" /> for each type that could not be loaded, while the <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> property contains an exception for each type that could not be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GlobalAssemblyCache">
      <MemberSignature Language="C#" Value="public virtual bool GlobalAssemblyCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GlobalAssemblyCache" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.GlobalAssemblyCache" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GlobalAssemblyCache As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool GlobalAssemblyCache { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAssemblyCache : bool" Usage="System.Reflection.Assembly.GlobalAssemblyCache" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.GlobalAssemblyCache</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-706">어셈블리를 전역 어셈블리 캐시에서 로드했는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-706">Gets a value indicating whether the assembly was loaded from the global assembly cache.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-707">어셈블리를 전역 어셈블리 캐시에서 로드했으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-707">
              <see langword="true" /> if the assembly was loaded from the global assembly cache; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostContext">
      <MemberSignature Language="C#" Value="public virtual long HostContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 HostContext" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.HostContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HostContext As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long HostContext { long get(); };" />
      <MemberSignature Language="F#" Value="member this.HostContext : int64" Usage="System.Reflection.Assembly.HostContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-708">어셈블리를 로드하는 데 사용된 호스트 컨텍스트를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-708">Gets the host context with which the assembly was loaded.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-709">어셈블리를 로드하는 데 사용된 호스트 컨텍스트가 있을 경우 호스트 컨텍스트를 나타내는 <see cref="T:System.Int64" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-709">An <see cref="T:System.Int64" /> value that indicates the host context with which the assembly was loaded, if any.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageRuntimeVersion">
      <MemberSignature Language="C#" Value="public virtual string ImageRuntimeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ImageRuntimeVersion" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.ImageRuntimeVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImageRuntimeVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ImageRuntimeVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ImageRuntimeVersion : string" Usage="System.Reflection.Assembly.ImageRuntimeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-710">매니페스트가 포함된 파일에 저장된 CLR(공용 언어 런타임) 버전을 나타내는 문자열을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-710">Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-711">CLR 버전 폴더 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-711">The CLR version folder name.</span>
          </span>
          <span data-ttu-id="865a4-712">이 값은 전체 경로가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-712">This is not a full path.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-713">예를 들어,.NET Framework 버전 1.1에 대 한 값 v1.1.4322 것입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-713">For example, the value for the .NET Framework version 1.1 would be v1.1.4322.</span></span> <span data-ttu-id="865a4-714">해당 버전에 대 한 이진 파일 경로 %windir%\Microsoft.NET\Framework\v1.1.4322 위치 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-714">The binary files for that version would be located in the path %windir%\Microsoft.NET\Framework\v1.1.4322.</span></span>  
  
 <span data-ttu-id="865a4-715">기본적으로 <xref:System.Reflection.Assembly.ImageRuntimeVersion%2A> 어셈블리를 빌드하는 데 사용 하는 CLR의 버전으로 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-715">By default, <xref:System.Reflection.Assembly.ImageRuntimeVersion%2A> is set to the version of the CLR used to build the assembly.</span></span> <span data-ttu-id="865a4-716">그러나이 설정 되어 다른 값으로 컴파일할 때.</span><span class="sxs-lookup"><span data-stu-id="865a4-716">However, it might have been set to another value at compile time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool&#xA;override this.IsDefined : Type * bool -&gt; bool" Usage="assembly.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="865a4-717">이 어셈블리에 대해 확인할 특성의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-717">The type of the attribute to be checked for this assembly.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="865a4-718">이 인수는 이 형식의 개체에 대해 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-718">This argument is ignored for objects of this type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-719">지정된 특성이 어셈블리에 적용되었는지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-719">Indicates whether or not a specified attribute has been applied to the assembly.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-720">특성이 어셈블리에 적용되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-720">
              <see langword="true" /> if the attribute has been applied to the assembly; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="865a4-721">적용 하는 다음 코드 예제는 <xref:System.Reflection.AssemblyTitleAttribute> 어셈블리로 사용 하 여 다음 특성 <xref:System.Reflection.Assembly.IsDefined%2A> 정책이 적용 되었는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-721">The following code example applies the <xref:System.Reflection.AssemblyTitleAttribute> attribute to an assembly and then uses <xref:System.Reflection.Assembly.IsDefined%2A> to indicate whether it was applied.</span></span> <span data-ttu-id="865a4-722">또한 적용 되지 않은 특성을 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-722">It also tests an attribute that was not applied.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.isdefined/CS/isdefined.cs#1)]
 [!code-vb[System.Reflection.Assembly.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.isdefined/VB/isdefined.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-723">
            <paramref name="attributeType" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-723">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-724">
            <paramref name="attributeType" />에 잘못된 형식이 사용된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-724">
              <paramref name="attributeType" /> uses an invalid type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsDynamic">
      <MemberSignature Language="C#" Value="public virtual bool IsDynamic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDynamic" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.IsDynamic" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsDynamic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDynamic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDynamic : bool" Usage="System.Reflection.Assembly.IsDynamic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-725">현재 어셈블리가 현재 프로세스에서 리플렉션 내보내기를 사용하여 동적으로 생성되었는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-725">Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-726">현재 어셈블리가 현재 프로세스에서 동적으로 생성되었으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-726">
              <see langword="true" /> if the current assembly was generated dynamically in the current process; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-727">동적 어셈블리 파생 클래스로 표현 됩니다 <xref:System.Reflection.Emit.AssemblyBuilder>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-727">Dynamic assemblies are represented by the derived class <xref:System.Reflection.Emit.AssemblyBuilder>.</span></span>  
  
 <span data-ttu-id="865a4-728">동적 어셈블리를 디스크에 저장된 된 어셈블리에 저장 될 때 동적 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-728">When a dynamic assembly is saved to disk, the saved assembly is not dynamic.</span></span> <span data-ttu-id="865a4-729">다른 응용 프로그램 도메인 또는 프로세스에 로드 되 면 저장된 된 어셈블리를 <xref:System.Reflection.Assembly.IsDynamic%2A> 속성이 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-729">If the saved assembly is loaded into another application domain or process, the <xref:System.Reflection.Assembly.IsDynamic%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFullyTrusted">
      <MemberSignature Language="C#" Value="public bool IsFullyTrusted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFullyTrusted" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.IsFullyTrusted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFullyTrusted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFullyTrusted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFullyTrusted : bool" Usage="System.Reflection.Assembly.IsFullyTrusted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-730">현재 어셈블리가 완전히 신뢰되어 로드되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-730">Gets a value that indicates whether the current assembly is loaded with full trust.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-731">현재 어셈블리가 완전히 신뢰되어 로드되면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-731">
              <see langword="true" /> if the current assembly is loaded with full trust; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-732">어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-732">Loads an assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (byte[] rawAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(unsigned int8[] rawAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (rawAssembly As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly);" />
      <MemberSignature Language="F#" Value="static member Load : byte[] -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load rawAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawAssembly">
          <span data-ttu-id="865a4-733">내보낸 어셈블리가 포함된 COFF 기반 이미지인 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-733">A byte array that is a COFF-based image containing an emitted assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-734">내보낸 어셈블리가 포함된 COFF(Common Object File Format) 기반 이미지를 사용하여 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-734">Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly.</span>
          </span>
          <span data-ttu-id="865a4-735">이 어셈블리는 호출자의 응용 프로그램 도메인에 로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-735">The assembly is loaded into the application domain of the caller.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-736">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-736">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-737">이 메서드를 사용 하 여 로드 된 어셈블리의 신뢰 수준을 호출 어셈블리의 신뢰 수준으로 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-737">The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly.</span></span> <span data-ttu-id="865a4-738">응용 프로그램 도메인의 신뢰 수준 사용 하 여 바이트 배열에서 어셈블리를 로드 하려면 사용 된 <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-738">To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload.</span></span> <span data-ttu-id="865a4-739">오버 로드를 사용 하 여 증명 정보를 사용 하는 방법에 대 한 자세한 내용은 합니다 <xref:System.Reflection.Assembly.Load%2A> 바이트 배열을 사용 하는 메서드를 참조 합니다 <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-739">For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.</span></span>  
  
 <span data-ttu-id="865a4-740">C + + 실행 파일을 리플렉션를 throw 할 수는 <xref:System.BadImageFormatException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-740">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="865a4-741">이 원인은 c + + 컴파일러가 재배치 주소 또는 `.reloc` 실행 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-741">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="865a4-742">보존 하는 `.reloc` c + + 실행 파일에 대 한 주소를 지정 `/fixed:no` 링크할 때.</span><span class="sxs-lookup"><span data-stu-id="865a4-742">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="865a4-743">이 메서드 오버 로드 항상 만들어집니다 새 <xref:System.Reflection.Assembly> 자체 매핑 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-743">Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-744">
            <paramref name="rawAssembly" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-744">
              <paramref name="rawAssembly" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-745">
            <paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-745">
              <paramref name="rawAssembly" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-746">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-746">-or-</span>
          </span>
          <span data-ttu-id="865a4-747">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="rawAssembly" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-747">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (assemblyRef As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef);" />
      <MemberSignature Language="F#" Value="static member Load : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load assemblyRef" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyRef">
          <span data-ttu-id="865a4-748">로드될 어셈블리를 설명하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-748">The object that describes the assembly to be loaded.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-749">해당 <see cref="T:System.Reflection.AssemblyName" />이 지정된 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-749">Loads an assembly given its <see cref="T:System.Reflection.AssemblyName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-750">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-750">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-751"><xref:System.IO.FileLoadException> 이 throw `assemblyRef` 전체 어셈블리 이름 및 간단한 이름과 일치 하는 첫 번째 어셈블리에 다른 버전, 문화권 또는 공개 키 토큰을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-751"><xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token.</span></span> <span data-ttu-id="865a4-752">로더는 간단한 이름과 일치 하는 다른 어셈블리에 대 한 검색을 계속 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-752">The loader does not continue probing for other assemblies that match the simple name.</span></span> <span data-ttu-id="865a4-753">기본적으로 원격 어셈블리의 코드를 실행할 수 없기 때문에.NET Framework 4부터를 <xref:System.IO.FileLoadException> 경우에 throw 됩니다 `assemblyRef` 원격 어셈블리를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-753">Starting with .NET Framework 4, because execution of code in remote assemblies is disabled by default, a <xref:System.IO.FileLoadException> is also thrown if `assemblyRef` specifies a remote assembly.</span></span> <span data-ttu-id="865a4-754">원격 위치에서 로드 된 코드의 실행을 사용 하도록 설정 하려면 사용 합니다 [ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-754">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>     
  
> [!NOTE]
>  <span data-ttu-id="865a4-755">사용 하지 마십시오는 <xref:System.Reflection.AssemblyName> 만 <xref:System.Reflection.AssemblyName.CodeBase%2A> 속성 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-755">Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set.</span></span> <span data-ttu-id="865a4-756">합니다 <xref:System.Reflection.AssemblyName.CodeBase%2A> 속성 요소를 제공 하지 않습니다 (예: 이름 또는 버전)에서 어셈블리 id의 로드가 발생 하지 않습니다 부하-id 별 규칙에 따라에서 예상한 대로 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-756">The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="865a4-757">대신, 어셈블리 로드 규칙을 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-757">Instead, the assembly is loaded using load-from rules.</span></span> <span data-ttu-id="865a4-758">로드 컨텍스트를 사용 하 여 단점에 대 한 정보를 참조 하세요. 합니다 <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> 메서드 오버 로드 또는 [어셈블리를 로드 하기 위한 모범 사례](~/docs/framework/deployment/best-practices-for-assembly-loading.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-758">For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).</span></span>  
  
 <span data-ttu-id="865a4-759">어셈블리에 대한 특정 권한 부여 여부는 증명 정보를 바탕으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-759">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="865a4-760">어셈블리와 병합 하는 보안 증명에 대 한 규칙 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-760">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="865a4-761">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 사용 하 여 <xref:System.Security.Policy.Evidence> 매개 변수, 어셈블리 로더를 제공 하는 증명 정보를 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-761">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="865a4-762">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수를 증거의 조각을 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-762">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="865a4-763">인수로 제공 하는 증거의 조각을 <xref:System.Reflection.Assembly.Load%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-763">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="865a4-764">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 공용 개체 파일 (COFF) 형식 이미지를 증명 정보를 로드 하려면 매개 변수를 호출 하는 어셈블리에서 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-764">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="865a4-765">.NET Framework 버전 1.1에 적용 됩니다이 서비스 팩 1 (SP1) 및 이후 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-765">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="865a4-766">.NET framework 버전 1.0 및 버전 1.1 sp1을 사용 하는 경우에 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 증거 COFF 이미지를 로드 하려면 매개 변수는 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-766">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="865a4-767">`Zone`를 `Url` 하 고 `Site` 호출 하는 어셈블리에서 상속 됩니다 및 `Hash` 및 `StrongName` COFF 어셈블리에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-767">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="865a4-768">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 `Byte[]` 매개 변수 및 <xref:System.Security.Policy.Evidence> COFF 이미지를 로드 하려면 제공 된 증명 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-768">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="865a4-769">호출 어셈블리 및 COFF 이미지의 증명 정보는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-769">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 <span data-ttu-id="865a4-770">C + + 실행 파일을 리플렉션를 throw 할 수는 <xref:System.BadImageFormatException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-770">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="865a4-771">이 원인은 c + + 컴파일러가 재배치 주소 또는 `.reloc` 실행 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-771">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="865a4-772">보존 하는 `.reloc` c + + 실행 파일에 대 한 주소를 지정 `/fixed:no` 링크할 때.</span><span class="sxs-lookup"><span data-stu-id="865a4-772">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-773">모두를 <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> 속성 및 <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> 어셈블리를 로드 하려는 첫 번째 시도에서는 표시 이름으로 속성 설정 (반환한 버전, 문화권 및 등을 포함 하 여는 <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> 속성).</span><span class="sxs-lookup"><span data-stu-id="865a4-773">If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property).</span></span> <span data-ttu-id="865a4-774">파일이 없으면 <xref:System.Reflection.AssemblyName.CodeBase%2A> 어셈블리를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-774">If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly.</span></span> <span data-ttu-id="865a4-775">사용 하 여 어셈블리 있으면 <xref:System.Reflection.AssemblyName.CodeBase%2A>, 표시 이름을 어셈블리에 대해 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-775">If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly.</span></span> <span data-ttu-id="865a4-776">검색이 실패 하는 경우는 <xref:System.IO.FileLoadException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-776">If the match fails, a <xref:System.IO.FileLoadException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-777">다음 예제에서는 <xref:System.Reflection.AssemblyName> 개체를 로드 하는 데 사용 된 `sysglobal.dll` 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-777">The following example instantiates an <xref:System.Reflection.AssemblyName> object and uses it to load the `sysglobal.dll` assembly.</span></span> <span data-ttu-id="865a4-778">어셈블리의 public 형식의 전체 이름을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-778">The example then displays the full name of the assembly's public types.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.Load#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/Load2.cs#2)]
 [!code-vb[System.Reflection.Assembly.Load#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/Load2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-779">
            <paramref name="assemblyRef" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-779">
              <paramref name="assemblyRef" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-780">
            <paramref name="assemblyRef" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-780">
              <paramref name="assemblyRef" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-781">
            <block subset="none" type="note">
              <para> Windows 스토어 앱용 [.NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.IO.IOException" />을 catch합니다.  </para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-781">
              <block subset="none" type="note">
                <para> In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  </para>
              </block>
            </span>
          </span>
          <span data-ttu-id="865a4-782">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-782">A file that was found could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-783">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-783">-or-</span>
          </span>
          <span data-ttu-id="865a4-784">
            <paramref name="assemblyRef" />은 원격 어셈블리를 지정하지만 원격 어셈블리에서 코드를 실행하는 기능은 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-784">
              <paramref name="assemblyRef" /> specifies a remote assembly, but the ability to execute code in remote assemblies is disabled.</span>
          </span>
          <span data-ttu-id="865a4-785">
            <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>를 확인하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-785">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-786">
            <paramref name="assemblyRef" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-786">
              <paramref name="assemblyRef" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-787">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-787">-or-</span>
          </span>
          <span data-ttu-id="865a4-788">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyRef" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-788">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-789">파일이 나 디렉터리에서 읽고 경로 자체의 정보에 대 한 액세스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-789">for access to read from a file or directory, and for access to the information in the path itself.</span>
          </span>
          <span data-ttu-id="865a4-790">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-790">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
        <permission cref="T:System.Net.WebPermission">
          <span data-ttu-id="865a4-791">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-791">for reading a URI that does not begin with "file://".</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-792">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-792">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-793">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-793">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (string assemblyString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(string assemblyString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (assemblyString As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(System::String ^ assemblyString);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load assemblyString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyString">
          <span data-ttu-id="865a4-794">긴 형식의 어셈블리 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-794">The long form of the assembly name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-795">긴 형식의 이름으로 지정된 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-795">Loads an assembly given the long form of its name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-796">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-796">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-797">긴 형식의 어셈블리 이름 (예: "System" System.dll 어셈블리에 대 한) 해당 버전, 문화권, 공개 키 토큰 및 선택적으로 해당 프로세서 아키텍처와 함께 간단한 이름은 이루어져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-797">The long form of an assembly name consists of its simple name (such as "System" for the System.dll assembly) along with its version, culture, public key token, and optionally its processor architecture.</span></span> <span data-ttu-id="865a4-798">어셈블리의 해당 <xref:System.Reflection.Assembly.FullName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-798">It corresponds to the assembly's <xref:System.Reflection.Assembly.FullName%2A> property.</span></span> <span data-ttu-id="865a4-799">다음 예제에서는 System.dll.NET Framework 4 어셈블리를 로드 하는 긴 이름 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-799">The following example illustrates the use of a long name to load the System.dll assembly for the .NET Framework 4.</span></span>  
  
 [!code-csharp[System.Reflection.Assembly.Load#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/load1.cs#1)]
 [!code-vb[System.Reflection.Assembly.Load#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/load1.vb#1)]  
  
 <span data-ttu-id="865a4-800"><xref:System.IO.FileLoadException> 이 throw `assemblyString` 전체 어셈블리 이름 및 간단한 이름과 일치 하는 첫 번째 어셈블리에 다른 버전, 문화권 또는 공개 키 토큰을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-800"><xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token.</span></span> <span data-ttu-id="865a4-801">로더는 간단한 이름과 일치 하는 다른 어셈블리에 대 한 검색을 계속 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-801">The loader does not continue probing for other assemblies that match the simple name.</span></span>  
  
 <span data-ttu-id="865a4-802">어셈블리에 대한 특정 권한 부여 여부는 증명 정보를 바탕으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-802">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="865a4-803">어셈블리와 병합 하는 보안 증명에 대 한 규칙 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-803">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="865a4-804">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 사용 하 여 <xref:System.Security.Policy.Evidence> 매개 변수, 어셈블리 로더를 제공 하는 증명 정보를 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-804">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="865a4-805">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수를 증거의 조각을 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-805">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="865a4-806">인수로 제공 하는 증거의 조각을 <xref:System.Reflection.Assembly.Load%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-806">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="865a4-807">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 공용 개체 파일 (COFF) 형식 이미지를 증명 정보를 로드 하려면 매개 변수를 호출 하는 어셈블리에서 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-807">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="865a4-808">.NET Framework 버전 1.1에 적용 됩니다이 서비스 팩 1 (SP1) 및 이후 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-808">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="865a4-809">.NET framework 버전 1.0 및 버전 1.1 sp1을 사용 하는 경우에 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 증거 COFF 이미지를 로드 하려면 매개 변수는 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-809">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="865a4-810">`Zone`를 `Url` 하 고 `Site` 호출 하는 어셈블리에서 상속 됩니다 및 `Hash` 및 `StrongName` COFF 어셈블리에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-810">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="865a4-811">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 `Byte[]` 매개 변수 및 <xref:System.Security.Policy.Evidence> COFF 이미지를 로드 하려면 제공 된 증명 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-811">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="865a4-812">호출 어셈블리 및 COFF 이미지의 증명 정보는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-812">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 <span data-ttu-id="865a4-813">C + + 실행 파일을 리플렉션를 throw 할 수는 <xref:System.BadImageFormatException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-813">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="865a4-814">이 원인은 c + + 컴파일러가 재배치 주소 또는 `.reloc` 실행 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-814">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="865a4-815">보존 하는 `.reloc` c + + 실행 파일에 대 한 주소를 지정 `/fixed:no` 링크할 때.</span><span class="sxs-lookup"><span data-stu-id="865a4-815">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="865a4-816">.NET framework 버전 2.0에서 프로세서 아키텍처가 어셈블리 id에 추가 되 고 어셈블리 이름 문자열의 일부로 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-816">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="865a4-817">예를 들어, "ProcessorArchitecture = msil"입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-817">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="865a4-818">하지만 어셈블리 이름을 지정 하는 방법이 권장된 만들 때를 <xref:System.Reflection.AssemblyName> 개체의 적절 한 오버 로드로 전달 하 여 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-818">However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="865a4-819"><xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="865a4-819">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-820">다음 예제에서는 지정 된 정규화 된 이름, 어셈블리를 로드 하 고 지정된 된 어셈블리에 포함 된 모든 형식을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-820">The following example loads an assembly given its fully qualified name, and lists all the types contained in the specified assembly.</span></span> <span data-ttu-id="865a4-821">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-821">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="865a4-822">참조 된 정규화 된 어셈블리 이름을 가져오는 방법에 대 한 내용은 [어셈블리 이름](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-822">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[assembly.load1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.Load1/CPP/load1.cpp#1)]
 [!code-csharp[assembly.load1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.Load1/CS/load1.cs#1)]
 [!code-vb[assembly.load1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.Load1/VB/load1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-823">
            <paramref name="assemblyString" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-823">
              <paramref name="assemblyString" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-824">
            <paramref name="assemblyString" />이 빈 문자열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-824">
              <paramref name="assemblyString" /> is a zero-length string.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-825">
            <paramref name="assemblyString" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-825">
              <paramref name="assemblyString" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-826">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-826">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-827">
            <paramref name="assemblyString" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-827">
              <paramref name="assemblyString" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-828">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-828">-or-</span>
          </span>
          <span data-ttu-id="865a4-829">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyString" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-829">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-830">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-830">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-831">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-831">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.AssemblyName" />
        <altmember cref="M:System.Reflection.Assembly.LoadFrom(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (rawAssembly As Byte(), rawSymbolStore As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore);" />
      <MemberSignature Language="F#" Value="static member Load : byte[] * byte[] -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (rawAssembly, rawSymbolStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawAssembly">
          <span data-ttu-id="865a4-832">내보낸 어셈블리가 포함된 COFF 기반 이미지인 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-832">A byte array that is a COFF-based image containing an emitted assembly.</span>
          </span>
        </param>
        <param name="rawSymbolStore">
          <span data-ttu-id="865a4-833">어셈블리의 기호를 나타내는 원시 바이트가 포함된 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-833">A byte array that contains the raw bytes representing the symbols for the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-834">생성된 어셈블리가 들어 있고 경우에 따라 어셈블리에 대한 기호도 포함하는 COFF(공용 개체 파일 형식) 기반 이미지를 사용하여 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-834">Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly.</span>
          </span>
          <span data-ttu-id="865a4-835">이 어셈블리는 호출자의 응용 프로그램 도메인에 로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-835">The assembly is loaded into the application domain of the caller.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-836">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-836">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-837">이 메서드를 사용 하 여 로드 된 어셈블리의 신뢰 수준을 호출 어셈블리의 신뢰 수준으로 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-837">The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly.</span></span> <span data-ttu-id="865a4-838">응용 프로그램 도메인의 신뢰 수준 사용 하 여 바이트 배열에서 어셈블리를 로드 하려면 사용 된 <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-838">To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload.</span></span> <span data-ttu-id="865a4-839">오버 로드를 사용 하 여 증명 정보를 사용 하는 방법에 대 한 자세한 내용은 합니다 <xref:System.Reflection.Assembly.Load%2A> 바이트 배열을 사용 하는 메서드를 참조 합니다 <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-839">For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.</span></span>  
  
 <span data-ttu-id="865a4-840">C + + 실행 파일을 리플렉션를 throw 할 수는 <xref:System.BadImageFormatException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-840">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="865a4-841">이 원인은 c + + 컴파일러가 재배치 주소 또는 `.reloc` 실행 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-841">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="865a4-842">보존 하는 `.reloc` c + + 실행 파일에 대 한 주소를 지정 `/fixed:no` 링크할 때.</span><span class="sxs-lookup"><span data-stu-id="865a4-842">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="865a4-843">이 메서드 오버 로드 항상 만들어집니다 새 <xref:System.Reflection.Assembly> 자체 매핑 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-843">Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-844">
            <paramref name="rawAssembly" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-844">
              <paramref name="rawAssembly" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-845">
            <paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-845">
              <paramref name="rawAssembly" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-846">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-846">-or-</span>
          </span>
          <span data-ttu-id="865a4-847">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="rawAssembly" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-847">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (assemblyRef As AssemblyName, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="static member Load : System.Reflection.AssemblyName * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (assemblyRef, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyRef">
          <span data-ttu-id="865a4-848">로드될 어셈블리를 설명하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-848">The object that describes the assembly to be loaded.</span>
          </span>
        </param>
        <param name="assemblySecurity">
          <span data-ttu-id="865a4-849">어셈블리 로드에 사용할 증명 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-849">Evidence for loading the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-850">해당 <see cref="T:System.Reflection.AssemblyName" />이 지정된 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-850">Loads an assembly given its <see cref="T:System.Reflection.AssemblyName" />.</span>
          </span>
          <span data-ttu-id="865a4-851">어셈블리는 제공된 증명을 사용하여 호출자의 도메인에 로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-851">The assembly is loaded into the domain of the caller using the supplied evidence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-852">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-852">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-853"><xref:System.IO.FileLoadException> 이 throw `assemblyRef` 전체 어셈블리 이름 및 간단한 이름과 일치 하는 첫 번째 어셈블리에 다른 버전, 문화권 또는 공개 키 토큰을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-853"><xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token.</span></span> <span data-ttu-id="865a4-854">로더는 간단한 이름과 일치 하는 다른 어셈블리에 대 한 검색을 계속 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-854">The loader does not continue probing for other assemblies that match the simple name.</span></span>  <span data-ttu-id="865a4-855">기본적으로 원격 어셈블리의 코드를 실행할 수 없기 때문에.NET Framework 4부터를 <xref:System.IO.FileLoadException> 경우에 throw 됩니다 `assemblyRef` 원격 어셈블리를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-855">Starting with .NET Framework 4, because execution of code in remote assemblies is disabled by default, a <xref:System.IO.FileLoadException> is also thrown if `assemblyRef` specifies a remote assembly.</span></span> <span data-ttu-id="865a4-856">원격 위치에서 로드 된 코드의 실행을 사용 하도록 설정 하려면 사용 합니다 [ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-856">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>   
  
> [!NOTE]
>  <span data-ttu-id="865a4-857">사용 하지 마십시오는 <xref:System.Reflection.AssemblyName> 만 <xref:System.Reflection.AssemblyName.CodeBase%2A> 속성 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-857">Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set.</span></span> <span data-ttu-id="865a4-858">합니다 <xref:System.Reflection.AssemblyName.CodeBase%2A> 속성 요소를 제공 하지 않습니다 (예: 이름 또는 버전)에서 어셈블리 id의 로드가 발생 하지 않습니다 부하-id 별 규칙에 따라에서 예상한 대로 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-858">The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="865a4-859">대신, 어셈블리 로드 규칙을 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-859">Instead, the assembly is loaded using load-from rules.</span></span> <span data-ttu-id="865a4-860">로드 컨텍스트를 사용 하 여 단점에 대 한 정보를 참조 하세요. 합니다 <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> 메서드 오버 로드 또는 [어셈블리를 로드 하기 위한 모범 사례](~/docs/framework/deployment/best-practices-for-assembly-loading.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-860">For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).</span></span>  
  
 <span data-ttu-id="865a4-861">어셈블리에 대한 특정 권한 부여 여부는 증명 정보를 바탕으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-861">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="865a4-862">어셈블리와 병합 하는 보안 증명에 대 한 규칙 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-862">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="865a4-863">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 사용 하 여 <xref:System.Security.Policy.Evidence> 매개 변수, 어셈블리 로더를 제공 하는 증명 정보를 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-863">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="865a4-864">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수를 증거의 조각을 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-864">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="865a4-865">인수로 제공 하는 증거의 조각을 <xref:System.Reflection.Assembly.Load%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-865">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="865a4-866">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 공용 개체 파일 (COFF) 형식 이미지를 증명 정보를 로드 하려면 매개 변수를 호출 하는 어셈블리에서 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-866">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="865a4-867">.NET Framework 버전 1.1에 적용 됩니다이 서비스 팩 1 (SP1) 및 이후 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-867">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="865a4-868">.NET framework 버전 1.0 및 버전 1.1 sp1을 사용 하는 경우에 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 증거 COFF 이미지를 로드 하려면 매개 변수는 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-868">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="865a4-869">`Zone`를 `Url` 하 고 `Site` 호출 하는 어셈블리에서 상속 됩니다 및 `Hash` 및 `StrongName` COFF 어셈블리에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-869">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="865a4-870">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 `Byte[]` 매개 변수 및 <xref:System.Security.Policy.Evidence> COFF 이미지를 로드 하려면 제공 된 증명 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-870">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="865a4-871">호출 어셈블리 및 COFF 이미지의 증명 정보는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-871">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 <span data-ttu-id="865a4-872">C + + 실행 파일을 리플렉션를 throw 할 수는 <xref:System.BadImageFormatException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-872">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="865a4-873">이 원인은 c + + 컴파일러가 재배치 주소 또는 `.reloc` 실행 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-873">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="865a4-874">보존 하는 `.reloc` c + + 실행 파일에 대 한 주소를 지정 `/fixed:no` 링크할 때.</span><span class="sxs-lookup"><span data-stu-id="865a4-874">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-875">모두를 <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> 속성 및 <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> 어셈블리를 로드 하려는 첫 번째 시도에서는 표시 이름으로 속성 설정 (반환한 버전, 문화권 및 등을 포함 하 여는 <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> 속성).</span><span class="sxs-lookup"><span data-stu-id="865a4-875">If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property).</span></span> <span data-ttu-id="865a4-876">파일이 없으면 <xref:System.Reflection.AssemblyName.CodeBase%2A> 어셈블리를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-876">If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly.</span></span> <span data-ttu-id="865a4-877">사용 하 여 어셈블리 있으면 <xref:System.Reflection.AssemblyName.CodeBase%2A>, 표시 이름을 어셈블리에 대해 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-877">If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly.</span></span> <span data-ttu-id="865a4-878">검색이 실패 하는 경우는 <xref:System.IO.FileLoadException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-878">If the match fails, a <xref:System.IO.FileLoadException> is thrown.</span></span>  
  
 <span data-ttu-id="865a4-879">호출 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 한 번 동일한 어셈블리에 있지만 지정 된 다른 증명 공용 언어 런타임에서 throw 하지 않는 보다는 <xref:System.IO.FileLoadException> 같음 및 다른 증명 사양의 무결성 수 없기 때문에 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-879">If you call the <xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="865a4-880">먼저 성공 하는 증명 정보는 사용 되는 증거입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-880">The evidence that first succeeds is the evidence that is used.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-881">
            <paramref name="assemblyRef" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-881">
              <paramref name="assemblyRef" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-882">
            <paramref name="assemblyRef" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-882">
              <paramref name="assemblyRef" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-883">
            <paramref name="assemblyRef" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-883">
              <paramref name="assemblyRef" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-884">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-884">-or-</span>
          </span>
          <span data-ttu-id="865a4-885">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyRef" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-885">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-886">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-886">An assembly or module was loaded twice with two different evidences.</span>
          </span>
          <span data-ttu-id="865a4-887">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-887">-or-</span>
          </span>
          <span data-ttu-id="865a4-888">
            <paramref name="assemblyRef" />은 원격 어셈블리를 지정하지만 원격 어셈블리에서 코드를 실행하는 기능은 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-888">
              <paramref name="assemblyRef" /> specifies a remote assembly, but the ability to execute code in remote assemblies is disabled.</span>
          </span>
          <span data-ttu-id="865a4-889">
            <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>를 확인하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-889">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-890">파일이 나 디렉터리에서 읽고 경로 자체의 정보에 대 한 액세스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-890">for access to read from a file or directory, and for access to the information in the path itself.</span>
          </span>
          <span data-ttu-id="865a4-891">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-891">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
        <permission cref="T:System.Net.WebPermission">
          <span data-ttu-id="865a4-892">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-892">for reading a URI that does not begin with "file://".</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-893">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-893">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-894">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-894">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(string assemblyString, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (assemblyString As String, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(System::String ^ assemblyString, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (assemblyString, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyString">
          <span data-ttu-id="865a4-895">어셈블리의 표시 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-895">The display name of the assembly.</span>
          </span>
        </param>
        <param name="assemblySecurity">
          <span data-ttu-id="865a4-896">어셈블리 로드에 사용할 증명 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-896">Evidence for loading the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-897">해당 표시 이름이 지정된 어셈블리를 로드한 다음 제공된 증명을 사용하여 이 어셈블리를 호출자의 도메인에 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-897">Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-898">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-898">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-899"><xref:System.IO.FileLoadException> 이 throw `assemblyString` 전체 어셈블리 이름 및 간단한 이름과 일치 하는 첫 번째 어셈블리에 다른 버전, 문화권 또는 공개 키 토큰을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-899"><xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token.</span></span> <span data-ttu-id="865a4-900">로더는 간단한 이름과 일치 하는 다른 어셈블리에 대 한 검색을 계속 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-900">The loader does not continue probing for other assemblies that match the simple name.</span></span>  
  
 <span data-ttu-id="865a4-901">어셈블리에 대한 특정 권한 부여 여부는 증명 정보를 바탕으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-901">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="865a4-902">어셈블리와 병합 하는 보안 증명에 대 한 규칙 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-902">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="865a4-903">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 사용 하 여 <xref:System.Security.Policy.Evidence> 매개 변수, 어셈블리 로더를 제공 하는 증명 정보를 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-903">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="865a4-904">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수를 증거의 조각을 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-904">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="865a4-905">인수로 제공 하는 증거의 조각을 <xref:System.Reflection.Assembly.Load%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-905">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="865a4-906">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 공용 개체 파일 (COFF) 형식 이미지를 증명 정보를 로드 하려면 매개 변수를 호출 하는 어셈블리에서 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-906">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="865a4-907">.NET Framework 버전 1.1에 적용 됩니다이 서비스 팩 1 (SP1) 및 이후 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-907">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="865a4-908">.NET framework 버전 1.0 및 버전 1.1 sp1을 사용 하는 경우에 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 증거 COFF 이미지를 로드 하려면 매개 변수는 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-908">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="865a4-909">`Zone`를 `Url` 하 고 `Site` 호출 하는 어셈블리에서 상속 됩니다 및 `Hash` 및 `StrongName` COFF 어셈블리에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-909">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="865a4-910">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 `Byte[]` 매개 변수 및 <xref:System.Security.Policy.Evidence> COFF 이미지를 로드 하려면 제공 된 증명 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-910">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="865a4-911">호출 어셈블리 및 COFF 이미지의 증명 정보는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-911">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 <span data-ttu-id="865a4-912">C + + 실행 파일을 리플렉션를 throw 할 수는 <xref:System.BadImageFormatException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-912">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="865a4-913">이 원인은 c + + 컴파일러가 재배치 주소 또는 `.reloc` 실행 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-913">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="865a4-914">보존 하는 `.reloc` c + + 실행 파일에 대 한 주소를 지정 `/fixed:no` 링크할 때.</span><span class="sxs-lookup"><span data-stu-id="865a4-914">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="865a4-915">한 번에이 메서드를 호출 하면 동일한 어셈블리에 있지만 지정 된 다른 증명, 공용 언어 런타임에서 throw 하지 않습니다는 <xref:System.IO.FileLoadException> 같음 및 다른 증명 사양의 무결성을 확인할 수 없으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-915">If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="865a4-916">먼저 성공 하는 증명 정보는 사용 되는 증거입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-916">The evidence that first succeeds is the evidence that is used.</span></span>  
  
 <span data-ttu-id="865a4-917">.NET framework 버전 2.0에서 프로세서 아키텍처가 어셈블리 id에 추가 되 고 어셈블리 이름 문자열의 일부로 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-917">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="865a4-918">예를 들어, "ProcessorArchitecture = msil"입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-918">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="865a4-919">하지만 어셈블리 이름을 지정 하는 방법이 권장된 만들 때를 <xref:System.Reflection.AssemblyName> 개체의 적절 한 오버 로드로 전달 하 여 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-919">However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="865a4-920"><xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="865a4-920">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-921">
            <paramref name="assemblyString" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-921">
              <paramref name="assemblyString" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-922">
            <paramref name="assemblyString" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-922">
              <paramref name="assemblyString" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-923">
            <paramref name="assemblyString" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-923">
              <paramref name="assemblyString" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-924">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-924">-or-</span>
          </span>
          <span data-ttu-id="865a4-925">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyString" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-925">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-926">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-926">A file that was found could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-927">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-927">-or-</span>
          </span>
          <span data-ttu-id="865a4-928">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-928">An assembly or module was loaded twice with two different evidences.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-929">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-929">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-930">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-930">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (rawAssembly As Byte(), rawSymbolStore As Byte(), securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="static member Load : byte[] * byte[] * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (rawAssembly, rawSymbolStore, securityEvidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="rawAssembly">
          <span data-ttu-id="865a4-931">내보낸 어셈블리가 포함된 COFF 기반 이미지인 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-931">A byte array that is a COFF-based image containing an emitted assembly.</span>
          </span>
        </param>
        <param name="rawSymbolStore">
          <span data-ttu-id="865a4-932">어셈블리의 기호를 나타내는 원시 바이트가 포함된 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-932">A byte array that contains the raw bytes representing the symbols for the assembly.</span>
          </span>
        </param>
        <param name="securityEvidence">
          <span data-ttu-id="865a4-933">어셈블리 로드에 사용할 증명 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-933">Evidence for loading the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-934">생성된 어셈블리가 들어 있고 경우에 따라 어셈블리에 대한 기호 및 증명 정보도 포함하는 COFF(공용 개체 파일 형식) 기반 이미지를 사용하여 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-934">Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly.</span>
          </span>
          <span data-ttu-id="865a4-935">이 어셈블리는 호출자의 응용 프로그램 도메인에 로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-935">The assembly is loaded into the application domain of the caller.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-936">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-936">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-937">어셈블리는 제공된 증명을 사용하여 호출자의 도메인에 로드됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-937">The assembly is loaded into the domain of the caller using the supplied evidence.</span></span> <span data-ttu-id="865a4-938">어셈블리에 대 한 기호를 나타내는 원시 바이트도 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-938">The raw bytes representing the symbols for the assembly are also loaded.</span></span>  
  
 <span data-ttu-id="865a4-939">어셈블리에 대한 특정 권한 부여 여부는 증명 정보를 바탕으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-939">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="865a4-940">어셈블리와 병합 하는 보안 증명에 대 한 규칙 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-940">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="865a4-941">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 사용 하 여 <xref:System.Security.Policy.Evidence> 매개 변수, 어셈블리 로더를 제공 하는 증명 정보를 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-941">When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="865a4-942">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수를 증거의 조각을 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-942">When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="865a4-943">인수로 제공 하는 증거의 조각을 <xref:System.Reflection.Assembly.Load%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-943">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="865a4-944">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 증거 COFF 이미지를 로드 하려면 매개 변수를 호출 하는 어셈블리에서 상속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-944">When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is inherited from the calling assembly.</span></span> <span data-ttu-id="865a4-945">.NET Framework 버전 1.1에 적용 됩니다이 서비스 팩 1 (SP1) 및 이후 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-945">This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="865a4-946">.NET framework 버전 1.0 및 버전 1.1 sp1을 사용 하는 경우에 <xref:System.Reflection.Assembly.Load%2A> 메서드 오버 로드는 `Byte[]` 증거 COFF 이미지를 로드 하려면 매개 변수는 함께 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-946">In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined.</span></span> <span data-ttu-id="865a4-947">`Zone`를 `Url` 하 고 `Site` 호출 하는 어셈블리에서 상속 됩니다 및 `Hash` 및 `StrongName` COFF 어셈블리에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-947">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="865a4-948">사용 하는 경우는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 `Byte[]` 매개 변수 및 <xref:System.Security.Policy.Evidence> COFF 이미지를 로드 하려면 제공 된 증명 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-948">When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="865a4-949">호출 어셈블리 및 COFF 이미지의 증명 정보는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-949">Evidence of the calling assembly and evidence of the COFF image are ignored.</span></span>  
  
 <span data-ttu-id="865a4-950">C + + 실행 파일을 리플렉션를 throw 할 수는 <xref:System.BadImageFormatException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-950">Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>.</span></span> <span data-ttu-id="865a4-951">이 원인은 c + + 컴파일러가 재배치 주소 또는 `.reloc` 실행 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-951">This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file.</span></span> <span data-ttu-id="865a4-952">보존 하는 `.reloc` c + + 실행 파일에 대 한 주소를 지정 `/fixed:no` 링크할 때.</span><span class="sxs-lookup"><span data-stu-id="865a4-952">To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="865a4-953">호출 하는 경우는 [\], 바이트\<xref:System.Reflection.Assembly.Load%2A > 메서드를 한 번 동일한 어셈블리에 있지만 지정 된 다른 증명 공용 언어 런타임에서 throw 하지 않는 보다는 <xref:System.IO.FileLoadException> 때문에 같음 및 다른 증명 사양의 무결성을 확인할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-953">If you call the [\], Byte\<xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="865a4-954">먼저 성공 하는 증명 정보는 사용 되는 증거입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-954">The evidence that first succeeds is the evidence that is used.</span></span>  
  
 <span data-ttu-id="865a4-955">이 메서드 오버 로드 항상 만들어집니다 새 <xref:System.Reflection.Assembly> 자체 매핑 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-955">Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-956">
            <paramref name="rawAssembly" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-956">
              <paramref name="rawAssembly" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-957">
            <paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-957">
              <paramref name="rawAssembly" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-958">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-958">-or-</span>
          </span>
          <span data-ttu-id="865a4-959">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="rawAssembly" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-959">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-960">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-960">An assembly or module was loaded twice with two different evidences.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="865a4-961">
            <paramref name="securityEvidence" />이 <see langword="null" />가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-961">
              <paramref name="securityEvidence" /> is not <see langword="null" />.</span>
          </span>
          <span data-ttu-id="865a4-962">기본적으로 레거시 CAS 정책은 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]에서 사용되지 않습니다. 사용되지 않도록 설정되면 <paramref name="securityEvidence" />가 <see langword="null" />이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-962">By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <paramref name="securityEvidence" /> must be <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-963">증명 정보를 제공할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-963">for the ability to supply evidence.</span>
          </span>
          <span data-ttu-id="865a4-964">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-964">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          </span>
          <span data-ttu-id="865a4-965">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-965">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.SecurityContextSource securityContextSource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore, valuetype System.Security.SecurityContextSource securityContextSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore, System::Security::SecurityContextSource securityContextSource);" />
      <MemberSignature Language="F#" Value="static member Load : byte[] * byte[] * System.Security.SecurityContextSource -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.Load (rawAssembly, rawSymbolStore, securityContextSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
        <Parameter Name="securityContextSource" Type="System.Security.SecurityContextSource" />
      </Parameters>
      <Docs>
        <param name="rawAssembly">
          <span data-ttu-id="865a4-966">내보낸 어셈블리가 포함된 COFF 기반 이미지인 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-966">A byte array that is a COFF-based image containing an emitted assembly.</span>
          </span>
        </param>
        <param name="rawSymbolStore">
          <span data-ttu-id="865a4-967">어셈블리의 기호를 나타내는 원시 바이트가 포함된 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-967">A byte array that contains the raw bytes representing the symbols for the assembly.</span>
          </span>
        </param>
        <param name="securityContextSource">
          <span data-ttu-id="865a4-968">보안 컨텍스트의 소스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-968">The source of the security context.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-969">생성된 어셈블리가 들어 있고 경우에 따라 기호도 포함하고 보안 컨텍스트의 소스도 지정하는 COFF(공용 개체 파일 형식) 기반 이미지를 사용하여 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-969">Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context.</span>
          </span>
          <span data-ttu-id="865a4-970">이 어셈블리는 호출자의 응용 프로그램 도메인에 로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-970">The assembly is loaded into the application domain of the caller.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-971">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-971">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-972">어셈블리 보안 컨텍스트에 대 한 지정된 된 소스를 사용 하 여 호출자의 응용 프로그램 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-972">The assembly is loaded into the application domain of the caller using the specified source for the security context.</span></span> <span data-ttu-id="865a4-973">경우 `rawSymbolStore` 지정 어셈블리에 대 한 기호를 나타내는 원시 바이트도 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-973">If `rawSymbolStore` was specified, the raw bytes that represent the symbols for the assembly are also loaded.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-974">
            <paramref name="rawAssembly" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-974">
              <paramref name="rawAssembly" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-975">
            <paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-975">
              <paramref name="rawAssembly" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-976">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-976">-or-</span>
          </span>
          <span data-ttu-id="865a4-977">
            <paramref name="rawAssembly" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-977">
              <paramref name="rawAssembly" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="865a4-978">
            <paramref name="securityContextSource" />의 값이 열거형 값 중 하나가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-978">The value of <paramref name="securityContextSource" /> is not one of the enumeration values.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadFile">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-979">어셈블리 파일의 내용을 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-979">Loads the contents of an assembly file.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFile (path As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member LoadFile : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="865a4-980">로드할 파일의 정규화된 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-980">The fully qualified path of the file to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-981">지정된 경로에 있는 어셈블리 파일의 내용을 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-981">Loads the contents of an assembly file on the specified path.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-982">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-982">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-983">사용 된 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드를 로드 하 고 id는 동일 하지만 서로 다른 경로에 있는 어셈블리를 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-983">Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.</span></span> <span data-ttu-id="865a4-984"><xref:System.Reflection.Assembly.LoadFile%2A> 파일에서 로드 컨텍스트에 로드 하지 않습니다 하 고으로 로드 경로 사용 하 여 종속성을 해결 되지 않으면를 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드는 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-984"><xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does.</span></span> <span data-ttu-id="865a4-985"><xref:System.Reflection.Assembly.LoadFile%2A> 이 제한 된 시나리오에서 유용 하기 때문에 <xref:System.Reflection.Assembly.LoadFrom%2A> 어셈블리 로드를 사용할 수는 서로 다른 경로 이지만 동일한 id를 가진; 첫 번째만 로드 됩니다 이러한 어셈블리.</span><span class="sxs-lookup"><span data-stu-id="865a4-985"><xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.</span></span>  

<span data-ttu-id="865a4-986">경우.NET Framework 4부터 `path` 로드 하는 어셈블리는 기본적으로 사용 하지 않도록 설정, 원격 위치에서 어셈블리를 지정 하며 `LoadFile` 메서드가 throw를 <xref:System.IO.FileLoadException>.</span><span class="sxs-lookup"><span data-stu-id="865a4-986">Starting with .NET Framework 4, if `path` specifies an assembly in a remote location, assembly loading is disabled by default, and the `LoadFile` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="865a4-987">원격 위치에서 로드 된 코드의 실행을 사용 하도록 설정 하려면 사용 합니다 [ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-987">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-988">
            <paramref name="path" /> 인수는 절대 경로가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-988">The <paramref name="path" /> argument is not an absolute path.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-989">
            <paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-989">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-990">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-990">A file that was found could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-991">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-991">-or-</span>
          </span>
          <span data-ttu-id="865a4-992">원격 어셈블리에서 코드를 실행하는 기능은 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-992">The ability to execute code in remote assemblies is disabled.</span>
          </span>
          <span data-ttu-id="865a4-993">
            <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>를 확인하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-993">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-994">
            <paramref name="path" /> 매개 변수가 빈 문자열("")이거나 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-994">The <paramref name="path" /> parameter is an empty string ("") or does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-995">
            <paramref name="path" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-995">
              <paramref name="path" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-996">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-996">-or-</span>
          </span>
          <span data-ttu-id="865a4-997">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="path" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-997">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="path" /> was compiled with a later version.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-998">파일이 나 디렉터리에서 읽고 경로 자체의 정보에 대 한 액세스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-998">for access to read from a file or directory, and for access to the information in the path itself.</span>
          </span>
          <span data-ttu-id="865a4-999">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-999">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-1000">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1000">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-1001">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1001">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="LoadFile">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFile (string path, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFile(string path, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFile (path As String, securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFile(System::String ^ path, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="static member LoadFile : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFile (path, securityEvidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of LoadFile which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="865a4-1002">어셈블리 파일의 정규화된 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1002">The fully qualified path of the assembly file.</span>
          </span>
        </param>
        <param name="securityEvidence">
          <span data-ttu-id="865a4-1003">어셈블리 로드에 사용할 증명 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1003">Evidence for loading the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1004">경로가 지정된 어셈블리를 로드한 다음 제공된 증명 정보를 사용하여 이 어셈블리를 호출자의 도메인에 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1004">Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1005">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1005">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1006">사용 된 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드를 로드 하 고 id는 동일 하지만 서로 다른 경로에 있는 어셈블리를 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1006">Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.</span></span> <span data-ttu-id="865a4-1007"><xref:System.Reflection.Assembly.LoadFile%2A> 파일을 로드 하지 않습니다는 <xref:System.Reflection.Assembly.LoadFrom%2A> 컨텍스트를으로 로드 경로 사용 하 여 종속성을 해결 하지 않습니다는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드는 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1007"><xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the <xref:System.Reflection.Assembly.LoadFrom%2A> context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does.</span></span> <span data-ttu-id="865a4-1008"><xref:System.Reflection.Assembly.LoadFile%2A> 이 제한 된 시나리오에서 유용 하기 때문에 <xref:System.Reflection.Assembly.LoadFrom%2A> 어셈블리 로드를 사용할 수는 서로 다른 경로 이지만 동일한 id를 가진; 첫 번째만 로드 됩니다 이러한 어셈블리.</span><span class="sxs-lookup"><span data-stu-id="865a4-1008"><xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.</span></span>  

<span data-ttu-id="865a4-1009">경우.NET Framework 4부터 `path` 로드 하는 어셈블리는 기본적으로 사용 하지 않도록 설정, 원격 위치에서 어셈블리를 지정 하며 `LoadFile` 메서드가 throw를 <xref:System.IO.FileLoadException>.</span><span class="sxs-lookup"><span data-stu-id="865a4-1009">Starting with .NET Framework 4, if `path` specifies an assembly in a remote location, assembly loading is disabled by default, and the `LoadFile` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="865a4-1010">원격 위치에서 로드 된 코드의 실행을 사용 하도록 설정 하려면 사용 합니다 [ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1010">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1011">
            <paramref name="path" /> 인수는 절대 경로가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1011">The <paramref name="path" /> argument is not an absolute path.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1012">
            <paramref name="path" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1012">The <paramref name="path" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-1013">
            <paramref name="path" /> 매개 변수가 빈 문자열("")이거나 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1013">The <paramref name="path" /> parameter is an empty string ("") or does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1014">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1014">A file that was found could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-1015">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1015">-or-</span>
          </span>
          <span data-ttu-id="865a4-1016">원격 어셈블리에서 코드를 실행하는 기능은 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1016">The ability to execute code in remote assemblies is disabled.</span>
          </span>
          <span data-ttu-id="865a4-1017">
            <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>를 확인하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1017">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1018">
            <paramref name="path" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1018">
              <paramref name="path" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-1019">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1019">-or-</span>
          </span>
          <span data-ttu-id="865a4-1020">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="path" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1020">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="path" /> was compiled with a later version.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="865a4-1021">
            <paramref name="securityEvidence" />이 <see langword="null" />가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1021">
              <paramref name="securityEvidence" /> is not <see langword="null" />.</span>
          </span>
          <span data-ttu-id="865a4-1022">기본적으로 레거시 CAS 정책은 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]에서 사용되지 않습니다. 사용되지 않도록 설정되면 <paramref name="securityEvidence" />가 <see langword="null" />이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1022">By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <paramref name="securityEvidence" /> must be <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-1023">파일이 나 디렉터리에서 읽고 경로 자체의 정보에 대 한 액세스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1023">for access to read from a file or directory, and for access to the information in the path itself.</span>
          </span>
          <span data-ttu-id="865a4-1024">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1024">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-1025">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1025">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-1026">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1026">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1027">어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1027">Loads an assembly.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
             
## Remarks

<span data-ttu-id="865a4-1028">.NET Framework 4 부터는 원격 위치에서 로드 된 어셈블리에서 코드를 실행 하는 기능은 사용 되지 기본적으로 호출 합니다 `LoadFrom` 메서드가 throw를 <xref:System.IO.FileLoadException>입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1028">Starting with .NET Framework 4, the ability to execute code in assemblies loaded from remote locations is disabled by default, and the call to the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="865a4-1029">에 어셈블리를 로드 하 고 해당 코드를 실행 하거나 다음을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1029">To load the assembly and execute its code, you must either:</span></span>

- <span data-ttu-id="865a4-1030">어셈블리에 대 한 샌드박스를 명시적으로 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1030">Explicitly create a sandbox for the assembly.</span></span> <span data-ttu-id="865a4-1031">(참조 [방법: 샌드박스에서 부분적으로 신뢰할 수 있는 코드 실행](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).)</span><span class="sxs-lookup"><span data-stu-id="865a4-1031">(See [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).)</span></span>

- <span data-ttu-id="865a4-1032">완전 신뢰 수준에서 설정 하 여 어셈블리의 코드를 실행 합니다 `enabled` 특성을 [ `<loadFromRemoteSources>` 구성 요소](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 를 `true`.</span><span class="sxs-lookup"><span data-stu-id="865a4-1032">Run the assembly's code in full trust by setting the `enabled` attribute of the [`<loadFromRemoteSources>` configuration element](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) to `true`.</span></span> <span data-ttu-id="865a4-1033">자세한 내용은 참조는 [ `<loadFromRemoteSources>` 구성 요소](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 문서.</span><span class="sxs-lookup"><span data-stu-id="865a4-1033">For more information, see the [`<loadFromRemoteSources>` configuration element](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) article.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFrom (string assemblyFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFrom(string assemblyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFrom(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFrom (assemblyFile As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFrom(System::String ^ assemblyFile);" />
      <MemberSignature Language="F#" Value="static member LoadFrom : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFrom assemblyFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">
          <span data-ttu-id="865a4-1034">어셈블리 매니페스트가 포함된 파일의 이름 또는 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1034">The name or path of the file that contains the manifest of the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1035">해당 파일 이름이나 경로가 지정된 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1035">Loads an assembly given its file name or path.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1036">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1036">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1037">`assemblyFile` 매개 변수 이스케이프 문자가 없는 URI 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1037">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="865a4-1038">이 메서드는 URI에서 모든 잘못 된 문자가 이스케이프 문자를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1038">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-1039">파일 전송 프로토콜 (FTP) 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1039">File transfer protocol (FTP) is not supported.</span></span> <span data-ttu-id="865a4-1040">에 대 한 제공 된 URI `assemblyFile` FTP 주소를 사용 하는 어셈블리가 로드 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1040">If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded.</span></span> <span data-ttu-id="865a4-1041">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1041">No exception is thrown.</span></span>  
  
 <span data-ttu-id="865a4-1042">`assemblyFile` 현재 디렉터리에 절대적 이거나 상대적 않을 어셈블리는 호출자의 도메인에 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1042">`assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="865a4-1043">어셈블리는 세 개의 컨텍스트 중 하나로 로드할 수 있습니다 또는 컨텍스트 없이 로드 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1043">Assemblies can be loaded into one of three contexts, or can be loaded without context:</span></span>  
  
-   <span data-ttu-id="865a4-1044">로드 컨텍스트를 검색 하 여 찾은 어셈블리가 포함: GAC에 호스트 어셈블리에서는 런타임 호스트 되는 경우 또는 저장 된 <xref:System.AppDomainSetup.ApplicationBase%2A> 및 <xref:System.AppDomainSetup.PrivateBinPath%2A> 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1044">The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain.</span></span> <span data-ttu-id="865a4-1045"><xref:System.Reflection.Assembly.Load%2A> 메서드의 대부분 오버로드는 어셈블리 이 컨텍스트에 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1045">Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.</span></span>  
  
-   <span data-ttu-id="865a4-1046">로드 컨텍스트를 검색 하 여 검색 된 디렉터리에 포함 되지 않은 경로 제공 하는 어셈블리를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1046">The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing.</span></span> <span data-ttu-id="865a4-1047"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A> 및 <xref:System.AppDomain.ExecuteAssembly%2A>는 경로로 로드되는 메서드의 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1047"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.</span></span> 

    <span data-ttu-id="865a4-1048">경우.NET Framework 4부터의 URI `assemblyFile` 원격 위치를 지정 어셈블리 로드는 기본적으로 사용 하지 않도록 설정 하며 `LoadFrom` 메서드가 throw를 <xref:System.IO.FileLoadException>입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1048">Starting with .NET Framework 4, if the URI of `assemblyFile` specifies a remote location, assembly loading is disabled by default, and the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="865a4-1049">원격 위치에서 로드 된 코드의 실행을 사용 하도록 설정 하려면 사용 합니다 [ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1049">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
  
-   <span data-ttu-id="865a4-1050">리플렉션 전용 컨텍스트에 로드 된 어셈블리를 포함 합니다 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> 및 <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> 메서드, 이러한 코드 컨텍스트를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1050">The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.</span></span>  
  
-   <span data-ttu-id="865a4-1051">사용자 생성 된 어셈블리를 찾을 수, 하는 경우 모든 컨텍스트에서 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1051">If the user generated or found the assembly, it is not in any context.</span></span> <span data-ttu-id="865a4-1052">이 오버 로드를 사용 하 여 로드 된 어셈블리에 적용 됩니다는 <xref:System.Reflection.Assembly.Load%2A> 와 어셈블리를 포함 하는 바이트 배열을 지정 하 고, 리플렉션을 사용 하 여 만든 임시 동적 어셈블리 내보내기를 하 고, 디스크에 저장 되지 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1052">This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.</span></span>  
  
 <span data-ttu-id="865a4-1053">로드 컨텍스트 검색에 포함 되지 않은 경로에서 로드 되도록 어셈블리 있으며 아직 컨텍스트 경로 정보를 유지 하기 때문에 해당 경로에 종속성을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1053">The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.</span></span>  
  
 <span data-ttu-id="865a4-1054"><xref:System.Reflection.Assembly.LoadFrom%2A> 메서드가 다음과 같은 단점이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1054">The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages.</span></span> <span data-ttu-id="865a4-1055">대신 <xref:System.Reflection.Assembly.Load%2A>을 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1055">Consider using <xref:System.Reflection.Assembly.Load%2A> instead.</span></span>  
  
-   <span data-ttu-id="865a4-1056">같은 ID를 가진 어셈블리가 이미 로드되어 있으면 다른 경로가 지정된 경우에도 <xref:System.Reflection.Assembly.LoadFrom%2A>은 로드된 어셈블리를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1056">If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.</span></span>  
  
-   <span data-ttu-id="865a4-1057">어셈블리를 사용 하 여 로드 <xref:System.Reflection.Assembly.LoadFrom%2A>, 로드 컨텍스트에 어셈블리 표시 이름으로 동일한 어셈블리를 로드 하려고 시도 하는 나중에 로드 하려고 하면 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1057">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.</span></span> <span data-ttu-id="865a4-1058">어셈블리가 deserialize 될 때 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1058">This can occur when an assembly is de-serialized.</span></span>  
  
-   <span data-ttu-id="865a4-1059">어셈블리를 사용 하 여 로드 <xref:System.Reflection.Assembly.LoadFrom%2A>, id가 같지만 다른 위치를 사용 하 여 어셈블리 검색 경로 포함 되어는 <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, 또는 기타 예기치 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1059">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.</span></span>  
  
-   <span data-ttu-id="865a4-1060"><xref:System.Reflection.Assembly.LoadFrom%2A>은 지정된 경로에서 <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType>와 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType> 또는 <xref:System.Net.WebPermission>을 요구합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1060"><xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType>, or <xref:System.Net.WebPermission>, on the specified path.</span></span>  
  
-   <span data-ttu-id="865a4-1061">네이티브 이미지에 대 한 있으면 `assemblyFile`, 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1061">If a native image exists for `assemblyFile`, it is not used.</span></span> <span data-ttu-id="865a4-1062">어셈블리가는 도메인 중립적으로 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1062">The assembly cannot be loaded as domain neutral.</span></span>  
  
-   <span data-ttu-id="865a4-1063">.NET Framework 버전 1.0 및 1.1에서는 정책이 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1063">In the .NET Framework version 1.0 and 1.1, policy is not applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-1064">다음 예제에서는 해당 파일 이름이 나 경로가 지정 된 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1064">The following example loads an assembly given its file name or path.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#11)]
 [!code-csharp[System.Reflection.Assembly#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#11)]
 [!code-vb[System.Reflection.Assembly#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1065">
            <paramref name="assemblyFile" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1065">
              <paramref name="assemblyFile" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-1066">
            <paramref name="assemblyFile" />이 없거나 로드하려는 모듈이 확장명을 지정하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1066">
              <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1067">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1067">A file that was found could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-1068">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1068">-or-</span>
          </span>
          <span data-ttu-id="865a4-1069">원격 어셈블리에서 코드를 실행하는 기능은 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1069">The ability to execute code in remote assemblies is disabled.</span>
          </span>
          <span data-ttu-id="865a4-1070">
            <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>를 확인하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1070">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1071">
            <paramref name="assemblyFile" />이 유효한 어셈블리가 아닙니다. 예를 들어 64비트 프로세스의 32비트 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1071">
              <paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.</span>
          </span>
          <span data-ttu-id="865a4-1072">자세한 정보는 예외 항목을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1072">See the exception topic for more information.</span>
          </span>
          <span data-ttu-id="865a4-1073">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1073">-or-</span>
          </span>
          <span data-ttu-id="865a4-1074">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1074">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="865a4-1075">"file://"로 시작되지 않는 코드베이스에 필요한 <see cref="T:System.Net.WebPermission" />이 지정되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1075">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1076">
            <paramref name="assemblyFile" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1076">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="865a4-1077">어셈블리 이름이 시스템 정의 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1077">The assembly name exceeds the system-defined maximum length.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-1078">"file://"로 시작 하는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1078">for reading a URI that begins with "file://".</span>
          </span>
          <span data-ttu-id="865a4-1079">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1079">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          </span>
        </permission>
        <permission cref="T:System.Net.WebPermission">
          <span data-ttu-id="865a4-1080">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1080">for reading a URI that does not begin with "file://".</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="LoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFrom(string assemblyFile, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFrom (assemblyFile As String, securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFrom(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="static member LoadFrom : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFrom (assemblyFile, securityEvidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of LoadFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">
          <span data-ttu-id="865a4-1081">어셈블리 매니페스트가 포함된 파일의 이름 또는 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1081">The name or path of the file that contains the manifest of the assembly.</span>
          </span>
        </param>
        <param name="securityEvidence">
          <span data-ttu-id="865a4-1082">어셈블리 로드에 사용할 증명 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1082">Evidence for loading the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1083">해당 파일 이름이나 경로가 지정된 어셈블리를 로드하고 보안 증명을 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1083">Loads an assembly given its file name or path and supplying security evidence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1084">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1084">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1085">`assemblyFile` 매개 변수 이스케이프 문자가 없는 URI 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1085">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="865a4-1086">이 메서드는 URI에서 모든 잘못 된 문자가 이스케이프 문자를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1086">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-1087">파일 전송 프로토콜 (FTP) 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1087">File transfer protocol (FTP) is not supported.</span></span> <span data-ttu-id="865a4-1088">에 대 한 제공 된 URI `assemblyFile` FTP 주소를 사용 하는 어셈블리가 로드 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1088">If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded.</span></span> <span data-ttu-id="865a4-1089">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1089">No exception is thrown.</span></span>  
  
 <span data-ttu-id="865a4-1090">`assemblyFile` 현재 디렉터리에 절대적 이거나 상대적 않을 어셈블리는 호출자의 도메인에 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1090">`assemblyFile` may be absolute or  relative to the current directory, and the assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="865a4-1091">어셈블리는 세 개의 컨텍스트 중 하나로 로드할 수 있습니다 또는 컨텍스트 없이 로드 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1091">Assemblies can be loaded into one of three contexts, or can be loaded without context:</span></span>  
  
-   <span data-ttu-id="865a4-1092">로드 컨텍스트를 검색 하 여 찾은 어셈블리가 포함: GAC에 호스트 어셈블리에서는 런타임 호스트 되는 경우 또는 저장 된 <xref:System.AppDomainSetup.ApplicationBase%2A> 및 <xref:System.AppDomainSetup.PrivateBinPath%2A> 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1092">The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain.</span></span> <span data-ttu-id="865a4-1093"><xref:System.Reflection.Assembly.Load%2A> 메서드의 대부분 오버로드는 어셈블리 이 컨텍스트에 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1093">Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.</span></span>  
  
-   <span data-ttu-id="865a4-1094">로드 컨텍스트를 검색 하 여 검색 된 디렉터리에 포함 되지 않은 경로 제공 하는 어셈블리를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1094">The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing.</span></span> <span data-ttu-id="865a4-1095"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A> 및 <xref:System.AppDomain.ExecuteAssembly%2A>는 경로로 로드되는 메서드의 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1095"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.</span></span>

    <span data-ttu-id="865a4-1096">경우.NET Framework 4부터의 URI `assemblyFile` 원격 위치를 지정 어셈블리 로드는 기본적으로 사용 하지 않도록 설정 하며 `LoadFrom` 메서드가 throw를 <xref:System.IO.FileLoadException>입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1096">Starting with .NET Framework 4, if the URI of `assemblyFile` specifies a remote location, assembly loading is disabled by default, and the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="865a4-1097">원격 위치에서 로드 된 코드의 실행을 사용 하도록 설정 하려면 사용 합니다 [ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1097">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
  
-   <span data-ttu-id="865a4-1098">리플렉션 전용 컨텍스트에 로드 된 어셈블리를 포함 합니다 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> 및 <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> 메서드, 이러한 코드 컨텍스트를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1098">The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.</span></span>  
  
-   <span data-ttu-id="865a4-1099">사용자 생성 된 어셈블리를 찾을 수, 하는 경우 모든 컨텍스트에서 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1099">If the user generated or found the assembly, it is not in any context.</span></span> <span data-ttu-id="865a4-1100">이 오버 로드를 사용 하 여 로드 된 어셈블리에 적용 됩니다는 <xref:System.Reflection.Assembly.Load%2A> 와 어셈블리를 포함 하는 바이트 배열을 지정 하 고, 리플렉션을 사용 하 여 만든 임시 동적 어셈블리 내보내기를 하 고, 디스크에 저장 되지 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1100">This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.</span></span>  
  
 <span data-ttu-id="865a4-1101">로드 컨텍스트 검색에 포함 되지 않은 경로에서 로드 되도록 어셈블리 있으며 아직 컨텍스트 경로 정보를 유지 하기 때문에 해당 경로에 종속성을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1101">The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.</span></span>  
  
 <span data-ttu-id="865a4-1102"><xref:System.Reflection.Assembly.LoadFrom%2A> 메서드가 다음과 같은 단점이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1102">The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages.</span></span> <span data-ttu-id="865a4-1103">대신 <xref:System.Reflection.Assembly.Load%2A>을 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1103">Consider using <xref:System.Reflection.Assembly.Load%2A> instead.</span></span>  
  
-   <span data-ttu-id="865a4-1104">같은 ID를 가진 어셈블리가 이미 로드되어 있으면 다른 경로가 지정된 경우에도 <xref:System.Reflection.Assembly.LoadFrom%2A>은 로드된 어셈블리를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1104">If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.</span></span>  
  
-   <span data-ttu-id="865a4-1105">어셈블리를 사용 하 여 로드 <xref:System.Reflection.Assembly.LoadFrom%2A>, 로드 컨텍스트에 어셈블리 표시 이름으로 동일한 어셈블리를 로드 하려고 시도 하는 나중에 로드 하려고 하면 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1105">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.</span></span> <span data-ttu-id="865a4-1106">어셈블리가 deserialize되면 이 문제가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1106">This can occur when an assembly is deserialized.</span></span>  
  
-   <span data-ttu-id="865a4-1107">어셈블리를 사용 하 여 로드 <xref:System.Reflection.Assembly.LoadFrom%2A>, id가 같지만 다른 위치를 사용 하 여 어셈블리 검색 경로 포함 되어는 <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, 또는 기타 예기치 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1107">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.</span></span>  
  
-   <span data-ttu-id="865a4-1108"><xref:System.Reflection.Assembly.LoadFrom%2A>은 지정된 경로에서 <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType>와 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType> 또는 <xref:System.Net.WebPermission>을 요구합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1108"><xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType>, or <xref:System.Net.WebPermission>, on the specified path.</span></span>  
  
-   <span data-ttu-id="865a4-1109">네이티브 이미지에 대 한 있으면 `assemblyFile`, 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1109">If a native image exists for `assemblyFile`, it is not used.</span></span> <span data-ttu-id="865a4-1110">어셈블리가는 도메인 중립적으로 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1110">The assembly cannot be loaded as domain neutral.</span></span>  
  
-   <span data-ttu-id="865a4-1111">.NET Framework 버전 1.0 및 1.1에서는 정책이 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1111">In the .NET Framework version 1.0 and 1.1, policy is not applied.</span></span>  
  
 <span data-ttu-id="865a4-1112">어셈블리에 대한 특정 권한 부여 여부는 증명 정보를 바탕으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1112">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="865a4-1113">어셈블리와 병합 하는 보안 증명에 대 한 규칙 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1113">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="865a4-1114">사용 하는 경우는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드를 사용 하 여 <xref:System.Security.Policy.Evidence> 매개 변수, 어셈블리 로더를 제공 하는 증명 정보를 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1114">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="865a4-1115">사용 하는 경우는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수를 증거의 조각을 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1115">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="865a4-1116">인수로 제공 하는 증거의 조각을 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1116">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="865a4-1117">한 번에이 메서드를 호출 하면 동일한 어셈블리에 있지만 지정 된 다른 증명, 공용 언어 런타임에서 throw 하지 않습니다는 <xref:System.IO.FileLoadException> 같음 및 다른 증명 사양의 무결성을 확인할 수 없으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1117">If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="865a4-1118">먼저 성공 하는 증명 정보는 사용 되는 증거입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1118">The evidence that first succeeds is the evidence that is used.</span></span>  
  
-   <span data-ttu-id="865a4-1119">사용 하는 경우는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드는 `Byte[]` 공용 개체 파일 (COFF) 형식 이미지를 증명 정보를 로드 하려면 매개 변수 결합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1119">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined.</span></span> <span data-ttu-id="865a4-1120">`Zone`를 `Url` 하 고 `Site` 호출 하는 어셈블리에서 상속 됩니다 및 `Hash` 및 `StrongName` COFF 어셈블리에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1120">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="865a4-1121">사용 하는 경우는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드를 `Byte[]` 매개 변수 및 <xref:System.Security.Policy.Evidence> COFF 이미지를 로드 하려면 제공 된 증명 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1121">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="865a4-1122">호출 어셈블리 및 COFF 이미지의 증명 정보는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1122">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1123">
            <paramref name="assemblyFile" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1123">
              <paramref name="assemblyFile" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-1124">
            <paramref name="assemblyFile" />이 없거나 로드하려는 모듈이 확장명을 지정하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1124">
              <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1125">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1125">A file that was found could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-1126">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1126">-or-</span>
          </span>
          <span data-ttu-id="865a4-1127">
            <paramref name="securityEvidence" />가 모호하지 않고 확실히 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1127">The <paramref name="securityEvidence" /> is not ambiguous and is determined to be invalid.</span>
          </span>
          <span data-ttu-id="865a4-1128">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1128">-or-</span>
          </span>
          <span data-ttu-id="865a4-1129">원격 어셈블리에서 코드를 실행하는 기능은 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1129">The ability to execute code in remote assemblies is disabled.</span>
          </span>
          <span data-ttu-id="865a4-1130">
            <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>를 확인하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1130">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1131">
            <paramref name="assemblyFile" />이 유효한 어셈블리가 아닙니다. 예를 들어 64비트 프로세스의 32비트 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1131">
              <paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.</span>
          </span>
          <span data-ttu-id="865a4-1132">자세한 정보는 예외 항목을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1132">See the exception topic for more information.</span>
          </span>
          <span data-ttu-id="865a4-1133">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1133">-or-</span>
          </span>
          <span data-ttu-id="865a4-1134">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1134">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="865a4-1135">"file://"로 시작되지 않는 코드베이스에 필요한 <see cref="T:System.Net.WebPermission" />이 지정되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1135">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1136">
            <paramref name="assemblyFile" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1136">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="865a4-1137">어셈블리 이름이 시스템 정의 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1137">The assembly name exceeds the system-defined maximum length.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-1138">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1138">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-1139">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1139">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-1140">"file://"로 시작 하는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1140">for reading a URI that begins with "file://".</span>
          </span>
          <span data-ttu-id="865a4-1141">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1141">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          </span>
        </permission>
        <permission cref="T:System.Net.WebPermission">
          <span data-ttu-id="865a4-1142">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1142">for reading a URI that does not begin with "file://".</span>
          </span>
        </permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="LoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFrom (string assemblyFile, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFrom(string assemblyFile, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFrom (assemblyFile As String, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFrom(System::String ^ assemblyFile, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="static member LoadFrom : string * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFrom (assemblyFile, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">
          <span data-ttu-id="865a4-1143">어셈블리 매니페스트가 포함된 파일의 이름 또는 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1143">The name or path of the file that contains the manifest of the assembly.</span>
          </span>
        </param>
        <param name="hashValue">
          <span data-ttu-id="865a4-1144">계산된 해시 코드의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1144">The value of the computed hash code.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="865a4-1145">파일을 해시하고 강력한 이름을 생성하는 데 사용된 해시 알고리즘입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1145">The hash algorithm used for hashing files and for generating the strong name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1146">해당 파일 이름이나 경로가 지정된 어셈블리, 해시 값 및 해시 알고리즘을 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1146">Loads an assembly given its file name or path, hash value, and hash algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1147">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1147">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1148">`assemblyFile` 매개 변수 이스케이프 문자가 없는 URI 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1148">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="865a4-1149">이 메서드는 URI에서 모든 잘못 된 문자가 이스케이프 문자를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1149">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-1150">파일 전송 프로토콜 (FTP) 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1150">File transfer protocol (FTP) is not supported.</span></span> <span data-ttu-id="865a4-1151">에 대 한 제공 된 URI `assemblyFile` FTP 주소를 사용 하는 어셈블리가 로드 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1151">If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded.</span></span> <span data-ttu-id="865a4-1152">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1152">No exception is thrown.</span></span>  
  
 <span data-ttu-id="865a4-1153">`assemblyFile` 현재 디렉터리에 절대적 이거나 상대적 않을 어셈블리는 호출자의 도메인에 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1153">`assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="865a4-1154">어셈블리는 세 개의 컨텍스트 중 하나로 로드할 수 있습니다 또는 컨텍스트 없이 로드 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1154">Assemblies can be loaded into one of three contexts, or can be loaded without context:</span></span>  
  
-   <span data-ttu-id="865a4-1155">로드 컨텍스트를 검색 하 여 찾은 어셈블리가 포함: 전역 어셈블리 캐시에 호스트 어셈블리에서는 런타임 호스트 되는 경우 또는 저장 된 <xref:System.AppDomainSetup.ApplicationBase%2A> 및 <xref:System.AppDomainSetup.PrivateBinPath%2A> 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1155">The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain.</span></span> <span data-ttu-id="865a4-1156"><xref:System.Reflection.Assembly.Load%2A> 메서드의 대부분 오버로드는 어셈블리 이 컨텍스트에 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1156">Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.</span></span>  
  
-   <span data-ttu-id="865a4-1157">로드 컨텍스트는 사용자 검색에 포함 되지 않은 경로 제공 하는 어셈블리를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1157">The load-from context contains assemblies for which the user provided a path that is not included in probing.</span></span> <span data-ttu-id="865a4-1158"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A> 및 <xref:System.AppDomain.ExecuteAssembly%2A>는 경로로 로드되는 메서드의 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1158"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.</span></span>  

    <span data-ttu-id="865a4-1159">경우.NET Framework 4부터의 URI `assemblyFile` 원격 위치를 지정 어셈블리 로드는 기본적으로 사용 하지 않도록 설정 하며 `LoadFrom` 메서드가 throw를 <xref:System.IO.FileLoadException>입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1159">Starting with .NET Framework 4, if the URI of `assemblyFile` specifies a remote location, assembly loading is disabled by default, and the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="865a4-1160">원격 위치에서 로드 된 코드의 실행을 사용 하도록 설정 하려면 사용 합니다 [ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1160">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
  
-   <span data-ttu-id="865a4-1161">리플렉션 전용 컨텍스트에 로드 된 어셈블리를 포함 합니다 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> 및 <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> 메서드, 이러한 코드 컨텍스트를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1161">The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.</span></span>  
  
-   <span data-ttu-id="865a4-1162">사용자 생성 된 어셈블리를 찾을 수, 하는 경우 모든 컨텍스트에서 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1162">If the user generated or found the assembly, it is not in any context.</span></span> <span data-ttu-id="865a4-1163">이 오버 로드를 사용 하 여 로드 된 어셈블리에 적용 됩니다는 <xref:System.Reflection.Assembly.Load%2A> 와 어셈블리를 포함 하는 바이트 배열을 지정 하 고, 리플렉션을 사용 하 여 만든 임시 동적 어셈블리 내보내기를 하 고, 디스크에 저장 되지 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1163">This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.</span></span>  
  
 <span data-ttu-id="865a4-1164">로드 컨텍스트 검색에 포함 되지 않은 경로에서 로드 되도록 어셈블리 있으며 아직 컨텍스트 경로 정보를 유지 하기 때문에 해당 경로에 종속성을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1164">The load-from context allows an assembly to be loaded from a path that is not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.</span></span>  
  
 <span data-ttu-id="865a4-1165"><xref:System.Reflection.Assembly.LoadFrom%2A> 메서드가 다음과 같은 단점이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1165">The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages.</span></span> <span data-ttu-id="865a4-1166">대신 <xref:System.Reflection.Assembly.Load%2A>을 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1166">Consider using <xref:System.Reflection.Assembly.Load%2A> instead.</span></span>  
  
-   <span data-ttu-id="865a4-1167">같은 ID를 가진 어셈블리가 이미 로드되어 있으면 다른 경로가 지정된 경우에도 <xref:System.Reflection.Assembly.LoadFrom%2A>은 로드된 어셈블리를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1167">If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.</span></span>  
  
-   <span data-ttu-id="865a4-1168">어셈블리를 사용 하 여 로드 <xref:System.Reflection.Assembly.LoadFrom%2A>, 로드 컨텍스트에 어셈블리 표시 이름으로 동일한 어셈블리를 로드 하려고 시도 하는 나중에 로드 하려고 하면 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1168">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.</span></span> <span data-ttu-id="865a4-1169">어셈블리가 deserialize되면 이 문제가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1169">This can occur when an assembly is deserialized.</span></span>  
  
-   <span data-ttu-id="865a4-1170">어셈블리를 사용 하 여 로드 <xref:System.Reflection.Assembly.LoadFrom%2A>, id가 같지만 다른 위치를 사용 하 여 어셈블리 검색 경로 포함 되어는 <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, 또는 기타 예기치 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1170">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.</span></span>  
  
-   <span data-ttu-id="865a4-1171"><xref:System.Reflection.Assembly.LoadFrom%2A>은 지정된 경로에서 <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType>와 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType> 또는 <xref:System.Net.WebPermission>을 요구합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1171"><xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType>, or <xref:System.Net.WebPermission>, on the specified path.</span></span>  
  
-   <span data-ttu-id="865a4-1172">네이티브 이미지에 대 한 있으면 `assemblyFile`, 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1172">If a native image exists for `assemblyFile`, it is not used.</span></span> <span data-ttu-id="865a4-1173">어셈블리는 도메인 중립적으로 로드될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1173">The assembly cannot be loaded as domain-neutral.</span></span>  
  
 <span data-ttu-id="865a4-1174">어셈블리 로더를 제공 하는 증명 정보를 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1174">The assembly is loaded with the evidence that the loader supplies.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1175">
            <paramref name="assemblyFile" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1175">
              <paramref name="assemblyFile" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-1176">
            <paramref name="assemblyFile" />이 없거나 로드하려는 모듈이 파일 이름 확장명을 지정하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1176">
              <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a file name extension.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1177">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1177">A file that was found could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-1178">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1178">-or-</span>
          </span>
          <span data-ttu-id="865a4-1179">원격 어셈블리에서 코드를 실행하는 기능은 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1179">The ability to execute code in remote assemblies is disabled.</span>
          </span>
          <span data-ttu-id="865a4-1180">
            <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>를 확인하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1180">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1181">
            <paramref name="assemblyFile" />이 유효한 어셈블리가 아닙니다. 예를 들어 64비트 프로세스의 32비트 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1181">
              <paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.</span>
          </span>
          <span data-ttu-id="865a4-1182">자세한 정보는 예외 항목을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1182">See the exception topic for more information.</span>
          </span>
          <span data-ttu-id="865a4-1183">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1183">-or-</span>
          </span>
          <span data-ttu-id="865a4-1184">
            <paramref name="assemblyFile" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1184">
              <paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="865a4-1185">"file://"로 시작되지 않는 코드베이스에 필요한 <see cref="T:System.Net.WebPermission" />이 지정되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1185">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1186">
            <paramref name="assemblyFile" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1186">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="865a4-1187">어셈블리 이름이 시스템 정의 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1187">The assembly name exceeds the system-defined maximum length.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-1188">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1188">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-1189">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1189">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-1190">"file://"로 시작 하는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1190">for reading a URI that begins with "file://".</span>
          </span>
          <span data-ttu-id="865a4-1191">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1191">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          </span>
        </permission>
        <permission cref="T:System.Net.WebPermission">
          <span data-ttu-id="865a4-1192">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1192">for reading a URI that does not begin with "file://".</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="LoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadFrom(string assemblyFile, class System.Security.Policy.Evidence securityEvidence, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadFrom (assemblyFile As String, securityEvidence As Evidence, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadFrom(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ securityEvidence, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="static member LoadFrom : string * System.Security.Policy.Evidence * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadFrom (assemblyFile, securityEvidence, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of LoadFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">
          <span data-ttu-id="865a4-1193">어셈블리 매니페스트가 포함된 파일의 이름 또는 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1193">The name or path of the file that contains the manifest of the assembly.</span>
          </span>
        </param>
        <param name="securityEvidence">
          <span data-ttu-id="865a4-1194">어셈블리 로드에 사용할 증명 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1194">Evidence for loading the assembly.</span>
          </span>
        </param>
        <param name="hashValue">
          <span data-ttu-id="865a4-1195">계산된 해시 코드의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1195">The value of the computed hash code.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="865a4-1196">파일을 해시하고 강력한 이름을 생성하는 데 사용된 해시 알고리즘입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1196">The hash algorithm used for hashing files and for generating the strong name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1197">해당 파일 이름이나 경로가 지정된 어셈블리, 보안 증명 정보, 해시 값 및 해시 알고리즘을 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1197">Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1198">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1198">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1199">`assemblyFile` 매개 변수 이스케이프 문자가 없는 URI 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1199">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="865a4-1200">이 메서드는 URI에서 모든 잘못 된 문자가 이스케이프 문자를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1200">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-1201">파일 전송 프로토콜 (FTP) 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1201">File transfer protocol (FTP) is not supported.</span></span> <span data-ttu-id="865a4-1202">에 대 한 제공 된 URI `assemblyFile` FTP 주소를 사용 하는 어셈블리가 로드 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1202">If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded.</span></span> <span data-ttu-id="865a4-1203">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1203">No exception is thrown.</span></span>  
  
 <span data-ttu-id="865a4-1204">`assemblyFile` 현재 디렉터리에 절대적 이거나 상대적 않을 어셈블리는 호출자의 도메인에 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1204">`assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="865a4-1205">어셈블리는 세 개의 컨텍스트 중 하나로 로드할 수 있습니다 또는 컨텍스트 없이 로드 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1205">Assemblies can be loaded into one of three contexts, or can be loaded without context:</span></span>  
  
-   <span data-ttu-id="865a4-1206">로드 컨텍스트를 검색 하 여 찾은 어셈블리가 포함: GAC에 호스트 어셈블리에서는 런타임 호스트 되는 경우 또는 저장 된 <xref:System.AppDomainSetup.ApplicationBase%2A> 및 <xref:System.AppDomainSetup.PrivateBinPath%2A> 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1206">The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain.</span></span> <span data-ttu-id="865a4-1207"><xref:System.Reflection.Assembly.Load%2A> 메서드의 대부분 오버로드는 어셈블리 이 컨텍스트에 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1207">Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.</span></span>  
  
-   <span data-ttu-id="865a4-1208">로드 컨텍스트를 검색 하 여 검색 된 디렉터리에 포함 되지 않은 경로 제공 하는 어셈블리를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1208">The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing.</span></span> <span data-ttu-id="865a4-1209"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A> 및 <xref:System.AppDomain.ExecuteAssembly%2A>는 경로로 로드되는 메서드의 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1209"><xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.</span></span>  

    <span data-ttu-id="865a4-1210">경우.NET Framework 4부터의 URI `assemblyFile` 원격 위치를 지정 어셈블리 로드는 기본적으로 사용 하지 않도록 설정 하며 `LoadFrom` 메서드가 throw를 <xref:System.IO.FileLoadException>입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1210">Starting with .NET Framework 4, if the URI of `assemblyFile` specifies a remote location, assembly loading is disabled by default, and the `LoadFrom` method throws a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="865a4-1211">원격 위치에서 로드 된 코드의 실행을 사용 하도록 설정 하려면 사용 합니다 [ `<loadFromRemoteSources>` ](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1211">To enable execution of code loaded from remote locations, you can use the [`<loadFromRemoteSources>`](~/docs/framework/configure-apps/file-schema/runtime/loadfromremotesources-element.md) configuration element.</span></span>    
  
-   <span data-ttu-id="865a4-1212">리플렉션 전용 컨텍스트에 로드 된 어셈블리를 포함 합니다 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> 및 <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> 메서드, 이러한 코드 컨텍스트를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1212">The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.</span></span>  
  
-   <span data-ttu-id="865a4-1213">사용자 생성 된 어셈블리를 찾을 수, 하는 경우 모든 컨텍스트에서 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1213">If the user generated or found the assembly, it is not in any context.</span></span> <span data-ttu-id="865a4-1214">이 오버 로드를 사용 하 여 로드 된 어셈블리에 적용 됩니다는 <xref:System.Reflection.Assembly.Load%2A> 와 어셈블리를 포함 하는 바이트 배열을 지정 하 고, 리플렉션을 사용 하 여 만든 임시 동적 어셈블리 내보내기를 하 고, 디스크에 저장 되지 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1214">This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.</span></span>  
  
 <span data-ttu-id="865a4-1215">로드 컨텍스트 검색에 포함 되지 않은 경로에서 로드 되도록 어셈블리 있으며 아직 컨텍스트 경로 정보를 유지 하기 때문에 해당 경로에 종속성을 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1215">The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.</span></span>  
  
 <span data-ttu-id="865a4-1216"><xref:System.Reflection.Assembly.LoadFrom%2A> 메서드가 다음과 같은 단점이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1216">The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages.</span></span> <span data-ttu-id="865a4-1217">대신 <xref:System.Reflection.Assembly.Load%2A>을 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1217">Consider using <xref:System.Reflection.Assembly.Load%2A> instead.</span></span>  
  
-   <span data-ttu-id="865a4-1218">같은 ID를 가진 어셈블리가 이미 로드되어 있으면 다른 경로가 지정된 경우에도 <xref:System.Reflection.Assembly.LoadFrom%2A>은 로드된 어셈블리를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1218">If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.</span></span>  
  
-   <span data-ttu-id="865a4-1219">어셈블리를 사용 하 여 로드 <xref:System.Reflection.Assembly.LoadFrom%2A>, 로드 컨텍스트에 어셈블리 표시 이름으로 동일한 어셈블리를 로드 하려고 시도 하는 나중에 로드 하려고 하면 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1219">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.</span></span> <span data-ttu-id="865a4-1220">어셈블리가 deserialize되면 이 문제가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1220">This can occur when an assembly is deserialized.</span></span>  
  
-   <span data-ttu-id="865a4-1221">어셈블리를 사용 하 여 로드 <xref:System.Reflection.Assembly.LoadFrom%2A>, id가 같지만 다른 위치를 사용 하 여 어셈블리 검색 경로 포함 되어는 <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, 또는 기타 예기치 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1221">If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.</span></span>  
  
-   <span data-ttu-id="865a4-1222"><xref:System.Reflection.Assembly.LoadFrom%2A>은 지정된 경로에서 <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType>와 <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType> 또는 <xref:System.Net.WebPermission>을 요구합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1222"><xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess.Read?displayProperty=nameWithType> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery?displayProperty=nameWithType>, or <xref:System.Net.WebPermission>, on the specified path.</span></span>  
  
-   <span data-ttu-id="865a4-1223">네이티브 이미지에 대 한 있으면 `assemblyFile`, 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1223">If a native image exists for `assemblyFile`, it is not used.</span></span> <span data-ttu-id="865a4-1224">어셈블리가는 도메인 중립적으로 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1224">The assembly cannot be loaded as domain neutral.</span></span>  
  
-   <span data-ttu-id="865a4-1225">.NET Framework 버전 1.0 및 1.1에서는 정책이 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1225">In the .NET Framework version 1.0 and 1.1, policy is not applied.</span></span>  
  
 <span data-ttu-id="865a4-1226">어셈블리에 대한 특정 권한 부여 여부는 증명 정보를 바탕으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1226">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="865a4-1227">어셈블리와 병합 하는 보안 증명에 대 한 규칙 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1227">The rules for assembly and security evidence merging are as follows:</span></span>  
  
-   <span data-ttu-id="865a4-1228">사용 하는 경우는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드를 사용 하 여 <xref:System.Security.Policy.Evidence> 매개 변수, 어셈블리 로더를 제공 하는 증명 정보를 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1228">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.</span></span>  
  
-   <span data-ttu-id="865a4-1229">사용 하는 경우는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수를 증거의 조각을 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1229">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="865a4-1230">인수로 제공 하는 증거의 조각을 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1230">Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
-   <span data-ttu-id="865a4-1231">한 번에이 메서드를 호출 하면 동일한 어셈블리에 있지만 지정 된 다른 증명, 공용 언어 런타임에서 throw 하지 않습니다는 <xref:System.IO.FileLoadException> 같음 및 다른 증명 사양의 무결성을 확인할 수 없으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1231">If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined.</span></span> <span data-ttu-id="865a4-1232">먼저 성공 하는 증명 정보는 사용 되는 증거입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1232">The evidence that first succeeds is the evidence that is used.</span></span>  
  
-   <span data-ttu-id="865a4-1233">사용 하는 경우는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드는 `Byte[]` 공용 개체 파일 (COFF) 형식 이미지를 증명 정보를 로드 하려면 매개 변수 결합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1233">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined.</span></span> <span data-ttu-id="865a4-1234">`Zone`를 `Url` 하 고 `Site` 호출 하는 어셈블리에서 상속 됩니다 및 `Hash` 및 `StrongName` COFF 어셈블리에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1234">`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.</span></span>  
  
-   <span data-ttu-id="865a4-1235">사용 하는 경우는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드를 `Byte[]` 매개 변수 및 <xref:System.Security.Policy.Evidence> COFF 이미지를 로드 하려면 제공 된 증명 정보를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1235">When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used.</span></span> <span data-ttu-id="865a4-1236">호출 어셈블리 및 COFF 이미지의 증명 정보는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1236">Evidence of the calling assembly and evidence of the COFF image is ignored.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1237">
            <paramref name="assemblyFile" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1237">
              <paramref name="assemblyFile" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-1238">
            <paramref name="assemblyFile" />이 없거나 로드하려는 모듈이 확장명을 지정하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1238">
              <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1239">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1239">A file that was found could not be loaded.</span>
          </span>
          <span data-ttu-id="865a4-1240">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1240">-or-</span>
          </span>
          <span data-ttu-id="865a4-1241">
            <paramref name="securityEvidence" />가 모호하지 않고 확실히 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1241">The <paramref name="securityEvidence" /> is not ambiguous and is determined to be invalid.</span>
          </span>
          <span data-ttu-id="865a4-1242">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1242">-or-</span>
          </span>
          <span data-ttu-id="865a4-1243">원격 어셈블리에서 코드를 실행하는 기능은 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1243">The ability to execute code in remote assemblies is disabled.</span>
          </span>
          <span data-ttu-id="865a4-1244">
            <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>를 확인하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1244">See <see href="https://docs.microsoft.com/dotnet/framework/configure-apps/file-schema/runtime/loadfromremotesources-element">&lt;loadFromRemoteSources&gt;</see>.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1245">
            <paramref name="assemblyFile" />이 유효한 어셈블리가 아닙니다. 예를 들어 64비트 프로세스의 32비트 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1245">
              <paramref name="assemblyFile" /> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.</span>
          </span>
          <span data-ttu-id="865a4-1246">자세한 정보는 예외 항목을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1246">See the exception topic for more information.</span>
          </span>
          <span data-ttu-id="865a4-1247">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1247">-or-</span>
          </span>
          <span data-ttu-id="865a4-1248">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1248">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="865a4-1249">"file://"로 시작되지 않는 코드베이스에 필요한 <see cref="T:System.Net.WebPermission" />이 지정되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1249">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1250">
            <paramref name="assemblyFile" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1250">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="865a4-1251">어셈블리 이름이 시스템 정의 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1251">The assembly name exceeds the system-defined maximum length.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-1252">증명 정보를 사용 하 여 어셈블리를 로드 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1252">to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-1253">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1253">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-1254">"file://"로 시작 하는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1254">for reading a URI that begins with "file://".</span>
          </span>
          <span data-ttu-id="865a4-1255">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1255">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span>
          </span>
        </permission>
        <permission cref="T:System.Net.WebPermission">
          <span data-ttu-id="865a4-1256">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1256">for reading a URI that does not begin with "file://".</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadModule">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1257">이 어셈블리의 내부 모듈을 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1257">Loads the module internal to this assembly.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadModule">
      <MemberSignature Language="C#" Value="public System.Reflection.Module LoadModule (string moduleName, byte[] rawModule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module LoadModule(string moduleName, unsigned int8[] rawModule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadModule (moduleName As String, rawModule As Byte()) As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Module ^ LoadModule(System::String ^ moduleName, cli::array &lt;System::Byte&gt; ^ rawModule);" />
      <MemberSignature Language="F#" Value="abstract member LoadModule : string * byte[] -&gt; System.Reflection.Module&#xA;override this.LoadModule : string * byte[] -&gt; System.Reflection.Module" Usage="assembly.LoadModule (moduleName, rawModule)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.LoadModule(System.String,System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="rawModule" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="moduleName">
          <span data-ttu-id="865a4-1258">모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1258">The name of the module.</span>
          </span>
          <span data-ttu-id="865a4-1259">이 문자열은 어셈블리 매니페스트에 있는 파일 이름과 일치해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1259">This string must correspond to a file name in this assembly's manifest.</span>
          </span>
        </param>
        <param name="rawModule">
          <span data-ttu-id="865a4-1260">내보낸 모듈 또는 리소스가 포함된 COFF 기반 이미지인 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1260">A byte array that is a COFF-based image containing an emitted module, or a resource.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1261">내보낸 모듈인 리소스 파일이 포함된 COFF(Common Object File Format) 기반 이미지가 포함된 이 어셈블리의 내부 모듈을 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1261">Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1262">로드된 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1262">The loaded module.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1263">
            <paramref name="moduleName" /> 또는 <paramref name="rawModule" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1263">
              <paramref name="moduleName" /> or <paramref name="rawModule" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1264">
            <paramref name="moduleName" />이 이 어셈블리 매니페스트에 있는 파일 항목과 일치하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1264">
              <paramref name="moduleName" /> does not match a file entry in this assembly's manifest.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1265">
            <paramref name="rawModule" />이 올바른 모듈이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1265">
              <paramref name="rawModule" /> is not a valid module.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1266">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1266">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-1267">증명 정보를 제공 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1267">to provide evidence.</span>
          </span>
          <span data-ttu-id="865a4-1268">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1268">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="LoadModule">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module LoadModule (string moduleName, byte[] rawModule, byte[] rawSymbolStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Module LoadModule(string moduleName, unsigned int8[] rawModule, unsigned int8[] rawSymbolStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LoadModule (moduleName As String, rawModule As Byte(), rawSymbolStore As Byte()) As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Module ^ LoadModule(System::String ^ moduleName, cli::array &lt;System::Byte&gt; ^ rawModule, cli::array &lt;System::Byte&gt; ^ rawSymbolStore);" />
      <MemberSignature Language="F#" Value="abstract member LoadModule : string * byte[] * byte[] -&gt; System.Reflection.Module&#xA;override this.LoadModule : string * byte[] * byte[] -&gt; System.Reflection.Module" Usage="assembly.LoadModule (moduleName, rawModule, rawSymbolStore)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.LoadModule(System.String,System.Byte[],System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="rawModule" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="moduleName">
          <span data-ttu-id="865a4-1269">모듈의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1269">The name of the module.</span>
          </span>
          <span data-ttu-id="865a4-1270">이 문자열은 어셈블리 매니페스트에 있는 파일 이름과 일치해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1270">This string must correspond to a file name in this assembly's manifest.</span>
          </span>
        </param>
        <param name="rawModule">
          <span data-ttu-id="865a4-1271">내보낸 모듈 또는 리소스가 포함된 COFF 기반 이미지인 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1271">A byte array that is a COFF-based image containing an emitted module, or a resource.</span>
          </span>
        </param>
        <param name="rawSymbolStore">
          <span data-ttu-id="865a4-1272">모듈의 기호를 나타내는 원시 바이트가 포함된 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1272">A byte array containing the raw bytes representing the symbols for the module.</span>
          </span>
          <span data-ttu-id="865a4-1273">이 배열이 리소스 파일이면 <see langword="null" />이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1273">Must be <see langword="null" /> if this is a resource file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1274">내보낸 모듈인 리소스 파일이 포함된 COFF(Common Object File Format) 기반 이미지가 포함된 이 어셈블리의 내부 모듈을 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1274">Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.</span>
          </span>
          <span data-ttu-id="865a4-1275">모듈의 기호를 나타내는 원시 바이트도 로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1275">The raw bytes representing the symbols for the module are also loaded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1276">로드된 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1276">The loaded module.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1277">
            <paramref name="moduleName" /> 또는 <paramref name="rawModule" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1277">
              <paramref name="moduleName" /> or <paramref name="rawModule" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1278">
            <paramref name="moduleName" />이 이 어셈블리 매니페스트에 있는 파일 항목과 일치하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1278">
              <paramref name="moduleName" /> does not match a file entry in this assembly's manifest.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1279">
            <paramref name="rawModule" />이 올바른 모듈이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1279">
              <paramref name="rawModule" /> is not a valid module.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1280">찾은 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1280">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-1281">증명 정보를 제공 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1281">to provide evidence.</span>
          </span>
          <span data-ttu-id="865a4-1282">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1282">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadWithPartialName">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1283">부분 이름을 사용하여 응용 프로그램 디렉터리 또는 전역 어셈블리 캐시에서 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1283">Loads an assembly from the application directory or from the global assembly cache using a partial name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="865a4-1284">오버 로드는 <xref:System.Reflection.Assembly.LoadWithPartialName%2A?displayProperty=nameWithType> 메서드는 사용 되지 않으며 이전 버전과 호환성을 위해 보존 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1284">The overloads of the <xref:System.Reflection.Assembly.LoadWithPartialName%2A?displayProperty=nameWithType> method are obsolete and have been retained for backward compatibility.</span></span> <span data-ttu-id="865a4-1285">사용되는 대체 항목은 <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1285">The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadWithPartialName">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadWithPartialName (string partialName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadWithPartialName(string partialName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadWithPartialName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadWithPartialName (partialName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadWithPartialName(System::String ^ partialName);" />
      <MemberSignature Language="F#" Value="static member LoadWithPartialName : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadWithPartialName partialName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use Assembly.Load() instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partialName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partialName">
          <span data-ttu-id="865a4-1286">어셈블리의 표시 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1286">The display name of the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1287">부분 이름을 사용하여 응용 프로그램 디렉터리 또는 전역 어셈블리 캐시에서 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1287">Loads an assembly from the application directory or from the global assembly cache using a partial name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1288">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1288">The loaded assembly.</span>
          </span>
          <span data-ttu-id="865a4-1289">
            <paramref name="partialName" />이 없으면 이 메서드에서 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1289">If <paramref name="partialName" /> is not found, this method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="865a4-1290"><xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29> 메서드는 사용 되지 않으며 이전 버전과 호환성을 위해 유지 되었습니다 했습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1290">The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29> method is obsolete and has been retained for backward compatibility.</span></span> <span data-ttu-id="865a4-1291">사용되는 대체 항목은 <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1291">The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="865a4-1292">이 메서드를 사용 하 여 어셈블리를 로드 하는 응용 프로그램 업그레이드 이러한 어셈블리의 영향을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1292">Applications that load assemblies with this method will be affected by upgrades of those assemblies.</span></span> <span data-ttu-id="865a4-1293">따라서이 메서드를 사용 하지 마세요 사용 하도록 응용 프로그램을 다시 디자인 된 <xref:System.Reflection.Assembly.Load%28System.String%29> 메서드 오버 로드 또는 <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1293">Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%28System.String%29> method overload or the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.</span></span>  
  
 <span data-ttu-id="865a4-1294">이 메서드는 먼저 호출 <xref:System.Reflection.Assembly.Load%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1294">This method first calls <xref:System.Reflection.Assembly.Load%2A>.</span></span> <span data-ttu-id="865a4-1295">어셈블리가 없으면이 메서드는 같은 간단한 이름 및 가장 높은 버전 번호를 포함 하는 전역 어셈블리 캐시에서 어셈블리를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1295">If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1296">
            <paramref name="partialName" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1296">The <paramref name="partialName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1297">
            <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1297">
              <paramref name="assemblyFile" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-1298">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1298">-or-</span>
          </span>
          <span data-ttu-id="865a4-1299">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="partialName" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1299">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="partialName" /> was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Assembly.Load(System.String)" />
        <altmember cref="M:System.Reflection.Assembly.LoadFrom(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LoadWithPartialName">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly LoadWithPartialName (string partialName, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly LoadWithPartialName(string partialName, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LoadWithPartialName (partialName As String, securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ LoadWithPartialName(System::String ^ partialName, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="static member LoadWithPartialName : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.LoadWithPartialName (partialName, securityEvidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use Assembly.Load() instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partialName" Type="System.String" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="partialName">
          <span data-ttu-id="865a4-1300">어셈블리의 표시 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1300">The display name of the assembly.</span>
          </span>
        </param>
        <param name="securityEvidence">
          <span data-ttu-id="865a4-1301">어셈블리 로드에 사용할 증명 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1301">Evidence for loading the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1302">부분 이름을 사용하여 응용 프로그램 디렉터리 또는 전역 어셈블리 캐시에서 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1302">Loads an assembly from the application directory or from the global assembly cache using a partial name.</span>
          </span>
          <span data-ttu-id="865a4-1303">어셈블리는 제공된 증명을 사용하여 호출자의 도메인에 로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1303">The assembly is loaded into the domain of the caller using the supplied evidence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1304">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1304">The loaded assembly.</span>
          </span>
          <span data-ttu-id="865a4-1305">
            <paramref name="partialName" />이 없으면 이 메서드에서 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1305">If <paramref name="partialName" /> is not found, this method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="865a4-1306"><xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29> 메서드는 사용 되지 않으며 이전 버전과 호환성을 위해 유지 되었습니다 했습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1306">The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29> method is obsolete and has been retained for backward compatibility.</span></span> <span data-ttu-id="865a4-1307">사용되는 대체 항목은 <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1307">The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="865a4-1308">증명 정보는 코드에 부여할 수 있는 권한 같이 보안 정책을 결정하기 위해 입력하는 정보 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1308">Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.</span></span>  
  
 <span data-ttu-id="865a4-1309">이 메서드를 사용 하 여 어셈블리를 로드 하는 응용 프로그램 업그레이드 이러한 어셈블리의 영향을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1309">Applications that load assemblies with this method will be affected by upgrades of those assemblies.</span></span> <span data-ttu-id="865a4-1310">따라서이 메서드를 사용 하지 마세요 사용 하도록 응용 프로그램을 다시 디자인 된 <xref:System.Reflection.Assembly.Load%2A> 메서드 또는 <xref:System.Reflection.Assembly.LoadFrom%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-1310">Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%2A> method or the <xref:System.Reflection.Assembly.LoadFrom%2A> method.</span></span>  
  
 <span data-ttu-id="865a4-1311">이 메서드는 먼저 호출 <xref:System.Reflection.Assembly.Load%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1311">This method first calls <xref:System.Reflection.Assembly.Load%2A>.</span></span> <span data-ttu-id="865a4-1312">어셈블리가 없으면이 메서드는 같은 간단한 이름 및 가장 높은 버전 번호를 포함 하는 전역 어셈블리 캐시에서 어셈블리를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1312">If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1313">어셈블리 또는 모듈이 서로 다른 두 증명 정보 집합으로 두 번 로드되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1313">An assembly or module was loaded twice with two different sets of evidence.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1314">
            <paramref name="partialName" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1314">The <paramref name="partialName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1315">
            <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1315">
              <paramref name="assemblyFile" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-1316">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1316">-or-</span>
          </span>
          <span data-ttu-id="865a4-1317">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="partialName" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1317">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="partialName" /> was compiled with a later version.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="865a4-1318">비관리 코드 호출에 대 한 증명 정보를 사용 하 여 어셈블리를 로드 하려면.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1318">for calling unmanaged code and to load an assembly with evidence.</span>
          </span>
          <span data-ttu-id="865a4-1319">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1319">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Reflection.Assembly.Load(System.String)" />
        <altmember cref="M:System.Reflection.Assembly.LoadFrom(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual string Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Location : string" Usage="System.Reflection.Assembly.Location" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Assembly.Location</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1320">매니페스트가 포함된 로드된 파일의 전체 경로나 UNC 위치를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1320">Gets the full path or UNC location of the loaded file that contains the manifest.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-1321">매니페스트가 포함된 로드된 파일의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1321">The location of the loaded file that contains the manifest.</span>
          </span>
          <span data-ttu-id="865a4-1322">로드된 파일이 섀도 복사된 경우 위치는 해당 파일이 섀도 복사된 후의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1322">If the loaded file was shadow-copied, the location is that of the file after being shadow-copied.</span>
          </span>
          <span data-ttu-id="865a4-1323">
            <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> 메서드 오버로드를 사용한 경우처럼 어셈블리가 바이트 배열에서 로드되면 빈 문자열("")이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1323">If the assembly is loaded from a byte array, such as when using the <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> method overload, the value returned is an empty string ("").</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1324">위치를 가져오려면 파일이 섀도 복사 되기 전에 <xref:System.Reflection.Assembly.CodeBase%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1324">To get the location before the file has been shadow-copied, use the <xref:System.Reflection.Assembly.CodeBase%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="865a4-1325">다음 예제에서는 매니페스트를 포함 하는 로드 된 파일의 위치를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1325">The following example displays the location of the loaded file that contains the manifest.</span></span>  
  
 [!code-cpp[System.Reflection.Assembly#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#3)]
 [!code-csharp[System.Reflection.Assembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#3)]
 [!code-vb[System.Reflection.Assembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="865a4-1326">현재 어셈블리가 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 개체로 표현되는 동적 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1326">The current assembly is a dynamic assembly, represented by an <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> object.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-1327">경로에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1327">for access to the path.</span>
          </span>
          <span data-ttu-id="865a4-1328">연결 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1328">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ManifestModule">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module ManifestModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module ManifestModule" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.ManifestModule" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ManifestModule As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ ManifestModule { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ManifestModule : System.Reflection.Module" Usage="System.Reflection.Assembly.ManifestModule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1329">현재 어셈블리의 매니페스트가 포함된 모듈을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1329">Gets the module that contains the manifest for the current assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-1330">어셈블리의 매니페스트가 포함된 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1330">The module that contains the manifest for the assembly.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuleResolve">
      <MemberSignature Language="C#" Value="public virtual event System.Reflection.ModuleResolveEventHandler ModuleResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Reflection.ModuleResolveEventHandler ModuleResolve" />
      <MemberSignature Language="DocId" Value="E:System.Reflection.Assembly.ModuleResolve" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Custom Event ModuleResolve As ModuleResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Reflection::ModuleResolveEventHandler ^ ModuleResolve;" />
      <MemberSignature Language="F#" Value="member this.ModuleResolve : System.Reflection.ModuleResolveEventHandler " Usage="member this.ModuleResolve : System.Reflection.ModuleResolveEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Runtime.InteropServices._Assembly.ModuleResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ModuleResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1331">공용 언어 런타임 클래스 로더가 일반적인 방법으로 어셈블리의 내부 모듈에 대한 참조를 확인할 수 없는 경우에 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1331">Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1332">이 이벤트는 콜백 검색 모듈 자체를 로드 하 고 반환할 수를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1332">This event gives the callback a chance to find and load the module itself and return it.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="865a4-1333">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1333">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="865a4-1334">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1334">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt; Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Module&gt; Modules" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.Modules" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Modules As IEnumerable(Of Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ Modules { System::Collections::Generic::IEnumerable&lt;System::Reflection::Module ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Modules : seq&lt;System.Reflection.Module&gt;" Usage="System.Reflection.Assembly.Modules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Module&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1335">이 어셈블리의 모듈을 포함하는 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1335">Gets a collection that contains the modules in this assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-1336">이 어셈블리의 모듈을 포함하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1336">A collection that contains the modules in this assembly.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.Assembly left, System.Reflection.Assembly right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.Assembly left, class System.Reflection.Assembly right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Assembly, right As Assembly) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::Assembly ^ left, System::Reflection::Assembly ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.Assembly * System.Reflection.Assembly -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.Assembly" />
        <Parameter Name="right" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="865a4-1337">
            <c>오른쪽</c>과 비교할 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1337">The assembly to compare to <c>right</c>.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="865a4-1338">
            <c>왼쪽</c>과 비교할 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1338">The assembly to compare to <c>left</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1339">두 <see cref="T:System.Reflection.Assembly" /> 개체가 같은지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1339">Indicates whether two <see cref="T:System.Reflection.Assembly" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1340">
            <see langword="true" />가 <paramref name="left" />와 같으면 <paramref name="right" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1340">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.Assembly left, System.Reflection.Assembly right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.Assembly left, class System.Reflection.Assembly right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Assembly, right As Assembly) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::Assembly ^ left, System::Reflection::Assembly ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.Assembly * System.Reflection.Assembly -&gt; bool" Usage="System.Reflection.Assembly.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.Assembly" />
        <Parameter Name="right" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="865a4-1341">
            <c>오른쪽</c>과 비교할 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1341">The assembly to compare to <c>right</c>.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="865a4-1342">
            <c>왼쪽</c>과 비교할 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1342">The assembly to compare to <c>left</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1343">두 <see cref="T:System.Reflection.Assembly" /> 개체가 같지 않은지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1343">Indicates whether two <see cref="T:System.Reflection.Assembly" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1344">
            <see langword="true" />가 <paramref name="left" />와 다르면 <paramref name="right" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1344">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PermissionSet">
      <MemberSignature Language="C#" Value="public virtual System.Security.PermissionSet PermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet PermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.PermissionSet" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::PermissionSet ^ PermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PermissionSet : System.Security.PermissionSet" Usage="System.Reflection.Assembly.PermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1345">현재 어셈블리의 권한 부여 집합을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1345">Gets the grant set of the current assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-1346">현재 어셈블리의 권한 부여 집합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1346">The grant set of the current assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1347"><xref:System.Security.PermissionSet> 개체는 경로 같은 중요 한 정보를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1347"><xref:System.Security.PermissionSet> objects can contain sensitive information such as paths.</span></span> <span data-ttu-id="865a4-1348">따라서 이러한 개체에 액세스 하려면 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1348">Therefore, full trust is required to access these objects.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="865a4-1349">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1349">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="865a4-1350">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1350">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReflectionOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReflectionOnly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.ReflectionOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ReflectionOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ReflectionOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectionOnly : bool" Usage="System.Reflection.Assembly.ReflectionOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1351">이 어셈블리가 리플렉션 전용 컨텍스트에 로드되었는지를 나타내는 <see cref="T:System.Boolean" /> 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1351">Gets a <see cref="T:System.Boolean" /> value indicating whether this assembly was loaded into the reflection-only context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-1352">어셈블리가 실행 컨텍스트가 아니라 리플렉션 전용 컨텍스트에 로드되었으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1352">
              <see langword="true" /> if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1353">사용 하 여 어셈블리를 리플렉션 전용 컨텍스트에 로드 되었으면를 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> 메서드를 어셈블리에서 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1353">If an assembly has been loaded into the reflection-only context, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, you cannot execute code in the assembly.</span></span> <span data-ttu-id="865a4-1354">어셈블리 코드를 실행 하려면 실행 컨텍스트에 로드 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1354">To execute code, the assembly must be loaded into the execution context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReflectionOnlyLoad">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1355">어셈블리를 검사할 수 있지만 실행할 수는 없는 리플렉션 전용 컨텍스트에 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1355">Loads an assembly into the reflection-only context, where it can be examined but not executed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReflectionOnlyLoad">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly ReflectionOnlyLoad (byte[] rawAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly ReflectionOnlyLoad(unsigned int8[] rawAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyLoad (rawAssembly As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ ReflectionOnlyLoad(cli::array &lt;System::Byte&gt; ^ rawAssembly);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyLoad : byte[] -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.ReflectionOnlyLoad rawAssembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawAssembly">
          <span data-ttu-id="865a4-1356">내보낸 어셈블리가 포함된 COFF 기반 이미지인 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1356">A byte array that is a COFF-based image containing an emitted assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1357">내보낸 어셈블리가 포함된 COFF(Common Object File Format) 기반 이미지에서 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1357">Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly.</span>
          </span>
          <span data-ttu-id="865a4-1358">어셈블리는 호출자 응용 프로그램 도메인의 리플렉션 전용 컨텍스트에 로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1358">The assembly is loaded into the reflection-only context of the caller's application domain.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1359">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1359">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1360">리플렉션 전용 컨텍스트에 로드 된 어셈블리에서 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1360">You cannot execute code from an assembly loaded into the reflection-only context.</span></span> <span data-ttu-id="865a4-1361">코드를 실행 하려면 어셈블리에 로드 해야만 실행 컨텍스트를 사용 하 여 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-1361">To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
 <span data-ttu-id="865a4-1362">리플렉션 전용 컨텍스트에 다른 컨텍스트에서 다르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1362">The reflection-only context is no different from other contexts.</span></span> <span data-ttu-id="865a4-1363">컨텍스트에 로드 된 어셈블리를 응용 프로그램 도메인을 언로드하는 유일한 언로드될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1363">Assemblies that are loaded into the context can be unloaded only by unloading the application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1364">
            <paramref name="rawAssembly" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1364">
              <paramref name="rawAssembly" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1365">
            <paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1365">
              <paramref name="rawAssembly" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-1366">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1366">-or-</span>
          </span>
          <span data-ttu-id="865a4-1367">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="rawAssembly" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1367">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1368">
            <paramref name="rawAssembly" />를 로드할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1368">
              <paramref name="rawAssembly" /> cannot be loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyLoad">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly ReflectionOnlyLoad (string assemblyString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly ReflectionOnlyLoad(string assemblyString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyLoad (assemblyString As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ ReflectionOnlyLoad(System::String ^ assemblyString);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyLoad : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.ReflectionOnlyLoad assemblyString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyString">
          <span data-ttu-id="865a4-1369">
            <see cref="P:System.Reflection.AssemblyName.FullName" /> 속성에서 반환된 어셈블리의 표시 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1369">The display name of the assembly, as returned by the <see cref="P:System.Reflection.AssemblyName.FullName" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1370">지정된 표시 이름을 사용하여 어셈블리를 리플렉션 전용 컨텍스트에 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1370">Loads an assembly into the reflection-only context, given its display name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1371">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1371">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1372">종속성은 리플렉션 전용 컨텍스트에 자동으로 로드 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1372">Dependencies are not automatically loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="865a4-1373">리플렉션 전용 컨텍스트에 로드 된 어셈블리에서 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1373">You cannot execute code from an assembly loaded into the reflection-only context.</span></span> <span data-ttu-id="865a4-1374">코드를 실행 하려면 어셈블리에 로드 해야만 실행 컨텍스트를 사용 하 여 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-1374">To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
 <span data-ttu-id="865a4-1375">어셈블리에 대한 특정 권한 부여 여부는 증명 정보를 바탕으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1375">Whether certain permissions are granted or not granted to an assembly is based on evidence.</span></span> <span data-ttu-id="865a4-1376">어셈블리와 병합 하는 보안 증명에 대 한 규칙 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1376">The rules for assembly and security evidence merging are as follows:</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="865a4-1377">C + +에서 컴파일된 실행 파일에 반영를 throw 할 수는 <xref:System.IO.FileLoadException>합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1377">Reflecting on executable files compiled in C++ might throw a <xref:System.IO.FileLoadException>.</span></span> <span data-ttu-id="865a4-1378">C + + 컴파일러가 실행 파일에서.reloc 섹션 이나 재배치 주소 원인인 것 같습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1378">This is most likely caused by the C++ compiler stripping the relocation addresses or the .reloc section from your executable file.</span></span> <span data-ttu-id="865a4-1379">.Reloc 주소를 유지 하려면 지정 `/fixed:no` 링크할 때.</span><span class="sxs-lookup"><span data-stu-id="865a4-1379">To preserve the .reloc address, specify `/fixed:no` when you are linking.</span></span>  
  
 <span data-ttu-id="865a4-1380">리플렉션 전용 컨텍스트에 다른 컨텍스트에서 다르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1380">The reflection-only context is no different from other contexts.</span></span> <span data-ttu-id="865a4-1381">컨텍스트에 로드 된 어셈블리를 응용 프로그램 도메인을 언로드하는 유일한 언로드될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1381">Assemblies that are loaded into the context can be unloaded only by unloading the application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1382">
            <paramref name="assemblyString" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1382">
              <paramref name="assemblyString" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1383">
            <paramref name="assemblyString" />가 빈 문자열("")인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1383">
              <paramref name="assemblyString" /> is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-1384">
            <paramref name="assemblyString" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1384">
              <paramref name="assemblyString" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1385">
            <paramref name="assemblyString" />을 찾았지만 로드할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1385">
              <paramref name="assemblyString" /> is found, but cannot be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1386">
            <paramref name="assemblyString" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1386">
              <paramref name="assemblyString" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-1387">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1387">-or-</span>
          </span>
          <span data-ttu-id="865a4-1388">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyString" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1388">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyLoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly ReflectionOnlyLoadFrom (string assemblyFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly ReflectionOnlyLoadFrom(string assemblyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyLoadFrom (assemblyFile As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ ReflectionOnlyLoadFrom(System::String ^ assemblyFile);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyLoadFrom : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.ReflectionOnlyLoadFrom assemblyFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">
          <span data-ttu-id="865a4-1389">어셈블리 매니페스트가 포함된 파일의 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1389">The path of the file that contains the manifest of the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1390">지정된 경로를 사용하여 어셈블리를 리플렉션 전용 컨텍스트에 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1390">Loads an assembly into the reflection-only context, given its path.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1391">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1391">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1392">종속성은 리플렉션 전용 컨텍스트에 자동으로 로드 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1392">Dependencies are not automatically loaded into the reflection-only context.</span></span> <span data-ttu-id="865a4-1393">종속성을 자동으로 로드 하려면 처리는 <xref:System.AppDomain.ReflectionOnlyAssemblyResolve> 이벤트 및 이벤트 처리기에 종속성을 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1393">To automatically load dependencies, handle the <xref:System.AppDomain.ReflectionOnlyAssemblyResolve> event and load the dependency in the event handler.</span></span>  
  
 <span data-ttu-id="865a4-1394">리플렉션 전용 컨텍스트에 로드 된 어셈블리에서 코드를 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1394">You cannot execute code from an assembly that has been loaded into the reflection-only context.</span></span> <span data-ttu-id="865a4-1395">코드를 실행 하려면 사용 하 여 어셈블리를 로드 합니다 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="865a4-1395">To execute the code, load the assembly with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="865a4-1396">`assemblyFile` 매개 변수 이스케이프 문자가 없는 URI 참조 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1396">The `assemblyFile` parameter must refer to a URI without escape characters.</span></span> <span data-ttu-id="865a4-1397">이 메서드는 URI에서 모든 잘못 된 문자가 이스케이프 문자를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1397">This method supplies escape characters for all invalid characters in the URI.</span></span>  
  
 <span data-ttu-id="865a4-1398">지정 된 경로 `assemblyFile` 현재 디렉터리에 상대적입니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1398">The path specified for `assemblyFile` is relative to the current directory.</span></span> <span data-ttu-id="865a4-1399">어셈블리는 호출자의 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1399">The assembly is loaded into the domain of the caller.</span></span>  
  
 <span data-ttu-id="865a4-1400">리플렉션 전용 컨텍스트에 다른 컨텍스트에서 다르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1400">The reflection-only context is no different from other contexts.</span></span> <span data-ttu-id="865a4-1401">컨텍스트에 로드 된 어셈블리를 응용 프로그램 도메인을 언로드하는 유일한 언로드될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1401">Assemblies that are loaded into the context can be unloaded only by unloading the application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1402">
            <paramref name="assemblyFile" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1402">
              <paramref name="assemblyFile" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-1403">
            <paramref name="assemblyFile" />이 없거나 로드하려는 모듈이 파일 이름 확장명을 지정하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1403">
              <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a file name extension.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1404">
            <paramref name="assemblyFile" />을 찾았지만 로드할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1404">
              <paramref name="assemblyFile" /> is found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1405">
            <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1405">
              <paramref name="assemblyFile" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-1406">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1406">-or-</span>
          </span>
          <span data-ttu-id="865a4-1407">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />가 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1407">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="865a4-1408">"file://"로 시작되지 않는 코드베이스에 필요한 <see cref="T:System.Net.WebPermission" />이 지정되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1408">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="865a4-1409">어셈블리 이름이 시스템 정의 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1409">The assembly name exceeds the system-defined maximum length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1410">
            <paramref name="assemblyFile" />가 빈 문자열("")인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1410">
              <paramref name="assemblyFile" /> is an empty string ("").</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="865a4-1411">"file://"로 시작 하는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1411">for reading a URI that begins with "file://".</span>
          </span>
          <span data-ttu-id="865a4-1412">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1412">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span>
          </span>
        </permission>
        <permission cref="T:System.Net.WebPermission">
          <span data-ttu-id="865a4-1413">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1413">for reading a URI that does not begin with "file://".</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SecurityRuleSet">
      <MemberSignature Language="C#" Value="public virtual System.Security.SecurityRuleSet SecurityRuleSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.SecurityRuleSet SecurityRuleSet" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Assembly.SecurityRuleSet" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SecurityRuleSet As SecurityRuleSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::SecurityRuleSet SecurityRuleSet { System::Security::SecurityRuleSet get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityRuleSet : System.Security.SecurityRuleSet" Usage="System.Reflection.Assembly.SecurityRuleSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityRuleSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1414">CLR(공용 언어 런타임)가 이 어셈블리에 대해 적용해야 하는 보안 규칙 집합을 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1414">Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="865a4-1415">CLR가 이 어셈블리에 대해 적용하는 보안 규칙 집합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1415">The security rule set that the CLR enforces for this assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1416">기본적으로 사용 하 여 컴파일하는 어셈블리는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 대신에 명시적으로 만들 수 있지만 투명성을 갖습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1416">By default, assemblies that you compile with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] have  transparency, although you can explicitly make them  instead.</span></span> <span data-ttu-id="865a4-1417">이전 버전의.NET Framework를 사용 하 여 컴파일된 어셈블리에는 수준 1 투명도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1417">Assemblies that were compiled with earlier versions of the .NET Framework have level 1 transparency.</span></span>  
  
 <span data-ttu-id="865a4-1418">[보안 변경 내용](~/docs/framework/security/security-changes.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="865a4-1418">See [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.IsDefined">
      <MemberSignature Language="C#" Value="bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Reflection.ICustomAttributeProvider.IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Reflection.ICustomAttributeProvider.IsDefined(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::IsDefined;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">To be added.</param>
        <param name="inherit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Assembly.GetType">
      <MemberSignature Language="C#" Value="Type _Assembly.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._Assembly.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _Assembly.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._Assembly.GetType() = System::Runtime::InteropServices::_Assembly::GetType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1419">현재 인스턴스의 형식을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1419">Returns the type of the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1420">
            <see cref="T:System.Reflection.Assembly" /> 형식을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1420">An object that represents the <see cref="T:System.Reflection.Assembly" /> type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="assembly.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Assembly.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="865a4-1421">표시 이름이라고도 하는 어셈블리의 전체 이름을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1421">Returns the full name of the assembly, also known as the display name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1422">어셈블리의 전체 이름입니다. 어셈블리의 전체 이름을 확인할 수 없는 경우에는 클래스 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1422">The full name of the assembly, or the class name if the full name of the assembly cannot be determined.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeLoadFrom">
      <MemberSignature Language="C#" Value="public static System.Reflection.Assembly UnsafeLoadFrom (string assemblyFile);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Assembly UnsafeLoadFrom(string assemblyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeLoadFrom (assemblyFile As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Assembly ^ UnsafeLoadFrom(System::String ^ assemblyFile);" />
      <MemberSignature Language="F#" Value="static member UnsafeLoadFrom : string -&gt; System.Reflection.Assembly" Usage="System.Reflection.Assembly.UnsafeLoadFrom assemblyFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile">
          <span data-ttu-id="865a4-1423">어셈블리 매니페스트가 포함된 파일의 이름 또는 경로입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1423">The name or path of the file that contains the manifest of the assembly.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="865a4-1424">일부 보안 검사를 무시하고 로드 소스 컨텍스트로 어셈블리를 로드합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1424">Loads an assembly into the load-from context, bypassing some security checks.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="865a4-1425">로드된 어셈블리입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1425">The loaded assembly.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="865a4-1426">이 메서드를 사용 하 여 운영 체제 (예를 들어, 임시 파일 인터넷 이나 인트라넷에서 다운로드) 웹에서 로드 되었음을 표시에 로컬 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1426">Use this method to load a local assembly that the operating system has flagged as having been loaded from the Web (for example, a temporary file that was downloaded from the Internet or intranet).</span></span> <span data-ttu-id="865a4-1427">전에 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], 이러한 어셈블리는 샌드박스 응용 프로그램 도메인에 자동으로 로드 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1427">Before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], such assemblies were automatically loaded into a sandboxed application domain.</span></span> <span data-ttu-id="865a4-1428">부터 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], 완전 신뢰를 사용 하 여 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1428">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], they are loaded with full trust.</span></span>  
  
 <span data-ttu-id="865a4-1429">이 메서드를 사용 하는 대신에 적용할 수 있습니다 합니다 [ &lt;NetFx40_LegacySecurityPolicy&gt; 요소](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md) 응용 프로그램 구성 파일에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1429">As an alternative to using this method, you can apply the [&lt;NetFx40_LegacySecurityPolicy&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md) in your application configuration file.</span></span> <span data-ttu-id="865a4-1430">이렇게 하면 공용 언어 런타임에서의 보안 정책으로 되돌리려면는 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1430">This causes the common language runtime to revert to the security policy of the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="865a4-1431">이러한 솔루션 중 하나를 사용 하는 경우 확인 해야 로드 해도 안전 하다 `assemblyFile` 완전 신뢰를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1431">If you use either of these solutions, you must be certain that it is safe to load `assemblyFile` with full trust.</span></span>  
  
 <span data-ttu-id="865a4-1432">로드 컨텍스트를 포함 하 여 로드 컨텍스트의 참조는 <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="865a4-1432">For a discussion of load contexts, including the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="865a4-1433">
            <paramref name="assemblyFile" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1433">
              <paramref name="assemblyFile" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="865a4-1434">
            <paramref name="assemblyFile" />이 없거나 로드하려는 모듈이 확장명을 지정하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1434">
              <paramref name="assemblyFile" /> is not found, or the module you are trying to load does not specify a filename extension.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="865a4-1435">발견된 파일을 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1435">A file that was found could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="865a4-1436">
            <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1436">
              <paramref name="assemblyFile" /> is not a valid assembly.</span>
          </span>
          <span data-ttu-id="865a4-1437">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1437">-or-</span>
          </span>
          <span data-ttu-id="865a4-1438">
            <paramref name="assemblyFile" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1438">
              <paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="865a4-1439">"file://"로 시작되지 않는 코드베이스에 필요한 <see cref="T:System.Net.WebPermission" />이 지정되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1439">A codebase that does not start with "file://" was specified without the required <see cref="T:System.Net.WebPermission" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="865a4-1440">
            <paramref name="assemblyFile" /> 매개 변수가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1440">The <paramref name="assemblyFile" /> parameter is an empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <span data-ttu-id="865a4-1441">어셈블리 이름이 시스템 정의 최대 길이를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1441">The assembly name exceeds the system-defined maximum length.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="865a4-1442">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1442">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="865a4-1443">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="865a4-1443">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>