<Type Name="TypeFilter" FullName="System.Reflection.TypeFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6e64b3e877ca6b5056ec09d573d458ad354be11" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36542474" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate bool TypeFilter(Type m, object filterCriteria);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed TypeFilter extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.TypeFilter" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function TypeFilter(m As Type, filterCriteria As Object) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="public delegate bool TypeFilter(Type ^ m, System::Object ^ filterCriteria);" />
  <TypeSignature Language="F#" Value="type TypeFilter = delegate of Type * obj -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="m" Type="System.Type" />
    <Parameter Name="filterCriteria" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="m">
      <span data-ttu-id="70891-101">필터가 적용되는 <see langword="Type" /> 개체입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="70891-101">The <see langword="Type" /> object to which the filter is applied.</span>
      </span>
    </param>
    <param name="filterCriteria">
      <span data-ttu-id="70891-102">목록을 필터링하는 데 사용되는 임의 개체입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="70891-102">An arbitrary object used to filter the list.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="70891-103">
        <see cref="T:System.Type" /> 개체 배열에 표시되는 클래스를 필터링합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="70891-103">Filters the classes represented in an array of <see cref="T:System.Type" /> objects.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="70891-104">필터링된 목록에 <see cref="T:System.Type" />을 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="70891-104">
          <see langword="true" /> to include the <see cref="T:System.Type" /> in the filtered list; otherwise <see langword="false" />.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="70891-105">`TypeFilter` 대리자 클래스의 목록을 필터링 하기 위해 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="70891-105">The `TypeFilter` delegate is used to filter a list of classes.</span></span> <span data-ttu-id="70891-106">필터링의 배열에서 나타내는 클래스를 통해 특히 <xref:System.Type> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="70891-106">Specifically, you use it to filter the classes represented in an array of <xref:System.Type> objects.</span></span> <span data-ttu-id="70891-107"><xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> 메서드에서이 대리자를 사용 하 여 반환 하는 인터페이스의 목록을 필터링 합니다.</span><span class="sxs-lookup"><span data-stu-id="70891-107">The <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> method uses this delegate to filter the list of interfaces that it returns.</span></span> <span data-ttu-id="70891-108">각 파생된 클래스 <xref:System.Delegate> 및 <xref:System.MulticastDelegate> 생성자와 `DynamicInvoke` 메서드.</span><span class="sxs-lookup"><span data-stu-id="70891-108">Every derived class of <xref:System.Delegate> and <xref:System.MulticastDelegate> has a constructor and a `DynamicInvoke` method.</span></span> <span data-ttu-id="70891-109">에 대 한 설명에 지정 된 Visual c + + 코드 예제를 보려면 `Delegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="70891-109">See the Visual C++ code example given in the description for `Delegate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="70891-110">일치 하는 메서드를 정의 하는 방법을 보여 주는이 예제는 <xref:System.Reflection.TypeFilter> 대리자 프로토타입 리플렉션을 사용 하 여 일치 하는 항목의 하위 집합을 반환 하거나 필터링 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="70891-110">This example shows how to define a method matching the <xref:System.Reflection.TypeFilter> delegate prototype allowing you to use reflection to filter or return a subset of matching entries.</span></span>  
  
 [!code-vb[Typefilter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeFilter/VB/Typefilter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Delegate" />
    <altmember cref="T:System.MulticastDelegate" />
  </Docs>
</Type>