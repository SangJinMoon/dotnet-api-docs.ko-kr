<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CallingConventions.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac525db27464d40078edeefa0858df96a01af3e22f0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25db27464d40078edeefa0858df96a01af3e22f0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.CallingConventions">
          <source>Defines the valid calling conventions for a method.</source>
          <target state="translated">메서드에 대한 올바른 호출 규칙을 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CallingConventions">
          <source>The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods.</source>
          <target state="translated">네이티브 호출 규칙은 순서에 적용 되는 규칙의 집합 및 레이아웃에 전달 된 인수의 컴파일된 메서드에 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.CallingConventions">
          <source>It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.</source>
          <target state="translated">또한 반환 값을 전달 하는 방법, 인수에 사용할 등록 기능 및 여부는 호출 또는 호출 메서드의 인수 스택에서 제거를 제어 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.Any">
          <source>Specifies that either the <ph id="ph1">&lt;see langword="Standard" /&gt;</ph> or the <ph id="ph2">&lt;see langword="VarArgs" /&gt;</ph> calling convention may be used.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Standard" /&gt;</ph> 또는 <ph id="ph2">&lt;see langword="VarArgs" /&gt;</ph> 호출 규칙 중 사용할 수 있는 호출 규칙을 지정합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.ExplicitThis">
          <source>Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method).</source>
          <target state="translated">시그니처를 인스턴스 또는 가상 메서드(정적 메서드 아님)에 대한 호출을 나타내는 함수 포인터 서명으로 지정합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.ExplicitThis">
          <source>If <ph id="ph1">&lt;see langword="ExplicitThis" /&gt;</ph> is set, <ph id="ph2">&lt;see langword="HasThis" /&gt;</ph> must also be set.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="ExplicitThis" /&gt;</ph>를 설정하면 <ph id="ph2">&lt;see langword="HasThis" /&gt;</ph>도 설정해야 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.ExplicitThis">
          <source>The first argument passed to the called method is still a <ph id="ph1">&lt;see langword="this" /&gt;</ph> pointer, but the type of the first argument is now unknown.</source>
          <target state="translated">호출된 메서드에 전달된 첫 번째 인수는 <ph id="ph1">&lt;see langword="this" /&gt;</ph> 포인터지만 이 인수의 형식은 알 수 없습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.ExplicitThis">
          <source>Therefore, a token that describes the type (or class) of the <ph id="ph1">&lt;see langword="this" /&gt;</ph> pointer is explicitly stored into its metadata signature.</source>
          <target state="translated">그러므로 <ph id="ph1">&lt;see langword="this" /&gt;</ph> 포인터의 형식 또는 클래스를 설명하는 토큰은 명시적으로 메타데이터 시그니처에 저장됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.HasThis">
          <source>Specifies an instance or virtual method (not a static method).</source>
          <target state="translated">인스턴스 또는 가상 메서드(정적 메서드가 아님)를 지정합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.HasThis">
          <source>At run-time, the called method is passed a pointer to the target object as its first argument (the <ph id="ph1">&lt;see langword="this" /&gt;</ph> pointer).</source>
          <target state="translated">런타임에서, 호출된 메서드는 대상 개체를 가리키는 포인터에 첫 번째 인수(<ph id="ph1">&lt;see langword="this" /&gt;</ph> 포인터)로 전달됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.HasThis">
          <source>The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.</source>
          <target state="translated">메서드를 알고 있고 메타데이터에서 소유자 클래스를 검색할 수 있으므로 메타데이터에 저장된 시그니처에는 이 첫 번째 인수의 형식이 포함되지 않습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.Standard">
          <source>Specifies the default calling convention as determined by the common language runtime.</source>
          <target state="translated">공용 언어 런타임에서 결정한 대로 기본 호출 규칙을 지정합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.Standard">
          <source>Use this calling convention for static methods.</source>
          <target state="translated">정적 메서드에는 이 호출 규칙을 사용하고,</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.Standard">
          <source>For instance or virtual methods use <ph id="ph1">&lt;see langword="HasThis" /&gt;</ph>.</source>
          <target state="translated">인스턴스나 가상 메서드에는 <ph id="ph1">&lt;see langword="HasThis" /&gt;</ph>를 사용합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="F:System.Reflection.CallingConventions.VarArgs">
          <source>Specifies the calling convention for methods with variable arguments.</source>
          <target state="translated">가변 인수를 사용하여 메서드에 대한 호출 규칙을 지정합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>