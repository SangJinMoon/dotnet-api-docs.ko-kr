<Type Name="Collection&lt;T&gt;" FullName="System.Collections.ObjectModel.Collection&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6c4b58d174f629a6a75653c99acc3147878f6484" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37701174" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Collection&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Collection`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.Collection`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Collection(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Collection : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList" />
  <TypeSignature Language="F#" Value="type Collection&lt;'T&gt; = class&#xA;    interface IList&lt;'T&gt;&#xA;    interface IList&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="9ab15-101">컬렉션에 있는 요소의 형식입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9ab15-101">The type of elements in the collection.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="9ab15-102">제네릭 컬렉션에 대한 기본 클래스를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9ab15-102">Provides the base class for a generic collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-103"><xref:System.Collections.ObjectModel.Collection%601> 클래스 생성된 된 형식 중 하나의 인스턴스를 만들어 즉시 사용할 수 있습니다는 수행 해야 하는 모든 컬렉션에 포함할 개체의 유형을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-103">The <xref:System.Collections.ObjectModel.Collection%601> class can be used immediately by creating an instance of one of its constructed types; all you have to do is specify the type of object to be contained in the collection.</span></span> <span data-ttu-id="9ab15-104">사용자 고유의 컬렉션 형식은 생성된 된 형식에서 파생 하거나에서 제네릭 컬렉션 형식을 파생 시킬 수는 또한는 <xref:System.Collections.ObjectModel.Collection%601> 클래스 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-104">In addition, you can derive your own collection type from any constructed type, or derive a generic collection type from the <xref:System.Collections.ObjectModel.Collection%601> class itself.</span></span>  
  
 <span data-ttu-id="9ab15-105"><xref:System.Collections.ObjectModel.Collection%601> 클래스는 해당 동작을 추가할 때 및 항목을 제거 하면, 또는 사용자 지정 컬렉션을 지우는 기존 항목의 값을 설정 하는 보호 된 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-105">The <xref:System.Collections.ObjectModel.Collection%601> class provides protected methods that can be used to customize its behavior when adding and removing items, clearing the collection, or setting the value of an existing item.</span></span>  
  
 <span data-ttu-id="9ab15-106">대부분의 <xref:System.Collections.ObjectModel.Collection%601> objectscan 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-106">Most <xref:System.Collections.ObjectModel.Collection%601> objectscan be modified.</span></span> <span data-ttu-id="9ab15-107">그러나를 <xref:System.Collections.ObjectModel.Collection%601> 개체는 읽기 전용으로 초기화 된 <xref:System.Collections.Generic.IList%601> 개체를 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-107">However, a <xref:System.Collections.ObjectModel.Collection%601> object that is initialized with a read-only <xref:System.Collections.Generic.IList%601> object cannot be modified.</span></span> <span data-ttu-id="9ab15-108">참조 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> 이 클래스의 읽기 전용 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-108">See <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> for a read-only version of this class.</span></span>  
  
 <span data-ttu-id="9ab15-109">이 컬렉션의 요소는 정수 인덱스를 사용 하 여 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-109">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="9ab15-110">이 컬렉션의 인덱스는 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-110">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="9ab15-111"><xref:System.Collections.ObjectModel.Collection%601> 허용 `null` 참조에 대 한 유효한 값 형식 및 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-111"><xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-112">이 섹션에는 두 코드 예제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-112">This section contains two code examples.</span></span> <span data-ttu-id="9ab15-113">첫 번째 예제는 여러 속성과 메서드를 보여 줍니다.는 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-113">The first example demonstrates several properties and methods of the <xref:System.Collections.ObjectModel.Collection%601> class.</span></span> <span data-ttu-id="9ab15-114">두 번째 예제에서 생성 된 형식의 컬렉션 클래스를 파생 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.Collection%601>, 및의 보호 된 메서드를 재정의 하는 방법을 <xref:System.Collections.ObjectModel.Collection%601> 사용자 지정 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-114">The second example shows how to derive a collection class from a constructed type of <xref:System.Collections.ObjectModel.Collection%601>, and how to override the protected methods of <xref:System.Collections.ObjectModel.Collection%601> to provide custom behavior.</span></span>  
  
 <span data-ttu-id="9ab15-115">예제 1</span><span class="sxs-lookup"><span data-stu-id="9ab15-115">Example 1</span></span>  
  
 <span data-ttu-id="9ab15-116">다음 코드 예제 대부분의 속성 및 메서드의 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-116">The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>.</span></span> <span data-ttu-id="9ab15-117">코드 예제에서는 문자열을 사용 하 여 컬렉션을 만듭니다는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 여러 문자열을 추가 하는 메서드 표시는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>는 문자열을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-117">The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings.</span></span> <span data-ttu-id="9ab15-118">이 예제에서는 사용 합니다 <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> 메서드는 문자열의 인덱스를 및 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 문자열 컬렉션에 있는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-118">The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection.</span></span> <span data-ttu-id="9ab15-119">사용 하 여 문자열을 삽입 하는 예제는 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 기본값을 사용 하는 메서드 및 검색 설정 문자열 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="9ab15-119">The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="9ab15-120">예제에서는 문자열 identity를 사용 하 여 문자열을 제거 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 메서드 및 인덱스를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ab15-120">The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method.</span></span> <span data-ttu-id="9ab15-121">마지막으로 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드는 컬렉션에서 모든 문자열을 지우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-121">Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.</span></span>  
  
 [!code-cpp[ObjectModel.Collection#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectModel.Collection/cpp/source.cpp#1)]
 [!code-csharp[ObjectModel.Collection#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.Collection/cs/source.cs#1)]
 [!code-vb[ObjectModel.Collection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.Collection/VB/source.vb#1)]  
  
 <span data-ttu-id="9ab15-122">예제 2</span><span class="sxs-lookup"><span data-stu-id="9ab15-122">Example 2</span></span>  
  
 <span data-ttu-id="9ab15-123">다음 코드 예제에는 컬렉션 클래스의 생성된 된 형식에서 파생 하는 방법을 보여 줍니다 합니다 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스 및 보호를 재정의 하는 방법 <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> 사용자 지정을 제공 하는 방법 에 대 한 동작을 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 설정에 대 한는 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="9ab15-123">The following code example shows how to derive a collection class from a constructed type of the <xref:System.Collections.ObjectModel.Collection%601> generic class, and how to override the protected <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, and <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.</span></span>  
  
 <span data-ttu-id="9ab15-124">이 예제에서 제공 하는 사용자 지정 동작은 한 `Changed` 각 보호 된 메서드의 끝에 발생 하는 알림 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-124">The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods.</span></span> <span data-ttu-id="9ab15-125">`Dinosaurs` 클래스는 상속 `Collection<string>` (`Collection(Of String)` Visual Basic의) 정의 `Changed` 를 사용 하는 경우는 `DinosaursChangedEventArgs` 이벤트 정보 및 변경의 종류를 식별 하는 열거형에 대 한 클래스.</span><span class="sxs-lookup"><span data-stu-id="9ab15-125">The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.</span></span>  
  
 <span data-ttu-id="9ab15-126">여러 속성 및 메서드를 호출 하는 코드 예제에서는 <xref:System.Collections.ObjectModel.Collection%601> 사용자 지정 이벤트를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-126">The code example calls several properties and methods of <xref:System.Collections.ObjectModel.Collection%601> to demonstrate the custom event.</span></span>  
  
 [!code-csharp[ObjectModel.CollectionInherited#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.CollectionInherited/cs/source.cs#1)]
 [!code-vb[ObjectModel.CollectionInherited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.CollectionInherited/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="9ab15-127">공용 정적 (<see langword="Shared" /> Visual Basic의)이 형식의 멤버는 스레드로부터 안전 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9ab15-127">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="9ab15-128">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9ab15-128">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="9ab15-129">
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 지원할 수 있습니다 여러 판독기 동시에 따라 컬렉션을 수정 되지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9ab15-129">A <see cref="T:System.Collections.ObjectModel.Collection`1" /> can support multiple readers concurrently, as long as the collection is not modified.</span>
      </span>
      <span data-ttu-id="9ab15-130">이 경우에 컬렉션을 열거 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9ab15-130">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="9ab15-131">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9ab15-131">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span>
      </span>
      <span data-ttu-id="9ab15-132">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9ab15-132">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <span data-ttu-id="9ab15-133">
        <para>이 기본 클래스는 쉽게 사용자 지정 컬렉션을 만드는 제공 됩니다. 구현자는 자체를 만드는 대신이 기본 클래스를 확장 하는 것이 좋습니다.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="9ab15-133">
          <para>This base class is provided to make it easier for implementers to create a custom collection. Implementers are encouraged to extend this base class instead of creating their own.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.Collections.Generic.ICollection`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-134">
            <see cref="T:System.Collections.ObjectModel.Collection`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-134">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-135">비어 있는 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-135">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class that is empty.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-136">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-136">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-137">다음 코드 예제 대부분의 속성 및 메서드의 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-137">The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>.</span></span> <span data-ttu-id="9ab15-138">코드 예제에서는 문자열의 컬렉션을 만듭니다는 <xref:System.Collections.ObjectModel.Collection%601.%23ctor> 생성자를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 여러 문자열을 추가 하는 메서드를 표시 합니다 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, 문자열을 나열 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-138">The code example creates a collection of strings with the <xref:System.Collections.ObjectModel.Collection%601.%23ctor> constructor, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings.</span></span> <span data-ttu-id="9ab15-139">이 예제에서는 사용 합니다 <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> 메서드는 문자열의 인덱스를 및 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 문자열 컬렉션에 있는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-139">The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection.</span></span> <span data-ttu-id="9ab15-140">사용 하 여 문자열을 삽입 하는 예제는 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 기본값을 사용 하는 메서드 및 검색 설정 문자열 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="9ab15-140">The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="9ab15-141">예제에서는 문자열 identity를 사용 하 여 문자열을 제거 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 메서드 및 인덱스를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ab15-141">The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method.</span></span> <span data-ttu-id="9ab15-142">마지막으로 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드는 컬렉션에서 모든 문자열을 지우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-142">Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.</span></span>  
  
 [!code-cpp[ObjectModel.Collection#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectModel.Collection/cpp/source.cpp#1)]
 [!code-csharp[ObjectModel.Collection#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.Collection/cs/source.cs#1)]
 [!code-vb[ObjectModel.Collection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.Collection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection (System.Collections.Generic.IList&lt;T&gt; list);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IList`1&lt;!T&gt; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (list As IList(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection(System::Collections::Generic::IList&lt;T&gt; ^ list);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.Collection&lt;'T&gt; : System.Collections.Generic.IList&lt;'T&gt; -&gt; System.Collections.ObjectModel.Collection&lt;'T&gt;" Usage="new System.Collections.ObjectModel.Collection&lt;'T&gt; list" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.IList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="list">
          <span data-ttu-id="9ab15-143">새 컬렉션이 래핑하는 목록입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-143">The list that is wrapped by the new collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-144">
            <see cref="T:System.Collections.ObjectModel.Collection`1" /> 클래스의 새 인스턴스를 지정된 목록의 래퍼로 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-144">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.Collection`1" /> class as a wrapper for the specified list.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-145">목록 요소의 복사 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-145">The elements of the list are not copied.</span></span> <span data-ttu-id="9ab15-146">목록 요소의 후속 변경 내용을 통해 표시 되도록 목록 컬렉션에 의해 래핑되는 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-146">The list is wrapped by the collection, so that subsequent changes to the elements of the list are visible through the <xref:System.Collections.ObjectModel.Collection%601>.</span></span>  
  
 <span data-ttu-id="9ab15-147">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-147">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9ab15-148">
            <paramref name="list" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-148">
              <paramref name="list" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(T item);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; unit&#xA;override this.Add : 'T -&gt; unit" Usage="collection.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="9ab15-149">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 끝에 추가할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-149">The object to be added to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
          <span data-ttu-id="9ab15-150">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-150">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-151">개체를 <see cref="T:System.Collections.ObjectModel.Collection`1" />의 끝 부분에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-151">Adds an object to the end of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-152"><xref:System.Collections.ObjectModel.Collection%601> 허용 `null` 참조에 대 한 유효한 값 형식 및 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-152"><xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="9ab15-153">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-153">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-154">다음 코드 예제 대부분의 속성 및 메서드의 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-154">The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>.</span></span> <span data-ttu-id="9ab15-155">코드 예제에서는 문자열을 사용 하 여 컬렉션을 만듭니다는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 여러 문자열을 추가 하는 메서드 표시는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>는 문자열을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-155">The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings.</span></span> <span data-ttu-id="9ab15-156">이 예제에서는 사용 합니다 <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> 메서드는 문자열의 인덱스를 및 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 문자열 컬렉션에 있는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-156">The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection.</span></span> <span data-ttu-id="9ab15-157">사용 하 여 문자열을 삽입 하는 예제는 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 기본값을 사용 하는 메서드 및 검색 설정 문자열 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="9ab15-157">The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="9ab15-158">예제에서는 문자열 identity를 사용 하 여 문자열을 제거 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 메서드 및 인덱스를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ab15-158">The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method.</span></span> <span data-ttu-id="9ab15-159">마지막으로 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드는 컬렉션에서 모든 문자열을 지우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-159">Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.</span></span>  
  
 [!code-cpp[ObjectModel.Collection#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectModel.Collection/cpp/source.cpp#1)]
 [!code-csharp[ObjectModel.Collection#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.Collection/cs/source.cs#1)]
 [!code-vb[ObjectModel.Collection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.Collection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)" />
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" />
        <altmember cref="P:System.Collections.ObjectModel.Collection`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="collection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-160">
            <see cref="T:System.Collections.ObjectModel.Collection\`1" />에서 모든 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-160">Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-161"><xref:System.Collections.ObjectModel.Collection%601.Count%2A> 가 0으로 설정 하 고 컬렉션의 요소에서 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-161"><xref:System.Collections.ObjectModel.Collection%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="9ab15-162">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-162">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-163">다음 코드 예제 대부분의 속성 및 메서드의 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-163">The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>.</span></span> <span data-ttu-id="9ab15-164">코드 예제에서는 문자열을 사용 하 여 컬렉션을 만듭니다는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 여러 문자열을 추가 하는 메서드 표시는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>는 문자열을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-164">The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings.</span></span> <span data-ttu-id="9ab15-165">이 예제에서는 사용 합니다 <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> 메서드는 문자열의 인덱스를 및 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 문자열 컬렉션에 있는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-165">The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection.</span></span> <span data-ttu-id="9ab15-166">사용 하 여 문자열을 삽입 하는 예제는 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 기본값을 사용 하는 메서드 및 검색 설정 문자열 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="9ab15-166">The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="9ab15-167">예제에서는 문자열 identity를 사용 하 여 문자열을 제거 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 메서드 및 인덱스를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ab15-167">The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method.</span></span> <span data-ttu-id="9ab15-168">마지막으로 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드는 컬렉션에서 모든 문자열을 지우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-168">Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.</span></span>  
  
 [!code-cpp[ObjectModel.Collection#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectModel.Collection/cpp/source.cpp#1)]
 [!code-csharp[ObjectModel.Collection#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.Collection/cs/source.cs#1)]
 [!code-vb[ObjectModel.Collection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.Collection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="9ab15-169">
            <para>파생된 클래스에서 재정의할 수 <see cref="M:System.Collections.ObjectModel.Collection`1.ClearItems" /> 이 메서드의 동작을 변경 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-169">
              <para>Derived classes can override <see cref="M:System.Collections.ObjectModel.Collection`1.ClearItems" /> to change the behavior of this method.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Collections.ObjectModel.Collection`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected virtual void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearItems();" />
      <MemberSignature Language="F#" Value="abstract member ClearItems : unit -&gt; unit&#xA;override this.ClearItems : unit -&gt; unit" Usage="collection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-170">
            <see cref="T:System.Collections.ObjectModel.Collection\`1" />에서 모든 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-170">Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-171"><xref:System.Collections.ObjectModel.Collection%601.Count%2A> 가 0으로 설정 하 고 컬렉션의 요소에서 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-171"><xref:System.Collections.ObjectModel.Collection%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="9ab15-172">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-172">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-173">다음 코드 예제에는 컬렉션 클래스의 생성된 된 형식에서 파생 하는 방법을 보여 줍니다 합니다 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스 및 보호를 재정의 하는 방법 <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> 사용자 지정을 제공 하는 방법 에 대 한 동작을 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 설정에 대 한는 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="9ab15-173">The following code example shows how to derive a collection class from a constructed type of the <xref:System.Collections.ObjectModel.Collection%601> generic class, and how to override the protected <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, and <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.</span></span>  
  
 <span data-ttu-id="9ab15-174">이 예제에서 제공 하는 사용자 지정 동작은 한 `Changed` 각 보호 된 메서드의 끝에 발생 하는 알림 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-174">The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods.</span></span> <span data-ttu-id="9ab15-175">`Dinosaurs` 클래스는 상속 `Collection<string>` (`Collection(Of String)` Visual Basic의) 정의 `Changed` 를 사용 하는 경우는 `DinosaursChangedEventArgs` 이벤트 정보 및 변경의 종류를 식별 하는 열거형에 대 한 클래스.</span><span class="sxs-lookup"><span data-stu-id="9ab15-175">The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.</span></span>  
  
 <span data-ttu-id="9ab15-176">여러 속성 및 메서드를 호출 하는 코드 예제에서는 <xref:System.Collections.ObjectModel.Collection%601> 사용자 지정 이벤트를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-176">The code example calls several properties and methods of <xref:System.Collections.ObjectModel.Collection%601> to demonstrate the custom event.</span></span>  
  
 [!code-csharp[ObjectModel.CollectionInherited#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.CollectionInherited/cs/source.cs#1)]
 [!code-vb[ObjectModel.CollectionInherited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.CollectionInherited/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="9ab15-177">
            <para>파생된 클래스의 동작을 변경 하려면이 메서드를 재정의할 수는 <see cref="M:System.Collections.ObjectModel.Collection`1.Clear" /> 메서드.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-177">
              <para>Derived classes can override this method to change the behavior of the <see cref="M:System.Collections.ObjectModel.Collection`1.Clear" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="collection.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="9ab15-178">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-178">The object to locate in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
          <span data-ttu-id="9ab15-179">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-179">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-180">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />에 요소가 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-180">Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9ab15-181">
            <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.ObjectModel.Collection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-181">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.ObjectModel.Collection`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-182">경우는 <xref:System.Collections.ObjectModel.Collection%601> 기본 같음 비교자를 사용 하 여 같은지 여부를 확인 하는이 메서드, 기본 생성자를 사용 하 여 개체를 만들 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-182">If the <xref:System.Collections.ObjectModel.Collection%601> object is created using the default constructor, this method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span> <span data-ttu-id="9ab15-183">경우 형식 `T` 를 구현 하지 않습니다 합니다 <xref:System.IEquatable%601> 인터페이스는 <xref:System.Object.Equals%2A> 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-183">If type `T` does not implement the <xref:System.IEquatable%601> interface, the <xref:System.Object.Equals%2A> method is used.</span></span>  
  
 <span data-ttu-id="9ab15-184">컬렉션 개체를 전달 하 여 만들어지는 경우는 <xref:System.Collections.Generic.IList%601> 개체 생성자에는 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 메서드에 의해 결정 됩니다는 <xref:System.Collections.Generic.IEqualityComparer%601> 에서 사용 되는 인터페이스 <xref:System.Collections.Generic.IList%601> 개체.</span><span class="sxs-lookup"><span data-stu-id="9ab15-184">If the Collection object is created by passing an <xref:System.Collections.Generic.IList%601> object to the constructor, the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method will be determined by the <xref:System.Collections.Generic.IEqualityComparer%601> interface used by that <xref:System.Collections.Generic.IList%601> object.</span></span>  
  
 <span data-ttu-id="9ab15-185">이 메서드는; 선형 검색을 수행합니다. 따라서 평균 실행 시간에 비례 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-185">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span> <span data-ttu-id="9ab15-186">즉,이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-186">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="collection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="9ab15-187">
            <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ObjectModel.Collection`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-187">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
          <span data-ttu-id="9ab15-188">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-188">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="9ab15-189">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-189">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-190">대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.ObjectModel.Collection`1" />을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-190">Copies the entire <see cref="T:System.Collections.ObjectModel.Collection`1" /> to a compatible one-dimensional <see cref="T:System.Array" />, starting at the specified index of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-191">이 메서드는 <xref:System.Array.Copy%2A?displayProperty=nameWithType> 요소를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-191">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="9ab15-192">요소에 복사 됩니다는 <xref:System.Array> 열거자가 반복 나타나는 순서에서는 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-192">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ObjectModel.Collection%601>.</span></span>  
  
 <span data-ttu-id="9ab15-193">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-193">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9ab15-194">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-194">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-195">
            <paramref name="index" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-195">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9ab15-196">소스 <see cref="T:System.Collections.ObjectModel.Collection`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-196">The number of elements in the source <see cref="T:System.Collections.ObjectModel.Collection`1" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.Collection`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.ObjectModel.Collection&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-197">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />에 실제로 포함된 요소의 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-197">Gets the number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ab15-198">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />에 실제로 포함된 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-198">The number of elements actually contained in the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-199">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-199">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-200">다음 코드 예제 대부분의 속성 및 메서드의 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-200">The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>.</span></span> <span data-ttu-id="9ab15-201">코드 예제에서는 문자열을 사용 하 여 컬렉션을 만듭니다는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 여러 문자열을 추가 하는 메서드 표시는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>는 문자열을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-201">The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings.</span></span> <span data-ttu-id="9ab15-202">이 예제에서는 사용 합니다 <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> 메서드는 문자열의 인덱스를 및 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 문자열 컬렉션에 있는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-202">The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection.</span></span> <span data-ttu-id="9ab15-203">사용 하 여 문자열을 삽입 하는 예제는 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 기본값을 사용 하는 메서드 및 검색 설정 문자열 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="9ab15-203">The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="9ab15-204">예제에서는 문자열 identity를 사용 하 여 문자열을 제거 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 메서드 및 인덱스를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ab15-204">The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method.</span></span> <span data-ttu-id="9ab15-205">마지막으로 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드는 컬렉션에서 모든 문자열을 지우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-205">Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.</span></span>  
  
 [!code-cpp[ObjectModel.Collection#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectModel.Collection/cpp/source.cpp#1)]
 [!code-csharp[ObjectModel.Collection#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.Collection/cs/source.cs#1)]
 [!code-vb[ObjectModel.Collection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.Collection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="collection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-206">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />를 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-206">Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9ab15-207">
            <see cref="T:System.Collections.Generic.IEnumerator`1" />에 대한 <see cref="T:System.Collections.ObjectModel.Collection`1" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-207">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-208">합니다 `foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서) 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-208">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="9ab15-209">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-209">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="9ab15-210">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-210">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="9ab15-211">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-211">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="9ab15-212">이 위치에서 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-212">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="9ab15-213">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-213">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="9ab15-214"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>는 <xref:System.Collections.IEnumerator.MoveNext%2A>가 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-214"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="9ab15-215"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-215"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="9ab15-216">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-216">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="9ab15-217">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-217">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="9ab15-218">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-218">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="9ab15-219"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>를 컬렉션의 첫 번째 요소로 다시 설정할 수 없으므로 대신 새 열거자 인스턴스를 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-219">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="9ab15-220">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-220">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="9ab15-221">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-221">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="9ab15-222">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-222">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="9ab15-223">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-223">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="9ab15-224">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-224">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="9ab15-225">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-225">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="9ab15-226">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-226">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="collection.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="9ab15-227">
            <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-227">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="9ab15-228">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-228">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-229">지정된 개체를 검색하고, 전체 <see cref="T:System.Collections.ObjectModel.Collection`1" />에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-229">Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9ab15-230">
            <paramref name="item" />가 있으면 전체 <see cref="T:System.Collections.ObjectModel.Collection`1" />에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-230">The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.ObjectModel.Collection`1" />, if found; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-231"><xref:System.Collections.ObjectModel.Collection%601> 검색은 앞으로 첫 번째 요소부터 마지막 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-231">The <xref:System.Collections.ObjectModel.Collection%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="9ab15-232">기본 같음 비교자를 사용 하 여 같은지 여부를 확인 하는이 메서드가 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-232">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="9ab15-233">이 메서드는; 선형 검색을 수행합니다. 따라서 평균 실행 시간에 비례 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-233">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span> <span data-ttu-id="9ab15-234">즉,이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-234">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-235">다음 코드 예제 대부분의 속성 및 메서드의 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-235">The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>.</span></span> <span data-ttu-id="9ab15-236">코드 예제에서는 문자열을 사용 하 여 컬렉션을 만듭니다는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 여러 문자열을 추가 하는 메서드 표시는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>는 문자열을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-236">The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings.</span></span> <span data-ttu-id="9ab15-237">이 예제에서는 사용 합니다 <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> 메서드는 문자열의 인덱스를 및 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 문자열 컬렉션에 있는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-237">The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection.</span></span> <span data-ttu-id="9ab15-238">사용 하 여 문자열을 삽입 하는 예제는 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 기본값을 사용 하는 메서드 및 검색 설정 문자열 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="9ab15-238">The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="9ab15-239">예제에서는 문자열 identity를 사용 하 여 문자열을 제거 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 메서드 및 인덱스를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ab15-239">The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method.</span></span> <span data-ttu-id="9ab15-240">마지막으로 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드는 컬렉션에서 모든 문자열을 지우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-240">Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.</span></span>  
  
 [!code-cpp[ObjectModel.Collection#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectModel.Collection/cpp/source.cpp#1)]
 [!code-csharp[ObjectModel.Collection#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.Collection/cs/source.cs#1)]
 [!code-vb[ObjectModel.Collection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.Collection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; unit&#xA;override this.Insert : int * 'T -&gt; unit" Usage="collection.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9ab15-241">
            <c>항목</c>이 삽입될 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-241">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="9ab15-242">삽입할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-242">The object to insert.</span>
          </span>
          <span data-ttu-id="9ab15-243">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-243">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-244">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 지정된 인덱스에 요소를 삽입합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-244">Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-245"><xref:System.Collections.ObjectModel.Collection%601> 허용 `null` 참조에 대 한 유효한 값 형식 및 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-245"><xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="9ab15-246">하는 경우 `index` 값과 같음 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>를 `item` 끝에 추가 됩니다 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-246">If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of <xref:System.Collections.ObjectModel.Collection%601>.</span></span>  
  
 <span data-ttu-id="9ab15-247">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-247">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-248">
            <paramref name="index" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-248">
              <paramref name="index" /> is less than zero.</span>
          </span>
          <span data-ttu-id="9ab15-249">-또는-  <paramref name="index" />가 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-249">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="9ab15-250">
            <para>파생된 클래스에서 재정의할 수 <see cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)" /> 이 메서드의 동작을 변경 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-250">
              <para>Derived classes can override <see cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)" /> to change the behavior of this method.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected virtual void InsertItem (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InsertItem(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InsertItem (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InsertItem(int index, T item);" />
      <MemberSignature Language="F#" Value="abstract member InsertItem : int * 'T -&gt; unit&#xA;override this.InsertItem : int * 'T -&gt; unit" Usage="collection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9ab15-251">
            <c>항목</c>이 삽입될 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-251">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="9ab15-252">삽입할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-252">The object to insert.</span>
          </span>
          <span data-ttu-id="9ab15-253">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-253">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-254">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 지정된 인덱스에 요소를 삽입합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-254">Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-255"><xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A> 파생된 클래스에서 재정의 될 것입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-255">The <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A> is meant to be overridden in a derived class.</span></span> <span data-ttu-id="9ab15-256">항목을 삽입 하는 public 메서드를 <xref:System.Collections.ObjectModel.Collection%601>를 참조 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-256">For a public method to insert an item in the <xref:System.Collections.ObjectModel.Collection%601>, see <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>.</span></span>  
  
 <span data-ttu-id="9ab15-257"><xref:System.Collections.ObjectModel.Collection%601> 허용 `null` 참조에 대 한 유효한 값 형식 및 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-257"><xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="9ab15-258">하는 경우 `index` 값과 같음 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>를 `item` 끝에 추가 됩니다 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-258">If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of <xref:System.Collections.ObjectModel.Collection%601>.</span></span>  
  
 <span data-ttu-id="9ab15-259">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-259">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-260">다음 코드 예제에는 컬렉션 클래스의 생성된 된 형식에서 파생 하는 방법을 보여 줍니다 합니다 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스 및 보호를 재정의 하는 방법 <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> 사용자 지정을 제공 하는 방법 에 대 한 동작을 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 설정에 대 한는 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="9ab15-260">The following code example shows how to derive a collection class from a constructed type of the <xref:System.Collections.ObjectModel.Collection%601> generic class, and how to override the protected <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, and <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.</span></span>  
  
 <span data-ttu-id="9ab15-261">이 예제에서 제공 하는 사용자 지정 동작은 한 `Changed` 각 보호 된 메서드의 끝에 발생 하는 알림 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-261">The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods.</span></span> <span data-ttu-id="9ab15-262">`Dinosaurs` 클래스는 상속 `Collection<string>` (`Collection(Of String)` Visual Basic의) 정의 `Changed` 를 사용 하는 경우는 `DinosaursChangedEventArgs` 이벤트 정보 및 변경의 종류를 식별 하는 열거형에 대 한 클래스.</span><span class="sxs-lookup"><span data-stu-id="9ab15-262">The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.</span></span>  
  
 <span data-ttu-id="9ab15-263">여러 속성 및 메서드를 호출 하는 코드 예제에서는 <xref:System.Collections.ObjectModel.Collection%601> 사용자 지정 이벤트를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-263">The code example calls several properties and methods of <xref:System.Collections.ObjectModel.Collection%601> to demonstrate the custom event.</span></span>  
  
 [!code-csharp[ObjectModel.CollectionInherited#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.CollectionInherited/cs/source.cs#1)]
 [!code-vb[ObjectModel.CollectionInherited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.CollectionInherited/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-264">
            <paramref name="index" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-264">
              <paramref name="index" /> is less than zero.</span>
          </span>
          <span data-ttu-id="9ab15-265">-또는-  <paramref name="index" />가 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-265">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T with get, set" Usage="System.Collections.ObjectModel.Collection&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9ab15-266">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-266">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-267">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-267">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ab15-268">지정한 인덱스의 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-268">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-269"><xref:System.Collections.ObjectModel.Collection%601> 허용 `null` 참조에 대 한 유효한 값 형식 및 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-269"><xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="9ab15-270">이 속성은 `myCollection[index]` 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-270">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="9ab15-271">C# 언어 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-271">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.</span></span> <span data-ttu-id="9ab15-272">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.ObjectModel.Collection%601.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-272">Visual Basic implements <xref:System.Collections.ObjectModel.Collection%601.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="9ab15-273">이 속성의 값을 검색 하는 것은 O(1) 작업; O(1) 작업 이기도 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-273">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-274">다음 코드 예제 대부분의 속성 및 메서드의 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-274">The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>.</span></span> <span data-ttu-id="9ab15-275">코드 예제에서는 문자열을 사용 하 여 컬렉션을 만듭니다는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 여러 문자열을 추가 하는 메서드 표시는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>는 문자열을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-275">The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings.</span></span> <span data-ttu-id="9ab15-276">이 예제에서는 사용 합니다 <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> 메서드는 문자열의 인덱스를 및 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 문자열 컬렉션에 있는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-276">The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection.</span></span> <span data-ttu-id="9ab15-277">사용 하 여 문자열을 삽입 하는 예제는 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 기본값을 사용 하는 메서드 및 검색 설정 문자열 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="9ab15-277">The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="9ab15-278">예제에서는 문자열 identity를 사용 하 여 문자열을 제거 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 메서드 및 인덱스를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ab15-278">The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method.</span></span> <span data-ttu-id="9ab15-279">마지막으로 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드는 컬렉션에서 모든 문자열을 지우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-279">Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.</span></span>  
  
 [!code-cpp[ObjectModel.Collection#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectModel.Collection/cpp/source.cpp#1)]
 [!code-csharp[ObjectModel.Collection#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.Collection/cs/source.cs#1)]
 [!code-vb[ObjectModel.Collection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.Collection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-280">
            <paramref name="index" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-280">
              <paramref name="index" /> is less than zero.</span>
          </span>
          <span data-ttu-id="9ab15-281">-또는-  <paramref name="index" />가 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-281">-or-  <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="9ab15-282">
            <para>파생된 클래스에서 재정의할 수 <see cref="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)" /> 이 속성을 설정 하는 동작을 변경 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-282">
              <para>Derived classes can override <see cref="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)" /> to change the behavior of setting this property.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Collections.ObjectModel.Collection`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IList&lt;T&gt; Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!T&gt; Items" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.Collection`1.Items" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Items As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IList&lt;T&gt; ^ Items { System::Collections::Generic::IList&lt;T&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Collections.Generic.IList&lt;'T&gt;" Usage="System.Collections.ObjectModel.Collection&lt;'T&gt;.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-283">
            <see cref="T:System.Collections.Generic.IList`1" />을 둘러싸는 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 래퍼를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-283">Gets a <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ab15-284">
            <see cref="T:System.Collections.Generic.IList`1" />을 둘러싸는 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 래퍼입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-284">A <see cref="T:System.Collections.Generic.IList`1" /> wrapper around the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-285">기능을 제공 하는 래퍼를 <xref:System.Collections.Generic.IList%601> 클래스와의 모든 요소를 노출 합니다 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-285">The wrapper provides the functionality of the <xref:System.Collections.Generic.IList%601> class and exposes all the elements of the <xref:System.Collections.ObjectModel.Collection%601>.</span></span>  
  
 <span data-ttu-id="9ab15-286">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-286">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(T item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T -&gt; bool&#xA;override this.Remove : 'T -&gt; bool" Usage="collection.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="9ab15-287">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />에서 제거할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-287">The object to remove from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
          <span data-ttu-id="9ab15-288">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-288">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-289">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-289">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9ab15-290">
            <paramref name="item" />이 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-290">
              <see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9ab15-291">이 메서드는 <see langword="false" />가 원래 <paramref name="item" />에 없는 경우에도 <see cref="T:System.Collections.ObjectModel.Collection`1" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-291">This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the original <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-292">기본 같음 비교자를 사용 하 여 같은지 여부를 확인 하는이 메서드가 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> 에 대 한 `T`, 목록에서 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-292">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="9ab15-293">이 메서드는; 선형 검색을 수행합니다. 따라서 평균 실행 시간에 비례 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-293">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span> <span data-ttu-id="9ab15-294">즉,이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-294">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-295">다음 코드 예제 대부분의 속성 및 메서드의 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-295">The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>.</span></span> <span data-ttu-id="9ab15-296">코드 예제에서는 문자열을 사용 하 여 컬렉션을 만듭니다는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 여러 문자열을 추가 하는 메서드 표시는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>는 문자열을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-296">The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings.</span></span> <span data-ttu-id="9ab15-297">이 예제에서는 사용 합니다 <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> 메서드는 문자열의 인덱스를 및 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 문자열 컬렉션에 있는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-297">The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection.</span></span> <span data-ttu-id="9ab15-298">사용 하 여 문자열을 삽입 하는 예제는 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 기본값을 사용 하는 메서드 및 검색 설정 문자열 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="9ab15-298">The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="9ab15-299">예제에서는 문자열 identity를 사용 하 여 문자열을 제거 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 메서드 및 인덱스를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ab15-299">The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method.</span></span> <span data-ttu-id="9ab15-300">마지막으로 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드는 컬렉션에서 모든 문자열을 지우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-300">Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.</span></span>  
  
 [!code-cpp[ObjectModel.Collection#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectModel.Collection/cpp/source.cpp#1)]
 [!code-csharp[ObjectModel.Collection#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.Collection/cs/source.cs#1)]
 [!code-vb[ObjectModel.Collection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.Collection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="9ab15-301">
            <para>파생된 클래스에서 재정의할 수 <see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" /> 이 메서드의 동작을 변경 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-301">
              <para>Derived classes can override <see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" /> to change the behavior of this method.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="collection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9ab15-302">제거할 요소의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-302">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-303">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 지정된 인덱스에 있는 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-303">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-304">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-304">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-305">다음 코드 예제 대부분의 속성 및 메서드의 <xref:System.Collections.ObjectModel.Collection%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-305">The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>.</span></span> <span data-ttu-id="9ab15-306">코드 예제에서는 문자열을 사용 하 여 컬렉션을 만듭니다는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 여러 문자열을 추가 하는 메서드 표시는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>는 문자열을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-306">The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings.</span></span> <span data-ttu-id="9ab15-307">이 예제에서는 사용 합니다 <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> 메서드는 문자열의 인덱스를 및 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> 문자열 컬렉션에 있는지 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-307">The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection.</span></span> <span data-ttu-id="9ab15-308">사용 하 여 문자열을 삽입 하는 예제는 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 기본값을 사용 하는 메서드 및 검색 설정 문자열 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="9ab15-308">The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="9ab15-309">예제에서는 문자열 identity를 사용 하 여 문자열을 제거 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 메서드 및 인덱스를 사용 하 여는 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9ab15-309">The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method.</span></span> <span data-ttu-id="9ab15-310">마지막으로 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드는 컬렉션에서 모든 문자열을 지우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-310">Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.</span></span>  
  
 [!code-cpp[ObjectModel.Collection#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectModel.Collection/cpp/source.cpp#1)]
 [!code-csharp[ObjectModel.Collection#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.Collection/cs/source.cs#1)]
 [!code-vb[ObjectModel.Collection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.Collection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-311">
            <paramref name="index" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-311">
              <paramref name="index" /> is less than zero.</span>
          </span>
          <span data-ttu-id="9ab15-312">-또는-  <paramref name="index" />가 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-312">-or-  <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="9ab15-313">
            <para>파생된 클래스에서 재정의할 수 <see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" /> 이 메서드의 동작을 변경 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-313">
              <para>Derived classes can override <see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" /> to change the behavior of this method.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected virtual void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveItem : int -&gt; unit&#xA;override this.RemoveItem : int -&gt; unit" Usage="collection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9ab15-314">제거할 요소의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-314">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-315">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 지정된 인덱스에 있는 요소를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-315">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-316">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-316">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-317">다음 코드 예제에는 컬렉션 클래스의 생성된 된 형식에서 파생 하는 방법을 보여 줍니다 합니다 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스 및 보호를 재정의 하는 방법 <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> 사용자 지정을 제공 하는 방법 에 대 한 동작을 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 설정에 대 한는 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="9ab15-317">The following code example shows how to derive a collection class from a constructed type of the <xref:System.Collections.ObjectModel.Collection%601> generic class, and how to override the protected <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, and <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.</span></span>  
  
 <span data-ttu-id="9ab15-318">이 예제에서 제공 하는 사용자 지정 동작은 한 `Changed` 각 보호 된 메서드의 끝에 발생 하는 알림 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-318">The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods.</span></span> <span data-ttu-id="9ab15-319">`Dinosaurs` 클래스는 상속 `Collection<string>` (`Collection(Of String)` Visual Basic의) 정의 `Changed` 를 사용 하는 경우는 `DinosaursChangedEventArgs` 이벤트 정보 및 변경의 종류를 식별 하는 열거형에 대 한 클래스.</span><span class="sxs-lookup"><span data-stu-id="9ab15-319">The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.</span></span>  
  
 <span data-ttu-id="9ab15-320">여러 속성 및 메서드를 호출 하는 코드 예제에서는 <xref:System.Collections.ObjectModel.Collection%601> 사용자 지정 이벤트를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-320">The code example calls several properties and methods of <xref:System.Collections.ObjectModel.Collection%601> to demonstrate the custom event.</span></span>  
  
 [!code-csharp[ObjectModel.CollectionInherited#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.CollectionInherited/cs/source.cs#1)]
 [!code-vb[ObjectModel.CollectionInherited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.CollectionInherited/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-321">
            <paramref name="index" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-321">
              <paramref name="index" /> is less than zero.</span>
          </span>
          <span data-ttu-id="9ab15-322">-또는-  <paramref name="index" />가 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-322">-or-  <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected virtual void SetItem (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetItem(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetItem (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetItem(int index, T item);" />
      <MemberSignature Language="F#" Value="abstract member SetItem : int * 'T -&gt; unit&#xA;override this.SetItem : int * 'T -&gt; unit" Usage="collection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9ab15-323">바꿀 요소의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-323">The zero-based index of the element to replace.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="9ab15-324">지정한 인덱스에 있는 요소의 새 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-324">The new value for the element at the specified index.</span>
          </span>
          <span data-ttu-id="9ab15-325">참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-325">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-326">지정한 인덱스에 있는 요소를 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-326">Replaces the element at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-327"><xref:System.Collections.ObjectModel.Collection%601> 허용 `null` 참조에 대 한 유효한 값 형식 및 중복 요소를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-327"><xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="9ab15-328">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-328">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9ab15-329">다음 코드 예제에는 컬렉션 클래스의 생성된 된 형식에서 파생 하는 방법을 보여 줍니다 합니다 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스 및 보호를 재정의 하는 방법 <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>를 <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> 사용자 지정을 제공 하는 방법 에 대 한 동작을 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 설정에 대 한는 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="9ab15-329">The following code example shows how to derive a collection class from a constructed type of the <xref:System.Collections.ObjectModel.Collection%601> generic class, and how to override the protected <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, and <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.</span></span>  
  
 <span data-ttu-id="9ab15-330">이 예제에서 제공 하는 사용자 지정 동작은 한 `Changed` 각 보호 된 메서드의 끝에 발생 하는 알림 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-330">The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods.</span></span> <span data-ttu-id="9ab15-331">`Dinosaurs` 클래스는 상속 `Collection<string>` (`Collection(Of String)` Visual Basic의) 정의 `Changed` 를 사용 하는 경우는 `DinosaursChangedEventArgs` 이벤트 정보 및 변경의 종류를 식별 하는 열거형에 대 한 클래스.</span><span class="sxs-lookup"><span data-stu-id="9ab15-331">The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.</span></span>  
  
 <span data-ttu-id="9ab15-332">여러 속성 및 메서드를 호출 하는 코드 예제에서는 <xref:System.Collections.ObjectModel.Collection%601> 사용자 지정 이벤트를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-332">The code example calls several properties and methods of <xref:System.Collections.ObjectModel.Collection%601> to demonstrate the custom event.</span></span>  
  
 [!code-csharp[ObjectModel.CollectionInherited#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectModel.CollectionInherited/cs/source.cs#1)]
 [!code-vb[ObjectModel.CollectionInherited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectModel.CollectionInherited/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-333">
            <paramref name="index" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-333">
              <paramref name="index" /> is less than zero.</span>
          </span>
          <span data-ttu-id="9ab15-334">-또는-  <paramref name="index" />가 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-334">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)" />
        <altmember cref="P:System.Collections.ObjectModel.Collection`1.Items" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ObjectModel.Collection&lt;'T&gt;.System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-335">
            <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-335">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ab15-336">
            <see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-336">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9ab15-337">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-337">In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-338">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-338">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="9ab15-339">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 되 면 읽기 전용 컬렉션에 이러한 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-339">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="9ab15-340">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-340">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="9ab15-341">
            <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-341">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="9ab15-342">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-342">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="9ab15-343">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-343">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-344">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-344">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="9ab15-345">경우는 원본의 유형을 <xref:System.Collections.ICollection> 대상의 형식으로 자동 캐스팅할 수 없는 `array`, 제네릭이 아닌 구현은 <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>제네릭 구현은 throw 하는 반면, <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-345">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="9ab15-346">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-346">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9ab15-347">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-347">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-348">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-348">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9ab15-349">
            <paramref name="array" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-349">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9ab15-350">-또는-  <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-350">-or-  <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="9ab15-351">-또는-  소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-351">-or-  The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="9ab15-352">-또는-  소스 <see cref="T:System.Collections.ICollection" /> 형식을 대상 <paramref name="array" /> 형식으로 자동 캐스팅할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-352">-or-  The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ObjectModel.Collection&lt;'T&gt;.System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-353">
            <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-353">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ab15-354">
            <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-354">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9ab15-355">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-355">In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-356">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-356">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="9ab15-357">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-357">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="9ab15-358">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-358">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="9ab15-359">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-359">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="9ab15-360"><xref:System.Collections.ICollection.SyncRoot%2A> 에 대 한 액세스를 동기화 할 수 있는 개체를 반환 합니다 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-360"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="9ab15-361">동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-361">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="9ab15-362">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-362">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ObjectModel.Collection&lt;'T&gt;.System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-363">
            <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-363">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ab15-364">
            <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-364">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="9ab15-365">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-365">In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-366">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-366">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="9ab15-367">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-367">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="9ab15-368">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-368">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="9ab15-369">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-369">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="9ab15-370"><xref:System.Collections.ICollection.SyncRoot%2A> 에 대 한 액세스를 동기화 할 수 있는 개체를 반환 합니다 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-370"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="9ab15-371">동기화는 모든 스레드에서 컬렉션에 액세스 하기 전에이 개체를 잠그는 경우에 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-371">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="9ab15-372">다음 코드의 사용을 보여 줍니다.는 <xref:System.Collections.ICollection.SyncRoot%2A> C#, c + + 및 Visual Basic에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-372">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="9ab15-373">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-373">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-374">컬렉션을 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-374">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9ab15-375">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-375">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-376">합니다 `foreach` C# 언어의 (`for each` c + +에서는 `For Each` Visual basic에서) 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-376">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="9ab15-377">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-377">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="9ab15-378">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-378">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="9ab15-379">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-379">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="9ab15-380"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-380"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="9ab15-381">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-381">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="9ab15-382">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-382">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="9ab15-383"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-383"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="9ab15-384"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-384"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="9ab15-385">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-385">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="9ab15-386">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-386">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="9ab15-387">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-387">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="9ab15-388"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-388">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="9ab15-389">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-389">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="9ab15-390">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-390">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="9ab15-391">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-391">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="9ab15-392">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-392">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="9ab15-393">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-393">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="9ab15-394">컬렉션의 기본 구현은 <xref:System.Collections.Generic?displayProperty=nameWithType> 동기화 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-394">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="9ab15-395">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-395">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9ab15-396">
            <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-396">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-397">
            <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-397">Adds an item to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9ab15-398">새 요소가 삽입된 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-398">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-399">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-399">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9ab15-400">
            <paramref name="value" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-400">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9ab15-401">
            <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-401">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-402">
            <see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-402">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9ab15-403">
            <see cref="T:System.Object" />가 <see cref="T:System.Collections.IList" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-403">
              <see langword="true" /> if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-404">이 메서드를 확인 하 여 일치 여부를 확인 하는지 여부를 `value` 유형의 `T` (또는 null)를 호출 하 고 <xref:System.Collections.ObjectModel.Collection%601.Contains%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-404">This method determines equality by first determining whether `value` is of type `T` (or null) and then calling <xref:System.Collections.ObjectModel.Collection%601.Contains%2A>.</span></span>  
  
 <span data-ttu-id="9ab15-405">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-405">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9ab15-406">
            <paramref name="value" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-406">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9ab15-407">
            <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-407">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-408">
            <see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-408">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9ab15-409">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-409">The index of <paramref name="value" /> if found in the list; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-410">이 메서드는 기본 비교자를 사용 하 여 같은지 확인 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-410">This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="9ab15-411"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부를 입력 `T` 구현 <xref:System.IComparable%601?displayProperty=nameWithType> 사용 가능한 경우 해당 구현을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-411"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="9ab15-412">그러지 않으면 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 <xref:System.IComparable?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-412">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="9ab15-413">경우 형식 `T` 인터페이스 중 하나에서이 메서드를 사용 하는 구현 하지 않습니다 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-413">If type `T` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9ab15-414">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-414">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9ab15-415">
            <paramref name="value" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-415">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9ab15-416">
            <c>value</c>를 삽입할 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-416">The zero-based index at which <c>value</c> should be inserted.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="9ab15-417">
            <see cref="T:System.Object" />에 삽입할 <see cref="T:System.Collections.IList" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-417">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-418">항목을 <see cref="T:System.Collections.IList" />의 지정한 인덱스에 삽입합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-418">Inserts an item into the <see cref="T:System.Collections.IList" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-419">`index`가 <xref:System.Collections.IList>의 항목 수와 같으면 `value`가 끝에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-419">If `index` equals the number of items in the <xref:System.Collections.IList>, then `value` is appended to the end.</span></span>  
  
 <span data-ttu-id="9ab15-420">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-420">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-421">
            <paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-421">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9ab15-422">
            <paramref name="value" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-422">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ObjectModel.Collection&lt;'T&gt;.System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-423">
            <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-423">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ab15-424">
            <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-424">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9ab15-425">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-425">In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-426">크기가 고정된 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가하거나 제거할 수 없지만 기존 요소는 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-426">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="9ab15-427">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼를 지정 된 컬렉션 따라서 기본 컬렉션 추가 또는 제거 요소를 포함 하 여 변경 된 경우 고정 크기 컬렉션에 해당 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-427">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="9ab15-428">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-428">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ObjectModel.Collection&lt;'T&gt;.System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9ab15-429">
            <see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-429">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ab15-430">
            <see langword="true" />가 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-430">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9ab15-431">
            <see cref="T:System.Collections.ObjectModel.Collection`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-431">In the default implementation of <see cref="T:System.Collections.ObjectModel.Collection`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-432">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-432">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="9ab15-433">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 되 면 읽기 전용 컬렉션에 이러한 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-433">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="9ab15-434">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-434">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ObjectModel.Collection&lt;'T&gt;.System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="9ab15-435">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-435">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-436">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-436">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9ab15-437">지정한 인덱스의 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-437">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-438">이 속성은 `myCollection[index]` 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-438">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="9ab15-439">C# 언어를 사용 하는 [이](~/docs/csharp/language-reference/keywords/this.md) 구현 하는 대신 인덱서를 정의 하는 키워드는 <xref:System.Collections.ObjectModel.Collection%601.System%23Collections%23IList%23Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-439">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.ObjectModel.Collection%601.System%23Collections%23IList%23Item%2A> property.</span></span> <span data-ttu-id="9ab15-440">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.ObjectModel.Collection%601.System%23Collections%23IList%23Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-440">Visual Basic implements <xref:System.Collections.ObjectModel.Collection%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="9ab15-441">이 속성의 값을 검색 하는 것은 O(1) 작업; O(1) 작업 이기도 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-441">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9ab15-442">
            <paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-442">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9ab15-443">속성이 설정되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.IList" />에 할당할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-443">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9ab15-444">
            <see cref="T:System.Object" />에서 제거할 <see cref="T:System.Collections.IList" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-444">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9ab15-445">
            <see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-445">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9ab15-446">이 메서드는 기본 비교자를 사용 하 여 같은지 확인 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-446">This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="9ab15-447"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부를 입력 `T` 구현 <xref:System.IComparable%601?displayProperty=nameWithType> 사용 가능한 경우 해당 구현을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-447"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="9ab15-448">그러지 않으면 <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 검사 여부 입력 `T` 구현 <xref:System.IComparable?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-448">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="9ab15-449">경우 형식 `T` 인터페이스 중 하나에서이 메서드를 사용 하는 구현 하지 않습니다 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-449">If type `T` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9ab15-450">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9ab15-450">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9ab15-451">
            <paramref name="value" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9ab15-451">
              <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>