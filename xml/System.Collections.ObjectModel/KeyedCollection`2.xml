<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ea360e85ebfc5e60951e9ca94053f3de29a9871a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37701213" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">
      <span data-ttu-id="a646e-101">컬렉션에 있는 키의 형식입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a646e-101">The type of keys in the collection.</span>
      </span>
    </typeparam>
    <typeparam name="TItem">
      <span data-ttu-id="a646e-102">컬렉션에 있는 항목의 형식입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a646e-102">The type of items in the collection.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="a646e-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a646e-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-104"><xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스는 모두 O(1) 인덱싱된 검색 및 o (1) 하는 검색 키로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-104">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</span></span> <span data-ttu-id="a646e-105">추상 형식 인지 추상 기본 클래스는 생성 된 제네릭 형식의 각 않기 때문에 무한 추상 형식 설정 보다 정확 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-105">It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</span></span> <span data-ttu-id="a646e-106">사용할 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 컬렉션 형식에 적절 한 생성 된 형식에서 파생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-106">To use <xref:System.Collections.ObjectModel.KeyedCollection%602>, derive your collection type from the appropriate constructed type.</span></span>  
  
 <span data-ttu-id="a646e-107"><xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스에 기반한 컬렉션 간의 하이브리드 형식입니다 합니다 <xref:System.Collections.Generic.IList%601> 제네릭 인터페이스 및 컬렉션을 기반으로 <xref:System.Collections.Generic.IDictionary%602> 제네릭 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-107">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class is a hybrid between a collection based on the <xref:System.Collections.Generic.IList%601> generic interface and a collection based on the <xref:System.Collections.Generic.IDictionary%602> generic interface.</span></span> <span data-ttu-id="a646e-108">기반으로 하는 컬렉션 처럼 합니다 <xref:System.Collections.Generic.IList%601> 제네릭 인터페이스를 <xref:System.Collections.ObjectModel.KeyedCollection%602> 은 인덱싱된 목록 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-108">Like collections based on the <xref:System.Collections.Generic.IList%601> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> is an indexed list of items.</span></span> <span data-ttu-id="a646e-109">기반으로 하는 컬렉션 처럼 합니다 <xref:System.Collections.Generic.IDictionary%602> 제네릭 인터페이스를 <xref:System.Collections.ObjectModel.KeyedCollection%602> 각 요소와 연결 된 키가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-109">Like collections based on the <xref:System.Collections.Generic.IDictionary%602> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> has a key associated with each element.</span></span>  
  
 <span data-ttu-id="a646e-110">요소의 사전 달리 <xref:System.Collections.ObjectModel.KeyedCollection%602> 키/값 쌍을 아닙니다; 대신 전체 요소는 값 및 키 값 내에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-110">Unlike dictionaries, an element of <xref:System.Collections.ObjectModel.KeyedCollection%602> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</span></span>  <span data-ttu-id="a646e-111">컬렉션의 요소에서 파생 하는 예를 들어 `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` Visual basic에서) "John Doe Jr." 될 수 있습니다</span><span class="sxs-lookup"><span data-stu-id="a646e-111">For example, an element of a collection derived from `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` in Visual Basic) might be "John Doe Jr."</span></span> <span data-ttu-id="a646e-112">값은 "John Doe Jr."</span><span class="sxs-lookup"><span data-stu-id="a646e-112">where the value is "John Doe Jr."</span></span> <span data-ttu-id="a646e-113">키가 "Doe"; 정수 키를 포함 하는 직원 레코드의 컬렉션에서 파생 될 수 또는 `KeyedCollection\<int,Employee>`합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-113">and the key is "Doe"; or a collection of employee records containing integer keys could be derived from `KeyedCollection\<int,Employee>`.</span></span> <span data-ttu-id="a646e-114">추상 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 메서드 요소에서 키를 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-114">The abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method extracts the key from the element.</span></span>  
  
 <span data-ttu-id="a646e-115">기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전을 사용 하 여 얻을 수 있는 포함 된 <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-115">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that you can obtain with the <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> property.</span></span>  <span data-ttu-id="a646e-116">항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-116">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="a646e-117">만들 때 사전 작성 임계값을 지정 하 여이 동작을 재정의 합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-117">This behavior is overridden by specifying a dictionary creation threshold when you create the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="a646e-118">조회 사전은 해당 임계값을 초과 하는 요소 수가 처음으로 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-118">The lookup dictionary is created the first time the number of elements exceeds that threshold.</span></span>  <span data-ttu-id="a646e-119">임계값으로-1을 지정 하면 조회 사전이 만들어지지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-119">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a646e-120">응용 프로그램이 사용 되는 내부 조회 사전을 경우 포함 되는 컬렉션의 모든 항목에 대 한 참조가 `TItem` 참조 형식인 경우 컬렉션에 있는 모든 항목의 복사 또는 `TItem` 값 형식인 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-120">When the internal lookup dictionary is used, it contains references to all the items in the collection if `TItem` is a reference type, or copies of all the items in the collection if `TItem` is a value type.</span></span> <span data-ttu-id="a646e-121">따라서 조회 사전을 사용 하 여 적합 하지 않을 경우 `TItem` 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-121">Thus, using the lookup dictionary may not be appropriate if `TItem` is a value type.</span></span>  
  
 <span data-ttu-id="a646e-122">사용 하 여 인덱스 또는 키의 항목을 액세스할 수는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-122">You can access an item by its index or key by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="a646e-123">키가 없으면 항목을 추가할 수 있지만 이러한 항목 이후에 인덱스로 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-123">You can add items without a key, but these items can subsequently be accessed only by index.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-124">이 섹션에는 두 코드 예제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-124">This section contains two code examples.</span></span> <span data-ttu-id="a646e-125">첫 번째 예제에서 파생 하는 데 필요한 최소 코드를 보여 줍니다. <xref:System.Collections.ObjectModel.KeyedCollection%602>, 대부분의 상속 된 메서드를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-125">The first example shows the minimum code required to derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and demonstrates many of the inherited methods.</span></span> <span data-ttu-id="a646e-126">두 번째 예의 보호 된 메서드를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602> 사용자 지정 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-126">The second example shows how to override the protected methods of <xref:System.Collections.ObjectModel.KeyedCollection%602> to provide custom behavior.</span></span>  
  
 <span data-ttu-id="a646e-127">**예제 1**</span><span class="sxs-lookup"><span data-stu-id="a646e-127">**Example 1**</span></span>  
  
 <span data-ttu-id="a646e-128">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-128">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="a646e-129">상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-129">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="a646e-130">합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-130">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="a646e-131">키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-131">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="a646e-132">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-132">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 <span data-ttu-id="a646e-133">**예제 2**</span><span class="sxs-lookup"><span data-stu-id="a646e-133">**Example 2**</span></span>  
  
 <span data-ttu-id="a646e-134">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="a646e-134">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="a646e-135">이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-135">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="a646e-136">코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-136">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="a646e-137">주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-137">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="a646e-138">코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-138">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="a646e-139">코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-139">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="a646e-140">이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-140">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="a646e-141">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-141">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a646e-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a646e-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-144">A <xref:System.Collections.ObjectModel.KeyedCollection%602> 이 사용 하 여 만든 생성자에서 얻은 키의 형식에 대 한 기본 제네릭 같음 비교자를 사용 하 여 <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-144">A <xref:System.Collections.ObjectModel.KeyedCollection%602> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a646e-145">다른 제네릭 같음 비교자를 지정 하려면 사용 합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> 생성자 또는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-145">To specify a different generic equality comparer, use the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor or the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="a646e-146">기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 첫 번째 항목이 추가 될 때 생성 되는 조회 사전이 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-146">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="a646e-147">항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-147">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="a646e-148">사용 하 여이 동작을 재정의할 수는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 생성자 및 사전 작성 임계값을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-148">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a646e-149">때문에 <xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스는 추상 클래스 (`MustInherit` Visual basic에서)를 사용 하기 위해 여기에서 파생 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-149">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="a646e-150">파생된 유형에 대 한 생성자에서 적절 한 호출 <xref:System.Collections.ObjectModel.KeyedCollection%602> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-150">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="a646e-151">같음 비교자를 또는 생성자에서 사전 작성 임계값과 같은 기능을 노출 하는 데 필요한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-151">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="a646e-152">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-152">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-153">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-153">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="a646e-154">상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-154">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="a646e-155">합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-155">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="a646e-156">키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-156">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="a646e-157">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-157">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="a646e-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-160">기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 첫 번째 항목이 추가 될 때 생성 되는 조회 사전이 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-160">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="a646e-161">항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-161">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="a646e-162">사용 하 여이 동작을 재정의할 수는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 생성자 및 사전 작성 임계값을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-162">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a646e-163">때문에 <xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스는 추상 클래스 (`MustInherit` Visual basic에서)를 사용 하기 위해 여기에서 파생 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-163">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="a646e-164">파생된 유형에 대 한 생성자에서 적절 한 호출 <xref:System.Collections.ObjectModel.KeyedCollection%602> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-164">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="a646e-165">같음 비교자를 또는 생성자에서 사전 작성 임계값과 같은 기능을 노출 하는 데 필요한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-165">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="a646e-166">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-166">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="a646e-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span>
          </span>
        </param>
        <param name="dictionaryCreationThreshold">
          <span data-ttu-id="a646e-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-170">기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 첫 번째 항목이 추가 될 때 생성 되는 조회 사전이 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-170">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="a646e-171">항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-171">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="a646e-172">이 생성자를 사용 하면 해당 동작을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-172">This constructor allows you to override that behavior.</span></span> <span data-ttu-id="a646e-173">첫 번째 요소를 추가할 때 사전 만들려면 0, 두 번째 요소에 추가 되 면 사전 만들려면 1 및 등을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-173">Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</span></span> <span data-ttu-id="a646e-174">임계값으로-1을 지정 하면 조회 사전이 만들어지지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-174">If you specify –1 as the threshold, the lookup dictionary is never created.</span></span>  
  
 <span data-ttu-id="a646e-175">매우 작은 컬렉션에 대 한 조회 사전을 제공 하는 검색 속도가 향상 사전에 필요한 추가 메모리를 가치가 되지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-175">For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</span></span> <span data-ttu-id="a646e-176">임계값을 설정 하 게 조정할 시기를 결정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-176">Setting a threshold allows you to decide when to make that tradeoff.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a646e-177">때문에 <xref:System.Collections.ObjectModel.KeyedCollection%602> 클래스는 추상 클래스 (`MustInherit` Visual basic에서)를 사용 하기 위해 여기에서 파생 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-177">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="a646e-178">파생된 유형에 대 한 생성자에서 적절 한 호출 <xref:System.Collections.ObjectModel.KeyedCollection%602> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-178">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="a646e-179">같음 비교자를 또는 생성자에서 사전 작성 임계값과 같은 기능을 노출 하는 데 필요한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-179">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="a646e-180">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-180">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-181">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="a646e-181">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="a646e-182">이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-182">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="a646e-183">코드 예제에서는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 임계값이 0 사용 하 여 생성자 내부 사전에 개체를 처음으로 만들어질 수 있도록가 컬렉션에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-183">The code example uses the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</span></span>  
  
 <span data-ttu-id="a646e-184">코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-184">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="a646e-185">주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-185">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="a646e-186">코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-186">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="a646e-187">코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-187">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="a646e-188">이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-188">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="a646e-189">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-189">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a646e-190">
            <paramref name="dictionaryCreationThreshold" /> is less than –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-190">
              <paramref name="dictionaryCreationThreshold" /> is less than –1.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="a646e-191">The element to change the key of.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-191">The element to change the key of.</span>
          </span>
        </param>
        <param name="newKey">
          <span data-ttu-id="a646e-192">The new key for <c>item</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-192">The new key for <c>item</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-193">Changes the key associated with the specified element in the lookup dictionary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-193">Changes the key associated with the specified element in the lookup dictionary.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-194">이 메서드는에 포함 된 키를 수정 하지 않습니다 `item`; 단순히 조회 사전을 저장 하는 키를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-194">This method does not modify the key embedded in `item`; it simply replaces the key saved in the lookup dictionary.</span></span>  <span data-ttu-id="a646e-195">따라서 경우 `newKey` 에 포함 된 키와에서 다릅니다 `item`에 액세스할 수 없습니다 `item` 가 반환한 키를 사용 하 여 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-195">Therefore, if `newKey` is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="a646e-196">이 메서드는 아무 작업도 수행 하지 하는 경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-196">This method does nothing if the <xref:System.Collections.ObjectModel.KeyedCollection%602> does not have a lookup dictionary.</span></span>  
  
 <span data-ttu-id="a646e-197">모든 키를 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-197">Every key in a <xref:System.Collections.ObjectModel.KeyedCollection%602> must be unique.</span></span> <span data-ttu-id="a646e-198">키 일 수 없습니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-198">A key cannot be `null`.</span></span>  
  
 <span data-ttu-id="a646e-199">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-199">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="a646e-200">구현자 참고 사항</span><span class="sxs-lookup"><span data-stu-id="a646e-200">Notes for Implementers</span></span>  
 <span data-ttu-id="a646e-201">항목에 포함 된 키를 수정 하려면 먼저 조회 사전의 키를 업데이트 하려면이 메서드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-201">Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</span></span> <span data-ttu-id="a646e-202">사전 작성 임계값-1 이면이 메서드를 호출할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-202">If the dictionary creation threshold is –1, calling this method is not necessary.</span></span>  
  
 <span data-ttu-id="a646e-203">노출 하지 마십시오는 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 파생된 클래스의 공용 메서드로 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-203">Do not expose the <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method as a public method of a derived class.</span></span> <span data-ttu-id="a646e-204">이 메서드를 잘못 사용 하면 조회 사전이 동기화 항목 키입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-204">Misuse of this method puts the lookup dictionary out of sync with item keys.</span></span> <span data-ttu-id="a646e-205">예를 들어 키 설정을 `null` 다른 값으로 설정한 항목에 대 한 여러 키 조회 사전을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-205">For example, setting the key to `null` and then setting it to another value adds multiple keys for an item to the lookup dictionary.</span></span> <span data-ttu-id="a646e-206">변경할 수 있는 항목 키를 허용 하는 내부적으로이 메서드를 노출 합니다: 항목에 대 한 키가 변경 조회 사전의 키를 변경 하려면이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-206">Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-207">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-207">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="a646e-208">코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-208">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="a646e-209">합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-209">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="a646e-210">속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-210">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="a646e-211">그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-211">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="a646e-212">간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual basic에서) `Collection`필드입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-212">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="a646e-213">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-213">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="a646e-214">필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-214">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a646e-215">
            <paramref name="item" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-215">
              <paramref name="item" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="a646e-216">-or-  <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-216">-or-  <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a646e-217">
            <paramref name="item" /> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-217">
              <paramref name="item" /> is not found.</span>
          </span>
          <span data-ttu-id="a646e-218">-or-  <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-218">-or-  <paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a646e-219">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-219">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-220">조회 사전이 있으면이 메서드는 지우지만 삭제 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-220">If there is a lookup dictionary, this method clears it but does not delete it.</span></span>  
  
 <span data-ttu-id="a646e-221">요소 수가 사전 생성 임계값을 초과 하는 경우 및 <xref:System.Collections.ObjectModel.KeyedCollection%602> 은 요소 수가 임계값 보다 작습니다. 다시도 조회 사전을 사용 하려면 계속 조회 사전을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-221">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="a646e-222">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-222">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="a646e-223">구현자 참고 사항</span><span class="sxs-lookup"><span data-stu-id="a646e-223">Notes for Implementers</span></span>  
 <span data-ttu-id="a646e-224">동작을 사용자 지정 하려면이 메서드를 재정의 합니다 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 에서 상속 된 메서드는 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-224">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="a646e-225">기본 컬렉션의 선택을 취소 하는 데 조회 사전을 지울이 메서드의 기본 클래스 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-225">Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-226">이 섹션에서는 재정의 보여 주는 두 가지 코드 예제는 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> 컬렉션에서 모든 개체를 지우기 위한 사용자 지정 동작을 제공 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-226">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> method to provide custom behavior for clearing all objects from the collection.</span></span> <span data-ttu-id="a646e-227">첫 번째 예제 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 사용 하 여 개체의 컬렉션에 대 한 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-227">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="a646e-228">예제 1</span><span class="sxs-lookup"><span data-stu-id="a646e-228">Example 1</span></span>  
  
 <span data-ttu-id="a646e-229">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="a646e-229">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="a646e-230">이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-230">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="a646e-231">코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-231">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="a646e-232">주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-232">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="a646e-233">코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-233">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="a646e-234">코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-234">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="a646e-235">이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-235">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="a646e-236">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-236">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="a646e-237">예제 2</span><span class="sxs-lookup"><span data-stu-id="a646e-237">Example 2</span></span>  
  
 <span data-ttu-id="a646e-238">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-238">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="a646e-239">코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-239">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="a646e-240">합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-240">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="a646e-241">속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-241">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="a646e-242">그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-242">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="a646e-243">간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual basic에서) `Collection`필드입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-243">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="a646e-244">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-244">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="a646e-245">필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-245">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a646e-246">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-246">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a646e-247">구현 된 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 컬렉션의 키가 같은지 확인 하는 데 사용 되는 제네릭 인터페이스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-247">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-248">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-248">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a646e-249">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-249">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-250">Determines whether the collection contains an element with the specified key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-250">Determines whether the collection contains an element with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a646e-251">
            <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-251">
              <see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-252">경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이 `key` 사전을 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-252">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to search the dictionary.</span></span> <span data-ttu-id="a646e-253">각 요소의 키를 사용 하 여 추출 조회 사전이 없는 경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 메서드 및 지정된 된 키와 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-253">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="a646e-254">경우이 메서드는 o (1) 작업을 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이; O는 것이 고, 그렇지 (`n`) 작업을 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-254">This method is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-255">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-255">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="a646e-256">상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-256">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="a646e-257">합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-257">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="a646e-258">키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-258">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="a646e-259">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-259">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a646e-260">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-260">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a646e-261">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-261">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a646e-262">조회 사전을 합니다 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />; 있으면이 고, 그렇지 <see langword="null" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-262">The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-263">기본적으로 <xref:System.Collections.ObjectModel.KeyedCollection%602> 첫 번째 항목이 추가 될 때 생성 되는 조회 사전이 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-263">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="a646e-264">항목에 추가 될 때를 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 항목의 키가 한 번만 추출 하 고 빠른 검색에 대 한 조회 사전을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-264">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="a646e-265">사용 하 여이 동작을 재정의할 수는 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 생성자 및 사전 작성 임계값을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-265">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
 <span data-ttu-id="a646e-266">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-266">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-267">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-267">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="a646e-268">코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-268">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="a646e-269">합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-269">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="a646e-270">속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-270">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="a646e-271">그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-271">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="a646e-272">간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual basic에서) `Collection`필드입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-272">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="a646e-273">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-273">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="a646e-274">필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-274">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="a646e-275">The element from which to extract the key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-275">The element from which to extract the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-276">When implemented in a derived class, extracts the key from the specified element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-276">When implemented in a derived class, extracts the key from the specified element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a646e-277">The key for the specified element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-277">The key for the specified element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-278">조회 사전의 키에 포함 된 키와 다른 경우 `item`에 액세스할 수 없습니다 `item` 에서 반환 하는 키를 사용 하 여 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-278">If the key in the lookup dictionary is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="a646e-279">반환 하려면이 메서드를 구현할 수 있습니다 `null` 키가 없는 항목을 포함 하는 컬렉션에 대 한 경우에 항목에 액세스할 수 해당 인덱스로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-279">You can implement this method to return `null` for a collection that contains items without keys, in which case the items can be accessed only by their index.</span></span> <span data-ttu-id="a646e-280">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-280">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="a646e-281">구현자 참고 사항</span><span class="sxs-lookup"><span data-stu-id="a646e-281">Notes for Implementers</span></span>  
 <span data-ttu-id="a646e-282">사전에 사전의 항목에서 키를 추출 하는 방법을 제공 하려면이 메서드를 재정의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-282">You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</span></span>  
  
 <span data-ttu-id="a646e-283">이 메서드는 내부적으로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-283">This method is called internally.</span></span> <span data-ttu-id="a646e-284">Public 이어야 하는 데 필요한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-284">It is not necessary for it to be public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-285">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-285">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="a646e-286">상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-286">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="a646e-287">합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-287">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="a646e-288">키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-288">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="a646e-289">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-289">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a646e-290">The zero-based index at which <c>item</c> should be inserted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-290">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="a646e-291">The object to insert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-291">The object to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-292">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-292">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-293">경우 `index` 값과 같음 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` 끝에 추가 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-293">If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span>  
  
 <span data-ttu-id="a646e-294">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-294">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="a646e-295"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 호출한 합니다 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 고 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-295"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> is called by the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="a646e-296">구현자 참고 사항</span><span class="sxs-lookup"><span data-stu-id="a646e-296">Notes for Implementers</span></span>  
 <span data-ttu-id="a646e-297">동작을 사용자 지정 하려면이 메서드를 재정의 합니다 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> 하 고 <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> 에서 상속 된 메서드를 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-297">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="a646e-298">기본 컬렉션에 항목을 삽입 하 고 조회 사전을 업데이트할이 메서드의 기본 클래스 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-298">Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-299">이 섹션에는 재정의 보여 주는 두 코드 예제가 포함 되어 있습니다.는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드를 추가 하거나 컬렉션에 개체를 삽입 하기 위한 사용자 지정 동작을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-299">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method to provide custom behavior for adding or inserting objects into the collection.</span></span> <span data-ttu-id="a646e-300">첫 번째 예제 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 사용 하 여 개체의 컬렉션에 대 한 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-300">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="a646e-301">예제 1</span><span class="sxs-lookup"><span data-stu-id="a646e-301">Example 1</span></span>  
  
 <span data-ttu-id="a646e-302">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="a646e-302">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="a646e-303">이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-303">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="a646e-304">코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-304">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="a646e-305">주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-305">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="a646e-306">코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-306">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="a646e-307">코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-307">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="a646e-308">이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-308">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="a646e-309">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-309">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="a646e-310">예제 2</span><span class="sxs-lookup"><span data-stu-id="a646e-310">Example 2</span></span>  
  
 <span data-ttu-id="a646e-311">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-311">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="a646e-312">코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-312">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="a646e-313">합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-313">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="a646e-314">속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-314">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="a646e-315">그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-315">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="a646e-316">간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual basic에서) `Collection`필드입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-316">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="a646e-317">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-317">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="a646e-318">필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-318">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a646e-319">
            <paramref name="index" /> is less than 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-319">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="a646e-320">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-320">-or-  <paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a646e-321">The key of the element to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-321">The key of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-322">Gets the element with the specified key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-322">Gets the element with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a646e-323">지정한 키가 있는 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-323">The element with the specified key.</span>
          </span>
          <span data-ttu-id="a646e-324">지정된 키를 가진 요소가 없으면 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-324">If an element with the specified key is not found, an exception is thrown.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-325">이 속성은 다음 구문을 사용 하 여 컬렉션의 특정 요소에 액세스 하는 기능을 제공 합니다. `myCollection[key]` (`myCollection(key)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="a646e-325">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a646e-326">이 속성은 상속 된 구별 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> 속성을 숫자 인덱스 별로 요소를 가져오거나 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-326">This property is distinct from the inherited <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which gets and sets elements by numeric index.</span></span> <span data-ttu-id="a646e-327">그러나 경우 `TKey` 형식의 <xref:System.Int32>,이 속성을 상속 된 속성과 마스크 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-327">However, if `TKey` is of type <xref:System.Int32>, this property masks the inherited property.</span></span> <span data-ttu-id="a646e-328">이 경우 캐스팅 하 여 상속 된 속성에 액세스할 수 있습니다는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 해당 기본 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-328">In that case, you can access the inherited property by casting the <xref:System.Collections.ObjectModel.KeyedCollection%602> to its base type.</span></span> <span data-ttu-id="a646e-329">예를 들어 `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` Visual basic에서는 `KeyedCollection<int, MyType^>` c + +에서)로 캐스팅할 수 있습니다 `Collection<MyType>` (`Collection(Of MyType)` Visual basic에서는 `Collection<MyType^>` c + +에서).</span><span class="sxs-lookup"><span data-stu-id="a646e-329">For example, `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` in Visual Basic, `KeyedCollection<int, MyType^>` in C++) can be cast to `Collection<MyType>` (`Collection(Of MyType)` in Visual Basic, `Collection<MyType^>` in C++).</span></span>  
  
 <span data-ttu-id="a646e-330">경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이 `key` 사전에서 요소를 검색 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-330">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to retrieve the element from the dictionary.</span></span>  <span data-ttu-id="a646e-331">각 요소의 키를 사용 하 여 추출 조회 사전이 없는 경우는 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 메서드 및 지정된 된 키와 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-331">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="a646e-332">C# 언어 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-332">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="a646e-333">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-333">Visual Basic implements <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="a646e-334">경우이 속성의 값을 검색 하는 o (1) 작업을 <xref:System.Collections.ObjectModel.KeyedCollection%602> 조회 사전이; O는 것이 고, 그렇지 (`n`) 작업을 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-334">Retrieving the value of this property is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-335">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-335">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="a646e-336">상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-336">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="a646e-337">코드 예제에서는 둘 다를 호출 합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> 속성은 읽기 전용 키로 검색 하 고 및 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> 인덱스로 검색 하는 설정 가능한 속성.</span><span class="sxs-lookup"><span data-stu-id="a646e-337">The code example calls both the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only and retrieves by key, and the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which is settable and retrieves by index.</span></span> <span data-ttu-id="a646e-338">파생된 컬렉션의 개체에는 정수 키를 인덱스로 검색에 사용 되는 정수 구별할 때 두 번째 속성을 액세스 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-338">It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</span></span>  
  
 <span data-ttu-id="a646e-339">합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-339">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="a646e-340">키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-340">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="a646e-341">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-341">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a646e-342">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-342">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="a646e-343">An element with the specified key does not exist in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-343">An element with the specified key does not exist in the collection.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a646e-344">The key of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-344">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-345">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-345">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a646e-346">
            <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-346">
              <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a646e-347">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-347">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-348">요소의 키 조회 사전에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-348">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="a646e-349">요소 수가 사전 생성 임계값을 초과 하는 경우 및 <xref:System.Collections.ObjectModel.KeyedCollection%602> 은 요소 수가 임계값 보다 작습니다. 다시도 조회 사전을 사용 하려면 계속 조회 사전을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-349">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a646e-350">이 메서드의 동작을 사용자 지정 하려면 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-350">To customize the behavior of this method, override the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method.</span></span>  
  
 <span data-ttu-id="a646e-351">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-351">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-352">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소 코드를 보여줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602>: 재정의 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> 기본 클래스 생성자에 위임 하는 메서드 및 공용 생성자를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-352">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="a646e-353">상속 된 메서드 및 코드 방법도 보여 속성 중 상당수 <xref:System.Collections.ObjectModel.KeyedCollection%602> 고 <xref:System.Collections.ObjectModel.Collection%601> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-353">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="a646e-354">예제에 나오는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> 에서 상속 된 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 지정된 된 키를 사용 하 여 항목을 제거 하는 및를 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> 및 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> 에서 상속 된 메서드 <xref:System.Collections.ObjectModel.Collection%601>는 제거 개체와 인덱스로 각각.</span><span class="sxs-lookup"><span data-stu-id="a646e-354">The example demonstrates <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> method inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602>, which removes the item with a specified key, and also the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> methods inherited from <xref:System.Collections.ObjectModel.Collection%601>, which remove by object and by index respectively.</span></span>  
  
 <span data-ttu-id="a646e-355">합니다 `SimpleOrder` 클래스는 포함 하는 매우 간단한 청구 목록을 `OrderItem` 각각 순서 대로 줄 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-355">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="a646e-356">키 `OrderItem` 변경할 수 없는에서 파생 된 클래스에 대 한 중요 고려 사항 <xref:System.Collections.ObjectModel.KeyedCollection%602>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-356">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="a646e-357">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-357">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a646e-358">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-358">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a646e-359">The index of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-359">The index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-360">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-360">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-361">요소의 키 조회 사전에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-361">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="a646e-362">요소 수가 사전 생성 임계값을 초과 하는 경우 및 <xref:System.Collections.ObjectModel.KeyedCollection%602> 은 요소 수가 임계값 보다 작습니다. 다시도 조회 사전을 사용 하려면 계속 조회 사전을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-362">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="a646e-363">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.ObjectModel.Collection%601.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-363">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="a646e-364">구현자 참고 사항</span><span class="sxs-lookup"><span data-stu-id="a646e-364">Notes for Implementers</span></span>  
 <span data-ttu-id="a646e-365">동작을 사용자 지정 하려면이 메서드를 재정의 합니다 <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> 하 고 <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> 에서 상속 된 메서드는 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-365">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class, and the <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> method.</span></span>  
  
 <span data-ttu-id="a646e-366">기본 컬렉션에서 항목을 제거 하 고 조회 사전을 업데이트할이 메서드의 기본 클래스 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-366">Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-367">이 섹션에서는 재정의 보여 주는 두 가지 코드 예제는 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> 컬렉션에서 개체 제거에 대 한 사용자 지정 동작을 제공 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-367">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method to provide custom behavior for removing objects from the collection.</span></span> <span data-ttu-id="a646e-368">첫 번째 예제 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 사용 하 여 개체의 컬렉션에 대 한 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-368">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="a646e-369">예제 1</span><span class="sxs-lookup"><span data-stu-id="a646e-369">Example 1</span></span>  
  
 <span data-ttu-id="a646e-370">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="a646e-370">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="a646e-371">이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-371">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="a646e-372">코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-372">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="a646e-373">주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-373">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="a646e-374">코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-374">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="a646e-375">코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-375">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="a646e-376">이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-376">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="a646e-377">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-377">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="a646e-378">예제 2</span><span class="sxs-lookup"><span data-stu-id="a646e-378">Example 2</span></span>  
  
 <span data-ttu-id="a646e-379">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-379">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="a646e-380">코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-380">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="a646e-381">합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-381">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="a646e-382">속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-382">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="a646e-383">그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-383">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="a646e-384">간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual basic에서) `Collection`필드입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-384">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="a646e-385">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-385">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="a646e-386">필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-386">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a646e-387">The zero-based index of the item to be replaced.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-387">The zero-based index of the item to be replaced.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="a646e-388">The new item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-388">The new item.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a646e-389">Replaces the item at the specified index with the specified item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a646e-389">Replaces the item at the specified index with the specified item.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a646e-390">조회 사전은 적절히 업데이트 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-390">The lookup dictionary is updated accordingly.</span></span> <span data-ttu-id="a646e-391">즉, 대체 되는 항목의 키 조회 사전에서 제거 되 고 새 항목의 키 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-391">That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</span></span>  
  
 <span data-ttu-id="a646e-392">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-392">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="a646e-393">구현자 참고 사항</span><span class="sxs-lookup"><span data-stu-id="a646e-393">Notes for Implementers</span></span>  
 <span data-ttu-id="a646e-394">설정에 대 한 사용자 지정된 동작을 제공 하려면이 메서드를 재정의 합니다 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성에서 상속을 <xref:System.Collections.ObjectModel.Collection%601> 제네릭 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-394">Override this method to provide customized behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a646e-395">이 메서드는 동작의 영향을 주지 않습니다는 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-395">This method does not affect the behavior of the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only.</span></span>  
  
 <span data-ttu-id="a646e-396">내부 컬렉션에서 항목을 설정 하 고 조회 사전을 업데이트할이 메서드의 기본 클래스 구현을 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-396">Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a646e-397">이 섹션에는 재정의 보여 주는 두 코드 예제가 포함 되어 있습니다.는 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 설정에 대 한 사용자 지정 동작을 제공 하는 방법의 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-397">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> method to provide custom behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a646e-398">첫 번째 예제 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 사용 하 여 개체의 컬렉션에 대 한 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-398">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="a646e-399">예제 1</span><span class="sxs-lookup"><span data-stu-id="a646e-399">Example 1</span></span>  
  
 <span data-ttu-id="a646e-400">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 메서드를 사용자 지정 동작을 제공 하는 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, 및 <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> 메서드 및 기본 설정 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> 속성 (C# 인덱서).</span><span class="sxs-lookup"><span data-stu-id="a646e-400">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="a646e-401">이 예제에 제공 된 사용자 지정 동작은 라는 알림 이벤트 `Changed`, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-401">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="a646e-402">코드 예제는 `SimpleOrder` 클래스에서 파생 되는 <xref:System.Collections.ObjectModel.KeyedCollection%602> 간단한 주문 양식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-402">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="a646e-403">주문 양식 포함 `OrderItem` 정렬 항목을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-403">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="a646e-404">코드 예제에서는 `SimpleOrderChangedEventArgs` 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-404">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="a646e-405">코드 예제에서 속성 및 파생된 클래스의 메서드를 호출 하 여 사용자 지정 동작을 보여 줍니다.는 `Main` 메서드는 `Demo` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-405">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="a646e-406">이 코드 예제에서는 변경할 수 없는 키를 사용 하 여 개체를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-406">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="a646e-407">변경 가능한 키를 사용 하는 코드 예제를 참조 하세요. <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-407">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="a646e-408">예제 2</span><span class="sxs-lookup"><span data-stu-id="a646e-408">Example 2</span></span>  
  
 <span data-ttu-id="a646e-409">다음 코드 예제에서는 보호를 재정의 하는 방법을 보여 줍니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 변경할 수 있는 키 및 보호를 재정의 하는 방법을 지원 하기 위해 메서드 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>를 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>합니다 <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 및 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 키의 무결성을 유지 하는 방법 및 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-409">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="a646e-410">코드 예제는 `MutableKeys` 에서 파생 되는 컬렉션 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 및 `MutableKey` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-410">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="a646e-411">합니다 `MutableKey` 클래스에는 설정 가능한 `Key` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-411">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="a646e-412">속성 setter를 호출 하는 새 키 속성에 할당할 때 합니다 `internal` (`Friend` Visual basic에서) `ChangeKey` 기존 키를 사용 하 여 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-412">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="a646e-413">그렇다면 예외가 throw 되 고 속성 값을 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-413">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="a646e-414">간의 연결을 유지 하기 위해를 `MutableKey` 개체 및 `MutableKeys` 컬렉션 및 두 개의 컬렉션에 삽입 되는 개체 방지 합니다 `MutableKey` 클래스에는 `internal` (`Friend` Visual basic에서) `Collection`필드입니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-414">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="a646e-415">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a646e-415">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="a646e-416">필드에는 항목을 컬렉션에 추가 하 고 항목이 제거 되 면 지울 때 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a646e-416">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="item" Type="TItem&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>