<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="KeyedCollection`2.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53375080ab008f35379a851d18f700db732edfd23.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3375080ab008f35379a851d18f700db732edfd23</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The type of keys in the collection.</source>
          <target state="translated">컬렉션에 있는 키의 형식입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The type of items in the collection.</source>
          <target state="translated">컬렉션에 있는 항목의 형식입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Provides the abstract base class for a collection whose keys are embedded in the values.</source>
          <target state="translated">키가 값에 포함된 컬렉션에 대한 추상 기본 클래스를 제공합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 모두 o (1) 인덱싱된 검색 및 o (1) 하는 검색 키가 지정 된 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</source>
          <target state="translated">추상 형식 인지는 추상 기본 클래스 각각의 생성된 된 제네릭 형식 이므로 무한 추상 형식의 설정할 더 정확 하 게 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>To use <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, derive your collection type from the appropriate constructed type.</source>
          <target state="translated">사용 하도록 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 생성된 된 적절 한 형식에서 컬렉션 형식을 파생 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is a hybrid between a collection based on the <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface and a collection based on the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> generic interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 클래스는 기반으로 컬렉션 간의 하이브리드 형식는 <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 제네릭 인터페이스와 컬렉션에 따라는 <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> 제네릭 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Like collections based on the <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> generic interface, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is an indexed list of items.</source>
          <target state="translated">컬렉션에 따라 처럼는 <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 제네릭 인터페이스를 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 는 인덱싱된 항목 목록입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Like collections based on the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> generic interface, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a key associated with each element.</source>
          <target state="translated">컬렉션에 따라 처럼는 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> 제네릭 인터페이스를 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 각 요소와 연결 된 키를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Unlike dictionaries, an element of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</source>
          <target state="translated">사전의 요소와는 달리 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 키/값 쌍 않습니다; 대신 전체 요소는 값 및 키 값 내에 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>For example, an element of a collection derived from <ph id="ph1">`KeyedCollection\&lt;String,String&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of String, String)`</ph> in Visual Basic) might be "John Doe Jr."</source>
          <target state="translated">컬렉션의 요소에서 파생 되는 예를 들어 <ph id="ph1">`KeyedCollection\&lt;String,String&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of String, String)`</ph> Visual basic에서) "John Doe Jr." 될 수 있습니다</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>where the value is "John Doe Jr."</source>
          <target state="translated">값은 "John Doe Jr."</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>and the key is "Doe"; or a collection of employee records containing integer keys could be derived from <ph id="ph1">`KeyedCollection\&lt;int,Employee&gt;`</ph>.</source>
          <target state="translated">키가 "Doe"; 정수 키를 포함 하는 직원 레코드의 컬렉션에서 파생 시킬 수 또는 <ph id="ph1">`KeyedCollection\&lt;int,Employee&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The abstract <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method extracts the key from the element.</source>
          <target state="translated">추상 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> 메서드 요소에서 키를 추출 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that you can obtain with the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A&gt;</ph> property.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 을 포함할 수 있는 조회 사전이 포함 된 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A&gt;</ph> 속성.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">에 항목을 추가 하는 경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 해당 항목의 키가 한 번만 추출 하 고 빠른 검색을 위해 조회 사전에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This behavior is overridden by specifying a dictionary creation threshold when you create the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">이 동작을 만들 때 사전 작성 임계값을 지정 하 여 재정의 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The lookup dictionary is created the first time the number of elements exceeds that threshold.</source>
          <target state="translated">조회 사전의 요소 수가 해당 임계값을 초과 합니다. 처음으로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>If you specify –1 as the threshold, the lookup dictionary is never created.</source>
          <target state="translated">임계값으로-1을 지정 하면 조회 사전이 만들어지지 않습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>When the internal lookup dictionary is used, it contains references to all the items in the collection if <ph id="ph1">`TItem`</ph> is a reference type, or copies of all the items in the collection if <ph id="ph2">`TItem`</ph> is a value type.</source>
          <target state="translated">경우 컬렉션에 있는 모든 항목에 대 한 참조 포함 되 고 내부 조회 사전을 사용 되는 경우 <ph id="ph1">`TItem`</ph> 참조 형식인 경우 컬렉션에 있는 모든 항목의 복사 또는 <ph id="ph2">`TItem`</ph> 값 형식이 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Thus, using the lookup dictionary may not be appropriate if <ph id="ph1">`TItem`</ph> is a value type.</source>
          <target state="translated">따라서 조회 사전을 사용 하 여 맞지 않을 경우 <ph id="ph1">`TItem`</ph> 값 형식이 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>You can access an item by its index or key by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">사용 하 여 인덱스 또는 키의 항목을 액세스할 수는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>You can add items without a key, but these items can subsequently be accessed only by index.</source>
          <target state="translated">키 없이 항목을 추가할 수 있지만 이러한 항목 이후에 인덱스로 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This section contains two code examples.</source>
          <target state="translated">이 섹션에는 두 가지 코드 예제가 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The first example shows the minimum code required to derive from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and demonstrates many of the inherited methods.</source>
          <target state="translated">첫 번째 예제에서 파생 하는 데 필요한 최소 코드를 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 대부분의 상속 된 메서드를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The second example shows how to override the protected methods of <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> to provide custom behavior.</source>
          <target state="translated">두 번째 예의 보호 된 메서드를 재정의 하는 방법을 보여 줍니다 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 사용자 지정 동작을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소한의 코드 보여줍니다 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: 재정의 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> 메서드 및 공용 생성자를 제공 하는 기본 클래스 생성자에 위임 하 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">코드 예제에서는 대부분의 속성에서 상속 된 메서드 및 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph> 클래스는 포함 하는 매우 간단한 청구 목록을 <ph id="ph2">`OrderItem`</ph> 각각 순서 대로 행 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">키 <ph id="ph1">`OrderItem`</ph> 는 변경할 수는 중요 한 고려 사항에서 파생 된 클래스에 대 한 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예제 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 방법에 대 한 사용자 지정 동작을 제공 하는 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> 메서드, 및에 대 한 기본 설정 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> 속성 (C# 인덱서).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">이 예에서 제공 하는 사용자 지정 동작은 라는 알림 이벤트는 <ph id="ph1">`Changed`</ph>, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`SimpleOrder`</ph> 클래스에서 파생 되 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 간단한 주문서를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">주문 양식 포함 <ph id="ph1">`OrderItem`</ph> 주문한 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">코드 예제에서는 한 <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">코드 예제에는 파생된 클래스의 메서드와 속성을 호출 하 여 사용자 지정 동작을 보여 줍니다.는 <ph id="ph1">`Main`</ph> 의 메서드는 <ph id="ph2">`Demo`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">이 코드 예제에서는 변경할 수 없는 키를 가진 개체를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:System.Collections.ObjectModel.KeyedCollection`2">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class that uses the default equality comparer.</source>
          <target state="translated">기본 같음 비교자를 사용하는 <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>A <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 이 사용 하 여 만든 생성자에서 가져온 키의 형식에 대 한 기본 제네릭 같음 비교자를 사용 하 여 <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>To specify a different generic equality comparer, use the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph> constructor or the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor.</source>
          <target state="translated">사용 하 여 다른 제네릭 같음 비교자를 지정 하는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29&gt;</ph> 생성자 또는 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 만들어진 첫 번째 항목을 추가할 때 조회 사전이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">에 항목을 추가 하는 경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 해당 항목의 키가 한 번만 추출 하 고 빠른 검색을 위해 조회 사전에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>This behavior can be overridden by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor and specifying a dictionary creation threshold.</source>
          <target state="translated">사용 하 여이 동작을 재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> 생성자와 사전 작성 임계값을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is abstract (<ph id="ph2">`MustInherit`</ph> in Visual Basic), you must derive from it in order to use it.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 클래스는 추상 클래스입니다 (<ph id="ph2">`MustInherit`</ph> Visual basic에서)를 사용 하기 위해 여기에서 파생 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>In the constructor for your derived type, call the appropriate <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> constructor.</source>
          <target state="translated">파생된 형식에 대 한 생성자에서 호출 적절 한 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</source>
          <target state="translated">같음 비교자 또는 생성자에서 사전 작성 임계값과 같은 기능을 표시할 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">이 생성자는 o (1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소한의 코드 보여줍니다 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: 재정의 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> 메서드 및 공용 생성자를 제공 하는 기본 클래스 생성자에 위임 하 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">코드 예제에서는 대부분의 속성에서 상속 된 메서드 및 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph> 클래스는 포함 하는 매우 간단한 청구 목록을 <ph id="ph2">`OrderItem`</ph> 각각 순서 대로 행 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">키 <ph id="ph1">`OrderItem`</ph> 는 변경할 수는 중요 한 고려 사항에서 파생 된 클래스에 대 한 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>The implementation of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface to use when comparing keys, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default equality comparer for the type of the key, obtained from <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">키를 비교할 때 사용할 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 제네릭 인터페이스의 구현이거나, <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>에서 얻은 키의 형식에 대한 기본 같음 비교자를 사용하려면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class that uses the specified equality comparer.</source>
          <target state="translated">지정된 같음 비교자를 사용하는 <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 만들어진 첫 번째 항목을 추가할 때 조회 사전이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">에 항목을 추가 하는 경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 해당 항목의 키가 한 번만 추출 하 고 빠른 검색을 위해 조회 사전에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>This behavior can be overridden by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor and specifying a dictionary creation threshold.</source>
          <target state="translated">사용 하 여이 동작을 재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> 생성자와 사전 작성 임계값을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is abstract (<ph id="ph2">`MustInherit`</ph> in Visual Basic), you must derive from it in order to use it.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 클래스는 추상 클래스입니다 (<ph id="ph2">`MustInherit`</ph> Visual basic에서)를 사용 하기 위해 여기에서 파생 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>In the constructor for your derived type, call the appropriate <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> constructor.</source>
          <target state="translated">파생된 형식에 대 한 생성자에서 호출 적절 한 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</source>
          <target state="translated">같음 비교자 또는 생성자에서 사전 작성 임계값과 같은 기능을 표시할 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">이 생성자는 o (1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The implementation of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface to use when comparing keys, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> to use the default equality comparer for the type of the key, obtained from <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>.</source>
          <target state="translated">키를 비교할 때 사용할 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 제네릭 인터페이스의 구현이거나, <ph id="ph3">&lt;see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /&gt;</ph>에서 얻은 키의 형식에 대한 기본 같음 비교자를 사용하려면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or –1 to specify that a lookup dictionary is never created.</source>
          <target state="translated">컬렉션에서 조회 사전을 만들지 않고 저장할 수 있는 요소의 수입니다. 0을 지정하면 첫 번째 항목을 추가할 때 조회 사전이 만들어지고, -1을 지정하면 조회 사전이 만들어지지 않습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</source>
          <target state="translated">지정된 같음 비교자를 사용하고 지정된 임계값이 초과되면 조회 사전을 만드는 <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 만들어진 첫 번째 항목을 추가할 때 조회 사전이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">에 항목을 추가 하는 경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 해당 항목의 키가 한 번만 추출 하 고 빠른 검색을 위해 조회 사전에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>This constructor allows you to override that behavior.</source>
          <target state="translated">이 생성자를 사용 하면 해당 동작을 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</source>
          <target state="translated">첫 번째 요소가 추가 되 면 사전 만들려는 0, 두 번째 요소를 추가 하는 사전을 만들려면 1을 및 등을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>If you specify –1 as the threshold, the lookup dictionary is never created.</source>
          <target state="translated">임계값으로-1을 지정 하면 조회 사전이 만들어지지 않습니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</source>
          <target state="translated">매우 작은 컬렉션에 대 한 조회 사전을에서 제공 하는 검색 속도가 향상 사전에 필요한 추가 메모리 가치가 아닐 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Setting a threshold allows you to decide when to make that tradeoff.</source>
          <target state="translated">임계값을 설정 하 게 조정할 시기를 결정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> class is abstract (<ph id="ph2">`MustInherit`</ph> in Visual Basic), you must derive from it in order to use it.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 클래스는 추상 클래스입니다 (<ph id="ph2">`MustInherit`</ph> Visual basic에서)를 사용 하기 위해 여기에서 파생 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>In the constructor for your derived type, call the appropriate <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> constructor.</source>
          <target state="translated">파생된 형식에 대 한 생성자에서 호출 적절 한 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</source>
          <target state="translated">같음 비교자 또는 생성자에서 사전 작성 임계값과 같은 기능을 표시할 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">이 생성자는 o (1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 방법에 대 한 사용자 지정 동작을 제공 하는 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> 메서드, 및에 대 한 기본 설정 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> 속성 (C# 인덱서).</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">이 예에서 제공 하는 사용자 지정 동작은 라는 알림 이벤트는 <ph id="ph1">`Changed`</ph>, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</source>
          <target state="translated">사용 하 여 코드 예제는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> 임계값이 0 이면 생성자 내부 사전 개체가 처음으로 만들어질 수 있도록이 컬렉션에 추가 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`SimpleOrder`</ph> 클래스에서 파생 되 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 간단한 주문서를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">주문 양식 포함 <ph id="ph1">`OrderItem`</ph> 주문한 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">코드 예제에서는 한 <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">코드 예제에는 파생된 클래스의 메서드와 속성을 호출 하 여 사용자 지정 동작을 보여 줍니다.는 <ph id="ph1">`Main`</ph> 의 메서드는 <ph id="ph2">`Demo`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">이 코드 예제에서는 변경할 수 없는 키를 가진 개체를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="dictionaryCreationThreshold" /&gt;</ph> is less than –1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dictionaryCreationThreshold" /&gt;</ph>가 -1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The element to change the key of.</source>
          <target state="translated">키를 변경할 요소입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The new key for <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>항목<ept id="p1">&lt;/c&gt;</ept>의 새 키입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Changes the key associated with the specified element in the lookup dictionary.</source>
          <target state="translated">조회 사전의 지정된 요소와 연결된 키를 변경합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This method does not modify the key embedded in <ph id="ph1">`item`</ph>; it simply replaces the key saved in the lookup dictionary.</source>
          <target state="translated">이 메서드는에 포함 된 키를 수정 하지 않습니다 <ph id="ph1">`item`</ph>; 단순히 조회 사전에 저장 된 키를 대체 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Therefore, if <ph id="ph1">`newKey`</ph> is different from the key that is embedded in <ph id="ph2">`item`</ph>, you cannot access <ph id="ph3">`item`</ph> by using the key returned by <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>.</source>
          <target state="translated">따라서 경우 <ph id="ph1">`newKey`</ph> 에 포함 된 키와에서 다른 <ph id="ph2">`item`</ph>, 액세스할 수 없습니다 <ph id="ph3">`item`</ph> 가 반환한 키를 사용 하 여 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This method does nothing if the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> does not have a lookup dictionary.</source>
          <target state="translated">이 메서드는 아무 작업도 수행 하는 경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 조회 사전이 없습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Every key in a <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> must be unique.</source>
          <target state="translated">모든 키에는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 고유 해야 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>A key cannot be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">키 일 수 없습니다 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Notes for Implementers</source>
          <target state="translated">구현자 참고 사항</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</source>
          <target state="translated">항목에 포함 된 키를 수정 하기 전에 조회 사전의 키를 업데이트 하려면이 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>If the dictionary creation threshold is –1, calling this method is not necessary.</source>
          <target state="translated">사전 작성 임계값-1 이면이 메서드를 호출할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Do not expose the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method as a public method of a derived class.</source>
          <target state="translated">노출 하지 마십시오.는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> 파생된 클래스의 공용 메서드로 메서드.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Misuse of this method puts the lookup dictionary out of sync with item keys.</source>
          <target state="translated">이 메서드를 잘못 사용 하면 조회 사전이 동기화 항목 키와 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>For example, setting the key to <ph id="ph1">`null`</ph> and then setting it to another value adds multiple keys for an item to the lookup dictionary.</source>
          <target state="translated">예를 들어 키를 설정 <ph id="ph1">`null`</ph> 조회 사전에 있는 항목에 대해 여러 키를 추가 다음 다른 값으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</source>
          <target state="translated">이 메서드를 내부적으로 가능한 항목 키 수 있도록 노출: 조회 사전의 키를 변경 하려면이 메서드는 키 항목에 대 한 변경 될 때입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> 변경할 수 있는 키 및 보호 된 재정의 하는 방법을 지원 하기 위해 메서드에 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 키의 무결성을 유지 하는 메서드 및 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`MutableKeys`</ph> 에서 파생 되는 컬렉션 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 및 <ph id="ph3">`MutableKey`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph> 클래스에는 설정 가능한 <ph id="ph2">`Key`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">속성 setter를 호출 하 여 새 키를 속성에 할당 된 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic의) <ph id="ph3">`ChangeKey`</ph> 기존 키와 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">이 경우 예외가 throw 되 고 속성 값이 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">연결을 유지 하기 위해는 <ph id="ph1">`MutableKey`</ph> 개체 및 <ph id="ph2">`MutableKeys`</ph> 컬렉션 개체를 두 개의 컬렉션에 삽입 되지 않도록 하 고는 <ph id="ph3">`MutableKey`</ph> 클래스에는 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual basic에서) <ph id="ph6">`Collection`</ph>필드입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">필드는 항목 컬렉션에 추가 되 고 해당 항목이 제거 될 때 삭제 때 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="item" /&gt;</ph> is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="item" /&gt;</ph>가 없는 경우</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> already exists in the <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>에 이미 있는 경우</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Removes all elements from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>에서 모든 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>If there is a lookup dictionary, this method clears it but does not delete it.</source>
          <target state="translated">조회 사전이 이면이 메서드는 지우지만 삭제 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>If the number of elements has exceeded the dictionary creation threshold and the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</source>
          <target state="translated">요소 수가 사전 생성 임계값을 초과 하는 경우 및 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 는를 사용 하 여 조회 사전의 요소 수가 임계값 보다 작습니다. 다시 계속에서 조회 사전을 사용 하 여, 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Notes for Implementers</source>
          <target state="translated">구현자 참고 사항</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Override this method to provide customized behavior for the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> method, inherited from the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class.</source>
          <target state="translated">동작을 사용자 지정 하려면이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> 에서 상속 된 메서드는 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 제네릭 클래스입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</source>
          <target state="translated">내부 컬렉션의 선택을 취소 하 고 조회 사전을 지울를이 메서드의 기본 클래스 구현을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> method to provide custom behavior for clearing all objects from the collection.</source>
          <target state="translated">이 섹션에는 재정의 하는 방법을 보여 주는 두 가지 코드 예제가 포함 되어는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph> 메서드를 컬렉션에서 모든 개체를 지우기 위한 사용자 지정 동작을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">첫 번째 예제에서는 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 가진 개체의 컬렉션에 대 한 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Example 1</source>
          <target state="translated">예제 1</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 방법에 대 한 사용자 지정 동작을 제공 하는 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> 메서드, 및에 대 한 기본 설정 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> 속성 (C# 인덱서).</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">이 예에서 제공 하는 사용자 지정 동작은 라는 알림 이벤트는 <ph id="ph1">`Changed`</ph>, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`SimpleOrder`</ph> 클래스에서 파생 되 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 간단한 주문서를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">주문 양식 포함 <ph id="ph1">`OrderItem`</ph> 주문한 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">코드 예제에서는 한 <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">코드 예제에는 파생된 클래스의 메서드와 속성을 호출 하 여 사용자 지정 동작을 보여 줍니다.는 <ph id="ph1">`Main`</ph> 의 메서드는 <ph id="ph2">`Demo`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">이 코드 예제에서는 변경할 수 없는 키를 가진 개체를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>Example 2</source>
          <target state="translated">예제 2</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> 변경할 수 있는 키 및 보호 된 재정의 하는 방법을 지원 하기 위해 메서드에 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 키의 무결성을 유지 하는 메서드 및 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`MutableKeys`</ph> 에서 파생 되는 컬렉션 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 및 <ph id="ph3">`MutableKey`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph> 클래스에는 설정 가능한 <ph id="ph2">`Key`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">속성 setter를 호출 하 여 새 키를 속성에 할당 된 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic의) <ph id="ph3">`ChangeKey`</ph> 기존 키와 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">이 경우 예외가 throw 되 고 속성 값이 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">연결을 유지 하기 위해는 <ph id="ph1">`MutableKey`</ph> 개체 및 <ph id="ph2">`MutableKeys`</ph> 컬렉션 개체를 두 개의 컬렉션에 삽입 되지 않도록 하 고는 <ph id="ph3">`MutableKey`</ph> 클래스에는 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual basic에서) <ph id="ph6">`Collection`</ph>필드입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">필드는 항목 컬렉션에 추가 되 고 해당 항목이 제거 될 때 삭제 때 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
          <source>Gets the generic equality comparer that is used to determine equality of keys in the collection.</source>
          <target state="translated">컬렉션에 있는 키가 같은지 확인하는 데 사용되는 제네릭 같음 비교자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
          <source>The implementation of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> generic interface that is used to determine equality of keys in the collection.</source>
          <target state="translated">컬렉션에 있는 키의 같음 여부를 확인하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> 제네릭 인터페이스의 구현입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>에서 찾을 수 있는 키입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>Determines whether the collection contains an element with the specified key.</source>
          <target state="translated">컬렉션에 지정된 키를 가진 요소가 포함된지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>에 지정한 키가 있는 요소가 포함되어 있으면 <ph id="ph2">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary, <ph id="ph2">`key`</ph> is used to search the dictionary.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 조회 사전이 <ph id="ph2">`key`</ph> 사전을 검색 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>If there is no lookup dictionary, the key of each element is extracted using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and compared with the specified key.</source>
          <target state="translated">각 요소의 키를 사용 하 여 추출 조회 사전이 없는 경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> 메서드에 지정된 된 키와 비교 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>This method is an O(1) operation if the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary; otherwise it is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">경우이 메서드는 o (1) 작업에서 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 조회 사전이;는 O 그렇지 않은 경우 (<ph id="ph2">`n`</ph>) 작업, 여기서 <ph id="ph3">`n`</ph> 은 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소한의 코드 보여줍니다 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: 재정의 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> 메서드 및 공용 생성자를 제공 하는 기본 클래스 생성자에 위임 하 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">코드 예제에서는 대부분의 속성에서 상속 된 메서드 및 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph> 클래스는 포함 하는 매우 간단한 청구 목록을 <ph id="ph2">`OrderItem`</ph> 각각 순서 대로 행 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">키 <ph id="ph1">`OrderItem`</ph> 는 변경할 수는 중요 한 고려 사항에서 파생 된 클래스에 대 한 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>Gets the lookup dictionary of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>의 조회 사전을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The lookup dictionary of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>, if it exists; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>의 조회 사전이 있으면 해당 조회 사전이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>By default, the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> includes a lookup dictionary that is created when the first item is added.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 만들어진 첫 번째 항목을 추가할 때 조회 사전이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>When an item is added to the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</source>
          <target state="translated">에 항목을 추가 하는 경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 해당 항목의 키가 한 번만 추출 하 고 빠른 검색을 위해 조회 사전에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>This behavior can be overridden by using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> constructor and specifying a dictionary creation threshold.</source>
          <target state="translated">사용 하 여이 동작을 재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29&gt;</ph> 생성자와 사전 작성 임계값을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> 변경할 수 있는 키 및 보호 된 재정의 하는 방법을 지원 하기 위해 메서드에 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 키의 무결성을 유지 하는 메서드 및 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`MutableKeys`</ph> 에서 파생 되는 컬렉션 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 및 <ph id="ph3">`MutableKey`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph> 클래스에는 설정 가능한 <ph id="ph2">`Key`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">속성 setter를 호출 하 여 새 키를 속성에 할당 된 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic의) <ph id="ph3">`ChangeKey`</ph> 기존 키와 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">이 경우 예외가 throw 되 고 속성 값이 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">연결을 유지 하기 위해는 <ph id="ph1">`MutableKey`</ph> 개체 및 <ph id="ph2">`MutableKeys`</ph> 컬렉션 개체를 두 개의 컬렉션에 삽입 되지 않도록 하 고는 <ph id="ph3">`MutableKey`</ph> 클래스에는 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual basic에서) <ph id="ph6">`Collection`</ph>필드입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">필드는 항목 컬렉션에 추가 되 고 해당 항목이 제거 될 때 삭제 때 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The element from which to extract the key.</source>
          <target state="translated">키를 추출할 요소입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>When implemented in a derived class, extracts the key from the specified element.</source>
          <target state="translated">파생 클래스에서 구현되면 지정된 요소에서 키를 추출합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The key for the specified element.</source>
          <target state="translated">지정된 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>If the key in the lookup dictionary is different from the key that is embedded in <ph id="ph1">`item`</ph>, you cannot access <ph id="ph2">`item`</ph> by using the key returned by <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>.</source>
          <target state="translated">조회 사전의 키에 포함 된 키와에서 다른 경우 <ph id="ph1">`item`</ph>, 액세스할 수 없는 <ph id="ph2">`item`</ph> 가 반환한 키를 사용 하 여 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>You can implement this method to return <ph id="ph1">`null`</ph> for a collection that contains items without keys, in which case the items can be accessed only by their index.</source>
          <target state="translated">반환 하려면이 메서드를 구현할 수 <ph id="ph1">`null`</ph> 키가 없는 항목을 포함 하는 컬렉션에 대 한 경우에 항목에 액세스할 수는 인덱스로 합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>Notes for Implementers</source>
          <target state="translated">구현자 참고 사항</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</source>
          <target state="translated">사전에 사전의 항목에서 키를 추출 하는 방법을 제공 하려면이 메서드를 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>This method is called internally.</source>
          <target state="translated">이 메서드는 내부적으로 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>It is not necessary for it to be public.</source>
          <target state="translated">Public 이어야 할 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소한의 코드 보여줍니다 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: 재정의 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> 메서드 및 공용 생성자를 제공 하는 기본 클래스 생성자에 위임 하 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">코드 예제에서는 대부분의 속성에서 상속 된 메서드 및 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph> 클래스는 포함 하는 매우 간단한 청구 목록을 <ph id="ph2">`OrderItem`</ph> 각각 순서 대로 행 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">키 <ph id="ph1">`OrderItem`</ph> 는 변경할 수는 중요 한 고려 사항에서 파생 된 클래스에 대 한 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The zero-based index at which <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> should be inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>항목<ept id="p1">&lt;/c&gt;</ept>이 삽입될 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The object to insert.</source>
          <target state="translated">삽입할 개체입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Inserts an element into the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph> at the specified index.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>의 지정된 인덱스에 요소를 삽입합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>If <ph id="ph1">`index`</ph> is equal to <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> is added to the end of the <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`index`</ph> 같으면 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>, <ph id="ph3">`item`</ph> 의 끝에 추가 되는 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> is called by the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> 에 의해 호출 됩니다는 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Notes for Implementers</source>
          <target state="translated">구현자 참고 사항</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Override this method to provide customized behavior for the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> methods, inherited from the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class.</source>
          <target state="translated">동작을 사용자 지정 하려면이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Insert%2A&gt;</ph> 에서 상속 된 메서드는 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 제네릭 클래스입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</source>
          <target state="translated">내부 컬렉션에 항목을 삽입 하 고 조회 사전을 업데이트 하려면이 메서드의 기본 클래스 구현을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method to provide custom behavior for adding or inserting objects into the collection.</source>
          <target state="translated">이 섹션에서는 재정의 하는 방법을 보여 주는 두 개의 코드 예는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> 메서드를 추가 하거나 개체를 컬렉션에 삽입 하기 위한 사용자 지정 동작을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">첫 번째 예제에서는 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 가진 개체의 컬렉션에 대 한 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Example 1</source>
          <target state="translated">예제 1</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 방법에 대 한 사용자 지정 동작을 제공 하는 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> 메서드, 및에 대 한 기본 설정 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> 속성 (C# 인덱서).</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">이 예에서 제공 하는 사용자 지정 동작은 라는 알림 이벤트는 <ph id="ph1">`Changed`</ph>, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`SimpleOrder`</ph> 클래스에서 파생 되 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 간단한 주문서를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">주문 양식 포함 <ph id="ph1">`OrderItem`</ph> 주문한 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">코드 예제에서는 한 <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">코드 예제에는 파생된 클래스의 메서드와 속성을 호출 하 여 사용자 지정 동작을 보여 줍니다.는 <ph id="ph1">`Main`</ph> 의 메서드는 <ph id="ph2">`Demo`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">이 코드 예제에서는 변경할 수 없는 키를 가진 개체를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>Example 2</source>
          <target state="translated">예제 2</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> 변경할 수 있는 키 및 보호 된 재정의 하는 방법을 지원 하기 위해 메서드에 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 키의 무결성을 유지 하는 메서드 및 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`MutableKeys`</ph> 에서 파생 되는 컬렉션 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 및 <ph id="ph3">`MutableKey`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph> 클래스에는 설정 가능한 <ph id="ph2">`Key`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">속성 setter를 호출 하 여 새 키를 속성에 할당 된 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic의) <ph id="ph3">`ChangeKey`</ph> 기존 키와 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">이 경우 예외가 throw 되 고 속성 값이 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">연결을 유지 하기 위해는 <ph id="ph1">`MutableKey`</ph> 개체 및 <ph id="ph2">`MutableKeys`</ph> 컬렉션 개체를 두 개의 컬렉션에 삽입 되지 않도록 하 고는 <ph id="ph3">`MutableKey`</ph> 클래스에는 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual basic에서) <ph id="ph6">`Collection`</ph>필드입니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">필드는 항목 컬렉션에 추가 되 고 해당 항목이 제거 될 때 삭제 때 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 <ph id="ph2">&lt;see cref="P:System.Collections.ObjectModel.Collection`1.Count" /&gt;</ph>보다 큰 경우</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The key of the element to get.</source>
          <target state="translated">가져올 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>Gets the element with the specified key.</source>
          <target state="translated">지정된 키를 가진 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The element with the specified key.</source>
          <target state="translated">지정한 키가 있는 요소입니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>If an element with the specified key is not found, an exception is thrown.</source>
          <target state="translated">지정된 키를 가진 요소가 없으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> in Visual Basic).</source>
          <target state="translated">이 속성은 다음 구문을 사용 하 여 컬렉션의 특정 요소를 액세스 하는 기능 제공: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> Visual basic에서).</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>This property is distinct from the inherited <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> property, which gets and sets elements by numeric index.</source>
          <target state="translated">이 속성은 상속 된 구별 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> 속성을 숫자 인덱스에서 요소를 가져오거나 설정 합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>However, if <ph id="ph1">`TKey`</ph> is of type <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, this property masks the inherited property.</source>
          <target state="translated">그러나 경우 <ph id="ph1">`TKey`</ph> 유형의 <ph id="ph2">&lt;xref:System.Int32&gt;</ph>,이 속성이 상속 된 속성을 마스크 합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>In that case, you can access the inherited property by casting the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> to its base type.</source>
          <target state="translated">이 경우 캐스팅 하 여 상속 된 속성에 액세스할 수 있습니다는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 해당 기본 형식에 있습니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>For example, <ph id="ph1">`KeyedCollection&lt;int, MyType&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of Integer, MyType)`</ph> in Visual Basic, <ph id="ph3">`KeyedCollection&lt;int, MyType^&gt;`</ph> in C++) can be cast to <ph id="ph4">`Collection&lt;MyType&gt;`</ph> (<ph id="ph5">`Collection(Of MyType)`</ph> in Visual Basic, <ph id="ph6">`Collection&lt;MyType^&gt;`</ph> in C++).</source>
          <target state="translated">예를 들어 <ph id="ph1">`KeyedCollection&lt;int, MyType&gt;`</ph> (<ph id="ph2">`KeyedCollection(Of Integer, MyType)`</ph> Visual Basic의 <ph id="ph3">`KeyedCollection&lt;int, MyType^&gt;`</ph> c + +에서)으로 캐스팅 될 수 <ph id="ph4">`Collection&lt;MyType&gt;`</ph> (<ph id="ph5">`Collection(Of MyType)`</ph> Visual Basic의 <ph id="ph6">`Collection&lt;MyType^&gt;`</ph> c + +에서).</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary, <ph id="ph2">`key`</ph> is used to retrieve the element from the dictionary.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 조회 사전이 <ph id="ph2">`key`</ph> 사전에서 요소를 검색 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>If there is no lookup dictionary, the key of each element is extracted using the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and compared with the specified key.</source>
          <target state="translated">각 요소의 키를 사용 하 여 추출 조회 사전이 없는 경우는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> 메서드에 지정된 된 키와 비교 합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 언어의 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A&gt;</ph>을 기본 속성으로 구현합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>Retrieving the value of this property is an O(1) operation if the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> has a lookup dictionary; otherwise it is an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">경우이 속성의 값을 검색 하는 o (1) 작업에서 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 조회 사전이;는 O 그렇지 않은 경우 (<ph id="ph2">`n`</ph>) 작업, 여기서 <ph id="ph3">`n`</ph> 은 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소한의 코드 보여줍니다 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: 재정의 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> 메서드 및 공용 생성자를 제공 하는 기본 클래스 생성자에 위임 하 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">코드 예제에서는 대부분의 속성에서 상속 된 메서드 및 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The code example calls both the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, which is read-only and retrieves by key, and the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> property, which is settable and retrieves by index.</source>
          <target state="translated">코드 예제에서는 모두 호출는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> 속성을 키로 검색 하는 읽기 전용, 및 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> 인덱스로 검색 하는 설정 가능한 속성입니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</source>
          <target state="translated">파생된 컬렉션의 개체는 정수 키를 인덱스 검색에 사용 되는 정수 구별할 때 두 번째 속성을 액세스 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph> 클래스는 포함 하는 매우 간단한 청구 목록을 <ph id="ph2">`OrderItem`</ph> 각각 순서 대로 행 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">키 <ph id="ph1">`OrderItem`</ph> 는 변경할 수는 중요 한 고려 사항에서 파생 된 클래스에 대 한 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
          <source>An element with the specified key does not exist in the collection.</source>
          <target state="translated">지정된 키를 가진 요소가 컬렉션에 없는 경우</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The key of the element to remove.</source>
          <target state="translated">제거할 요소의 키입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>에서 키가 지정된 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is successfully removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">요소가 제거되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is not found in the <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;see langword="false" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="key" /&gt;</ph>에 없는 경우에도 <ph id="ph3">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The key of the element is also removed from the lookup dictionary.</source>
          <target state="translated">요소의 키 에서도 조회 사전에서 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>If the number of elements has exceeded the dictionary creation threshold and the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</source>
          <target state="translated">요소 수가 사전 생성 임계값을 초과 하는 경우 및 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 는를 사용 하 여 조회 사전의 요소 수가 임계값 보다 작습니다. 다시 계속에서 조회 사전을 사용 하 여, 합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>To customize the behavior of this method, override the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> method.</source>
          <target state="translated">이 방법의 동작을 사용자 지정 하려면 재정의 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>This code example shows the minimum code necessary to derive a collection class from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: overriding the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> method and providing a public constructor that delegates to a base class constructor.</source>
          <target state="translated">이 코드 예제에서 컬렉션 클래스를 파생 하는 데 필요한 최소한의 코드 보여줍니다 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>: 재정의 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A&gt;</ph> 메서드 및 공용 생성자를 제공 하는 기본 클래스 생성자에 위임 하 합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The code example also demonstrates many of the properties and methods inherited from <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> classes.</source>
          <target state="translated">코드 예제에서는 대부분의 속성에서 상속 된 메서드 및 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The example demonstrates <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> method inherited from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, which removes the item with a specified key, and also the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> methods inherited from <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>, which remove by object and by index respectively.</source>
          <target state="translated">예제에 나오는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph> 에서 상속 된 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 지정 된 키를 가진 항목을 제거 하 그리고는 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A&gt;</ph> 에서 상속 된 메서드 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>는 개체와 인덱스로 각각 제거 합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The <ph id="ph1">`SimpleOrder`</ph> class is a very simple requisition list that contains <ph id="ph2">`OrderItem`</ph> objects, each of which represents a line item in the order.</source>
          <target state="translated"><ph id="ph1">`SimpleOrder`</ph> 클래스는 포함 하는 매우 간단한 청구 목록을 <ph id="ph2">`OrderItem`</ph> 각각 순서 대로 행 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>The key of <ph id="ph1">`OrderItem`</ph> is immutable, an important consideration for classes that derive from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>.</source>
          <target state="translated">키 <ph id="ph1">`OrderItem`</ph> 는 변경할 수는 중요 한 고려 사항에서 파생 된 클래스에 대 한 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The index of the element to remove.</source>
          <target state="translated">제거할 요소의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Removes the element at the specified index of the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /&gt;</ph>의 지정된 인덱스에 있는 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The key of the element is also removed from the lookup dictionary.</source>
          <target state="translated">요소의 키 에서도 조회 사전에서 제거 됩니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>If the number of elements has exceeded the dictionary creation threshold and the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</source>
          <target state="translated">요소 수가 사전 생성 임계값을 초과 하는 경우 및 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 는를 사용 하 여 조회 사전의 요소 수가 임계값 보다 작습니다. 다시 계속에서 조회 사전을 사용 하 여, 합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>.</source>
          <target state="translated">이 메서드는 O는 (<ph id="ph1">`n`</ph>) 작업, 여기서 <ph id="ph2">`n`</ph> 은 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601.Count%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Notes for Implementers</source>
          <target state="translated">구현자 참고 사항</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Override this method to provide customized behavior for the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29&gt;</ph> methods, inherited from the <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class, and the <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29&gt;</ph> method.</source>
          <target state="translated">동작을 사용자 지정 하려면이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29&gt;</ph> 에서 상속 된 메서드는 <ph id="ph3">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 제네릭 클래스와 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</source>
          <target state="translated">기본 컬렉션에서 항목을 제거 하 고 조회 사전을 업데이트를이 메서드의 기본 클래스 구현을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> method to provide custom behavior for removing objects from the collection.</source>
          <target state="translated">이 섹션에는 재정의 하는 방법을 보여 주는 두 가지 코드 예제가 포함 되어는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph> 메서드를 컬렉션에서 개체 제거에 대 한 사용자 지정 동작을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">첫 번째 예제에서는 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 가진 개체의 컬렉션에 대 한 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Example 1</source>
          <target state="translated">예제 1</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 방법에 대 한 사용자 지정 동작을 제공 하는 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> 메서드, 및에 대 한 기본 설정 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> 속성 (C# 인덱서).</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">이 예에서 제공 하는 사용자 지정 동작은 라는 알림 이벤트는 <ph id="ph1">`Changed`</ph>, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`SimpleOrder`</ph> 클래스에서 파생 되 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 간단한 주문서를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">주문 양식 포함 <ph id="ph1">`OrderItem`</ph> 주문한 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">코드 예제에서는 한 <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">코드 예제에는 파생된 클래스의 메서드와 속성을 호출 하 여 사용자 지정 동작을 보여 줍니다.는 <ph id="ph1">`Main`</ph> 의 메서드는 <ph id="ph2">`Demo`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">이 코드 예제에서는 변경할 수 없는 키를 가진 개체를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>Example 2</source>
          <target state="translated">예제 2</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> 변경할 수 있는 키 및 보호 된 재정의 하는 방법을 지원 하기 위해 메서드에 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 키의 무결성을 유지 하는 메서드 및 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`MutableKeys`</ph> 에서 파생 되는 컬렉션 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 및 <ph id="ph3">`MutableKey`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph> 클래스에는 설정 가능한 <ph id="ph2">`Key`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">속성 setter를 호출 하 여 새 키를 속성에 할당 된 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic의) <ph id="ph3">`ChangeKey`</ph> 기존 키와 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">이 경우 예외가 throw 되 고 속성 값이 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">연결을 유지 하기 위해는 <ph id="ph1">`MutableKey`</ph> 개체 및 <ph id="ph2">`MutableKeys`</ph> 컬렉션 개체를 두 개의 컬렉션에 삽입 되지 않도록 하 고는 <ph id="ph3">`MutableKey`</ph> 클래스에는 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual basic에서) <ph id="ph6">`Collection`</ph>필드입니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">필드는 항목 컬렉션에 추가 되 고 해당 항목이 제거 될 때 삭제 때 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The zero-based index of the item to be replaced.</source>
          <target state="translated">바꿀 항목의 0부터 시작하는 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The new item.</source>
          <target state="translated">새 항목입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Replaces the item at the specified index with the specified item.</source>
          <target state="translated">지정된 인덱스에 있는 항목을 지정된 항목으로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The lookup dictionary is updated accordingly.</source>
          <target state="translated">조회 사전이 그에 따라 업데이트 됩니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</source>
          <target state="translated">즉, 대체 되는 항목의 키 조회 사전에서 제거 되 고 새 항목의 키 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Notes for Implementers</source>
          <target state="translated">구현자 참고 사항</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Override this method to provide customized behavior for setting the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property inherited from the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> generic class.</source>
          <target state="translated">설정에 대 한 동작을 사용자 지정 하려면이 메서드를 재정의 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> 속성에서 상속 된 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> 제네릭 클래스입니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This method does not affect the behavior of the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> property, which is read-only.</source>
          <target state="translated">이 메서드는의 동작에 영향을 주지 않는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType&gt;</ph> 속성이 읽기 전용으로 설정 되어 만들어져야 합니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</source>
          <target state="translated">기본 컬렉션에서 항목을 설정 하 고 조회 사전을 업데이트할이 메서드의 기본 클래스 구현을 호출 합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This section contains two code examples that demonstrate overriding the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> method to provide custom behavior for setting the <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">이 섹션에서는 재정의 하는 방법을 보여 주는 두 개의 코드 예는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 설정에 대 한 사용자 지정 동작을 제공 하는 메서드는 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</source>
          <target state="translated">첫 번째 예제에서는 사용자 지정 알림 이벤트를 추가 하 고 두 번째 변경할 수 있는 키를 가진 개체의 컬렉션에 대 한 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Example 1</source>
          <target state="translated">예제 1</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods, to provide custom behavior for the <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> methods, and for setting the default <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 방법에 대 한 사용자 지정 동작을 제공 하는 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.Collection%601.Add%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Collections.ObjectModel.Collection%601.Clear%2A&gt;</ph> 메서드, 및에 대 한 기본 설정 <ph id="ph8">&lt;xref:System.Collections.ObjectModel.Collection%601.Item%2A&gt;</ph> 속성 (C# 인덱서).</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The custom behavior provided in this example is a notification event named <ph id="ph1">`Changed`</ph>, which is raised at the end of each of the overridden methods.</source>
          <target state="translated">이 예에서 제공 하는 사용자 지정 동작은 라는 알림 이벤트는 <ph id="ph1">`Changed`</ph>, 재정의 된 메서드의 각 끝 부분에서 발생 하는 합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`SimpleOrder`</ph> class, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> and represents a simple order form.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`SimpleOrder`</ph> 클래스에서 파생 되 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph> 간단한 주문서를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The order form contains <ph id="ph1">`OrderItem`</ph> objects representing items ordered.</source>
          <target state="translated">주문 양식 포함 <ph id="ph1">`OrderItem`</ph> 주문한 항목을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example also creates a <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> class to contain the event information, and an enumeration to identify the type of change.</source>
          <target state="translated">코드 예제에서는 한 <ph id="ph1">`SimpleOrderChangedEventArgs`</ph> 변경의 유형을 식별 하는 열거형과 이벤트 정보를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the <ph id="ph1">`Main`</ph> method of the <ph id="ph2">`Demo`</ph> class.</source>
          <target state="translated">코드 예제에는 파생된 클래스의 메서드와 속성을 호출 하 여 사용자 지정 동작을 보여 줍니다.는 <ph id="ph1">`Main`</ph> 의 메서드는 <ph id="ph2">`Demo`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This code example uses objects with immutable keys.</source>
          <target state="translated">이 코드 예제에서는 변경할 수 없는 키를 가진 개체를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>For a code example that uses mutable keys, see <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>.</source>
          <target state="translated">변경할 수 있는 키를 사용 하는 코드 예제를 보려면 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>Example 2</source>
          <target state="translated">예제 2</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The following code example shows how to override the protected <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> method to support mutable keys, and how to override the protected <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> methods to maintain the integrity of the keys and the collection.</source>
          <target state="translated">다음 코드 예제에서는 보호 된 재정의 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A&gt;</ph> 변경할 수 있는 키 및 보호 된 재정의 하는 방법을 지원 하기 위해 메서드에 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A&gt;</ph> 키의 무결성을 유지 하는 메서드 및 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The code example creates the <ph id="ph1">`MutableKeys`</ph> collection, which derives from <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, and the <ph id="ph3">`MutableKey`</ph> class.</source>
          <target state="translated">코드 예제는 <ph id="ph1">`MutableKeys`</ph> 에서 파생 되는 컬렉션 <ph id="ph2">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602&gt;</ph>, 및 <ph id="ph3">`MutableKey`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The <ph id="ph1">`MutableKey`</ph> class has a settable <ph id="ph2">`Key`</ph> property.</source>
          <target state="translated"><ph id="ph1">`MutableKey`</ph> 클래스에는 설정 가능한 <ph id="ph2">`Key`</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>When a new key is assigned to the property, the property setter calls the <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) <ph id="ph3">`ChangeKey`</ph> method of the collection to test whether the new key would conflict with an existing key.</source>
          <target state="translated">속성 setter를 호출 하 여 새 키를 속성에 할당 된 <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> Visual Basic의) <ph id="ph3">`ChangeKey`</ph> 기존 키와 새 키 충돌 여부를 테스트 하려면 컬렉션의 메서드.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>If so, an exception is thrown and the property value is not changed.</source>
          <target state="translated">이 경우 예외가 throw 되 고 속성 값이 변경 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>In order to maintain the connection between a <ph id="ph1">`MutableKey`</ph> object and the <ph id="ph2">`MutableKeys`</ph> collection and to prevent an object from being inserted into two collections, the <ph id="ph3">`MutableKey`</ph> class has an <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> in Visual Basic) <ph id="ph6">`Collection`</ph> field.</source>
          <target state="translated">연결을 유지 하기 위해는 <ph id="ph1">`MutableKey`</ph> 개체 및 <ph id="ph2">`MutableKeys`</ph> 컬렉션 개체를 두 개의 컬렉션에 삽입 되지 않도록 하 고는 <ph id="ph3">`MutableKey`</ph> 클래스에는 <ph id="ph4">`internal`</ph> (<ph id="ph5">`Friend`</ph> Visual basic에서) <ph id="ph6">`Collection`</ph>필드입니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> method.</source>
          <target state="translated">이 필드는 추가 및와 같은 컬렉션에서 항목을 제거 하기 위한 사용자 지정 동작을 제공 하는 보호 된 메서드에 의해 유지 관리는 <ph id="ph1">&lt;xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
          <source>The field is set when the item is added to a collection and cleared when the item is removed.</source>
          <target state="translated">필드는 항목 컬렉션에 추가 되 고 해당 항목이 제거 될 때 삭제 때 설정 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>