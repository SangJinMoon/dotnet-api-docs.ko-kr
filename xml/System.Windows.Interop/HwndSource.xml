<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HwndSource.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac533c0f0aed38ddef50ff2601a1a6d4a1fda2a2fae.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33c0f0aed38ddef50ff2601a1a6d4a1fda2a2fae</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Interop.HwndSource">
          <source>Presents Windows Presentation Foundation (WPF) content in a Win32 window.</source>
          <target state="translated">Win32 창에 WPF(Windows Presentation Foundation) 콘텐츠를 표시합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Many members of this class are unavailable in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 클래스의 많은 멤버는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> implements a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> window that can contain <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 구현 하는 <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 포함 될 수 있는 창 <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content in the window is arranged, measured, and rendered; and is interactive to input.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 콘텐츠 창에서 측정 및 렌더링 하 고는 입력에 대화형 정렬 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> is specifically designed to interoperate with <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>, this class exposes several low-level <ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> features.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 와 상호 운용 하도록 설계 된 <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph>,이 클래스는 여러 가지 하위 수준의 노출 <ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 기능입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>You can use this class to do the following:</source>
          <target state="translated">이 클래스는 다음 작업을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Specify window styles, window class styles, and extended window styles.</source>
          <target state="translated">창 스타일, 창 클래스 스타일을 지정 하 고 확장 된 창 스타일입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Hook the window procedure.</source>
          <target state="translated">창 프로시저를 연결 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Provide access to the window handle (HWND).</source>
          <target state="translated">창 핸들 (HWND)에 대 한 액세스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Destroy the window.</source>
          <target state="translated">창을 소멸 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> class is designed for general interoperability and is not designed as a managed HWND wrapper.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 클래스는 일반 상호 운용성을 위해 설계 되었으며 관리 되는 HWND 래퍼로 설계 되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>In general, it does not provide managed methods for manipulating the window or properties for inspecting its state.</source>
          <target state="translated">일반적으로 창 또는 상태를 검사 하는 것에 대 한 속성을 조작 하기 위한 관리 되는 메서드를 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> class provides access to the <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> window handle (HWND) through the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;</ph> property, which can be passed by means of PInvoke techniques to <ph id="ph4">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph5">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in order to manipulate the window.</source>
          <target state="translated">대신,는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 클래스에 대 한 액세스를 제공는 <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 창 핸들 (HWND)을 통해는 <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;</ph> PInvoke 기술을 사용 하 여 전달 될 수 있는 속성 <ph id="ph4">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph5">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> 창을 조작 하기 위해 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source><bpt id="p1">**</bpt>Construction<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>생성<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Many aspects of the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> can only be specified at construction time.</source>
          <target state="translated">여러 측면에서 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 생성 시 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>To create an <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, first create an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> structure and populate it with the desired parameters.</source>
          <target state="translated">만들려는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>을 먼저 만듭니다는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> 구조체 지정 하 고 원하는 매개 변수를 채웁니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>These parameters include the following:</source>
          <target state="translated">이러한 매개 변수는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The class, window, and extended window styles.</source>
          <target state="translated">클래스, 창 및 확장된 창 스타일입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>You must use PInvoke to change the styles after the window is created.</source>
          <target state="translated">창을 만든 후 스타일을 변경 하려면 PInvoke를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Not all styles can be changed after the window is created.</source>
          <target state="translated">창을 만든 후에 일부 스타일을 변경할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Consult the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> documentation before changing window styles.</source>
          <target state="translated">참조는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 창 스타일을 변경 하기 전에 문서.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The initial position of the window.</source>
          <target state="translated">윈도우의 초기 위치입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The initial size of the window, which includes whether the size is specified or should be determined from the determined size of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
          <target state="translated">지정 된 크기나의 결정된 된 크기에서 결정 해야 하는지 여부를 포함 하는 창의의 초기 크기는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The parent window.</source>
          <target state="translated">부모 창입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceHook&gt;</ph> to include in the window procedure chain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceHook&gt;</ph> 창 프로시저 체인에 포함 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>If you specify a hook at construction time, it receives all messages for the window.</source>
          <target state="translated">생성 시 후크를 지정 하는 경우 모든 창의 메시지를 받습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> to add a hook after the window is created.</source>
          <target state="translated">사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> 창을 만든 후 후크를를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The transparency settings.</source>
          <target state="translated">투명도 설정 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>A top-level window can be configured to blend with the other windows on the desktop according to the per-pixel transparency of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
          <target state="translated">픽셀 별 투명도 따라 바탕 화면에서 다른 창이와 혼합 하는 최상위 창을 구성할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>To enable this, set the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt;</ph> property in the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">이 작업이 가능 하도록 설정 된 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A&gt;</ph> 속성에는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> 를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>This property can only be specified at construction time, and only through the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;</ph> constructor signature, and it imposes several limitations.</source>
          <target state="translated">이 속성을 통해서만 생성 시에 지정할 수는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;</ph> 생성자 시그니처 하며 여러 가지 제한을 적용 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>After you populate the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> structure, pass it to the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;</ph> constructor for the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
          <target state="translated">채운 후는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> 구조을에 전달 된 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29&gt;</ph> 에 대 한 생성자는 <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source><bpt id="p1">**</bpt>Object Lifetime<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>개체 수명<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> is a regular <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> object, and its lifetime is managed by the garbage collector.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 는 일반 <ph id="ph2">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> 가비지 수집기에 의해 관리 되는 개체와 수명이 있습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Because the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> represents an unmanaged resource, <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> implements <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph>.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 는 관리 되지 않는 리소스를 나타내는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 구현 <ph id="ph3">&lt;xref:System.IDisposable&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Synchronously calling <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> immediately destroys the <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> window if called from the owner thread.</source>
          <target state="translated">동기적으로 호출 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 즉시 소멸는 <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 창 소유자 스레드에서 호출 하는 경우.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>If called from another thread, the <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> window is destroyed asynchronously.</source>
          <target state="translated">다른 스레드에서 호출 하는 경우는 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 창이 비동기적으로 소멸 됩니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> explicitly from the interoperating code might be necessary for certain interoperation scenarios.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 명시적으로 운용 코드에서에 필요할 수 있습니다 특정 상호 운용 시나리오입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source><bpt id="p1">**</bpt>Window Procedures<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>창 프로시저<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> class implements its own window procedure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 클래스는 자체 창 프로시저를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>This window procedure is used to process important window messages, such as those related to layout, rendering, and input.</source>
          <target state="translated">이 창 프로시저 등과 레이아웃, 렌더링, 관련 된 중요 한 창 메시지를 처리 하는 데 사용 하며 입력 됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>However, you can also hook the window procedure for your own use.</source>
          <target state="translated">그러나 사용자는 용도 대 한 창 프로시저도 후크 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>You can specify your own hook during construction by setting the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=nameWithType&gt;</ph> property, or you can also use <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt;</ph> to add and remove hooks after the window is created.</source>
          <target state="translated">설정 하 여 사용자 고유의 후크를 생성 하는 동안 지정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters.HwndSourceHook%2A?displayProperty=nameWithType&gt;</ph> 속성 또는 있습니다 사용할 수도 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.RemoveHook%2A&gt;</ph> 추가 하 고 창을 만든 후 후크를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The hooks are called by last-in first-out order, which enables your hooks to execute before the built-in processing.</source>
          <target state="translated">후크를 기본 제공 처리 되기 전에 실행할 마지막 순서는 후크를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>The actual hooks are held by a weak reference.</source>
          <target state="translated">실제 후크 약한 참조로 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Therefore, make sure that you manage the lifetime of your hook delegate.</source>
          <target state="translated">따라서, 후크 대리자의 수명을 관리 하 고 있는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>For more information about <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> and other interoperation classes, see <bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 기타 상호 운용 클래스 참조 및 <bpt id="p1">[</bpt>WPF 및 Win32 상호 운용<ept id="p1">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Notice how the constructors for <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> take parameters that resemble the parameters for <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> functions such as <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=98462)</ept>.</source>
          <target state="translated">알림 방법에 대 한 생성자 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 유사한 매개 변수를 매개 변수를 사용 <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> 와 같은 함수가 <bpt id="p1">[</bpt>CreateWindowEx<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=98462)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>Scale transformations should not be applied to the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
          <target state="translated">크기 조정 변환을에 적용 해야는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="T:System.Windows.Interop.HwndSource">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Interop.HwndSource">
          <source>This method is not available in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
          <source>A structure that contains the parameters that are required to create the window.</source>
          <target state="translated">창을 만드는 데 필요한 매개 변수가 포함된 구조체입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> class by using a structure that contains the initial settings.</source>
          <target state="translated">초기 설정을 포함하는 구조체를 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
          <source>This method is not available in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
          <source>This constructor signature might be more convenient in certain situations, because the default structure contains some appropriate initial default values.</source>
          <target state="translated">이 생성자 시그니처 기본 구조는 몇 가지 초기 기본 적절 한 값을 포함 하기 때문에 특정 한 상황에서 더 편리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
          <source>If you use this signature, do not use the default <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> constructor to construct the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> structure for the <ph id="ph3">`parameters`</ph> value.</source>
          <target state="translated">이 서명을 사용 하는 경우 기본값을 사용 하지 마십시오 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> 생성자를 생성 하는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> 에 대 한 구조는 <ph id="ph3">`parameters`</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
          <source>You must use the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> constructor that enables you to specify an initial window name.</source>
          <target state="translated">사용 해야 합니다는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> 초기 창 이름을 지정할 수 있도록 하는 생성자입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
          <source>If you use the default <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> constructor and create an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> with it, that <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> does not display because an initial window name is a construction requirement for the represented HWND.</source>
          <target state="translated">기본값을 사용 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters&gt;</ph> 생성자 만듭니다는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> ,는 <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 이므로 초기 창 이름이 표현된 된 HWND 생성 하는 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
          <source>to create instances of this class.</source>
          <target state="translated">이 클래스의 인스턴스 만들기</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> class styles for the window.</source>
          <target state="translated">창에 대한 <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> 클래스 스타일입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
          <target state="translated">창에 대한 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 스타일입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The extended <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
          <target state="translated">창에 대한 확장 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 스타일입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The position of the window's left edge.</source>
          <target state="translated">창 왼쪽 가장자리의 위치입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The position of the window's upper edge.</source>
          <target state="translated">창 위쪽 가장자리의 위치입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The name of the window.</source>
          <target state="translated">창의 이름입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The handle of the window's parent window.</source>
          <target state="translated">창의 부모 창의 핸들입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> class with a specified class style, style, extended style, x-y position, name, and parent window.</source>
          <target state="translated">지정된 클래스 스타일, 스타일, 확장 스타일, x-y 위치, 이름 및 부모 창을 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>This method is not available in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>to create instances of this class.</source>
          <target state="translated">이 클래스의 인스턴스 만들기</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> class styles for the window.</source>
          <target state="translated">창에 대한 <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> 클래스 스타일입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
          <target state="translated">창에 대한 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 스타일입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The extended <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
          <target state="translated">창에 대한 확장 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 스타일입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The position of the window's left edge.</source>
          <target state="translated">창 왼쪽 가장자리의 위치입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The position of the window's upper edge.</source>
          <target state="translated">창 위쪽 가장자리의 위치입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The width of the window.</source>
          <target state="translated">창의 너비입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The height of the window.</source>
          <target state="translated">창의 높이입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The name of the window.</source>
          <target state="translated">창의 이름입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>The handle of the window's parent window.</source>
          <target state="translated">창의 부모 창의 핸들입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> class with a specified class style, style, extended style, x-y position, width, height, name, and parent window.</source>
          <target state="translated">지정된 클래스 스타일, 스타일, 확장 스타일, x-y 위치, 너비, 높이, 이름 및 부모 창을 사용하여 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>This method is not available in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>to create instances of this class.</source>
          <target state="translated">이 클래스의 인스턴스 만들기</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> class styles for the window.</source>
          <target state="translated">창에 대한 <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> 클래스 스타일입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
          <target state="translated">창에 대한 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 스타일입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>The extended <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> styles for the window.</source>
          <target state="translated">창에 대한 확장 <ph id="ph1">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 스타일입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>The position of the window's left edge.</source>
          <target state="translated">창 왼쪽 가장자리의 위치입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>The position of the window's upper edge.</source>
          <target state="translated">창 위쪽 가장자리의 위치입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>The width of the window.</source>
          <target state="translated">창의 너비입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>The height of the window.</source>
          <target state="translated">창의 높이입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>The name of the window.</source>
          <target state="translated">창의 이름입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>The handle of the window's parent window.</source>
          <target state="translated">창의 부모 창의 핸들입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to have the layout manager include the non-client area for sizing; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">크기 조정을 위해 레이아웃 관리자에 비클라이언트 영역을 포함하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> class with a specified class style, style, extended style, x-y position, width, height, name, and parent window, and by specifying whether the window is autosized.</source>
          <target state="translated">지정된 클래스 스타일, 스타일, 확장 스타일, x-y 위치, 너비, 높이, 이름, 부모 창을 사용하고 창의 자동 크기 조정 여부를 지정하여 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>This method is not available in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>to create instances of this class.</source>
          <target state="translated">이 클래스의 인스턴스 만들기</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode">
          <source>Gets the value that determines whether to acquire Win32 focus for the WPF containing window for this <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>에 대해 창이 포함된 WPF에 대한 Win32 포커스를 가져올지 여부를 결정하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to acquire Win32 focus for the WPF containing window when the user interacts with menus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">사용자가 메뉴를 조작하는 경우 창이 포함된 WPF에 대해 Win32 포커스를 가져오려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode">
          <source>This value is set when you create the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> by setting the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters.AcquireHwndFocusInMenuMode%2A&gt;</ph> parameter.</source>
          <target state="translated">만들 때이 값은 설정 된 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 설정 하 여는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters.AcquireHwndFocusInMenuMode%2A&gt;</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode">
          <source>The default value is determined by the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode%2A&gt;</ph> property.</source>
          <target state="translated">기본값에 따라 결정 되는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>The handler implementation (based on the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSourceHook" /&gt;</ph> delegate) that receives the window messages.</source>
          <target state="translated">창 메시지를 받는 처리기 구현(<ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSourceHook" /&gt;</ph> 대리자 기반)입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>Adds an event handler that receives all window messages.</source>
          <target state="translated">모든 창 메시지를 받는 이벤트 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>This method is not available in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>Most <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> messages that reach the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> have an approximate <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> equivalent.</source>
          <target state="translated">대부분 <ph id="ph1">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> 도달 하는 메시지는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 는 대략적인 <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 와 동일 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>You use <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> to handle the cases where the message has no <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> equivalent.</source>
          <target state="translated">사용 하면 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> 메시지가 없는 경우를 처리 하기 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 와 동일 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceHook&gt;</ph> delegate resembles the parameter profile of a <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> main window procedure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceHook&gt;</ph> 대리자의 매개 변수 프로필과 유사한는 <ph id="ph2">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 주 창 프로시저입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>All window messages that the main window procedure of the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> parent window receives are also forwarded to the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceHook&gt;</ph> delegates.</source>
          <target state="translated">모든 창 메시지의 주 창 프로시저는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 부모 창은에 전달 됩니다는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceHook&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>Hooks are called in the order that they were added.</source>
          <target state="translated">후크 추가 된 순서 대로 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>If any hook returns <ph id="ph1">`handled`</ph><ph id="ph2">=</ph><ph id="ph3">`true`</ph> for a message, the hooks after it in the call order are not called for that message.</source>
          <target state="translated">반환 후크가 있으면 <ph id="ph1">`handled`</ph> <ph id="ph2">=</ph> <ph id="ph3">`true`</ph> 메시지에 대해 호출 순서에서 그 뒤 후크는 해당 메시지에 대해 호출 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>to add handling.</source>
          <target state="translated">처리를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="E:System.Windows.Interop.HwndSource.AutoResized">
          <source>Occurs when layout causes the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> to automatically resize.</source>
          <target state="translated">레이아웃에서 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>의 크기를 자동으로 조정할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Interop.HwndSource.AutoResized">
          <source>The native behavior of <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> is to automatically resize content and the window region based on changes reported through the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> layout system.</source>
          <target state="translated">기본 동작 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 콘텐츠와 통해 보고 된 변경 내용에 따라 창 영역을 자동으로 조정 하는 것은 <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 레이아웃 시스템입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Interop.HwndSource.AutoResized">
          <source>The window does not resize if it is currently minimized or if <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.SizeToContent%2A&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>.</source>
          <target state="translated">현재 최소화 또는 경우 창 크기가 조정 되지 않습니다 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.SizeToContent%2A&gt;</ph> 로 설정 된 <ph id="ph2">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.ChildKeyboardInputSinks">
          <source>Gets a sequence of registered input sinks.</source>
          <target state="translated">등록된 입력 싱크의 시퀀스입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.ChildKeyboardInputSinks">
          <source>An enumeration of keyboard input sinks.</source>
          <target state="translated">키보드 입력 싱크의 열거형입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.CompositionTarget">
          <source>Gets the visual manager for the hosted window.</source>
          <target state="translated">호스팅된 창의 표시 관리자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.CompositionTarget">
          <source>The visual manager.</source>
          <target state="translated">표시 관리자입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.CompositionTarget">
          <source>Override <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.GetCompositionTargetCore%2A&gt;</ph> in order to override the value that <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.CompositionTarget%2A&gt;</ph> returns.</source>
          <target state="translated">재정의 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.GetCompositionTargetCore%2A&gt;</ph> 값을 재정의 하기 위해는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.CompositionTarget%2A&gt;</ph> 반환 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.CreateHandleRef">
          <source>Gets the window handle for the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>에 대한 창 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.CreateHandleRef">
          <source>The window handle is packaged as part of a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> structure.</source>
          <target state="translated">창 핸들은 <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.HandleRef" /&gt;</ph> 구조체의 일부로 패키지됩니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.CreateHandleRef">
          <source>A structure that contains the window handle for this <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>에 대한 창 핸들을 포함하는 구조체입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.CreateHandleRef">
          <source>You can use the handle that is obtained from <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.CreateHandleRef%2A&gt;</ph> to reference the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> from <ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> code.</source>
          <target state="translated">가져온 핸들을 사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.CreateHandleRef%2A&gt;</ph> 참조에는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 에서 <ph id="ph3">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> 코드입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.CreateHandleRef">
          <source>Use the handle for operations such as message handling and window behavior.</source>
          <target state="translated">메시지 처리 및 창 동작 등의 작업에 대 한 핸들을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.CreateHandleRef">
          <source>To get just the handle, use <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;</ph>.</source>
          <target state="translated">방금 핸들을 사용 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode">
          <source>Gets or sets the default <ph id="ph1">&lt;see cref="P:System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode" /&gt;</ph> value for new instances of <ph id="ph2">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode" /&gt;</ph>의 새 인스턴스에 대한 기본 <ph id="ph2">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to acquire Win32 focus for the WPF containing window when the user interacts with menus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">사용자가 메뉴를 조작하는 경우 창이 포함된 WPF에 대해 Win32 포커스를 가져오려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode">
          <source>New instances of <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> have <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode%2A&gt;</ph> set to this default value, unless a different value is passed as a parameter to the <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> constructor for a specific instance, by using the <ph id="ph4">&lt;xref:System.Windows.Interop.HwndSourceParameters.AcquireHwndFocusInMenuMode%2A&gt;</ph> property.</source>
          <target state="translated">새 인스턴스 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 가 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.AcquireHwndFocusInMenuMode%2A&gt;</ph> 다른 값을 매개 변수로 전달 되지 않으면이 기본 값으로 설정 된 <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 생성자를 사용 하 여 특정 인스턴스에 대 한는 <ph id="ph4">&lt;xref:System.Windows.Interop.HwndSourceParameters.AcquireHwndFocusInMenuMode%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode">
          <source>to get this property.</source>
          <target state="translated">이 속성을 가져오는 합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.Dispose">
          <source>Releases all managed resources that are used by the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>, and raises the <ph id="ph2">&lt;see cref="E:System.Windows.Interop.HwndSource.Disposed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>에서 사용하는 관리되는 리소스를 모두 해제하고 <ph id="ph2">&lt;see cref="E:System.Windows.Interop.HwndSource.Disposed" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.Dispose">
          <source>This method is not available in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.Dispose">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> initiates related cleanup work for the HWND.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 시작 하는 HWND에 대 한 정리 작업을 관련 있습니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.Dispose">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> is called through a thread that is different from the main UI thread, the cleanup work may be deferred until it can be posted to the main UI thread.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 라고 주 UI 스레드와에서 다른 스레드를 통해 정리 작업 수 될 때까지 지연 주 UI 스레드에 게시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.Dispose">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> explicitly from the interoperating code might be necessary for certain interoperation scenarios, because an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> in some interoperation scenarios can generate several references to it across the interoperation boundaries that might prevent timely garbage collection.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 명시적으로 운용 코드에서에 필요할 수 있습니다 특정 상호 운용 시나리오 때문에 프로그램 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 상호 운용 일부 시나리오에서는 상호 운용 경계를 넘어 여러 참조를 생성할 수 있습니다 시기 적절 한 가비지 수집을 하지 못할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="E:System.Windows.Interop.HwndSource.Disposed">
          <source>Occurs when the <ph id="ph1">&lt;see cref="M:System.Windows.Interop.HwndSource.Dispose" /&gt;</ph> method is called on this object.</source>
          <target state="translated">이 개체에서 <ph id="ph1">&lt;see cref="M:System.Windows.Interop.HwndSource.Dispose" /&gt;</ph> 메서드가 호출될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Interop.HwndSource.Disposed">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> event is raised before any resources are released by the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> 이벤트가 발생 하 여 리소스를 해제 하기 전에 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Interop.HwndSource.Disposed">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> event indicates that the object that raises the event is about to have all references to it removed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> 이벤트는 이벤트를 발생 시키는 개체가에 대 한 모든 참조가 제거 되려고 함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Interop.HwndSource.Disposed">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.IsDisposed%2A&gt;</ph> property to avoid calling <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> twice (which raises an exception).</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.IsDisposed%2A&gt;</ph> 속성을 호출 하지 마세요 <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 두 번 (예외 발생).</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="E:System.Windows.Interop.HwndSource.DpiChanged">
          <source>Occurs when the DPI of the monitor of this Hwnd has changed, or the Hwnd is moved to a monitor with a different DPI.</source>
          <target state="translated">이 Hwnd의 모니터 DPI가 변경되거나 Hwnd가 다른 DPI의 모니터로 이동될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>The provided window handle.</source>
          <target state="translated">제공된 창 핸들입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> object of the specified window.</source>
          <target state="translated">지정된 창의 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> object for the window that is specified by the <ph id="ph2">&lt;paramref name="hwnd" /&gt;</ph> window handle.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="hwnd" /&gt;</ph> 창 핸들에 지정된 창에 대한 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>This method is not available in the Internet security zone, or for partial trust in general.</source>
          <target state="translated">이 방법을 사용할 수 없는 경우 부분 신뢰 또는 인터넷 보안 영역에서 일반적</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>You can use this method to return an <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> for a window that is not explicitly an interoperation window.</source>
          <target state="translated">이 메서드를 사용 하 여 반환 하는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 상호 운용 창이 명시적으로 하는 창에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>The procedure for this is:</source>
          <target state="translated">이 절차가입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>Create a <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> instance (providing the main <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> as a constructor parameter).</source>
          <target state="translated">만들기는 <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> 인스턴스 (기본 제공 <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> 를 생성자 매개 변수로).</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>Get the value of the <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> property from that <ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> instance.</source>
          <target state="translated">값을 가져올는 <ph id="ph1">&lt;xref:System.Windows.Interop.WindowInteropHelper.Handle%2A&gt;</ph> 에서 <ph id="ph2">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>Pass that HWND value as a parameter to <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.FromHwnd%2A&gt;</ph>.</source>
          <target state="translated">해당 HWND 값에 대 한 매개 변수로 전달 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.FromHwnd%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>This technique can be useful if you then want to add general <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> message processing to the window.</source>
          <target state="translated">이 기술은 다음 일반 추가 하려는 경우에 유용할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> 메시지 창으로 처리 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>However, whenever you create an <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, you are also responsible for destroying it.</source>
          <target state="translated">그러나 만들 때마다는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, 소멸 시켜야 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>This is true even if the <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object for an application <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> is disposed.</source>
          <target state="translated">이 true 인 경우에는 <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> 응용 프로그램에 대 한 개체 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 가 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>For more information, see Remarks on <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
          <target state="translated">자세한 내용은 설명 부분을에 참조 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>to call this method.</source>
          <target state="translated">이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.FromHwnd(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.GetCompositionTargetCore">
          <source>Gets the visual target of the window.</source>
          <target state="translated">창의 표시 대상을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.GetCompositionTargetCore">
          <source>Returns the visual target of the window.</source>
          <target state="translated">창의 표시 대상을 반환합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.GetCompositionTargetCore">
          <source>The default implementation returns the same result as <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.CompositionTarget%2A&gt;</ph>.</source>
          <target state="translated">기본 구현으로 동일한 결과 반환 합니다. <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.CompositionTarget%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.GetCompositionTargetCore">
          <source>Implement this method to return a type-specific visual target.</source>
          <target state="translated">유형별 표시 대상을 반환 하려면이 메서드를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.GetCompositionTargetCore">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> implements this method to return <ph id="ph2">&lt;see cref="T:System.Windows.Interop.HwndTarget" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph> 반환 하려면이 메서드를 구현 <ph id="ph2">&lt;see cref="T:System.Windows.Interop.HwndTarget" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.Handle">
          <source>Gets the window handle for this <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>의 창 핸들을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.Handle">
          <source>The window handle.</source>
          <target state="translated">창 핸들입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.Handle">
          <source>This property is not available in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 속성은 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.Handle">
          <source>to access this pointer.</source>
          <target state="translated">이 포인터에 액세스할 수</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.Handle">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.HasFocusWithinCore">
          <source>Gets a value that indicates whether the sink or one of its contained components has focus.</source>
          <target state="translated">싱크 또는 싱크에 포함된 구성 요소 중 하나에 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.HasFocusWithinCore">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the sink or one of its contained components has focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">싱크 또는 싱크에 포함된 구성 요소 중 하나에 포커스가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.IsDisposed">
          <source>Gets a value that indicates whether <ph id="ph1">&lt;see cref="M:System.Windows.Interop.HwndSource.Dispose" /&gt;</ph> has been called on this <ph id="ph2">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="M:System.Windows.Interop.HwndSource.Dispose" /&gt;</ph>에 대해 <ph id="ph2">&lt;see cref="T:System.Windows.Interop.HwndSource" /&gt;</ph>가 호출되었는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.IsDisposed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object has had <ph id="ph2">&lt;see cref="M:System.Windows.Interop.HwndSource.Dispose" /&gt;</ph> called on it; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">개체에 대해 <ph id="ph2">&lt;see cref="M:System.Windows.Interop.HwndSource.Dispose" /&gt;</ph>가 호출되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.IsDisposed">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> initiates related cleanup work for the HWND.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 시작 하는 HWND에 대 한 정리 작업을 관련 있습니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.IsDisposed">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> is called through a thread that is different from the main UI thread, the cleanup work may be deferred until it can be posted to the main UI thread.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 라고 주 UI 스레드와에서 다른 스레드를 통해 정리 작업 수 될 때까지 지연 주 UI 스레드에 게시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.IsDisposed">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> event is raised and the value of <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.IsDisposed%2A&gt;</ph> becomes <ph id="ph3">`false`</ph> as soon as <ph id="ph4">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Disposed&gt;</ph> 이벤트는 발생의 값과 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.IsDisposed%2A&gt;</ph> 됩니다 <ph id="ph3">`false`</ph> 즉시 <ph id="ph4">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.IsDisposed">
          <source>During this time, if you call <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> again, <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> raises an exception.</source>
          <target state="translated">호출 하는 경우이 시간 동안 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 다시 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.Dispose%2A&gt;</ph> 예외를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.KeyboardInputSiteCore">
          <source>Gets or sets a reference to the component's container's <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> interface.</source>
          <target state="translated">구성 요소 컨테이너의 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> 인터페이스에 대한 참조를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.KeyboardInputSiteCore">
          <source>A reference to the container's <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> interface; or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if no site is assigned.</source>
          <target state="translated">컨테이너의 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> 인터페이스에 대한 참조입니다. 또는 사이트가 할당되지 않은 경우 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.KeyboardInputSiteCore">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.KeyboardInputSiteCore">
          <source>to set this property.</source>
          <target state="translated">이 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.KeyboardInputSiteCore">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.OnDpiChanged(System.Windows.HwndDpiChangedEventArgs)">
          <source>The event arguments</source>
          <target state="translated">이벤트의 인수입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.OnDpiChanged(System.Windows.HwndDpiChangedEventArgs)">
          <source>Called when the DPI is going to change for the window.</source>
          <target state="translated">창의 DPI가 변경될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.OnDpiChanged(System.Windows.HwndDpiChangedEventArgs)">
          <source>If the user handles this event,         WPF does not scale any visuals.</source>
          <target state="translated">이 이벤트를 처리 하는 사용자, WPF가 모든 시각적 개체가 확장 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.OnDpiChanged(System.Windows.HwndDpiChangedEventArgs)">
          <source>This method accesses critical data <ph id="ph1">&lt;xref:System.Windows.Interop.HwndTarget&gt;</ph>.</source>
          <target state="translated">이 메서드는 중요 한 데이터 액세스 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndTarget&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.OnMnemonicCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message for the mnemonic and associated data.</source>
          <target state="translated">니모닉 및 연결된 데이터에 대한 메시지입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.OnMnemonicCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Modifier keys.</source>
          <target state="translated">보조키입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.OnMnemonicCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Called when one of the mnemonics (access keys) for this sink is invoked.</source>
          <target state="translated">이 싱크에 대한 니모닉(선택키) 중 하나가 호출될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.OnMnemonicCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was handled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">메시지가 처리되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 처리되지 않았으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.OnMnemonicCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;paramref name="msg" /&gt;</ph> is not WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, or WM_DEADCHAR.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="msg" /&gt;</ph>는 WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, 또는 WM_DEADCHAR 가 아닙니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.OnMnemonicCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>to call this method.</source>
          <target state="translated">이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.OnMnemonicCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.RegisterKeyboardInputSinkCore(System.Windows.Interop.IKeyboardInputSink)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> sink of the contained component.</source>
          <target state="translated">포함된 구성 요소의 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> 싱크입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.RegisterKeyboardInputSinkCore(System.Windows.Interop.IKeyboardInputSink)">
          <source>Registers the <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> interface of a contained component.</source>
          <target state="translated">포함된 구성 요소의 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> 인터페이스를 등록합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.RegisterKeyboardInputSinkCore(System.Windows.Interop.IKeyboardInputSink)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> site of the contained component.</source>
          <target state="translated">포함된 구성 요소의 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> 사이트입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.RegisterKeyboardInputSinkCore(System.Windows.Interop.IKeyboardInputSink)">
          <source>to call this method.</source>
          <target state="translated">이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.RegisterKeyboardInputSinkCore(System.Windows.Interop.IKeyboardInputSink)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.RemoveHook(System.Windows.Interop.HwndSourceHook)">
          <source>The event handler to remove.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.RemoveHook(System.Windows.Interop.HwndSourceHook)">
          <source>Removes the event handlers that were added by <ph id="ph1">&lt;see cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" /&gt;</ph>로 추가된 이벤트 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.RemoveHook(System.Windows.Interop.HwndSourceHook)">
          <source>This method is not available in the Internet security zone.</source>
          <target state="translated">인터넷 보안 영역에서이 메서드는 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.RemoveHook(System.Windows.Interop.HwndSourceHook)">
          <source>to remove handlers.</source>
          <target state="translated">처리기를 제거 합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.RemoveHook(System.Windows.Interop.HwndSourceHook)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.RestoreFocusMode">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Input.RestoreFocusMode" /&gt;</ph> for the window.</source>
          <target state="translated">창의 <ph id="ph1">&lt;see cref="T:System.Windows.Input.RestoreFocusMode" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RestoreFocusMode">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Input.RestoreFocusMode" /&gt;</ph> for the window.</source>
          <target state="translated">창의 <ph id="ph1">&lt;see cref="T:System.Windows.Input.RestoreFocusMode" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RestoreFocusMode">
          <source>This property can be set only in the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29?displayProperty=nameWithType&gt;</ph> constructor by using the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters.RestoreFocusMode%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">에이 속성을 설정할 수는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.%23ctor%28System.Windows.Interop.HwndSourceParameters%29?displayProperty=nameWithType&gt;</ph> 생성자를 사용 하 여는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSourceParameters.RestoreFocusMode%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="P:System.Windows.Media.CompositionTarget.RootVisual" /&gt;</ph> of the window.</source>
          <target state="translated">창의 <ph id="ph1">&lt;see cref="P:System.Windows.Media.CompositionTarget.RootVisual" /&gt;</ph>을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>The root visual object of the window.</source>
          <target state="translated">창의 루트 시각적 개체입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>Use this property to connect a <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> or another root visual to the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
          <target state="translated">이 속성을 사용 하 여 연결할는 <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> 또는 시각적 개체를 다른 루트는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>Scale transformations should not be applied to the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> because this can disable <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.SizeToContent%2A&gt;</ph> behavior.</source>
          <target state="translated">크기 조정 변환을에 적용 해야는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 이 해제할 수 있으므로 <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.SizeToContent%2A&gt;</ph> 동작 합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>The content will scale, but the enclosing window will not.</source>
          <target state="translated">고 콘텐츠 확장 됩니다 수 있지만 바깥쪽 창이 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>Instead of applying the transformation to the object that is the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>, apply the transformation to an object that is a child element of the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>.</source>
          <target state="translated">관련 된 개체에 변환을 적용 하는 대신는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>, 개체의 자식 요소에 변환을 적용는 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>You might need to add an extra enclosing element to the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> content, such as a panel, in order to provide a scaleable object.</source>
          <target state="translated">추가 포함 요소를 추가 해야 할 수 있습니다는 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 확장 가능한 개체를 제공 하기 위해 패널을 등의 콘텐츠입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>You can add a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> as the root visual, but only as a top-level window (with WS_OVERLAPPED), not as a child window.</source>
          <target state="translated">추가할 수는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 루트 표시 되지만 (ws_overlapped)을 최상위 창으로만 아닌으로 자식 창.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>to set this property.</source>
          <target state="translated">이 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.RootVisual">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.SizeToContent">
          <source>Get or sets whether and how the window is sized to its content.</source>
          <target state="translated">콘텐츠에 맞게 창의 크기가 조정되는지 여부와 크기 조정 방법을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.SizeToContent">
          <source>One of the enumeration values.</source>
          <target state="translated">열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.SizeToContent">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph>, which specifies that the window is not sized to its content.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.SizeToContent.Manual" /&gt;</ph>로, 콘텐츠에 맞게 창의 크기를 조정하지 않습니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.SizeToContent">
          <source>End users might indirectly set this property through application UI, if that functionality is exposed by the application.</source>
          <target state="translated">최종 사용자가 직접 설정할 수 없습니다 응용 프로그램 UI 통해이 속성 경우 기능 응용 프로그램에 의해 노출 되는.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.SizeToContent">
          <source>Scale transformations should not be applied to the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, because this can disable <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.SizeToContent%2A&gt;</ph> behavior.</source>
          <target state="translated">크기 조정 변환을에 적용 해야는 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> 의 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>이 해제할 수 있으므로, <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.SizeToContent%2A&gt;</ph> 동작 합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.SizeToContent">
          <source>See Remarks for <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>.</source>
          <target state="translated">에 대 한 설명 부분 참조 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="E:System.Windows.Interop.HwndSource.SizeToContentChanged">
          <source>Occurs when the value of the <ph id="ph1">&lt;see cref="P:System.Windows.Interop.HwndSource.SizeToContent" /&gt;</ph> property changes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Interop.HwndSource.SizeToContent" /&gt;</ph> 속성 값이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Interop.HwndSource.SizeToContentChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.SizeToContentChanged&gt;</ph> event is only raised when user interaction causes the change.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.SizeToContentChanged&gt;</ph> 이벤트는 사용자 상호 작용으로 인해 변경 하는 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Interop.HwndSource.SizeToContentChanged">
          <source>If you set <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> in code, the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.SizeToContentChanged&gt;</ph> event is not raised.</source>
          <target state="translated">설정한 경우 <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> 코드에서의 <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.SizeToContentChanged&gt;</ph> 이벤트가 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#HasFocusWithin">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Remove(System.Object)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.Windows.Media.FamilyTypefaceCollection.System#Collections#IList#Remove(System.Object)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#HasFocusWithin">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the sink or one of its contained components has focus; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">싱크 또는 싱크에 포함된 구성 요소 중 하나에 포커스가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#HasFocusWithin">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#HasFocusWithin">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#KeyboardInputSite">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#KeyboardInputSite">
          <source>A reference to the container's <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> interface.</source>
          <target state="translated">컨테이너의 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> 인터페이스에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#KeyboardInputSite">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#KeyboardInputSite">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#KeyboardInputSite">
          <source>to set this property.</source>
          <target state="translated">이 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#KeyboardInputSite">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message for the mnemonic and associated data.</source>
          <target state="translated">니모닉 및 연결된 데이터에 대한 메시지입니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Do not modify this message structure.</source>
          <target state="translated">이 메시지 구조체를 수정하지 마십시오.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It is passed by reference for performance reasons only.</source>
          <target state="translated">성능상의 이유로 이 구조체는 참조로만 전달됩니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Modifier keys.</source>
          <target state="translated">보조키입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was handled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">메시지가 처리되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 처리되지 않았으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> sink of the contained component.</source>
          <target state="translated">포함된 구성 요소의 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSink" /&gt;</ph> 싱크입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> site of the contained component.</source>
          <target state="translated">포함된 구성 요소의 <ph id="ph1">&lt;see cref="T:System.Windows.Interop.IKeyboardInputSite" /&gt;</ph> 사이트입니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>to call this method.</source>
          <target state="translated">이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TabInto(System.Windows.Input.TraversalRequest)">
          <source>Specifies whether focus should be set to the first or the last tab stop.</source>
          <target state="translated">포커스를 첫 번째 또는 마지막 탭 정지로 설정해야 하는지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TabInto(System.Windows.Input.TraversalRequest)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TabInto(System.Windows.Input.TraversalRequest)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the focus has been set as requested; <ph id="ph2">&lt;see langword="false" /&gt;</ph>, if there are no tab stops.</source>
          <target state="translated">포커스가 요청대로 설정되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 탭 정지가 없으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TabInto(System.Windows.Input.TraversalRequest)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TabInto(System.Windows.Input.TraversalRequest)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TabInto(System.Windows.Input.TraversalRequest)">
          <source>to call this method.</source>
          <target state="translated">이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TabInto(System.Windows.Input.TraversalRequest)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message and associated data.</source>
          <target state="translated">메시지 및 연결된 데이터입니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Do not modify this structure.</source>
          <target state="translated">이 구조체를 수정하지 마십시오.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It is passed by reference for performance reasons only.</source>
          <target state="translated">성능상의 이유로 이 구조체는 참조로만 전달됩니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Modifier keys.</source>
          <target state="translated">보조키입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was handled by the method implementation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">메서드 구현에서 메시지가 처리되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>to call this method.</source>
          <target state="translated">이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message and associated data.</source>
          <target state="translated">메시지 및 연결된 데이터입니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Do not modify this structure.</source>
          <target state="translated">이 구조체를 수정하지 마십시오.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It is passed by reference for performance reasons only.</source>
          <target state="translated">성능상의 이유로 이 구조체는 참조로만 전달됩니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Modifier keys.</source>
          <target state="translated">보조키입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was processed and <ph id="ph2">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph> should not be called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">메시지가 처리되었고 <ph id="ph2">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph>을 호출하지 않아야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.System#Windows#Interop#IKeyboardInputSink#TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TabIntoCore(System.Windows.Input.TraversalRequest)">
          <source>Specifies whether focus should be set to the first or the last tab stop.</source>
          <target state="translated">포커스를 첫 번째 또는 마지막 탭 정지로 설정해야 하는지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TabIntoCore(System.Windows.Input.TraversalRequest)">
          <source>Sets focus on either the first tab stop or the last tab stop of the sink.</source>
          <target state="translated">싱크의 첫 번째 또는 마지막 탭 정지에 포커스를 설정합니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TabIntoCore(System.Windows.Input.TraversalRequest)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the focus has been set as requested; <ph id="ph2">&lt;see langword="false" /&gt;</ph>, if there are no tab stops.</source>
          <target state="translated">포커스가 요청대로 설정되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 탭 정지가 없으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TabIntoCore(System.Windows.Input.TraversalRequest)">
          <source><ph id="ph1">&lt;paramref name="request" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="request" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateAcceleratorCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message and associated data.</source>
          <target state="translated">메시지 및 연결된 데이터입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateAcceleratorCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Do not modify this structure.</source>
          <target state="translated">이 구조체를 수정하지 마십시오.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateAcceleratorCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It is passed by reference for performance reasons only.</source>
          <target state="translated">성능상의 이유로 이 구조체는 참조로만 전달됩니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateAcceleratorCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Modifier keys.</source>
          <target state="translated">보조키입니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateAcceleratorCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Processes keyboard input at the key-down message level.</source>
          <target state="translated">keydown 메시지 수준에서 키보드 입력을 처리합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateAcceleratorCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was handled by the method implementation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">메서드 구현에서 메시지가 처리되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.TranslateAcceleratorCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>to call this method.</source>
          <target state="translated">이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.TranslateAcceleratorCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateCharCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>The message and associated data.</source>
          <target state="translated">메시지 및 연결된 데이터입니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateCharCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Do not modify this structure.</source>
          <target state="translated">이 구조체를 수정하지 마십시오.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateCharCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>It is passed by reference for performance reasons only.</source>
          <target state="translated">성능상의 이유로 이 구조체는 참조로만 전달됩니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateCharCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Modifier keys.</source>
          <target state="translated">보조키입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateCharCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before the <ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph> method is called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph> 메서드가 호출되기 전에 WM_CHAR, WM_SYSCHAR, WM_DEADCHAR 및 WM_SYSDEADCHAR 입력 메시지를 처리합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Windows.Interop.HwndSource.TranslateCharCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the message was processed and <ph id="ph2">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph> should not be called; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">메시지가 처리되었고 <ph id="ph2">&lt;see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /&gt;</ph>을 호출하지 않아야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.TranslateCharCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>to call this method.</source>
          <target state="translated">이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Interop.HwndSource.TranslateCharCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="P:System.Windows.Interop.HwndSource.UsesPerPixelOpacity">
          <source>Gets a value that declares whether the per-pixel opacity of the source window content is respected.</source>
          <target state="translated">원본 창 콘텐츠의 픽셀별 불투명도가 적용되는지 여부를 선언하는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.UsesPerPixelOpacity">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the system uses per-pixel opacity; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">시스템에서 픽셀별 불투명도를 사용하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.UsesPerPixelOpacity">
          <source>When you enable per-pixel opacity, the system no longer draws the non-client area.</source>
          <target state="translated">픽셀 별 불투명도 사용 하도록 설정 하면 시스템은 더 이상 비클라이언트 영역을 그립니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.UsesPerPixelOpacity">
          <source>This is because the intended purpose of <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.UsesPerPixelOpacity%2A&gt;</ph> is to show non-rectangular top-level UI that works in interoperation scenarios.</source>
          <target state="translated">즉, 용도가 <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.UsesPerPixelOpacity%2A&gt;</ph> 상호 운용 시나리오에서 작동 하는 사각형이 아닌 최상위 UI를 표시 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Interop.HwndSource.UsesPerPixelOpacity">
          <source>Therefore, showing the rectangular non-client area defeats that purpose.</source>
          <target state="translated">따라서 사각형 비클라이언트 영역 저해 용도 표시합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>