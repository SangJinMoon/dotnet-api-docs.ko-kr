<Type Name="D3DImage" FullName="System.Windows.Interop.D3DImage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="da6c9ceb7348df00a52ee84684ab080e4ba1e7e0" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37503662" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class D3DImage : System.Windows.Media.ImageSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi D3DImage extends System.Windows.Media.ImageSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.D3DImage" />
  <TypeSignature Language="VB.NET" Value="Public Class D3DImage&#xA;Inherits ImageSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class D3DImage : System::Windows::Media::ImageSource" />
  <TypeSignature Language="F#" Value="type D3DImage = class&#xA;    inherit ImageSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.ImageSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="9145e-101">An <see cref="T:System.Windows.Media.ImageSource" /> that displays a user-created Direct3D surface.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9145e-101">An <see cref="T:System.Windows.Media.ImageSource" /> that displays a user-created Direct3D surface.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-102">사용 된 <xref:System.Windows.Interop.D3DImage> Windows Presentation Foundation (WPF) 응용 프로그램에서 Direct3D 콘텐츠를 호스트 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-102">Use the <xref:System.Windows.Interop.D3DImage> class to host Direct3D content in a Windows Presentation Foundation (WPF) application.</span></span>  
  
 <span data-ttu-id="9145e-103">호출을 <xref:System.Windows.Interop.D3DImage.Lock%2A> 에 표시 된 Direct3D 내용을 변경 하려면 메서드는 <xref:System.Windows.Interop.D3DImage>합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-103">Call the <xref:System.Windows.Interop.D3DImage.Lock%2A> method to change the Direct3D content displayed by the <xref:System.Windows.Interop.D3DImage>.</span></span> <span data-ttu-id="9145e-104">호출 된 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> Direct3D 화면을 할당 하는 방법을 <xref:System.Windows.Interop.D3DImage>입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-104">Call the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method to assign a Direct3D surface to a <xref:System.Windows.Interop.D3DImage>.</span></span> <span data-ttu-id="9145e-105">호출 된 <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> Direct3D 화면에 업데이트를 추적 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-105">Call the <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> method to track updates to the Direct3D surface.</span></span> <span data-ttu-id="9145e-106">호출 된 <xref:System.Windows.Interop.D3DImage.Unlock%2A> 변경 된 영역을 표시 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-106">Call the <xref:System.Windows.Interop.D3DImage.Unlock%2A> method to display the changed areas.</span></span>  
  
 <span data-ttu-id="9145e-107"><xref:System.Windows.Interop.D3DImage> 클래스 라고 하는 두 디스플레이 버퍼를 관리 합니다 *백 버퍼* 하며 *프런트 버퍼가*.</span><span class="sxs-lookup"><span data-stu-id="9145e-107">The <xref:System.Windows.Interop.D3DImage> class manages two display buffers, which are called the *back buffer* and the *front buffer*.</span></span> <span data-ttu-id="9145e-108">백 버퍼는 프로그램 Direct3D 화면입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-108">The back buffer is your Direct3D surface.</span></span>  <span data-ttu-id="9145e-109">백 버퍼에 대 한 변경 내용에 복사 됩니다 프런트 버퍼가 호출할 때를 <xref:System.Windows.Interop.D3DImage.Unlock%2A> 메서드를 하드웨어에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-109">Changes to the back buffer are copied forward to the front buffer when you call the <xref:System.Windows.Interop.D3DImage.Unlock%2A> method, where it is displayed on the hardware.</span></span> <span data-ttu-id="9145e-110">경우에 따라 프런트 버퍼가 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-110">Occasionally, the front buffer becomes unavailable.</span></span> <span data-ttu-id="9145e-111">화면 잠금, Direct3D 응용 프로그램을 제외 하는 전체 화면, 사용자 전환 또는 기타 시스템 활동과이 부족 한 가용성을 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-111">This lack of availability can be caused by screen locking, full-screen exclusive Direct3D applications, user-switching, or other system activities.</span></span> <span data-ttu-id="9145e-112">WPF 응용 프로그램을 처리 하 여 알려집니다 이런 경우는 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-112">When this occurs, your WPF application is notified by handling the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> event.</span></span>  <span data-ttu-id="9145e-113">응용 프로그램이 사용할 수 없게 되는 프런트 버퍼가에 반응 하는 방법을 소프트웨어 렌더링으로 대체 WPF 사용 여부에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-113">How your application responds to the front buffer becoming unavailable depends on whether WPF is enabled to fall back to software rendering.</span></span> <span data-ttu-id="9145e-114"><xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 메서드 소프트웨어 렌더링으로 WPF 다시 속하는지 여부를 지정 하는 매개 변수를 받아들이는 오버 로드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-114">The <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method has an overload that takes a parameter that specifies whether WPF falls back to software rendering.</span></span>  
  
## <a name="responding-to-an-unavailable-front-buffer-when-wpf-does-not-fall-back-to-software-rendering"></a><span data-ttu-id="9145e-115">WPF 속하지 다시 소프트웨어에 렌더링 하는 경우 사용할 수 없는 프런트 버퍼에 응답</span><span class="sxs-lookup"><span data-stu-id="9145e-115">Responding to an Unavailable Front Buffer when WPF Does not Fall Back to Software Rendering</span></span>  
 <span data-ttu-id="9145e-116">호출 하는 경우는 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29> 오버 로드 하거나 호출 합니다 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> 오버 로드는 `enableSoftwareFallback` 매개 변수 설정 `false`, 프런트 버퍼를 사용할 수 없게 하 고 아무 것도 렌더링 시스템 백 버퍼에 대 한 참조를 해제 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-116">When you call the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29> overload or call the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> overload with the `enableSoftwareFallback` parameter set to `false`, the rendering system releases its reference to the back buffer when the front buffer becomes unavailable and nothing is displayed.</span></span> <span data-ttu-id="9145e-117">프런트 버퍼가 다시 제공 되 면 렌더링 발생을 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> WPF 응용 프로그램에 알리는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-117">When the front buffer is available again, the rendering system raises the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> event to notify your WPF application.</span></span>  <span data-ttu-id="9145e-118">에 대 한 이벤트 처리기를 만들 수는 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> 유효한 Direct3D 화면을 사용 하 여 다시 렌더링을 다시 시작 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-118">You can create an event handler for the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> event to restart rendering again with a valid Direct3D surface.</span></span> <span data-ttu-id="9145e-119">렌더링을 다시 시작 하려면 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-119">To restart rendering, you must call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A>.</span></span>  
  
## <a name="responding-to-an-unavailable-front-buffer-when-wpf-falls-back-to-software-rendering"></a><span data-ttu-id="9145e-120">해당 하는 WPF은 소프트웨어 렌더링을 다시 사용할 수 없는 프런트 버퍼에 응답</span><span class="sxs-lookup"><span data-stu-id="9145e-120">Responding to an Unavailable Front Buffer when WPF Falls Back to Software Rendering</span></span>  
 <span data-ttu-id="9145e-121">호출 하는 경우는 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> 오버 로드는 `enableSoftwareFallback` 매개 변수 설정 `true`를 호출 하지 않아도 되므로 프런트 버퍼를 사용할 수 없을 때 렌더링 시스템은 백 버퍼에 대 한 참조를 유지 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 때 앞 버퍼를 다시 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-121">When you call the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> overload with the `enableSoftwareFallback` parameter set to `true`, the rendering system retains its reference to the back buffer when the front buffer becomes unavailable, so there is no need to call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> when the front buffer is available again.</span></span>  <span data-ttu-id="9145e-122">사용자의 장치에 사용할 수 없게 되는 상황이 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-122">There may be situations where the user’s device becomes unavailable.</span></span>  <span data-ttu-id="9145e-123">문제가 발생 하면 호출 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 백 버퍼에 대 한 WPF의 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-123">When that occurs, call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> to release WPF’s reference to the back buffer.</span></span>  <span data-ttu-id="9145e-124">장치를 재설정 해야 할 경우 호출 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 사용 하 여는 `backBuffer` 매개 변수 설정 `null`, 다음 호출 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 사용 하 여 다시 `backBuffer` 유효한 Direct3D 화면을로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-124">If you need to reset your device, call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> with the `backBuffer` parameter set to `null`, and then call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> again with `backBuffer` set to a valid Direct3D surface.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9145e-125">성능은 Direct3D 화면의 설정에 따라 크게 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-125">Performance depends greatly on the settings of the Direct3D surface.</span></span> <span data-ttu-id="9145e-126">자세한 내용은 [Direct3D9 및 WPF 상호 운용성을 위한 성능 고려 사항](~/docs/framework/wpf/advanced/performance-considerations-for-direct3d9-and-wpf-interoperability.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-126">For more information, see [Performance Considerations for Direct3D9 and WPF Interoperability](~/docs/framework/wpf/advanced/performance-considerations-for-direct3d9-and-wpf-interoperability.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9145e-127">합니다 <xref:System.Windows.Interop.D3DImage> 클래스는 콘텐츠가 표시 되지 Direct3D 렌더링 되 면 WPF 소프트웨어에서와 같이 원격 데스크톱 연결을 통해 호출 하지 않으면 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> 지정 `true` 에 대 한는 `enableSoftwareFallback` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-127">The <xref:System.Windows.Interop.D3DImage> class does not display Direct3D content when WPF renders in software, such as over a Remote Desktop connection, unless you call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> and specify `true` for the `enableSoftwareFallback` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9145e-128">다음 코드 예제에서는 선언 하는 방법을 보여 줍니다는 <xref:System.Windows.Interop.D3DImage> XAML에서.</span><span class="sxs-lookup"><span data-stu-id="9145e-128">The following code example shows how to declare a <xref:System.Windows.Interop.D3DImage> in XAML.</span></span> <span data-ttu-id="9145e-129">매핑해야 합니다 <xref:System.Windows.Interop> 네임 스페이스, 기본 XAML 네임 스페이스에 포함 되어 있지 않으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-129">You must map the <xref:System.Windows.Interop> namespace, because it is not included in the default XAML namespaces.</span></span> <span data-ttu-id="9145e-130">자세한 내용은 [연습: WPF에서 Direct3D9 콘텐츠 호스팅](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-130">For more information, see [Walkthrough: Hosting Direct3D9 Content in WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md).</span></span>  
  
 [!code-xaml[System.Windows.Interop.D3DImage#10](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Interop.D3DImage/CS/window1.xaml#10)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="9145e-131">관리 되지 않는 리소스에 액세스 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9145e-131">for access to unmanaged resources.</span>
      </span>
      <span data-ttu-id="9145e-132">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9145e-132">Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span>
      </span>
      <span data-ttu-id="9145e-133">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="9145e-133">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      </span>
    </permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-134">Initializes a new instance of the <see cref="T:System.Windows.Interop.D3DImage" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-134">Initializes a new instance of the <see cref="T:System.Windows.Interop.D3DImage" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public D3DImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; D3DImage();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9145e-135">Initializes a new instance of the <see cref="T:System.Windows.Interop.D3DImage" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-135">Initializes a new instance of the <see cref="T:System.Windows.Interop.D3DImage" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-136">기본 디스플레이 해상도 1/96 인치입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-136">The default display resolution is 1/96th inch.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9145e-137">관리 되지 않는 리소스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-137">for access to unmanaged resources.</span>
          </span>
          <span data-ttu-id="9145e-138">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-138">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span>
          </span>
          <span data-ttu-id="9145e-139">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-139">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public D3DImage (double dpiX, double dpiY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 dpiX, float64 dpiY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dpiX As Double, dpiY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; D3DImage(double dpiX, double dpiY);" />
      <MemberSignature Language="F#" Value="new System.Windows.Interop.D3DImage : double * double -&gt; System.Windows.Interop.D3DImage" Usage="new System.Windows.Interop.D3DImage (dpiX, dpiY)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="dpiX" Type="System.Double" />
        <Parameter Name="dpiY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="dpiX">
          <span data-ttu-id="9145e-140">The display resolution on the x-axis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-140">The display resolution on the x-axis.</span>
          </span>
        </param>
        <param name="dpiY">
          <span data-ttu-id="9145e-141">The display resolution on the y-axis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-141">The display resolution on the y-axis.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-142">Initializes a new instance of the <see cref="T:System.Windows.Interop.D3DImage" /> class with the specified display resolution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-142">Initializes a new instance of the <see cref="T:System.Windows.Interop.D3DImage" /> class with the specified display resolution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-143">기본 디스플레이 해상도 1/96 인치입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-143">The default display resolution is 1/96th inch.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9145e-144">
            <paramref name="dpiX" /> or <paramref name="dpiY" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-144">
              <paramref name="dpiX" /> or <paramref name="dpiY" /> is less than zero.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9145e-145">관리 되지 않는 리소스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-145">for access to unmanaged resources.</span>
          </span>
          <span data-ttu-id="9145e-146">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-146">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span>
          </span>
          <span data-ttu-id="9145e-147">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-147">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="P:System.Windows.Interop.D3DImage.Height" />
        <altmember cref="P:System.Windows.Interop.D3DImage.Width" />
      </Docs>
    </Member>
    <Member MemberName="AddDirtyRect">
      <MemberSignature Language="C#" Value="public void AddDirtyRect (System.Windows.Int32Rect dirtyRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddDirtyRect(valuetype System.Windows.Int32Rect dirtyRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.AddDirtyRect(System.Windows.Int32Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddDirtyRect (dirtyRect As Int32Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddDirtyRect(System::Windows::Int32Rect dirtyRect);" />
      <MemberSignature Language="F#" Value="member this.AddDirtyRect : System.Windows.Int32Rect -&gt; unit" Usage="d3DImage.AddDirtyRect dirtyRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dirtyRect" Type="System.Windows.Int32Rect" />
      </Parameters>
      <Docs>
        <param name="dirtyRect">
          <span data-ttu-id="9145e-148">An <see cref="T:System.Windows.Int32Rect" /> that represents the area that changed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-148">An <see cref="T:System.Windows.Int32Rect" /> that represents the area that changed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-149">Specifies the area of the back buffer that changed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-149">Specifies the area of the back buffer that changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-150">호출 된 <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> 백 버퍼에 코드에 대 한 변경 내용을 표시 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-150">Call the <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> method to indicate changes your code has made to the back buffer.</span></span> <span data-ttu-id="9145e-151">렌더링할 변경된 된 영역 백 버퍼에 해당 변경 된 영역이에 있어야 합니다 <xref:System.Windows.Interop.D3DImage>합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-151">To be rendered, the changed area on the back buffer must have a corresponding changed area on the <xref:System.Windows.Interop.D3DImage>.</span></span>  
  
 <span data-ttu-id="9145e-152">호출을 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 하 고 <xref:System.Windows.Interop.D3DImage.Lock%2A> 메서드 호출 하기 전에 <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9145e-152">Call the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> and <xref:System.Windows.Interop.D3DImage.Lock%2A> methods before calling the <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> method.</span></span>  
  
 <span data-ttu-id="9145e-153">호출 된 <xref:System.Windows.Interop.D3DImage.Unlock%2A> 변경된 된 영역 프런트 버퍼에 복사 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-153">Call the <xref:System.Windows.Interop.D3DImage.Unlock%2A> method to copy the changed areas to the front buffer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9145e-154">몇 번 호출 하는 <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> 메서드를 단일 영역으로 변경된 된 영역 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-154">After a few calls to the <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> method, the changed areas are merged into a single area.</span></span> <span data-ttu-id="9145e-155">즉, 변경된 된 영역 외부의 유효한 데이터를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-155">This means you must have valid data outside of the changed areas.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9145e-156">다음 코드 예제를 호출 하는 방법을 보여 줍니다는 <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> 백 버퍼의 변경된 영역을 지정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-156">The following code example shows how to call the <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> method to specify the changed region in the back buffer.</span></span> <span data-ttu-id="9145e-157">자세한 내용은 [연습: WPF에서 Direct3D9 콘텐츠 호스팅](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-157">For more information, see [Walkthrough: Hosting Direct3D9 Content in WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md).</span></span>  
  
 [!code-csharp[System.Windows.Interop.D3DImage#3](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Interop.D3DImage/CS/window1.xaml.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9145e-158">The bitmap has not been locked by a call to the <see cref="M:System.Windows.Interop.D3DImage.Lock" /> or <see cref="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)" /> methods.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-158">The bitmap has not been locked by a call to the <see cref="M:System.Windows.Interop.D3DImage.Lock" /> or <see cref="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)" /> methods.</span>
          </span>
          <span data-ttu-id="9145e-159">-or-  The back buffer has not been assigned by a call to the <see cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" /> method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-159">-or-  The back buffer has not been assigned by a call to the <see cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" /> method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9145e-160">One or more of the following conditions is true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-160">One or more of the following conditions is true.</span>
          </span>
          <span data-ttu-id="9145e-161">
            <paramref name="dirtyRect.X" /> &lt; 0  <paramref name="dirtyRect.Y" /> &lt; 0  <paramref name="dirtyRect.Width" /> &lt; 0 or <paramref name="dirtyRect.Width" /> &gt; <see cref="P:System.Windows.Interop.D3DImage.PixelWidth" /><paramref name="dirtyRect.Height" /> &lt; 0 or <paramref name="dirtyRect.Height" /> &gt; <see cref="P:System.Windows.Interop.D3DImage.PixelHeight" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-161">
              <paramref name="dirtyRect.X" /> &lt; 0  <paramref name="dirtyRect.Y" /> &lt; 0  <paramref name="dirtyRect.Width" /> &lt; 0 or <paramref name="dirtyRect.Width" /> &gt; <see cref="P:System.Windows.Interop.D3DImage.PixelWidth" /><paramref name="dirtyRect.Height" /> &lt; 0 or <paramref name="dirtyRect.Height" /> &gt; <see cref="P:System.Windows.Interop.D3DImage.PixelHeight" /></span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9145e-162">관리 되지 않는 리소스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-162">for access to unmanaged resources.</span>
          </span>
          <span data-ttu-id="9145e-163">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-163">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span>
          </span>
          <span data-ttu-id="9145e-164">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-164">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Interop.D3DImage.Unlock" />
        <altmember cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.D3DImage Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Interop.D3DImage Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As D3DImage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Interop::D3DImage ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.Windows.Interop.D3DImage" Usage="d3DImage.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.D3DImage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9145e-165">Creates a modifiable clone of this <see cref="T:System.Windows.Interop.D3DImage" /> object, making deep copies of this object's values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-165">Creates a modifiable clone of this <see cref="T:System.Windows.Interop.D3DImage" /> object, making deep copies of this object's values.</span>
          </span>
          <span data-ttu-id="9145e-166">When copying dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-166">When copying dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9145e-167">A modifiable clone of the current object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-167">A modifiable clone of the current object.</span>
          </span>
          <span data-ttu-id="9145e-168">The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be <see langword="false" /> even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was <see langword="true." /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-168">The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be <see langword="false" /> even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was <see langword="true." /></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-169">수정 가능한 복사본을 만드는이 메서드는 사용 중지 <xref:System.Windows.Freezable> 개체 (또는 <xref:System.Windows.Freezable> 개체).</span><span class="sxs-lookup"><span data-stu-id="9145e-169">This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object).</span></span> <span data-ttu-id="9145e-170">편의 위해이 메서드는 강력한 형식의 구현이 상속 된 버전을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-170">For convenience, this method shadows the inherited version with a strongly typed implementation.</span></span>  
  
 <span data-ttu-id="9145e-171">자세한 내용은 <xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="9145e-171">For more information, see <xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="d3DImage.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="9145e-172">The object to clone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-172">The object to clone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-173">Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-173">Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.D3DImage CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Interop.D3DImage CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As D3DImage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Interop::D3DImage ^ CloneCurrentValue();" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValue : unit -&gt; System.Windows.Interop.D3DImage" Usage="d3DImage.CloneCurrentValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.D3DImage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9145e-174">Creates a modifiable clone of this <see cref="T:System.Windows.Interop.D3DImage" /> object, making deep copies of this object's current values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-174">Creates a modifiable clone of this <see cref="T:System.Windows.Interop.D3DImage" /> object, making deep copies of this object's current values.</span>
          </span>
          <span data-ttu-id="9145e-175">Resource references, data bindings, and animations are not copied, but their current values are copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-175">Resource references, data bindings, and animations are not copied, but their current values are copied.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9145e-176">A modifiable clone of the current object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-176">A modifiable clone of the current object.</span>
          </span>
          <span data-ttu-id="9145e-177">The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be <see langword="false" /> even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-177">The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be <see langword="false" /> even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-178">수정 가능한 복사본을 만드는이 메서드는 사용 중지 <xref:System.Windows.Freezable> 개체 (또는 <xref:System.Windows.Freezable> 개체).</span><span class="sxs-lookup"><span data-stu-id="9145e-178">This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object).</span></span> <span data-ttu-id="9145e-179">편의 위해이 메서드는 강력한 형식의 구현이 상속 된 버전을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-179">For convenience, this method shadows the inherited version with a strongly typed implementation.</span></span>  
  
 <span data-ttu-id="9145e-180">자세한 내용은 <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="9145e-180">For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCurrentValueCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="d3DImage.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="9145e-181">The <see cref="T:System.Windows.Freezable" /> to be cloned.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-181">The <see cref="T:System.Windows.Freezable" /> to be cloned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-182">Makes the instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using current property values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-182">Makes the instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using current property values.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="CopyBackBuffer">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.Media.Imaging.BitmapSource CopyBackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.Media.Imaging.BitmapSource CopyBackBuffer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.CopyBackBuffer" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CopyBackBuffer () As BitmapSource" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::Media::Imaging::BitmapSource ^ CopyBackBuffer();" />
      <MemberSignature Language="F#" Value="abstract member CopyBackBuffer : unit -&gt; System.Windows.Media.Imaging.BitmapSource&#xA;override this.CopyBackBuffer : unit -&gt; System.Windows.Media.Imaging.BitmapSource" Usage="d3DImage.CopyBackBuffer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Imaging.BitmapSource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9145e-183">Creates a software copy of the <see cref="T:System.Windows.Interop.D3DImage" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-183">Creates a software copy of the <see cref="T:System.Windows.Interop.D3DImage" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9145e-184">A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is a software copy of the current state of the back buffer; otherwise, <see langword="null" /> if the back buffer cannot be read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-184">A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is a software copy of the current state of the back buffer; otherwise, <see langword="null" /> if the back buffer cannot be read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-185">합니다 <xref:System.Windows.Interop.D3DImage.CopyBackBuffer%2A> 메서드는 인쇄 시스템 등의 클라이언트에서 호출 및 <xref:System.Windows.Media.Imaging.RenderTargetBitmap> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-185">The <xref:System.Windows.Interop.D3DImage.CopyBackBuffer%2A> method is called by clients such as the printing system and the <xref:System.Windows.Media.Imaging.RenderTargetBitmap> class.</span></span>  
  
 <span data-ttu-id="9145e-186">선택적으로 재정의 된 <xref:System.Windows.Interop.D3DImage.CopyBackBuffer%2A> 메서드를 사용자 지정 논리를 구현 하 고 다른 반환 <xref:System.Windows.Media.Imaging.BitmapSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-186">Optionally override the <xref:System.Windows.Interop.D3DImage.CopyBackBuffer%2A> method to implement custom logic and return a different <xref:System.Windows.Media.Imaging.BitmapSource>.</span></span> <span data-ttu-id="9145e-187">예를 들어, 자리 표시자를 반환할 수 있습니다 <xref:System.Windows.Media.Imaging.BitmapSource> 경우 기본값 <xref:System.Windows.Interop.D3DImage.CopyBackBuffer%2A> 구현은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-187">For example, you can return a placeholder <xref:System.Windows.Media.Imaging.BitmapSource> if the default <xref:System.Windows.Interop.D3DImage.CopyBackBuffer%2A> implementation returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9145e-188">관리 되지 않는 리소스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-188">for access to unmanaged resources.</span>
          </span>
          <span data-ttu-id="9145e-189">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-189">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span>
          </span>
          <span data-ttu-id="9145e-190">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-190">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Media.Imaging.BitmapSource" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="d3DImage.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9145e-191">When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Interop.D3DImage" /> derived class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-191">When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Interop.D3DImage" /> derived class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9145e-192">The new instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-192">The new instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-193">파생 하는 경우는 <xref:System.Windows.Interop.D3DImage> 재정의 해야 클래스는 <xref:System.Windows.Interop.D3DImage.CreateInstanceCore%2A> 올바른 복제를 사용 하도록 설정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-193">If you derive from the <xref:System.Windows.Interop.D3DImage> class, you must override the <xref:System.Windows.Interop.D3DImage.CreateInstanceCore%2A> method to enable correct cloning.</span></span> <span data-ttu-id="9145e-194">기본 구현은 수행을 `return new D3DImage()`, 인스턴스가 다른 클래스에는 올바른 되지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-194">The default implementation performs a `return new D3DImage()`, which will not be correct if the instance is a different class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~D3DImage ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!D3DImage ()" />
      <MemberSignature Language="F#" Value="abstract member Finalize : unit -&gt; unit&#xA;override this.Finalize : unit -&gt; unit" Usage="d3DImage.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9145e-195">Frees resources and performs other cleanup operations before the <see cref="T:System.Windows.Interop.D3DImage" /> is reclaimed by garbage collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-195">Frees resources and performs other cleanup operations before the <see cref="T:System.Windows.Interop.D3DImage" /> is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-196">이 메서드를 재정의 <xref:System.Object.Finalize%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-196">This method overrides <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="9145e-197">응용 프로그램 코드는이 메서드를 호출 하지 개체의 `Finalize` 메서드를 호출 하 여 가비지 수집기에 의해 종료를 사용 하지 않도록 설정 된 경우가 아니면 자동으로 가비지를 수집 하는 동안 호출 됩니다는 <xref:System.GC.SuppressFinalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9145e-197">Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.</span></span>  
  
 <span data-ttu-id="9145e-198">자세한 내용은 [Finalize 메서드 및 소멸자](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)를 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md), 및 [Finalize 메서드 재정의](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-198">For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9145e-199">관리 되지 않는 리소스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-199">for access to unmanaged resources.</span>
          </span>
          <span data-ttu-id="9145e-200">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-200">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span>
          </span>
          <span data-ttu-id="9145e-201">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-201">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="FreezeCore">
      <MemberSignature Language="C#" Value="protected override sealed bool FreezeCore (bool isChecking);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool FreezeCore(bool isChecking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.FreezeCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function FreezeCore (isChecking As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool FreezeCore(bool isChecking);" />
      <MemberSignature Language="F#" Value="override this.FreezeCore : bool -&gt; bool" Usage="d3DImage.FreezeCore isChecking" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isChecking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isChecking">
          <span data-ttu-id="9145e-202">Has no effect.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-202">Has no effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-203">Makes the <see cref="T:System.Windows.Interop.D3DImage" /> unmodifiable or determines whether it can be made unmodifiable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-203">Makes the <see cref="T:System.Windows.Interop.D3DImage" /> unmodifiable or determines whether it can be made unmodifiable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9145e-204">
            <see langword="false" /> in all cases.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-204">
              <see langword="false" /> in all cases.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-205"><xref:System.Windows.Interop.D3DImage> 클래스 프런트 버퍼가 가용성으로 인해 가능한 변경 내용이 항상 있으므로 고정을 허용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-205">The <xref:System.Windows.Interop.D3DImage> class does not allow freezing because changes are always possible due to front buffer availability.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="d3DImage.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="9145e-206">The instance to copy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-206">The instance to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-207">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-207">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="d3DImage.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">
          <span data-ttu-id="9145e-208">The <see cref="T:System.Windows.Freezable" /> to copy and freeze.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-208">The <see cref="T:System.Windows.Freezable" /> to copy and freeze.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-209">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-209">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span>
          </span>
          <span data-ttu-id="9145e-210">If the object has animated dependency properties, their current animated values are copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-210">If the object has animated dependency properties, their current animated values are copied.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public override sealed double Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.D3DImage.Height" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Height : double" Usage="System.Windows.Interop.D3DImage.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-211">Gets the height of the <see cref="T:System.Windows.Interop.D3DImage" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-211">Gets the height of the <see cref="T:System.Windows.Interop.D3DImage" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9145e-212">높이 <see cref="T:System.Windows.Interop.D3DImage" />의 측정 단위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-212">The height of the <see cref="T:System.Windows.Interop.D3DImage" />, in measure units.</span>
          </span>
          <span data-ttu-id="9145e-213">측정 단위는 1/96 인치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-213">A measure unit is 1/96th inch.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-214">변수의 <xref:System.Windows.Interop.D3DImage.Height%2A> 를 호출 하 여 새 백 버퍼를 할당 하는 경우 변경할 수는 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9145e-214">The value of <xref:System.Windows.Interop.D3DImage.Height%2A> can change when a new back buffer is assigned by a call to the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Interop.D3DImage.Width" />
        <altmember cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="IsFrontBufferAvailable">
      <MemberSignature Language="C#" Value="public bool IsFrontBufferAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFrontBufferAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFrontBufferAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFrontBufferAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFrontBufferAvailable : bool" Usage="System.Windows.Interop.D3DImage.IsFrontBufferAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-215">Gets a value that indicates whether a front buffer exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-215">Gets a value that indicates whether a front buffer exists.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9145e-216">
            <see langword="true" /> 프런트 버퍼가 있으면 그렇지 않으면 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-216">
              <see langword="true" /> if a front buffer exists; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-217">경우에 따라 프런트 버퍼가 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-217">Occasionally, the front buffer becomes unavailable.</span></span> <span data-ttu-id="9145e-218">화면 잠금, Direct3D 응용 프로그램을 제외 하는 전체 화면, 사용자 전환 또는 기타 시스템 활동과이 부족 한 가용성을 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-218">This lack of availability can be caused by screen locking, full-screen exclusive Direct3D applications, user-switching, or other system activities.</span></span> <span data-ttu-id="9145e-219">WPF 응용 프로그램을 처리 하 여 알려집니다 이런 경우는 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-219">When this occurs, your WPF application is notified by handling the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> event.</span></span>  <span data-ttu-id="9145e-220">응용 프로그램이 사용할 수 없게 되는 프런트 버퍼가에 반응 하는 방법을 소프트웨어 렌더링으로 대체 WPF 사용 여부에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-220">How your application responds to the front buffer becoming unavailable depends on whether WPF is enabled to fall back to software rendering.</span></span> <span data-ttu-id="9145e-221"><xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 메서드 소프트웨어 렌더링으로 WPF 다시 속하는지 여부를 지정 하는 매개 변수를 받아들이는 오버 로드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-221">The <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method has an overload that takes a parameter that specifies whether WPF falls back to software rendering.</span></span> <span data-ttu-id="9145e-222">자세한 내용은 설명을 참조는 <xref:System.Windows.Interop.D3DImage> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-222">For more information, see the remarks in the <xref:System.Windows.Interop.D3DImage> class.</span></span>  
  
<a name="dependencyPropertyInfo_IsFrontBufferAvailable"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9145e-223">종속성 속성 정보</span><span class="sxs-lookup"><span data-stu-id="9145e-223">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9145e-224">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="9145e-224">Identifier field</span></span>|<xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty>|  
|<span data-ttu-id="9145e-225">메타 데이터 속성 설정 `true`</span><span class="sxs-lookup"><span data-stu-id="9145e-225">Metadata properties set to `true`</span></span>|<span data-ttu-id="9145e-226">없음</span><span class="sxs-lookup"><span data-stu-id="9145e-226">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9145e-227">다음 코드 예제를 확인 하는 방법을 보여 줍니다는 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable%2A> 컴퍼지션 대상 렌더링 하는 경우에 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-227">The following code example shows how to check the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailable%2A> property when rendering the composition target.</span></span> <span data-ttu-id="9145e-228">자세한 내용은 [연습: WPF에서 Direct3D9 콘텐츠 호스팅](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-228">For more information, see [Walkthrough: Hosting Direct3D9 Content in WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md).</span></span>  
  
 [!code-csharp[System.Windows.Interop.D3DImage#2](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Interop.D3DImage/CS/window1.xaml.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" />
        <altmember cref="E:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsFrontBufferAvailableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsFrontBufferAvailableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsFrontBufferAvailableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsFrontBufferAvailableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsFrontBufferAvailableChanged;" />
      <MemberSignature Language="F#" Value="member this.IsFrontBufferAvailableChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.IsFrontBufferAvailableChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-229">Occurs when the <see cref="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" /> property changes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-229">Occurs when the <see cref="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" /> property changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-230">처리는 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> 프런트 버퍼의 상태를 변경 하는 경우 알림을 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-230">Handle the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> to be notified when the status of the front buffer changes.</span></span> <span data-ttu-id="9145e-231">응용 프로그램이 사용할 수 없게 되는 프런트 버퍼가에 반응 하는 방법을 소프트웨어 렌더링으로 대체 WPF 사용 여부에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-231">How your application responds to the front buffer becoming unavailable depends on whether WPF is enabled to fall back to software rendering.</span></span> <span data-ttu-id="9145e-232"><xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 메서드 소프트웨어 렌더링으로 WPF 다시 속하는지 여부를 지정 하는 매개 변수를 받아들이는 오버 로드가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-232">The <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method has an overload that takes a parameter that specifies whether WPF falls back to software rendering.</span></span> <span data-ttu-id="9145e-233">자세한 내용은 설명을 참조는 <xref:System.Windows.Interop.D3DImage> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-233">For more information, see the remarks in the <xref:System.Windows.Interop.D3DImage> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" />
        <altmember cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="IsFrontBufferAvailableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFrontBufferAvailableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFrontBufferAvailableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFrontBufferAvailableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFrontBufferAvailableProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsFrontBufferAvailableProperty : System.Windows.DependencyProperty" Usage="System.Windows.Interop.D3DImage.IsFrontBufferAvailableProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-234">Identifies the <see cref="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" /> dependency property.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-234">Identifies the <see cref="P:System.Windows.Interop.D3DImage.IsFrontBufferAvailable" /> dependency property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public void Lock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Lock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.Lock" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Lock();" />
      <MemberSignature Language="F#" Value="member this.Lock : unit -&gt; unit" Usage="d3DImage.Lock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9145e-235">Locks the <see cref="T:System.Windows.Interop.D3DImage" /> and enables operations on the back buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-235">Locks the <see cref="T:System.Windows.Interop.D3DImage" /> and enables operations on the back buffer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-236">호출을 <xref:System.Windows.Interop.D3DImage.Lock%2A> 메서드를 호출 하 여 백 버퍼를 변경 합니다 <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> 및 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9145e-236">Call the <xref:System.Windows.Interop.D3DImage.Lock%2A> method to change the back buffer by calling the <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> and <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> methods.</span></span> <span data-ttu-id="9145e-237">하지만 <xref:System.Windows.Interop.D3DImage> 는 잠긴 응용 프로그램에 렌더링할 수도 있습니다 백 버퍼로 할당할 Direct3D 화면입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-237">While the <xref:System.Windows.Interop.D3DImage> is locked, your application can also render to the Direct3D surface assigned to the back buffer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9145e-238"><xref:System.Windows.Interop.D3DImage.Lock%2A> 렌더링 시스템은 프런트 버퍼가 업데이트할 백 버퍼를 읽을 때 메서드를 차단 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-238">The <xref:System.Windows.Interop.D3DImage.Lock%2A> method blocks when the rendering system is reading the back buffer to update the front buffer.</span></span> <span data-ttu-id="9145e-239">사용 된 <xref:System.Windows.Interop.D3DImage.TryLock%2A> 무기한으로 차단 되지 않도록 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-239">Use the <xref:System.Windows.Interop.D3DImage.TryLock%2A> method to avoid blocking indefinitely.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9145e-240">다음 코드 예제를 호출 하는 방법을 보여 줍니다는 <xref:System.Windows.Interop.D3DImage.Lock%2A> 백 버퍼에 대 한 업데이트를 사용 하도록 설정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-240">The following code example shows how to call the <xref:System.Windows.Interop.D3DImage.Lock%2A> method to enable updates to the back buffer.</span></span> <span data-ttu-id="9145e-241">자세한 내용은 [연습: WPF에서 Direct3D9 콘텐츠 호스팅](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-241">For more information, see [Walkthrough: Hosting Direct3D9 Content in WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md).</span></span>  
  
 [!code-csharp[System.Windows.Interop.D3DImage#3](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Interop.D3DImage/CS/window1.xaml.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9145e-242">The lock count equals <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-242">The lock count equals <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)" />
        <altmember cref="M:System.Windows.Interop.D3DImage.Unlock" />
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.Media.ImageMetadata Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.ImageMetadata Metadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.D3DImage.Metadata" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property Metadata As ImageMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::ImageMetadata ^ Metadata { System::Windows::Media::ImageMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Metadata : System.Windows.Media.ImageMetadata" Usage="System.Windows.Interop.D3DImage.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ImageMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-243">Gets the metadata associated with the image source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-243">Gets the metadata associated with the image source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9145e-244">모든 경우에 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-244">
              <see langword="null" /> in all cases.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelHeight">
      <MemberSignature Language="C#" Value="public int PixelHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PixelHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.D3DImage.PixelHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PixelHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PixelHeight { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PixelHeight : int" Usage="System.Windows.Interop.D3DImage.PixelHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-245">Gets the height of the <see cref="T:System.Windows.Interop.D3DImage" />, in pixels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-245">Gets the height of the <see cref="T:System.Windows.Interop.D3DImage" />, in pixels.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9145e-246">높이 <see cref="T:System.Windows.Interop.D3DImage" />, 픽셀에서입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-246">The height of the <see cref="T:System.Windows.Interop.D3DImage" />, in pixels.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-247">변수의 <xref:System.Windows.Interop.D3DImage.PixelHeight%2A> 를 호출 하 여 새 백 버퍼를 할당 하는 경우 변경할 수는 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9145e-247">The value of <xref:System.Windows.Interop.D3DImage.PixelHeight%2A> can change when a new back buffer is assigned by a call to the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9145e-248">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Interop.D3DImage.PixelHeight%2A> 백 버퍼의 변경 된 영역을 지정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-248">The following code example shows how to use the <xref:System.Windows.Interop.D3DImage.PixelHeight%2A> property to specify the changed region in the back buffer.</span></span> <span data-ttu-id="9145e-249">자세한 내용은 [연습: WPF에서 Direct3D9 콘텐츠 호스팅](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-249">For more information, see [Walkthrough: Hosting Direct3D9 Content in WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md).</span></span>  
  
 [!code-csharp[System.Windows.Interop.D3DImage#3](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Interop.D3DImage/CS/window1.xaml.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Interop.D3DImage.PixelWidth" />
        <altmember cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="PixelWidth">
      <MemberSignature Language="C#" Value="public int PixelWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PixelWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.D3DImage.PixelWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PixelWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PixelWidth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.PixelWidth : int" Usage="System.Windows.Interop.D3DImage.PixelWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-250">Gets the width of the <see cref="T:System.Windows.Interop.D3DImage" />, in pixels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-250">Gets the width of the <see cref="T:System.Windows.Interop.D3DImage" />, in pixels.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9145e-251">너비는 <see cref="T:System.Windows.Interop.D3DImage" />, 픽셀에서입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-251">The width of the <see cref="T:System.Windows.Interop.D3DImage" />, in pixels.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-252">변수의 <xref:System.Windows.Interop.D3DImage.PixelWidth%2A> 를 호출 하 여 새 백 버퍼를 할당 하는 경우 변경할 수는 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9145e-252">The value of <xref:System.Windows.Interop.D3DImage.PixelWidth%2A> can change when a new back buffer is assigned by a call to the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9145e-253">다음 코드 예제를 사용 하는 방법을 보여 줍니다는 <xref:System.Windows.Interop.D3DImage.PixelWidth%2A> 백 버퍼의 변경 된 영역을 지정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-253">The following code example shows how to use the <xref:System.Windows.Interop.D3DImage.PixelWidth%2A> property to specify the changed region in the back buffer.</span></span> <span data-ttu-id="9145e-254">자세한 내용은 [연습: WPF에서 Direct3D9 콘텐츠 호스팅](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-254">For more information, see [Walkthrough: Hosting Direct3D9 Content in WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md).</span></span>  
  
 [!code-csharp[System.Windows.Interop.D3DImage#3](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Interop.D3DImage/CS/window1.xaml.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Interop.D3DImage.PixelHeight" />
        <altmember cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBackBuffer">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-255">Assigns a Direct3D surface as the source of the back buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-255">Assigns a Direct3D surface as the source of the back buffer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBackBuffer">
      <MemberSignature Language="C#" Value="public void SetBackBuffer (System.Windows.Interop.D3DResourceType backBufferType, IntPtr backBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBackBuffer(valuetype System.Windows.Interop.D3DResourceType backBufferType, native int backBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBackBuffer (backBufferType As D3DResourceType, backBuffer As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBackBuffer(System::Windows::Interop::D3DResourceType backBufferType, IntPtr backBuffer);" />
      <MemberSignature Language="F#" Value="member this.SetBackBuffer : System.Windows.Interop.D3DResourceType * nativeint -&gt; unit" Usage="d3DImage.SetBackBuffer (backBufferType, backBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backBufferType" Type="System.Windows.Interop.D3DResourceType" />
        <Parameter Name="backBuffer" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="backBufferType">
          <span data-ttu-id="9145e-256">The type of Direct3D surface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-256">The type of Direct3D surface.</span>
          </span>
          <span data-ttu-id="9145e-257">Must be a valid <see cref="T:System.Windows.Interop.D3DResourceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-257">Must be a valid <see cref="T:System.Windows.Interop.D3DResourceType" />.</span>
          </span>
        </param>
        <param name="backBuffer">
          <span data-ttu-id="9145e-258">The Direct3D surface to assign as the back buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-258">The Direct3D surface to assign as the back buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-259">Assigns a Direct3D surface as the source of the back buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-259">Assigns a Direct3D surface as the source of the back buffer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-260">호출 된 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> Direct3D 화면을 백 버퍼를 할당 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-260">Call the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method to assign a Direct3D surface to the back buffer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9145e-261">성능은 Direct3D 화면의 설정에 따라 크게 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-261">Performance depends greatly on the settings of the Direct3D surface.</span></span> <span data-ttu-id="9145e-262">자세한 내용은 [Direct3D9 및 WPF 상호 운용성을 위한 성능 고려 사항](~/docs/framework/wpf/advanced/performance-considerations-for-direct3d9-and-wpf-interoperability.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-262">For more information, see [Performance Considerations for Direct3D9 and WPF Interoperability](~/docs/framework/wpf/advanced/performance-considerations-for-direct3d9-and-wpf-interoperability.md).</span></span>  
  
 <span data-ttu-id="9145e-263">호출을 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29> 오버 로드는 호출에 동일한를 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> 오버 로드를 `enableSoftwareFallback` 매개 변수 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-263">Calling the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29> overload is identical to calling the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> overload with the `enableSoftwareFallback` parameter set to `false`.</span></span> <span data-ttu-id="9145e-264">호출 하는 경우 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29> 호출 또는 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> 사용 하 여 합니다 `enableSoftwareFallback` 매개 변수 설정 `false`, 렌더링 시스템 프런트 버퍼가 사용할 수 없게 되 고 아무 것도 표시 하는 경우 백 버퍼에 대 한 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-264">When you call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29> or call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> with the `enableSoftwareFallback` parameter set to `false`, the rendering system releases its reference to the back buffer when front buffer becomes unavailable and nothing is displayed.</span></span> <span data-ttu-id="9145e-265">프런트 버퍼가 다시 제공 되 면 렌더링 발생을 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> WPF 응용 프로그램에 알리는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-265">When the front buffer is available again, the rendering system raises the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> event to notify your WPF application.</span></span>  <span data-ttu-id="9145e-266">에 대 한 이벤트 처리기를 만들 수는 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> 유효한 Direct3D 화면을 사용 하 여 다시 렌더링을 다시 시작 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-266">You can create an event handler for the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> event to restart rendering again with a valid Direct3D surface.</span></span> <span data-ttu-id="9145e-267">렌더링을 다시 시작 하려면 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-267">To restart rendering, you must call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A>.</span></span>  
  
 <span data-ttu-id="9145e-268">다음 목록에 대 한 필요한 백 버퍼 설정을 표시는 `IDirect3DSurface9` 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-268">The following list shows the required back buffer settings for the `IDirect3DSurface9` type.</span></span>  
  
-   <span data-ttu-id="9145e-269">`D3DFMT_A8R8G8B8` 또는 `D3DFMT_X8R8G8B8`</span><span class="sxs-lookup"><span data-stu-id="9145e-269">`D3DFMT_A8R8G8B8` or `D3DFMT_X8R8G8B8`</span></span>  
  
-   `D3DUSAGE_RENDERTARGET`  
  
-   `D3DPOOL_DEFAULT`  
  
 <span data-ttu-id="9145e-270">다중 샘플링에 대해 허용 되는지 `IDirect3DSurface9Ex` 만 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-270">Multisampling is allowed on `IDirect3DSurface9Ex` surfaces only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9145e-271">다음 코드 예제를 호출 하는 방법을 보여 줍니다는 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> Direct3D 화면을 할당 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-271">The following code example shows how to call the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method to assign a Direct3D surface.</span></span> <span data-ttu-id="9145e-272">자세한 내용은 [연습: WPF에서 Direct3D9 콘텐츠 호스팅](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-272">For more information, see [Walkthrough: Hosting Direct3D9 Content in WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md).</span></span>  
  
 [!code-csharp[System.Windows.Interop.D3DImage#3](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Interop.D3DImage/CS/window1.xaml.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9145e-273">The <see cref="T:System.Windows.Interop.D3DImage" /> has not been locked by a call to the <see cref="M:System.Windows.Interop.D3DImage.Lock" /> or <see cref="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)" /> methods.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-273">The <see cref="T:System.Windows.Interop.D3DImage" /> has not been locked by a call to the <see cref="M:System.Windows.Interop.D3DImage.Lock" /> or <see cref="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)" /> methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9145e-274">
            <paramref name="backBufferType" /> is not a valid <see cref="T:System.Windows.Interop.D3DResourceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-274">
              <paramref name="backBufferType" /> is not a valid <see cref="T:System.Windows.Interop.D3DResourceType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9145e-275">The creation parameters for <paramref name="backBuffer" /> do not meet the requirements for the <paramref name="backBufferType" />-or-The <paramref name="backBuffer" /> device is not valid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-275">The creation parameters for <paramref name="backBuffer" /> do not meet the requirements for the <paramref name="backBufferType" />-or-The <paramref name="backBuffer" /> device is not valid.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9145e-276">관리 되지 않는 리소스에 액세스 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-276">for access to unmanaged resources.</span>
          </span>
          <span data-ttu-id="9145e-277">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-277">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span>
          </span>
          <span data-ttu-id="9145e-278">연결 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-278">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Interop.D3DImage.Lock" />
        <altmember cref="M:System.Windows.Interop.D3DImage.Unlock" />
      </Docs>
    </Member>
    <Member MemberName="SetBackBuffer">
      <MemberSignature Language="C#" Value="public void SetBackBuffer (System.Windows.Interop.D3DResourceType backBufferType, IntPtr backBuffer, bool enableSoftwareFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBackBuffer(valuetype System.Windows.Interop.D3DResourceType backBufferType, native int backBuffer, bool enableSoftwareFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBackBuffer (backBufferType As D3DResourceType, backBuffer As IntPtr, enableSoftwareFallback As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBackBuffer(System::Windows::Interop::D3DResourceType backBufferType, IntPtr backBuffer, bool enableSoftwareFallback);" />
      <MemberSignature Language="F#" Value="member this.SetBackBuffer : System.Windows.Interop.D3DResourceType * nativeint * bool -&gt; unit" Usage="d3DImage.SetBackBuffer (backBufferType, backBuffer, enableSoftwareFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backBufferType" Type="System.Windows.Interop.D3DResourceType" />
        <Parameter Name="backBuffer" Type="System.IntPtr" />
        <Parameter Name="enableSoftwareFallback" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="backBufferType">
          <span data-ttu-id="9145e-279">The type of Direct3D surface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-279">The type of Direct3D surface.</span>
          </span>
          <span data-ttu-id="9145e-280">Must be a valid <see cref="T:System.Windows.Interop.D3DResourceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-280">Must be a valid <see cref="T:System.Windows.Interop.D3DResourceType" />.</span>
          </span>
        </param>
        <param name="backBuffer">
          <span data-ttu-id="9145e-281">The Direct3D surface to assign as the back buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-281">The Direct3D surface to assign as the back buffer.</span>
          </span>
        </param>
        <param name="enableSoftwareFallback">
          <span data-ttu-id="9145e-282">
            <see langword="true" /> to fall back on software rendering; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-282">
              <see langword="true" /> to fall back on software rendering; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-283">Assigns a Direct3D surface as the source of the back buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-283">Assigns a Direct3D surface as the source of the back buffer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-284">호출 하는 경우는 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29> 오버 로드 하거나 호출 합니다 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> 오버 로드는 `enableSoftwareFallback` 매개 변수 설정 `false`, 프런트 버퍼를 사용할 수 없게 하 고 아무 것도 렌더링 시스템 백 버퍼에 대 한 참조를 해제 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-284">When you call the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%29> overload or call the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> overload with the `enableSoftwareFallback` parameter set to `false`, the rendering system releases its reference to the back buffer when the front buffer becomes unavailable and nothing is displayed.</span></span> <span data-ttu-id="9145e-285">프런트 버퍼가 다시 제공 되 면 렌더링 발생을 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> WPF 응용 프로그램에 알리는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-285">When the front buffer is available again, the rendering system raises the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> event to notify your WPF application.</span></span>  <span data-ttu-id="9145e-286">에 대 한 이벤트 처리기를 만들 수는 <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> 유효한 Direct3D 화면을 사용 하 여 다시 렌더링을 다시 시작 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-286">You can create an event handler for the <xref:System.Windows.Interop.D3DImage.IsFrontBufferAvailableChanged> event to restart rendering again with a valid Direct3D surface.</span></span> <span data-ttu-id="9145e-287">렌더링을 다시 시작 하려면 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-287">To restart rendering, you must call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A>.</span></span>  
  
 <span data-ttu-id="9145e-288">호출 하는 경우 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> 사용 하 여 합니다 `enableSoftwareFallback` 매개 변수 설정 `true`를 호출 하지 않아도 되므로 프런트 버퍼를 사용할 수 없을 때 렌더링 시스템은 백 버퍼에 대 한 참조를 유지 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 프런트 버퍼가 사용 가능한 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-288">When you call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%28System.Windows.Interop.D3DResourceType%2CSystem.IntPtr%2CSystem.Boolean%29> with the `enableSoftwareFallback` parameter set to `true`, the rendering system retains its reference to the back buffer when the front buffer becomes unavailable, so there is no need to call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> when the front buffer is available again.</span></span>  <span data-ttu-id="9145e-289">사용자의 장치에 사용할 수 없게 되는 상황이 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-289">There may be situations where the user’s device becomes unavailable.</span></span>  <span data-ttu-id="9145e-290">문제가 발생 하면 호출 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 백 버퍼에 대 한 WPF의 참조를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-290">When that occurs, call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> to release WPF’s reference to the back buffer.</span></span>  <span data-ttu-id="9145e-291">장치를 재설정 해야 할 경우 호출 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 사용 하 여 `backBuffer` 로 설정 `null`, 다음 호출 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 사용 하 여 다시 `backBuffer` 유효한 Direct3D 화면을로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-291">If you need to reset your device, call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> with `backBuffer` set to `null`, and then call <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> again with `backBuffer` set to a valid Direct3D surface.</span></span>  
  
 <span data-ttu-id="9145e-292">다음 목록에 대 한 필요한 백 버퍼 설정을 표시는 `IDirect3DSurface9` 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-292">The following list shows the required back buffer settings for the `IDirect3DSurface9` type.</span></span>  
  
-   <span data-ttu-id="9145e-293">`D3DFMT_A8R8G8B8` 또는 `D3DFMT_X8R8G8B8`</span><span class="sxs-lookup"><span data-stu-id="9145e-293">`D3DFMT_A8R8G8B8` or `D3DFMT_X8R8G8B8`</span></span>  
  
-   `D3DUSAGE_RENDERTARGET`  
  
-   `D3DPOOL_DEFAULT`  
  
 <span data-ttu-id="9145e-294">다중 샘플링에 대해 허용 되는지 `IDirect3DSurface9Ex` 만 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-294">Multisampling is allowed on `IDirect3DSurface9Ex` surfaces only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryLock">
      <MemberSignature Language="C#" Value="public bool TryLock (System.Windows.Duration timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryLock(valuetype System.Windows.Duration timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryLock (timeout As Duration) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryLock(System::Windows::Duration timeout);" />
      <MemberSignature Language="F#" Value="member this.TryLock : System.Windows.Duration -&gt; bool" Usage="d3DImage.TryLock timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Windows.Duration" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="9145e-295">The duration to wait for the lock to be acquired.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-295">The duration to wait for the lock to be acquired.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9145e-296">Attempts to lock the <see cref="T:System.Windows.Interop.D3DImage" /> and waits for the specified duration.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-296">Attempts to lock the <see cref="T:System.Windows.Interop.D3DImage" /> and waits for the specified duration.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9145e-297">
            <see langword="true" /> if the lock was acquired; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-297">
              <see langword="true" /> if the lock was acquired; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="9145e-298">
            <paramref name="timeout" /> is set to <see cref="P:System.Windows.Duration.Automatic" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-298">
              <paramref name="timeout" /> is set to <see cref="P:System.Windows.Duration.Automatic" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9145e-299">The lock count equals <see cref="F:System.UInt32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-299">The lock count equals <see cref="F:System.UInt32.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Interop.D3DImage.Lock" />
        <altmember cref="M:System.Windows.Interop.D3DImage.Unlock" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public void Unlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unlock() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.D3DImage.Unlock" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Unlock();" />
      <MemberSignature Language="F#" Value="member this.Unlock : unit -&gt; unit" Usage="d3DImage.Unlock " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9145e-300">Decrements the lock count for the <see cref="T:System.Windows.Interop.D3DImage" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-300">Decrements the lock count for the <see cref="T:System.Windows.Interop.D3DImage" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-301">잠금 횟수를 합니다 <xref:System.Windows.Interop.D3DImage> 0에 도달 합니다 <xref:System.Windows.Interop.D3DImage> 완전히 잠금이 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-301">When the lock count for the <xref:System.Windows.Interop.D3DImage> reaches zero, the <xref:System.Windows.Interop.D3DImage> is fully unlocked.</span></span> <span data-ttu-id="9145e-302">합니다 <xref:System.Windows.Interop.D3DImage> 렌더링 이미지에 대 한 이전 호출에서 지정 된 영역 변경 된 경우 표시 되는 <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9145e-302">The <xref:System.Windows.Interop.D3DImage> is marked for rendering if the image has changed areas that were specified by previous calls to the <xref:System.Windows.Interop.D3DImage.AddDirtyRect%2A> method.</span></span>  
  
 <span data-ttu-id="9145e-303">변경 내용이 커밋될 및 렌더링이 발생 하면, 추가로 호출 하 여 <xref:System.Windows.Interop.D3DImage.Lock%2A> 메서드 블록 렌더링 스레드에 백 버퍼의 내용을 프런트 버퍼에 복사 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-303">When the changes are committed and rendering occurs, additional calls to the <xref:System.Windows.Interop.D3DImage.Lock%2A> method block until the render thread has copied the contents of the back buffer to the front buffer.</span></span> <span data-ttu-id="9145e-304">이 동기화 분리 등의 표시 아티팩트를 방지합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-304">This synchronization avoids display artifacts, such as tearing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9145e-305">하는 동안 Direct3D 화면을 업데이트 하지 마십시오는 <xref:System.Windows.Interop.D3DImage> 잠금이 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-305">Do not update the Direct3D surface while the <xref:System.Windows.Interop.D3DImage> is unlocked.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9145e-306">다음 코드 예제를 호출 하는 방법을 보여 줍니다는 <xref:System.Windows.Interop.D3DImage.Unlock%2A> 프런트 버퍼에 업데이트 된 백 버퍼를 복사 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-306">The following code example shows how to call the <xref:System.Windows.Interop.D3DImage.Unlock%2A> method to copy the updated back buffer to the front buffer.</span></span> <span data-ttu-id="9145e-307">자세한 내용은 [연습: WPF에서 Direct3D9 콘텐츠 호스팅](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="9145e-307">For more information, see [Walkthrough: Hosting Direct3D9 Content in WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-direct3d9-content-in-wpf.md).</span></span>  
  
 [!code-csharp[System.Windows.Interop.D3DImage#3](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Interop.D3DImage/CS/window1.xaml.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.D3DImage.Lock" />
        <altmember cref="M:System.Windows.Interop.D3DImage.TryLock(System.Windows.Duration)" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public override sealed double Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.D3DImage.Width" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable ReadOnly Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Width : double" Usage="System.Windows.Interop.D3DImage.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9145e-308">Gets the width of the <see cref="T:System.Windows.Interop.D3DImage" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-308">Gets the width of the <see cref="T:System.Windows.Interop.D3DImage" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9145e-309">너비는 <see cref="T:System.Windows.Interop.D3DImage" />의 측정 단위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-309">The width of the <see cref="T:System.Windows.Interop.D3DImage" />, in measure units.</span>
          </span>
          <span data-ttu-id="9145e-310">측정 단위는 1/96 인치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9145e-310">A measure unit is 1/96th inch.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9145e-311">변수의 <xref:System.Windows.Interop.D3DImage.Width%2A> 를 호출 하 여 새 백 버퍼를 할당 하는 경우 변경할 수는 <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="9145e-311">The value of <xref:System.Windows.Interop.D3DImage.Width%2A> can change when a new back buffer is assigned by a call to the <xref:System.Windows.Interop.D3DImage.SetBackBuffer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Interop.D3DImage.Height" />
        <altmember cref="M:System.Windows.Interop.D3DImage.SetBackBuffer(System.Windows.Interop.D3DResourceType,System.IntPtr)" />
      </Docs>
    </Member>
  </Members>
</Type>