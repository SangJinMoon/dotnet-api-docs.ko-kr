<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DecoderExceptionFallback.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac534b1a4a583811027615e6a5b6ecd9ef95616109a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34b1a4a583811027615e6a5b6ecd9ef95616109a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.DecoderExceptionFallback">
          <source>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an input character.</source>
          <target state="translated">입력 문자로 변환할 수 없는 인코딩된 입력 바이트 시퀀스에 대해 대체(fallback)라고 하는 오류 처리 메커니즘을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Text.DecoderExceptionFallback">
          <source>The fallback throws an exception instead of decoding the input byte sequence.</source>
          <target state="translated">대체(fallback)는 입력 바이트 시퀀스를 디코딩하는 대신 예외를 throw합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Text.DecoderExceptionFallback">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link.</source>
          <target state="translated">인코딩 이후에 통신 링크를 통해 또는 디스크와 같은 물리적 미디어에 전송할 수 있는 바이트 인코딩된 시퀀스를 유니코드 문자를 매핑합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class.</source>
          <target state="translated">문자는 다양 한 방법으로 매핑할 수 있습니다 및에서 파생 된 형식으로 나타납니다. 특정 인코딩을 <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>Specifically, the encoding type's <ph id="ph1">`GetBytes`</ph> method encodes a character to a byte sequence, and the <ph id="ph2">`GetChars`</ph> method decodes a byte sequence to a character.</source>
          <target state="translated">특히, 인코딩 형식의 <ph id="ph1">`GetBytes`</ph> 메서드는 문자를 바이트 시퀀스로 인코딩합니다 및 <ph id="ph2">`GetChars`</ph> 메서드는 문자는 바이트 시퀀스를 디코딩합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>A decoding operation can fail if the input byte sequence cannot be mapped by the encoding.</source>
          <target state="translated">디코딩 작업에서 인코딩할 입력된 바이트 시퀀스를 매핑할 수 없는 경우에 실패할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>For example, an <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object cannot decode a byte sequence that yields a character having a code point value that is outside the range U+0000 to U+007F.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> 개체 코드 포인트 값이 U + 0000 ~ U + 007F 범위 밖에 있는 문자를 생성 하는 바이트 시퀀스를 디코딩할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback.</source>
          <target state="translated">변환 하는 인코딩 또는 디코딩 변환을 수행할 수 없습니다의 경우.NET Framework는 대체 (fallback) 라고 하는 오류 처리 메커니즘을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>Your application can use the predefined .NET Framework decoder fallback, or it can create a custom decoder fallback derived from the <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> classes.</source>
          <target state="translated">응용 프로그램 미리 정의 된.NET Framework 디코더 대체 (fallback)를 사용 하거나에서 파생 된 사용자 지정 디코더 대체 (fallback)를 만들 수는 <ph id="ph1">&lt;xref:System.Text.DecoderFallback&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>The .NET Framework provides two predefined classes that implement different fallback strategies for handling decoding conversion failures.</source>
          <target state="translated">.NET Framework 디코딩 변환 실패를 처리 하기 위한 여러 대체 (fallback) 전략을 구현 하는 두 개의 미리 정의 된 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>The <ph id="ph1">&lt;xref:System.Text.DecoderReplacementFallback&gt;</ph> class substitutes a string provided in place of any input byte sequence that cannot be converted.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.DecoderReplacementFallback&gt;</ph> 클래스 변환할 수 없는 입력된 바이트 시퀀스 대신 제공 된 문자열로 대체 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>After the substitute string is emitted, the decoding operation continues converting the remainder of the input.</source>
          <target state="translated">대체 문자열을 내보낸 후 변환 입력의 나머지 부분에서는 디코딩 작업을 계속 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> class throws a <ph id="ph2">&lt;xref:System.Text.DecoderFallbackException&gt;</ph> when an invalid byte sequence is encountered.</source>
          <target state="translated">반면,는 <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> throw 클래스는 <ph id="ph2">&lt;xref:System.Text.DecoderFallbackException&gt;</ph> 잘못 된 바이트 시퀀스에서 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.DecoderExceptionFallback">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.DecoderFallbackException&gt;</ph> classes.</source>
          <target state="translated">다음 코드 예제는 <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Text.DecoderFallbackException&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Text.DecoderExceptionFallback.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
          <source>Returns a decoder fallback buffer that throws an exception if it cannot convert a sequence of bytes to a character.</source>
          <target state="translated">바이트 시퀀스를 문자로 변환할 수 없으면 예외를 throw하는 디코더 대체(fallback) 버퍼를 반환합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
          <source>A decoder fallback buffer that throws an exception when it cannot decode a byte sequence.</source>
          <target state="translated">바이트 시퀀스를 디코딩할 수 없으면 디코더 대체(fallback) 버퍼는 예외를 throw합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
          <source>A decoder fallback buffer is responsible for receiving and handling byte sequences that a decoder cannot convert to characters.</source>
          <target state="translated">디코더 대체 (fallback) 버퍼는 수신 및 디코더 문자로 변환할 수 없습니다 바이트 시퀀스를 처리 하는 일을 담당 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
          <source>This method returns an instance of the <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallbackBuffer&gt;</ph> class, which is a subclass of  the <ph id="ph2">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> class.</source>
          <target state="translated">인스턴스를 반환 하는이 메서드는 <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallbackBuffer&gt;</ph> 하위 클래스가 있는 클래스의는 <ph id="ph2">&lt;xref:System.Text.DecoderFallbackBuffer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
          <source>A <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallbackBuffer&gt;</ph> object throws an <ph id="ph2">&lt;xref:System.Text.DecoderFallbackException&gt;</ph> exception whenever a sequence of bytes is passed to its <ph id="ph3">&lt;xref:System.Text.DecoderExceptionFallbackBuffer.Fallback%2A&gt;</ph> method.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallbackBuffer&gt;</ph> 개체가 <ph id="ph2">&lt;xref:System.Text.DecoderFallbackException&gt;</ph> 바이트 예외 때마다 시퀀스에 전달 되는 <ph id="ph3">&lt;xref:System.Text.DecoderExceptionFallbackBuffer.Fallback%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Text.DecoderExceptionFallback.Equals(System.Object)">
          <source>An object that derives from the <ph id="ph1">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> 클래스에서 파생되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Text.DecoderExceptionFallback.Equals(System.Object)">
          <source>Indicates whether the current <ph id="ph1">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> object and a specified object are equal.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> 개체와 지정된 개체가 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Text.DecoderExceptionFallback.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not <ph id="ph3">&lt;see langword="null" /&gt;</ph> and is a <ph id="ph4">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> object; otherwise, <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이 아니고 <ph id="ph4">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph> 개체이면 <ph id="ph3">&lt;see langword="null" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph5">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Text.DecoderExceptionFallback.GetHashCode">
          <source>Retrieves the hash code for this instance.</source>
          <target state="translated">이 인스턴스의 해시 코드를 검색합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Text.DecoderExceptionFallback.GetHashCode">
          <source>The return value is always the same arbitrary value, and has no special significance.</source>
          <target state="translated">반환 값은 항상 같은 임의의 값이며 특별한 의미가 없습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.DecoderExceptionFallback.GetHashCode">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallback.GetHashCode%2A&gt;</ph> method always returns the same value, the application should not use this value to distinguish one <ph id="ph2">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> object from another.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Text.DecoderExceptionFallback.GetHashCode%2A&gt;</ph> 메서드는 항상 동일한 값을 반환, 응용 프로그램 하나를 구분 하기 위해이 값을 사용 해야 <ph id="ph2">&lt;xref:System.Text.DecoderExceptionFallback&gt;</ph> 에서 다른 개체입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Text.DecoderExceptionFallback.MaxCharCount">
          <source>Gets the maximum number of characters this instance can return.</source>
          <target state="translated">이 인스턴스가 반환할 수 있는 최대 문자 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.DecoderExceptionFallback.MaxCharCount">
          <source>The return value is always zero.</source>
          <target state="translated">반환 값은 항상 0입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>