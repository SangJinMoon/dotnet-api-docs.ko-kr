<Type Name="EncoderFallbackBuffer" FullName="System.Text.EncoderFallbackBuffer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0b4058ee79c75eee473ca4b7373c36ade4ead876" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407778" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EncoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncoderFallbackBuffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncoderFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncoderFallbackBuffer abstract" />
  <TypeSignature Language="F#" Value="type EncoderFallbackBuffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a9bb9-101">입력 문자를 인코딩할 수 없는 경우 대체(fallback) 처리기가 인코더에 대체 문자열을 반환할 수 있도록 허용하는 버퍼를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a9bb9-101">Provides a buffer that allows a fallback handler to return an alternate string to an encoder when it cannot encode an input character.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bb9-102">인코딩을 유니코드 문자 및 인코딩된 바이트 시퀀스로 간의 매핑을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-102">An encoding defines a mapping between a Unicode character and an encoded sequence of bytes.</span></span> <span data-ttu-id="a9bb9-103">입력된 문자를 출력 바이트 시퀀스로 변환, 인코딩 작업에는 매핑이 없는 특정 문자에 대해 정의 된 경우 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-103">An encoding operation, which converts an input character to an output byte sequence, fails if no mapping is defined for a particular character.</span></span>  
  
 <span data-ttu-id="a9bb9-104">.NET Framework는 오류 처리는 변환을 수행할 수 없는 경우 대체 (fallback)는 호출 메커니즘을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-104">The .NET Framework provides a failure handling mechanism, called a fallback, if a conversion cannot be performed.</span></span> <span data-ttu-id="a9bb9-105">모든 인코더 대체 (fallback) 처리기는 다음 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-105">All encoder fallback handlers must implement the following:</span></span>  
  
-   <span data-ttu-id="a9bb9-106">파생 된 클래스에 의해 표현 되는 인코더 대체 (fallback)는 <xref:System.Text.EncoderFallback> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-106">An encoder fallback, which is represented by a class derived from the <xref:System.Text.EncoderFallback> class.</span></span>  
  
-   <span data-ttu-id="a9bb9-107">파생 된 형식으로 표현 되는 인코더 대체 (fallback) 버퍼는 <xref:System.Text.EncoderFallbackBuffer> 문자열로 변환 작업을 반환할 수 있는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-107">An encoder fallback buffer, which is represented by a type derived from the <xref:System.Text.EncoderFallbackBuffer> class that can return a string to the conversion operation.</span></span>  
  
 <span data-ttu-id="a9bb9-108">대체 변환 오류를 처리 하도록 세 가지 전략을 사용할 수 있습니다.:</span><span class="sxs-lookup"><span data-stu-id="a9bb9-108">Fallbacks can use three strategies to handle conversion failures:</span></span>  
  
-   <span data-ttu-id="a9bb9-109">최적된 매핑을 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-109">Best-fit mapping.</span></span> <span data-ttu-id="a9bb9-110">인코더 대체 (fallback) 버퍼는 유사한 문자는 입력된 문자를 나타내는 문자열을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-110">The encoder fallback buffer can return a string that represents a close approximation to the input character.</span></span> <span data-ttu-id="a9bb9-111">.NET Framework에 가장 적합된 한 공용 제공 하지 않습니다 <xref:System.Text.EncoderFallbackBuffer> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-111">The .NET Framework does not provide a public best-fit <xref:System.Text.EncoderFallbackBuffer> implementation.</span></span>  
  
-   <span data-ttu-id="a9bb9-112">대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-112">Replacement.</span></span> <span data-ttu-id="a9bb9-113">인코더 대체 (fallback) 버퍼에는 매개 변수 등의 문자열을 반환할 수 있습니다 ("?")을 나타내는 문자를 인코딩할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-113">The encoder fallback buffer can return a string, such as a question mark ("?"), that indicates that a character could not be encoded.</span></span> <span data-ttu-id="a9bb9-114">.NET framework에서는 <xref:System.Text.EncoderReplacementFallback> 및 <xref:System.Text.EncoderReplacementFallbackBuffer> 클래스에서 공용 교체 대체 (fallback) 버퍼 구현을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-114">In the .NET Framework, the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.EncoderReplacementFallbackBuffer> classes provide a public replacement fallback buffer implementation.</span></span> <span data-ttu-id="a9bb9-115">생성자는 <xref:System.Text.EncoderReplacementFallback> 클래스 대체 문자열을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-115">The constructor of the <xref:System.Text.EncoderReplacementFallback> class enables you to define the replacement string.</span></span>  
  
-   <span data-ttu-id="a9bb9-116">예외입니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-116">Exception.</span></span> <span data-ttu-id="a9bb9-117"><xref:System.Text.EncoderFallbackBuffer> 구현 예외를 throw 하는 문자를 인코딩할 수 없는, 인코딩 작업을 종료 함을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-117">The <xref:System.Text.EncoderFallbackBuffer> implementation throws an exception, which indicates that a character cannot be encoded, and terminates the encoding operation.</span></span> <span data-ttu-id="a9bb9-118">이 경우 대체 (fallback) 처리기를 제공 해야는 <xref:System.Text.EncoderFallbackBuffer> 구현 하지만 인코더에 문자열을 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-118">In this case, the fallback handler must provide an <xref:System.Text.EncoderFallbackBuffer> implementation, although it does not return a string to the encoder.</span></span> <span data-ttu-id="a9bb9-119">.NET framework에서는 <xref:System.Text.EncoderExceptionFallback> 및 <xref:System.Text.EncoderExceptionFallbackBuffer> 클래스에서 throw 하는 공용 예외 대체 (fallback) 구현을 제공는 <xref:System.Text.EncoderFallbackException> 문자를 인코딩할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-119">In the .NET Framework, the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.EncoderExceptionFallbackBuffer> classes provide a public exception fallback implementation that throws an <xref:System.Text.EncoderFallbackException> when a character cannot be encoded.</span></span>  
  
 <span data-ttu-id="a9bb9-120">버퍼는 <xref:System.Text.EncoderFallbackBuffer> 구현 대체 (fallback) 인코더는 인코더에 대 한 응답에 반환 될 전체 문자열을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-120">The buffer in an <xref:System.Text.EncoderFallbackBuffer> implementation represents the entire string to be returned to the encoder in response to an encoder fallback.</span></span> <span data-ttu-id="a9bb9-121">일반적으로 구현 반환할 인코더와 남은 문자 수를 반환한 다음 문자의 인덱스 등의 상태 정보를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-121">Generally, implementations also include state information, such as the index of the next character to return to the encoder and the number of remaining characters to be returned.</span></span> <span data-ttu-id="a9bb9-122">때문에 <xref:System.Text.EncoderFallbackBuffer> 클래스는 추상 클래스에는 최소한 다음 멤버를 구현 하는 파생된 클래스가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-122">Because <xref:System.Text.EncoderFallbackBuffer> is an abstract class, it requires derived classes to implement the following members at a minimum:</span></span>  
  
-   <span data-ttu-id="a9bb9-123">오버 로드 된 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 메서드를 한 문자를 인코딩할 수 없으면 인코더에 의해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-123">The overloaded <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method, which is called by the encoder when it cannot encode a character.</span></span> <span data-ttu-id="a9bb9-124">인코더 대체 (fallback) 버퍼 구현에 두 가지 정보를 전달: 문자 또는 인코딩할 수 없는 서로게이트 쌍 및 입력에 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-124">The encoder passes two pieces of information to the fallback buffer implementation: the character or surrogate pair that could not be encoded and the index of the character in the input.</span></span> <span data-ttu-id="a9bb9-125">인코더 대체 (fallback) 예외 처리기를이 메서드에서 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-125">In an encoder fallback exception handler, the exception is thrown in this method.</span></span> <span data-ttu-id="a9bb9-126">그렇지 않으면 메서드가 반환 `true` 대체 (fallback)를 제공 하는 경우 또는 `false` 그렇지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-126">Otherwise, the method returns `true` if it provides a fallback, or `false` if it does not.</span></span>  
  
-   <span data-ttu-id="a9bb9-127"><xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 경우 인코더에서 반복적으로 호출 되는 메서드는 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 메서드 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-127">The <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method, which is called repeatedly by the encoder if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`.</span></span> <span data-ttu-id="a9bb9-128">연속 호출에서 처리기의 버퍼에 각 문자를 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-128">In successive calls, the handler should return each character in its buffer.</span></span> <span data-ttu-id="a9bb9-129">모든 문자를 반환 하면 U + 0000을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-129">When it has returned all characters, it should return U+0000.</span></span> <span data-ttu-id="a9bb9-130">예외 처리기는 항상 U + 0000을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-130">An exception handler always returns U+0000.</span></span>  
  
-   <span data-ttu-id="a9bb9-131"><xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> 메서드를 포인터는 버퍼의 이전 위치를 이동 하 려 하 고 이동에 성공 했는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-131">The <xref:System.Text.EncoderFallbackBuffer.MovePrevious%2A> method, which tries to move the pointer to the previous position in the buffer and indicates whether the move was successful.</span></span> <span data-ttu-id="a9bb9-132">예외 처리기가 항상 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-132">An exception handler always returns `false`.</span></span>  
  
-   <span data-ttu-id="a9bb9-133"><xref:System.Text.EncoderFallbackBuffer.Remaining%2A> 속성 인코더에 반환 될 남은 문자 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-133">The <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> property, which indicates the number of remaining characters to be returned to the encoder.</span></span> <span data-ttu-id="a9bb9-134">예외 대체 (fallback) 처리기는 항상 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-134">An exception fallback handler always returns zero.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.EncoderFallback" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EncoderFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EncoderFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9bb9-135">
            <see cref="T:System.Text.EncoderFallbackBuffer" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-135">Initializes a new instance of the <see cref="T:System.Text.EncoderFallbackBuffer" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fallback">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a9bb9-136">원래 입력을 인코딩할 수 없는 경우 대체 문자열을 사용할 수 있는지 여부나 원래 입력을 무시해야 하는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-136">Indicates whether a substitute string is available when the original input cannot be encoded, or whether the original input should be ignored.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknown As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknown, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknown, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknown" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknown">
          <span data-ttu-id="a9bb9-137">입력 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-137">An input character.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="a9bb9-138">입력 버퍼에 있는 문자의 인덱스 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-138">The index position of the character in the input buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bb9-139">파생 클래스에서 재정의될 때 지정된 입력 문자를 처리하도록 대체 버퍼를 준비합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-139">When overridden in a derived class, prepares the fallback buffer to handle the specified input character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bb9-140">대체 버퍼에서 <paramref name="charUnknown" />을 처리할 수 있으면 <see langword="true" />이고, 대체 버퍼에서 <paramref name="charUnknown" />을 무시하면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-140">
              <see langword="true" /> if the fallback buffer can process <paramref name="charUnknown" />; <see langword="false" /> if the fallback buffer ignores <paramref name="charUnknown" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bb9-141"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> 및 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> 메서드 호출 <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> 알 수 없는 입력된 문자를 인코딩할 수 없는 발생 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-141">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> and <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> methods call <xref:System.Text.DecoderFallbackBuffer.Fallback%28System.Byte%5B%5D%2CSystem.Int32%29> if they encounter an unknown input character that cannot be encoded.</span></span> <span data-ttu-id="a9bb9-142">반환 값이 `true` 대체 (fallback) 버퍼 호출 메서드를 호출 하는 입력된 문자를 처리할 수 있는지 나타냅니다는 <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 대체 (fallback) 버퍼의 각 문자를 얻는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-142">A return value of `true` indicates that the fallback buffer can process the input character, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer.</span></span> <span data-ttu-id="a9bb9-143">개별 문자를 처리 하지 않으므로 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 메서드 예외 대체 (fallback) 처리기에서 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-143">Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Fallback (charUnknownHigh As Char, charUnknownLow As Char, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Fallback(char charUnknownHigh, char charUnknownLow, int index);" />
      <MemberSignature Language="F#" Value="abstract member Fallback : char * char * int -&gt; bool" Usage="encoderFallbackBuffer.Fallback (charUnknownHigh, charUnknownLow, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charUnknownHigh" Type="System.Char" />
        <Parameter Name="charUnknownLow" Type="System.Char" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charUnknownHigh">
          <span data-ttu-id="a9bb9-144">입력 쌍의 high surrogate입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-144">The high surrogate of the input pair.</span>
          </span>
        </param>
        <param name="charUnknownLow">
          <span data-ttu-id="a9bb9-145">입력 쌍의 low surrogate입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-145">The low surrogate of the input pair.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="a9bb9-146">입력 버퍼에 있는 서로게이트 쌍의 인덱스 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-146">The index position of the surrogate pair in the input buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a9bb9-147">파생 클래스에서 재정의될 때 지정된 서로게이트 쌍을 처리하도록 대체 버퍼를 준비합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-147">When overridden in a derived class, prepares the fallback buffer to handle the specified surrogate pair.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bb9-148">대체 버퍼에서 <paramref name="charUnknownHigh" /> 및 <paramref name="charUnknownLow" />를 처리할 수 있으면 <see langword="true" />이고, 대체 버퍼에서 서로게이트 쌍을 무시하면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-148">
              <see langword="true" /> if the fallback buffer can process <paramref name="charUnknownHigh" /> and <paramref name="charUnknownLow" />; <see langword="false" /> if the fallback buffer ignores the surrogate pair.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bb9-149"><xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> 및 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> 메서드 호출 <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> 는 입력에는 서로게이트 쌍을 발견할 경우.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-149">The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=nameWithType> and <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType> methods call <xref:System.Text.EncoderFallbackBuffer.Fallback%28System.Char%2CSystem.Char%2CSystem.Int32%29> if they encounter a surrogate pair in their input.</span></span> <span data-ttu-id="a9bb9-150">반환 값이 `true` 대체 (fallback) 버퍼 호출 메서드를 호출 하는 서로게이트 쌍을 처리할 수 있는지 나타냅니다는 <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 대체 (fallback) 버퍼의 각 문자를 얻는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-150">A return value of `true` indicates that the fallback buffer can process the surrogate pair, which causes the calling method to call the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method to obtain each character of the fallback buffer.</span></span>  <span data-ttu-id="a9bb9-151">개별 문자를 처리 하지 않으므로 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 메서드 예외 대체 (fallback) 처리기에서 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-151">Because it does not process individual characters, the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method in an exception fallback handler throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public abstract char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract char GetNextChar();" />
      <MemberSignature Language="F#" Value="abstract member GetNextChar : unit -&gt; char" Usage="encoderFallbackBuffer.GetNextChar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9bb9-152">파생 클래스에서 재정의될 때 대체 버퍼에서 다음 문자를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-152">When overridden in a derived class, retrieves the next character in the fallback buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bb9-153">대체 버퍼에 있는 다음 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-153">The next character in the fallback buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bb9-154">인코딩 작업 호출에서 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 메서드 작업이 알 수 없는 문자 또는 입력에서 서로게이트 쌍을 발견할 경우.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-154">An encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method if the operation encounters an unknown character or surrogate pair in the input.</span></span> <span data-ttu-id="a9bb9-155">교체 대체 (fallback), 경우에는 경우 예를 들어는 <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 메서드 반환 `true`, 대체 문자열이 존재 하는 알 수 없는 입력 대신 인코딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-155">For example, in the case of a replacement fallback, if the <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true`, a substitute string exists that can be encoded instead of the unknown input.</span></span> <span data-ttu-id="a9bb9-156">인코딩 작업 호출에서 <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 메서드 반복적으로 고 한 번에 한 문자씩 대체 문자열을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-156">The encoding operation calls the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method repeatedly and obtains the substitute string one character at a time.</span></span> <span data-ttu-id="a9bb9-157">대체 (fallback) 버퍼에 있는 모든 문자는 인코더에 반환 될 때의 <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 메서드에서 U + 0000을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-157">When all characters in the fallback buffer have been returned to the encoder, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.</span></span>  
  
 <span data-ttu-id="a9bb9-158">예외 대체 (fallback) 처리기의 경우는 <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> 메서드에서 U + 0000을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-158">For an exception fallback handler, the <xref:System.Text.EncoderFallbackBuffer.GetNextChar%2A> method should return U+0000.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public abstract bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool MovePrevious();" />
      <MemberSignature Language="F#" Value="abstract member MovePrevious : unit -&gt; bool" Usage="encoderFallbackBuffer.MovePrevious " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9bb9-159">파생 클래스에서 재정의될 때 <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> 메서드에 대한 다음 호출에서 데이터 버퍼의 현재 문자 위치 이전의 문자 위치에 액세스하도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-159">When overridden in a derived class, causes the next call to the <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> method to access the data buffer character position that is prior to the current character position.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a9bb9-160">
            <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> 작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-160">
              <see langword="true" /> if the <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> operation was successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bb9-161">예외 대체 (fallback) 처리기 반환 해야 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-161">An exception fallback handler should return `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public abstract int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Remaining { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Remaining : int" Usage="System.Text.EncoderFallbackBuffer.Remaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a9bb9-162">파생 클래스에서 재정의될 때 처리되기 위해 남아 있는 현재 <see cref="T:System.Text.EncoderFallbackBuffer" /> 개체의 문자 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-162">When overridden in a derived class, gets the number of characters in the current <see cref="T:System.Text.EncoderFallbackBuffer" /> object that remain to be processed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a9bb9-163">아직 처리되지 않은 현재 대체 버퍼의 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-163">The number of characters in the current fallback buffer that have not yet been processed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9bb9-164"><xref:System.Text.EncoderFallbackBuffer.Fallback%2A> 메서드 반환 `true` 경우 <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> 0이 아닌 값입니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-164">The <xref:System.Text.EncoderFallbackBuffer.Fallback%2A> method returns `true` if <xref:System.Text.EncoderFallbackBuffer.Remaining%2A> is a nonzero value.</span></span>  
  
 <span data-ttu-id="a9bb9-165">예외 대체 (fallback) 처리기의 경우는 <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> 메서드에서 0을 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a9bb9-165">For an exception fallback handler, the <xref:System.Text.DecoderFallbackBuffer.Remaining%2A> method should return zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncoderFallbackBuffer.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="encoderFallbackBuffer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a9bb9-166">이 대체 버퍼와 관련된 모든 데이터 및 상태 정보를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-166">Initializes all data and state information pertaining to this fallback buffer.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="a9bb9-167">
            <para>호출한 후의 <see cref="M:System.Text.EncoderFallbackBuffer.Reset" /> 메서드를는 <see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /> 속성에 0을 반환 해야는 <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> 메서드에서 U + 0000을 반환 해야 및 <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> 메서드를 반환 하도록 <see langword="false" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="a9bb9-167">
              <para>After calling the <see cref="M:System.Text.EncoderFallbackBuffer.Reset" /> method, the <see cref="P:System.Text.EncoderFallbackBuffer.Remaining" /> property should return 0, the <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> method should return U+0000, and the <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> method should return <see langword="false" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>