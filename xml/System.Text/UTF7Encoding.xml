<Type Name="UTF7Encoding" FullName="System.Text.UTF7Encoding">
  <TypeSignature Language="C#" Value="public class UTF7Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UTF7Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF7Encoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UTF7Encoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UTF7Encoding : System::Text::Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a1e06-101">유니코드 문자의 UTF-7 인코딩을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-101">Represents a UTF-7 encoding of Unicode characters.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-102">인코딩은 유니코드 문자 집합을 바이트 시퀀스로 변환하는 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="a1e06-103">디코딩은 유니코드 문자 집합으로 인코딩된 바이트 시퀀스로 변형 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="a1e06-104">Utf-7 인코딩은 7 비트 ASCII 문자 시퀀스로 유니코드 문자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-104">The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters.</span></span> <span data-ttu-id="a1e06-105">이 인코딩은 가장 자주 전자 메일 또는 뉴스 그룹 프로토콜 등의 특정 프로토콜을 필요를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-105">This encoding supports certain protocols for which it is required, most often email or newsgroup protocols.</span></span> <span data-ttu-id="a1e06-106">U t F-7은 특별히 안전 하거나 강력 하 고 대부분의 시스템 허용 8 비트 인코딩을 u t F-8 일반적으로 u t F-7로 기본 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-106">Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-107"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-107"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1e06-108">보안상의 이유로 응용 프로그램 사용 해야 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-108">For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 <span data-ttu-id="a1e06-109">Utf 및에서 지 원하는 다른 인코딩에 대 한 자세한 내용은 <xref:System.Text>, 참조 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-109">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="a1e06-110"><xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 유니코드 문자 집합을 인코딩할 될 바이트 수를 확인 및 <xref:System.Text.UTF7Encoding.GetBytes%2A> 메서드에서는 실제 인코딩을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-110">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="a1e06-111">마찬가지로,는 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드 디코딩될, 바이트의 시퀀스의 문자 수를 확인 및 <xref:System.Text.UTF7Encoding.GetChars%2A> 및 <xref:System.Text.UTF7Encoding.GetString%2A> 메서드는 실제 디코딩을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-111">Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="a1e06-112"><xref:System.Text.UTF7Encoding> Windows 코드 페이지 65000에 해당합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-112"><xref:System.Text.UTF7Encoding> corresponds to the Windows code page 65000.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-113">개체가 직렬화 되 고 서로 다른.NET Framework 버전을 사용 하 여 역직렬화 하는 경우에 u t F-7로 인코딩된 개체의 상태 유지 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-113">The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-114">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding> 를 유니코드 문자의 문자열을 인코딩하고 바이트 배열에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-114">The following code example demonstrates how to use a <xref:System.Text.UTF7Encoding> to encode a string of Unicode characters and store them in a byte array.</span></span> <span data-ttu-id="a1e06-115">표시을 문자열로 다시을 바이트 배열을 디코딩할 때 데이터가 손실 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-115">Notice that when the byte array is decoded back to a string, no data is lost.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UTF7Encoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example/VB/snippet.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1e06-116"><see cref="T:System.Text.UTF7Encoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-116">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1e06-117"><see cref="T:System.Text.UTF7Encoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-117">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-118">이 생성자는 필요에 따라 문자를 허용 하지 않는 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-118">This constructor creates an instance that does not allow optional characters.</span></span> <span data-ttu-id="a1e06-119">호출의 <xref:System.Text.UTF7Encoding.%23ctor%2A> 생성자는 호출 하는 <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType> 사용 하는 생성자는 `allowOptionals` 매개 변수를 지정 하 고 `false` 해당 매개 변수에 대해 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-119">Calling the <xref:System.Text.UTF7Encoding.%23ctor%2A> constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=nameWithType> constructor that takes an `allowOptionals` parameter and specifying `false` for that parameter.</span></span>  
  
 <span data-ttu-id="a1e06-120">인스턴스 선택적 문자를 허용 하는 경우 유니코드 코드 포인트는 수정 된 기본 64 문자 대신 해당 선택적 문자를 사용 하 여 인코딩한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-120">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="a1e06-121">필요에 따라 문자는 느낌표 ("!"), 백슬래시 ("\\"), 세로줄 ("&#124;"), 큰따옴표 ("" "), 숫자 기호 ("#"), 달러 기호 ("$"), 백분율 기호 ("%"), 앰퍼샌드 ("& "), 별표 (" \* "), 세미콜론 (";"), 왼쪽 꺾쇠 괄호 ("\<"), 오른쪽 꺾쇠 괄호 (">"), 왼쪽된 중괄호 ("{"), 오른쪽 중괄호 ("}"), 왼쪽된 대괄호 ("["), 오른쪽 대괄호 ("]"), 등호 ("="), at 기호 ("@"), 곡절 악센트 ("^"), 밑줄 ("_") 및 억음 악센트 ("'").</span><span class="sxs-lookup"><span data-stu-id="a1e06-121">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-122"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-122"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1e06-123">보안상의 이유로 응용 프로그램은 사용 하도록 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-123">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-124">다음 코드 예제에는 새 만드는 방법을 보여 줍니다 <xref:System.Text.UTF7Encoding> 인스턴스 및 인코딩의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-124">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF7Encoding (bool allowOptionals);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool allowOptionals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (allowOptionals As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UTF7Encoding(bool allowOptionals);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="allowOptionals" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowOptionals">
          <span data-ttu-id="a1e06-125">선택적 문자가 허용되도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-125"><see langword="true" /> to specify that optional characters are allowed; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a1e06-126"><see cref="T:System.Text.UTF7Encoding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-126">Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding" /> class.</span></span> <span data-ttu-id="a1e06-127">매개 변수는 선택적 문자를 허용하는지 여부를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-127">A parameter specifies whether to allow optional characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-128">인스턴스 선택적 문자를 허용 하는 경우 유니코드 코드 포인트는 수정 된 기본 64 문자 대신 해당 선택적 문자를 사용 하 여 인코딩한 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-128">If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character.</span></span> <span data-ttu-id="a1e06-129">필요에 따라 문자는 느낌표 ("!"), 백슬래시 ("\\"), 세로줄 ("&#124;"), 큰따옴표 ("" "), 숫자 기호 ("#"), 달러 기호 ("$"), 백분율 기호 ("%"), 앰퍼샌드 ("& "), 별표 (" \* "), 세미콜론 (";"), 왼쪽 꺾쇠 괄호 ("\<"), 오른쪽 꺾쇠 괄호 (">"), 왼쪽된 중괄호 ("{"), 오른쪽 중괄호 ("}"), 왼쪽된 대괄호 ("["), 오른쪽 대괄호 ("]"), 등호 ("="), at 기호 ("@"), 곡절 악센트 ("^"), 밑줄 ("_") 및 억음 악센트 ("'").</span><span class="sxs-lookup"><span data-stu-id="a1e06-129">The optional characters are exclamation point ("!"), backward slash ("\\"), vertical line ("&#124;"), double quote ("""), number sign ("#"), dollar sign ("$"), percent sign ("%"), ampersand ("&"), asterisk ("\*"), semicolon (";"), left angle bracket ("\<"), right angle bracket (">"), left curly bracket ("{"), right curly bracket ("}"), left square bracket ("["), right square bracket ("]"), equal sign ("="), at sign ("@"), circumflex accent ("^"), underscore ("_"), and grave accent ("\`").</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-130"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-130"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1e06-131">보안상의 이유로 응용 프로그램은 사용 하도록 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-131">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-132">다음 코드 예제에는 새 만드는 방법을 보여 줍니다 <xref:System.Text.UTF7Encoding> 선택적 문자를 허용 하는 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-132">The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance that allows optional characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CPP/ctor-boolean.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/CS/ctor-boolean.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example/VB/ctor-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="a1e06-133">현재 <see cref="T:System.Text.UTF7Encoding" /> 개체와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-133">An object to compare to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></param>
        <summary><span data-ttu-id="a1e06-134">지정한 개체가 현재 <see cref="T:System.Text.UTF7Encoding" /> 개체와 같은지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-134">Gets a value indicating whether the specified object is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></summary>
        <returns>
          <span data-ttu-id="a1e06-135"><paramref name="value" />가 <see cref="T:System.Text.UTF7Encoding" /> 개체이고 현재 <see cref="T:System.Text.UTF7Encoding" /> 개체와 같으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-135"><see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.Text.UTF7Encoding" /> object and is equal to the current <see cref="T:System.Text.UTF7Encoding" /> object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-136">두 개의 <xref:System.Text.UTF7Encoding> 개체는 모두 하거나 필요에 따라 문자를 허용 하지 않습니다 경우 내부 <xref:System.Text.Encoding.EncoderFallback%2A> 및 <xref:System.Text.Encoding.DecoderFallback%2A> 속성이 같은지 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-136">Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="Overload:System.Text.UTF7Encoding.#ctor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1e06-137">문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-137">Calculates the number of bytes produced by encoding a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="a1e06-138">인코딩할 문자 집합이 포함된 <see cref="T:System.String" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-138">The <see cref="T:System.String" /> object containing the set of characters to encode.</span></span></param>
        <summary><span data-ttu-id="a1e06-139">지정한 <see cref="T:System.String" /> 개체의 문자를 인코딩하여 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-139">Calculates the number of bytes produced by encoding the characters in the specified <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="a1e06-140">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-140">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-141">정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 결과 바이트를 사용 하는 응용 프로그램을 저장 하는 데 필요한 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-141">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1e06-142">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-142">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1e06-143"><xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-143">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-144">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드 문자 배열을 인코딩하는 데 필요한 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-144">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-145"><paramref name="s" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-145"><paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a1e06-146">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-146">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1e06-147">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-147">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span>  
  
 <span data-ttu-id="a1e06-148">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-148">-and-</span></span>  
  
 <span data-ttu-id="a1e06-149"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-149"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="a1e06-150">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-150">A pointer to the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="a1e06-151">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-151">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="a1e06-152">지정한 문자 포인터에서 시작되는 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-152">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="a1e06-153">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-153">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-154">정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 결과 바이트를 사용 하는 응용 프로그램을 저장 하는 데 필요한 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-154">To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1e06-155">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-155">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1e06-156"><xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-156">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-157"><paramref name="chars" />가 <see langword="null" />(Visual Basic .NET의 경우 <see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-157"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" /> in Visual Basic .NET).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-158"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-158"><paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-159">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-159">-or-</span></span>  
  
 <span data-ttu-id="a1e06-160">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-160">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1e06-161">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-161">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="a1e06-162">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-162">-and-</span></span>  
  
 <span data-ttu-id="a1e06-163"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-163"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a1e06-164">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-164">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="a1e06-165">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-165">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="a1e06-166">인코딩할 문자 집합이 포함된 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-166">The character array containing the set of characters to encode.</span></span></param>
        <param name="index"><span data-ttu-id="a1e06-167">인코딩할 첫 번째 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-167">The index of the first character to encode.</span></span></param>
        <param name="count"><span data-ttu-id="a1e06-168">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-168">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="a1e06-169">지정한 문자 배열의 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-169">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span></span></summary>
        <returns><span data-ttu-id="a1e06-170">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-170">The number of bytes produced by encoding the specified characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-171">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-171">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1e06-172">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-172">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1e06-173"><xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-173">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-174">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드를 유니코드 문자 배열을 인코딩하는 데 필요한 바이트 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-174">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode an array of Unicode characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-175"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-175"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-176"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-176"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-177">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-177">-or-</span></span>  
  
 <span data-ttu-id="a1e06-178"><paramref name="index" /> 및 <paramref name="count" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-178"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
 <span data-ttu-id="a1e06-179">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-179">-or-</span></span>  
  
 <span data-ttu-id="a1e06-180">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-180">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1e06-181">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-181">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="a1e06-182">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-182">-and-</span></span>  
  
 <span data-ttu-id="a1e06-183"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-183"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1e06-184">문자 집합을 바이트 시퀀스로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-184">Encodes a set of characters into a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="a1e06-185">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-185">A pointer to the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="a1e06-186">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-186">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1e06-187">결과 바이트 시퀀스를 쓰기 시작할 위치를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-187">A pointer to the location at which to start writing the resulting sequence of bytes.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a1e06-188">쓸 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-188">The maximum number of bytes to write.</span></span></param>
        <summary><span data-ttu-id="a1e06-189">지정한 문자 포인터에서 시작하는 문자 집합을 지정한 바이트 포인터에서 시작하여 저장되는 바이트 시퀀스로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-189">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="a1e06-190"><paramref name="bytes" />가 가리키는 위치에 써지는 실제 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-190">The actual number of bytes written at the location indicated by <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-191">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-191">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1e06-192">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-192">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1e06-193"><xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-193">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1e06-194">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-194">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1e06-195">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="a1e06-195">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-196"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-196"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1e06-197">잘못 된 문자가 수정 된 기본 64 문자 인코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-197">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="a1e06-198">보안상의 이유로 응용 프로그램은 사용 하도록 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-198">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-199"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-199"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
 <span data-ttu-id="a1e06-200">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-200">-or-</span></span>  
  
 <span data-ttu-id="a1e06-201"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-201"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-202"><paramref name="charCount" /> 또는 <paramref name="byteCount" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-202"><paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a1e06-203"><paramref name="byteCount" />가 결과 바이트 수보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-203"><paramref name="byteCount" /> is less than the resulting number of bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1e06-204">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-204">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span>  
  
 <span data-ttu-id="a1e06-205">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-205">-and-</span></span>  
  
 <span data-ttu-id="a1e06-206"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-206"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a1e06-207">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-207">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="a1e06-208">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-208">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars"><span data-ttu-id="a1e06-209">인코딩할 문자 집합이 포함된 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-209">The character array containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="a1e06-210">인코딩할 첫 번째 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-210">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="a1e06-211">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-211">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1e06-212">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-212">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="a1e06-213">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-213">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="a1e06-214">지정한 문자 배열의 문자 집합을 지정한 바이트 배열로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-214">Encodes a set of characters from the specified character array into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="a1e06-215"><paramref name="bytes" />에 쓴 실제 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-215">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-216">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-216">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1e06-217">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-217">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1e06-218"><xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-218">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1e06-219">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-219">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1e06-220">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="a1e06-220">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-221"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-221"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1e06-222">잘못 된 문자가 수정 된 기본 64 문자 인코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-222">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="a1e06-223">보안상의 이유로 응용 프로그램은 사용 하도록 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-223">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-224">다음 코드 예제에 사용 하는 방법을 보여 줍니다는 <xref:System.Text.UTF7Encoding.GetBytes%2A> 메서드를 다양 한 문자를 인코딩하는 <xref:System.String> 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-224">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-225"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-225"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
 <span data-ttu-id="a1e06-226">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-226">-or-</span></span>  
  
 <span data-ttu-id="a1e06-227"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-227"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-228"><paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-228"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-229">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-229">-or-</span></span>  
  
 <span data-ttu-id="a1e06-230"><paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-230"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
 <span data-ttu-id="a1e06-231">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-231">-or-</span></span>  
  
 <span data-ttu-id="a1e06-232"><paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-232"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a1e06-233"><paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-233"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1e06-234">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-234">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span>  
  
 <span data-ttu-id="a1e06-235">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-235">-and-</span></span>  
  
 <span data-ttu-id="a1e06-236"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-236"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="a1e06-237">인코딩할 문자 집합이 포함된 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-237">The <see cref="T:System.String" /> containing the set of characters to encode.</span></span></param>
        <param name="charIndex"><span data-ttu-id="a1e06-238">인코딩할 첫 번째 문자의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-238">The index of the first character to encode.</span></span></param>
        <param name="charCount"><span data-ttu-id="a1e06-239">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-239">The number of characters to encode.</span></span></param>
        <param name="bytes"><span data-ttu-id="a1e06-240">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-240">The byte array to contain the resulting sequence of bytes.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="a1e06-241">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-241">The index at which to start writing the resulting sequence of bytes.</span></span></param>
        <summary><span data-ttu-id="a1e06-242">지정된 <see cref="T:System.String" />의 문자 집합을 지정된 바이트 배열로 인코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-242">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="a1e06-243"><paramref name="bytes" />에 쓴 실제 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-243">The actual number of bytes written into <paramref name="bytes" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-244">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-244">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1e06-245">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-245">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1e06-246"><xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-246">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1e06-247">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-247">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1e06-248">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="a1e06-248">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-249"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-249"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1e06-250">잘못 된 문자가 수정 된 기본 64 문자 인코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-250">Invalid characters are encoded as a modified base 64 character.</span></span> <span data-ttu-id="a1e06-251">보안상의 이유로 응용 프로그램은 사용 하도록 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-251">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-252">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding.GetBytes%2A> 메서드를 유니코드 문자 배열에서 요소의 범위를 인코딩하고 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-252">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of elements from a Unicode character array, and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-253"><paramref name="s" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-253"><paramref name="s" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
 <span data-ttu-id="a1e06-254">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-254">-or-</span></span>  
  
 <span data-ttu-id="a1e06-255"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-255"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-256"><paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-256"><paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-257">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-257">-or-</span></span>  
  
 <span data-ttu-id="a1e06-258"><paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-258"><paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span></span>  
  
 <span data-ttu-id="a1e06-259">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-259">-or-</span></span>  
  
 <span data-ttu-id="a1e06-260"><paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-260"><paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a1e06-261"><paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-261"><paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1e06-262">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-262">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span>  
  
 <span data-ttu-id="a1e06-263">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-263">-and-</span></span>  
  
 <span data-ttu-id="a1e06-264"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-264"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1e06-265">바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-265">Calculates the number of characters produced by decoding a sequence of bytes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1e06-266">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-266">A pointer to the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="a1e06-267">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-267">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="a1e06-268">지정한 바이트 포인터에서 시작되는 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-268">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span></span></summary>
        <returns><span data-ttu-id="a1e06-269">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-269">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-270">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 결과 문자를 저장 하기 위해 사용 하 여 <xref:System.Text.UTF7Encoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-270">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1e06-271">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-271">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1e06-272"><xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-272">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-273"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-273"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-274"><paramref name="count" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-274"><paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-275">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-275">-or-</span></span>  
  
 <span data-ttu-id="a1e06-276">결과 문자 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-276">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1e06-277">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-277">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span>  
  
 <span data-ttu-id="a1e06-278">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-278">-and-</span></span>  
  
 <span data-ttu-id="a1e06-279"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-279"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a1e06-280">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-280">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="a1e06-281">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-281">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1e06-282">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-282">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="a1e06-283">디코딩할 첫 번째 바이트의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-283">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="a1e06-284">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-284">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="a1e06-285">지정한 바이트 배열의 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-285">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="a1e06-286">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-286">The number of characters produced by decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-287">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 결과 문자를 저장 하기 위해 사용 하 여 <xref:System.Text.UTF7Encoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-287">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1e06-288">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-288">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1e06-289"><xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-289">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-290">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 바이트 배열의 요소 범위를 디코딩하여 생성 되는 문자 수를 반환 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1e06-290">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-291"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-291"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-292"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-292"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-293">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-293">-or-</span></span>  
  
 <span data-ttu-id="a1e06-294"><paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-294"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
 <span data-ttu-id="a1e06-295">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-295">-or-</span></span>  
  
 <span data-ttu-id="a1e06-296">결과 문자 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-296">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1e06-297">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-297">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="a1e06-298">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-298">-and-</span></span>  
  
 <span data-ttu-id="a1e06-299"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-299"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="Overload:System.Text.UTF7Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a1e06-300">바이트 시퀀스를 문자 집합으로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-300">Decodes a sequence of bytes into a set of characters.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1e06-301">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-301">A pointer to the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a1e06-302">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-302">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="a1e06-303">결과 문자 집합을 쓰기 시작할 위치를 가리키는 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-303">A pointer to the location at which to start writing the resulting set of characters.</span></span></param>
        <param name="charCount"><span data-ttu-id="a1e06-304">쓸 최대 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-304">The maximum number of characters to write.</span></span></param>
        <summary><span data-ttu-id="a1e06-305">지정한 바이트 포인터에서 시작하는 바이트 시퀀스를 지정한 문자 포인터에서 시작하여 저장되는 문자 집합으로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-305">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span></span></summary>
        <returns><span data-ttu-id="a1e06-306"><paramref name="chars" />가 가리키는 위치에 써지는 실제 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-306">The actual number of characters written at the location indicated by <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-307">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 결과 문자를 저장 하기 위해 사용 하 여 <xref:System.Text.UTF7Encoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-307">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1e06-308">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-308">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1e06-309"><xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-309">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1e06-310">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-310">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1e06-311">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="a1e06-311">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-312"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-312"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1e06-313">잘못 된 바이트, 발생 한 경우 <xref:System.Text.UTF7Encoding> 일반적으로 잘못 된 바이트를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-313">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="a1e06-314">바이트 값은 0이 확장 된 유니코드 문자가 바이트 16 진수 0x7F 보다 큰 경우, 결과에 저장 됩니다는 `chars` 배열 및 모든 이동 시퀀스가 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-314">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="a1e06-315">예를 들어 인코딩할 바이트 16 진수 0x81 이면 결과 문자는 U + 0081 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-315">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="a1e06-316">보안상의 이유로 응용 프로그램은 사용 하도록 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-316">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-317"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-317"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
 <span data-ttu-id="a1e06-318">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-318">-or-</span></span>  
  
 <span data-ttu-id="a1e06-319"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-319"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-320"><paramref name="byteCount" /> 또는 <paramref name="charCount" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-320"><paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a1e06-321"><paramref name="charCount" />가 결과 문자 수보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-321"><paramref name="charCount" /> is less than the resulting number of characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1e06-322">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-322">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="a1e06-323">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-323">-and-</span></span>  
  
 <span data-ttu-id="a1e06-324"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-324"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a1e06-325">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-325">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="a1e06-326">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-326">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1e06-327">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-327">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="byteIndex"><span data-ttu-id="a1e06-328">디코딩할 첫 번째 바이트의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-328">The index of the first byte to decode.</span></span></param>
        <param name="byteCount"><span data-ttu-id="a1e06-329">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-329">The number of bytes to decode.</span></span></param>
        <param name="chars"><span data-ttu-id="a1e06-330">결과 문자 집합을 포함할 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-330">The character array to contain the resulting set of characters.</span></span></param>
        <param name="charIndex"><span data-ttu-id="a1e06-331">결과 문자 집합을 쓰기 시작할 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-331">The index at which to start writing the resulting set of characters.</span></span></param>
        <summary><span data-ttu-id="a1e06-332">지정한 바이트 배열의 바이트 시퀀스를 지정한 문자 배열로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-332">Decodes a sequence of bytes from the specified byte array into the specified character array.</span></span></summary>
        <returns><span data-ttu-id="a1e06-333"><paramref name="chars" />에 쓴 실제 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-333">The actual number of characters written into <paramref name="chars" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-334">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 결과 문자를 저장 하기 위해 사용 하 여 <xref:System.Text.UTF7Encoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-334">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1e06-335">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-335">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1e06-336"><xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-336">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1e06-337">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-337">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1e06-338">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="a1e06-338">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-339"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-339"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1e06-340">잘못 된 바이트, 발생 한 경우 <xref:System.Text.UTF7Encoding> 일반적으로 잘못 된 바이트를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-340">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="a1e06-341">바이트 값은 0이 확장 된 유니코드 문자가 바이트 16 진수 0x7F 보다 큰 경우, 결과에 저장 됩니다는 `chars` 배열 및 모든 이동 시퀀스가 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-341">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="a1e06-342">예를 들어 인코딩할 바이트 16 진수 0x81 이면 결과 문자는 U + 0081 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-342">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="a1e06-343">보안상의 이유로 응용 프로그램은 사용 하도록 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-343">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-344">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding.GetChars%2A> 메서드는 바이트 배열에서 요소의 범위를 디코딩하고 문자 배열에 결과 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-344">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-345"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-345"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span>  
  
 <span data-ttu-id="a1e06-346">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-346">-or-</span></span>  
  
 <span data-ttu-id="a1e06-347"><paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-347"><paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-348"><paramref name="byteIndex" />, <paramref name="byteCount" /> 또는 <paramref name="charIndex" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-348"><paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-349">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-349">-or-</span></span>  
  
 <span data-ttu-id="a1e06-350"><paramref name="byteindex" /> 및 <paramref name="byteCount" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-350"><paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span></span>  
  
 <span data-ttu-id="a1e06-351">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-351">-or-</span></span>  
  
 <span data-ttu-id="a1e06-352"><paramref name="charIndex" />가 <paramref name="chars" />의 유효한 인덱스가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-352"><paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a1e06-353"><paramref name="chars" />의 용량(<paramref name="charIndex" /> ~ 배열 끝)이 부족해서 결과 문자를 수용할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-353"><paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1e06-354">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-354">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="a1e06-355">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-355">-and-</span></span>  
  
 <span data-ttu-id="a1e06-356"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-356"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1e06-357">UTF-7로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 디코더를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-357">Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="a1e06-358">UTF-7로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 <see cref="T:System.Text.Decoder" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-358">A <see cref="T:System.Text.Decoder" /> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-359"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> 메서드 순차 바이트 블록을 유사한 방식으로 문자의 순차 블록 변환는 <xref:System.Text.UTF7Encoding.GetChars%2A> 이 클래스의 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1e06-359">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class.</span></span> <span data-ttu-id="a1e06-360">그러나 한 <xref:System.Text.Decoder> 블록으로 확장 되는 바이트 시퀀스를 올바르게 디코딩할 수 있도록 호출 간의 상태 정보를 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-360">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="a1e06-361"><xref:System.Text.Decoder> 또한 데이터 블록의 끝에 후행 바이트를 보존 하 고 다음 디코딩 작업에서 후행 바이트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-361">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="a1e06-362">따라서 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 및 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 는 전체 데이터 스트림 하는 대신 데이터 블록을 처리 하기 때문에 네트워크 전송 및 파일 작업에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-362">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-363">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 로 인코딩된 바이트 문자 시퀀스를 u t F-7을 변환 하는 디코더를 얻는 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-363">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method to obtain a decoder to convert the UTF-7 encoded bytes into a sequence of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CPP/getdecoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/CS/getdecoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetDecoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example/VB/getdecoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1e06-364">유니코드 문자 시퀀스를 UTF-7로 인코딩된 바이트 시퀀스로 변환하는 인코더를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-364">Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span></span></summary>
        <returns><span data-ttu-id="a1e06-365">유니코드 문자 시퀀스를 UTF-7로 인코딩된 바이트 시퀀스로 변환하는 <see cref="T:System.Text.Encoder" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-365">A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-366"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> 메서드 순차 바이트 블록을 유사한 방식으로 문자의 순차 블록 변환는 <xref:System.Text.UTF7Encoding.GetChars%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1e06-366">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method.</span></span> <span data-ttu-id="a1e06-367">그러나 한 <xref:System.Text.Decoder> 블록으로 확장 되는 바이트 시퀀스를 올바르게 디코딩할 수 있도록 호출 간의 상태 정보를 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-367">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="a1e06-368"><xref:System.Text.Decoder> 또한 데이터 블록의 끝에 후행 바이트를 보존 하 고 다음 디코딩 작업에서 후행 바이트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-368">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="a1e06-369">따라서 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 및 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 는 전체 데이터 스트림 하는 대신 데이터 블록을 처리 하기 때문에 네트워크 전송 및 파일 작업에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-369">Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-370">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> u t F-7에 문자 시퀀스로 변환 하는 인코더를 얻는 메서드를 인코딩된 바이트 시퀀스로 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-370">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method to obtain an encoder to convert a sequence of characters into a UTF-7 encoded sequence of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CPP/getencoder-.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/CS/getencoder-.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetEncoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example/VB/getencoder-.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a1e06-371">현재 <see cref="T:System.Text.UTF7Encoding" /> 개체에 대한 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-371">Returns the hash code for the current <see cref="T:System.Text.UTF7Encoding" /> object.</span></span></summary>
        <returns><span data-ttu-id="a1e06-372">부호 있는 32비트 정수 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-372">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-373">반환 된 값의 <xref:System.Text.UTF7Encoding.GetHashCode%2A> 메서드 구분 하기에 적합 하지 않습니다. <xref:System.Text.UTF7Encoding> 에서 다른 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-373">The value returned by the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another.</span></span> <span data-ttu-id="a1e06-374">고유 해시 코드를 응용 프로그램에 필요한 경우 재정의 해야는 <xref:System.Text.UTF7Encoding.GetHashCode%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1e06-374">If your application needs a unique hash code, it should override the <xref:System.Text.UTF7Encoding.GetHashCode%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount"><span data-ttu-id="a1e06-375">인코딩할 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-375">The number of characters to encode.</span></span></param>
        <summary><span data-ttu-id="a1e06-376">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-376">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span></span></summary>
        <returns><span data-ttu-id="a1e06-377">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-377">The maximum number of bytes produced by encoding the specified number of characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-378">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetBytes%2A> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UTF7Encoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-378">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>.</span></span> <span data-ttu-id="a1e06-379">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-379">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="a1e06-380"><xref:System.Text.UTF7Encoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-380">The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1e06-381"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 현재 선택 된 최악의 경우를 포함 하 여 최악의 숫자, <xref:System.Text.EncoderFallback>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-381"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="a1e06-382">잠재적으로 큰 문자열로 대체를 선택한 경우 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 큰 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-382">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="a1e06-383">대부분의 경우가이 메서드는 작은 문자열에 대해 적합 한 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-383">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="a1e06-384">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-384">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="a1e06-385">사용 하 여 다른 접근 방식을 고려해 야 할 수도 있습니다 <xref:System.Text.UTF7Encoding.GetByteCount%2A> 또는 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-385">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a1e06-386">U t F-7은 인코딩 문자당 1 바이트를 ASCII 데이터에 매우 효율적인 하는 동안 다른 데이터에 대해 매우 효율적있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-386">While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data.</span></span> <span data-ttu-id="a1e06-387">앞에서 언급 한 대로 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 최악의 경우를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-387">As remarked above, <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> deals with a worst case.</span></span> <span data-ttu-id="a1e06-388">인코딩할 데이터는 주로 ASCII 및 ASCII 문자를 함께 클러스터링 하는 경우에 특히 u t F-7은 훨씬 더 많은 경우이 메서드에서 반환 된 숫자 보다 효율적으로 제안 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-388">If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.</span></span>  
  
 <span data-ttu-id="a1e06-389"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 관계가 없으며 <xref:System.Text.UTF7Encoding.GetChars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-389"><xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>.</span></span> <span data-ttu-id="a1e06-390">응용 프로그램을 사용 하면 비슷한 기능이 필요한 경우 <xref:System.Text.UTF7Encoding.GetChars%2A>를 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-390">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-391">`GetMaxByteCount(N)` 와 같은 값은 반드시 `N* GetMaxByteCount(1)`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-391">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-392">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> 메서드를 지정된 된 수의 문자를 인코딩하는 데 필요한 바이트의 최대 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-392">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-393"><paramref name="charCount" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-393"><paramref name="charCount" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-394">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-394">-or-</span></span>  
  
 <span data-ttu-id="a1e06-395">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-395">The resulting number of bytes is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.EncoderFallbackException"><span data-ttu-id="a1e06-396">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-396">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="a1e06-397">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-397">-and-</span></span>  
  
 <span data-ttu-id="a1e06-398"><see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-398"><see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount"><span data-ttu-id="a1e06-399">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-399">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="a1e06-400">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수를 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-400">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span></span></summary>
        <returns><span data-ttu-id="a1e06-401">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-401">The maximum number of characters produced by decoding the specified number of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-402">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UTF7Encoding.GetChars%2A> 결과 문자를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UTF7Encoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-402">To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>.</span></span> <span data-ttu-id="a1e06-403">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-403">To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="a1e06-404"><xref:System.Text.UTF7Encoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리의 할당을 통해 동안는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-404">The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="a1e06-405"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 현재 선택 된 최악의 경우를 포함 하 여 최악의 숫자, <xref:System.Text.DecoderFallback>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-405"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="a1e06-406">잠재적으로 큰 문자열로 대체를 선택한 경우 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 큰 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-406">If a fallback is chosen with a potentially large string, <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="a1e06-407">대부분의 경우가이 메서드는 작은 문자열에 대해 적합 한 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-407">In most cases, this method returns reasonable numbers for small strings.</span></span> <span data-ttu-id="a1e06-408">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-408">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="a1e06-409">사용 하 여 다른 접근 방식을 고려해 야 할 수도 있습니다 <xref:System.Text.UTF7Encoding.GetCharCount%2A> 또는 <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-409">You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a1e06-410"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 관계가 없으며 <xref:System.Text.UTF7Encoding.GetBytes%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-410"><xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>.</span></span> <span data-ttu-id="a1e06-411">응용 프로그램을 사용 하면 비슷한 기능이 필요한 경우 <xref:System.Text.UTF7Encoding.GetBytes%2A>를 사용 해야 <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-411">If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-412">`GetMaxCharCount(N)` 와 같은 값은 반드시 `N* GetMaxCharCount(1)`합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-412">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-413">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> 지정된 된 수의 바이트를 디코딩하여 생성 되는 최대 문자 수를 반환 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="a1e06-413">The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-414"><paramref name="byteCount" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="a1e06-414"><paramref name="byteCount" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-415">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-415">-or-</span></span>  
  
 <span data-ttu-id="a1e06-416">결과 문자 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-416">The resulting number of characters is greater than the maximum number that can be returned as an int.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1e06-417">대체가 발생했습니다(전체 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-417">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)</span></span>  
  
 <span data-ttu-id="a1e06-418">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-418">-and-</span></span>  
  
 <span data-ttu-id="a1e06-419"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-419"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="a1e06-420">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-420">The byte array containing the sequence of bytes to decode.</span></span></param>
        <param name="index"><span data-ttu-id="a1e06-421">디코딩할 첫 번째 바이트의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-421">The index of the first byte to decode.</span></span></param>
        <param name="count"><span data-ttu-id="a1e06-422">디코딩할 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-422">The number of bytes to decode.</span></span></param>
        <summary><span data-ttu-id="a1e06-423">바이트 배열의 바이트 범위를 문자열로 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-423">Decodes a range of bytes from a byte array into a string.</span></span></summary>
        <returns><span data-ttu-id="a1e06-424">지정된 바이트 시퀀스에 대한 디코딩 결과가 포함된 <see cref="T:System.String" />입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-424">A <see cref="T:System.String" /> containing the results of decoding the specified sequence of bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a1e06-425">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-425">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="a1e06-426">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UTF7Encoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UTF7Encoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="a1e06-426">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a1e06-427"><xref:System.Text.UTF7Encoding> 오류 검색을 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-427"><xref:System.Text.UTF7Encoding> does not provide error detection.</span></span> <span data-ttu-id="a1e06-428">잘못 된 바이트, 발생 한 경우 <xref:System.Text.UTF7Encoding> 일반적으로 잘못 된 바이트를 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-428">When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes.</span></span> <span data-ttu-id="a1e06-429">바이트 값은 0이 확장 된 유니코드 문자가 바이트 16 진수 0x7F 보다 큰 경우, 결과에 저장 됩니다는 `chars` 배열 및 모든 이동 시퀀스가 종료 됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-429">If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the `chars` array, and any shift sequence is terminated.</span></span> <span data-ttu-id="a1e06-430">예를 들어 인코딩할 바이트 16 진수 0x81 이면 결과 문자는 U + 0081 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-430">For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081.</span></span> <span data-ttu-id="a1e06-431">보안상의 이유로 응용 프로그램은 사용 하도록 좋습니다 <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, 또는 <xref:System.Text.UTF32Encoding> 오류 검색을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-431">For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a1e06-432">다음 코드 예제에서는, 바이트의 배열에 문자열을 인코딩한 다음 문자열로 다시 바이트를 디코딩합니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-432">The following code example encodes a string into an array of bytes, and then decodes the bytes back into a string.</span></span>  
  
 [!code-cpp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CPP/getstring.cpp#1)]
 [!code-csharp[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF7Encoding.getstring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring/VB/getstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a1e06-433"><paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-433"><paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a1e06-434"><paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-434"><paramref name="index" /> or <paramref name="count" /> is less than zero.</span></span>  
  
 <span data-ttu-id="a1e06-435">또는</span><span class="sxs-lookup"><span data-stu-id="a1e06-435">-or-</span></span>  
  
 <span data-ttu-id="a1e06-436"><paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-436"><paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span></span></exception>
        <exception cref="T:System.Text.DecoderFallbackException"><span data-ttu-id="a1e06-437">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span><span class="sxs-lookup"><span data-stu-id="a1e06-437">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span></span>  
  
 <span data-ttu-id="a1e06-438">및</span><span class="sxs-lookup"><span data-stu-id="a1e06-438">-and-</span></span>  
  
 <span data-ttu-id="a1e06-439"><see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="a1e06-439"><see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span></span></exception>
        <altmember cref="M:System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>