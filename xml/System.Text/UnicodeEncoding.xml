<Type Name="UnicodeEncoding" FullName="System.Text.UnicodeEncoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37bb8ffd133cbb1ddd3c3fdd2f593086d39584aa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531567" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UnicodeEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnicodeEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UnicodeEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UnicodeEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnicodeEncoding : System::Text::Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7a7bb-101">유니코드 문자의 UTF-16 인코딩을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7a7bb-101">Represents a UTF-16 encoding of Unicode characters.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-102">인코딩은 유니코드 문자 집합을 바이트 시퀀스로 변환하는 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-102">Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</span></span> <span data-ttu-id="7a7bb-103">디코딩은 유니코드 문자 집합으로 인코딩된 바이트 시퀀스로 변형 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-103">Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</span></span>  
  
 <span data-ttu-id="7a7bb-104">[유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123) 코드 포인트 (숫자) 지원 되는 모든 스크립트의 각 문자를 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-104">The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script.</span></span> <span data-ttu-id="7a7bb-105">유니코드 변환 형식 (UTF)는 코드 포인트를 인코딩하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-105">A Unicode Transformation Format (UTF) is a way to encode that code point.</span></span> <span data-ttu-id="7a7bb-106">[유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123) 다음 Utf를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-106">The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:</span></span>  
  
-   <span data-ttu-id="7a7bb-107">U t F-8을 각 코드 포인트를 1 ~ 4 바이트의 시퀀스로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-107">UTF-8, which represents each code point as a sequence of one to four bytes.</span></span>  
  
-   <span data-ttu-id="7a7bb-108">U t F-16이 고는 각 코드 포인트를 1 ~ 2 16 비트 정수 시퀀스로 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-108">UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</span></span>  
  
-   <span data-ttu-id="7a7bb-109">U t F-32는 각 코드 포인트를 32 비트 정수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-109">UTF-32, which represents each code point as a 32-bit integer.</span></span>  
  
 <span data-ttu-id="7a7bb-110">Utf 및에서 지 원하는 다른 인코딩에 대 한 자세한 내용은 <xref:System.Text>, 참조 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-110">For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
 <span data-ttu-id="7a7bb-111"><xref:System.Text.UnicodeEncoding> 클래스 utf-16 인코딩을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-111">The <xref:System.Text.UnicodeEncoding> class represents a UTF-16 encoding.</span></span> <span data-ttu-id="7a7bb-112">인코더 big endian 바이트 순서를 바꿔서 사용할 수 있습니다 (최상위 바이트 첫 번째) 또는 little endian 바이트 순서 (최하위 바이트 첫 번째).</span><span class="sxs-lookup"><span data-stu-id="7a7bb-112">The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first).</span></span> <span data-ttu-id="7a7bb-113">예를 들어 영문 대문자 (코드 포인트 U + 0041)으로 serialize 됩니다 (16 진수)에서 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-113">For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="7a7bb-114">Big endian 바이트 순서: 00 00 00 41</span><span class="sxs-lookup"><span data-stu-id="7a7bb-114">Big endian byte order: 00 00 00 41</span></span>  
  
-   <span data-ttu-id="7a7bb-115">Little endian 바이트 순서: 41 00 00 00</span><span class="sxs-lookup"><span data-stu-id="7a7bb-115">Little endian byte order: 41 00 00 00</span></span>  
  
 <span data-ttu-id="7a7bb-116">특정 플랫폼의 기본 바이트 순서를 사용 하 여 유니코드 문자를 저장 하려면 일반적으로 더 효율적입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-116">It is generally more efficient to store Unicode characters using the native byte order of a particular platform.</span></span> <span data-ttu-id="7a7bb-117">예를 들어 Intel 컴퓨터 등의 little endian 플랫폼에서 little endian 바이트 순서를 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-117">For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</span></span> <span data-ttu-id="7a7bb-118"><xref:System.Text.UnicodeEncoding> 1200 (little endian 바이트 순서) 및 1201 (big endian 바이트 순서)은 Windows 코드 페이지에 해당 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-118">The <xref:System.Text.UnicodeEncoding> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order).</span></span> <span data-ttu-id="7a7bb-119">특정 아키텍처의 "endianness"를 호출 하 여 확인할 수 있습니다는 <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-119">You can determine the "endianness" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7a7bb-120">필요에 따라는 <xref:System.Text.UnicodeEncoding> 개체 배열이 인코딩 프로세스에서 발생 하는 바이트 시퀀스에 접두어로 추가 될 수 있는 바이트는 바이트 순서 표시 (BOM)를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-120">Optionally, the <xref:System.Text.UnicodeEncoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="7a7bb-121">바이트 순서 표시 (BOM)를 포함 하는 머리말, 디코더에서 바이트 순서 및 변환 형식 또는 u t F를 결정 하는 데 도움이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-121">If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</span></span>  
  
 <span data-ttu-id="7a7bb-122">경우는 <xref:System.Text.UnicodeEncoding> 인스턴스 BOM을 제공 하도록 구성 된, 호출 하 여 검색할 수 있습니다는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드가 메서드는 빈 배열을 반환 하는 그렇지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-122">If the <xref:System.Text.UnicodeEncoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method; otherwise, the method returns an empty array.</span></span> <span data-ttu-id="7a7bb-123">인 경우에는 <xref:System.Text.UnicodeEncoding> 개체가 BOM 지원에 대해 구성 된, 적절 한;로 인코딩된 바이트 스트림의 시작 부분에 BOM을 포함 해야의 인코딩 메서드는 <xref:System.Text.UnicodeEncoding> 클래스 이렇게 하지 않으면 자동으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-123">Note that, even if a <xref:System.Text.UnicodeEncoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UnicodeEncoding> class do not do this automatically.</span></span>  
  
 <span data-ttu-id="7a7bb-124">인스턴스화해야 오류 검색을 활성화 하 고 클래스 인스턴스를 더욱 안전 하 게는 <xref:System.Text.UnicodeEncoding> 호출 하 여 개체는 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자 및 설정을 해당 `throwOnInvalidBytes` 인수를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-124">To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UnicodeEncoding> object by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span> <span data-ttu-id="7a7bb-125">오류 검색에 잘못 된 문자 또는 바이트 시퀀스를 검색 하는 메서드가 throw는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-125">With error detection, a method that detects an invalid sequence of characters or bytes throws a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-126">오류 검색 없이 예외가 throw 되지 하 고 잘못 된 시퀀스는 일반적으로 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-126">Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</span></span>  
  
 <span data-ttu-id="7a7bb-127">인스턴스화할 수 있습니다는 <xref:System.Text.UnicodeEncoding> 에서 다양 한 방법으로 하는지 여부를 제공 하려는 바이트 순서 표시 (BOM), big endian 또는 little endian 인코딩을 것인지 및 오류 검색을 사용 하도록 설정 하려는 여부에 따라 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-127">You can instantiate a <xref:System.Text.UnicodeEncoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</span></span> <span data-ttu-id="7a7bb-128">다음 표에 <xref:System.Text.UnicodeEncoding> 생성자 및 <xref:System.Text.Encoding> 반환 하는 속성을 <xref:System.Text.UnicodeEncoding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-128">The following table lists the <xref:System.Text.UnicodeEncoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
|<span data-ttu-id="7a7bb-129">멤버</span><span class="sxs-lookup"><span data-stu-id="7a7bb-129">Member</span></span>|<span data-ttu-id="7a7bb-130">endian</span><span class="sxs-lookup"><span data-stu-id="7a7bb-130">Endianness</span></span>|<span data-ttu-id="7a7bb-131">BOM</span><span class="sxs-lookup"><span data-stu-id="7a7bb-131">BOM</span></span>|<span data-ttu-id="7a7bb-132">오류 검색</span><span class="sxs-lookup"><span data-stu-id="7a7bb-132">Error detection</span></span>|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.BigEndianUnicode%2A>|<span data-ttu-id="7a7bb-133">Big endian</span><span class="sxs-lookup"><span data-stu-id="7a7bb-133">Big-endian</span></span>|<span data-ttu-id="7a7bb-134">예</span><span class="sxs-lookup"><span data-stu-id="7a7bb-134">Yes</span></span>|<span data-ttu-id="7a7bb-135">없음 (교체 대체)</span><span class="sxs-lookup"><span data-stu-id="7a7bb-135">No (Replacement fallback)</span></span>|  
|<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>|<span data-ttu-id="7a7bb-136">Little endian</span><span class="sxs-lookup"><span data-stu-id="7a7bb-136">Little-endian</span></span>|<span data-ttu-id="7a7bb-137">예</span><span class="sxs-lookup"><span data-stu-id="7a7bb-137">Yes</span></span>|<span data-ttu-id="7a7bb-138">없음 (교체 대체)</span><span class="sxs-lookup"><span data-stu-id="7a7bb-138">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=nameWithType>|<span data-ttu-id="7a7bb-139">Little endian</span><span class="sxs-lookup"><span data-stu-id="7a7bb-139">Little-endian</span></span>|<span data-ttu-id="7a7bb-140">예</span><span class="sxs-lookup"><span data-stu-id="7a7bb-140">Yes</span></span>|<span data-ttu-id="7a7bb-141">없음 (교체 대체)</span><span class="sxs-lookup"><span data-stu-id="7a7bb-141">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|<span data-ttu-id="7a7bb-142">구성 가능 여부</span><span class="sxs-lookup"><span data-stu-id="7a7bb-142">Configurable</span></span>|<span data-ttu-id="7a7bb-143">구성 가능 여부</span><span class="sxs-lookup"><span data-stu-id="7a7bb-143">Configurable</span></span>|<span data-ttu-id="7a7bb-144">없음 (교체 대체)</span><span class="sxs-lookup"><span data-stu-id="7a7bb-144">No (Replacement fallback)</span></span>|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|<span data-ttu-id="7a7bb-145">구성 가능 여부</span><span class="sxs-lookup"><span data-stu-id="7a7bb-145">Configurable</span></span>|<span data-ttu-id="7a7bb-146">구성 가능 여부</span><span class="sxs-lookup"><span data-stu-id="7a7bb-146">Configurable</span></span>|<span data-ttu-id="7a7bb-147">구성 가능 여부</span><span class="sxs-lookup"><span data-stu-id="7a7bb-147">Configurable</span></span>|  
  
 <span data-ttu-id="7a7bb-148"><xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 유니코드 문자 집합을 인코딩할 될 바이트 수를 확인 및 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드에서는 실제 인코딩을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-148">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method performs the actual encoding.</span></span>  
  
 <span data-ttu-id="7a7bb-149">마찬가지로,는 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드 디코딩될, 바이트의 시퀀스의 문자 수를 확인 및 <xref:System.Text.UnicodeEncoding.GetChars%2A> 및 <xref:System.Text.UnicodeEncoding.GetString%2A> 메서드는 실제 디코딩을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-149">Likewise, the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UnicodeEncoding.GetChars%2A> and <xref:System.Text.UnicodeEncoding.GetString%2A> methods perform the actual decoding.</span></span>  
  
 <span data-ttu-id="7a7bb-150">인코더 또는 디코더에 인코딩 또는 디코딩 데이터 (예: 1 백만 문자의 인코딩된 문자열로 100, 000 문자 세그먼트에) 여러 개의 블록에 걸쳐 있는 경우에 상태 정보 저장을 사용 하 여 수에 대 한는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 및 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 속성 각각.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-150">For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> and <xref:System.Text.UnicodeEncoding.GetDecoder%2A> properties, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-151">다음 예제에서는 유니코드 문자의 문자열을 사용 하 여 바이트 배열로 인코딩하는 방법을 <xref:System.Text.UnicodeEncoding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-151">The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="7a7bb-152">바이트 배열은 데이터 손실 없이 있다는 것을 보여 주기 위해 문자열로 디코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-152">The byte array is decoded into a string to demonstrate that there is no loss of data.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  
  
 <span data-ttu-id="7a7bb-153">다음 예제에서는 인코딩된 바이트를 파일에 기록 하 고 바이트 순서 표시 (BOM)를 사용 하 여 바이트 스트림을 접두사는 점을 제외 하 고는 이전 쿼리에서와 동일한 문자열을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-153">The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</span></span> <span data-ttu-id="7a7bb-154">그런 다음 두 가지 방법으로 파일을 읽어:를 사용 하 여 텍스트 파일로 <xref:System.IO.StreamReader> 개체 및 이진 파일로 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-154">It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file.</span></span> <span data-ttu-id="7a7bb-155">와 마찬가지로, 두 경우 모두 BOM ´ â 새로 읽기 문자열 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-155">As you would expect, in neither case is the BOM included in the newly read string.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF32Encoding" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.UTF7Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-156">
            <see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-156">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-157">
            <see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-157">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-158">이 생성자를 little endian 바이트 순서를 사용 하 여 유니코드 바이트 순서 표시를 제공 하며 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않는 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-158">This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-159">호출 하 여 오류 검색 사용 해야 하는 보안상의 이유로 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자 및 설정을 해당 `throwOnInvalidBytes` 인수를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-159">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-160">다음 예제에서는 새로 만들려면 <xref:System.Text.UnicodeEncoding> 인스턴스 및 인코딩의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-160">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance and display the name of the encoding.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <span data-ttu-id="7a7bb-161">big endian 바이트 순서(최상위 바이트 먼저)를 사용하려면 <see langword="true" />이고, little endian 바이트 순서(최하위 바이트 먼저)를 사용하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-161">
              <see langword="true" /> to use the big endian byte order (most significant byte first), or <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          </span>
        </param>
        <param name="byteOrderMark">
          <span data-ttu-id="7a7bb-162">
            <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-162">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-163">
            <see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-163">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
          <span data-ttu-id="7a7bb-164">매개 변수를 사용하여 big endian 바이트 순서를 사용할지 여부와 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환할지 여부를 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-164">Parameters specify whether to use the big endian byte order and whether the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-165">이 생성자는 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않는 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-165">This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-166">호출 하 여 오류 검색 사용 해야 하는 보안상의 이유로 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자 및 설정을 해당 `throwOnInvalidBytes` 인수를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-166">For security reasons, you should enable error detection by calling the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`.</span></span>  
  
 <span data-ttu-id="7a7bb-167">`byteOrderMark` 의 작동을 제어 하는 매개 변수는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-167">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="7a7bb-168">경우 `true`, 메서드가 유니코드 바이트 순서 표시 (BOM) utf-16 형식에 포함 된 바이트 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-168">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="7a7bb-169">경우 `false`, 길이가 0 인 바이트 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-169">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="7a7bb-170">그러나 설정 `byteOrderMark` 를 `true` 발생 하지 않습니다는 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드 바이트 수에 BOM에 바이트 수를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-170">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-171">다음 예제에서는 새로 만들려면 <xref:System.Text.UnicodeEncoding> little endian 또는 big endian 바이트 순서를 지원 여부를 지정 하는 인스턴스 및 유니코드 바이트 순서 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-171">The following example demonstrates how to create a new <xref:System.Text.UnicodeEncoding> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          <span data-ttu-id="7a7bb-172">big endian 바이트 순서(최상위 바이트 먼저)를 사용하려면 <see langword="true" />이고, little endian 바이트 순서(최하위 바이트 먼저)를 사용하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-172">
              <see langword="true" /> to use the big endian byte order (most significant byte first); <see langword="false" /> to use the little endian byte order (least significant byte first).</span>
          </span>
        </param>
        <param name="byteOrderMark">
          <span data-ttu-id="7a7bb-173">
            <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-173">
              <see langword="true" /> to specify that the <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> method returns a Unicode byte order mark; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="throwOnInvalidBytes">
          <span data-ttu-id="7a7bb-174">잘못된 인코딩이 검색되었을 때 예외가 발생하도록 지정하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-174">
              <see langword="true" /> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-175">
            <see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-175">Initializes a new instance of the <see cref="T:System.Text.UnicodeEncoding" /> class.</span>
          </span>
          <span data-ttu-id="7a7bb-176">매개 변수를 사용하여 big endian 바이트 순서를 사용할지 여부, 유니코드 바이트 순서 표시를 제공할지 여부 및 잘못된 인코딩이 검색되었을 때 예외를 발생시킬지 여부를 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-176">Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-177">`byteOrderMark` 의 작동을 제어 하는 매개 변수는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-177">The `byteOrderMark` parameter controls the operation of the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method.</span></span> <span data-ttu-id="7a7bb-178">경우 `true`, 메서드가 유니코드 바이트 순서 표시 (BOM) utf-16 형식에 포함 된 바이트 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-178">If `true`, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</span></span>  <span data-ttu-id="7a7bb-179">경우 `false`, 길이가 0 인 바이트 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-179">If `false`, it returns a zero-length byte array.</span></span> <span data-ttu-id="7a7bb-180">그러나 설정 `byteOrderMark` 를 `true` 발생 하지 않습니다는 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드 바이트 수에 BOM에 바이트 수를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-180">However, setting `byteOrderMark` to `true` does not cause the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to prefix the BOM at the beginning of the byte array, nor does it cause the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to include the number of bytes in the BOM in the byte count.</span></span>  
  
 <span data-ttu-id="7a7bb-181">경우는 `throwOnInvalidBytes` 매개 변수는 `true`, 잘못 된 바이트 시퀀스를 검색 하는 메서드가 throw <xref:System.ArgumentException?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-181">If the `throwOnInvalidBytes` parameter is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=nameWithType>.</span></span> <span data-ttu-id="7a7bb-182">그렇지 않으면 메서드는 예외를 throw 하지 않는 하 고 잘못 된 시퀀스가 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-182">Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-183">보안상의 이유로 응용 프로그램은이 생성자의 인스턴스를 만드는 데 좋습니다는 <xref:System.Text.UnicodeEncoding> 클래스 및 오류 검색 기능을 설정 하 여 `throwOnInvalidBytes` 를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-183">For security reasons, your applications are recommended to use this constructor to create an instance of the <xref:System.Text.UnicodeEncoding> class and turn on error detection by setting `throwOnInvalidBytes` to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-184">다음 예제에서는 동작을 보여 줍니다. <xref:System.Text.UnicodeEncoding>, 오류 검색을 사용 하거나 사용 하지 않고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-184">The following example demonstrates the behavior of <xref:System.Text.UnicodeEncoding>, both with error detection enabled and without.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="CharSize">
      <MemberSignature Language="C#" Value="public const int CharSize = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CharSize = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.UnicodeEncoding.CharSize" />
      <MemberSignature Language="VB.NET" Value="Public Const CharSize As Integer  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: int CharSize = 2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-185">유니코드 문자 크기를 바이트 단위로 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-185">Represents the Unicode character size in bytes.</span>
          </span>
          <span data-ttu-id="7a7bb-186">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-186">This field is a constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-187">이 필드의 값은 값이 2 인 32 비트 부호 있는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-187">The value of this field is a 32-bit signed constant with a value of 2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-188">다음 예제에서는 값을 반환 하는 방법을 <xref:System.Text.UnicodeEncoding.CharSize> 에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-188">The following example demonstrates how to return the value of <xref:System.Text.UnicodeEncoding.CharSize> and display it.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="7a7bb-189">현재 개체와 비교할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-189">The object to compare with the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-190">지정한 <see cref="T:System.Object" />이(가) 현재 <see cref="T:System.Text.UnicodeEncoding" /> 개체와 같은지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-190">Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-191">
            <paramref name="value" />가 <see cref="T:System.Text.UnicodeEncoding" /> 인스턴스이고 현재 개체와 같으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-191">
              <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.Text.UnicodeEncoding" /> and is equal to the current object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-192">두 개의 <xref:System.Text.UnicodeEncoding> 개체가 다음 조건을 모두 만족 하면 같은 개체로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-192">Two <xref:System.Text.UnicodeEncoding> objects are considered equal if all of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="7a7bb-193">두 개체가 동일한 바이트 순서 (big endian 또는 little endian)를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-193">Both objects use the same byte order (little-endian or big-endian).</span></span>  
  
-   <span data-ttu-id="7a7bb-194">두 개체, 바이트 순서 표시를 제공 하거나 둘 다는 그렇지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-194">Both objects provide the byte order mark, or both do not.</span></span>  
  
-   <span data-ttu-id="7a7bb-195">두 개체가 동일한 인코더 대체 (fallback)를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-195">Both objects use the same encoder fallback.</span></span>  
  
-   <span data-ttu-id="7a7bb-196">두 개체가 동일한 디코더 대체 (fallback)를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-196">Both objects use the same decoder fallback.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-197">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Text.UnicodeEncoding.Equals%2A> 메서드를 테스트 하는지 여부를 현재 <xref:System.Text.UnicodeEncoding> 다른 개체가 같은지 <xref:System.Text.UnicodeEncoding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-197">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.Equals%2A> method to test whether the current <xref:System.Text.UnicodeEncoding> object is equal to a different <xref:System.Text.UnicodeEncoding> object.</span></span> <span data-ttu-id="7a7bb-198">5 개의 <xref:System.Text.UnicodeEncoding> 개체가 생성 되 고 비교 하 고 비교 결과 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-198">Five <xref:System.Text.UnicodeEncoding> objects are created and compared, and the results of the comparisons are displayed.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-199">문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-199">Calculates the number of bytes produced by encoding a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="7a7bb-200">인코딩할 문자 집합이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-200">The string that contains the set of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-201">지정한 문자열의 문자를 인코딩하여 생성되는 바이트 수를 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-201">Calculates the number of bytes produced by encoding the characters in the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-202">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-202">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-203">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-203">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-204">최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-204">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-205"><xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-205">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-206">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-206">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-207">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-207">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-208">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-208">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7a7bb-209">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에) 개발자의 책임 이며 머리말의 바이트 수에서 반환 된 값에 반영 되지는 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-209">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-210">다음 예제에서는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 및 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> 최대값 및 실제 문자열 인코딩하는 데 필요한 바이트 수를 계산 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-210">The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string.</span></span> <span data-ttu-id="7a7bb-211">또한 실제 바이트 순서 표시가 포함 된 바이트 스트림을 저장 하는 데 필요한 바이트 수가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-211">It also displays the actual number of bytes required to store a byte stream with a byte order mark.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-212">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-212">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-213">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-213">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-214">오류 검색이 사용되고 <paramref name="s" />에 잘못된 문자 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-214">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7a7bb-215">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-215">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-216">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-216">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-217">
            <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-217">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="7a7bb-218">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-218">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7a7bb-219">인코딩할 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-219">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-220">지정한 문자 포인터에서 시작되는 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-220">Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-221">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-221">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-222">정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 필요한 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-222">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-223">최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-223">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-224"><xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-224">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-225">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-225">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-226">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-226">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-227">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-227">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7a7bb-228">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에) 개발자의 책임 이며 머리말의 바이트 수에서 반환 된 값에 반영 되지는 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-228">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF8Encoding.GetByteCount%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-229">
            <paramref name="chars" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-229">
              <paramref name="chars" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-230">
            <paramref name="count" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-230">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-231">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-231">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-232">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-232">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-233">오류 검색 기능을 사용하고 있으며 <paramref name="chars" />에 잘못된 문자 시퀀스가 포함되어 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-233">Error detection is enabled and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7a7bb-234">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-234">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-235">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-235">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-236">
            <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-236">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7a7bb-237">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-237">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7a7bb-238">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-238">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="7a7bb-239">인코딩할 문자 집합이 포함된 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-239">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="7a7bb-240">인코딩할 첫 번째 문자의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-240">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7a7bb-241">인코딩할 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-241">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-242">지정한 문자 배열의 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-242">Calculates the number of bytes produced by encoding a set of characters from the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-243">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-243">The number of bytes produced by encoding the specified characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-244">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-244">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="7a7bb-245">최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-245">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-246"><xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-246">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-247">오류 검색 기능 사용을 잘못 된 시퀀스가 메서드가 throw 하는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-247">With error detection enabled, an invalid sequence causes this method to throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-248">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-248">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7a7bb-249">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-249">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7a7bb-250">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에) 개발자의 책임 이며 머리말의 바이트 수에서 반환 된 값에 반영 되지는 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-250">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-251">다음 예제에서는 배열을 대문자는 라틴으로 및 소문자 및 호출은 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드 라틴어 소문자 인코딩하는 데 필요한 바이트 수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-251">The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="7a7bb-252">바이트 순서 표시를 추가한 경우 필요한 바이트의 총 수와 함께이 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-252">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="7a7bb-253">반환 된 값이 숫자를 비교 하는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드 라틴어 소문자 인코딩하는 데 필요한 바이트의 최대 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-253">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</span></span> <span data-ttu-id="7a7bb-254">다음 예제에서는 그리스어와 키릴 자모 문자 및 호출의 조합으로 배열을 채웁니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드 키릴자모 문자를 인코딩하는 데 필요한 바이트 수를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-254">The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters.</span></span> <span data-ttu-id="7a7bb-255">바이트 순서 표시를 추가한 경우 필요한 바이트의 총 수와 함께이 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-255">It then displays this information along with the total number of bytes needed if a byte order mark is added.</span></span> <span data-ttu-id="7a7bb-256">반환 된 값이 숫자를 비교 하는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드 키릴자모 문자를 인코딩하는 데 필요한 바이트의 최대 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-256">It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-257">
            <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-257">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-258">
            <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-258">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-259">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-259">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-260">
            <paramref name="index" /> 및 <paramref name="count" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-260">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="7a7bb-261">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-261">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-262">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-262">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-263">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-263">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7a7bb-264">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-264">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-265">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-265">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-266">
            <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-266">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-267">문자 집합을 바이트 시퀀스로 인코딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-267">Encodes a set of characters into a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="7a7bb-268">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-268">A pointer to the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="7a7bb-269">인코딩할 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-269">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="7a7bb-270">결과 바이트 시퀀스를 쓰기 시작할 위치를 가리키는 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-270">A pointer to the location at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="7a7bb-271">쓸 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-271">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-272">지정한 문자 포인터에서 시작하는 문자 집합을 지정한 바이트 포인터에서 시작하여 저장되는 바이트 시퀀스로 인코딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-272">Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-273">
            <paramref name="bytes" /> 매개 변수가 가리키는 위치에 쓴 실제 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-273">The actual number of bytes written at the location indicated by the <paramref name="bytes" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-274">정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 필요한 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-274">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetBytes%2A> requires to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-275">최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-275">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-276"><xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-276">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-277">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-277">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-278">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-278">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7a7bb-279">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-279">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7a7bb-280">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-280">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-281">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-281">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7a7bb-282">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에)은 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-282">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="7a7bb-283"><xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 프리앰블 앞에 추가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-283">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-284">
            <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-284">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="7a7bb-285">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-285">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-286">
            <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-286">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-287">
            <paramref name="charCount" /> 또는 <paramref name="byteCount" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-287">
              <paramref name="charCount" /> or <paramref name="byteCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-288">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-288">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="7a7bb-289">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-289">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-290">
            <paramref name="byteCount" />가 결과 바이트 수보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-290">
              <paramref name="byteCount" /> is less than the resulting number of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7a7bb-291">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-291">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-292">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-292">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-293">
            <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-293">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7a7bb-294">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-294">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7a7bb-295">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-295">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">
          <span data-ttu-id="7a7bb-296">인코딩할 문자 집합이 포함된 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-296">The character array containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="7a7bb-297">인코딩할 첫 번째 문자의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-297">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="7a7bb-298">인코딩할 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-298">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="7a7bb-299">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-299">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="7a7bb-300">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-300">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-301">지정한 문자 배열의 문자 집합을 지정한 바이트 배열로 인코딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-301">Encodes a set of characters from the specified character array into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-302">
            <paramref name="bytes" />에 쓴 실제 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-302">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-303">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-303">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-304">최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-304">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-305"><xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-305">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-306">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-306">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-307">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-307">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7a7bb-308">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-308">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7a7bb-309">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-309">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-310">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-310">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7a7bb-311">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에)은 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-311">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="7a7bb-312"><xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 프리앰블 앞에 추가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-312">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-313">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드를 다양 한 문자를 인코딩하는 <xref:System.String> 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-313">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-314">
            <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-314">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="7a7bb-315">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-315">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-316">
            <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-316">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-317">
            <paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-317">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-318">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-318">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-319">
            <paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-319">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="7a7bb-320">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-320">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-321">
            <paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-321">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-322">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-322">Error detection is enabled, and <paramref name="chars" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="7a7bb-323">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-323">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-324">
            <paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-324">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7a7bb-325">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-325">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-326">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-326">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-327">
            <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-327">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="7a7bb-328">인코딩할 문자 집합이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-328">The string containing the set of characters to encode.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="7a7bb-329">인코딩할 첫 번째 문자의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-329">The index of the first character to encode.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="7a7bb-330">인코딩할 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-330">The number of characters to encode.</span>
          </span>
        </param>
        <param name="bytes">
          <span data-ttu-id="7a7bb-331">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-331">The byte array to contain the resulting sequence of bytes.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="7a7bb-332">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-332">The index at which to start writing the resulting sequence of bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-333">지정된 <see cref="T:System.String" />의 문자 집합을 지정된 바이트 배열로 인코딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-333">Encodes a set of characters from the specified <see cref="T:System.String" /> into the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-334">
            <paramref name="bytes" />에 쓴 실제 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-334">The actual number of bytes written into <paramref name="bytes" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-335">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-335">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-336">최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-336">To calculate the maximum array size, you call the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method.</span></span> <span data-ttu-id="7a7bb-337"><xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-337">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-338">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-338">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-339">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-339">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7a7bb-340">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-340">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7a7bb-341">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-341">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-342">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-342">To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7a7bb-343">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에)은 개발자의 책임입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-343">Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</span></span> <span data-ttu-id="7a7bb-344"><xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 프리앰블 앞에 추가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-344">The <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-345">다음 예제에서는 유니코드 문자 배열에서 요소의 범위를 인코딩하고 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-345">The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-346">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-346">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7a7bb-347">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-347">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-348">
            <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-348">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-349">
            <paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-349">
              <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-350">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-350">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-351">
            <paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-351">
              <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.</span>
          </span>
          <span data-ttu-id="7a7bb-352">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-352">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-353">
            <paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-353">
              <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-354">오류 검색이 사용되고 <paramref name="s" />에 잘못된 문자 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-354">Error detection is enabled, and <paramref name="s" /> contains an invalid sequence of characters.</span>
          </span>
          <span data-ttu-id="7a7bb-355">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-355">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-356">
            <paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-356">
              <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7a7bb-357">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-357">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-358">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-358">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-359">
            <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-359">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-360">바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-360">Calculates the number of characters produced by decoding a sequence of bytes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7a7bb-361">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-361">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7a7bb-362">디코딩할 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-362">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-363">지정한 바이트 포인터에서 시작되는 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-363">Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-364">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-364">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-365">정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자 응용 프로그램 사용 하 여 저장 하는 데 필요한 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-365">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-366">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-366">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-367"><xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-367">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-368">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-368">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-369">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-369">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-370">
            <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-370">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-371">
            <paramref name="count" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-371">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-372">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-372">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-373">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-373">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-374">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-374">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7a7bb-375">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-375">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-376">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-376">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-377">
            <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-377">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7a7bb-378">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-378">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7a7bb-379">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-379">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7a7bb-380">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-380">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="7a7bb-381">디코딩할 첫 번째 바이트의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-381">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7a7bb-382">디코딩할 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-382">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-383">지정한 바이트 배열의 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-383">Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-384">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-384">The number of characters produced by decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-385">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-385">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-386">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-386">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-387"><xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-387">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-388">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-388">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-389">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-389">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-390">다음 예제에서는 사용 하는 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 사용 하는 바이트 배열에서 요소의 범위를 디코딩하여 생성 되는 문자 수를 반환 하는 메서드 <xref:System.Text.UnicodeEncoding>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-390">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method to return the number of characters produced by decoding a range of elements in a byte array using <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-391">
            <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-391">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-392">
            <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-392">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-393">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-393">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-394">
            <paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-394">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="7a7bb-395">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-395">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-396">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-396">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-397">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-397">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7a7bb-398">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-398">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-399">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-399">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-400">
            <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-400">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-401">바이트 시퀀스를 문자 집합으로 디코딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-401">Decodes a sequence of bytes into a set of characters.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7a7bb-402">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-402">A pointer to the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="7a7bb-403">디코딩할 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-403">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="7a7bb-404">결과 문자 집합을 쓰기 시작할 위치를 가리키는 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-404">A pointer to the location at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <param name="charCount">
          <span data-ttu-id="7a7bb-405">쓸 최대 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-405">The maximum number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-406">지정한 바이트 포인터에서 시작하는 바이트 시퀀스를 지정한 문자 포인터에서 시작하여 저장되는 문자 집합으로 디코딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-406">Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-407">
            <paramref name="chars" /> 매개 변수가 가리키는 위치에 쓴 실제 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-407">The actual number of characters written at the location indicated by the <paramref name="chars" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-408">정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자 응용 프로그램 사용 하 여 저장 하는 데 필요한 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-408">To calculate the exact array size that <xref:System.Text.UnicodeEncoding.GetChars%2A> requires to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-409">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-409">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-410"><xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-410">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-411">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-411">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-412">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-412">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7a7bb-413">디코딩할 바이트 범위 (BOM)의 바이트 순서 표시를 포함 하는 경우 인식 BOM이 아닌 형식의 메서드에 의해 반환 된 바이트 배열을 문자 U + FFFE이이 메서드에 의해 반환 되는 문자 배열에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-413">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="7a7bb-414">호출 하 여 제거할 수는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-414">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7a7bb-415">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-415">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7a7bb-416">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-416">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-417">
            <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-417">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="7a7bb-418">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-418">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-419">
            <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-419">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-420">
            <paramref name="byteCount" /> 또는 <paramref name="charCount" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-420">
              <paramref name="byteCount" /> or <paramref name="charCount" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-421">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-421">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="7a7bb-422">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-422">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-423">
            <paramref name="charCount" />가 결과 문자 수보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-423">
              <paramref name="charCount" /> is less than the resulting number of characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7a7bb-424">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-424">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-425">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-425">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-426">
            <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-426">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="7a7bb-427">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-427">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="7a7bb-428">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-428">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7a7bb-429">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-429">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="byteIndex">
          <span data-ttu-id="7a7bb-430">디코딩할 첫 번째 바이트의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-430">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="byteCount">
          <span data-ttu-id="7a7bb-431">디코딩할 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-431">The number of bytes to decode.</span>
          </span>
        </param>
        <param name="chars">
          <span data-ttu-id="7a7bb-432">결과 문자 집합을 포함할 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-432">The character array to contain the resulting set of characters.</span>
          </span>
        </param>
        <param name="charIndex">
          <span data-ttu-id="7a7bb-433">결과 문자 집합을 쓰기 시작할 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-433">The index at which to start writing the resulting set of characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-434">지정한 바이트 배열의 바이트 시퀀스를 지정한 문자 배열로 디코딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-434">Decodes a sequence of bytes from the specified byte array into the specified character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-435">
            <paramref name="chars" />에 쓴 실제 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-435">The actual number of characters written into <paramref name="chars" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-436">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-436">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-437">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-437">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-438"><xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-438">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-439">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-439">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-440">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-440">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7a7bb-441">디코딩할 바이트 범위 (BOM)의 바이트 순서 표시를 포함 하는 경우 인식 BOM이 아닌 형식의 메서드에 의해 반환 된 바이트 배열을 문자 U + FFFE이이 메서드에 의해 반환 되는 문자 배열에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-441">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="7a7bb-442">호출 하 여 제거할 수는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-442">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7a7bb-443">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-443">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7a7bb-444">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-444">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> method or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-445">다음 예제에서는 사용 하는 방법을 <xref:System.Text.UnicodeEncoding.GetChars%2A> 메서드는 바이트 배열에서 요소의 범위를 디코딩하고 문자 배열에 결과 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-445">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetChars%2A> method to decode a range of elements in a byte array and store the result in a character array.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-446">
            <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-446">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
          <span data-ttu-id="7a7bb-447">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-447">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-448">
            <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-448">
              <paramref name="chars" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-449">
            <paramref name="byteIndex" />, <paramref name="byteCount" /> 또는 <paramref name="charIndex" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-449">
              <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-450">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-450">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-451">
            <paramref name="byteindex" /> 및 <paramref name="byteCount" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-451">
              <paramref name="byteindex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
          <span data-ttu-id="7a7bb-452">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-452">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-453">
            <paramref name="charIndex" />가 <paramref name="chars" />의 유효한 인덱스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-453">
              <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-454">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-454">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
          <span data-ttu-id="7a7bb-455">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-455">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-456">
            <paramref name="chars" />의 용량(<paramref name="charIndex" /> ~ 배열 끝)이 부족해서 결과 문자를 수용할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-456">
              <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7a7bb-457">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-457">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-458">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-458">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-459">
            <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-459">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-460">UTF-16으로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 디코더를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-460">Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-461">UTF-16으로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 <see cref="T:System.Text.Decoder" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-461">A <see cref="T:System.Text.Decoder" /> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-462"><xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> 메서드 순차 바이트 블록을 유사한 방식으로 문자의 순차 블록 변환는 <xref:System.Text.UnicodeEncoding.GetChars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-462">The <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="7a7bb-463">그러나 한 <xref:System.Text.Decoder> 블록으로 확장 되는 바이트 시퀀스를 올바르게 디코딩할 수 있도록 호출 간의 상태 정보를 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-463">However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks.</span></span> <span data-ttu-id="7a7bb-464"><xref:System.Text.Decoder> 또한 데이터 블록의 끝에 후행 바이트를 보존 하 고 다음 디코딩 작업에서 후행 바이트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-464">The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</span></span> <span data-ttu-id="7a7bb-465">따라서 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 및 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 는 전체 데이터 스트림 하는 대신 데이터 블록을 처리 하기 때문에 네트워크 전송 및 파일 작업에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-465">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="7a7bb-466">오류 검색이 사용 됩니다, 즉,는 `throwOnInvalidBytes` 생성자의 매개 변수 설정 `true`, 오류 검색이에 사용 되는 <xref:System.Text.Decoder> 이 메서드에서 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-466">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method.</span></span> <span data-ttu-id="7a7bb-467">오류 검색이 사용 되는 경우 잘못 된 시퀀스가 발생 된 디코더 상태에 정의 되지 않으며 처리가 중지 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-467">If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-468">다음 예제에서는 인코더 및 디코더를 사용 하 여 바이트 배열에는 문자열을 인코딩하려면 다음 문자 배열로 바이트를 디코딩할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-468">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-469">유니코드 문자 시퀀스를 UTF-16으로 인코딩된 바이트 시퀀스로 변환하는 인코더를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-469">Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-470">유니코드 문자 시퀀스를 UTF-16으로 인코딩된 바이트 시퀀스로 변환하는 <see cref="T:System.Text.Encoder" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-470">A <see cref="T:System.Text.Encoder" /> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-471"><xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> 메서드 문자의 순차 블록 순차 블록의 바이트 유사한 방식으로 변환 된 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 이 클래스의 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-471">The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method of this class.</span></span> <span data-ttu-id="7a7bb-472">그러나 한 <xref:System.Text.Encoder> 블록으로 확장 되는 문자 시퀀스 올바르게 인코딩할 수 있도록 개체 호출 간의 상태 정보를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-472">However, a <xref:System.Text.Encoder> object maintains state information between calls so that it can correctly encode character sequences that span blocks.</span></span> <span data-ttu-id="7a7bb-473"><xref:System.Text.Encoder> 개체도 데이터 블록의 끝에 후행 문자를 보존 하 고 다음 인코딩 작업에 후행 문자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-473">The <xref:System.Text.Encoder> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</span></span> <span data-ttu-id="7a7bb-474">예를 들어 데이터 블록 짝이 맞지 않는 상위 서로게이트를 마무리할 수 있습니다 및 다음 데이터 블록에 일치 하는 하위 서로게이트 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-474">For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</span></span> <span data-ttu-id="7a7bb-475">따라서 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 및 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 는 전체 데이터 스트림 하는 대신 데이터 블록을 처리 하기 때문에 네트워크 전송 및 파일 작업에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-475">Therefore, <xref:System.Text.UnicodeEncoding.GetDecoder%2A> and <xref:System.Text.UnicodeEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</span></span>  
  
 <span data-ttu-id="7a7bb-476">오류 검색이 사용 됩니다, 즉,는 `throwOnInvalidBytes` 생성자의 매개 변수 설정 `true`, 오류 검색이에 사용 되는 <xref:System.Text.Encoder> 이 메서드에서 반환 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-476">If error detection is enabled, that is, the `throwOnInvalidBytes` parameter of the constructor is set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> object returned by this method.</span></span> <span data-ttu-id="7a7bb-477">오류 검색이 사용 되는 잘못 된 시퀀스가 발생 하는 경우 인코더의 상태가 정의 하 고 처리가 중지 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-477">If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-478">다음 예제에서는 인코더 및 디코더를 사용 하 여 바이트 배열에는 문자열을 인코딩하려면 다음 문자 배열로 바이트를 디코딩할을 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-478">The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-479">현재 인스턴스의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-479">Returns the hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-480">현재 <see cref="T:System.Text.UnicodeEncoding" /> 개체의 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-480">The hash code for the current <see cref="T:System.Text.UnicodeEncoding" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">
          <span data-ttu-id="7a7bb-481">인코딩할 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-481">The number of characters to encode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-482">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수를 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-482">Calculates the maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-483">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-483">The maximum number of bytes produced by encoding the specified number of characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-484">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-484">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UnicodeEncoding.GetByteCount%2A>.</span></span> <span data-ttu-id="7a7bb-485">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-485">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span> <span data-ttu-id="7a7bb-486"><xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-486">The <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-487"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 현재 선택 된 최악의 경우를 포함 하 여 최악의 수를 검색 <xref:System.Text.EncoderFallback>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-487"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.</span></span> <span data-ttu-id="7a7bb-488">잠재적으로 큰 문자열로 대체를 선택한 경우 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 큰 값을 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-488">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> can return large values.</span></span>  
  
 <span data-ttu-id="7a7bb-489">대부분의 경우가이 메서드는 작은 문자열에 대해 적합 한 숫자를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-489">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="7a7bb-490">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-490">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="7a7bb-491">사용 하 여 다른 접근 방식을 고려해 야 할 수도 있습니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 또는 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-491">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7a7bb-492"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 관계가 없으며 <xref:System.Text.UnicodeEncoding.GetChars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-492"><xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetChars%2A>.</span></span> <span data-ttu-id="7a7bb-493">응용 프로그램을 사용 하면 비슷한 기능이 필요한 경우 <xref:System.Text.UnicodeEncoding.GetChars%2A>를 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-493">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetChars%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-494">`GetMaxByteCount(N)` 와 같은 값은 반드시 `N* GetMaxByteCount(1)`합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-494">`GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-495">다음 예제에서는 사용 하는 방법을 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드를 지정된 된 수의 문자를 인코딩하는 데 필요한 바이트의 최대 수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-495">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method to return the maximum number of bytes required to encode a specified number of characters.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-496">
            <paramref name="charCount" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-496">
              <paramref name="charCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-497">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-497">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-498">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-498">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.EncoderFallbackException">
          <span data-ttu-id="7a7bb-499">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-499">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-500">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-500">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-501">
            <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-501">
              <see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">
          <span data-ttu-id="7a7bb-502">디코딩할 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-502">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-503">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수를 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-503">Calculates the maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-504">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-504">The maximum number of characters produced by decoding the specified number of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-505">필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-505">To calculate the exact array size required by <xref:System.Text.UnicodeEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UnicodeEncoding.GetCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-506">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-506">To calculate the maximum array size, the application should use <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>.</span></span> <span data-ttu-id="7a7bb-507"><xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-507">The <xref:System.Text.UnicodeEncoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method generally executes faster.</span></span>  
  
 <span data-ttu-id="7a7bb-508"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 현재 선택 된 최악의 경우를 포함 하 여 최악의 수를 검색 <xref:System.Text.DecoderFallback>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-508"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>.</span></span> <span data-ttu-id="7a7bb-509">잠재적으로 큰 문자열로 대체를 선택한 경우 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 큰 값을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-509">If a fallback is chosen with a potentially large string, <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> retrieves large values.</span></span>  
  
 <span data-ttu-id="7a7bb-510">대부분의 경우가이 메서드는 작은 문자열에 대해 적합 한 숫자를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-510">In most cases, this method retrieves reasonable numbers for small strings.</span></span> <span data-ttu-id="7a7bb-511">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-511">For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</span></span> <span data-ttu-id="7a7bb-512">사용 하 여 다른 접근 방식을 고려해 야 할 수도 있습니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 또는 <xref:System.Text.Decoder.Convert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-512">You might also want to consider a different approach using <xref:System.Text.UnicodeEncoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.</span></span>  
  
 <span data-ttu-id="7a7bb-513"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 관계가 없으며 <xref:System.Text.UnicodeEncoding.GetBytes%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-513"><xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.UnicodeEncoding.GetBytes%2A>.</span></span> <span data-ttu-id="7a7bb-514">응용 프로그램을 사용 하면 비슷한 기능이 필요한 경우 <xref:System.Text.UnicodeEncoding.GetBytes%2A>를 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-514">If your application needs a similar function to use with <xref:System.Text.UnicodeEncoding.GetBytes%2A>, it should use <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a7bb-515">`GetMaxCharCount(N)` 와 같은 값은 반드시 `N* GetMaxCharCount(1)`합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-515">`GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-516">다음 예제에서는 사용 하는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 지정된 된 수의 바이트를 디코딩하여 생성 되는 최대 문자 수를 반환 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-516">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> method to return the maximum number of characters produced by decoding a specified number of bytes.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-517">
            <paramref name="byteCount" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-517">
              <paramref name="byteCount" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-518">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-518">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-519">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-519">The resulting number of bytes is greater than the maximum number that can be returned as an integer.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7a7bb-520">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-520">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-521">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-521">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-522">
            <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-522">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7a7bb-523">이 인스턴스의 생성자가 바이트 순서 표시를 요청하는 경우 UTF-16 형식으로 인코딩된 유니코드 바이트 순서 표시를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-523">Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-524">
            <see cref="T:System.Text.UnicodeEncoding" /> 개체가 제공하도록 구성된 경우 유니코드 바이트 순서 표시가 포함된 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-524">A byte array containing the Unicode byte order mark, if the <see cref="T:System.Text.UnicodeEncoding" /> object is configured to supply one.</span>
          </span>
          <span data-ttu-id="7a7bb-525">그렇지 않으면 이 메서드는 길이가 0인 바이트 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-525">Otherwise, this method returns a zero-length byte array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-526"><xref:System.Text.UnicodeEncoding> 개체 인코딩 프로세스에서 발생 하는 바이트 시퀀스에 접두어로 추가 될 수 있는 바이트 배열에는 머리말을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-526">The <xref:System.Text.UnicodeEncoding> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process.</span></span> <span data-ttu-id="7a7bb-527">바이트 순서와 변형 형식 또는 u t F를 결정 하는 디코더를 통해 바이트 순서 표시 (코드 포인트 U + FEFF)로 인코딩된 바이트 시퀀스를 앞 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-527">Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF.</span></span> <span data-ttu-id="7a7bb-528">유니코드 바이트 순서 표시 (BOM) (16 진수)에서 다음과 같이 serialize 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-528">The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</span></span>  
  
-   <span data-ttu-id="7a7bb-529">Big endian 바이트 순서: FE FF</span><span class="sxs-lookup"><span data-stu-id="7a7bb-529">Big endian byte order: FE FF</span></span>  
  
-   <span data-ttu-id="7a7bb-530">Little endian 바이트 순서: FF FE</span><span class="sxs-lookup"><span data-stu-id="7a7bb-530">Little endian byte order: FF FE</span></span>  
  
 <span data-ttu-id="7a7bb-531">인스턴스화할 수 있습니다는 <xref:System.Text.UnicodeEncoding> 개체 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드는 다음과 같은 방법으로 유효한 BOM을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-531">You can instantiate a <xref:System.Text.UnicodeEncoding> object whose <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method returns a valid BOM in the following ways:</span></span>  
  
-   <span data-ttu-id="7a7bb-532">검색 하 여는 <xref:System.Text.UnicodeEncoding> 에서 반환 된 개체는 <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> 또는 <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-532">By retrieving the <xref:System.Text.UnicodeEncoding> object returned by the <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> or <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="7a7bb-533">매개 변수가 없는 호출 하 여 <xref:System.Text.UnicodeEncoding.%23ctor> 생성자를 인스턴스화하는 <xref:System.Text.UnicodeEncoding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-533">By calling the parameterless <xref:System.Text.UnicodeEncoding.%23ctor> constructor to instantiate a <xref:System.Text.UnicodeEncoding> object.</span></span>  
  
-   <span data-ttu-id="7a7bb-534">제공 하 여 `true` 의 값으로는 `byteOrderMark` 인수에는 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> 또는 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-534">By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> or <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructors.</span></span>  
  
 <span data-ttu-id="7a7bb-535">BOM을 사용 하 여, 그렇지 않으면 손실 된 참조를 해당 인코딩 등 태그가 지정 되지 않은 잘못 태그가 지정 된 파일에 대 한 인코딩을의 특정 id에 거의 제공 하므로 웹 데이터 나 임의 텍스트 파일만 때 비즈니스 없는 것이 좋습니다. 국가별 고려 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-535">We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</span></span> <span data-ttu-id="7a7bb-536">데이터는 일관 되 고 적절히 태그가 지정 종종 사용자 문제를 방지할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-536">Often user problems might be avoided if data is consistently and properly tagged.</span></span>  
  
 <span data-ttu-id="7a7bb-537">인코딩 형식을 제공 하는 표준, BOM은 중복 되는 부분이입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-537">For standards that provide an encoding type, a BOM is somewhat redundant.</span></span> <span data-ttu-id="7a7bb-538">그러나 올바른 인코딩 헤더를 보낼 서버를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-538">However, it can be used to help a server send the correct encoding header.</span></span> <span data-ttu-id="7a7bb-539">또는 사용할 수 있습니다는 대체 방식으로 인코딩이 그렇지 않은 경우 손실 된 경우.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-539">Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</span></span>  
  
 <span data-ttu-id="7a7bb-540">BOM을 사용 하 여 몇 가지 단점이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-540">There are some disadvantages to using a BOM.</span></span> <span data-ttu-id="7a7bb-541">예를 들어 BOM을 사용 하는 데이터베이스 필드를 제한 하는 방법을 알아 두어야 어려울 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-541">For example, knowing how to limit the database fields that use a BOM can be difficult.</span></span> <span data-ttu-id="7a7bb-542">파일의 연결 문제가 될 수 또한 예를 들어 파일을 병합 될 때 데이터 중간에 불필요 한 문자가 포함 될 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-542">Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</span></span> <span data-ttu-id="7a7bb-543">그러나 몇 가지 단점 있음에도 불구 하 고 BOM 사용 하는 가장 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-543">In spite of the few disadvantages, however, the use of a BOM is highly recommended.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="7a7bb-544">인코딩된 바이트 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림의 처음을 붙여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-544">To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble.</span></span> <span data-ttu-id="7a7bb-545"><xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드를 인코딩된 바이트 시퀀스로 BOM 앞에 추가 되지 않습니다; 개발자의 책임은 적절 한 바이트 스트림의 시작 부분에 BOM을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-545">Note that the <xref:System.Text.UnicodeEncoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-546">다음 예제에서는 사용 하는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> big endian 또는 little endian 바이트 순서의 인스턴스에 대 한 유니코드 바이트 순서 표시를 검색 하는 메서드는 <xref:System.Text.UnicodeEncoding>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-546">The following example demonstrates how to use the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <xref:System.Text.UnicodeEncoding>.</span></span>  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 <span data-ttu-id="7a7bb-547">다음 예제에서는 두 개를 인스턴스화하고 <xref:System.Text.UnicodeEncoding> 개체는 첫 번째 BOM을 및는 못합니다. 두 번째 제공 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-547">The following example instantiates two <xref:System.Text.UnicodeEncoding> objects, the first of which does not provide a BOM, and the second of which does.</span></span> <span data-ttu-id="7a7bb-548">그런 다음 호출 하는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드를 유니코드로 인코딩된 문자열을 작성 하기 전에 파일에 BOM을 씁니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-548">It then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to write the BOM to a file before writing a Unicode-encoded string.</span></span> <span data-ttu-id="7a7bb-549">이 예제에서 콘솔 출력에서 볼 수 있듯이 두 번째 인코더에서 바이트를 저장 하는 파일에 첫 번째 보다 더 많은 바이트를 3 개 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-549">As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</span></span>  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  
  
 <span data-ttu-id="7a7bb-550">사용 하 여 파일을 비교할 수도 있습니다는 `fc` 콘솔 창에 명령 16 진수 보기 모드를 포함 하는 텍스트 편집기에서 파일을 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-550">You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</span></span> <span data-ttu-id="7a7bb-551">Note utf-16 인코딩을 지 원하는 편집기에서의 파일을 열면 BOM이 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-551">Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">
          <span data-ttu-id="7a7bb-552">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-552">The byte array containing the sequence of bytes to decode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="7a7bb-553">디코딩할 첫 번째 바이트의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-553">The index of the first byte to decode.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="7a7bb-554">디코딩할 바이트 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-554">The number of bytes to decode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7a7bb-555">바이트 배열의 바이트 범위를 문자열로 디코딩합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-555">Decodes a range of bytes from a byte array into a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7a7bb-556">지정된 바이트 시퀀스의 디코딩 결과가 포함된 <see cref="T:System.String" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-556">A <see cref="T:System.String" /> object containing the results of decoding the specified sequence of bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a7bb-557">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-557">With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>.</span></span> <span data-ttu-id="7a7bb-558">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-558">Without error detection, invalid sequences are ignored, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="7a7bb-559">디코딩할 바이트 범위 (BOM)의 바이트 순서 표시를 포함 하는 경우 인식 BOM이 아닌 형식의 메서드에 의해 반환 된 바이트 배열을 문자 U + FFFE이이 메서드에 의해 반환 되는 문자 배열에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-559">If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</span></span> <span data-ttu-id="7a7bb-560">호출 하 여 제거할 수는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-560">You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="7a7bb-561">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-561">Data to be converted, such as data read from a stream, might be available only in sequential blocks.</span></span> <span data-ttu-id="7a7bb-562">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-562">In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.UnicodeEncoding.GetDecoder%2A> or the <xref:System.Text.UnicodeEncoding.GetEncoder%2A> method, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a7bb-563">다음 예제를 호출 하 여 배열을 초기화는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드 정확 하 게 바이트 인코딩된 문자열 및 바이트 순서 표시 (BOM)의 크기를 추가한 다음에 대 한 필요한 지를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-563">The following example initializes an array by calling the <xref:System.Text.UnicodeEncoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</span></span> <span data-ttu-id="7a7bb-564">이 예에서는 다음 호출에서 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드를 호출 하기 전에 배열에 BOM을 저장할는 <xref:System.Text.Encoding.GetBytes%2A> 메서드를 인코딩된 바이트 배열에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-564">The example then calls the <xref:System.Text.UnicodeEncoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.Encoding.GetBytes%2A> method to store the encoded bytes to the array.</span></span> <span data-ttu-id="7a7bb-565">이 예에서는 다음 호출에서 <xref:System.Text.UnicodeEncoding.GetString%2A> 문자열을 디코딩하 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-565">The example then calls the <xref:System.Text.UnicodeEncoding.GetString%2A> method to decode the string.</span></span>  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 <span data-ttu-id="7a7bb-566">이 경우 디코딩된 문자열와 것 원래 문자열에서 U + FFFD 16 비트 바이트 순서 표시로 시작 하는 이후 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-566">Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</span></span> <span data-ttu-id="7a7bb-567">즉, 두 문자열이 것으로 비교는 출력 문자열을 사용 하는 경우 BOM 대체 문자로 표시 됩니다 "?"입니다.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-567">This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</span></span> <span data-ttu-id="7a7bb-568">문자열의 시작 부분에 BOM을 제거 하려면 호출할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7a7bb-568">To remove the BOM at the beginning of the string, you can call the <xref:System.String.TrimStart%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7a7bb-569">
            <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-569">
              <paramref name="bytes" /> is <see langword="null" /> (<see langword="Nothing" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7a7bb-570">
            <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-570">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7a7bb-571">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-571">-or-</span>
          </span>
          <span data-ttu-id="7a7bb-572">
            <paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-572">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7a7bb-573">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-573">Error detection is enabled, and <paramref name="bytes" /> contains an invalid sequence of bytes.</span>
          </span>
        </exception>
        <exception cref="T:System.Text.DecoderFallbackException">
          <span data-ttu-id="7a7bb-574">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-574">A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)</span>
          </span>
          <span data-ttu-id="7a7bb-575">및</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-575">-and-</span>
          </span>
          <span data-ttu-id="7a7bb-576">
            <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7a7bb-576">
              <see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>