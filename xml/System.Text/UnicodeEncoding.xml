<Type Name="UnicodeEncoding" FullName="System.Text.UnicodeEncoding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="37bb8ffd133cbb1ddd3c3fdd2f593086d39584aa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531567" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UnicodeEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnicodeEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UnicodeEncoding" />
  <TypeSignature Language="VB.NET" Value="Public Class UnicodeEncoding&#xA;Inherits Encoding" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnicodeEncoding : System::Text::Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>유니코드 문자의 UTF-16 인코딩을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인코딩은 유니코드 문자 집합을 바이트 시퀀스로 변환하는 프로세스입니다. 디코딩은 유니코드 문자 집합으로 인코딩된 바이트 시퀀스로 변형 프로세스입니다.  
  
 [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123) 코드 포인트 (숫자) 지원 되는 모든 스크립트의 각 문자를 할당 합니다. 유니코드 변환 형식 (UTF)는 코드 포인트를 인코딩하는 방법입니다. [유니코드 표준](http://go.microsoft.com/fwlink/?linkid=37123) 다음 Utf를 사용 합니다.  
  
-   U t F-8을 각 코드 포인트를 1 ~ 4 바이트의 시퀀스로 나타냅니다.  
  
-   U t F-16이 고는 각 코드 포인트를 1 ~ 2 16 비트 정수 시퀀스로 나타냅니다.  
  
-   U t F-32는 각 코드 포인트를 32 비트 정수를 나타냅니다.  
  
 Utf 및에서 지 원하는 다른 인코딩에 대 한 자세한 내용은 <xref:System.Text>, 참조 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md)합니다.  
  
 <xref:System.Text.UnicodeEncoding> 클래스 utf-16 인코딩을 나타냅니다. 인코더 big endian 바이트 순서를 바꿔서 사용할 수 있습니다 (최상위 바이트 첫 번째) 또는 little endian 바이트 순서 (최하위 바이트 첫 번째). 예를 들어 영문 대문자 (코드 포인트 U + 0041)으로 serialize 됩니다 (16 진수)에서 다음과 같습니다.  
  
-   Big endian 바이트 순서: 00 00 00 41  
  
-   Little endian 바이트 순서: 41 00 00 00  
  
 특정 플랫폼의 기본 바이트 순서를 사용 하 여 유니코드 문자를 저장 하려면 일반적으로 더 효율적입니다. 예를 들어 Intel 컴퓨터 등의 little endian 플랫폼에서 little endian 바이트 순서를 사용 하는 것이 좋습니다. <xref:System.Text.UnicodeEncoding> 1200 (little endian 바이트 순서) 및 1201 (big endian 바이트 순서)은 Windows 코드 페이지에 해당 하는 클래스입니다. 특정 아키텍처의 "endianness"를 호출 하 여 확인할 수 있습니다는 <xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType> 메서드.  
  
 필요에 따라는 <xref:System.Text.UnicodeEncoding> 개체 배열이 인코딩 프로세스에서 발생 하는 바이트 시퀀스에 접두어로 추가 될 수 있는 바이트는 바이트 순서 표시 (BOM)를 제공 합니다. 바이트 순서 표시 (BOM)를 포함 하는 머리말, 디코더에서 바이트 순서 및 변환 형식 또는 u t F를 결정 하는 데 도움이 됩니다.  
  
 경우는 <xref:System.Text.UnicodeEncoding> 인스턴스 BOM을 제공 하도록 구성 된, 호출 하 여 검색할 수 있습니다는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드가 메서드는 빈 배열을 반환 하는 그렇지 않은 경우. 인 경우에는 <xref:System.Text.UnicodeEncoding> 개체가 BOM 지원에 대해 구성 된, 적절 한;로 인코딩된 바이트 스트림의 시작 부분에 BOM을 포함 해야의 인코딩 메서드는 <xref:System.Text.UnicodeEncoding> 클래스 이렇게 하지 않으면 자동으로 합니다.  
  
 인스턴스화해야 오류 검색을 활성화 하 고 클래스 인스턴스를 더욱 안전 하 게는 <xref:System.Text.UnicodeEncoding> 호출 하 여 개체는 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자 및 설정을 해당 `throwOnInvalidBytes` 인수를 `true`합니다. 오류 검색에 잘못 된 문자 또는 바이트 시퀀스를 검색 하는 메서드가 throw는 <xref:System.ArgumentException>합니다. 오류 검색 없이 예외가 throw 되지 하 고 잘못 된 시퀀스는 일반적으로 무시 됩니다.  
  
 인스턴스화할 수 있습니다는 <xref:System.Text.UnicodeEncoding> 에서 다양 한 방법으로 하는지 여부를 제공 하려는 바이트 순서 표시 (BOM), big endian 또는 little endian 인코딩을 것인지 및 오류 검색을 사용 하도록 설정 하려는 여부에 따라 개체입니다. 다음 표에 <xref:System.Text.UnicodeEncoding> 생성자 및 <xref:System.Text.Encoding> 반환 하는 속성을 <xref:System.Text.UnicodeEncoding> 개체입니다.  
  
|멤버|endian|BOM|오류 검색|  
|------------|----------------|---------|---------------------|  
|<xref:System.Text.Encoding.BigEndianUnicode%2A>|Big endian|예|없음 (교체 대체)|  
|<xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType>|Little endian|예|없음 (교체 대체)|  
|<xref:System.Text.UnicodeEncoding.%23ctor?displayProperty=nameWithType>|Little endian|예|없음 (교체 대체)|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29>|구성 가능 여부|구성 가능 여부|없음 (교체 대체)|  
|<xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>|구성 가능 여부|구성 가능 여부|구성 가능 여부|  
  
 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 유니코드 문자 집합을 인코딩할 될 바이트 수를 확인 및 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드에서는 실제 인코딩을 수행 합니다.  
  
 마찬가지로,는 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드 디코딩될, 바이트의 시퀀스의 문자 수를 확인 및 <xref:System.Text.UnicodeEncoding.GetChars%2A> 및 <xref:System.Text.UnicodeEncoding.GetString%2A> 메서드는 실제 디코딩을 수행 합니다.  
  
 인코더 또는 디코더에 인코딩 또는 디코딩 데이터 (예: 1 백만 문자의 인코딩된 문자열로 100, 000 문자 세그먼트에) 여러 개의 블록에 걸쳐 있는 경우에 상태 정보 저장을 사용 하 여 수에 대 한는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 및 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 속성 각각.  
  
   
  
## Examples  
 다음 예제에서는 유니코드 문자의 문자열을 사용 하 여 바이트 배열로 인코딩하는 방법을 <xref:System.Text.UnicodeEncoding> 개체입니다. 바이트 배열은 데이터 손실 없이 있다는 것을 보여 주기 위해 문자열로 디코딩됩니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/snippet.vb#1)]  
  
 다음 예제에서는 인코딩된 바이트를 파일에 기록 하 고 바이트 순서 표시 (BOM)를 사용 하 여 바이트 스트림을 접두사는 점을 제외 하 고는 이전 쿼리에서와 동일한 문자열을 사용 합니다. 그런 다음 두 가지 방법으로 파일을 읽어:를 사용 하 여 텍스트 파일로 <xref:System.IO.StreamReader> 개체 및 이진 파일로 합니다. 와 마찬가지로, 두 경우 모두 BOM ´ â 새로 읽기 문자열 합니다.  
  
 [!code-csharp[System.Text.UnicodeEncoding Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/CS/bom1.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding Example/VB/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF32Encoding" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.UTF7Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 little endian 바이트 순서를 사용 하 여 유니코드 바이트 순서 표시를 제공 하며 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않는 인스턴스를 만듭니다.  
  
> [!NOTE]
>  호출 하 여 오류 검색 사용 해야 하는 보안상의 이유로 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자 및 설정을 해당 `throwOnInvalidBytes` 인수를 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 새로 만들려면 <xref:System.Text.UnicodeEncoding> 인스턴스 및 인코딩의 이름을 표시 합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          big endian 바이트 순서(최상위 바이트 먼저)를 사용하려면 <see langword="true" />이고, little endian 바이트 순서(최하위 바이트 먼저)를 사용하려면 <see langword="false" />입니다.</param>
        <param name="byteOrderMark">
          <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>
          <see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다. 매개 변수를 사용하여 big endian 바이트 순서를 사용할지 여부와 <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환할지 여부를 지정할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자는 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않는 인스턴스를 만듭니다.  
  
> [!NOTE]
>  호출 하 여 오류 검색 사용 해야 하는 보안상의 이유로 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자 및 설정을 해당 `throwOnInvalidBytes` 인수를 `true`합니다.  
  
 `byteOrderMark` 의 작동을 제어 하는 매개 변수는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드. 경우 `true`, 메서드가 유니코드 바이트 순서 표시 (BOM) utf-16 형식에 포함 된 바이트 배열을 반환 합니다.  경우 `false`, 길이가 0 인 바이트 배열을 반환 합니다. 그러나 설정 `byteOrderMark` 를 `true` 발생 하지 않습니다는 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드 바이트 수에 BOM에 바이트 수를 포함 하도록 합니다.  
  
   
  
## Examples  
 다음 예제에서는 새로 만들려면 <xref:System.Text.UnicodeEncoding> little endian 또는 big endian 바이트 순서를 지원 여부를 지정 하는 인스턴스 및 유니코드 바이트 순서 표시 합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidBytes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">
          big endian 바이트 순서(최상위 바이트 먼저)를 사용하려면 <see langword="true" />이고, little endian 바이트 순서(최하위 바이트 먼저)를 사용하려면 <see langword="false" />입니다.</param>
        <param name="byteOrderMark">
          <see cref="M:System.Text.UnicodeEncoding.GetPreamble" /> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <param name="throwOnInvalidBytes">
          잘못된 인코딩이 검색되었을 때 예외가 발생하도록 지정하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
        <summary>
          <see cref="T:System.Text.UnicodeEncoding" /> 클래스의 새 인스턴스를 초기화합니다. 매개 변수를 사용하여 big endian 바이트 순서를 사용할지 여부, 유니코드 바이트 순서 표시를 제공할지 여부 및 잘못된 인코딩이 검색되었을 때 예외를 발생시킬지 여부를 지정할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `byteOrderMark` 의 작동을 제어 하는 매개 변수는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드. 경우 `true`, 메서드가 유니코드 바이트 순서 표시 (BOM) utf-16 형식에 포함 된 바이트 배열을 반환 합니다.  경우 `false`, 길이가 0 인 바이트 배열을 반환 합니다. 그러나 설정 `byteOrderMark` 를 `true` 발생 하지 않습니다는 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드 바이트 수에 BOM에 바이트 수를 포함 하도록 합니다.  
  
 경우는 `throwOnInvalidBytes` 매개 변수는 `true`, 잘못 된 바이트 시퀀스를 검색 하는 메서드가 throw <xref:System.ArgumentException?displayProperty=nameWithType>합니다. 그렇지 않으면 메서드는 예외를 throw 하지 않는 하 고 잘못 된 시퀀스가 무시 됩니다.  
  
> [!NOTE]
>  보안상의 이유로 응용 프로그램은이 생성자의 인스턴스를 만드는 데 좋습니다는 <xref:System.Text.UnicodeEncoding> 클래스 및 오류 검색 기능을 설정 하 여 `throwOnInvalidBytes` 를 `true`합니다.  
  
   
  
## Examples  
 다음 예제에서는 동작을 보여 줍니다. <xref:System.Text.UnicodeEncoding>, 오류 검색을 사용 하거나 사용 하지 않고 있습니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ErrorDetection/VB/errordetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="CharSize">
      <MemberSignature Language="C#" Value="public const int CharSize = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 CharSize = (2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.UnicodeEncoding.CharSize" />
      <MemberSignature Language="VB.NET" Value="Public Const CharSize As Integer  = 2" />
      <MemberSignature Language="C++ CLI" Value="public: int CharSize = 2;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>유니코드 문자 크기를 바이트 단위로 나타냅니다. 이 필드는 상수입니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 필드의 값은 값이 2 인 32 비트 부호 있는 상수입니다.  
  
   
  
## Examples  
 다음 예제에서는 값을 반환 하는 방법을 <xref:System.Text.UnicodeEncoding.CharSize> 에 표시 합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CPP/charsize.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/CS/charsize.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.CharSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.CharSize Example/VB/charsize.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">현재 개체와 비교할 개체입니다.</param>
        <summary>지정한 <see cref="T:System.Object" />이(가) 현재 <see cref="T:System.Text.UnicodeEncoding" /> 개체와 같은지 여부를 확인합니다.</summary>
        <returns>
          <paramref name="value" />가 <see cref="T:System.Text.UnicodeEncoding" /> 인스턴스이고 현재 개체와 같으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 개의 <xref:System.Text.UnicodeEncoding> 개체가 다음 조건을 모두 만족 하면 같은 개체로 간주 됩니다.  
  
-   두 개체가 동일한 바이트 순서 (big endian 또는 little endian)를 사용 합니다.  
  
-   두 개체, 바이트 순서 표시를 제공 하거나 둘 다는 그렇지 않습니다.  
  
-   두 개체가 동일한 인코더 대체 (fallback)를 사용합니다.  
  
-   두 개체가 동일한 디코더 대체 (fallback)를 사용합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Text.UnicodeEncoding.Equals%2A> 메서드를 테스트 하는지 여부를 현재 <xref:System.Text.UnicodeEncoding> 다른 개체가 같은지 <xref:System.Text.UnicodeEncoding> 개체입니다. 5 개의 <xref:System.Text.UnicodeEncoding> 개체가 생성 되 고 비교 하 고 비교 결과 표시 합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CPP/ctor-boolean-boolean.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/CS/ctor-boolean-boolean.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.ctor2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.ctor2 Example/VB/ctor-boolean-boolean.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UnicodeEncoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">인코딩할 문자 집합이 포함된 문자열입니다.</param>
        <summary>지정한 문자열의 문자를 인코딩하여 생성되는 바이트 수를 계산합니다.</summary>
        <returns>지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드. <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
> [!NOTE]
>  스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다. 바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에) 개발자의 책임 이며 머리말의 바이트 수에서 반환 된 값에 반영 되지는 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 및 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> 최대값 및 실제 문자열 인코딩하는 데 필요한 바이트 수를 계산 하는 메서드. 또한 실제 바이트 순서 표시가 포함 된 바이트 스트림을 저장 하는 데 필요한 바이트 수가 표시 됩니다.  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="s" />에 잘못된 문자 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(char* chars, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</param>
        <param name="count">인코딩할 문자 수입니다.</param>
        <summary>지정한 문자 포인터에서 시작되는 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</summary>
        <returns>지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 필요한 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드. <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
> [!NOTE]
>  스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다. 바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에) 개발자의 책임 이며 머리말의 바이트 수에서 반환 된 값에 반영 되지는 <xref:System.Text.UTF8Encoding.GetByteCount%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" />가 0보다 작은 경우  
  
 또는  
  
 결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색 기능을 사용하고 있으며 <paramref name="chars" />에 잘못된 문자 시퀀스가 포함되어 있는 경우</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetByteCount (chars As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetByteCount(cli::array &lt;char&gt; ^ chars, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">인코딩할 문자 집합이 포함된 문자 배열입니다.</param>
        <param name="index">인코딩할 첫 번째 문자의 인덱스입니다.</param>
        <param name="count">인코딩할 문자 수입니다.</param>
        <summary>지정한 문자 배열의 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</summary>
        <returns>지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>합니다. 최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드. <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색 기능 사용을 잘못 된 시퀀스가 메서드가 throw 하는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
 스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다. 바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에) 개발자의 책임 이며 머리말의 바이트 수에서 반환 된 값에 반영 되지는 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 배열을 대문자는 라틴으로 및 소문자 및 호출은 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드 라틴어 소문자 인코딩하는 데 필요한 바이트 수를 결정 합니다. 바이트 순서 표시를 추가한 경우 필요한 바이트의 총 수와 함께이 정보를 표시 합니다. 반환 된 값이 숫자를 비교 하는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드 라틴어 소문자 인코딩하는 데 필요한 바이트의 최대 수를 나타냅니다. 다음 예제에서는 그리스어와 키릴 자모 문자 및 호출의 조합으로 배열을 채웁니다는 <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 메서드 키릴자모 문자를 인코딩하는 데 필요한 바이트 수를 결정 합니다. 바이트 순서 표시를 추가한 경우 필요한 바이트의 총 수와 함께이 정보를 표시 합니다. 반환 된 값이 숫자를 비교 하는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드 키릴자모 문자를 인코딩하는 데 필요한 바이트의 최대 수를 나타냅니다.  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.UnicodeEncoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.unicodeencoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
  
 또는  
  
 <paramref name="index" /> 및 <paramref name="count" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.  
  
 또는  
  
 결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>문자 집합을 바이트 시퀀스로 인코딩합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(char* chars, int charCount, System::Byte* bytes, int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</param>
        <param name="charCount">인코딩할 문자 수입니다.</param>
        <param name="bytes">결과 바이트 시퀀스를 쓰기 시작할 위치를 가리키는 포인터입니다.</param>
        <param name="byteCount">쓸 최대 바이트 수입니다.</param>
        <summary>지정한 문자 포인터에서 시작하는 문자 집합을 지정한 바이트 포인터에서 시작하여 저장되는 바이트 시퀀스로 인코딩합니다.</summary>
        <returns>
          <paramref name="bytes" /> 매개 변수가 가리키는 위치에 쓴 실제 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 필요한 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드. <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
 데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다. 이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.  
  
> [!NOTE]
>  스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다. 바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에)은 개발자의 책임입니다. <xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 프리앰블 앞에 추가 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.  
  
 또는  
  
 <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> 또는 <paramref name="byteCount" />가 0보다 작습니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.  
  
 또는  
  
 <paramref name="byteCount" />가 결과 바이트 수보다 작은 경우</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(cli::array &lt;char&gt; ^ chars, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">인코딩할 문자 집합이 포함된 문자 배열입니다.</param>
        <param name="charIndex">인코딩할 첫 번째 문자의 인덱스입니다.</param>
        <param name="charCount">인코딩할 문자 수입니다.</param>
        <param name="bytes">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</param>
        <param name="byteIndex">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</param>
        <summary>지정한 문자 배열의 문자 집합을 지정한 바이트 배열로 인코딩합니다.</summary>
        <returns>
          <paramref name="bytes" />에 쓴 실제 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드. <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
 데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다. 이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.  
  
> [!NOTE]
>  스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다. 바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에)은 개발자의 책임입니다. <xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 프리앰블 앞에 추가 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드를 다양 한 문자를 인코딩하는 <xref:System.String> 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 하 고 있습니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes3 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.  
  
 또는  
  
 <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우  
  
 또는  
  
 <paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.  
  
 또는  
  
 <paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="chars" />에 잘못된 문자 시퀀스를 포함합니다.  
  
 또는  
  
 <paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetBytes(System::String ^ s, int charIndex, int charCount, cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">인코딩할 문자 집합이 포함된 문자열입니다.</param>
        <param name="charIndex">인코딩할 첫 번째 문자의 인덱스입니다.</param>
        <param name="charCount">인코딩할 문자 수입니다.</param>
        <param name="bytes">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</param>
        <param name="byteIndex">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</param>
        <summary>지정된 <see cref="T:System.String" />의 문자 집합을 지정된 바이트 배열로 인코딩합니다.</summary>
        <returns>
          <paramref name="bytes" />에 쓴 실제 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 호출 결과 바이트를 저장 하기 위해는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드. 최대 배열 크기를 계산 하려면 호출는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드. <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
 데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다. 이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.  
  
> [!NOTE]
>  스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다. 바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에)은 개발자의 책임입니다. <xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 프리앰블 앞에 추가 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 유니코드 문자 배열에서 요소의 범위를 인코딩하고 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 하는 방법을 보여 줍니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetBytes1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetBytes1 Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" />가 <see langword="null" />인 경우  
  
 또는  
  
 <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />, <paramref name="charCount" /> 또는 <paramref name="byteIndex" />가 0보다 작은 경우  
  
 또는  
  
 <paramref name="charIndex" /> 및 <paramref name="charCount" />가 <paramref name="chars" />에서 올바른 범위를 나타내지 않습니다.  
  
 또는  
  
 <paramref name="byteIndex" />가 <paramref name="bytes" />의 유효한 인덱스가 아닌 경우</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="s" />에 잘못된 문자 시퀀스를 포함합니다.  
  
 또는  
  
 <paramref name="bytes" />의 용량(<paramref name="byteIndex" /> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(System::Byte* bytes, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</param>
        <param name="count">디코딩할 바이트 수입니다.</param>
        <summary>지정한 바이트 포인터에서 시작되는 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</summary>
        <returns>지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자 응용 프로그램 사용 하 여 저장 하는 데 필요한 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다. 최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다. <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" />가 0보다 작은 경우  
  
 또는  
  
 결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharCount (bytes As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharCount(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</param>
        <param name="index">디코딩할 첫 번째 바이트의 인덱스입니다.</param>
        <param name="count">디코딩할 바이트 수입니다.</param>
        <summary>지정한 바이트 배열의 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</summary>
        <returns>지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다. 최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다. <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 사용 하는 바이트 배열에서 요소의 범위를 디코딩하여 생성 되는 문자 수를 반환 하는 메서드 <xref:System.Text.UnicodeEncoding>합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
  
 또는  
  
 <paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.  
  
 또는  
  
 결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="Overload:System.Text.UnicodeEncoding.GetChars" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>바이트 시퀀스를 문자 집합으로 디코딩합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(System::Byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</param>
        <param name="byteCount">디코딩할 바이트 수입니다.</param>
        <param name="chars">결과 문자 집합을 쓰기 시작할 위치를 가리키는 포인터입니다.</param>
        <param name="charCount">쓸 최대 문자 수입니다.</param>
        <summary>지정한 바이트 포인터에서 시작하는 바이트 시퀀스를 지정한 문자 포인터에서 시작하여 저장되는 문자 집합으로 디코딩합니다.</summary>
        <returns>
          <paramref name="chars" /> 매개 변수가 가리키는 위치에 쓴 실제 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자 응용 프로그램 사용 하 여 저장 하는 데 필요한 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다. 최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다. <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
 디코딩할 바이트 범위 (BOM)의 바이트 순서 표시를 포함 하는 경우 인식 BOM이 아닌 형식의 메서드에 의해 반환 된 바이트 배열을 문자 U + FFFE이이 메서드에 의해 반환 되는 문자 배열에 포함 됩니다. 호출 하 여 제거할 수는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.  
  
 데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다. 이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.  
  
 또는  
  
 <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> 또는 <paramref name="charCount" />가 0보다 작습니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.  
  
 또는  
  
 <paramref name="charCount" />가 결과 문자 수보다 작은 경우</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetChars (bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetChars(cli::array &lt;System::Byte&gt; ^ bytes, int byteIndex, int byteCount, cli::array &lt;char&gt; ^ chars, int charIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</param>
        <param name="byteIndex">디코딩할 첫 번째 바이트의 인덱스입니다.</param>
        <param name="byteCount">디코딩할 바이트 수입니다.</param>
        <param name="chars">결과 문자 집합을 포함할 문자 배열입니다.</param>
        <param name="charIndex">결과 문자 집합을 쓰기 시작할 인덱스입니다.</param>
        <summary>지정한 바이트 배열의 바이트 시퀀스를 지정한 문자 배열로 디코딩합니다.</summary>
        <returns>
          <paramref name="chars" />에 쓴 실제 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다. 최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다. <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
 디코딩할 바이트 범위 (BOM)의 바이트 순서 표시를 포함 하는 경우 인식 BOM이 아닌 형식의 메서드에 의해 반환 된 바이트 배열을 문자 U + FFFE이이 메서드에 의해 반환 되는 문자 배열에 포함 됩니다. 호출 하 여 제거할 수는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.  
  
 데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다. 이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 되는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 메서드 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 <xref:System.Text.UnicodeEncoding.GetChars%2A> 메서드는 바이트 배열에서 요소의 범위를 디코딩하고 문자 배열에 결과 저장 합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.  
  
 또는  
  
 <paramref name="chars" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" />, <paramref name="byteCount" /> 또는 <paramref name="charIndex" />가 0보다 작은 경우  
  
 또는  
  
 <paramref name="byteindex" /> 및 <paramref name="byteCount" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.  
  
 또는  
  
 <paramref name="charIndex" />가 <paramref name="chars" />의 유효한 인덱스가 아닌 경우</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.  
  
 또는  
  
 <paramref name="chars" />의 용량(<paramref name="charIndex" /> ~ 배열 끝)이 부족해서 결과 문자를 수용할 수 없는 경우</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetDecoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDecoder () As Decoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Decoder ^ GetDecoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>UTF-16으로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 디코더를 가져옵니다.</summary>
        <returns>UTF-16으로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 <see cref="T:System.Text.Decoder" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType> 메서드 순차 바이트 블록을 유사한 방식으로 문자의 순차 블록 변환는 <xref:System.Text.UnicodeEncoding.GetChars%2A>합니다. 그러나 한 <xref:System.Text.Decoder> 블록으로 확장 되는 바이트 시퀀스를 올바르게 디코딩할 수 있도록 호출 간의 상태 정보를 관리 합니다. <xref:System.Text.Decoder> 또한 데이터 블록의 끝에 후행 바이트를 보존 하 고 다음 디코딩 작업에서 후행 바이트를 사용 합니다. 따라서 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 및 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 는 전체 데이터 스트림 하는 대신 데이터 블록을 처리 하기 때문에 네트워크 전송 및 파일 작업에 유용 합니다.  
  
 오류 검색이 사용 됩니다, 즉,는 `throwOnInvalidBytes` 생성자의 매개 변수 설정 `true`, 오류 검색이에 사용 되는 <xref:System.Text.Decoder> 이 메서드에서 반환 합니다. 오류 검색이 사용 되는 경우 잘못 된 시퀀스가 발생 된 디코더 상태에 정의 되지 않으며 처리가 중지 되어야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 인코더 및 디코더를 사용 하 여 바이트 배열에는 문자열을 인코딩하려면 다음 문자 배열로 바이트를 디코딩할을 합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetEncoder" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEncoder () As Encoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Text::Encoder ^ GetEncoder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>유니코드 문자 시퀀스를 UTF-16으로 인코딩된 바이트 시퀀스로 변환하는 인코더를 가져옵니다.</summary>
        <returns>유니코드 문자 시퀀스를 UTF-16으로 인코딩된 바이트 시퀀스로 변환하는 <see cref="T:System.Text.Encoder" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType> 메서드 문자의 순차 블록 순차 블록의 바이트 유사한 방식으로 변환 된 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 이 클래스의 메서드. 그러나 한 <xref:System.Text.Encoder> 블록으로 확장 되는 문자 시퀀스 올바르게 인코딩할 수 있도록 개체 호출 간의 상태 정보를 유지 합니다. <xref:System.Text.Encoder> 개체도 데이터 블록의 끝에 후행 문자를 보존 하 고 다음 인코딩 작업에 후행 문자를 사용 합니다. 예를 들어 데이터 블록 짝이 맞지 않는 상위 서로게이트를 마무리할 수 있습니다 및 다음 데이터 블록에 일치 하는 하위 서로게이트 있을 수 있습니다. 따라서 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 및 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 는 전체 데이터 스트림 하는 대신 데이터 블록을 처리 하기 때문에 네트워크 전송 및 파일 작업에 유용 합니다.  
  
 오류 검색이 사용 됩니다, 즉,는 `throwOnInvalidBytes` 생성자의 매개 변수 설정 `true`, 오류 검색이에 사용 되는 <xref:System.Text.Encoder> 이 메서드에서 반환 된 개체입니다. 오류 검색이 사용 되는 잘못 된 시퀀스가 발생 하는 경우 인코더의 상태가 정의 하 고 처리가 중지 되어야 합니다.  
  
   
  
## Examples  
 다음 예제에서는 인코더 및 디코더를 사용 하 여 바이트 배열에는 문자열을 인코딩하려면 다음 문자 배열로 바이트를 디코딩할을 합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.EncDec/VB/encdec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 인스턴스의 해시 코드를 반환합니다.</summary>
        <returns>현재 <see cref="T:System.Text.UnicodeEncoding" /> 개체의 해시 코드입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxByteCount (charCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxByteCount(int charCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">인코딩할 문자 수입니다.</param>
        <summary>지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수를 계산합니다.</summary>
        <returns>지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetBytes%2A> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetByteCount%2A>합니다. 최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>합니다. <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 현재 선택 된 최악의 경우를 포함 하 여 최악의 수를 검색 <xref:System.Text.EncoderFallback>합니다. 잠재적으로 큰 문자열로 대체를 선택한 경우 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 큰 값을 반환할 수 있습니다.  
  
 대부분의 경우가이 메서드는 작은 문자열에 대해 적합 한 숫자를 검색합니다. 큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다. 사용 하 여 다른 접근 방식을 고려해 야 할 수도 있습니다 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 또는 <xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType>합니다.  
  
 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 관계가 없으며 <xref:System.Text.UnicodeEncoding.GetChars%2A>합니다. 응용 프로그램을 사용 하면 비슷한 기능이 필요한 경우 <xref:System.Text.UnicodeEncoding.GetChars%2A>를 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다.  
  
> [!NOTE]
>  `GetMaxByteCount(N)` 와 같은 값은 반드시 `N* GetMaxByteCount(1)`합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> 메서드를 지정된 된 수의 문자를 인코딩하는 데 필요한 바이트의 최대 수를 반환 합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" />가 0보다 작은 경우  
  
 또는  
  
 결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.Text.EncoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" />이 <see cref="T:System.Text.EncoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMaxCharCount (byteCount As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetMaxCharCount(int byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">디코딩할 바이트 수입니다.</param>
        <summary>지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수를 계산합니다.</summary>
        <returns>지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 필요한 정확한 배열 크기를 계산 하려면 <xref:System.Text.UnicodeEncoding.GetChars%2A> 결과 문자를 저장 하기 위해 응용 프로그램에서 <xref:System.Text.UnicodeEncoding.GetCharCount%2A>합니다. 최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A>합니다. <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 메서드는 일반적으로 더 빠르게 실행 합니다.  
  
 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 현재 선택 된 최악의 경우를 포함 하 여 최악의 수를 검색 <xref:System.Text.DecoderFallback>합니다. 잠재적으로 큰 문자열로 대체를 선택한 경우 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 큰 값을 검색 합니다.  
  
 대부분의 경우가이 메서드는 작은 문자열에 대해 적합 한 숫자를 검색합니다. 큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다. 사용 하 여 다른 접근 방식을 고려해 야 할 수도 있습니다 <xref:System.Text.UnicodeEncoding.GetCharCount%2A> 또는 <xref:System.Text.Decoder.Convert%2A>합니다.  
  
 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 관계가 없으며 <xref:System.Text.UnicodeEncoding.GetBytes%2A>합니다. 응용 프로그램을 사용 하면 비슷한 기능이 필요한 경우 <xref:System.Text.UnicodeEncoding.GetBytes%2A>를 사용 해야 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A>합니다.  
  
> [!NOTE]
>  `GetMaxCharCount(N)` 와 같은 값은 반드시 `N* GetMaxCharCount(1)`합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 <xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A> 지정된 된 수의 바이트를 디코딩하여 생성 되는 최대 문자 수를 반환 하는 메서드.  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetMaxCharCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" />가 0보다 작은 경우  
  
 또는  
  
 결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetPreamble" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPreamble () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetPreamble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 인스턴스의 생성자가 바이트 순서 표시를 요청하는 경우 UTF-16 형식으로 인코딩된 유니코드 바이트 순서 표시를 반환합니다.</summary>
        <returns>
          <see cref="T:System.Text.UnicodeEncoding" /> 개체가 제공하도록 구성된 경우 유니코드 바이트 순서 표시가 포함된 바이트 배열입니다. 그렇지 않으면 이 메서드는 길이가 0인 바이트 배열을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.UnicodeEncoding> 개체 인코딩 프로세스에서 발생 하는 바이트 시퀀스에 접두어로 추가 될 수 있는 바이트 배열에는 머리말을 제공할 수 있습니다. 바이트 순서와 변형 형식 또는 u t F를 결정 하는 디코더를 통해 바이트 순서 표시 (코드 포인트 U + FEFF)로 인코딩된 바이트 시퀀스를 앞 있습니다. 유니코드 바이트 순서 표시 (BOM) (16 진수)에서 다음과 같이 serialize 됩니다.  
  
-   Big endian 바이트 순서: FE FF  
  
-   Little endian 바이트 순서: FF FE  
  
 인스턴스화할 수 있습니다는 <xref:System.Text.UnicodeEncoding> 개체 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드는 다음과 같은 방법으로 유효한 BOM을 반환 합니다.  
  
-   검색 하 여는 <xref:System.Text.UnicodeEncoding> 에서 반환 된 개체는 <xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType> 또는 <xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType> 속성입니다.  
  
-   매개 변수가 없는 호출 하 여 <xref:System.Text.UnicodeEncoding.%23ctor> 생성자를 인스턴스화하는 <xref:System.Text.UnicodeEncoding> 개체입니다.  
  
-   제공 하 여 `true` 의 값으로는 `byteOrderMark` 인수에는 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29> 또는 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> 생성자입니다.  
  
 BOM을 사용 하 여, 그렇지 않으면 손실 된 참조를 해당 인코딩 등 태그가 지정 되지 않은 잘못 태그가 지정 된 파일에 대 한 인코딩을의 특정 id에 거의 제공 하므로 웹 데이터 나 임의 텍스트 파일만 때 비즈니스 없는 것이 좋습니다. 국가별 고려 사항입니다. 데이터는 일관 되 고 적절히 태그가 지정 종종 사용자 문제를 방지할 수 있는 합니다.  
  
 인코딩 형식을 제공 하는 표준, BOM은 중복 되는 부분이입니다. 그러나 올바른 인코딩 헤더를 보낼 서버를 사용할 수 있습니다. 또는 사용할 수 있습니다는 대체 방식으로 인코딩이 그렇지 않은 경우 손실 된 경우.  
  
 BOM을 사용 하 여 몇 가지 단점이 있습니다. 예를 들어 BOM을 사용 하는 데이터베이스 필드를 제한 하는 방법을 알아 두어야 어려울 수 있습니다. 파일의 연결 문제가 될 수 또한 예를 들어 파일을 병합 될 때 데이터 중간에 불필요 한 문자가 포함 될 수 있도록 합니다. 그러나 몇 가지 단점 있음에도 불구 하 고 BOM 사용 하는 가장 좋습니다.  
  
> [!CAUTION]
>  인코딩된 바이트 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림의 처음을 붙여야 합니다. <xref:System.Text.UnicodeEncoding.GetBytes%2A> 메서드를 인코딩된 바이트 시퀀스로 BOM 앞에 추가 되지 않습니다; 개발자의 책임은 적절 한 바이트 스트림의 시작 부분에 BOM을 제공 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> big endian 또는 little endian 바이트 순서의 인스턴스에 대 한 유니코드 바이트 순서 표시를 검색 하는 메서드는 <xref:System.Text.UnicodeEncoding>합니다.  
  
 [!code-cpp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CPP/getpreamble-.cpp#1)]
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/CS/getpreamble-.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetPreamble Example/VB/getpreamble-.vb#1)]  
  
 다음 예제에서는 두 개를 인스턴스화하고 <xref:System.Text.UnicodeEncoding> 개체는 첫 번째 BOM을 및는 못합니다. 두 번째 제공 하지 않습니다. 그런 다음 호출 하는 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드를 유니코드로 인코딩된 문자열을 작성 하기 전에 파일에 BOM을 씁니다. 이 예제에서 콘솔 출력에서 볼 수 있듯이 두 번째 인코더에서 바이트를 저장 하는 파일에 첫 번째 보다 더 많은 바이트를 3 개 있습니다.  
  
 [!code-csharp[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/cs/GetPreamble1.cs#1)]
 [!code-vb[System.Text.UnicodeEncoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Text.UnicodeEncoding.GetPreamble/vb/GetPreamble1.vb#1)]  
  
 사용 하 여 파일을 비교할 수도 있습니다는 `fc` 콘솔 창에 명령 16 진수 보기 모드를 포함 하는 텍스트 편집기에서 파일을 검사할 수 있습니다. Note utf-16 인코딩을 지 원하는 편집기에서의 파일을 열면 BOM이 표시 되지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetString (bytes As Byte(), index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetString(cli::array &lt;System::Byte&gt; ^ bytes, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</param>
        <param name="index">디코딩할 첫 번째 바이트의 인덱스입니다.</param>
        <param name="count">디코딩할 바이트 수입니다.</param>
        <summary>바이트 배열의 바이트 범위를 문자열로 디코딩합니다.</summary>
        <returns>지정된 바이트 시퀀스의 디코딩 결과가 포함된 <see cref="T:System.String" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <xref:System.ArgumentException>합니다. 오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.  
  
 디코딩할 바이트 범위 (BOM)의 바이트 순서 표시를 포함 하는 경우 인식 BOM이 아닌 형식의 메서드에 의해 반환 된 바이트 배열을 문자 U + FFFE이이 메서드에 의해 반환 되는 문자 배열에 포함 됩니다. 호출 하 여 제거할 수는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.  
  
 데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다. 이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <xref:System.Text.Decoder> 또는 <xref:System.Text.Encoder> 에서 제공 하는 개체는 <xref:System.Text.UnicodeEncoding.GetDecoder%2A> 또는 <xref:System.Text.UnicodeEncoding.GetEncoder%2A> 메서드를 각각.  
  
   
  
## Examples  
 다음 예제를 호출 하 여 배열을 초기화는 <xref:System.Text.UnicodeEncoding.GetByteCount%2A> 메서드 정확 하 게 바이트 인코딩된 문자열 및 바이트 순서 표시 (BOM)의 크기를 추가한 다음에 대 한 필요한 지를 결정 합니다. 이 예에서는 다음 호출에서 <xref:System.Text.UnicodeEncoding.GetPreamble%2A> 메서드를 호출 하기 전에 배열에 BOM을 저장할는 <xref:System.Text.Encoding.GetBytes%2A> 메서드를 인코딩된 바이트 배열에 저장 합니다. 이 예에서는 다음 호출에서 <xref:System.Text.UnicodeEncoding.GetString%2A> 문자열을 디코딩하 메서드.  
  
 [!code-csharp[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/cs/getstring1.cs#1)]
 [!code-vb[System.Text.UTF8Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf8encoding.getstring/vb/getstring1.vb#1)]  
  
 이 경우 디코딩된 문자열와 것 원래 문자열에서 U + FFFD 16 비트 바이트 순서 표시로 시작 하는 이후 note 합니다. 즉, 두 문자열이 것으로 비교는 출력 문자열을 사용 하는 경우 BOM 대체 문자로 표시 됩니다 "?"입니다. 문자열의 시작 부분에 BOM을 제거 하려면 호출할 수 있습니다는 <xref:System.String.TrimStart%2A?displayProperty=nameWithType> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" />가 <see langword="null" />(<see langword="Nothing" />)입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
  
 또는  
  
 <paramref name="index" /> 및 <paramref name="count" />가 <paramref name="bytes" />에서 올바른 범위를 나타내지 않습니다.</exception>
        <exception cref="T:System.ArgumentException">오류 검색이 사용되고 <paramref name="bytes" />에 잘못된 바이트 시퀀스를 포함합니다.</exception>
        <exception cref="T:System.Text.DecoderFallbackException">대체가 발생했습니다(자세한 설명은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md) 참조).  
  
 및  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" />이 <see cref="T:System.Text.DecoderExceptionFallback" />로 설정됩니다.</exception>
        <altmember cref="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetDecoder" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>