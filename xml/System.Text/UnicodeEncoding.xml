<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnicodeEncoding.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac537bb8ffd133cbb1ddd3c3fdd2f593086d39584aa.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37bb8ffd133cbb1ddd3c3fdd2f593086d39584aa</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Represents a UTF-16 encoding of Unicode characters.</source>
          <target state="translated">유니코드 문자의 UTF-16 인코딩을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes.</source>
          <target state="translated">인코딩은 유니코드 문자 집합을 바이트 시퀀스로 변환하는 프로세스입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</source>
          <target state="translated">디코딩은 유니코드 문자 집합으로 인코딩된 바이트 시퀀스로 변형 프로세스입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> assigns a code point (a number) to each character in every supported script.</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 코드 포인트 (숫자) 지원 되는 모든 스크립트의 각 문자를 할당 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>A Unicode Transformation Format (UTF) is a way to encode that code point.</source>
          <target state="translated">유니코드 변환 형식 (UTF)는 코드 포인트를 인코딩하는 방법입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <bpt id="p1">[</bpt>Unicode Standard<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> uses the following UTFs:</source>
          <target state="translated"><bpt id="p1">[</bpt>유니코드 표준<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> 다음 Utf를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>UTF-8, which represents each code point as a sequence of one to four bytes.</source>
          <target state="translated">U t F-8을 각 코드 포인트를 1 ~ 4 바이트의 시퀀스로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>UTF-16, which represents each code point as a sequence of one to two 16-bit integers.</source>
          <target state="translated">U t F-16이 고는 각 코드 포인트를 1 ~ 2 16 비트 정수 시퀀스로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>UTF-32, which represents each code point as a 32-bit integer.</source>
          <target state="translated">U t F-32는 각 코드 포인트를 32 비트 정수를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>For more information about the UTFs and other encodings supported by <ph id="ph1">&lt;xref:System.Text&gt;</ph>, see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>.</source>
          <target state="translated">Utf 및에서 지 원하는 다른 인코딩에 대 한 자세한 내용은 <ph id="ph1">&lt;xref:System.Text&gt;</ph>, 참조 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class represents a UTF-16 encoding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 클래스 utf-16 인코딩을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The encoder can use either big endian byte order (most significant byte first) or little endian byte order (least significant byte first).</source>
          <target state="translated">인코더 big endian 바이트 순서를 바꿔서 사용할 수 있습니다 (최상위 바이트 첫 번째) 또는 little endian 바이트 순서 (최하위 바이트 첫 번째).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):</source>
          <target state="translated">예를 들어 영문 대문자 (코드 포인트 U + 0041)으로 serialize 됩니다 (16 진수)에서 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Big endian byte order: 00 00 00 41</source>
          <target state="translated">Big endian 바이트 순서: 00 00 00 41</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Little endian byte order: 41 00 00 00</source>
          <target state="translated">Little endian 바이트 순서: 41 00 00 00</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>It is generally more efficient to store Unicode characters using the native byte order of a particular platform.</source>
          <target state="translated">특정 플랫폼의 기본 바이트 순서를 사용 하 여 유니코드 문자를 저장 하려면 일반적으로 더 효율적입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.</source>
          <target state="translated">예를 들어 Intel 컴퓨터 등의 little endian 플랫폼에서 little endian 바이트 순서를 사용 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class corresponds to the Windows code pages 1200 (little endian byte order) and 1201 (big endian byte order).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 1200 (little endian 바이트 순서) 및 1201 (big endian 바이트 순서)은 Windows 코드 페이지에 해당 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>You can determine the "endianness" of a particular architecture by calling the <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">특정 아키텍처의 "endianness"를 호출 하 여 확인할 수 있습니다는 <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Optionally, the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process.</source>
          <target state="translated">필요에 따라는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체 배열이 인코딩 프로세스에서 발생 하는 바이트 시퀀스에 접두어로 추가 될 수 있는 바이트는 바이트 순서 표시 (BOM)를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF.</source>
          <target state="translated">바이트 순서 표시 (BOM)를 포함 하는 머리말, 디코더에서 바이트 순서 및 변환 형식 또는 u t F를 결정 하는 데 도움이 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>If the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> instance is configured to provide a BOM, you can retrieve it by calling the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method; otherwise, the method returns an empty array.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 인스턴스 BOM을 제공 하도록 구성 된, 호출 하 여 검색할 수 있습니다는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> 메서드가 메서드는 빈 배열을 반환 하는 그렇지 않은 경우.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Note that, even if a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class do not do this automatically.</source>
          <target state="translated">인 경우에는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체가 BOM 지원에 대해 구성 된, 적절 한;로 인코딩된 바이트 스트림의 시작 부분에 BOM을 포함 해야의 인코딩 메서드는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 클래스 이렇게 하지 않으면 자동으로 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>To enable error detection and to make the class instance more secure, you should instantiate a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and setting its <ph id="ph3">`throwOnInvalidBytes`</ph> argument to <ph id="ph4">`true`</ph>.</source>
          <target state="translated">인스턴스화해야 오류 검색을 활성화 하 고 클래스 인스턴스를 더욱 안전 하 게는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 호출 하 여 개체는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> 생성자 및 설정을 해당 <ph id="ph3">`throwOnInvalidBytes`</ph> 인수를 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>With error detection, a method that detects an invalid sequence of characters or bytes throws a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 문자 또는 바이트 시퀀스를 검색 하는 메서드가 throw는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Without error detection, no exception is thrown, and the invalid sequence is generally ignored.</source>
          <target state="translated">오류 검색 없이 예외가 throw 되지 하 고 잘못 된 시퀀스는 일반적으로 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection.</source>
          <target state="translated">인스턴스화할 수 있습니다는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 에서 다양 한 방법으로 하는지 여부를 제공 하려는 바이트 순서 표시 (BOM), big endian 또는 little endian 인코딩을 것인지 및 오류 검색을 사용 하도록 설정 하려는 여부에 따라 개체입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The following table lists the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> constructors and the <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> properties that return a <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.</source>
          <target state="translated">다음 표에 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 생성자 및 <ph id="ph2">&lt;xref:System.Text.Encoding&gt;</ph> 반환 하는 속성을 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Member</source>
          <target state="translated">멤버</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Endianness</source>
          <target state="translated">endian</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>BOM</source>
          <target state="translated">BOM</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Error detection</source>
          <target state="translated">오류 검색</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Big-endian</source>
          <target state="translated">Big endian</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Yes</source>
          <target state="translated">예</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>No (Replacement fallback)</source>
          <target state="translated">없음 (교체 대체)</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Little-endian</source>
          <target state="translated">Little endian</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Yes</source>
          <target state="translated">예</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>No (Replacement fallback)</source>
          <target state="translated">없음 (교체 대체)</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Little-endian</source>
          <target state="translated">Little endian</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Yes</source>
          <target state="translated">예</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>No (Replacement fallback)</source>
          <target state="translated">없음 (교체 대체)</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">구성 가능 여부</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">구성 가능 여부</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>No (Replacement fallback)</source>
          <target state="translated">없음 (교체 대체)</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">구성 가능 여부</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">구성 가능 여부</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Configurable</source>
          <target state="translated">구성 가능 여부</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method performs the actual encoding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드는 유니코드 문자 집합을 인코딩할 될 바이트 수를 확인 및 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 메서드에서는 실제 인코딩을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>Likewise, the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method determines how many characters result in decoding a sequence of bytes, and the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetString%2A&gt;</ph> methods perform the actual decoding.</source>
          <target state="translated">마찬가지로,는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> 메서드 디코딩될, 바이트의 시퀀스의 문자 수를 확인 및 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetString%2A&gt;</ph> 메서드는 실제 디코딩을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> properties, respectively.</source>
          <target state="translated">인코더 또는 디코더에 인코딩 또는 디코딩 데이터 (예: 1 백만 문자의 인코딩된 문자열로 100, 000 문자 세그먼트에) 여러 개의 블록에 걸쳐 있는 경우에 상태 정보 저장을 사용 하 여 수에 대 한는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> 속성 각각.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The following example demonstrates how to encode a string of Unicode characters into a byte array by using a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 유니코드 문자의 문자열을 사용 하 여 바이트 배열로 인코딩하는 방법을 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The byte array is decoded into a string to demonstrate that there is no loss of data.</source>
          <target state="translated">바이트 배열은 데이터 손실 없이 있다는 것을 보여 주기 위해 문자열로 디코딩됩니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM).</source>
          <target state="translated">다음 예제에서는 인코딩된 바이트를 파일에 기록 하 고 바이트 순서 표시 (BOM)를 사용 하 여 바이트 스트림을 접두사는 점을 제외 하 고는 이전 쿼리에서와 동일한 문자열을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>It then reads the file in two different ways: as a text file by using a <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> object; and as a binary file.</source>
          <target state="translated">그런 다음 두 가지 방법으로 파일을 읽어:를 사용 하 여 텍스트 파일로 <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> 개체 및 이진 파일로 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.UnicodeEncoding">
          <source>As you would expect, in neither case is the BOM included in the newly read string.</source>
          <target state="translated">와 마찬가지로, 두 경우 모두 BOM ´ â 새로 읽기 문자열 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor">
          <source>This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.</source>
          <target state="translated">이 생성자를 little endian 바이트 순서를 사용 하 여 유니코드 바이트 순서 표시를 제공 하며 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않는 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor">
          <source>For security reasons, you should enable error detection by calling the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and setting its <ph id="ph2">`throwOnInvalidBytes`</ph> argument to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">호출 하 여 오류 검색 사용 해야 하는 보안상의 이유로 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> 생성자 및 설정을 해당 <ph id="ph2">`throwOnInvalidBytes`</ph> 인수를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor">
          <source>The following example demonstrates how to create a new <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> instance and display the name of the encoding.</source>
          <target state="translated">다음 예제에서는 새로 만들려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 인스턴스 및 인코딩의 이름을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to use the big endian byte order (most significant byte first), or <ph id="ph2">&lt;see langword="false" /&gt;</ph> to use the little endian byte order (least significant byte first).</source>
          <target state="translated">big endian 바이트 순서(최상위 바이트 먼저)를 사용하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, little endian 바이트 순서(최하위 바이트 먼저)를 사용하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify that the <ph id="ph2">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> method returns a Unicode byte order mark; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>Parameters specify whether to use the big endian byte order and whether the <ph id="ph1">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> method returns a Unicode byte order mark.</source>
          <target state="translated">매개 변수를 사용하여 big endian 바이트 순서를 사용할지 여부와 <ph id="ph1">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> 메서드를 통해 유니코드 바이트 순서 표시를 반환할지 여부를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>This constructor creates an instance that does not throw an exception when an invalid encoding is detected.</source>
          <target state="translated">이 생성자는 잘못 된 인코딩이 검색 되었을 때 예외를 throw 하지 않는 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>For security reasons, you should enable error detection by calling the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructor and setting its <ph id="ph2">`throwOnInvalidBytes`</ph> argument to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">호출 하 여 오류 검색 사용 해야 하는 보안상의 이유로 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> 생성자 및 설정을 해당 <ph id="ph2">`throwOnInvalidBytes`</ph> 인수를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">`byteOrderMark`</ph> parameter controls the operation of the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`byteOrderMark`</ph> 의 작동을 제어 하는 매개 변수는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">`true`</ph>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</source>
          <target state="translated">경우 <ph id="ph1">`true`</ph>, 메서드가 유니코드 바이트 순서 표시 (BOM) utf-16 형식에 포함 된 바이트 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">`false`</ph>, it returns a zero-length byte array.</source>
          <target state="translated">경우 <ph id="ph1">`false`</ph>, 길이가 0 인 바이트 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>However, setting <ph id="ph1">`byteOrderMark`</ph> to <ph id="ph2">`true`</ph> does not cause the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method to prefix the BOM at the beginning of the byte array, nor does it cause the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method to include the number of bytes in the BOM in the byte count.</source>
          <target state="translated">그러나 설정 <ph id="ph1">`byteOrderMark`</ph> 를 <ph id="ph2">`true`</ph> 발생 하지 않습니다는 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드 바이트 수에 BOM에 바이트 수를 포함 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
          <source>The following example demonstrates how to create a new <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> instance specifying whether to support little endian or big endian byte ordering and the Unicode byte order mark.</source>
          <target state="translated">다음 예제에서는 새로 만들려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> little endian 또는 big endian 바이트 순서를 지원 여부를 지정 하는 인스턴스 및 유니코드 바이트 순서 표시 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to use the big endian byte order (most significant byte first); <ph id="ph2">&lt;see langword="false" /&gt;</ph> to use the little endian byte order (least significant byte first).</source>
          <target state="translated">big endian 바이트 순서(최상위 바이트 먼저)를 사용하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, little endian 바이트 순서(최하위 바이트 먼저)를 사용하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify that the <ph id="ph2">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> method returns a Unicode byte order mark; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.Text.UnicodeEncoding.GetPreamble" /&gt;</ph> 메서드를 통해 유니코드 바이트 순서 표시를 반환하도록 지정하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">잘못된 인코딩이 검색되었을 때 예외가 발생하도록 지정하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</source>
          <target state="translated">매개 변수를 사용하여 big endian 바이트 순서를 사용할지 여부, 유니코드 바이트 순서 표시를 제공할지 여부 및 잘못된 인코딩이 검색되었을 때 예외를 발생시킬지 여부를 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">`byteOrderMark`</ph> parameter controls the operation of the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`byteOrderMark`</ph> 의 작동을 제어 하는 매개 변수는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">`true`</ph>, the method returns a byte array containing the Unicode byte order mark (BOM) in UTF-16 format.</source>
          <target state="translated">경우 <ph id="ph1">`true`</ph>, 메서드가 유니코드 바이트 순서 표시 (BOM) utf-16 형식에 포함 된 바이트 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">`false`</ph>, it returns a zero-length byte array.</source>
          <target state="translated">경우 <ph id="ph1">`false`</ph>, 길이가 0 인 바이트 배열을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>However, setting <ph id="ph1">`byteOrderMark`</ph> to <ph id="ph2">`true`</ph> does not cause the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method to prefix the BOM at the beginning of the byte array, nor does it cause the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method to include the number of bytes in the BOM in the byte count.</source>
          <target state="translated">그러나 설정 <ph id="ph1">`byteOrderMark`</ph> 를 <ph id="ph2">`true`</ph> 발생 하지 않습니다는 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 바이트 배열의 시작 부분에 BOM을 접두사를 지정 하는 메서드도 않습니다는 <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드 바이트 수에 BOM에 바이트 수를 포함 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>If the <ph id="ph1">`throwOnInvalidBytes`</ph> parameter is <ph id="ph2">`true`</ph>, a method that detects an invalid byte sequence throws <ph id="ph3">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`throwOnInvalidBytes`</ph> 매개 변수는 <ph id="ph2">`true`</ph>, 잘못 된 바이트 시퀀스를 검색 하는 메서드가 throw <ph id="ph3">&lt;xref:System.ArgumentException?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>Otherwise, the method does not throw an exception, and the invalid sequence is ignored.</source>
          <target state="translated">그렇지 않으면 메서드는 예외를 throw 하지 않는 하 고 잘못 된 시퀀스가 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>For security reasons, your applications are recommended to use this constructor to create an instance of the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> class and turn on error detection by setting <ph id="ph2">`throwOnInvalidBytes`</ph> to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">보안상의 이유로 응용 프로그램은이 생성자의 인스턴스를 만드는 데 좋습니다는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 클래스 및 오류 검색 기능을 설정 하 여 <ph id="ph2">`throwOnInvalidBytes`</ph> 를 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
          <source>The following example demonstrates the behavior of <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, both with error detection enabled and without.</source>
          <target state="translated">다음 예제에서는 동작을 보여 줍니다. <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>, 오류 검색을 사용 하거나 사용 하지 않고 있습니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="F:System.Text.UnicodeEncoding.CharSize">
          <source>Represents the Unicode character size in bytes.</source>
          <target state="translated">유니코드 문자 크기를 바이트 단위로 나타냅니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="F:System.Text.UnicodeEncoding.CharSize">
          <source>This field is a constant.</source>
          <target state="translated">이 필드는 상수입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Text.UnicodeEncoding.CharSize">
          <source>The value of this field is a 32-bit signed constant with a value of 2.</source>
          <target state="translated">이 필드의 값은 값이 2 인 32 비트 부호 있는 상수입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Text.UnicodeEncoding.CharSize">
          <source>The following example demonstrates how to return the value of <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.CharSize&gt;</ph> and display it.</source>
          <target state="translated">다음 예제에서는 값을 반환 하는 방법을 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.CharSize&gt;</ph> 에 표시 합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>The object to compare with the current object.</source>
          <target state="translated">현재 개체와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> is equal to the current <ph id="ph2">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> object.</source>
          <target state="translated">지정한 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>이(가) 현재 <ph id="ph2">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> 개체와 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is an instance of <ph id="ph3">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> and is equal to the current object; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> 인스턴스이고 현재 개체와 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Two <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> objects are considered equal if all of the following conditions are true:</source>
          <target state="translated">두 개의 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체가 다음 조건을 모두 만족 하면 같은 개체로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Both objects use the same byte order (little-endian or big-endian).</source>
          <target state="translated">두 개체가 동일한 바이트 순서 (big endian 또는 little endian)를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Both objects provide the byte order mark, or both do not.</source>
          <target state="translated">두 개체, 바이트 순서 표시를 제공 하거나 둘 다는 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Both objects use the same encoder fallback.</source>
          <target state="translated">두 개체가 동일한 인코더 대체 (fallback)를 사용합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Both objects use the same decoder fallback.</source>
          <target state="translated">두 개체가 동일한 디코더 대체 (fallback)를 사용합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.Equals%2A&gt;</ph> method to test whether the current <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object is equal to a different <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.Equals%2A&gt;</ph> 메서드를 테스트 하는지 여부를 현재 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 다른 개체가 같은지 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.Equals(System.Object)">
          <source>Five <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> objects are created and compared, and the results of the comparisons are displayed.</source>
          <target state="translated">5 개의 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체가 생성 되 고 비교 하 고 비교 결과 표시 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Calculates the number of bytes produced by encoding a set of characters.</source>
          <target state="translated">문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The string that contains the set of characters to encode.</source>
          <target state="translated">인코딩할 문자 집합이 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>Calculates the number of bytes produced by encoding the characters in the specified string.</source>
          <target state="translated">지정한 문자열의 문자를 인코딩하여 생성되는 바이트 수를 계산합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The number of bytes produced by encoding the specified characters.</source>
          <target state="translated">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">필요한 정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 호출 결과 바이트를 저장 하기 위해는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">최대 배열 크기를 계산 하려면 호출는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29&gt;</ph> method.</source>
          <target state="translated">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에) 개발자의 책임 이며 머리말의 바이트 수에서 반환 된 값에 반영 되지는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29&gt;</ph> methods to calculate the maximum and actual number of bytes required to encode a string.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29&gt;</ph> 최대값 및 실제 문자열 인코딩하는 데 필요한 바이트 수를 계산 하는 메서드.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>It also displays the actual number of bytes required to store a byte stream with a byte order mark.</source>
          <target state="translated">또한 실제 바이트 순서 표시가 포함 된 바이트 스트림을 저장 하는 데 필요한 바이트 수가 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="s" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="s" /&gt;</ph>에 잘못된 문자 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>A pointer to the first character to encode.</source>
          <target state="translated">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">인코딩할 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</source>
          <target state="translated">지정한 문자 포인터에서 시작되는 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>The number of bytes produced by encoding the specified characters.</source>
          <target state="translated">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 필요한 호출 결과 바이트를 저장 하기 위해는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">최대 배열 크기를 계산 하려면 호출는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에) 개발자의 책임 이며 머리말의 바이트 수에서 반환 된 값에 반영 되지는 <ph id="ph1">&lt;xref:System.Text.UTF8Encoding.GetByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Error detection is enabled and <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">오류 검색 기능을 사용하고 있으며 <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>에 잘못된 문자 시퀀스가 포함되어 있는 경우</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The character array containing the set of characters to encode.</source>
          <target state="translated">인코딩할 문자 집합이 포함된 문자 배열입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The index of the first character to encode.</source>
          <target state="translated">인코딩할 첫 번째 문자의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">인코딩할 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</source>
          <target state="translated">지정한 문자 배열의 문자 집합을 인코딩할 경우 생성되는 바이트 수를 계산합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The number of bytes produced by encoding the specified characters.</source>
          <target state="translated">지정한 문자를 인코딩할 경우 생성되는 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">필요한 정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">최대 배열 크기를 계산 하려면 호출는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>With error detection enabled, an invalid sequence causes this method to throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색 기능 사용을 잘못 된 시퀀스가 메서드가 throw 하는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method.</source>
          <target state="translated">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에) 개발자의 책임 이며 머리말의 바이트 수에서 반환 된 값에 반영 되지는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The following example populates an array with a Latin uppercase and lowercase characters and calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to determine the number of bytes needed to encode the Latin lowercase characters.</source>
          <target state="translated">다음 예제에서는 배열을 대문자는 라틴으로 및 소문자 및 호출은 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> 메서드 라틴어 소문자 인코딩하는 데 필요한 바이트 수를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>It then displays this information along with the total number of bytes needed if a byte order mark is added.</source>
          <target state="translated">바이트 순서 표시를 추가한 경우 필요한 바이트의 총 수와 함께이 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>It compares this number with the value returned by the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters.</source>
          <target state="translated">반환 된 값이 숫자를 비교 하는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드 라틴어 소문자 인코딩하는 데 필요한 바이트의 최대 수를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The following example populates an array with a combination of Greek and Cyrillic characters and calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to determine the number of bytes needed to encode the Cyrillic characters.</source>
          <target state="translated">다음 예제에서는 그리스어와 키릴 자모 문자 및 호출의 조합으로 배열을 채웁니다는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> 메서드 키릴자모 문자를 인코딩하는 데 필요한 바이트 수를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>It then displays this information along with the total number of bytes needed if a byte order mark is added.</source>
          <target state="translated">바이트 순서 표시를 추가한 경우 필요한 바이트의 총 수와 함께이 정보를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>It compares this number with the value returned by the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.</source>
          <target state="translated">반환 된 값이 숫자를 비교 하는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드 키릴자모 문자를 인코딩하는 데 필요한 바이트의 최대 수를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>에서 올바른 범위를 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>에 잘못된 문자 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Encodes a set of characters into a sequence of bytes.</source>
          <target state="translated">문자 집합을 바이트 시퀀스로 인코딩합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>A pointer to the first character to encode.</source>
          <target state="translated">인코딩할 첫 번째 문자를 가리키는 포인터입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">인코딩할 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>A pointer to the location at which to start writing the resulting sequence of bytes.</source>
          <target state="translated">결과 바이트 시퀀스를 쓰기 시작할 위치를 가리키는 포인터입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">쓸 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</source>
          <target state="translated">지정한 문자 포인터에서 시작하는 문자 집합을 지정한 바이트 포인터에서 시작하여 저장되는 바이트 시퀀스로 인코딩합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The actual number of bytes written at the location indicated by the <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> 매개 변수가 가리키는 위치에 쓴 실제 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> requires to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 필요한 호출 결과 바이트를 저장 하기 위해는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">최대 배열 크기를 계산 하려면 호출는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> 에서 제공 하는 개체는 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> 메서드를 각각.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</source>
          <target state="translated">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에)은 개발자의 책임입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 프리앰블 앞에 추가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>에 잘못된 문자 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> is less than the resulting number of bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph>가 결과 바이트 수보다 작은 경우</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The character array containing the set of characters to encode.</source>
          <target state="translated">인코딩할 문자 집합이 포함된 문자 배열입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index of the first character to encode.</source>
          <target state="translated">인코딩할 첫 번째 문자의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">인코딩할 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The byte array to contain the resulting sequence of bytes.</source>
          <target state="translated">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
          <target state="translated">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Encodes a set of characters from the specified character array into the specified byte array.</source>
          <target state="translated">지정한 문자 배열의 문자 집합을 지정한 바이트 배열로 인코딩합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The actual number of bytes written into <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>에 쓴 실제 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">필요한 정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 호출 결과 바이트를 저장 하기 위해는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">최대 배열 크기를 계산 하려면 호출는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> 에서 제공 되는 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> 메서드 또는 <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> 메서드를 각각.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</source>
          <target state="translated">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에)은 개발자의 책임입니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 프리앰블 앞에 추가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method to encode a range of characters from a <ph id="ph2">&lt;xref:System.String&gt;</ph> and store the encoded bytes in a range of elements in a byte array.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 메서드를 다양 한 문자를 인코딩하는 <ph id="ph2">&lt;xref:System.String&gt;</ph> 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 하 고 있습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> 또는 <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>에서 올바른 범위를 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>의 유효한 인덱스가 아닌 경우</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>에 잘못된 문자 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>의 용량(<ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The string containing the set of characters to encode.</source>
          <target state="translated">인코딩할 문자 집합이 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index of the first character to encode.</source>
          <target state="translated">인코딩할 첫 번째 문자의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">인코딩할 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The byte array to contain the resulting sequence of bytes.</source>
          <target state="translated">결과 바이트 시퀀스를 포함할 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The index at which to start writing the resulting sequence of bytes.</source>
          <target state="translated">결과 바이트 시퀀스를 쓰기 시작할 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Encodes a set of characters from the specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> into the specified byte array.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>의 문자 집합을 지정된 바이트 배열로 인코딩합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The actual number of bytes written into <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>에 쓴 실제 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, you call the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method.</source>
          <target state="translated">필요한 정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 호출 결과 바이트를 저장 하기 위해는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To calculate the maximum array size, you call the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method.</source>
          <target state="translated">최대 배열 크기를 계산 하려면 호출는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> 에서 제공 되는 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> 메서드 또는 <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> 메서드를 각각.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble.</source>
          <target state="translated">스트림 또는 파일로 저장 되 면 인코딩된 바이트는 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림을 접두사로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility.</source>
          <target state="translated">바이트 스트림으로 맨 앞에 프리앰블 삽입 (같은 일련의 파일에 쓸 바이트의 시작 부분에)은 개발자의 책임입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 메서드 인코딩된 바이트 시퀀스의 시작 부분에 프리앰블 앞에 추가 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>The following example demonstrates how to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</source>
          <target state="translated">다음 예제에서는 유니코드 문자 배열에서 요소의 범위를 인코딩하고 인코딩된 바이트를 바이트 배열의 요소 범위에 저장 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> 또는 <ph id="ph3">&lt;paramref name="byteIndex" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="chars" /&gt;</ph>에서 올바른 범위를 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="bytes" /&gt;</ph>의 유효한 인덱스가 아닌 경우</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="s" /&gt;</ph> contains an invalid sequence of characters.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="s" /&gt;</ph>에 잘못된 문자 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> to the end of the array to accommodate the resulting bytes.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>의 용량(<ph id="ph2">&lt;paramref name="byteIndex" /&gt;</ph> ~ 배열 끝)이 부족해서 결과 바이트를 수용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Calculates the number of characters produced by decoding a sequence of bytes.</source>
          <target state="translated">바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>A pointer to the first byte to decode.</source>
          <target state="translated">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">디코딩할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</source>
          <target state="translated">지정한 바이트 포인터에서 시작되는 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The number of characters produced by decoding the specified sequence of bytes.</source>
          <target state="translated">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> requires to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> 결과 문자 응용 프로그램 사용 하 여 저장 하는 데 필요한 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>에 잘못된 바이트 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">디코딩할 첫 번째 바이트의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">디코딩할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</source>
          <target state="translated">지정한 바이트 배열의 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수를 계산합니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The number of characters produced by decoding the specified sequence of bytes.</source>
          <target state="translated">지정한 바이트 시퀀스를 디코딩할 경우 생성되는 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">필요한 정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> 결과 문자를 저장 하기 위해 응용 프로그램에서 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method to return the number of characters produced by decoding a range of elements in a byte array using <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 사용 하는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> 사용 하는 바이트 배열에서 요소의 범위를 디코딩하여 생성 되는 문자 수를 반환 하는 메서드 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>에서 올바른 범위를 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>에 잘못된 바이트 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="T:System.Text.UnicodeEncoding">
          <source>Decodes a sequence of bytes into a set of characters.</source>
          <target state="translated">바이트 시퀀스를 문자 집합으로 디코딩합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>A pointer to the first byte to decode.</source>
          <target state="translated">디코딩할 첫 번째 바이트를 가리키는 포인터입니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">디코딩할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>A pointer to the location at which to start writing the resulting set of characters.</source>
          <target state="translated">결과 문자 집합을 쓰기 시작할 위치를 가리키는 포인터입니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The maximum number of characters to write.</source>
          <target state="translated">쓸 최대 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</source>
          <target state="translated">지정한 바이트 포인터에서 시작하는 바이트 시퀀스를 지정한 문자 포인터에서 시작하여 저장되는 문자 집합으로 디코딩합니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The actual number of characters written at the location indicated by the <ph id="ph1">&lt;paramref name="chars" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> 매개 변수가 가리키는 위치에 쓴 실제 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>To calculate the exact array size that <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> requires to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> 결과 문자 응용 프로그램 사용 하 여 저장 하는 데 필요한 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</source>
          <target state="translated">디코딩할 바이트 범위 (BOM)의 바이트 순서 표시를 포함 하는 경우 인식 BOM이 아닌 형식의 메서드에 의해 반환 된 바이트 배열을 문자 U + FFFE이이 메서드에 의해 반환 되는 문자 배열에 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>You can remove it by calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">호출 하 여 제거할 수는 <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> 에서 제공 하는 개체는 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> 메서드를 각각.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> or <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="charCount" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>에 잘못된 바이트 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> is less than the resulting number of characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph>가 결과 문자 수보다 작은 경우</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">디코딩할 첫 번째 바이트의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">디코딩할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The character array to contain the resulting set of characters.</source>
          <target state="translated">결과 문자 집합을 포함할 문자 배열입니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The index at which to start writing the resulting set of characters.</source>
          <target state="translated">결과 문자 집합을 쓰기 시작할 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Decodes a sequence of bytes from the specified byte array into the specified character array.</source>
          <target state="translated">지정한 바이트 배열의 바이트 시퀀스를 지정한 문자 배열로 디코딩합니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The actual number of characters written into <ph id="ph1">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph>에 쓴 실제 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">필요한 정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> 결과 문자를 저장 하기 위해 응용 프로그램에서 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</source>
          <target state="translated">디코딩할 바이트 범위 (BOM)의 바이트 순서 표시를 포함 하는 경우 인식 BOM이 아닌 형식의 메서드에 의해 반환 된 바이트 배열을 문자 U + FFFE이이 메서드에 의해 반환 되는 문자 배열에 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>You can remove it by calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">호출 하 여 제거할 수는 <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> method or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> 에서 제공 되는 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> 메서드 또는 <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> 메서드를 각각.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> method to decode a range of elements in a byte array and store the result in a character array.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> 메서드는 바이트 배열에서 요소의 범위를 디코딩하고 문자 배열에 결과 저장 합니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> or <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteIndex" /&gt;</ph>, <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> 또는 <ph id="ph3">&lt;paramref name="charIndex" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteindex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteindex" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="byteCount" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>에서 올바른 범위를 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph> is not a valid index in <ph id="ph2">&lt;paramref name="chars" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="chars" /&gt;</ph>의 유효한 인덱스가 아닌 경우</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>에 잘못된 바이트 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="chars" /&gt;</ph> does not have enough capacity from <ph id="ph2">&lt;paramref name="charIndex" /&gt;</ph> to the end of the array to accommodate the resulting characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="chars" /&gt;</ph>의 용량(<ph id="ph2">&lt;paramref name="charIndex" /&gt;</ph> ~ 배열 끝)이 부족해서 결과 문자를 수용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</source>
          <target state="translated">UTF-16으로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 디코더를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</source>
          <target state="translated">UTF-16으로 인코딩된 바이트 시퀀스를 유니코드 문자 시퀀스로 변환하는 <ph id="ph1">&lt;see cref="T:System.Text.Decoder" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Decoder.GetChars%2A?displayProperty=nameWithType&gt;</ph> 메서드 순차 바이트 블록을 유사한 방식으로 문자의 순차 블록 변환는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>However, a <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> maintains state information between calls so it can correctly decode byte sequences that span blocks.</source>
          <target state="translated">그러나 한 <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> 블록으로 확장 되는 바이트 시퀀스를 올바르게 디코딩할 수 있도록 호출 간의 상태 정보를 관리 합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> 또한 데이터 블록의 끝에 후행 바이트를 보존 하 고 다음 디코딩 작업에서 후행 바이트를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> 는 전체 데이터 스트림 하는 대신 데이터 블록을 처리 하기 때문에 네트워크 전송 및 파일 작업에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>If error detection is enabled, that is, the <ph id="ph1">`throwOnInvalidBytes`</ph> parameter of the constructor is set to <ph id="ph2">`true`</ph>, error detection is also enabled in the <ph id="ph3">&lt;xref:System.Text.Decoder&gt;</ph> returned by this method.</source>
          <target state="translated">오류 검색이 사용 됩니다, 즉,는 <ph id="ph1">`throwOnInvalidBytes`</ph> 생성자의 매개 변수 설정 <ph id="ph2">`true`</ph>, 오류 검색이에 사용 되는 <ph id="ph3">&lt;xref:System.Text.Decoder&gt;</ph> 이 메서드에서 반환 합니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</source>
          <target state="translated">오류 검색이 사용 되는 경우 잘못 된 시퀀스가 발생 된 디코더 상태에 정의 되지 않으며 처리가 중지 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetDecoder">
          <source>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</source>
          <target state="translated">다음 예제에서는 인코더 및 디코더를 사용 하 여 바이트 배열에는 문자열을 인코딩하려면 다음 문자 배열로 바이트를 디코딩할을 합니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</source>
          <target state="translated">유니코드 문자 시퀀스를 UTF-16으로 인코딩된 바이트 시퀀스로 변환하는 인코더를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>A <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</source>
          <target state="translated">유니코드 문자 시퀀스를 UTF-16으로 인코딩된 바이트 시퀀스로 변환하는 <ph id="ph1">&lt;see cref="T:System.Text.Encoder" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> method converts sequential blocks of characters into sequential blocks of bytes in a manner similar to the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method of this class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder.GetBytes%2A?displayProperty=nameWithType&gt;</ph> 메서드 문자의 순차 블록 순차 블록의 바이트 유사한 방식으로 변환 된 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 이 클래스의 메서드.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>However, a <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object maintains state information between calls so that it can correctly encode character sequences that span blocks.</source>
          <target state="translated">그러나 한 <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> 블록으로 확장 되는 문자 시퀀스 올바르게 인코딩할 수 있도록 개체 호출 간의 상태 정보를 유지 합니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>The <ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> object also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.Encoder&gt;</ph> 개체도 데이터 블록의 끝에 후행 문자를 보존 하 고 다음 인코딩 작업에 후행 문자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.</source>
          <target state="translated">예를 들어 데이터 블록 짝이 맞지 않는 상위 서로게이트를 마무리할 수 있습니다 및 다음 데이터 블록에 일치 하는 하위 서로게이트 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>Therefore, <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</source>
          <target state="translated">따라서 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> 는 전체 데이터 스트림 하는 대신 데이터 블록을 처리 하기 때문에 네트워크 전송 및 파일 작업에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>If error detection is enabled, that is, the <ph id="ph1">`throwOnInvalidBytes`</ph> parameter of the constructor is set to <ph id="ph2">`true`</ph>, error detection is also enabled in the <ph id="ph3">&lt;xref:System.Text.Encoder&gt;</ph> object returned by this method.</source>
          <target state="translated">오류 검색이 사용 됩니다, 즉,는 <ph id="ph1">`throwOnInvalidBytes`</ph> 생성자의 매개 변수 설정 <ph id="ph2">`true`</ph>, 오류 검색이에 사용 되는 <ph id="ph3">&lt;xref:System.Text.Encoder&gt;</ph> 이 메서드에서 반환 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</source>
          <target state="translated">오류 검색이 사용 되는 잘못 된 시퀀스가 발생 하는 경우 인코더의 상태가 정의 하 고 처리가 중지 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetEncoder">
          <source>The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.</source>
          <target state="translated">다음 예제에서는 인코더 및 디코더를 사용 하 여 바이트 배열에는 문자열을 인코딩하려면 다음 문자 배열로 바이트를 디코딩할을 합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetHashCode">
          <source>Returns the hash code for the current instance.</source>
          <target state="translated">현재 인스턴스의 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetHashCode">
          <source>The hash code for the current <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> 개체의 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The number of characters to encode.</source>
          <target state="translated">인코딩할 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>Calculates the maximum number of bytes produced by encoding the specified number of characters.</source>
          <target state="translated">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수를 계산합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The maximum number of bytes produced by encoding the specified number of characters.</source>
          <target state="translated">지정한 수의 문자를 인코딩할 경우 생성되는 최대 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> to store the resulting bytes, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>.</source>
          <target state="translated">필요한 정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 결과 바이트를 저장 하기 위해 응용 프로그램에서 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>.</source>
          <target state="translated">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> retrieves a worst-case number, including the worst case for the currently selected <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 현재 선택 된 최악의 경우를 포함 하 여 최악의 수를 검색 <ph id="ph2">&lt;xref:System.Text.EncoderFallback&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>If a fallback is chosen with a potentially large string, <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> can return large values.</source>
          <target state="translated">잠재적으로 큰 문자열로 대체를 선택한 경우 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 큰 값을 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>In most cases, this method retrieves reasonable numbers for small strings.</source>
          <target state="translated">대부분의 경우가이 메서드는 작은 문자열에 대해 적합 한 숫자를 검색합니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</source>
          <target state="translated">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>You might also want to consider a different approach using <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">사용 하 여 다른 접근 방식을 고려해 야 할 수도 있습니다 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Text.Encoder.Convert%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> has no relation to <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 관계가 없으며 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>If your application needs a similar function to use with <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>, it should use <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">응용 프로그램을 사용 하면 비슷한 기능이 필요한 경우 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph>를 사용 해야 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">`GetMaxByteCount(N)`</ph> is not necessarily the same value as <ph id="ph2">`N* GetMaxByteCount(1)`</ph>.</source>
          <target state="translated"><ph id="ph1">`GetMaxByteCount(N)`</ph> 와 같은 값은 반드시 <ph id="ph2">`N* GetMaxByteCount(1)`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> method to return the maximum number of bytes required to encode a specified number of characters.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph> 메서드를 지정된 된 수의 문자를 인코딩하는 데 필요한 바이트의 최대 수를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="charCount" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.EncoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">디코딩할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>Calculates the maximum number of characters produced by decoding the specified number of bytes.</source>
          <target state="translated">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수를 계산합니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The maximum number of characters produced by decoding the specified number of bytes.</source>
          <target state="translated">지정한 수의 바이트를 디코딩할 경우 생성되는 최대 문자 수입니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>To calculate the exact array size required by <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> to store the resulting characters, the application uses <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>.</source>
          <target state="translated">필요한 정확한 배열 크기를 계산 하려면 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetChars%2A&gt;</ph> 결과 문자를 저장 하기 위해 응용 프로그램에서 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>To calculate the maximum array size, the application should use <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>.</source>
          <target state="translated">최대 배열 크기를 계산 하는 응용 프로그램 사용 해야 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> method generally allocates less memory, while the <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method generally executes faster.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> 메서드는 일반적으로 적은 메모리를 할당 하는 동안는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 메서드는 일반적으로 더 빠르게 실행 합니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> retrieves a worst-case number, including the worst case for the currently selected <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 현재 선택 된 최악의 경우를 포함 하 여 최악의 수를 검색 <ph id="ph2">&lt;xref:System.Text.DecoderFallback&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>If a fallback is chosen with a potentially large string, <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> retrieves large values.</source>
          <target state="translated">잠재적으로 큰 문자열로 대체를 선택한 경우 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 큰 값을 검색 합니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>In most cases, this method retrieves reasonable numbers for small strings.</source>
          <target state="translated">대부분의 경우가이 메서드는 작은 문자열에 대해 적합 한 숫자를 검색합니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded.</source>
          <target state="translated">큰 문자열에 대 한 매우 큰 버퍼를 사용 하 고 버퍼를 보다 적절 한 크기를 초과 하는 드문 경우에서 오류를 catch 하는 중 하나를 선택 해야 합니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>You might also want to consider a different approach using <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>.</source>
          <target state="translated">사용 하 여 다른 접근 방식을 고려해 야 할 수도 있습니다 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetCharCount%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> has no relation to <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 관계가 없으며 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>If your application needs a similar function to use with <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>, it should use <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>.</source>
          <target state="translated">응용 프로그램을 사용 하면 비슷한 기능이 필요한 경우 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph>를 사용 해야 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">`GetMaxCharCount(N)`</ph> is not necessarily the same value as <ph id="ph2">`N* GetMaxCharCount(1)`</ph>.</source>
          <target state="translated"><ph id="ph1">`GetMaxCharCount(N)`</ph> 와 같은 값은 반드시 <ph id="ph2">`N* GetMaxCharCount(1)`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> method to return the maximum number of characters produced by decoding a specified number of bytes.</source>
          <target state="translated">다음 예제에서는 사용 하는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetMaxCharCount%2A&gt;</ph> 지정된 된 수의 바이트를 디코딩하여 생성 되는 최대 문자 수를 반환 하는 메서드.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="byteCount" /&gt;</ph>가 0보다 작은 경우</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</source>
          <target state="translated">결과 바이트 수가 정수로 반환될 수 있는 최대 수보다 큽니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</source>
          <target state="translated">이 인스턴스의 생성자가 바이트 순서 표시를 요청하는 경우 UTF-16 형식으로 인코딩된 유니코드 바이트 순서 표시를 반환합니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>A byte array containing the Unicode byte order mark, if the <ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> object is configured to supply one.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Text.UnicodeEncoding" /&gt;</ph> 개체가 제공하도록 구성된 경우 유니코드 바이트 순서 표시가 포함된 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Otherwise, this method returns a zero-length byte array.</source>
          <target state="translated">그렇지 않으면 이 메서드는 길이가 0인 바이트 배열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>The <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object can provide a preamble, which is a byte array that can be prefixed to the sequence of bytes resulting from the encoding process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체 인코딩 프로세스에서 발생 하는 바이트 시퀀스에 접두어로 추가 될 수 있는 바이트 배열에는 머리말을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Prefacing a sequence of encoded bytes with a byte order mark (code point U+FEFF) helps the decoder determine the byte order and the transformation format or UTF.</source>
          <target state="translated">바이트 순서와 변형 형식 또는 u t F를 결정 하는 디코더를 통해 바이트 순서 표시 (코드 포인트 U + FEFF)로 인코딩된 바이트 시퀀스를 앞 있습니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):</source>
          <target state="translated">유니코드 바이트 순서 표시 (BOM) (16 진수)에서 다음과 같이 serialize 됩니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Big endian byte order: FE FF</source>
          <target state="translated">Big endian 바이트 순서: FE FF</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Little endian byte order: FF FE</source>
          <target state="translated">Little endian 바이트 순서: FF FE</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object whose <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method returns a valid BOM in the following ways:</source>
          <target state="translated">인스턴스화할 수 있습니다는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> 메서드는 다음과 같은 방법으로 유효한 BOM을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">검색 하 여는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 에서 반환 된 개체는 <ph id="ph2">&lt;xref:System.Text.Encoding.Unicode%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Text.Encoding.BigEndianUnicode%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>By calling the parameterless <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor&gt;</ph> constructor to instantiate a <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> object.</source>
          <target state="translated">매개 변수가 없는 호출 하 여 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.%23ctor&gt;</ph> 생성자를 인스턴스화하는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>By supplying <ph id="ph1">`true`</ph> as the value of the <ph id="ph2">`byteOrderMark`</ph> argument to the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29&gt;</ph> or <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> constructors.</source>
          <target state="translated">제공 하 여 <ph id="ph1">`true`</ph> 의 값으로는 <ph id="ph2">`byteOrderMark`</ph> 인수에는 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>We recommended that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost a reference to their encoding, such as untagged or improperly tagged web data or random text files stored when a business did not have international concerns.</source>
          <target state="translated">BOM을 사용 하 여, 그렇지 않으면 손실 된 참조를 해당 인코딩 등 태그가 지정 되지 않은 잘못 태그가 지정 된 파일에 대 한 인코딩을의 특정 id에 거의 제공 하므로 웹 데이터 나 임의 텍스트 파일만 때 비즈니스 없는 것이 좋습니다. 국가별 고려 사항입니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Often user problems might be avoided if data is consistently and properly tagged.</source>
          <target state="translated">데이터는 일관 되 고 적절히 태그가 지정 종종 사용자 문제를 방지할 수 있는 합니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>For standards that provide an encoding type, a BOM is somewhat redundant.</source>
          <target state="translated">인코딩 형식을 제공 하는 표준, BOM은 중복 되는 부분이입니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>However, it can be used to help a server send the correct encoding header.</source>
          <target state="translated">그러나 올바른 인코딩 헤더를 보낼 서버를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Alternatively, it can be used as a fallback in case the encoding is otherwise lost.</source>
          <target state="translated">또는 사용할 수 있습니다는 대체 방식으로 인코딩이 그렇지 않은 경우 손실 된 경우.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>There are some disadvantages to using a BOM.</source>
          <target state="translated">BOM을 사용 하 여 몇 가지 단점이 있습니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>For example, knowing how to limit the database fields that use a BOM can be difficult.</source>
          <target state="translated">예를 들어 BOM을 사용 하는 데이터베이스 필드를 제한 하는 방법을 알아 두어야 어려울 수 있습니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data.</source>
          <target state="translated">파일의 연결 문제가 될 수 또한 예를 들어 파일을 병합 될 때 데이터 중간에 불필요 한 문자가 포함 될 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>In spite of the few disadvantages, however, the use of a BOM is highly recommended.</source>
          <target state="translated">그러나 몇 가지 단점 있음에도 불구 하 고 BOM 사용 하는 가장 좋습니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>To ensure that the encoded bytes are decoded properly, you should prefix the beginning of a stream of encoded bytes with a preamble.</source>
          <target state="translated">인코딩된 바이트 제대로 디코딩을 보장 하려면 프리앰블을 사용 하 여 인코딩된 바이트 스트림의 처음을 붙여야 합니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Note that the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetBytes%2A&gt;</ph> 메서드를 인코딩된 바이트 시퀀스로 BOM 앞에 추가 되지 않습니다; 개발자의 책임은 적절 한 바이트 스트림의 시작 부분에 BOM을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method to retrieve the Unicode byte order mark in big endian or little endian byte order for an instance of a <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 사용 하는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> big endian 또는 little endian 바이트 순서의 인스턴스에 대 한 유니코드 바이트 순서 표시를 검색 하는 메서드는 <ph id="ph2">&lt;xref:System.Text.UnicodeEncoding&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>The following example instantiates two <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> objects, the first of which does not provide a BOM, and the second of which does.</source>
          <target state="translated">다음 예제에서는 두 개를 인스턴스화하고 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding&gt;</ph> 개체는 첫 번째 BOM을 및는 못합니다. 두 번째 제공 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method to write the BOM to a file before writing a Unicode-encoded string.</source>
          <target state="translated">그런 다음 호출 하는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> 메서드를 유니코드로 인코딩된 문자열을 작성 하기 전에 파일에 BOM을 씁니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>As the console output from the example shows, the file that saves the bytes from the second encoder has three more bytes than the first.</source>
          <target state="translated">이 예제에서 콘솔 출력에서 볼 수 있듯이 두 번째 인코더에서 바이트를 저장 하는 파일에 첫 번째 보다 더 많은 바이트를 3 개 있습니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>You can also compare the files by using the <ph id="ph1">`fc`</ph> command in a console window, or you can inspect the files in a text editor that includes a Hex View mode.</source>
          <target state="translated">사용 하 여 파일을 비교할 수도 있습니다는 <ph id="ph1">`fc`</ph> 콘솔 창에 명령 16 진수 보기 모드를 포함 하는 텍스트 편집기에서 파일을 검사할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetPreamble">
          <source>Note that when the file is opened in an editor that supports UTF-16 encoding, the BOM is not displayed.</source>
          <target state="translated">Note utf-16 인코딩을 지 원하는 편집기에서의 파일을 열면 BOM이 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array containing the sequence of bytes to decode.</source>
          <target state="translated">디코딩할 바이트 시퀀스를 포함하는 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the first byte to decode.</source>
          <target state="translated">디코딩할 첫 번째 바이트의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to decode.</source>
          <target state="translated">디코딩할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Decodes a range of bytes from a byte array into a string.</source>
          <target state="translated">바이트 배열의 바이트 범위를 문자열로 디코딩합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object containing the results of decoding the specified sequence of bytes.</source>
          <target state="translated">지정된 바이트 시퀀스의 디코딩 결과가 포함된 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>With error detection, an invalid sequence causes this method to throw a <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">오류 검색에 잘못 된 시퀀스 발생 시키려면이 메서드는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Without error detection, invalid sequences are ignored, and no exception is thrown.</source>
          <target state="translated">오류 검색 없이 잘못 된 시퀀스는 무시 되 고 예외가 throw 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method.</source>
          <target state="translated">디코딩할 바이트 범위 (BOM)의 바이트 순서 표시를 포함 하는 경우 인식 BOM이 아닌 형식의 메서드에 의해 반환 된 바이트 배열을 문자 U + FFFE이이 메서드에 의해 반환 되는 문자 배열에 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>You can remove it by calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">호출 하 여 제거할 수는 <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Data to be converted, such as data read from a stream, might be available only in sequential blocks.</source>
          <target state="translated">데이터를 변환할 수는 예: 스트림에서 읽은 데이터 순차 블록 에서만에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> or the <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> object provided by the <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> or the <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> method, respectively.</source>
          <target state="translated">이 경우 응용 프로그램 데이터의 양이 너무 많아 작은 블록으로 나눌 경우 사용할지 또는 <ph id="ph1">&lt;xref:System.Text.Decoder&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Text.Encoder&gt;</ph> 에서 제공 하는 개체는 <ph id="ph3">&lt;xref:System.Text.UnicodeEncoding.GetDecoder%2A&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Text.UnicodeEncoding.GetEncoder%2A&gt;</ph> 메서드를 각각.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The following example initializes an array by calling the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM).</source>
          <target state="translated">다음 예제를 호출 하 여 배열을 초기화는 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetByteCount%2A&gt;</ph> 메서드 정확 하 게 바이트 인코딩된 문자열 및 바이트 순서 표시 (BOM)의 크기를 추가한 다음에 대 한 필요한 지를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The example then calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> method to store the BOM to the array before calling the <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> method to store the encoded bytes to the array.</source>
          <target state="translated">이 예에서는 다음 호출에서 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetPreamble%2A&gt;</ph> 메서드를 호출 하기 전에 배열에 BOM을 저장할는 <ph id="ph2">&lt;xref:System.Text.Encoding.GetBytes%2A&gt;</ph> 메서드를 인코딩된 바이트 배열에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>The example then calls the <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetString%2A&gt;</ph> method to decode the string.</source>
          <target state="translated">이 예에서는 다음 호출에서 <ph id="ph1">&lt;xref:System.Text.UnicodeEncoding.GetString%2A&gt;</ph> 문자열을 디코딩하 메서드.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Note that in this case the decoded string differs from the original string, since it begins with a 16-bit byte order mark U+FFFD.</source>
          <target state="translated">이 경우 디코딩된 문자열와 것 원래 문자열에서 U + FFFD 16 비트 바이트 순서 표시로 시작 하는 이후 note 합니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".</source>
          <target state="translated">즉, 두 문자열이 것으로 비교는 출력 문자열을 사용 하는 경우 BOM 대체 문자로 표시 됩니다 "?"입니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>To remove the BOM at the beginning of the string, you can call the <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">문자열의 시작 부분에 BOM을 제거 하려면 호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> (<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>(<ph id="ph3">&lt;see langword="Nothing" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> do not denote a valid range in <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="count" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="bytes" /&gt;</ph>에서 올바른 범위를 나타내지 않습니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>Error detection is enabled, and <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> contains an invalid sequence of bytes.</source>
          <target state="translated">오류 검색이 사용되고 <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph>에 잘못된 바이트 시퀀스를 포함합니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>A fallback occurred (see <bpt id="p1">[</bpt>Character Encoding in the .NET Framework<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)</source>
          <target state="translated">대체가 발생했습니다(자세한 설명은 <bpt id="p1">[</bpt>.NET Framework의 문자 인코딩<ept id="p1">](~/docs/standard/base-types/character-encoding.md)</ept> 참조).</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source>-and-</source>
          <target state="translated">및</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph> is set to <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Text.Encoding.DecoderFallback" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Text.DecoderExceptionFallback" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>