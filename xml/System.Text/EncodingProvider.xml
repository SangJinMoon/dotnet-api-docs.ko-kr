<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="213b813ec5e5a38a3816aedc55e2d6e2e5a7636c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30530297" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>인코딩 공급자에 대한 기본 클래스를 제공하며, 이는 특정 플랫폼에서 사용할 수 없는 인코딩을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 인코딩 공급자에는 특정 대상 플랫폼에서 사용할 수 없는 인코딩을 제공 합니다.  
  
 Windows 바탕 화면에서.NET Framework는 많은 수의 문자 인코딩 및 코드 페이지를 지원합니다. 호출 하 여 Windows 바탕 화면에서.NET Framework에서 사용할 수 있는 인코딩의 전체 목록을 가져올 수 있습니다는 <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> 메서드. .NET core 반면에 기본적으로만 다음 인코딩을 지원 합니다.  
  
-   ASCII (코드 페이지 20127)에서 반환 되는 <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> 속성입니다.  
  
-   Iso-8859-1 (코드 페이지 28591).  
  
-   U t F-7 (코드 페이지 65000)에서 반환 되는 <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> 속성입니다.  
  
-   U t F-8 (코드 페이지 65001)에서 반환 되는 <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> 속성입니다.  
  
-   U t F-16과 u t F-16LE (코드 페이지 1200)에서 반환 되는 <xref:System.Text.Encoding.Unicode%2A> 속성입니다.  
  
-   U t F-16BE (코드 페이지 1201)를 호출 하 여 인스턴스화된는 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> 또는 <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> 생성자는 `bigEndian` 값 `true`합니다.  
  
-   U t F-32와 u t F-32LE (코드 페이지 12000)에서 반환 되는 <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> 속성입니다.  
  
-   U t F-32BE (코드 페이지 12001)를 호출 하 여 인스턴스화된는 <xref:System.Text.UTF32Encoding> 변수가 있는 생성자는 `bigEndian` 의 값을 제공 하 고 매개 변수 `true` 메서드 호출에서 합니다.  
  
 .NET Framework 4.6부터 <xref:System.Text.EncodingProvider> 사용할 수 없는 그렇지 않은 경우 호출 하는 기본 클래스는.NET Framework에 사용할 수 있는 인코딩. 이 단계는 다음과 같습니다.  
  
1.  서브 클래스를 정의 <xref:System.Text.EncodingProvider> 두 추상을 재정의 하는 <xref:System.Text.EncodingProvider.GetEncoding%2A> 오버 로드를 <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> 및 <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>합니다. 이러한 오버 로드는 그렇지 않으면 지원 되지 않는 인코딩 코드 페이지 식별자와 이름을 반환 합니다. 경우 인코딩을 하는 기본값을 반환할 수도 있습니다는 <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> 인수가 0 여 메서드를 호출 합니다.  
  
2.  선택적으로 재정의할 수 있습니다 가상 <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> 및 <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> 메서드. 대부분의 경우에서이 하지 않으므로 필요에 따라 기본 클래스는 기본 구현을 제공 합니다.  
  
3.  전달 된 <xref:System.Text.EncodingProvider> 인스턴스를 <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> 제공한 인코딩은 만드는 메서드와 알림이 <xref:System.Text.EncodingProvider> 공용 언어 런타임에 사용할 수 있는 개체입니다.  
  
4.  호출 프로그램 <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> 인코딩을 검색 하는 오버 로드 합니다. <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> 해당 메서드를 호출 합니다 <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> 요청한 인코딩의 제공할 수 있는지 여부를 확인 하려면.  
  
 하나의 정적 속성을 제공 하는.NET Framework 클래스 라이브러리 <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>를 반환 하는 <xref:System.Text.EncodingProvider> 인코딩 중 일부만 사용할 수 있는 데스크톱.NET Framework 클래스 라이브러리에서를 사용할 수 있도록 개체 [!INCLUDE[net_core](~/includes/net-core-md.md)] 응용 프로그램입니다. 파생 될 수 또한는 <xref:System.Text.EncodingProvider> 클래스 직접 인코딩을 사용할 수 있도록 합니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Text.EncodingProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>인코딩을 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">요청한 인코딩의 코드 페이지 식별자입니다.</param>
        <summary>지정한 코드 페이지 식별자와 관련된 인코딩을 반환합니다.</summary>
        <returns>지정된 코드 페이지와 연결된 인코딩이거나 이 <see cref="T:System.Text.EncodingProvider" />가 <paramref name="codepage" />에 해당하는 올바른 인코딩을 반환할 수 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>상속자 참고 사항

재정의 [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) 인코딩을 반환 하는 메서드 또는 인코딩에서 지 원하는 프로그램 <xref:System.Text.EncodingProvider> 하위 클래스입니다. 사용자 코드를 호출 하 여 인코딩을 검색 하려고 할 때의 [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) 메서드, 메서드에 전달는 `codepage` 식별자는 올바른 인코딩을 하나 반환 될 때까지 모든 등록 된 인코딩 공급자입니다. 올바른 인코딩을 none을 반환 하는 경우는 [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) 메서드는 코드 페이지 식별자가 캐시 된 인코딩이 검색 하려고 `codepage`합니다. 이 인해 경우 `codepage` 을 지 원하는 메서드를 반환 해야 하는 인코딩 코드 페이지 식별자가 아닙니다 `null`; 예외를 throw 하지 해야 합니다.
        
경우에 기본 코드 페이지를 반환할 수도 있습니다는의 값은 `codepage` 인수는 0입니다.

## <a name="notes-to-callers"></a>호출자 참고 사항
        
이 메서드는 [Encoding.GetEncoding(Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) 메서드. 하지 사용자 코드에서 직접 호출 해야 합니다.

        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> 인코딩을 반환 하는 메서드 또는 인코딩에서 지 원하는 프로그램 <see cref="T:System.Text.EncodingProvider" /> 하위 클래스입니다. 사용자 코드를 호출 하 여 인코딩을 검색 하려고 할 때의 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 메서드, 메서드에 전달는 <paramref name="codepage" /> 식별자는 올바른 인코딩을 하나 반환 될 때까지 모든 등록 된 인코딩 공급자입니다. 올바른 인코딩을 none을 반환 하는 경우는 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 메서드는 코드 페이지 식별자가 캐시 된 인코딩이 검색 하려고 <paramref name="codepage" />합니다. 이 인해 경우 <paramref name="codepage" /> 을 지 원하는 메서드를 반환 해야 하는 인코딩 코드 페이지 식별자가 아닙니다 <see langword="null" />; 예외를 throw 하지 해야 합니다.</para>
        </block>
        <block subset="none" type="usage">
          <para>이 메서드는 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 메서드. 하지 사용자 코드에서 직접 호출 해야 합니다.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">요청한 인코딩의 이름입니다.</param>
        <summary>지정된 이름의 인코딩을 반환합니다.</summary>
        <returns>지정된 이름과 연결된 인코딩이거나 이 <see cref="T:System.Text.EncodingProvider" />가 <paramref name="name" />에 해당하는 올바른 인코딩을 반환할 수 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>상속자 참고 사항 
                  
재정의 [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) 인코딩을 반환 하는 메서드 또는 인코딩에서 지 원하는 프로그램 <xref:System.Text.EncodingProvider> 하위 클래스입니다. 사용자 코드를 호출 하 여 인코딩을 검색 하려고 할 때의 [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) 메서드, 메서드에 전달는 `name` 인수는 올바른 인코딩을 하나 반환 될 때까지 모든 등록 된 인코딩 공급자입니다. 올바른 인코딩을 none을 반환 하는 경우는 [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) 메서드 이름이 캐시 된 인코딩이 검색 하려고 `name`합니다. 이 인해 경우 `name` 을 지 원하는 메서드를 반환 해야 하는 인코딩 이름이 아닙니다 `null`합니다. 메서드는 예외를 throw 해야 하는 유일한 경우는 경우 `name` 은 `null`합니다.

## <a name="notes-to-callers"></a>호출자 참고 사항

이 메서드는 [Encoding.GetEncoding(String)](<xref:System.Text.Encoding.GetEncoding(System.String)>) 메서드. 하지 사용자 코드에서 직접 호출 해야 합니다.
        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> 인코딩을 반환 하는 메서드 또는 인코딩에서 지 원하는 프로그램 <see cref="T:System.Text.EncodingProvider" /> 하위 클래스입니다. 사용자 코드를 호출 하 여 인코딩을 검색 하려고 할 때의 <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> 메서드, 메서드에 전달는 <paramref name="name" /> 인수는 올바른 인코딩을 하나 반환 될 때까지 모든 등록 된 인코딩 공급자입니다. 올바른 인코딩을 none을 반환 하는 경우는 <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> 메서드 이름이 캐시 된 인코딩이 검색 하려고 <paramref name="name" />합니다. 이 인해 경우 <paramref name="name" /> 을 지 원하는 메서드를 반환 해야 하는 인코딩 이름이 아닙니다 <see langword="null" />합니다. 메서드는 예외를 throw 해야 하는 유일한 경우는 경우 <paramref name="name" /> 은 <see langword="null" />합니다.</para>
        </block>
        <block subset="none" type="usage">
          <para>이 메서드는 <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> 메서드. 하지 사용자 코드에서 직접 호출 해야 합니다.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">요청한 인코딩의 코드 페이지 식별자입니다.</param>
        <param name="encoderFallback">이 인코딩으로 문자를 인코딩할 수 없는 경우 오류 처리 프로시저를 제공하는 개체입니다.</param>
        <param name="decoderFallback">이 인코딩으로 바이트 시퀀스를 디코딩할 수 없는 경우 오류 처리 프로시저를 제공하는 개체입니다.</param>
        <summary>지정한 코드 페이지 식별자와 관련된 인코딩을 반환합니다. 매개 변수는 인코딩할 수 없는 문자 및 디코딩할 수 없는 바이트 시퀀스에 대한 오류 처리기를 지정합니다.</summary>
        <returns>지정된 코드 페이지와 연결된 인코딩이거나 이 <see cref="T:System.Text.EncodingProvider" />가 <paramref name="codepage" />에 해당하는 올바른 인코딩을 반환할 수 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback` 및 `decoderFallback` 매개 변수는 인코더를 바이트 시퀀스로 문자를 변환할 수 없습니다 또는 디코더는 문자를 바이트 시퀀스로 변환할 수 없습니다는 사용 하는 대체 (fallback) 전략을 정의 하는 개체입니다. .NET Framework는 다음과 같은 대체 메커니즘을 제공합니다.  
  
-   예외 대체 (fallback)입니다. 경우는 `encoderFallback` 인수의 인스턴스가 <xref:System.Text.EncoderExceptionFallback>, 또는 `decoderExceptionFallback` 인수의 인스턴스가 <xref:System.Text.DecoderExceptionFallback>, 인코딩 방법 문자를 인코딩할 수 없는 경우 바이트 디코딩 메서드가 예외를 throw 하는 경우 예외를 throw 시퀀스를 디코딩할 수 없습니다.  
  
-   교체 대체 (fallback)입니다. 경우는 `encoderFallback` 인수의 인스턴스가 <xref:System.Text.EncoderReplacementFallback>, 또는 `decoderExceptionFallback` 인수의 인스턴스가 <xref:System.Text.DecoderReplacementFallback>, 인코딩 및 디코딩 메서드 인코딩할 수 없는 문자에 대 한 대체 문자열로 바꾸는 및 바이트 시퀀스 수 없습니다 디코딩됩니다. 대체 문자는 기본 생성자를 호출 하 여 교체 대체 (fallback) 개체를 인스턴스화할 경우는 "?"입니다. 호출 하는 경우는 <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 또는 <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 생성자, 대체 문자열을 지정할 수 있습니다.  
  
-   최적된 대체 (fallback)입니다. 파생 될 수는 <xref:System.Text.EncoderFallback> 또는 <xref:System.Text.DecoderFallback> 최적 맞춤된 대체 메커니즘을 구현 하는 클래스입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>이 메서드를 호출 구현을 사용 하기 때문에 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> 메서드를 않아도를 재정의할 수 있습니다. 사용자 코드를 호출 하 여 인코딩을 검색 하려고 할 때의 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 메서드, 메서드에 전달는 <paramref name="codepage" /> 식별자는 올바른 인코딩을 하나 반환 될 때까지 모든 등록 된 인코딩 공급자입니다. 올바른 인코딩을 none을 반환 하는 경우는 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 메서드는 코드 페이지 식별자가 캐시 된 인코딩이 검색 하려고 <paramref name="codepage" />합니다. 이 인해 재정의 하도록 선택 하는 경우는 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 메서드를 재정의 반환 하도록 <see langword="null" /> 경우 <paramref name="codepage" /> 인코딩을의 코드 페이지 식별자가 아닙니다 지 원하는 않으면 예외를 throw 하지 해야 합니다.</para>
        </block>
        <block subset="none" type="usage">
          <para>이 메서드는 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 메서드. 하지 사용자 코드에서 직접 호출 해야 합니다.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">기본 설정 인코딩의 이름입니다.</param>
        <param name="encoderFallback">이 인코딩으로 문자를 인코딩할 수 없는 경우 오류 처리 프로시저를 제공하는 개체입니다.</param>
        <param name="decoderFallback">현재 인코딩으로 바이트 시퀀스를 디코딩할 수 없는 경우 오류 처리 프로시저를 제공하는 개체입니다.</param>
        <summary>지정한 이름과 연결된 인코딩을 반환합니다. 매개 변수는 인코딩할 수 없는 문자 및 디코딩할 수 없는 바이트 시퀀스에 대한 오류 처리기를 지정합니다.</summary>
        <returns>지정된 이름과 연결된 인코딩이거나 이 <see cref="T:System.Text.EncodingProvider" />가 <paramref name="name" />에 해당하는 올바른 인코딩을 반환할 수 없는 경우 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `encoderFallback` 및 `decoderFallback` 매개 변수는 인코더를 바이트 시퀀스로 문자를 변환할 수 없습니다 또는 디코더는 문자를 바이트 시퀀스로 변환할 수 없습니다는 사용 하는 대체 (fallback) 전략을 정의 하는 개체입니다. .NET Framework는 다음과 같은 대체 메커니즘을 제공합니다.  
  
-   예외 대체 (fallback)입니다. 경우는 `encoderFallback` 인수의 인스턴스가 <xref:System.Text.EncoderExceptionFallback>, 또는 `decoderExceptionFallback` 인수의 인스턴스가 <xref:System.Text.DecoderExceptionFallback>, 인코딩 방법 문자를 인코딩할 수 없는 경우 바이트 디코딩 메서드가 예외를 throw 하는 경우 예외를 throw 시퀀스를 디코딩할 수 없습니다.  
  
-   교체 대체 (fallback)입니다. 경우는 `encoderFallback` 인수의 인스턴스가 <xref:System.Text.EncoderReplacementFallback>, 또는 `decoderExceptionFallback` 인수의 인스턴스가 <xref:System.Text.DecoderReplacementFallback>, 인코딩 및 디코딩 메서드 인코딩할 수 없는 문자에 대 한 대체 문자열로 바꾸는 및 바이트 시퀀스 수 없습니다 디코딩됩니다. 대체 문자는 기본 생성자를 호출 하 여 교체 대체 (fallback) 개체를 인스턴스화할 경우는 "?"입니다. 호출 하는 경우는 <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 또는 <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> 생성자, 대체 문자열을 지정할 수 있습니다.  
  
-   최적된 대체 (fallback)입니다. 파생 될 수는 <xref:System.Text.EncoderFallback> 또는 <xref:System.Text.DecoderFallback> 최적 맞춤된 대체 메커니즘을 구현 하는 클래스입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>이 메서드를 호출 구현을 사용 하기 때문에 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> 메서드를 않아도를 재정의할 수 있습니다. 사용자 코드를 호출 하 여 인코딩을 검색 하려고 할 때의 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 메서드, 메서드에 전달는 <paramref name="codepage" /> 식별자는 올바른 인코딩을 하나 반환 될 때까지 모든 등록 된 인코딩 공급자입니다. 올바른 인코딩을 none을 반환 하는 경우는 <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> 메서드는 코드 페이지 식별자가 캐시 된 인코딩이 검색 하려고 <paramref name="codepage" />합니다. 이 인해 재정의 하도록 선택 하는 경우는 <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 메서드를 재정의 반환 하도록 <see langword="null" /> 경우 <paramref name="codepage" /> 인코딩을의 코드 페이지 식별자가 아닙니다 지 원하는 않으면 예외를 throw 하지 해야 합니다.</para>
        </block>
        <block subset="none" type="usage">
          <para>이 메서드는 <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> 메서드. 하지 사용자 코드에서 직접 호출 해야 합니다.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>