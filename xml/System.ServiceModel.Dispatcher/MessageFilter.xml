<Type Name="MessageFilter" FullName="System.ServiceModel.Dispatcher.MessageFilter">
  <TypeSignature Language="C#" Value="public abstract class MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageFilter abstract" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7bae2-101">메시지를 쿼리하는 데 사용되는 다양한 필터 클래스에 대한 <see langword="abstract" /> 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-101"><see langword="abstract" /> base class for different classes of filters used to query messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bae2-102"><xref:System.ServiceModel.Dispatcher.MessageFilter>는 메시지 검사에 사용할 기준을 지정하기 위해 개발자가 구현하는 `abstract` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-102"><xref:System.ServiceModel.Dispatcher.MessageFilter> is an `abstract` class that developers implement in order to specify the criteria to use for inspecting messages.</span></span> <span data-ttu-id="7bae2-103">일반적으로 필터는 끝점 응용 프로그램에서 일부 메시지 부분에 대한 검사를 기반으로 메시지에 대해 수행할 작업을 결정하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-103">Typically, filters are used by an endpoint application to determine what to do with a message based on an examination of some part of the message.</span></span> <span data-ttu-id="7bae2-104">예를 들어, 큐 프로세스에서는 XPath 1.0 쿼리를 사용하여 알려진 헤더의 우선 순위 요소를 검사함으로써 메시지를 큐의 앞으로 이동할지 여부를 결정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-104">A queuing process, for example, can use an XPath 1.0 query to check the priority element of a known header to determine whether to move a message to the front of the queue.</span></span>  
  
 <span data-ttu-id="7bae2-105">필터는 <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>을 구현하는 필터 테이블에 저장됩니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-105">Filters are stored in a filter table that implements <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>.</span></span> <span data-ttu-id="7bae2-106">테이블의 각 필터는 메시지가 필터와 일치할 경우에 수행할 작업을 나타내는 데 사용할 수 있는 지정된 필터 데이터에 연결됩니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-106">Each filter in the table is associated with specified filter data that can be used to indicate what actions to take if a message matches the filter.</span></span> <span data-ttu-id="7bae2-107"><xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> 메서드는 메시지가 필터를 충족하는지 확인하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-107">The <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> methods are used to determine if a message satisfies a filter.</span></span>  
  
 <span data-ttu-id="7bae2-108">필터 테이블에서는 변경 여부를 확인할 수 없으므로 필터를 만든 후에는 필터에 사용되는 조건을 변경할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-108">The criteria used by a filter cannot be changed once the filter is constructed because the filter tables have no way to detect a change.</span></span> <span data-ttu-id="7bae2-109">필터 조건을 수정하려면 새 필터를 만든 다음 기존 필터를 삭제해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-109">The only way to modify the criteria of a filter is to construct a new one and delete the existing filter.</span></span>  
  
 <span data-ttu-id="7bae2-110">다음 클래스는 `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter> 클래스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-110">The following classes implement the `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter> class:</span></span>  
  
-   <span data-ttu-id="7bae2-111"><xref:System.ServiceModel.Dispatcher.XPathMessageFilter> - XPath 1.0 식을 사용하여 일치 조건을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-111"><xref:System.ServiceModel.Dispatcher.XPathMessageFilter> uses an XPath 1.0 expression to specify the criteria for a match.</span></span>  
  
-   <span data-ttu-id="7bae2-112"><xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> - 모든 메시지와 일치합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-112"><xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> matches all messages.</span></span>  
  
-   <span data-ttu-id="7bae2-113"><xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> - 어떤 메시지와도 일치하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-113"><xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> matches none of the messages.</span></span>  
  
-   <span data-ttu-id="7bae2-114"><xref:System.ServiceModel.Dispatcher.ActionMessageFilter> - 메시지 동작이 지정된 동작 집합 중 하나인지 여부를 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-114"><xref:System.ServiceModel.Dispatcher.ActionMessageFilter> tests whether the action of a message is one of a specified set of actions.</span></span>  
  
-   <span data-ttu-id="7bae2-115"><xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> - 메시지가 지정된 끝점 주소를 충족하는지 여부를 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-115"><xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> tests whether a message satisfies a specified endpoint address.</span></span>  
  
 <span data-ttu-id="7bae2-116"><xref:System.ServiceModel.Channels.ChannelListenerBase%601> - 큐에 없는 수신기를 작성하는 데 사용할 수 있는 `abstract` 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-116"><xref:System.ServiceModel.Channels.ChannelListenerBase%601> is an `abstract` base class that you can use for writing non-queuing listeners.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7bae2-117">파생 클래스에서 호출되는 경우 <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-117">When called in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bae2-118">이 생성자는 <xref:System.ServiceModel.Dispatcher.MessageFilter>에서 파생된 필터만 인스턴스화될 수 있도록 보호됩니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-118">The constructor is protected so that only filters that derive from <xref:System.ServiceModel.Dispatcher.MessageFilter> can be instantiated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal virtual System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; virtual System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData"><span data-ttu-id="7bae2-119">테이블에서 필터와 연결된 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-119">Data associated with the filters in the table.</span></span></typeparam>
        <summary><span data-ttu-id="7bae2-120">지정된 유형의 데이터가 연결된 필터에 대한 필터 테이블을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-120">Creates a filter table for a filter that has a specified type of data associated with it.</span></span></summary>
        <returns><span data-ttu-id="7bae2-121"><see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" />에 연결된 필터를 추가할 수 있는 <paramref name="FilterData" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-121">An <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> object to which filters associated with <paramref name="FilterData" /> can be added.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bae2-122">이 메서드는 <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>에서 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-122">This method is intended to be called by <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>.</span></span> <span data-ttu-id="7bae2-123">사용자는 필터 테이블에 대한 생성자를 호출하여 필터 테이블을 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-123">Users should create a filter table by calling a constructor for the filter table.</span></span> <span data-ttu-id="7bae2-124">이 메서드의 기본 구현에서는 각 필터의 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> 메서드를 순차적으로 호출하는 필터 테이블을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-124">The default implementation of this method returns a filter table that calls the <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> method of each filter sequentially.</span></span> <span data-ttu-id="7bae2-125">필터를 구현할 때 사용자 지정 필터 테이블을 연결하도록 이 메서드를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-125">Override this method to associate a custom filter table when implementing a filter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7bae2-126">파생 클래스에서 재정의된 경우 메시지 또는 버퍼링된 메시지가 필터 기준을 충족하는지 여부를 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-126">When overridden in a derived class, tests whether a message or a buffered message satisfies the criteria of a filter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bae2-127">두 오버로드 간의 차이점은 하나는 <xref:System.ServiceModel.Channels.Message> 매개 변수를 사용하고 본문을 검사할 수 없으며,</span><span class="sxs-lookup"><span data-stu-id="7bae2-127">The difference between the two overloads is that one takes a <xref:System.ServiceModel.Channels.Message> parameter and is not permitted to examine the body.</span></span> <span data-ttu-id="7bae2-128">다른 하나는 <xref:System.ServiceModel.Channels.MessageBuffer> 매개 변수를 사용하고 메시지의 모든 부분을 검사할 수 있다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-128">The other takes a <xref:System.ServiceModel.Channels.MessageBuffer> parameter and can examine any part of the message.</span></span> <span data-ttu-id="7bae2-129">메시지 헤더는 자동으로 버퍼링되므로 별도의 사용 없이도 필터를 통해 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-129">Message headers are automatically buffered and can be inspected by a filter without being consumed.</span></span> <span data-ttu-id="7bae2-130">그러나 버퍼링되지 않은 메시지 본문이 쿼리에 사용되면 그 내용이 제거되므로 필터를 사용하여 본문을 검사하려면 전체 메시지를 버퍼링해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-130">But if the body is to be inspected by a filter, then the entire message must be buffered because an unbuffered message body can be consumed by a query and its contents destroyed.</span></span>  
  
 <span data-ttu-id="7bae2-131">본문을 검사할 필요가 없으면 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-131">Use <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> if examination of the body is not required.</span></span> <span data-ttu-id="7bae2-132">메시지 본문을 검사해야 하면 <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A>를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-132">Use <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> if examination of the message body is required.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="7bae2-133"><see langword="Null" /> 메시지는 유효하지 않으므로 <see cref="T:System.ArgumentNullException" />이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-133"><see langword="Null" /> messages are invalid, and should cause an <see cref="T:System.ArgumentNullException" /> to be thrown.</span></span></para>
        </block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="7bae2-134">테스트할 <see cref="T:System.ServiceModel.Channels.Message" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-134">The <see cref="T:System.ServiceModel.Channels.Message" /> object to test.</span></span></param>
        <summary><span data-ttu-id="7bae2-135">파생 클래스에서 재정의된 경우 메시지가 필터 기준을 충족하는지 여부를 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-135">When overridden in a derived class, tests whether a message satisfies the filter criteria.</span></span> <span data-ttu-id="7bae2-136">본문은 검사할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-136">The body cannot be examined.</span></span></summary>
        <returns>
          <span data-ttu-id="7bae2-137"><see langword="true" /> 개체가 필터 조건을 충족하면 <see cref="T:System.ServiceModel.Channels.Message" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-137"><see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.Message" /> object satisfies the filter criteria; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bae2-138">이 메서드는 메시지 본문의 내용을 검사할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-138">This method cannot inspect the contents of the message body.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="7bae2-139">이 필터가 버퍼링되지 않은 메시지의 본문을 검사하려 할 경우 <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />가 throw되며,</span><span class="sxs-lookup"><span data-stu-id="7bae2-139">If the filter attempts to examine the body of an unbuffered message, then the filter must throw an <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />.</span></span> <span data-ttu-id="7bae2-140"><see langword="false" />가 반환되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-140">It should not return <see langword="false" />.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (buffer As MessageBuffer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="7bae2-141">테스트할 <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-141">The <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object to test.</span></span></param>
        <summary><span data-ttu-id="7bae2-142">파생 클래스에서 재정의된 경우 버퍼링된 메시지가 필터 기준을 충족하는지 여부를 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-142">When overridden in a derived class, tests whether a buffered message satisfies the criteria of a filter.</span></span></summary>
        <returns>
          <span data-ttu-id="7bae2-143"><see langword="true" /> 개체가 필터 조건을 충족하면 <see cref="T:System.ServiceModel.Channels.MessageBuffer" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-143"><see langword="true" /> if the <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> object satisfies the filter criteria; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bae2-144">필터에서 본문을 검사하려면 메시지 전체를 버퍼링해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-144">The message must be fully buffered if the body is to be inspected by the filter.</span></span> <span data-ttu-id="7bae2-145"><xref:System.ServiceModel.Channels.MessageBuffer>의 본문은 전체적으로 버퍼링되므로 필터를 통해 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-145">The body of the <xref:System.ServiceModel.Channels.MessageBuffer> is fully buffered and therefore can be inspected by a filter.</span></span> <span data-ttu-id="7bae2-146">전체적으로 버퍼링되지 않은 <xref:System.ServiceModel.Channels.Message> 본문은 필터 검사에 사용될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-146">The body of a <xref:System.ServiceModel.Channels.Message> that has not been fully buffered may be consumed by the filter inspection.</span></span> <span data-ttu-id="7bae2-147"><xref:System.ServiceModel.Channels.Message>의 헤더 요소는 자동으로 버퍼링되므로 별도의 사용 없이도 검사할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7bae2-147">The header element of a <xref:System.ServiceModel.Channels.Message> is automatically buffered and therefore can be inspected without being consumed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>