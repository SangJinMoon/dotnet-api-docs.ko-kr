<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IInstanceProvider.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5991c605f5d41dce095e638fa08e8238060345dba.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">991c605f5d41dce095e638fa08e8238060345dba</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</source>
          <target state="translated">서비스 개체를 제공하거나 WCF(Windows Communication Foundation) 서비스에 대한 서비스 개체를 재활용하는 메서드를 선언합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface to control the creation and recycling of service objects when one is requested or disposed by an <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> 개체에 의해 요청 또는 삭제된 서비스 개체를 생성하고 재활용하도록 제어하려면 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Once the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface is implemented, you must assign your custom instance provider object to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> property using either an endpoint behavior (a <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph> object) or a contract behavior (a <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> object).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> 인터페이스를 구현한 후에 끝점 동작(<ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> 개체) 또는 계약 동작(<ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph> 개체)을 사용하여 사용자 지정 인스턴스 공급자 개체를 <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> 속성에 할당해야 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the insertion mechanism is an endpoint behavior you can also implement a <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> object that can insert your custom behavior using a configuration file.</source>
          <target state="translated">삽입 메커니즘이 끝점 동작인 경우, 구성 파일을 사용하여 사용자 지정 동작을 삽입할 수 있는 <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> 개체를 구현할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</source>
          <target state="translated">삽입 메커니즘이 계약 동작인 경우에는 서비스 호스트를 열기 전에 동작을 프로그래밍 방식으로 삽입할 수 있으며, 아니면 사용자 지정 특성을 구현할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>(For an example of the contract behavior approach, see the Example section.)</source>
          <target state="translated">계약 동작 방법의 예제는 아래의 예제 단원을 참조하십시오.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> has two methods, <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph>에는 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>의 두 메서드가 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.</source>
          <target state="translated">이러한 메서드는 일반적으로 기본값이 아닌 생성자를 사용하여 서비스 개체를 만들거나 개체 수명 관련 상태를 초기화 또는 삭제하기 위해 구현됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Service object pooling is one example of custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> functionality.</source>
          <target state="translated">서비스 개체 풀링은 사용자 지정 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> 기능의 한 예입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> invokes the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> when the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is first created and invokes the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method when the <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>는 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph>가 처음 생성될 때 <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>를 호출하고 <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>가 닫힐 때 <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>There are two ways to cause an <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object to release a service object before the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>가 닫히기 전에 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 개체가 서비스 개체를 해제하도록 하는 데는 두 가지 방법이 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The first method is to set the <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.ServiceModel.ReleaseInstanceMode.AfterCall&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall&gt;</ph>.</source>
          <target state="translated">첫 번째 방법은 <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph>를 <ph id="ph2">&lt;xref:System.ServiceModel.ReleaseInstanceMode.AfterCall&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall&gt;</ph>로 설정하는 것이고,</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The second method is to call the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> method.</source>
          <target state="translated">두 번째 방법은 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> 메서드를 호출하는 것입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If this is done, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method on the dispatcher's instance provider.</source>
          <target state="translated">그런 다음 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>는 디스패처의 인스턴스 공급자에서 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If a new message arrives after the instance has been released, <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> creates a new instance using the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> method.</source>
          <target state="translated">인스턴스가 해제된 이후에 새 메시지가 도착하면 <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph>는 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> 메서드를 사용하여 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> of the service is <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>, the system does not call the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> methods even when the user did not provide a well-known service object unless the user directly calls <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> and then calls <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;</ph>.</source>
          <target state="translated">서비스의 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph>가 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>인 경우에는 사용자가 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph>와 <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>를 직접 차례로 호출하지 않는 한, 사용자가 잘 알려진 서비스 개체를 제공하지 않았더라도 시스템에서 <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> 또는 <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;</ph> 메서드를 호출하지 않습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">다음 코드 예제에서는 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재활용하지 않는 "singleton" 동작을 제공하는 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph>를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>를 구현하는 사용자 지정 특성을 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">또한 특정 계약에 사용하도록 바인딩하는 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>를 구현합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Returns a service object.</source>
          <target state="translated">서비스 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>Returns a service object given the specified <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체에 부여된 서비스 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>A user-defined service object.</source>
          <target state="translated">사용자 정의 서비스 개체입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29&gt;</ph> method to control the exact service object that a <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> service receives when it attempts to create a new one.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29&gt;</ph> 서비스가 새 개체 생성을 시도할 때 수신되는 서비스 개체를 제어하려면 <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">다음 코드 예제에서는 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재활용하지 않는 "singleton" 동작을 제공하는 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph>를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>를 구현하는 사용자 지정 특성을 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">또한 특정 계약에 사용하도록 바인딩하는 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>를 구현합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The message that triggered the creation of a service object.</source>
          <target state="translated">서비스 개체를 만들도록 트리거한 메시지입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>Returns a service object given the specified <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체에 부여된 서비스 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The service object.</source>
          <target state="translated">서비스 개체입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29&gt;</ph> method to control the exact service object that a <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> service receives when it attempts to create a new one.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29&gt;</ph> 서비스가 새 개체 생성을 시도할 때 수신되는 서비스 개체를 제어하려면 <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">다음 코드 예제에서는 항상 동일한 서비스 인스턴스를 반환하고 이 인스턴스를 재활용하지 않는 "singleton" 동작을 제공하는 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph>를 구현하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>를 구현하는 사용자 지정 특성을 구현하여 사용자 지정 서비스 인스턴스 공급자를 삽입하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">또한 특정 계약에 사용하도록 바인딩하는 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>를 구현합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>The service's instance context.</source>
          <target state="translated">서비스의 인스턴스 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>The service object to be recycled.</source>
          <target state="translated">재활용할 서비스 개체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>Called when an <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object recycles a service object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체가 서비스 개체를 재활용할 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</source>
          <target state="translated">서비스에서 서비스 개체를 재활용할 때 일부 사용자 지정 리소스 삭제 또는 기타 재활용 사용자 지정을 수행하려면 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>