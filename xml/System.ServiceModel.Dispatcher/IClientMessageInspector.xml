<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IClientMessageInspector.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51c72611cc7b655ebd69e6b72bf259c275567000d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c72611cc7b655ebd69e6b72bf259c275567000d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Defines a message inspector object that can be added to the <ph id="ph1">&lt;see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /&gt;</ph> collection to view or modify messages.</source>
          <target state="translated">메시지를 보거나 수정하기 위해 <ph id="ph1">&lt;see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /&gt;</ph> 컬렉션에 추가할 수 있는 메시지 검사자 개체를 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> interface and add it to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> collection to inspect or modify messages as they pass through a <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> 인터페이스를 구현한 후 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> 컬렉션에 추가하여 <ph id="ph3">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 클라이언트 개체를 통해 전달되는 메시지를 검사하거나 수정합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>For details, see <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">다음 코드 예제에서는 구현이 호출될 때 콘솔에 문자열을 쓰는 구현을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>를 사용하여 클라이언트 끝점에 클라이언트 메시지 검사자를 삽입하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IClientMessageInspector">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">마지막으로 다음 코드 예제에서는 특정 끝점에서 끝점 동작을 사용하도록 클라이언트 구성 파일을 수정하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The message to be transformed into types and handed back to the client application.</source>
          <target state="translated">형식으로 변형되어 클라이언트 응용 프로그램에 다시 전달될 메시지입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Correlation state data.</source>
          <target state="translated">상관 관계 상태 데이터입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</source>
          <target state="translated">회신 메시지가 수신된 후 클라이언트 응용 프로그램에 다시 전달되기 전에 메시지를 검사하거나 수정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A&gt;</ph> to inspect or modify a reply message after it has been received by the <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client object but before it is deserialized into objects that are returned to the client application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A&gt;</ph> 클라이언트 개체에서 받은 회신 메시지를 클라이언트 응용 프로그램에 반환되는 개체로 deserialize하기 전에 검사하거나 수정하려면 <ph id="ph2">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph>를 구현합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The <ph id="ph1">`correlationState`</ph> is the object returned by the user when <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> is called for this message.</source>
          <target state="translated"><ph id="ph1">`correlationState`</ph>는 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph>가 이 메시지에 대해 호출될 때 사용자가 반환하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The best practice is to make this a <ph id="ph1">&lt;xref:System.Guid?displayProperty=nameWithType&gt;</ph> to ensure that no two <ph id="ph2">`correlationState`</ph> objects are the same.</source>
          <target state="translated">가장 좋은 방법은 이 개체를 <ph id="ph1">&lt;xref:System.Guid?displayProperty=nameWithType&gt;</ph>로 만들어 동일한 두 <ph id="ph2">`correlationState`</ph> 개체가 존재하지 않도록 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">다음 코드 예제에서는 구현이 호출될 때 콘솔에 문자열을 쓰는 구현을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>를 사용하여 클라이언트 끝점에 클라이언트 메시지 검사자를 삽입하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">마지막으로 다음 코드 예제에서는 특정 끝점에서 끝점 동작을 사용하도록 클라이언트 구성 파일을 수정하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The message to be sent to the service.</source>
          <target state="translated">서비스에 보낼 메시지입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> client object channel.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> 클라이언트 개체 채널입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Enables inspection or modification of a message before a request message is sent to a service.</source>
          <target state="translated">요청 메시지가 서비스에 전달되기 전에 메시지를 검사하거나 수정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The object that is returned as the <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> argument of the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /&gt;</ph> 메서드의 <ph id="ph1">&lt;paramref name="correlationState" /&gt;</ph> 인수로 반환되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>This is <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no correlation state is used.</source>
          <target state="translated">상관 관계 상태를 사용하지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The best practice is to make this a <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> to ensure that no two <ph id="ph2">&lt;paramref name="correlationState" /&gt;</ph> objects are the same.</source>
          <target state="translated">가장 좋은 방법은 이 개체를 <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph>로 만들어 동일한 두 <ph id="ph2">&lt;paramref name="correlationState" /&gt;</ph> 개체가 존재하지 않도록 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph> to inspect or modify a request message before it is sent.</source>
          <target state="translated">요청 메시지가 전달되기 전에 메시지를 검사하거나 수정하려면 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A&gt;</ph>를 구현합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The following code example shows an implementation that writes strings to the console when the implementation is called.</source>
          <target state="translated">다음 코드 예제에서는 구현이 호출될 때 콘솔에 문자열을 쓰는 구현을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>The following code example shows how to use an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph> to insert the client message inspector in the client endpoint.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType&gt;</ph>를 사용하여 클라이언트 끝점에 클라이언트 메시지 검사자를 삽입하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
          <source>Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</source>
          <target state="translated">마지막으로 다음 코드 예제에서는 특정 끝점에서 끝점 동작을 사용하도록 클라이언트 구성 파일을 수정하는 방법을 보여 줍니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>