<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IInstanceContextProvider.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b7230a1507d07863c2307687e31de14a5abcb925141.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30a1507d07863c2307687e31de14a5abcb925141</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>Implement to participate in the creation or choosing of a <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object, especially to enable shared sessions.</source>
          <target state="translated">공유 세션 등을 사용하기 위해 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체를 만들거나 선택하려면 구현합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> interface to provide the appropriate <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> object to the system.</source>
          <target state="translated">시스템에 적절한 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> 개체를 제공하려면 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</source>
          <target state="translated">일반적으로 이 인스턴스는 공유 세션을 지원하거나, 서비스 인스턴스 풀링을 사용하거나, 서비스 인스턴스의 수명을 제어하거나, 클라이언트 간에 컨텍스트를 그룹화하기 위해 구현합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>For example, to implement sharing, insert a custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> to decide which session or call from a client is associated with which <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object.</source>
          <target state="translated">예를 들어, 공유를 구현하려면 사용자 지정 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph>를 삽입하여 클라이언트의 어느 세션 또는 호출이 어느 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 개체와 연결되는지를 결정합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>For an example that demonstrates the sharing of instance contexts, see <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>.</source>
          <target state="translated">인스턴스 컨텍스트 공유에 보여 주는 예제를 보려면 <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>When an <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph> is inserted into <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>, the normal property that controls the creation of <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> objects (the <ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> property) is no longer checked and has no effect.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider&gt;</ph>가 <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>에 삽입되면 <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 개체를 제어하는 일반 속성(<ph id="ph4">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType&gt;</ph> 속성)은 더 이상 검사되지 않으므로 적용되지 않습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceContextProvider">
          <source>A more generic mechanism by which you can initialize <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> objects when created (for example, to attach custom extensions to each <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>) is the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">사용자 지정 확장을 각 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>에 연결하는 경우와 같이 작성 시 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 개체를 초기화해야 할 때 일반적으로 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType&gt;</ph>를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The incoming message.</source>
          <target state="translated">들어오는 메시지입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The channel that received the message.</source>
          <target state="translated">메시지를 받은 채널입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>Called when a new message is received.</source>
          <target state="translated">새 메시지를 받을 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object that is used to process the message; return <ph id="ph2">&lt;see langword="null" /&gt;</ph> to instruct WCF to create a new <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">메시지를 처리하고 <ph id="ph2">&lt;see langword="null" /&gt;</ph>을 반환하여 WCF에 새 <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체를 만들도록 지시하는 데 사용되는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph> method is called when a message is received.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph> 메서드는 메시지를 받을 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>Return the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object that you want to process the message, or <ph id="ph2">`null`</ph>.</source>
          <target state="translated">메시지를 처리하려는 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 개체를 반환하고, 그렇지 않으면 <ph id="ph2">`null`</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>In the case of <ph id="ph1">`null`</ph>, WCF creates a new <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object for the message and then calls the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> method.</source>
          <target state="translated">경우 <ph id="ph1">`null`</ph>, WCF에서는 새 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 메시지와 다음 호출에 대 한 개체는 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>If you return <ph id="ph1">`null`</ph>, the new <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object goes through the throttling system and increments the count of <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>을 반환하면 새 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 개체가 스로틀 시스템을 통해 이동하고 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType&gt;</ph> 수가 증가합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">새로운 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The incoming message.</source>
          <target state="translated">들어오는 메시지입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>The channel that received the message.</source>
          <target state="translated">메시지를 받은 채널입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>Called when <ph id="ph1">&lt;see langword="null" /&gt;</ph> is returned from the <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="null" /&gt;</ph> 메서드로부터 <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /&gt;</ph>이 반환되면 호출됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph> is called when <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph> returns <ph id="ph3">`null`</ph> and a new <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A&gt;</ph>가 <ph id="ph3">`null`</ph>을 반환하고 <ph id="ph4">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 개체가 새로 생성될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)">
          <source>This method is called to notify you that a new <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> has been created.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph>가 새로 생성되었음을 알려 주기 위해 호출됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object that is considered idle.</source>
          <target state="translated">유휴 상태로 간주되는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source>Called when all <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> activities have completed to enable implementers to prevent the <ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> from being recycled.</source>
          <target state="translated">모든 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 동작이 완료되어 구현자가 <ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>를 재활용할 필요가 없게 되면 호출됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> is to close and recycle the <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object and adjust the value of <ph id="ph4">&lt;see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /&gt;</ph>; otherwise, <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>에서 <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체를 닫은 다음 재활용하고 <ph id="ph4">&lt;see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /&gt;</ph> 값을 조정하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph5">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> is called when WCF is about to close and recycle an idle <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object so that you can inform the runtime whether to continue doing so.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> WCF를 닫았다가 재활용할 유휴 하려고 할 때 호출 됩니다 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 개체는 런타임 작업을 계속 여부를 알릴 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)">
          <source>For an example that demonstrates the sharing of instance contexts, see <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>.</source>
          <target state="translated">인스턴스 컨텍스트 공유에 보여 주는 예제를 보려면 <bpt id="p1">[</bpt>InstanceContextSharing<ept id="p1">](http://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /&gt;</ph> object that notifies WCF when the <ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object is to be closed and recycled.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체를 닫았다가 재활용할 경우 WCF에 통지하는 <ph id="ph1">&lt;see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>Called when the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> to enable implementers to provide a callback to notify WCF when the <ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object is finished.</source>
          <target state="translated"><ph id="ph3">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> 개체가 완료되면 구현자가 콜백을 제공하여 WCF에게 알릴 수 있도록 하기 위해, <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /&gt;</ph> 메서드가 <ph id="ph2">&lt;see langword="false" /&gt;</ph>를 반환할 경우 호출됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A&gt;</ph> method is called when the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> method returns <ph id="ph3">`false`</ph> to enable you to provide WCF with a <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> object that you use to inform the runtime that the <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> has finished its work.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A&gt;</ph> 메서드를 호출한 경우는 <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> 메서드가 반환 되 <ph id="ph3">`false`</ph> 으로 WCF를 제공할 수 있도록는 <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> 런타임에 알리는 데 사용 하는 개체는 <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 해당 작업을 완료 했습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>When the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> object notifies the runtime that the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> has finished its work, WCF calls <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> once again.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType&gt;</ph> 개체 런타임에 알립니다 하는 <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> 해당 작업, WCF 호출 완료 <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> 다시 한 번입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)">
          <source>This cycle continues until <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph> returns <ph id="ph2">`true`</ph> and the context is closed and recycled.</source>
          <target state="translated">이 주기는 <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A&gt;</ph>이 <ph id="ph2">`true`</ph>를 반환하고 컨텍스트가 닫힌 다음 주기가 다시 시작될 때까지 계속됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>