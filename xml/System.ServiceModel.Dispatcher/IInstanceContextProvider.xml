<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="28c37f44bfb30eb2dcec7a72634b22bd36550b6c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51868183" /></Metadata><TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="85c62-101">공유 세션 등을 사용하기 위해 <see cref="T:System.ServiceModel.InstanceContext" /> 개체를 만들거나 선택하려면 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-101">Implement to participate in the creation or choosing of a <see cref="T:System.ServiceModel.InstanceContext" /> object, especially to enable shared sessions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85c62-102">시스템에 적절한 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> 개체를 제공하려면 <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> 인터페이스를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-102">Implement the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> interface to provide the appropriate <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> object to the system.</span></span> <span data-ttu-id="85c62-103">일반적으로 이 인스턴스는 공유 세션을 지원하거나, 서비스 인스턴스 풀링을 사용하거나, 서비스 인스턴스의 수명을 제어하거나, 클라이언트 간에 컨텍스트를 그룹화하기 위해 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-103">Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients.</span></span>  
  
 <span data-ttu-id="85c62-104">예를 들어, 공유를 구현하려면 사용자 지정 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider>를 삽입하여 클라이언트의 어느 세션 또는 호출이 어느 <xref:System.ServiceModel.InstanceContext> 개체와 연결되는지를 결정합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-104">For example, to implement sharing, insert a custom <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> to decide which session or call from a client is associated with which <xref:System.ServiceModel.InstanceContext> object.</span></span> <span data-ttu-id="85c62-105">인스턴스 컨텍스트를 공유 하는 방법을 보여 주는 예제를 보려면 [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-105">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="85c62-106">경우는 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> 에 Windows Communication Foundation (WCF)를 제어 하는 일반 속성 삽입 됩니다 <xref:System.ServiceModel.InstanceContext> 개체 (의 <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> 속성) 더 이상 검사 되 고 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-106">When an <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> is inserted into Windows Communication Foundation (WCF), the normal property that controls the creation of <xref:System.ServiceModel.InstanceContext> objects (the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property) is no longer checked and has no effect.</span></span>  
  
 <span data-ttu-id="85c62-107">사용자 지정 확장을 각 <xref:System.ServiceModel.InstanceContext>에 연결하는 경우와 같이 작성 시 <xref:System.ServiceModel.InstanceContext> 개체를 초기화해야 할 때 일반적으로 <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-107">A more generic mechanism by which you can initialize <xref:System.ServiceModel.InstanceContext> objects when created (for example, to attach custom extensions to each <xref:System.ServiceModel.InstanceContext>) is the <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="85c62-108">들어오는 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-108">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="85c62-109">메시지를 받은 채널입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-109">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="85c62-110">새 메시지를 받을 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-110">Called when a new message is received.</span></span></summary>
        <returns><span data-ttu-id="85c62-111">메시지를 처리하고 <see langword="null" />을 반환하여 WCF에 새 <see cref="T:System.ServiceModel.InstanceContext" /> 개체를 만들도록 지시하는 데 사용되는 <see cref="T:System.ServiceModel.InstanceContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-111">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is used to process the message; return <see langword="null" /> to instruct WCF to create a new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85c62-112"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> 메서드는 메시지를 받을 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-112">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> method is called when a message is received.</span></span> <span data-ttu-id="85c62-113">메시지를 처리하려는 <xref:System.ServiceModel.InstanceContext> 개체를 반환하고, 그렇지 않으면 `null`을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-113">Return the <xref:System.ServiceModel.InstanceContext> object that you want to process the message, or `null`.</span></span> <span data-ttu-id="85c62-114">경우 `null`, WCF를 만듭니다 <xref:System.ServiceModel.InstanceContext> 메시지에 대해 다음 호출 하는 개체는 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="85c62-114">In the case of `null`, WCF creates a new <xref:System.ServiceModel.InstanceContext> object for the message and then calls the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> method.</span></span>  
  
 <span data-ttu-id="85c62-115">`null`을 반환하면 새 <xref:System.ServiceModel.InstanceContext> 개체가 스로틀 시스템을 통해 이동하고 <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType> 수가 증가합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-115">If you return `null`, the new <xref:System.ServiceModel.InstanceContext> object goes through the throttling system and increments the count of <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="85c62-116">새로운 <see cref="T:System.ServiceModel.InstanceContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-116">The new <see cref="T:System.ServiceModel.InstanceContext" /> object.</span></span></param>
        <param name="message"><span data-ttu-id="85c62-117">들어오는 메시지입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-117">The incoming message.</span></span></param>
        <param name="channel"><span data-ttu-id="85c62-118">메시지를 받은 채널입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-118">The channel that received the message.</span></span></param>
        <summary><span data-ttu-id="85c62-119"><see langword="null" /> 메서드로부터 <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />이 반환되면 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-119">Called when <see langword="null" /> is returned from the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85c62-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A>는 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A>가 `null`을 반환하고 <xref:System.ServiceModel.InstanceContext> 개체가 새로 생성될 때 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-120"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> is called when <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> returns `null` and a new <xref:System.ServiceModel.InstanceContext> object is created.</span></span> <span data-ttu-id="85c62-121">이 메서드는 <xref:System.ServiceModel.InstanceContext>가 새로 생성되었음을 알려 주기 위해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-121">This method is called to notify you that a new <xref:System.ServiceModel.InstanceContext> has been created.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext"><span data-ttu-id="85c62-122">유휴 상태로 간주되는 <see cref="T:System.ServiceModel.InstanceContext" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-122">The <see cref="T:System.ServiceModel.InstanceContext" /> object that is considered idle.</span></span></param>
        <summary><span data-ttu-id="85c62-123">모든 <see cref="T:System.ServiceModel.InstanceContext" /> 동작이 완료되어 구현자가 <see cref="T:System.ServiceModel.InstanceContext" />를 재활용할 필요가 없게 되면 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-123">Called when all <see cref="T:System.ServiceModel.InstanceContext" /> activities have completed to enable implementers to prevent the <see cref="T:System.ServiceModel.InstanceContext" /> from being recycled.</span></span></summary>
        <returns><span data-ttu-id="85c62-124">WCF(Windows Communication Foundation)가 <see cref="T:System.ServiceModel.InstanceContext" /> 개체를 닫고 재활용하고 <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" /> 값을 조정하는 것이면 <see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-124"><see langword="true" /> if Windows Communication Foundation (WCF) is to close and recycle the <see cref="T:System.ServiceModel.InstanceContext" /> object and adjust the value of <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85c62-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> WCF 파일을 닫고 유휴 재활용 될 때 호출 됩니다 <xref:System.ServiceModel.InstanceContext> 개체 런타임 작업을 계속할지 여부를 알릴 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-125"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> is called when WCF is about to close and recycle an idle <xref:System.ServiceModel.InstanceContext> object so that you can inform the runtime whether to continue doing so.</span></span>  
  
 <span data-ttu-id="85c62-126">인스턴스 컨텍스트를 공유 하는 방법을 보여 주는 예제를 보려면 [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-126">For an example that demonstrates the sharing of instance contexts, see [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="85c62-127"><see cref="T:System.ServiceModel.InstanceContext" /> 개체를 닫았다가 재활용할 경우 WCF에 통지하는 <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-127">The <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> object that notifies WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is to be closed and recycled.</span></span></param>
        <param name="instanceContext"><span data-ttu-id="85c62-128">현재 <see cref="T:System.ServiceModel.InstanceContext" />입니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-128">The current <see cref="T:System.ServiceModel.InstanceContext" />.</span></span></param>
        <summary><span data-ttu-id="85c62-129"><see cref="T:System.ServiceModel.InstanceContext" /> 개체가 완료되면 구현자가 콜백을 제공하여 WCF에게 알릴 수 있도록 하기 위해, <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> 메서드가 <see langword="false" />를 반환할 경우 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-129">Called when the <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> method returns <see langword="false" /> to enable implementers to provide a callback to notify WCF when the <see cref="T:System.ServiceModel.InstanceContext" /> object is finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="85c62-130"><xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> 메서드를 호출한 경우는 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> 메서드가 반환 `false` 으로 WCF를 제공할 수 있도록를 <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> 런타임에 알리는 데 사용 하는 개체는 <xref:System.ServiceModel.InstanceContext> 작업이 완료 되었음을 합니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-130">The <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> method is called when the <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> method returns `false` to enable you to provide WCF with a <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object that you use to inform the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work.</span></span> <span data-ttu-id="85c62-131">경우는 <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> 개체에 런타임에 알립니다는 합니다 <xref:System.ServiceModel.InstanceContext> 해당 작업, WCF 호출 완료 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> 다시 한 번.</span><span class="sxs-lookup"><span data-stu-id="85c62-131">When the <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> object notifies the runtime that the <xref:System.ServiceModel.InstanceContext> has finished its work, WCF calls <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> once again.</span></span> <span data-ttu-id="85c62-132">이 주기는 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>이 `true`를 반환하고 컨텍스트가 닫힌 다음 주기가 다시 시작될 때까지 계속됩니다.</span><span class="sxs-lookup"><span data-stu-id="85c62-132">This cycle continues until <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> returns `true` and the context is closed and recycled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>