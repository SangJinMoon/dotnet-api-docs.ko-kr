<Type Name="BindingOperations" FullName="System.Windows.Data.BindingOperations">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b6d6ad02d9cad5d3fea47f68a5d2f16bfb2f4a51" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30631077" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class BindingOperations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BindingOperations extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingOperations" />
  <TypeSignature Language="VB.NET" Value="Public Class BindingOperations" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingOperations abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e9f87-101">
        <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.MultiBinding" /> 및 <see cref="T:System.Windows.Data.PriorityBinding" /> 개체를 비롯하여 바인딩을 조작하는 정적 메서드를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e9f87-101">Provides static methods to manipulate bindings, including <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.MultiBinding" />, and <see cref="T:System.Windows.Data.PriorityBinding" /> objects.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-102">이 클래스에 대 한 데이터 바인딩의 도우미 작업으로 사용 하는 정적 메서드 집합을 노출 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-102">This class exposes a set of static methods that serve as helper operations for data bindings.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AccessCollection">
      <MemberSignature Language="C#" Value="public static void AccessCollection (System.Collections.IEnumerable collection, Action accessMethod, bool writeAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AccessCollection(class System.Collections.IEnumerable collection, class System.Action accessMethod, bool writeAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.AccessCollection(System.Collections.IEnumerable,System.Action,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AccessCollection (collection As IEnumerable, accessMethod As Action, writeAccess As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AccessCollection(System::Collections::IEnumerable ^ collection, Action ^ accessMethod, bool writeAccess);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="accessMethod" Type="System.Action" />
        <Parameter Name="writeAccess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="e9f87-103">액세스할 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-103">The collection to access.</span>
          </span>
        </param>
        <param name="accessMethod">
          <span data-ttu-id="e9f87-104">컬렉션에 수행할 작업입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-104">The action to perform on the collection.</span>
          </span>
        </param>
        <param name="writeAccess">
          <span data-ttu-id="e9f87-105">
            <c>accessMethod</c>가 컬렉션에 쓰면 <see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-105">
              <see langword="true" /> if <c>accessMethod</c> will write to the collection; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-106">EnableCollectionSynchronization으로 호출되면 응용 프로그램에서 지정한 동기화 메커니즘을 사용하여 컬렉션에 대한 액세스 권한을 부여합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-106">Provides access to a collection by using the synchronization mechanism that the application specified when it called EnableCollectionSynchronization.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllBindings">
      <MemberSignature Language="C#" Value="public static void ClearAllBindings (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllBindings(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearAllBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllBindings (target As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllBindings(System::Windows::DependencyObject ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-107">바인딩을 제거할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-107">The object from which to remove bindings.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-108">지정된 <see cref="T:System.Windows.DependencyObject" />에서 <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.MultiBinding" /> 및 <see cref="T:System.Windows.Data.PriorityBinding" /> 형식의 바인딩을 포함한 모든 바인딩을 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-108">Removes all bindings, including bindings of type <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.MultiBinding" />, and <see cref="T:System.Windows.Data.PriorityBinding" />, from the specified <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-109">지정된 된 개체 데이터 바인딩된 없으면이 메서드는 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-109">If the specified object is not data-bound, this method has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-110">
            <paramref name="target" />이 <see langword="null" />인 경우입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-110">If <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ClearBinding">
      <MemberSignature Language="C#" Value="public static void ClearBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.ClearBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearBinding (target As DependencyObject, dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-111">바인딩을 제거할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-111">The object from which to remove the binding.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-112">바인딩을 제거할 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-112">The dependency property from which to remove the binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-113">있는 경우 속성에서 바인딩을 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-113">Removes the binding from a property if there is one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-114">지정된 된 속성은 데이터 바인딩 사용 하는 경우는 <xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, 또는 <xref:System.Windows.Data.MultiBinding>,이 메서드는 해당 바인딩 식 및 바인딩을 통해 전에 지역 값 속성의 값이 설정으로 복원 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-114">If the given property is data-bound with a <xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, or <xref:System.Windows.Data.MultiBinding>, this method removes the corresponding binding expression and restores the value of the property to what it was before any local value was set through the binding.</span></span>  
  
 <span data-ttu-id="e9f87-115">지정된 된 속성 데이터 바인딩된 없으면이 메서드는 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-115">If the given property is not data-bound, this method has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-116">
            <paramref name="target" /> 및 <paramref name="dp" /> 매개 변수는 <see langword="null" />일 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-116">The <paramref name="target" /> and <paramref name="dp" /> parameters cannot be <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CollectionRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionRegisteringEventArgs&gt; CollectionRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionRegistering As EventHandler(Of CollectionRegisteringEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionRegisteringEventArgs ^&gt; ^ CollectionRegistering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e9f87-117">데이터 바인딩 시스템에서 컬렉션을 통지하는 경우 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-117">Occurs when the data-binding system notices a collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionViewRegistering">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.CollectionViewRegisteringEventArgs&gt; CollectionViewRegistering" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Data.BindingOperations.CollectionViewRegistering" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event CollectionViewRegistering As EventHandler(Of CollectionViewRegisteringEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler&lt;System::Windows::Data::CollectionViewRegisteringEventArgs ^&gt; ^ CollectionViewRegistering;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.CollectionViewRegisteringEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e9f87-118">데이터 바인딩 시스템에서 컬렉션 뷰를 통지하는 경우 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-118">Occurs when the data-binding system notices a collection view.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void DisableCollectionSynchronization (System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableCollectionSynchronization(class System.Collections.IEnumerable collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.DisableCollectionSynchronization(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DisableCollectionSynchronization (collection As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DisableCollectionSynchronization(System::Collections::IEnumerable ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="e9f87-119">동기화된 액세스를 제거하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-119">The collection to remove synchronized access from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-120">지정된 컬렉션에 등록된 동기화를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-120">Remove the synchronization registered for the specified collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisconnectedSource">
      <MemberSignature Language="C#" Value="public static object DisconnectedSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property object DisconnectedSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingOperations.DisconnectedSource" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DisconnectedSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Object ^ DisconnectedSource { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e9f87-121">항목 컨테이너가 시각적 트리에서 제거될 때 <see cref="P:System.Windows.FrameworkElement.DataContext" />를 대체하는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-121">Gets an object that replaces the <see cref="P:System.Windows.FrameworkElement.DataContext" /> when an item container is removed from the visual tree.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e9f87-122">항목 컨테이너가 시각적 트리에서 제거될 때 <see cref="P:System.Windows.FrameworkElement.DataContext" />를 대체하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-122">An object that replaces the <see cref="P:System.Windows.FrameworkElement.DataContext" /> when an item container is removed from the visual tree.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-123">처리 하는 경우이 속성을 사용 하 여는 <xref:System.Windows.FrameworkElement.DataContext%2A> 항목 컨테이너의 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-123">Use this property if you need to deal with the <xref:System.Windows.FrameworkElement.DataContext%2A> of an item container.</span></span>  <span data-ttu-id="e9f87-124">항목 컨테이너에 있는 항목을 표시 하는 UI 요소는 한 <xref:System.Windows.Controls.ItemsControl>합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-124">An item container is the UI element that displays an item in an <xref:System.Windows.Controls.ItemsControl>.</span></span>  <span data-ttu-id="e9f87-125">경우는 <xref:System.Windows.Controls.ItemsControl> 는 데이터 컬렉션에 바인딩된 항목 컨테이너는 각 항목에 대해 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-125">When an <xref:System.Windows.Controls.ItemsControl> is data bound to a collection, an item container is generated for each item.</span></span>  <span data-ttu-id="e9f87-126">경우에 따라 항목 컨테이너는 시각적 트리에서 제거됩니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-126">In some cases, item containers are removed from the visual tree.</span></span>  <span data-ttu-id="e9f87-127">기본 컬렉션에서 항목이 제거 될 때 및에서 가상화가 사용 하는 경우 항목 컨테이너 제거 되는 두 가지 일반적인 경우는는 <xref:System.Windows.Controls.ItemsControl>합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-127">Two typical cases where an item container is removed are when an item is removed from the underlying collection and when virtualization is enabled on the <xref:System.Windows.Controls.ItemsControl>.</span></span>  <span data-ttu-id="e9f87-128">이러한 경우에는 <xref:System.Windows.FrameworkElement.DataContext%2A> 항목 컨테이너의 속성으로 설정 됩니다는 <xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A> 속성을 확인 해야 하는지 여부를 <xref:System.Windows.FrameworkElement.DataContext%2A> 같은지를 <xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A> 에 액세스 하기 전에 <xref:System.Windows.FrameworkElement.DataContext%2A> 에 <xref:System.Windows.FrameworkElement.DataContextChanged> 항목에 대 한 이벤트 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-128">In these cases, the <xref:System.Windows.FrameworkElement.DataContext%2A> property of the item container will be set to the <xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A> property  You should check whether the <xref:System.Windows.FrameworkElement.DataContext%2A> is equal to the <xref:System.Windows.Data.BindingOperations.DisconnectedSource%2A> before accessing the <xref:System.Windows.FrameworkElement.DataContext%2A> in the <xref:System.Windows.FrameworkElement.DataContextChanged> event for item containers.</span></span> <span data-ttu-id="e9f87-129">컨테이너의 항목 및 가상화에 대 한 자세한 내용은의 설명을 참조는 <xref:System.Windows.Controls.VirtualizingStackPanel> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-129">For more information about item containers and virtualization, see the remarks in the <xref:System.Windows.Controls.VirtualizingStackPanel> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnableCollectionSynchronization">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e9f87-130">여러 스레드에 사용된 컬렉션에 대한 동기화된 액세스에 참여하도록 <see cref="T:System.Windows.Data.CollectionView" /> 개체를 활성화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-130">Enables a <see cref="T:System.Windows.Data.CollectionView" /> object to participate in synchronized access to a collection that is used on multiple threads.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e9f87-131">WPF 응용 프로그램 컬렉션을 사용 하 여 데이터를 표시할 수는 <xref:System.Windows.Controls.ItemsControl> 또는 해당 서브 클래스 중 하나 (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>등.).</span><span class="sxs-lookup"><span data-stu-id="e9f87-131">A WPF application can display a collection of data using an <xref:System.Windows.Controls.ItemsControl> or one of its subclasses (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>, etc.).</span></span> <span data-ttu-id="e9f87-132">WPF의 서브 클래스를 통해 컬렉션의 모든 액세스 채널 <xref:System.Windows.Data.CollectionView>합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-132">WPF channels all its access to the collection through a subclass of <xref:System.Windows.Data.CollectionView>.</span></span> <span data-ttu-id="e9f87-133">둘 다는 <xref:System.Windows.Controls.ItemsControl> 및 <xref:System.Windows.Data.CollectionView> 기반이 스레드에 선호도는 <xref:System.Windows.Controls.ItemsControl> 만들어진, 즉 다른 스레드에서 사용 하 여는 금지 되 고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-133">Both the <xref:System.Windows.Controls.ItemsControl> and the <xref:System.Windows.Data.CollectionView> have affinity to the thread on which the <xref:System.Windows.Controls.ItemsControl> was created, meaning that using them on a different thread is forbidden and throws an exception.</span></span> <span data-ttu-id="e9f87-134">실제로 이러한 제한도 컬렉션에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-134">In effect, this restriction applies to the collection as well.</span></span>
 
<span data-ttu-id="e9f87-135">여러 스레드에서 컬렉션을 사용 하도록 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-135">You may want to use the collection on multiple threads.</span></span>   <span data-ttu-id="e9f87-136">예를 들어 컬렉션을 업데이트 하려면 (추가 또는 제거 항목) "데이터 수집" 스레드에서 "사용자 인터페이스" 스레드에서 결과 표시 하는 동안 UI 하는 동안 응답 가능한 상태로 유지 되도록 데이터 수집 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-136">For example, you want to update the collection (add or remove items) on a "data-gathering" thread, while displaying the results on a "user interface" thread, so that the UI remains responsive while data-gathering is happening.</span></span> <span data-ttu-id="e9f87-137">이러한 경우 책임이 있습니다 컬렉션에 동기화 된 ("스레드로부터 안전한") 액세스를 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-137">In such a situation, you are responsible for ensuring synchronized ("thread-safe") access to the collection.</span></span>   <span data-ttu-id="e9f87-138">일반적으로 이렇게와 같은 간단한 잠금 메커니즘 또는 보다 세밀 하 게 동기화 메커니즘을 사용 하 여 세마포, 이벤트 등을 다시 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-138">This is typically done using either a simple lock mechanism or a more elaborate synchronization mechanism such as semaphores, reset events, etc.</span></span> 
 
<span data-ttu-id="e9f87-139">액세스 하는 WPF에서도 보장 해야 컬렉션에 대 한 응용 프로그램의 액세스를 동기화 해야 하는 동안 (특히에서 <xref:System.Windows.Data.CollectionView>) 같은 동기화 메커니즘에 참여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-139">While you must synchronize your application's access to the collection, you must also guarantee that access from WPF (specifically from <xref:System.Windows.Data.CollectionView>) participates in the same synchronization mechanism.</span></span>  <span data-ttu-id="e9f87-140">이 작업은 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> 메서드를 호출하여 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-140">You do this by calling the <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> method.</span></span>
 
<span data-ttu-id="e9f87-141">여러 스레드에서 컬렉션을 사용 하려면 그 중 하나는 소유 하는 UI 스레드는 <xref:System.Windows.Controls.ItemsControl>, 응용 프로그램에 다음을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-141">To use a collection on multiple threads, one of which is the UI thread that owns the <xref:System.Windows.Controls.ItemsControl>, an application has the following responsibilities:</span></span>

1. <span data-ttu-id="e9f87-142">동기화 메커니즘을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-142">Choose a synchronization mechanism.</span></span>

1. <span data-ttu-id="e9f87-143">해당 메커니즘을 사용 하 여 컬렉션에 응용 프로그램에서 모든 액세스를 동기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-143">Synchronize all access from the application to the collection using that mechanism.</span></span>

1. <span data-ttu-id="e9f87-144">호출 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> 메커니즘의 WPF 알릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-144">Call <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> to inform WPF of the mechanism.</span></span>

   - <span data-ttu-id="e9f87-145">호출이 UI 스레드에서 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-145">The call must occur on the UI thread.</span></span>

   - <span data-ttu-id="e9f87-146">컬렉션에 연결 하기 전에 또는 다른 스레드에서 컬렉션을 사용 하기 전에 호출이 발생 해야 합니다는 <xref:System.Windows.Controls.ItemsControl>, 중에서 더 이상.</span><span class="sxs-lookup"><span data-stu-id="e9f87-146">The call must occur before using the collection on a different thread or before attaching the collection to the <xref:System.Windows.Controls.ItemsControl>, whichever is later.</span></span>

   - <span data-ttu-id="e9f87-147">호출 된 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)> 간단한 잠금 메커니즘을 사용 하는 경우 오버 로드; 호출은 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)> 보다 세밀 하 게 메커니즘을 사용 하는 경우 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-147">Call the <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)> overload if using a simple lock mechanism; call the <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)> overload if using a more elaborate mechanism.</span></span>

1. <span data-ttu-id="e9f87-148">컬렉션 및 해당 변경 내용에 대 한 알림을에 대 한 변경 되도록 (통해 <xref:System.Collections.Specialized.INotifyCollectionChanged>)은 다른 스레드에서 액세스할 수 없는 사용자가 개입할 수 원자성입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-148">Ensure that a change to the collection and the notification of that change (through <xref:System.Collections.Specialized.INotifyCollectionChanged>) are atomic; no access from other threads can intervene.</span></span>  <span data-ttu-id="e9f87-149">(일반적으로 무료입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-149">(This is usually free.</span></span> <span data-ttu-id="e9f87-150">For instance, <xref:System.Collections.ObjectModel.ObservableCollection%601> 모든 변경 내용을 동기화에 의해 보호 되는이 보장 합니다.)</span><span class="sxs-lookup"><span data-stu-id="e9f87-150">For instance, <xref:System.Collections.ObjectModel.ObservableCollection%601> guarantees this, provided that all changes are protected by synchronization.)</span></span>

1. <span data-ttu-id="e9f87-151">호출 하는 경우 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, 호출이 UI 스레드에서 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-151">If you call <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, that call must also occur on the UI thread.</span></span>

1. <span data-ttu-id="e9f87-152">여러 UI 스레드에서 동일한 컬렉션을 사용 하려면 호출 해야 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (및 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, 필요한 경우) 각 UI 스레드에서 별도로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-152">If you want to use the same collection on multiple UI threads, you must call <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (and <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, if needed) separately on each UI thread.</span></span>

1. <span data-ttu-id="e9f87-153">교착 상태를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-153">Avoid deadlock.</span></span>  <span data-ttu-id="e9f87-154">이 이미 응용 프로그램의 역할 계정 WPF의 참여는 동기화에 사용 해야 하지만, 동기화를 사용 하도록 선택 되 면 다음 단락에서 설명한입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-154">This is already the application's responsibility once it chooses to use synchronization, but it must also take into account WPF's participation in the synchronization, as discussed in the following paragraph.</span></span>

<span data-ttu-id="e9f87-155">WPF는 다음 동작을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-155">In return, WPF provides the following behavior:</span></span>

- <span data-ttu-id="e9f87-156"><xref:System.Windows.Data.CollectionView> 지정 된 동기화 메커니즘을 사용 하 여 컬렉션에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-156">The <xref:System.Windows.Data.CollectionView> accesses the collection using the given synchronization mechanism.</span></span>

- <span data-ttu-id="e9f87-157"><xref:System.Windows.Data.CollectionView> "의 섀도 복사본"의 컬렉션을 사용 하 여 UI 스레드에서 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-157">The <xref:System.Windows.Data.CollectionView> maintains a "shadow copy" of the collection for use on the UI thread.</span></span>

- <span data-ttu-id="e9f87-158"><xref:System.Windows.Data.CollectionView.CollectionChanged> (모든 스레드)에 도착 하면 이벤트 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-158"><xref:System.Windows.Data.CollectionView.CollectionChanged> events are queued up as they arrive (on any thread).</span></span>

- <span data-ttu-id="e9f87-159">보류 중인 이벤트에 적용 됩니다는 UI 스레드에서 비동기적으로 섀도 복사본 작업을 수행 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="e9f87-159">Pending events are applied to the shadow copy asynchronously on the UI thread when it has the opportunity to do so.</span></span>

- <span data-ttu-id="e9f87-160"><xref:System.Windows.Data.CollectionView> 응용 프로그램에 표시 다른 동기화 메커니즘을 직접 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-160">The <xref:System.Windows.Data.CollectionView> won't directly use any other synchronization mechanism visible to the application.</span></span> <span data-ttu-id="e9f87-161">이 방법은 WPF의 작동에 교착 상태에 (7 이전 항목 참조).</span><span class="sxs-lookup"><span data-stu-id="e9f87-161">This is WPF's way of helping to avoid deadlock (see the previous item 7).</span></span>   

<span data-ttu-id="e9f87-162">하 한 순수 효과 모든 스레드에서 컬렉션을 변경할 수 있으며에 변경 내용이 결국 표시는 <xref:System.Windows.Controls.ItemsControl> UI 스레드 시간 "동기화"를 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="e9f87-162">The net effect is that you can change the collection on any thread, and those changes eventually appear in the <xref:System.Windows.Controls.ItemsControl> when the UI thread has time to "catch up".</span></span>  <span data-ttu-id="e9f87-163">구현은 스로틀 포화 UI 스레드를 일반 사용자 입력에 응답 함으로써 스레드 수 변경 내용을에 UI 스레드 백그라운드 유지를 보내야 하는 속도를 조정 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-163">The implementation has been tuned to throttle the rate that changes flow into the UI thread to keep background threads from saturating the UI thread and starving the response to normal user input.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object lockObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object lockObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, lockObject As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ lockObject);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="lockObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="e9f87-164">동기화된 액세스가 필요한 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-164">The collection that needs synchronized access.</span>
          </span>
        </param>
        <param name="lockObject">
          <span data-ttu-id="e9f87-165">컬렉션에 액세스할 때 잠글 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-165">The object to lock when accessing the collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-166">간단한 잠금 메커니즘을 사용하여 여러 스레드에 용된 컬렉션에 대한 동기화된 액세스에 참여하도록 <see cref="T:System.Windows.Data.CollectionView" /> 개체를 활성화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-166">Enables a <see cref="T:System.Windows.Data.CollectionView" /> object to participate in synchronized access to a collection used on multiple threads by using a simple locking mechanism.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="e9f87-167">WPF 응용 프로그램 컬렉션을 사용 하 여 데이터를 표시할 수는 <xref:System.Windows.Controls.ItemsControl> 또는 해당 서브 클래스 중 하나 (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>등.).</span><span class="sxs-lookup"><span data-stu-id="e9f87-167">A WPF application can display a collection of data using an <xref:System.Windows.Controls.ItemsControl> or one of its subclasses (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>, etc.).</span></span> <span data-ttu-id="e9f87-168">WPF의 서브 클래스를 통해 컬렉션의 모든 액세스 채널 <xref:System.Windows.Data.CollectionView>합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-168">WPF channels all its access to the collection through a subclass of <xref:System.Windows.Data.CollectionView>.</span></span> <span data-ttu-id="e9f87-169">둘 다는 <xref:System.Windows.Controls.ItemsControl> 및 <xref:System.Windows.Data.CollectionView> 기반이 스레드에 선호도는 <xref:System.Windows.Controls.ItemsControl> 만들어진, 즉 다른 스레드에서 사용 하 여는 금지 되 고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-169">Both the <xref:System.Windows.Controls.ItemsControl> and the <xref:System.Windows.Data.CollectionView> have affinity to the thread on which the <xref:System.Windows.Controls.ItemsControl> was created, meaning that using them on a different thread is forbidden and throws an exception.</span></span> <span data-ttu-id="e9f87-170">실제로 이러한 제한도 컬렉션에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-170">In effect, this restriction applies to the collection as well.</span></span>
 
<span data-ttu-id="e9f87-171">여러 스레드에서 컬렉션을 사용 하도록 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-171">You may want to use the collection on multiple threads.</span></span>   <span data-ttu-id="e9f87-172">예를 들어 컬렉션을 업데이트 하려면 (추가 또는 제거 항목) "데이터 수집" 스레드에서 "사용자 인터페이스" 스레드에서 결과 표시 하는 동안 UI 하는 동안 응답 가능한 상태로 유지 되도록 데이터 수집 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-172">For example, you want to update the collection (add or remove items) on a "data-gathering" thread, while displaying the results on a "user interface" thread, so that the UI remains responsive while data-gathering is happening.</span></span> <span data-ttu-id="e9f87-173">이러한 경우 사용자가 컬렉션에 액세스 하는 WPF에서 보장 하는 것에 대 한 액세스 ("스레드로부터 안전한")이 동기화 되었는지 확인 (구체적으로 로부터 <xref:System.Windows.Data.CollectionView>) 같은 동기화 메커니즘에 참여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-173">In such a situation, you are responsible for ensuring synchronized ("thread-safe") access to the collection and for guaranteeing that access from WPF (specifically from <xref:System.Windows.Data.CollectionView>) participates in the same synchronization mechanism.</span></span> <span data-ttu-id="e9f87-174">호출 하 여는 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)> 메서드를 할 수 있는이 간단한 잠금 메커니즘을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-174">By calling the <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)> method, you can do this by using a simple lock mechanism.</span></span> 
 
<span data-ttu-id="e9f87-175">여러 스레드에서 컬렉션을 사용 하려면 그 중 하나는 소유 하는 UI 스레드는 <xref:System.Windows.Controls.ItemsControl>에서 다음을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-175">To use a collection on multiple threads, one of which is the UI thread that owns the <xref:System.Windows.Controls.ItemsControl>, you must do the following:</span></span>

1. <span data-ttu-id="e9f87-176">컬렉션에 액세스할 때 잠글 개체를를 인스턴스화하십시오.</span><span class="sxs-lookup"><span data-stu-id="e9f87-176">Instantiate an object to lock when accessing the collection.</span></span>

1. <span data-ttu-id="e9f87-177">해당 개체를 잠가 컬렉션에 응용 프로그램에서 모든 액세스를 동기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-177">Synchronize all access from the application to the collection by locking that object.</span></span>

1. <span data-ttu-id="e9f87-178">호출 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)> 간단한 잠금 메커니즘을 사용 하는 WPF를 알릴 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-178">Call <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object)> to inform WPF that you are using a simple lock mechanism.</span></span>

   - <span data-ttu-id="e9f87-179">호출이 UI 스레드에서 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-179">The call must occur on the UI thread.</span></span>

   - <span data-ttu-id="e9f87-180">컬렉션에 연결 하기 전에 또는 다른 스레드에서 컬렉션을 사용 하기 전에 호출이 발생 해야 합니다는 <xref:System.Windows.Controls.ItemsControl>, 중에서 더 이상.</span><span class="sxs-lookup"><span data-stu-id="e9f87-180">The call must occur before using the collection on a different thread or before attaching the collection to the <xref:System.Windows.Controls.ItemsControl>, whichever is later.</span></span>

1. <span data-ttu-id="e9f87-181">컬렉션 및 해당 변경 내용에 대 한 알림을에 대 한 변경 되도록 (통해 <xref:System.Collections.Specialized.INotifyCollectionChanged>)은 다른 스레드에서 액세스할 수 없는 사용자가 개입할 수 원자성입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-181">Ensure that a change to the collection and the notification of that change (through <xref:System.Collections.Specialized.INotifyCollectionChanged>) are atomic; no access from other threads can intervene.</span></span>  <span data-ttu-id="e9f87-182">(일반적으로 무료입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-182">(This is usually free.</span></span> <span data-ttu-id="e9f87-183">For instance, <xref:System.Collections.ObjectModel.ObservableCollection%601> 모든 변경 내용을 동기화에 의해 보호 되는이 보장 합니다.)</span><span class="sxs-lookup"><span data-stu-id="e9f87-183">For instance, <xref:System.Collections.ObjectModel.ObservableCollection%601> guarantees this, provided that all changes are protected by synchronization.)</span></span>

1. <span data-ttu-id="e9f87-184">호출 하는 경우 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, 호출이 UI 스레드에서 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-184">If you call <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, that call must also occur on the UI thread.</span></span>

1. <span data-ttu-id="e9f87-185">여러 UI 스레드에서 동일한 컬렉션을 사용 하려면 호출 해야 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (및 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, 필요한 경우) 각 UI 스레드에서 별도로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-185">If you want to use the same collection on multiple UI threads, you must call <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (and <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, if needed) separately on each UI thread.</span></span>

1. <span data-ttu-id="e9f87-186">교착 상태를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-186">Avoid deadlock.</span></span>  <span data-ttu-id="e9f87-187">동기화를 사용 하도록 선택 되지만 것도 고려해 야 동기화에 WPF의 참여에 응용 프로그램의 역할 이미입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-187">This is already the application's responsibility once it chooses to use synchronization, but it must also take into account WPF's participation in the synchronization.</span></span> <span data-ttu-id="e9f87-188">(참조, 아래).</span><span class="sxs-lookup"><span data-stu-id="e9f87-188">(See more, below.)</span></span>

<span data-ttu-id="e9f87-189">WPF는 다음 동작을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-189">In return, WPF provides the following behavior:</span></span>

- <span data-ttu-id="e9f87-190"><xref:System.Windows.Data.CollectionView> 잠금 메커니즘을 사용 하 여 컬렉션에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-190">The <xref:System.Windows.Data.CollectionView> accesses the collection using the locking mechanism.</span></span>

- <span data-ttu-id="e9f87-191"><xref:System.Windows.Data.CollectionView> "의 섀도 복사본"의 컬렉션을 사용 하 여 UI 스레드에서 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-191">The <xref:System.Windows.Data.CollectionView> maintains a "shadow copy" of the collection for use on the UI thread.</span></span>

- <span data-ttu-id="e9f87-192"><xref:System.Windows.Data.CollectionView.CollectionChanged> (모든 스레드)에 도착 하면 이벤트 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-192"><xref:System.Windows.Data.CollectionView.CollectionChanged> events are queued up as they arrive (on any thread).</span></span>

- <span data-ttu-id="e9f87-193">보류 중인 이벤트에 적용 됩니다는 UI 스레드에서 비동기적으로 섀도 복사본 작업을 수행 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="e9f87-193">Pending events are applied to the shadow copy asynchronously on the UI thread when it has the opportunity to do so.</span></span>

- <span data-ttu-id="e9f87-194"><xref:System.Windows.Data.CollectionView> 가 직접 사용 응용 프로그램에 표시 다른 동기화 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-194">The <xref:System.Windows.Data.CollectionView> will not directly use any other synchronization mechanism visible to the application.</span></span> <span data-ttu-id="e9f87-195">이 방법은 WPF의 작동에 교착 상태에 (7 이전 항목 참조).</span><span class="sxs-lookup"><span data-stu-id="e9f87-195">This is WPF's way of helping to avoid deadlock (see the previous item 7).</span></span>   

<span data-ttu-id="e9f87-196">하 한 순수 효과 모든 스레드에서 컬렉션을 변경할 수 있으며에 변경 내용이 결국 표시는 <xref:System.Windows.Controls.ItemsControl> UI 스레드 시간 "동기화"를 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="e9f87-196">The net effect is that you can change the collection on any thread, and those changes eventually appear in the <xref:System.Windows.Controls.ItemsControl> when the UI thread has time to "catch up".</span></span>  <span data-ttu-id="e9f87-197">구현은 스로틀 포화 UI 스레드를 일반 사용자 입력에 응답 함으로써 스레드 수 변경 내용을에 UI 스레드 백그라운드 유지를 보내야 하는 속도를 조정 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-197">The implementation has been tuned to throttle the rate that changes flow into the UI thread to keep background threads from saturating the UI thread and starving the response to normal user input.</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCollectionSynchronization">
      <MemberSignature Language="C#" Value="public static void EnableCollectionSynchronization (System.Collections.IEnumerable collection, object context, System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCollectionSynchronization(class System.Collections.IEnumerable collection, object context, class System.Windows.Data.CollectionSynchronizationCallback synchronizationCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableCollectionSynchronization (collection As IEnumerable, context As Object, synchronizationCallback As CollectionSynchronizationCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableCollectionSynchronization(System::Collections::IEnumerable ^ collection, System::Object ^ context, System::Windows::Data::CollectionSynchronizationCallback ^ synchronizationCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
        <Parameter Name="context" Type="System.Object" />
        <Parameter Name="synchronizationCallback" Type="System.Windows.Data.CollectionSynchronizationCallback" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="e9f87-198">동기화된 액세스가 필요한 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-198">The collection that needs synchronized access.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="e9f87-199">콜백에 전달되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-199">An object that is passed to the callback.</span>
          </span>
        </param>
        <param name="synchronizationCallback">
          <span data-ttu-id="e9f87-200">컬렉션에 대한 액세스가 필요할 때마다 호출되는 콜백입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-200">The callback that is invoked whenever access to the collection is required.</span>
          </span>
          <span data-ttu-id="e9f87-201">한 번 하나의 스레드가 해당 컬렉션에 액세스하도록 사용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-201">You can use it to ensure that the collection is accessed by one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-202">간단한 잠금 이외의 메커니즘을 사용하여 여러 스레드에 사용된 컬렉션에 대한 동기화된 액세스에 참여하도록 <see cref="T:System.Windows.Data.CollectionView" /> 개체를 활성화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-202">Enables a <see cref="T:System.Windows.Data.CollectionView" /> object to participate in synchronized access to a collection used on multiple threads by using a mechanism other than a simple lock.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e9f87-203">WPF 응용 프로그램 컬렉션을 사용 하 여 데이터를 표시할 수는 <xref:System.Windows.Controls.ItemsControl> 또는 해당 서브 클래스 중 하나 (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>등.).</span><span class="sxs-lookup"><span data-stu-id="e9f87-203">A WPF application can display a collection of data using an <xref:System.Windows.Controls.ItemsControl> or one of its subclasses (<xref:System.Windows.Controls.ListBox>, <xref:System.Windows.Controls.DataGrid>, <xref:System.Windows.Controls.TreeView>, <xref:System.Windows.Controls.ListView>, etc.).</span></span> <span data-ttu-id="e9f87-204">WPF의 서브 클래스를 통해 컬렉션의 모든 액세스 채널 <xref:System.Windows.Data.CollectionView>합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-204">WPF channels all its access to the collection through a subclass of <xref:System.Windows.Data.CollectionView>.</span></span> <span data-ttu-id="e9f87-205">둘 다는 <xref:System.Windows.Controls.ItemsControl> 및 <xref:System.Windows.Data.CollectionView> 기반이 스레드에 선호도는 <xref:System.Windows.Controls.ItemsControl> 만들어진, 즉 다른 스레드에서 사용 하 여는 금지 되 고 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-205">Both the <xref:System.Windows.Controls.ItemsControl> and the <xref:System.Windows.Data.CollectionView> have affinity to the thread on which the <xref:System.Windows.Controls.ItemsControl> was created, meaning that using them on a different thread is forbidden and throws an exception.</span></span> <span data-ttu-id="e9f87-206">실제로 이러한 제한도 컬렉션에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-206">In effect, this restriction applies to the collection as well.</span></span>
 
<span data-ttu-id="e9f87-207">여러 스레드에서 컬렉션을 사용 하도록 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-207">You may want to use the collection on multiple threads.</span></span>   <span data-ttu-id="e9f87-208">예를 들어 컬렉션을 업데이트 하려면 (추가 또는 제거 항목) "데이터 수집" 스레드에서 "사용자 인터페이스" 스레드에서 결과 표시 하는 동안 UI 하는 동안 응답 가능한 상태로 유지 되도록 데이터 수집 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-208">For example, you want to update the collection (add or remove items) on a "data-gathering" thread, while displaying the results on a "user interface" thread, so that the UI remains responsive while data-gathering is happening.</span></span> <span data-ttu-id="e9f87-209">이러한 경우 사용자가 컬렉션에 액세스 하는 WPF에서 보장 하는 것에 대 한 액세스 ("스레드로부터 안전한")이 동기화 되었는지 확인 (구체적으로 로부터 <xref:System.Windows.Data.CollectionView>) 같은 동기화 메커니즘에 참여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-209">In such a situation, you are responsible for ensuring synchronized ("thread-safe") access to the collection and for guaranteeing that access from WPF (specifically from <xref:System.Windows.Data.CollectionView>) participates in the same synchronization mechanism.</span></span> <span data-ttu-id="e9f87-210">호출 하 여는 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)> 메서드, 이렇게 하려면 세마포는, 다시 설정 이벤트 등 같은 동기화 메커니즘을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-210">By calling the <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)> method, you can do this by using a synchronization mechanism such as a semaphores, a reset event, etc.</span></span> 
 
<span data-ttu-id="e9f87-211">여러 스레드에서 컬렉션을 사용 하려면 그 중 하나는 소유 하는 UI 스레드는 <xref:System.Windows.Controls.ItemsControl>에서 다음을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-211">To use a collection on multiple threads, one of which is the UI thread that owns the <xref:System.Windows.Controls.ItemsControl>, you must do the following:</span></span>

1. <span data-ttu-id="e9f87-212">동기화 메커니즘을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-212">Choose a synchronization mechanism.</span></span>

1. <span data-ttu-id="e9f87-213">해당 메커니즘을 사용 하 여 컬렉션에 응용 프로그램에서 모든 액세스를 동기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-213">Synchronize all access from the application to the collection using that mechanism.</span></span>

1. <span data-ttu-id="e9f87-214">호출 된 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)> 간단한 잠금 이외의 다른 메커니즘을 사용 하는 WPF를 알리기 위해 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-214">Call the <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization(System.Collections.IEnumerable,System.Object,System.Windows.Data.CollectionSynchronizationCallback)> overload to inform WPF that you are using a mechanism other than simple locking.</span></span>

   - <span data-ttu-id="e9f87-215">호출이 UI 스레드에서 발생 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-215">The call must occur on the UI thread.</span></span>

   - <span data-ttu-id="e9f87-216">컬렉션에 연결 하기 전에 또는 다른 스레드에서 컬렉션을 사용 하기 전에 호출이 발생 해야 합니다는 <xref:System.Windows.Controls.ItemsControl>, 중에서 더 이상.</span><span class="sxs-lookup"><span data-stu-id="e9f87-216">The call must occur before using the collection on a different thread or before attaching the collection to the <xref:System.Windows.Controls.ItemsControl>, whichever is later.</span></span>

1. <span data-ttu-id="e9f87-217">컬렉션 및 해당 변경 내용에 대 한 알림을에 대 한 변경 되도록 (통해 <xref:System.Collections.Specialized.INotifyCollectionChanged>)은 다른 스레드에서 액세스할 수 없는 사용자가 개입할 수 원자성입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-217">Ensure that a change to the collection and the notification of that change (through <xref:System.Collections.Specialized.INotifyCollectionChanged>) are atomic; no access from other threads can intervene.</span></span>  <span data-ttu-id="e9f87-218">(일반적으로 무료입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-218">(This is usually free.</span></span> <span data-ttu-id="e9f87-219">For instance, <xref:System.Collections.ObjectModel.ObservableCollection%601> 모든 변경 내용을 동기화에 의해 보호 되는이 보장 합니다.)</span><span class="sxs-lookup"><span data-stu-id="e9f87-219">For instance, <xref:System.Collections.ObjectModel.ObservableCollection%601> guarantees this, provided that all changes are protected by synchronization.)</span></span>

1. <span data-ttu-id="e9f87-220">호출 하는 경우 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, 호출이 UI 스레드에서 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-220">If you call <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, that call must also occur on the UI thread.</span></span>

1. <span data-ttu-id="e9f87-221">여러 UI 스레드에서 동일한 컬렉션을 사용 하려면 호출 해야 <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (및 <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, 필요한 경우) 각 UI 스레드에서 별도로 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-221">If you want to use the same collection on multiple UI threads, you must call <xref:System.Windows.Data.BindingOperations.EnableCollectionSynchronization%2A> (and <xref:System.Windows.Data.BindingOperations.DisableCollectionSynchronization%2A>, if needed) separately on each UI thread.</span></span>

1. <span data-ttu-id="e9f87-222">교착 상태를 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-222">Avoid deadlock.</span></span>  <span data-ttu-id="e9f87-223">동기화를 사용 하도록 선택 되지만 것도 고려해 야 동기화에 WPF의 참여에 응용 프로그램의 역할 이미입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-223">This is already the application's responsibility once it chooses to use synchronization, but it must also take into account WPF's participation in the synchronization.</span></span> <span data-ttu-id="e9f87-224">(참조, 아래).</span><span class="sxs-lookup"><span data-stu-id="e9f87-224">(See more, below.)</span></span>

<span data-ttu-id="e9f87-225">WPF는 다음 동작을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-225">In return, WPF provides the following behavior:</span></span>

- <span data-ttu-id="e9f87-226"><xref:System.Windows.Data.CollectionView> 등록 된 호출 하 여 컬렉션에 액세스 <xref:System.Windows.Data.CollectionSynchronizationCallback> 다음 인수:</span><span class="sxs-lookup"><span data-stu-id="e9f87-226">The <xref:System.Windows.Data.CollectionView> accesses the collection by calling the registered <xref:System.Windows.Data.CollectionSynchronizationCallback> with the following arguments:</span></span>

   - <span data-ttu-id="e9f87-227">`collection`: 대상의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-227">`collection`: the collection of interest.</span></span>
   - <span data-ttu-id="e9f87-228">`context`: 등록 된 컨텍스트 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-228">`context`: the registered context object.</span></span>
   - <span data-ttu-id="e9f87-229">`accessMethod`: 실제 액세스를 수행 하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-229">`accessMethod`: a delegate that performs the actual access.</span></span>
   - <span data-ttu-id="e9f87-230">`writeAccess`: `true` 대리자는 컬렉션을 수정 하는 경우 `false` 그렇지 않은 경우.</span><span class="sxs-lookup"><span data-stu-id="e9f87-230">`writeAccess`: `true` if the delegate will modify the collection; `false` otherwise.</span></span>

   <span data-ttu-id="e9f87-231">프로그램 <xref:System.Windows.Data.CollectionSynchronizationCallback> 컬렉션에 동기화를 설정 해야 (사용 하 여는 `context` 개체 및 `writeAccess` 적절 하 게 값), 호출는 `accessMethod`, 다음 동기화를 놓습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-231">Your <xref:System.Windows.Data.CollectionSynchronizationCallback> should establish synchronization on the collection (using the `context` object and the `writeAccess` value, as appropriate), call the `accessMethod`, then release synchronization.</span></span>

- <span data-ttu-id="e9f87-232"><xref:System.Windows.Data.CollectionView> "의 섀도 복사본"의 컬렉션을 사용 하 여 UI 스레드에서 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-232">The <xref:System.Windows.Data.CollectionView> maintains a "shadow copy" of the collection for use on the UI thread.</span></span>

- <span data-ttu-id="e9f87-233"><xref:System.Windows.Data.CollectionView.CollectionChanged> (모든 스레드)에 도착 하면 이벤트 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-233"><xref:System.Windows.Data.CollectionView.CollectionChanged> events are queued up as they arrive (on any thread).</span></span>

- <span data-ttu-id="e9f87-234">보류 중인 이벤트에 적용 됩니다는 UI 스레드에서 비동기적으로 섀도 복사본 작업을 수행 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="e9f87-234">Pending events are applied to the shadow copy asynchronously on the UI thread when it has the opportunity to do so.</span></span>

- <span data-ttu-id="e9f87-235"><xref:System.Windows.Data.CollectionView> 가 직접 사용 응용 프로그램에 표시 다른 동기화 메커니즘입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-235">The <xref:System.Windows.Data.CollectionView> will not directly use any other synchronization mechanism visible to the application.</span></span> <span data-ttu-id="e9f87-236">이 방법은 WPF의 작동에 교착 상태에 (7 이전 항목 참조).</span><span class="sxs-lookup"><span data-stu-id="e9f87-236">This is WPF's way of helping to avoid deadlock (see the previous item 7).</span></span>   

<span data-ttu-id="e9f87-237">하 한 순수 효과 모든 스레드에서 컬렉션을 변경할 수 있으며에 변경 내용이 결국 표시는 <xref:System.Windows.Controls.ItemsControl> UI 스레드 시간 "동기화"를 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="e9f87-237">The net effect is that you can change the collection on any thread, and those changes eventually appear in the <xref:System.Windows.Controls.ItemsControl> when the UI thread has time to "catch up".</span></span>  <span data-ttu-id="e9f87-238">구현은 스로틀 포화 UI 스레드를 일반 사용자 입력에 응답 함으로써 스레드 수 변경 내용을에 UI 스레드 백그라운드 유지를 보내야 하는 속도를 조정 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-238">The implementation has been tuned to throttle the rate that changes flow into the UI thread to keep background threads from saturating the UI thread and starving the response to normal user input.</span></span>

 <span data-ttu-id="e9f87-239">`context` 매개 변수는 임의의 개체에 전달 되는 `callback`합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-239">The `context` parameter is an arbitrary object that is passed to the `callback`.</span></span> <span data-ttu-id="e9f87-240">에 대 한 액세스를 제어 하는 데는 동기화 메커니즘을 결정 하는 데 사용할 수 `collection`합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-240">You can use it to determine the synchronization mechanism used to control access to `collection`.</span></span> <span data-ttu-id="e9f87-241">`Context` 수 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-241">`Context` can be `null`.</span></span>  
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.Binding GetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.Binding GetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBinding (target As DependencyObject, dp As DependencyProperty) As Binding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::Binding ^ GetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.Binding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-242">
            <c>dp</c>가 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-242">The object where <c>dp</c> is.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-243">바인딩을 검색할 바인딩 대상 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-243">The binding target property from which to retrieve the binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-244">지정된 속성에 설정된 <see cref="T:System.Windows.Data.Binding" /> 개체를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-244">Retrieves the <see cref="T:System.Windows.Data.Binding" /> object that is set on the specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-245">지정된 속성에 설정된 <see cref="T:System.Windows.Data.Binding" /> 개체입니다. <see cref="T:System.Windows.Data.Binding" /> 개체가 설정되지 않은 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-245">The <see cref="T:System.Windows.Data.Binding" /> object set on the given property or <see langword="null" /> if no <see cref="T:System.Windows.Data.Binding" /> object has been set.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-246">
            <paramref name="target" /> 및 <paramref name="dp" /> 매개 변수가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-246">The <paramref name="target" /> and <paramref name="dp" /> parameters cannot be null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingBase GetBindingBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingBase GetBindingBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingBase (target As DependencyObject, dp As DependencyProperty) As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingBase ^ GetBindingBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-247">
            <c>dp</c>가 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-247">The object where <c>dp</c> is.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-248">
            <see cref="T:System.Windows.Data.BindingBase" /> 개체를 검색할 바인딩 대상 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-248">The binding target property from which to retrieve the <see cref="T:System.Windows.Data.BindingBase" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-249">지정된 속성에 설정된 <see cref="T:System.Windows.Data.BindingBase" /> 개체를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-249">Retrieves the <see cref="T:System.Windows.Data.BindingBase" /> object that is set on the specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-250">지정된 속성에 설정된 <see cref="T:System.Windows.Data.BindingBase" /> 개체입니다. 바인딩 개체가 설정되지 않은 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-250">The <see cref="T:System.Windows.Data.BindingBase" /> object that is set on the given property or <see langword="null" /> if no binding object has been set.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-251"><xref:System.Windows.Data.BindingBase> 클래스에 대 한 공통 기본 클래스는는 <xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, 및 <xref:System.Windows.Data.MultiBinding> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-251">The <xref:System.Windows.Data.BindingBase> class is the common base class for the <xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, and <xref:System.Windows.Data.MultiBinding> classes.</span></span> <span data-ttu-id="e9f87-252">사용할 수는 <xref:System.Windows.Data.BindingOperations.GetBinding%2A>, <xref:System.Windows.Data.BindingOperations.GetPriorityBinding%2A>, 및 <xref:System.Windows.Data.BindingOperations.GetMultiBinding%2A> 된 바인딩 형식을 미리 알고 있으면 메서드는 속성에 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-252">You can use the <xref:System.Windows.Data.BindingOperations.GetBinding%2A>, <xref:System.Windows.Data.BindingOperations.GetPriorityBinding%2A>, and <xref:System.Windows.Data.BindingOperations.GetMultiBinding%2A> methods if you know in advance the type of binding that is set on the property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-253">
            <paramref name="target" /> 및 <paramref name="dp" /> 매개 변수는 <see langword="null" />일 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-253">The <paramref name="target" /> and <paramref name="dp" /> parameters cannot be <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpression (target As DependencyObject, dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-254">
            <c>dp</c>가 있는 바인딩 대상 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-254">The binding target object where <c>dp</c> is.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-255">
            <see cref="T:System.Windows.Data.BindingExpression" /> 개체를 검색할 바인딩 대상 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-255">The binding target property from which to retrieve the <see cref="T:System.Windows.Data.BindingExpression" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-256">지정한 개체에서 지정한 바인딩 대상 속성에 연결된 된 <see cref="T:System.Windows.Data.BindingExpression" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-256">Returns the <see cref="T:System.Windows.Data.BindingExpression" /> object associated with the specified binding target property on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-257">지정된 속성에 연결된 <see cref="T:System.Windows.Data.BindingExpression" /> 개체입니다. 개체가 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-257">The <see cref="T:System.Windows.Data.BindingExpression" /> object associated with the given property or <see langword="null" /> if none exists.</span>
          </span>
          <span data-ttu-id="e9f87-258">속성에 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 개체가 설정된 경우 <see cref="P:System.Windows.Data.PriorityBindingExpression.ActiveBindingExpression" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-258">If a <see cref="T:System.Windows.Data.PriorityBindingExpression" /> object is set on the property, the <see cref="P:System.Windows.Data.PriorityBindingExpression.ActiveBindingExpression" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-259"><xref:System.Windows.Data.BindingExpression> 개체 바인딩 소스에서 바인딩 대상 사이의 연결을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-259">The <xref:System.Windows.Data.BindingExpression> object maintains the connection between the binding source and the binding target.</span></span> <span data-ttu-id="e9f87-260">가져올 수 있습니다는 <xref:System.Windows.Data.BindingExpression> 이 정적 메서드를 호출 하 여 또는 호출 하 여 개체는 <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> 메서드를 데이터 바인딩된 <xref:System.Windows.FrameworkElement> 또는 <xref:System.Windows.FrameworkContentElement> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-260">You can obtain the <xref:System.Windows.Data.BindingExpression> object by calling this static method or by calling the <xref:System.Windows.FrameworkElement.GetBindingExpression%2A> method on a data-bound <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9f87-261">다음 예제에서는 구현은 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트 처리기를 사용 하는 <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A> 를 얻는 메서드를는 <xref:System.Windows.Data.BindingExpression> 를 호출 하는 <xref:System.Windows.Data.BindingExpression.DataItem%2A> 바인딩 소스 개체에 액세스 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-261">The following example shows the implementation of a <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler that uses the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A> method to obtain the <xref:System.Windows.Data.BindingExpression> and then calls the <xref:System.Windows.Data.BindingExpression.DataItem%2A> property to access the binding source object.</span></span>  
  
 <span data-ttu-id="e9f87-262"><xref:System.Windows.Controls.TextBlock> `SavingsText` 는 바인딩 대상 개체 및 <xref:System.Windows.Controls.TextBlock.Text%2A> 바인딩 대상 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-262">The <xref:System.Windows.Controls.TextBlock>`SavingsText` is the binding target object and <xref:System.Windows.Controls.TextBlock.Text%2A> is the binding target property.</span></span>  
  
 [!code-csharp[DirectionalBinding#OnRentRaise](~/samples/snippets/csharp/VS_Snippets_Wpf/DirectionalBinding/CSharp/Page1.xaml.cs#onrentraise)]
 [!code-vb[DirectionalBinding#OnRentRaise](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DirectionalBinding/VisualBasic/DirectionalBinding.vb#onrentraise)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-263">
            <paramref name="target" /> 및 <paramref name="dp" /> 매개 변수는 <see langword="null" />일 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-263">The <paramref name="target" /> and <paramref name="dp" /> parameters cannot be <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpressionBase">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase GetBindingExpressionBase (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase GetBindingExpressionBase(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetBindingExpressionBase (target As DependencyObject, dp As DependencyProperty) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ GetBindingExpressionBase(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-264">
            <c>dp</c>가 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-264">The object where <c>dp</c> is.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-265">
            <see cref="T:System.Windows.Data.BindingExpressionBase" /> 개체를 검색할 바인딩 대상 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-265">The binding target property from which to retrieve the <see cref="T:System.Windows.Data.BindingExpressionBase" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-266">지정된 속성에 설정된 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 개체를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-266">Retrieves the <see cref="T:System.Windows.Data.BindingExpressionBase" /> object that is set on the specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-267">지정된 속성에 설정된 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 개체입니다. 바인딩 개체가 설정되지 않은 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-267">The <see cref="T:System.Windows.Data.BindingExpressionBase" /> object that is set on the given property or <see langword="null" /> if no binding object has been set.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-268"><xref:System.Windows.Data.BindingExpressionBase> 클래스에 대 한 공통 기본 클래스는는 <xref:System.Windows.Data.BindingExpression>, <xref:System.Windows.Data.PriorityBindingExpression>, 및 <xref:System.Windows.Data.MultiBindingExpression> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-268">The <xref:System.Windows.Data.BindingExpressionBase> class is the common base class for the <xref:System.Windows.Data.BindingExpression>, <xref:System.Windows.Data.PriorityBindingExpression>, and <xref:System.Windows.Data.MultiBindingExpression> classes.</span></span> <span data-ttu-id="e9f87-269">사용할 수는 <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>, <xref:System.Windows.Data.BindingOperations.GetPriorityBindingExpression%2A>, 및 <xref:System.Windows.Data.BindingOperations.GetMultiBindingExpression%2A> 방법을 알고 있는 경우 미리 하는 속성에 설정 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-269">You can use the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A>, <xref:System.Windows.Data.BindingOperations.GetPriorityBindingExpression%2A>, and <xref:System.Windows.Data.BindingOperations.GetMultiBindingExpression%2A> methods if you know in advance type of binding that is set on the property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-270">
            <paramref name="target" /> 및 <paramref name="dp" /> 매개 변수가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-270">The <paramref name="target" /> and <paramref name="dp" /> parameters cannot be null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBinding GetMultiBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBinding GetMultiBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBinding (target As DependencyObject, dp As DependencyProperty) As MultiBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBinding ^ GetMultiBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-271">
            <c>dp</c>가 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-271">The object where <c>dp</c> is.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-272">바인딩을 검색할 바인딩 대상 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-272">The binding target property from which to retrieve the binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-273">지정된 속성에 설정된 <see cref="T:System.Windows.Data.MultiBinding" /> 개체를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-273">Retrieves the <see cref="T:System.Windows.Data.MultiBinding" /> object that is set on the specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-274">지정된 속성에 설정된 <see cref="T:System.Windows.Data.MultiBinding" /> 개체입니다. <see cref="T:System.Windows.Data.MultiBinding" /> 개체가 설정되지 않은 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-274">The <see cref="T:System.Windows.Data.MultiBinding" /> object set on the given property or <see langword="null" /> if no <see cref="T:System.Windows.Data.MultiBinding" /> object has been set.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-275">
            <paramref name="target" /> 및 <paramref name="dp" /> 매개 변수가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-275">The <paramref name="target" /> and <paramref name="dp" /> parameters cannot be null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetMultiBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.MultiBindingExpression GetMultiBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.MultiBindingExpression GetMultiBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetMultiBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetMultiBindingExpression (target As DependencyObject, dp As DependencyProperty) As MultiBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::MultiBindingExpression ^ GetMultiBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.MultiBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-276">
            <c>dp</c>가 있는 바인딩 대상 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-276">The binding target object where <c>dp</c> is.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-277">
            <see cref="T:System.Windows.Data.MultiBindingExpression" /> 개체를 검색할 바인딩 대상 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-277">The binding target property from which to retrieve the <see cref="T:System.Windows.Data.MultiBindingExpression" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-278">지정한 개체에서 지정한 바인딩 대상 속성에 연결된 된 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-278">Returns the <see cref="T:System.Windows.Data.MultiBindingExpression" /> object associated with the specified binding target property on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-279">지정된 속성에 연결된 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 개체입니다. 개체가 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-279">The <see cref="T:System.Windows.Data.MultiBindingExpression" /> object associated with the given property or <see langword="null" /> if none exists.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-280">지정된 속성에 연결된 <xref:System.Windows.Data.MultiBindingExpression> 개체입니다. 개체가 없는 경우 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-280">The <xref:System.Windows.Data.MultiBindingExpression> object associated with the given property or `null` if none exists.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-281">
            <paramref name="target" /> 및 <paramref name="dp" /> 매개 변수는 <see langword="null" />일 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-281">The <paramref name="target" /> and <paramref name="dp" /> parameters cannot be <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetMultiBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBinding GetPriorityBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBinding GetPriorityBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBinding (target As DependencyObject, dp As DependencyProperty) As PriorityBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBinding ^ GetPriorityBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-282">
            <c>dp</c>가 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-282">The object where <c>dp</c> is.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-283">바인딩을 검색할 바인딩 대상 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-283">The binding target property from which to retrieve the binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-284">지정된 속성에 설정된 <see cref="T:System.Windows.Data.PriorityBinding" /> 개체를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-284">Retrieves the <see cref="T:System.Windows.Data.PriorityBinding" /> object that is set on the specified property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-285">지정된 속성에 설정된 <see cref="T:System.Windows.Data.PriorityBinding" /> 개체입니다. <see cref="T:System.Windows.Data.PriorityBinding" /> 개체가 설정되지 않은 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-285">The <see cref="T:System.Windows.Data.PriorityBinding" /> object set on the given property or <see langword="null" /> if no <see cref="T:System.Windows.Data.PriorityBinding" /> object has been set.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-286">
            <paramref name="target" /> 및 <paramref name="dp" /> 매개 변수가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-286">The <paramref name="target" /> and <paramref name="dp" /> parameters cannot be null.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetPriorityBindingExpression">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.PriorityBindingExpression GetPriorityBindingExpression(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetPriorityBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPriorityBindingExpression (target As DependencyObject, dp As DependencyProperty) As PriorityBindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::PriorityBindingExpression ^ GetPriorityBindingExpression(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.PriorityBindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-287">
            <c>dp</c>가 있는 바인딩 대상 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-287">The binding target object where <c>dp</c> is.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-288">
            <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 개체를 검색할 바인딩 대상 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-288">The binding target property from which to retrieve the <see cref="T:System.Windows.Data.PriorityBindingExpression" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-289">지정한 개체에서 지정한 바인딩 대상 속성에 연결된 된 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-289">Returns the <see cref="T:System.Windows.Data.PriorityBindingExpression" /> object associated with the specified binding target property on the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-290">지정된 속성에 연결된 <see cref="T:System.Windows.Data.PriorityBindingExpression" /> 개체입니다. 개체가 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-290">The <see cref="T:System.Windows.Data.PriorityBindingExpression" /> object associated with the given property or <see langword="null" /> if none exists.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-291">
            <paramref name="target" /> 및 <paramref name="dp" /> 매개 변수는 <see langword="null" />일 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-291">The <paramref name="target" /> and <paramref name="dp" /> parameters cannot be <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpressionBase(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetBindingExpression(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.Data.BindingOperations.GetPriorityBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindingGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingGroup&gt; GetSourceUpdatingBindingGroups(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindingGroups (root As DependencyObject) As ReadOnlyCollection(Of BindingGroup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingGroup ^&gt; ^ GetSourceUpdatingBindingGroups(System::Windows::DependencyObject ^ root);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="root">
          <span data-ttu-id="e9f87-292">바인딩 그룹을 가져올 루트 <see cref="T:System.Windows.UIElement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-292">The root <see cref="T:System.Windows.UIElement" /> to get binding groups for.</span>
          </span>
          <span data-ttu-id="e9f87-293">이 메서드는 이 요소 또는 해당 하위 항목 요소와 연결된 <see cref="T:System.Windows.Data.BindingGroup" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-293">This method returns <see cref="T:System.Windows.Data.BindingGroup" /> objects that are associated with this element or its descendant elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-294">잘못된 값이 있거나 대상 값이 소스를 업데이트하지 않은 모든 <see cref="T:System.Windows.Data.BindingGroup" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-294">Gets all <see cref="T:System.Windows.Data.BindingGroup" /> objects that have invalid values or target values have not been updated the source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-295">지정된 요소와 연결되었고 값이 유효하지 않거나 대상 값이 소스를 업데이트하지 않은 <see cref="T:System.Windows.Data.BindingGroup" /> 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-295">A collection of <see cref="T:System.Windows.Data.BindingGroup" /> objects that are associated with the specified element and have invalid values or target values have not been updated the source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-296">경우 `root` 은 `null`, <xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups%2A> 모두 반환 <xref:System.Windows.Data.BindingGroup> 유효 하지 않거나 업데이트 되지 않은 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-296">If `root` is `null`, <xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindingGroups%2A> returns all <xref:System.Windows.Data.BindingGroup> objects that are invalid or have not been updated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSourceUpdatingBindings">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings (System.Windows.DependencyObject root);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Windows.Data.BindingExpressionBase&gt; GetSourceUpdatingBindings(class System.Windows.DependencyObject root) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSourceUpdatingBindings (root As DependencyObject) As ReadOnlyCollection(Of BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Windows::Data::BindingExpressionBase ^&gt; ^ GetSourceUpdatingBindings(System::Windows::DependencyObject ^ root);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Windows.Data.BindingExpressionBase&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="root" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="root">
          <span data-ttu-id="e9f87-297">바인딩 그룹을 가져올 루트 <see cref="T:System.Windows.UIElement" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-297">The root <see cref="T:System.Windows.UIElement" /> to get binding groups for.</span>
          </span>
          <span data-ttu-id="e9f87-298">이 메서드는 이 요소 또는 해당 하위 항목 요소와 연결된 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-298">This method returns <see cref="T:System.Windows.Data.BindingExpressionBase" /> objects that are associated with this element or its descendant elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-299">잘못된 값이 있거나 대상 값이 소스를 업데이트하지 않은 모든 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-299">Gets all <see cref="T:System.Windows.Data.BindingExpressionBase" /> objects that have invalid values or target values have not been updated the source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-300">지정된 요소와 연결되었고 값이 유효하지 않거나 대상 값이 소스를 업데이트하지 않은 <see cref="T:System.Windows.Data.BindingExpressionBase" /> 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-300">A collection of <see cref="T:System.Windows.Data.BindingExpressionBase" /> objects that are associated with the specified element and have invalid values or target values have not been updated the source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-301">경우 `root` 은 `null`, <xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings%2A> 모두 반환 <xref:System.Windows.Data.BindingExpressionBase> 유효 하지 않거나 업데이트 되지 않은 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-301">If `root` is `null`, <xref:System.Windows.Data.BindingOperations.GetSourceUpdatingBindings%2A> returns all <xref:System.Windows.Data.BindingExpressionBase> objects that are invalid or have not been updated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDataBound">
      <MemberSignature Language="C#" Value="public static bool IsDataBound (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDataBound(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.IsDataBound(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDataBound (target As DependencyObject, dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDataBound(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-302">
            <c>dp</c>가 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-302">The object where <c>dp</c> is.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-303">확인할 종속성 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-303">The dependency property to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-304">지정된 속성이 현재 데이터 바인딩되어 있는지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-304">Returns a value that indicates whether the specified property is currently data-bound.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-305">지정된 속성이 데이터 바인딩되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-305">
              <see langword="true" /> if the specified property is data-bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-306">
            <paramref name="target" />이 <see langword="null" />인 경우입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-306">If <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public static System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyObject target, System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyObject target, class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingOperations.SetBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetBinding (target As DependencyObject, dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyObject ^ target, System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="e9f87-307">바인딩의 바인딩 대상입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-307">The binding target of the binding.</span>
          </span>
        </param>
        <param name="dp">
          <span data-ttu-id="e9f87-308">바인딩의 대상 속성입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-308">The target property of the binding.</span>
          </span>
        </param>
        <param name="binding">
          <span data-ttu-id="e9f87-309">바인딩을 설명하는 <see cref="T:System.Windows.Data.BindingBase" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-309">The <see cref="T:System.Windows.Data.BindingBase" /> object that describes the binding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e9f87-310">
            <see cref="T:System.Windows.Data.BindingExpressionBase" />의 새 인스턴스를 만들어 지정된 바인딩 대상 속성과 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-310">Creates and associates a new instance of <see cref="T:System.Windows.Data.BindingExpressionBase" /> with the specified binding target property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e9f87-311">지정된 속성을 사용하여 만들고 연결하는 <see cref="T:System.Windows.Data.BindingExpressionBase" />의 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-311">The instance of <see cref="T:System.Windows.Data.BindingExpressionBase" /> created for and associated with the specified property.</span>
          </span>
          <span data-ttu-id="e9f87-312">
            <see cref="T:System.Windows.Data.BindingExpressionBase" /> 클래스는 <see cref="T:System.Windows.Data.BindingExpression" />, <see cref="T:System.Windows.Data.MultiBindingExpression" /> 및 <see cref="T:System.Windows.Data.PriorityBindingExpression" />의 기본 클래스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-312">The <see cref="T:System.Windows.Data.BindingExpressionBase" /> class is the base class of <see cref="T:System.Windows.Data.BindingExpression" />, <see cref="T:System.Windows.Data.MultiBindingExpression" />, and <see cref="T:System.Windows.Data.PriorityBindingExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9f87-313">이 메서드는의 새 인스턴스를 만듭니다는 <xref:System.Windows.Data.BindingExpressionBase> 특정된 종속성 속성이 지정된 된 개체의 인스턴스를 연결 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-313">This method creates a new instance of a <xref:System.Windows.Data.BindingExpressionBase> and associates the instance with the given dependency property of the given object.</span></span> <span data-ttu-id="e9f87-314">이 메서드는 임의의에 바인딩을 연결 하는 방법은 <xref:System.Windows.DependencyObject> 자체 SetBinding 메서드를 노출 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-314">This method is the way to attach a binding to an arbitrary <xref:System.Windows.DependencyObject> that may not expose its own SetBinding method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9f87-315">다음 예제에서는이 메서드를 사용 하 여 바인딩을 설정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-315">The following example shows how to use this method to set a binding.</span></span> <span data-ttu-id="e9f87-316">이 예제에서는 `myNewBindDef` 는 <xref:System.Windows.Data.Binding> 바인딩을 설명 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-316">In this example, `myNewBindDef` is a <xref:System.Windows.Data.Binding> object that describes the binding.</span></span> <span data-ttu-id="e9f87-317">바인딩 대상이 `myDateText`의 인스턴스는 <xref:System.Windows.Controls.TextBlock> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="e9f87-317">The binding target is `myDateText`, an instance of the <xref:System.Windows.Controls.TextBlock> class.</span></span>  
  
 [!code-csharp[BindConversion#BOSetBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/BindConversion/CSharp/Window1.xaml.cs#bosetbinding)]
 [!code-vb[BindConversion#BOSetBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindConversion/visualbasic/window1.xaml.vb#bosetbinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e9f87-318">
            <paramref name="binding" /> 매개 변수는 <see langword="null" />일 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e9f87-318">The <paramref name="binding" /> parameter cannot be <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>