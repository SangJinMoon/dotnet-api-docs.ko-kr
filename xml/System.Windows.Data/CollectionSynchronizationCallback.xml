<Type Name="CollectionSynchronizationCallback" FullName="System.Windows.Data.CollectionSynchronizationCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="171474f111aec3032c84e644f76095833b5d15ca" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52195660" /></Metadata><TypeSignature Language="C#" Value="public delegate void CollectionSynchronizationCallback(IEnumerable collection, object context, Action accessMethod, bool writeAccess);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CollectionSynchronizationCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.CollectionSynchronizationCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CollectionSynchronizationCallback(collection As IEnumerable, context As Object, accessMethod As Action, writeAccess As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CollectionSynchronizationCallback(IEnumerable ^ collection, System::Object ^ context, Action ^ accessMethod, bool writeAccess);" />
  <TypeSignature Language="F#" Value="type CollectionSynchronizationCallback = delegate of IEnumerable * obj * Action * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="collection" Type="System.Collections.IEnumerable" />
    <Parameter Name="context" Type="System.Object" />
    <Parameter Name="accessMethod" Type="System.Action" />
    <Parameter Name="writeAccess" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="collection"><span data-ttu-id="fe93c-101">생성 된 것 이외의 다른 스레드에서 액세스할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="fe93c-101">The collection to access on a thread other than the one that created it.</span></span></param>
    <param name="context"><span data-ttu-id="fe93c-102">컬렉션을 동기화 하는 데 사용 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="fe93c-102">An object used to synchronize the collection.</span></span></param>
    <param name="accessMethod"><span data-ttu-id="fe93c-103">컬렉션에 대 한 작업을 수행 하는 메서드를 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="fe93c-103">A delegate to the method that performs the operation on the collection.</span></span></param>
    <param name="writeAccess"><span data-ttu-id="fe93c-104"><see langword="true" /> 하는 경우 <paramref name="accessMethod" /> ; 컬렉션에 쓰면이 고, 그렇지 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="fe93c-104"><see langword="true" /> if <paramref name="accessMethod" /> writes to the collection; otherwise, <see langword="false" />.</span></span></param>
    <summary><span data-ttu-id="fe93c-105">크로스 스레드 액세스에 대 한 컬렉션을 동기화 하는 메서드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="fe93c-105">Represent the method that synchronizes a collection for cross-thread access.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>