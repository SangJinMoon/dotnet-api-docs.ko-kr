<Type Name="Mouse" FullName="System.Windows.Input.Mouse">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ad0dfb834b31186d348d87b3d66c5ce6942392ae" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52198949" /></Metadata><TypeSignature Language="C#" Value="public static class Mouse" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Mouse extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Mouse" />
  <TypeSignature Language="VB.NET" Value="Public Class Mouse" />
  <TypeSignature Language="C++ CLI" Value="public ref class Mouse abstract sealed" />
  <TypeSignature Language="F#" Value="type Mouse = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b4b05-101">특정 스레드에 대한 마우스 디바이스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-101">Represents the mouse device to a specific thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-102"><xref:System.Windows.Input.Mouse> 클래스는 마우스 관련 이벤트, 메서드 및 마우스의 상태에 대 한 정보를 제공 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-102">The <xref:System.Windows.Input.Mouse> class provides mouse related events, methods and, properties which provide information regarding the state of the mouse.</span></span>  
  
 <span data-ttu-id="b4b05-103">각 이벤트는 <xref:System.Windows.Input.Mouse> 정의 연결된 된 이벤트는 기본 요소 클래스에 의해 다시 노출 <xref:System.Windows.UIElement> 및 <xref:System.Windows.ContentElement> 새 라우트된 이벤트로 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-103">Each event that <xref:System.Windows.Input.Mouse> defines as an attached event is also re-exposed by the base element classes <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> as a new routed event.</span></span> <span data-ttu-id="b4b05-104">일반적으로 것에서 응용 프로그램에 대 한 마우스 이벤트를 처리 하는 편리한 <xref:System.Windows.UIElement> 및 <xref:System.Windows.ContentElement>를 사용 하는 대신는 <xref:System.Windows.Input.Mouse> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-104">Generally, it is more convenient to handle mouse events for an application on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>, rather than using the <xref:System.Windows.Input.Mouse> events.</span></span> <span data-ttu-id="b4b05-105">자세한 내용은 참조 하세요 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-105">For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-106">정적 멤버를 <xref:System.Windows.Input.Mouse> 주 클래스 대리자 <xref:System.Windows.Input.MouseDevice> 호출 스레드의 입력된 관리자입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-106">The static members of the <xref:System.Windows.Input.Mouse> class delegate to the primary <xref:System.Windows.Input.MouseDevice> of the calling thread's input manager.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddGotMouseCaptureHandler">
      <MemberSignature Language="C#" Value="public static void AddGotMouseCaptureHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddGotMouseCaptureHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddGotMouseCaptureHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddGotMouseCaptureHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddGotMouseCaptureHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddGotMouseCaptureHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-107">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-107">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-108">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-108">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-109"><see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-109">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLostMouseCaptureHandler">
      <MemberSignature Language="C#" Value="public static void AddLostMouseCaptureHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddLostMouseCaptureHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddLostMouseCaptureHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddLostMouseCaptureHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddLostMouseCaptureHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddLostMouseCaptureHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-110">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-110">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-111">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-111">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-112"><see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-112">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseDownHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseDownHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseDownHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseDownHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-113">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-113">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-114">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-114">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-115"><see cref="E:System.Windows.Input.Mouse.MouseDown" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-115">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseEnterHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseEnterHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseEnterHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseEnterHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseEnterHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseEnterHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseEnterHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-116">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-116">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-117">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-117">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-118"><see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-118">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseLeaveHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseLeaveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseLeaveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseLeaveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseLeaveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseLeaveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseLeaveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-119">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-119">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-120">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-120">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-121"><see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-121">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseMoveHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseMoveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseMoveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseMoveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseMoveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseMoveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseMoveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-122">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-122">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-123">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-123">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-124"><see cref="E:System.Windows.Input.Mouse.MouseMove" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-124">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseUpHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseUpHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseUpHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseUpHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-125">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-125">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-126">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-126">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-127"><see cref="E:System.Windows.Input.Mouse.MouseUp" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-127">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMouseWheelHandler">
      <MemberSignature Language="C#" Value="public static void AddMouseWheelHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMouseWheelHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseWheelEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMouseWheelHandler (element As DependencyObject, handler As MouseWheelEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMouseWheelHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseWheelEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddMouseWheelHandler : System.Windows.DependencyObject * System.Windows.Input.MouseWheelEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddMouseWheelHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseWheelEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-128">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-128">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-129">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-129">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-130"><see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-130">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseDownHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseDownHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseDownHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseDownHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-131">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-131">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-132">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-132">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-133"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-133">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseDownOutsideCapturedElementHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseDownOutsideCapturedElementHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseDownOutsideCapturedElementHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseDownOutsideCapturedElementHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseDownOutsideCapturedElementHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseDownOutsideCapturedElementHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseDownOutsideCapturedElementHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-134">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-134">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-135">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-135">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-136"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-136">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseMoveHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseMoveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseMoveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseMoveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseMoveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseMoveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseMoveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-137">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-137">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-138">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-138">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-139"><see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-139">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseUpHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseUpHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseUpHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseUpHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-140">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-140">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-141">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-141">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-142"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-142">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseUpOutsideCapturedElementHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseUpOutsideCapturedElementHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseUpOutsideCapturedElementHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseUpOutsideCapturedElementHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseUpOutsideCapturedElementHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseUpOutsideCapturedElementHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseUpOutsideCapturedElementHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-143">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-143">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-144">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-144">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-145"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-145">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPreviewMouseWheelHandler">
      <MemberSignature Language="C#" Value="public static void AddPreviewMouseWheelHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPreviewMouseWheelHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseWheelEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddPreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddPreviewMouseWheelHandler (element As DependencyObject, handler As MouseWheelEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPreviewMouseWheelHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseWheelEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddPreviewMouseWheelHandler : System.Windows.DependencyObject * System.Windows.Input.MouseWheelEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddPreviewMouseWheelHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseWheelEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-146">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-146">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-147">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-147">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-148"><see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-148">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddQueryCursorHandler">
      <MemberSignature Language="C#" Value="public static void AddQueryCursorHandler (System.Windows.DependencyObject element, System.Windows.Input.QueryCursorEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddQueryCursorHandler(class System.Windows.DependencyObject element, class System.Windows.Input.QueryCursorEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.AddQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddQueryCursorHandler (element As DependencyObject, handler As QueryCursorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddQueryCursorHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::QueryCursorEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member AddQueryCursorHandler : System.Windows.DependencyObject * System.Windows.Input.QueryCursorEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.AddQueryCursorHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.QueryCursorEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-149">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-149">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-150">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-150">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-151"><see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 연결된 이벤트에 대한 처리기를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-151">Adds a handler for the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Capture">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-152">지정한 요소로 마우스 입력을 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-152">Captures mouse input to the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-153">마우스를 캡처한 요소 테두리 내에서 커서 인지 여부에 관계 없이 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-153">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span>  
  
 <span data-ttu-id="b4b05-154">경우는 <xref:System.Windows.Input.CaptureMode> 지정 하지 않으면 기본값 <xref:System.Windows.Input.CaptureMode> 는 <xref:System.Windows.Input.CaptureMode.Element>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-154">If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode.Element>.</span></span>  
  
 <span data-ttu-id="b4b05-155">마우스 캡처를 해제 하려면 호출 <xref:System.Windows.Input.Mouse.Capture%2A> 전달 `null` 를 캡처할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-155">To release mouse capture, call <xref:System.Windows.Input.Mouse.Capture%2A> passing `null` as the element to capture.</span></span>  
  
 <span data-ttu-id="b4b05-156">마우스 캡처 되었으면 경우는 <xref:System.Windows.Input.Mouse.MouseDown> 또는 <xref:System.Windows.Input.Mouse.MouseUp> 이벤트가 발생 하 고 마우스 아래 요소로 입력 하지 않습니다 <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> 및 <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> 먼저 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-156">If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.</span></span>  <span data-ttu-id="b4b05-157">이 통해 캡처된 요소 전에 캡처를 해제 하기를 <xref:System.Windows.Input.Mouse.MouseDown> 및 <xref:System.Windows.Input.Mouse.MouseUp> 이벤트 라우팅됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-157">This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static bool Capture (System.Windows.IInputElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Capture(class System.Windows.IInputElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Capture (element As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Capture(System::Windows::IInputElement ^ element);" />
      <MemberSignature Language="F#" Value="static member Capture : System.Windows.IInputElement -&gt; bool" Usage="System.Windows.Input.Mouse.Capture element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-158">마우스를 캡처할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-158">The element to capture the mouse.</span></span></param>
        <summary><span data-ttu-id="b4b05-159">지정한 요소로 마우스 입력을 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-159">Captures mouse input to the specified element.</span></span></summary>
        <returns><span data-ttu-id="b4b05-160">요소에 마우스가 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-160"><see langword="true" /> if the element was able to capture the mouse; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-161">마우스를 캡처한 요소 테두리 내에서 커서 인지 여부에 관계 없이 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-161">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span>  
  
 <span data-ttu-id="b4b05-162">경우는 <xref:System.Windows.Input.CaptureMode> 지정 하지 않으면 기본값 <xref:System.Windows.Input.CaptureMode> 는 <xref:System.Windows.Input.CaptureMode.Element>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-162">If a <xref:System.Windows.Input.CaptureMode> is not specified, the default <xref:System.Windows.Input.CaptureMode> is <xref:System.Windows.Input.CaptureMode.Element>.</span></span>  
  
 <span data-ttu-id="b4b05-163">마우스 캡처를 해제 하려면 호출 <xref:System.Windows.Input.Mouse.Capture%2A> 전달 `null` 를 캡처할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-163">To release mouse capture, call <xref:System.Windows.Input.Mouse.Capture%2A> passing `null` as the element to capture.</span></span>  
  
 <span data-ttu-id="b4b05-164">마우스 캡처 되었으면 경우는 <xref:System.Windows.Input.Mouse.MouseDown> 또는 <xref:System.Windows.Input.Mouse.MouseUp> 이벤트가 발생 하 고 마우스 아래 요소로 입력 하지 않습니다 <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> 및 <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> 먼저 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-164">If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.</span></span>  <span data-ttu-id="b4b05-165">이 통해 캡처된 요소 전에 캡처를 해제 하기를 <xref:System.Windows.Input.Mouse.MouseDown> 및 <xref:System.Windows.Input.Mouse.MouseUp> 이벤트 라우팅됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-165">This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4b05-166">다음 예제에서는 사용 하 여 특정 요소에 마우스를 캡처하는 방법의 <xref:System.Windows.Input.Mouse.Capture%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-166">The following example shows how to capture the mouse to a specific element by using the <xref:System.Windows.Input.Mouse.Capture%2A> method.</span></span>  
  
 [!code-csharp[MouseCaptureSample#MouseCapturSampleCaptureElement](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseCaptureSample/CSharp/Window1.xaml.cs#mousecaptursamplecaptureelement)]
 [!code-vb[MouseCaptureSample#MouseCapturSampleCaptureElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseCaptureSample/visualbasic/window1.xaml.vb#mousecaptursamplecaptureelement)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static bool Capture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Capture(class System.Windows.IInputElement element, valuetype System.Windows.Input.CaptureMode captureMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Capture(System::Windows::IInputElement ^ element, System::Windows::Input::CaptureMode captureMode);" />
      <MemberSignature Language="F#" Value="static member Capture : System.Windows.IInputElement * System.Windows.Input.CaptureMode -&gt; bool" Usage="System.Windows.Input.Mouse.Capture (element, captureMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
        <Parameter Name="captureMode" Type="System.Windows.Input.CaptureMode" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-167">마우스를 캡처할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-167">The element to capture the mouse.</span></span></param>
        <param name="captureMode"><span data-ttu-id="b4b05-168">사용할 캡처 정책입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-168">The capture policy to use.</span></span></param>
        <summary><span data-ttu-id="b4b05-169">지정한 <see cref="T:System.Windows.Input.CaptureMode" />를 사용하여 지정한 요소로 마우스 입력을 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-169">Captures mouse input to the specified element using the specified <see cref="T:System.Windows.Input.CaptureMode" />.</span></span></summary>
        <returns><span data-ttu-id="b4b05-170">요소에 마우스가 캡처되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-170"><see langword="true" /> if the element was able to capture the mouse; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-171">마우스를 캡처한 요소 테두리 내에서 커서 인지에 관계 없이 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-171">When an element captures the mouse, it receives mouse input whether the cursor is within its borders.</span></span>  
  
 <span data-ttu-id="b4b05-172">마우스 캡처를 해제 하려면 호출 <xref:System.Windows.Input.Mouse.Capture%2A> 전달 `null` 를 캡처할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-172">To release mouse capture, call <xref:System.Windows.Input.Mouse.Capture%2A> passing `null` as the element to capture.</span></span>  
  
 <span data-ttu-id="b4b05-173">마우스 캡처 되었으면 경우는 <xref:System.Windows.Input.Mouse.MouseDown> 또는 <xref:System.Windows.Input.Mouse.MouseUp> 이벤트가 발생 하 고 마우스 아래 요소로 입력 하지 않습니다 <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> 및 <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> 먼저 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-173">If the mouse is captured when a <xref:System.Windows.Input.Mouse.MouseDown> or <xref:System.Windows.Input.Mouse.MouseUp> event is raised and the input is not going to the element underneath the mouse, <xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement> and <xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement> are raised first.</span></span>  <span data-ttu-id="b4b05-174">이 통해 캡처된 요소 전에 캡처를 해제 하기를 <xref:System.Windows.Input.Mouse.MouseDown> 및 <xref:System.Windows.Input.Mouse.MouseUp> 이벤트 라우팅됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-174">This enables the captured element a chance to release capture before the <xref:System.Windows.Input.Mouse.MouseDown> and <xref:System.Windows.Input.Mouse.MouseUp> events are routed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4b05-175">다음 예제에서는 사용 하 여 특정 요소에 마우스를 캡처하는 방법의 <xref:System.Windows.Input.Mouse.Capture%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-175">The following example shows how to capture the mouse to a specific element by using the <xref:System.Windows.Input.Mouse.Capture%2A> method.</span></span>  
  
 [!code-csharp[MouseCaptureSample#MouseCapturSampleCaptureElement](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseCaptureSample/CSharp/Window1.xaml.cs#mousecaptursamplecaptureelement)]
 [!code-vb[MouseCaptureSample#MouseCapturSampleCaptureElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseCaptureSample/visualbasic/window1.xaml.vb#mousecaptursamplecaptureelement)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Captured">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement Captured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.IInputElement Captured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.Captured" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Captured As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::IInputElement ^ Captured { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Captured : System.Windows.IInputElement" Usage="System.Windows.Input.Mouse.Captured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-176">마우스를 캡처한 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-176">Gets the element that has captured the mouse.</span></span></summary>
        <value><span data-ttu-id="b4b05-177">마우스에서 캡처한 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-177">The element captured by the mouse.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-178">마우스를 캡처한 요소 테두리 내에서 커서 인지 여부에 관계 없이 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-178">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span> <span data-ttu-id="b4b05-179">마우스는 끌어서 놓기 작업 중에 이러한 방식으로 캡처되는 일반적으로 하 고 끌어서 놓기 작업의 삭제 동작이 발생할 때까지 캡처를 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-179">The mouse is typically captured in this manner only during drag-and-drop operations, and retains capture until the drop action of the drag-and-drop operation occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4b05-180">다음 예제에는 마우스 캡처가 있는 요소를 가져오는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-180">The follow example shows how to obtain the element that has mouse capture.</span></span>  
  
 [!code-csharp[mousecapturesample#MouseCaptureMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseCaptureSample/CSharp/Window1.xaml.cs#mousecapturemousecaptured)]
 [!code-vb[mousecapturesample#MouseCaptureMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseCaptureSample/visualbasic/window1.xaml.vb#mousecapturemousecaptured)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectlyOver">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement DirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.IInputElement DirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.DirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DirectlyOver As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::IInputElement ^ DirectlyOver { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DirectlyOver : System.Windows.IInputElement" Usage="System.Windows.Input.Mouse.DirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-181">마우스 포인터 바로 아래에 있는 요소를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-181">Gets the element the mouse pointer is directly over.</span></span></summary>
        <value><span data-ttu-id="b4b05-182">마우스 포인터 아래에 있는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-182">The element the mouse pointer is over.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-183">여러 요소의 컨트롤을 구성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-183">Controls can be composed of multiple elements.</span></span> <span data-ttu-id="b4b05-184"><xref:System.Windows.Input.Mouse.DirectlyOver%2A> 마우스 포인터가 위에 있는 복합 컨트롤 및 컨트롤 자체가 아니라 특정 요소를 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-184"><xref:System.Windows.Input.Mouse.DirectlyOver%2A> reports the specific element in the composite control the mouse pointer is over and not the control itself.</span></span> <span data-ttu-id="b4b05-185">어느 부분에 따라 예를 들어를 <xref:System.Windows.Controls.Button> 포인터가 있는, 합니다 <xref:System.Windows.Input.Mouse.DirectlyOver%2A> 속성 보고할 수 있습니다를 <xref:System.Windows.Controls.TextBox> 의 <xref:System.Windows.Controls.ContentControl.Content%2A> 속성 또는 <xref:Microsoft.Windows.Themes.ButtonChrome>.</span><span class="sxs-lookup"><span data-stu-id="b4b05-185">For example, depending on which part of a <xref:System.Windows.Controls.Button> the pointer is over, the <xref:System.Windows.Input.Mouse.DirectlyOver%2A> property could report the <xref:System.Windows.Controls.TextBox> of the <xref:System.Windows.Controls.ContentControl.Content%2A> property or the <xref:Microsoft.Windows.Themes.ButtonChrome>.</span></span>  
  
 <span data-ttu-id="b4b05-186">사용 합니다 <xref:System.Windows.IInputElement.IsMouseOver%2A> 속성을 <xref:System.Windows.UIElement> 및 <xref:System.Windows.ContentElement> 마우스가 시각적 자식 요소를 포함 하는 요소 위에 있는지 여부를 확인 또는 복합 요소를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-186">Use the <xref:System.Windows.IInputElement.IsMouseOver%2A> property on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> to determine whether the mouse is over an element, which includes its visual child elements or control compositing elements.</span></span>  
  
 <span data-ttu-id="b4b05-187">요소에 마우스 캡처가 있는 경우 마우스 포인터의 위치에 관계 없이 마우스 포인터가 요소 위에 직접 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-187">If an element has mouse capture, the mouse pointer is considered directly over the element regardless of the where the mouse pointer is.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseOver" />
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="GetIntermediatePoints">
      <MemberSignature Language="C#" Value="public static int GetIntermediatePoints (System.Windows.IInputElement relativeTo, System.Windows.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetIntermediatePoints(class System.Windows.IInputElement relativeTo, valuetype System.Windows.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.GetIntermediatePoints(System.Windows.IInputElement,System.Windows.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIntermediatePoints (relativeTo As IInputElement, points As Point()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetIntermediatePoints(System::Windows::IInputElement ^ relativeTo, cli::array &lt;System::Windows::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="static member GetIntermediatePoints : System.Windows.IInputElement * System.Windows.Point[] -&gt; int" Usage="System.Windows.Input.Mouse.GetIntermediatePoints (relativeTo, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
        <Parameter Name="points" Type="System.Windows.Point[]" />
      </Parameters>
      <Docs>
        <param name="relativeTo"><span data-ttu-id="b4b05-188"><paramref name="points" />와 관련된 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-188">The elements <paramref name="points" /> are in relation to.</span></span></param>
        <param name="points"><span data-ttu-id="b4b05-189">개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-189">An array of objects.</span></span></param>
        <summary><span data-ttu-id="b4b05-190">마지막 마우스 이동 이벤트 이후에 마우스 포인터의 이전 좌표를 최대 64개까지 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-190">Retrieves up to 64 previous coordinates of the mouse pointer since the last mouse move event.</span></span></summary>
        <returns><span data-ttu-id="b4b05-191">반환된 지점 수입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-191">The number of points returned.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point GetPosition (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point GetPosition(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.GetPosition(System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPosition (relativeTo As IInputElement) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point GetPosition(System::Windows::IInputElement ^ relativeTo);" />
      <MemberSignature Language="F#" Value="static member GetPosition : System.Windows.IInputElement -&gt; System.Windows.Point" Usage="System.Windows.Input.Mouse.GetPosition relativeTo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo"><span data-ttu-id="b4b05-192">마우스 위치를 계산할 좌표 공간입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-192">The coordinate space in which to calculate the position of the mouse.</span></span></param>
        <summary><span data-ttu-id="b4b05-193">지정한 요소를 기준으로 하는 마우스의 상대 위치를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-193">Gets the position of the mouse relative to a specified element.</span></span></summary>
        <returns><span data-ttu-id="b4b05-194"><paramref name="relativeTo" /> 매개 변수를 기준으로 하는 마우스의 상대 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-194">The position of the mouse relative to the parameter <paramref name="relativeTo" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-195">마우스 포인터의 위치는 원본, 0, 0이 되는 요소의 왼쪽 위 모퉁이 사용 하 여 지정 된 요소를 기준으로 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-195">The position of the mouse pointer is calculated relative to the specified element with the upper-left corner of element being the point of origin, 0,0.</span></span>  
  
 <span data-ttu-id="b4b05-196">끌어서 놓기 작업 도중 마우스의 위치 안정적으로 통해 확인할 수 없습니다 <xref:System.Windows.Input.Mouse.GetPosition%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-196">During drag-and-drop operations, the position of the mouse cannot be reliably determined through <xref:System.Windows.Input.Mouse.GetPosition%2A>.</span></span> <span data-ttu-id="b4b05-197">내부에서 제어 동작의 대부분을 사용 하 여 드롭다운 완료 될 때까지 마우스 (캡처 포함)를 제어 원래 요소의 끌기 소유 이므로 [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-197">This is because control of the mouse (possibly including capture) is held by the originating element of the drag until the drop is completed, with much of the behavior controlled by underlying [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] calls.</span></span> <span data-ttu-id="b4b05-198">다음 방법 중 하나를 대신 사용해 보세요.</span><span class="sxs-lookup"><span data-stu-id="b4b05-198">Try the following approaches instead:</span></span>  
  
-   <span data-ttu-id="b4b05-199">호출을 <xref:System.Windows.DragEventArgs.GetPosition%2A> 메서드를 <xref:System.Windows.DragEventArgs> 끌기 이벤트에 전달 되는 (<xref:System.Windows.ContentElement.DragEnter>를 <xref:System.Windows.ContentElement.DragOver>, <xref:System.Windows.ContentElement.DragLeave>).</span><span class="sxs-lookup"><span data-stu-id="b4b05-199">Call the <xref:System.Windows.DragEventArgs.GetPosition%2A> method of the <xref:System.Windows.DragEventArgs> that is passed to the drag events (<xref:System.Windows.ContentElement.DragEnter>, <xref:System.Windows.ContentElement.DragOver>, <xref:System.Windows.ContentElement.DragLeave>).</span></span>  
  
-   <span data-ttu-id="b4b05-200">호출 [해결 방법](https://msdn.microsoft.com/library/default.asp?url=/library/winui/winui/windowsuserinterface/resources/cursors/cursorreference/cursorfunctions/getcursorpos.asp), P/Invoke를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-200">Call [GetCursorPos](https://msdn.microsoft.com/library/default.asp?url=/library/winui/winui/windowsuserinterface/resources/cursors/cursorreference/cursorfunctions/getcursorpos.asp), using P/Invoke.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4b05-201">다음 예제에서는 사용 하는 방법을 보여 줍니다 <xref:System.Windows.Input.Mouse.GetPosition%2A> 마우스 포인터의 위치를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-201">The following example shows how to use <xref:System.Windows.Input.Mouse.GetPosition%2A> to determine the position of the mouse pointer.</span></span>  <span data-ttu-id="b4b05-202">마우스 포인터의 위치에 저장 되는 <xref:System.Windows.Point> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-202">The position of the mouse pointer is stored in a <xref:System.Windows.Point> structure.</span></span>  <span data-ttu-id="b4b05-203"><xref:System.Windows.Point.X%2A> 및 <xref:System.Windows.Point.Y%2A> 의 값을 <xref:System.Windows.Point> 개체에 표시 됩니다는 <xref:System.Windows.Controls.TextBox>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-203">The <xref:System.Windows.Point.X%2A> and <xref:System.Windows.Point.Y%2A> values of the <xref:System.Windows.Point> object are displayed in a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsPositionMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetspositionmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsPositionMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetspositionmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" />
      <MemberSignature Language="ILAsm" Value="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" />
      <MemberSignature Language="F#" Value="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" Usage="see AddGotMouseCaptureHandler, and RemoveGotMouseCaptureHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-204">요소에서 마우스를 캡처할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-204">Occurs when an element captures the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-205">마우스를 캡처한 요소 테두리 내에서 커서 인지 여부에 관계 없이 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-205">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span>  
  
 <span data-ttu-id="b4b05-206">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-206">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-207">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-207">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-208">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-208">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-209">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-209">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-210">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-210">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-211">버블링 라우팅 인해 캡처가 있는 실제 요소는 자식 요소에 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-211">Because of the bubbling routing, the actual element that has capture might be a child element, not necessarily the element where the event handler is actually attached.</span></span> <span data-ttu-id="b4b05-212">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 마우스를 사용 하는 실제 요소를 확인 하기 위해 인수 캡처 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-212">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event arguments to determine the actual element that has mouse capture.</span></span>  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-213">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-213">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-214">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-214">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.GotMouseCaptureEvent>|  
|<span data-ttu-id="b4b05-215">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-215">Routing strategy</span></span>|<span data-ttu-id="b4b05-216">버블링</span><span class="sxs-lookup"><span data-stu-id="b4b05-216">Bubbling</span></span>|  
|<span data-ttu-id="b4b05-217">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-217">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="b4b05-218">정의 된 해당 터널링 이벤트가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-218">There is no defined corresponding tunneling event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable GotMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.GotMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-219"><see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-219">Identifies the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-220">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-220">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-221">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-221">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-222">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-222">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftButton">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState LeftButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState LeftButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.LeftButton" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LeftButton As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState LeftButton { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.LeftButton : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.LeftButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-223">마우스 왼쪽 단추의 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-223">Gets the state of the left button of the mouse.</span></span></summary>
        <value><span data-ttu-id="b4b05-224">마우스 왼쪽 단추의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-224">The state of the left mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b4b05-225">다음 예제에서는 확인 하 여 마우스 왼쪽된 단추를 눌렀는지 여부를 결정 하는 방법의 상태를 <xref:System.Windows.Input.Mouse.LeftButton%2A> 값과 같음 합니다 <xref:System.Windows.Input.MouseButtonState> 열거형 값 <xref:System.Windows.Input.MouseButtonState.Pressed>.</span><span class="sxs-lookup"><span data-stu-id="b4b05-225">The following example shows how to determine whether the left mouse button is pressed by checking if the state of the <xref:System.Windows.Input.Mouse.LeftButton%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="b4b05-226">단추를 누르는 경우 샘플의 요소를 표시 하는 업데이트 하는 메서드 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-226">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetLeftButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetleftbuttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetLeftButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetleftbuttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" />
      <MemberSignature Language="ILAsm" Value="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" />
      <MemberSignature Language="F#" Value="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" Usage="see AddLostMouseCaptureHandler, and RemoveLostMouseCaptureHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-227">요소에서 마우스 캡처를 잃을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-227">Occurs when an element loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-228">마우스를 캡처한 요소 테두리 내에서 커서 인지 여부에 관계 없이 마우스 입력을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-228">When an element captures the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span> <span data-ttu-id="b4b05-229">T</span><span class="sxs-lookup"><span data-stu-id="b4b05-229">T</span></span>  
  
 <span data-ttu-id="b4b05-230">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-230">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-231">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-231">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-232">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-232">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-233">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-233">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-234">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-234">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-235">버블링 라우팅 인해 캡처를 손실 하는 실제 요소는 자식 요소에 이벤트 처리기가 실제로 연결 되어 있는 요소가 아닌 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-235">Because of the bubbling routing, the actual element that lost capture might be a child element, not necessarily the element where the event handler is actually attached.</span></span> <span data-ttu-id="b4b05-236">확인 된 <xref:System.Windows.RoutedEventArgs.Source%2A> 에서 캡처를 손실 하는 실제 요소를 확인 하기 위해 이벤트 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-236">Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event arguments to determine the actual element that lost capture.</span></span>  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-237">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-237">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-238">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-238">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.LostMouseCaptureEvent>|  
|<span data-ttu-id="b4b05-239">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-239">Routing strategy</span></span>|<span data-ttu-id="b4b05-240">버블링</span><span class="sxs-lookup"><span data-stu-id="b4b05-240">Bubbling</span></span>|  
|<span data-ttu-id="b4b05-241">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-241">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="b4b05-242">정의 된 해당 터널링 이벤트가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-242">There is no defined corresponding tunneling event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LostMouseCaptureEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.LostMouseCaptureEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-243"><see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-243">Identifies the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-244">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-244">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-245">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-245">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-246">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-246">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MiddleButton">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState MiddleButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState MiddleButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.MiddleButton" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MiddleButton As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState MiddleButton { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.MiddleButton : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.MiddleButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-247">마우스 가운데 단추의 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-247">Gets the state of the middle button of the mouse.</span></span></summary>
        <value><span data-ttu-id="b4b05-248">마우스 가운데 단추의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-248">The state of the middle mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b4b05-249">다음 예제에서는 확인 하 여 마우스 가운데 단추를 눌렀는지 여부를 결정 하는 방법의 상태를 <xref:System.Windows.Input.Mouse.MiddleButton%2A> 값과 같음 합니다 <xref:System.Windows.Input.MouseButtonState> 열거형 값 <xref:System.Windows.Input.MouseButtonState.Pressed>.</span><span class="sxs-lookup"><span data-stu-id="b4b05-249">The following example shows how to determine whether the middle mouse button is pressed by checking if the state of the <xref:System.Windows.Input.Mouse.MiddleButton%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="b4b05-250">단추를 누르는 경우 샘플의 요소를 표시 하는 업데이트 하는 메서드 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-250">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetMiddleButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetmiddlebuttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetMiddleButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetmiddlebuttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="see AddMouseDownHandler, and RemoveMouseDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseDownHandler, and RemoveMouseDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseDown" />
      <MemberSignature Language="VB.NET" Value="see AddMouseDownHandler, and RemoveMouseDownHandler" />
      <MemberSignature Language="F#" Value="see AddMouseDownHandler, and RemoveMouseDownHandler" Usage="see AddMouseDownHandler, and RemoveMouseDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-251">마우스 단추를 누를 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-251">Occurs when any mouse button is depressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-252">눌린 어떤 마우스 단추를 확인 하려면 합니다 <xref:System.Windows.Input.MouseButtonEventArgs.ChangedButton%2A> 속성에는 <xref:System.Windows.Input.MouseButtonEventArgs> 처리기에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-252">To determine which mouse button was depressed, check the <xref:System.Windows.Input.MouseButtonEventArgs.ChangedButton%2A> property in the <xref:System.Windows.Input.MouseButtonEventArgs> passed to the handler.</span></span>  
  
 <span data-ttu-id="b4b05-253">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-253">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-254">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-254">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-255">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-255">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-256">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-256">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-257">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-257">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-258">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework 두 가지로 표시 하는 방법으로이 연결 된 이벤트 기반 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 <xref:System.Windows.UIElement> 하 고 <xref:System.Windows.ContentElement>: <xref:System.Windows.UIElement.MouseLeftButtonDown> 및 <xref:System.Windows.UIElement.MouseRightButtonDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-258">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework builds on this attached event by surfacing it as two different [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events on <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>.</span></span> <span data-ttu-id="b4b05-259">이러한 구현은 기본 처리 <xref:System.Windows.Input.Mouse.MouseDown> 이벤트 왼쪽 또는 오른쪽 마우스 단추 관련 되어 있는지 여부를 확인 하려면 이벤트의 인수를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-259">These implementations handle the underlying <xref:System.Windows.Input.Mouse.MouseDown> event and read the arguments of the event to determine whether the left or right mouse button was involved.</span></span> <span data-ttu-id="b4b05-260">3 단추 마우스 가운데 단추에 대 한 프레임 워크 수준 이벤트는 지원 되지 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-260">For a three-button mouse, there is no framework-level event support for the center button.</span></span> <span data-ttu-id="b4b05-261">사용 해야 합니다 <xref:System.Windows.Input.Mouse.MouseDown> 이벤트를 확인 합니다 <xref:System.Windows.Input.MouseEventArgs.MiddleButton%2A> 상태 이벤트 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-261">You should use the <xref:System.Windows.Input.Mouse.MouseDown> event and check the <xref:System.Windows.Input.MouseEventArgs.MiddleButton%2A> state in the event arguments.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b4b05-262">소수의 <xref:System.Windows.ContentElement> 컨트롤과 비슷한 동작을 예를 들어 있는 클래스를 파생 <xref:System.Windows.Documents.Hyperlink>, 고유 클래스 마우스 단추 이벤트에 대 한 처리가 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-262">A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events.</span></span> <span data-ttu-id="b4b05-263">이벤트는 마우스 왼쪽된 단추는 컨트롤에서 처리 하는 클래스를 할 가능성이 가장 높은 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-263">The left mouse button down event is the most likely event to have class handling in a control.</span></span> <span data-ttu-id="b4b05-264">자주 처리 하는 클래스는 기본 표시 <xref:System.Windows.Input.Mouse> 클래스 이벤트를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-264">The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled.</span></span> <span data-ttu-id="b4b05-265">이벤트가 처리 됨으로 표시 되 면 해당 요소에 연결 된 다른 인스턴스 처리기 일반적으로 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-265">Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.</span></span> <span data-ttu-id="b4b05-266">UI 트리에서 루트를 향해 버블링 방향의 요소에 연결 된 다른 모든 클래스 또는 인스턴스 처리기도 하지 일반적으로 발생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-266">Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.</span></span>  
  
 <span data-ttu-id="b4b05-267">앞의 중요 사항에 설명 된 문제를 해결 하 고 계속 받을 수 있는 <xref:System.Windows.UIElement.MouseDown> 왼쪽된 마우스 단추 누름 이러한 솔루션 중 하나를 사용 하 여 처리 하는 클래스가 파생된 클래스에서 이벤트에 대 한 이벤트:</span><span class="sxs-lookup"><span data-stu-id="b4b05-267">You can resolve the issue that is outlined in the preceding Important note and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:</span></span>  
  
-   <span data-ttu-id="b4b05-268">연결에 대 한 처리기를 <xref:System.Windows.UIElement.PreviewMouseDown> 이벤트를 컨트롤에 의해 처리 된 것으로 표시 되어 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-268">Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls.</span></span> <span data-ttu-id="b4b05-269">미리 보기 이벤트 이기 때문에 경로 루트에서 시작 및 컨트롤까지 아래로 터널링 통지 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-269">Notice that because this is a preview event, the route starts at the root and tunnels down to the control.</span></span>  
  
-   <span data-ttu-id="b4b05-270">컨트롤에 처리기를 호출 하 여 절차에 따라 등록 <xref:System.Windows.UIElement.AddHandler%2A> 처리기가 라우트된 이벤트 데이터의 처리 된 것으로 이미 표시 된 경우에 이벤트를 수신할 수 있도록 서명 옵션을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-270">Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.</span></span>  
  
 <span data-ttu-id="b4b05-271">마우스 관련 라우트된 이벤트에 대 한 처리 된 것으로 표시 되거나 하는 방법에 대 한 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-271">For routed events that relate to the mouse, be careful about how or when you mark them handled.</span></span> <span data-ttu-id="b4b05-272">알려야 하는지 여부 부모 요소 또한에 대 한 지정 된 마우스 동작 때문에 실제로 적합 하 게 선택 하기가 어렵습니다 합니다 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 프레임 워크는 모델을 선택 했기 기본 마우스의 라우트된 이벤트가으로 나타날 수 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 경로 따라 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-272">The difficulty in making the appropriate choices about whether parent elements should also be informed about any given mouse action is in fact why the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework chose the model of having the underlying mouse routed event be surfaced as [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] events along the route.</span></span> <span data-ttu-id="b4b05-273">유사한 문제가 마우스 이벤트를 터널링을 사용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-273">Similar issues exist with tunneling mouse events.</span></span>  <span data-ttu-id="b4b05-274">해야 이벤트를 처리 하는 원본으로 추가 자식에 의해 처리 되어 있지와 어떻게이 위치에 따라 합성 부분 예상 된 컨트롤의 해당 영향을 합성 마우스 동작이?</span><span class="sxs-lookup"><span data-stu-id="b4b05-274">Should you handle the event and not have it be handled by further children toward the source, and how would that affect compositing a control where the compositing pieces might have expected mouse behaviors?</span></span>  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-275">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-275">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-276">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-276">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseDownEvent>|  
|<span data-ttu-id="b4b05-277">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-277">Routing strategy</span></span>|<span data-ttu-id="b4b05-278">버블링</span><span class="sxs-lookup"><span data-stu-id="b4b05-278">Bubbling</span></span>|  
|<span data-ttu-id="b4b05-279">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-279">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="b4b05-280">해당 터널링 이벤트가 <xref:System.Windows.Input.Mouse.PreviewMouseDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-280">The corresponding tunneling event is <xref:System.Windows.Input.Mouse.PreviewMouseDown>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-281"><see cref="E:System.Windows.Input.Mouse.MouseDown" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-281">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-282">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-282">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-283">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-283">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-284">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-284">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="see AddMouseEnterHandler, and RemoveMouseEnterHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseEnterHandler, and RemoveMouseEnterHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="see AddMouseEnterHandler, and RemoveMouseEnterHandler" />
      <MemberSignature Language="F#" Value="see AddMouseEnterHandler, and RemoveMouseEnterHandler" Usage="see AddMouseEnterHandler, and RemoveMouseEnterHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-285">마우스 포인터가 요소의 경계에 들어올 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-285">Occurs when the mouse pointer enters the boundaries of an element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-286">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-286">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-287">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-287">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-288">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-288">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-289">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-289">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-290">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-290">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-291">이 이벤트 라우팅 전략을 처리 하는 직접 이벤트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-291">This event uses the direct event handling routing strategy.</span></span> <span data-ttu-id="b4b05-292">(에서만 처리 됩니다는 발생 하는 동일한 요소에서) 경로 따라 직접 라우트된 이벤트를 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-292">Direct routed events are not raised along a route (they are only handled in the same element on which they are raised).</span></span>  <span data-ttu-id="b4b05-293">그러나 라우트된 이벤트 동작 스타일의 트리거와 이벤트 등의 다른 측면 있도록를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-293">They do, however, enable other aspects of routed event behaviors, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="b4b05-294">이 이벤트는 추적을 사용 하지만 때 마우스가 요소에도 보고 합니다 <xref:System.Windows.UIElement.IsMouseOver%2A> 속성에서 변경 되었습니다 `false` 에 `true` 이 요소에 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-294">Although this event is used to track when the mouse enters an element, it is also reporting the <xref:System.Windows.UIElement.IsMouseOver%2A> property has changed from `false` to `true` on this element.</span></span>  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-295">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-295">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-296">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-296">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseEnterEvent>|  
|<span data-ttu-id="b4b05-297">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-297">Routing strategy</span></span>|<span data-ttu-id="b4b05-298">직접</span><span class="sxs-lookup"><span data-stu-id="b4b05-298">Direct</span></span>|  
|<span data-ttu-id="b4b05-299">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-299">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseEnterEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseEnterEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-300"><see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-300">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-301">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-301">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-302">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-302">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-303">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-303">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" />
      <MemberSignature Language="F#" Value="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" Usage="see AddMouseLeaveHandler, and RemoveMouseLeaveHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-304">마우스 포인터가 요소의 경계를 벗어날 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-304">Occurs when the mouse pointer leaves the boundaries of an element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-305">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-305">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-306">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-306">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-307">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-307">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-308">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-308">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-309">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-309">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-310">이 이벤트 라우팅 전략을 처리 하는 직접 이벤트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-310">This event uses the direct event handling routing strategy.</span></span> <span data-ttu-id="b4b05-311">직접 라우트된 이벤트 (에서만 처리 됩니다는 발생 하는 동일한 요소에서) 경로 따르지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-311">Direct routed events do not follow a route (they are only handled in the same element on which they are raised).</span></span>  <span data-ttu-id="b4b05-312">그러나 라우트된 이벤트 동작 스타일의 트리거와 이벤트 등의 다른 측면 있도록를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-312">They do, however, enable other aspects of routed event behaviors, such as event triggers in styles.</span></span>  
  
 <span data-ttu-id="b4b05-313">이 이벤트는 마우스가 요소를 추적 하는, 있지만에 대 한 보고는 합니다 <xref:System.Windows.UIElement.IsMouseOver%2A> 에서 속성 값이 변경 `true` 에 `false` 이 요소에 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-313">Although this event is used to track when the mouse leaves an element, it is also reporting that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.</span></span>  
  
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-314">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-314">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-315">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-315">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseLeaveEvent>|  
|<span data-ttu-id="b4b05-316">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-316">Routing strategy</span></span>|<span data-ttu-id="b4b05-317">직접</span><span class="sxs-lookup"><span data-stu-id="b4b05-317">Direct</span></span>|  
|<span data-ttu-id="b4b05-318">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-318">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseLeaveEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseLeaveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-319"><see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-319">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-320">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-320">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-321">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-321">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-322">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-322">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="see AddMouseMoveHandler, and RemoveMouseMoveHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseMoveHandler, and RemoveMouseMoveHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseMove" />
      <MemberSignature Language="VB.NET" Value="see AddMouseMoveHandler, and RemoveMouseMoveHandler" />
      <MemberSignature Language="F#" Value="see AddMouseMoveHandler, and RemoveMouseMoveHandler" Usage="see AddMouseMoveHandler, and RemoveMouseMoveHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-323">마우스 포인터가 이동할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-323">Occurs when the mouse pointer moves.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-324">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-324">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-325">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-325">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-326">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-326">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-327">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-327">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-328">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-328">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-329">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-329">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-330">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-330">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseMoveEvent>|  
|<span data-ttu-id="b4b05-331">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-331">Routing strategy</span></span>|<span data-ttu-id="b4b05-332">버블링</span><span class="sxs-lookup"><span data-stu-id="b4b05-332">Bubbling</span></span>|  
|<span data-ttu-id="b4b05-333">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-333">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="b4b05-334">해당 터널링 이벤트가 <xref:System.Windows.Input.Mouse.PreviewMouseMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-334">The corresponding tunneling event is <xref:System.Windows.Input.Mouse.PreviewMouseMove>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-335"><see cref="E:System.Windows.Input.Mouse.MouseMove" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-335">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-336">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-336">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-337">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-337">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-338">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-338">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="see AddMouseUpHandler, and RemoveMouseUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseUpHandler, and RemoveMouseUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseUp" />
      <MemberSignature Language="VB.NET" Value="see AddMouseUpHandler, and RemoveMouseUpHandler" />
      <MemberSignature Language="F#" Value="see AddMouseUpHandler, and RemoveMouseUpHandler" Usage="see AddMouseUpHandler, and RemoveMouseUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-339">마우스 단추를 놓을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-339">Occurs when any mouse button is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-340">어떤 마우스 단추를 놓았음을 이벤트의 인수를 통해 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-340">Which mouse button was released is determined by checking the arguments of the event.</span></span>  
  
 <span data-ttu-id="b4b05-341">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-341">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-342">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-342">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-343">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-343">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-344">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-344">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-345">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-345">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-346">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework 두 가지로 표시 하는 방법으로이 연결 된 이벤트 기반 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 <xref:System.Windows.UIElement>: <xref:System.Windows.UIElement.MouseLeftButtonUp> 고 <xref:System.Windows.UIElement.MouseRightButtonUp>입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-346">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework builds on this attached event by surfacing it as two different [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events on <xref:System.Windows.UIElement>: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>.</span></span> <span data-ttu-id="b4b05-347">이러한 구현은 기본 처리 <xref:System.Windows.Input.Mouse.MouseUp> 이벤트 왼쪽 또는 오른쪽 마우스 단추 관련 되어 있는지 여부를 확인 하려면 이벤트의 인수를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-347">These implementations handle the underlying <xref:System.Windows.Input.Mouse.MouseUp> event and read the arguments of the event to determine whether the left or right mouse button was involved.</span></span> <span data-ttu-id="b4b05-348">3 단추에 대 한 가운데 단추에 대 한 프레임 워크 수준 이벤트는 지원 되지 않으며 사용 해야는 <xref:System.Windows.Input.Mouse.MouseUp> 이벤트 및 가운데 단추에 대 한 검사 조건 이벤트 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-348">For three-button, there is no framework-level event support for the center button, and you should use the <xref:System.Windows.Input.Mouse.MouseUp> event and check for the center button condition in the event arguments.</span></span>  
  
 <span data-ttu-id="b4b05-349">마우스 관련 라우트된 이벤트에 대 한 처리 된 것으로 표시 되거나 하는 방법에 대 한 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-349">For routed events that relate to the mouse, be careful about how or when you mark them handled.</span></span> <span data-ttu-id="b4b05-350">알려야 하는지 여부 부모 요소 또한에 대 한 지정 된 마우스 동작 때문에 실제로 적합 하 게 선택 하기가 어렵습니다 합니다 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 프레임 워크는 모델을 선택 했기 기본 <xref:System.Windows.Input.Mouse> 로라우트된이벤트표시[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 전체 경로 따라 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-350">The difficulty in making the appropriate choices about whether parent elements should also be informed about any given mouse action is in fact why the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework chose the model of having the underlying <xref:System.Windows.Input.Mouse> routed event be surfaced as [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] events all along the route.</span></span>  
  
 <span data-ttu-id="b4b05-351">유사한 문제가 마우스 이벤트를 터널링을 사용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-351">Similar issues exist with tunneling mouse events.</span></span>  <span data-ttu-id="b4b05-352">해야 이벤트를 처리 하는 원본으로 추가 자식에 의해 처리 되어 있지와 어떻게이 위치에 따라 합성 부분 예상 된 컨트롤에는 영향을 합성 마우스 동작이?</span><span class="sxs-lookup"><span data-stu-id="b4b05-352">Should you handle the event and not have it be handled by children further towards the source, and how would that affect compositing in a control where the compositing pieces might have expected mouse behaviors?</span></span>  
  
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-353">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-353">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-354">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-354">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseUpEvent>|  
|<span data-ttu-id="b4b05-355">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-355">Routing strategy</span></span>|<span data-ttu-id="b4b05-356">버블링</span><span class="sxs-lookup"><span data-stu-id="b4b05-356">Bubbling</span></span>|  
|<span data-ttu-id="b4b05-357">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-357">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
 <span data-ttu-id="b4b05-358">해당 터널링 이벤트가 <xref:System.Windows.Input.Mouse.PreviewMouseUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-358">The corresponding tunneling event is <xref:System.Windows.Input.Mouse.PreviewMouseUp>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-359"><see cref="E:System.Windows.Input.Mouse.MouseUp" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-359">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-360">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-360">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-361">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-361">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-362">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-362">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="see AddMouseWheelHandler, and RemoveMouseWheelHandler" />
      <MemberSignature Language="ILAsm" Value="see AddMouseWheelHandler, and RemoveMouseWheelHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="see AddMouseWheelHandler, and RemoveMouseWheelHandler" />
      <MemberSignature Language="F#" Value="see AddMouseWheelHandler, and RemoveMouseWheelHandler" Usage="see AddMouseWheelHandler, and RemoveMouseWheelHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-363">마우스 휠이 회전할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-363">Occurs when the mouse wheel is rotated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-364">포커스 또는 마우스 캡처 마우스 포인터가 있는 보다 우선적으로 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-364">Focus or mouse capture take precedence over where the mouse pointer is.</span></span>  <span data-ttu-id="b4b05-365">캡처된 또는 포커스가 있는 요소에서이 이벤트를 받을 경우 마우스 포인터 실제로 다른 요소 있을 시.</span><span class="sxs-lookup"><span data-stu-id="b4b05-365">If you receive this event from a focused or captured element, the mouse pointer might in fact be over another element at the time.</span></span>  
  
 <span data-ttu-id="b4b05-366">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-366">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-367">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-367">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-368">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-368">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-369">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-369">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-370">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-370">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-371">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-371">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-372">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-372">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.MouseWheelEvent>|  
|<span data-ttu-id="b4b05-373">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-373">Routing strategy</span></span>|<span data-ttu-id="b4b05-374">버블링</span><span class="sxs-lookup"><span data-stu-id="b4b05-374">Bubbling</span></span>|  
|<span data-ttu-id="b4b05-375">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-375">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="b4b05-376">해당 터널링 이벤트가 <xref:System.Windows.Input.Mouse.PreviewMouseWheel>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-376">The corresponding tunneling event is <xref:System.Windows.Input.Mouse.PreviewMouseWheel>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelDeltaForOneLine">
      <MemberSignature Language="C#" Value="public const int MouseWheelDeltaForOneLine = 120;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MouseWheelDeltaForOneLine = (120)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine" />
      <MemberSignature Language="VB.NET" Value="Public Const MouseWheelDeltaForOneLine As Integer  = 120" />
      <MemberSignature Language="C++ CLI" Value="public: int MouseWheelDeltaForOneLine = 120;" />
      <MemberSignature Language="F#" Value="val mutable MouseWheelDeltaForOneLine : int" Usage="System.Windows.Input.Mouse.MouseWheelDeltaForOneLine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>120</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-377">한 줄을 스크롤할 때 마우스 휠이 회전되는 단위 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-377">Represents the number of units the mouse wheel is rotated to scroll one line.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-378">현재에서 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)],이 필드의 값은 120입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-378">In the current [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], the value of this field is 120.</span></span> <span data-ttu-id="b4b05-379">필드를 노출 하려는 의도 더 좋은 해상도 마우스 휠을 앞으로 아마도 조건 없이 자유롭게 회전 휠을 포함 된 공급 업체를 위한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-379">The intention of the field exposure is to allow for vendors to build finer-resolution mouse wheels in the future, that perhaps would include a freely rotating wheel without notches.</span></span> <span data-ttu-id="b4b05-380">예상이 이러한 디바이스 각 메시지에 수 있지만 더 작은 값을 사용 하 여 자세한 메시지를 보낼 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-380">The expectation is that such a device would send more messages per rotation, but with a smaller value in each message.</span></span> <span data-ttu-id="b4b05-381">이 가능성을 지원 하려면 하거나 될 때까지 들어오는 델타 값을 추가 해야 합니다 <xref:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine> (따라서 델타 회전에 대 한 동일한 응답을 얻을) 크기에 도달 하면 더 자주 메시지에 대 한 응답에서 부분 줄을 스크롤하여 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-381">To support this possibility, you should either add the incoming delta values until the <xref:System.Windows.Input.Mouse.MouseWheelDeltaForOneLine> amount is reached (so for a delta-rotation you get the same response), or scroll partial lines in response to the more frequent messages.</span></span> <span data-ttu-id="b4b05-382">또한 고유한 스크롤 세분성을 선택 하 고 델타에 도달 하거나 아마도 마우스 민감도 대 한 사용자가 제어할 수 있는 시스템 매개 변수를 참조 하 고 추정 마우스 휠 델타 임계값에 도달할 때까지 직접 선택한 델타 누적 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-382">You could also choose your own scroll granularity and accumulate deltas of your own choosing until that delta is reached, or perhaps reference user-controllable system parameters for mouse sensitivity and extrapolate these to mouse wheel delta thresholds.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseWheelEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable MouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.MouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-383"><see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-383">Identifies the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-384">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-384">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-385">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-385">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-386">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-386">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideCursor">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.Cursor OverrideCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.Cursor OverrideCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.OverrideCursor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property OverrideCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::Cursor ^ OverrideCursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OverrideCursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.Input.Mouse.OverrideCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-387">전체 응용 프로그램에 대한 커서를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-387">Gets or sets the cursor for the entire application.</span></span></summary>
        <value><span data-ttu-id="b4b05-388">재정의 커서이거나 <see cref="P:System.Windows.Input.Mouse.OverrideCursor" />가 설정되지 않은 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-388">The override cursor or <see langword="null" /> if the <see cref="P:System.Windows.Input.Mouse.OverrideCursor" /> is not set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-389">합니다 <xref:System.Windows.Input.Cursor> 는 <xref:System.Windows.Input.Mouse.OverrideCursor%2A> 은 전체 응용 프로그램에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-389">The <xref:System.Windows.Input.Cursor> that <xref:System.Windows.Input.Mouse.OverrideCursor%2A> is set to will be applied to the whole application.</span></span>  
  
 <span data-ttu-id="b4b05-390">재정의 지우려면 <xref:System.Windows.Input.Cursor>로 설정 <xref:System.Windows.Input.Mouse.OverrideCursor%2A> 에 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-390">To clear the override <xref:System.Windows.Input.Cursor>, set <xref:System.Windows.Input.Mouse.OverrideCursor%2A> to `null`.</span></span>  
  
 <span data-ttu-id="b4b05-391">설정 <xref:System.Windows.Input.Mouse.OverrideCursor%2A> 에 <xref:System.Windows.Input.Cursors.None%2A> 를 강제로 마우스 커서가 표시 되지 않지만 마우스 이벤트는 계속 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-391">Setting <xref:System.Windows.Input.Mouse.OverrideCursor%2A> to <xref:System.Windows.Input.Cursors.None%2A> will force the mouse cursor not to be displayed, but mouse events are still processed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b4b05-392">다음 예제에서는 이벤트 처리기는 <xref:System.Windows.Controls.RadioButton> 단일 요소 및 전체 응용 프로그램 간에 커서 변경의 범위를 설정/해제 하는 데 사용 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-392">The following example shows an event handler for a <xref:System.Windows.Controls.RadioButton> that is used to toggle the scope of a cursor change between a single element and the entire application.</span></span>  <span data-ttu-id="b4b05-393">이벤트를 발생 시킨 컨트롤이 있으면 합니다 `rbScopeElement` <xref:System.Windows.Controls.RadioButton>, 커서 변경의 범위를 나타내는 플래그를 설정 및 <xref:System.Windows.Input.Mouse.OverrideCursor%2A> 로 설정 되어 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-393">If the control that raised the event is the `rbScopeElement`<xref:System.Windows.Controls.RadioButton>, a flag that denotes the scope of the cursor change is set and <xref:System.Windows.Input.Mouse.OverrideCursor%2A> is set to `null`.</span></span>  <span data-ttu-id="b4b05-394">이벤트를 발생 시킨 컨트롤이 있으면를 `rbScopeApplication` <xref:System.Windows.Controls.RadioButton>, 커서 변경의 범위를 나타내는 플래그가 설정 되어 및 <xref:System.Windows.Input.Mouse.OverrideCursor%2A> 로 설정 되어를 <xref:System.Windows.FrameworkElement.Cursor%2A> 속성을 <xref:System.Windows.Controls.Border> 라는 컨트롤 `DisplayArea`.</span><span class="sxs-lookup"><span data-stu-id="b4b05-394">If the control that raised the event is the `rbScopeApplication`<xref:System.Windows.Controls.RadioButton>, a flag that denotes the scope of the cursor change is set and <xref:System.Windows.Input.Mouse.OverrideCursor%2A> is set to the <xref:System.Windows.FrameworkElement.Cursor%2A> property of the <xref:System.Windows.Controls.Border> control named `DisplayArea`.</span></span>  
  
 [!code-csharp[cursors#CursorsSampleOverrideCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#cursorssampleoverridecursor)]
 [!code-vb[cursors#CursorsSampleOverrideCursor](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#cursorssampleoverridecursor)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" Usage="see AddPreviewMouseDownHandler, and RemovePreviewMouseDownHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-395">마우스 단추를 누를 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-395">Occurs when any mouse button is depressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-396">어떤 마우스 단추를 놓은 이벤트의 인수를 통해 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-396">Which mouse button was depressed is determined by checking the arguments of the event.</span></span> <span data-ttu-id="b4b05-397">이 연결 된 이벤트 (터널링 라우팅 전략을 사용 하 여)입니다. 연결 된 이벤트 구문을 통해 기존 참조할 수 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 입력을 사용 하는 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-397">This is an attached event (using tunneling routing strategy) that is intended through attached event syntax to be referenced by existing [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements that take input.</span></span>  
  
 <span data-ttu-id="b4b05-398">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-398">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-399">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-399">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-400">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-400">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-401">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-401">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-402">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-402">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-403">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework 두 가지로 표시 하는 방법으로이 연결 된 이벤트 기반 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 <xref:System.Windows.UIElement>: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> 고 <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-403">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework builds on this attached event by surfacing it as two different [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events on <xref:System.Windows.UIElement>: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</span></span> <span data-ttu-id="b4b05-404">이러한 구현은 기본 처리 <xref:System.Windows.Input.Mouse.PreviewMouseDown> 이벤트 왼쪽 또는 오른쪽 마우스 단추 관련 되어 있는지 여부를 확인 하려면 이벤트의 인수를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-404">These implementations handle the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown> event and read the arguments of the event to determine whether the left or right mouse button was involved.</span></span> <span data-ttu-id="b4b05-405">3 단추에 대 한 가운데 단추에 대 한 프레임 워크 수준 이벤트는 지원 되지 않으며 사용 해야는 <xref:System.Windows.Input.Mouse.PreviewMouseDown> 이벤트 및 가운데 단추에 대 한 검사 조건 이벤트 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-405">For three-button, there is no framework-level event support for the center button, and you should use the <xref:System.Windows.Input.Mouse.PreviewMouseDown> event and check for the center button condition in the event arguments.</span></span>  
  
 <span data-ttu-id="b4b05-406">마우스 관련 라우트된 이벤트에 대 한 처리 된 것으로 표시 되거나 하는 방법에 대 한 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-406">For routed events that relate to the mouse, be careful about how or when you mark them handled.</span></span> <span data-ttu-id="b4b05-407">루트에 가까운 이벤트를 처리 하 고 원본 방향의 자식에서 처리 적합 하지 않을 합성 컨트롤에 대 한 위치에 따라 합성 부분 예상 된 마우스 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-407">Handling the event near the root and handling it by a child further toward the source may not be appropriate for composited controls, where the compositing pieces might have expected mouse behaviors.</span></span> <span data-ttu-id="b4b05-408">알려야 하는지 여부 다른 요소 또한에 대 한 지정 된 마우스 동작 때문에 실제로 적합 하 게 선택 하기가 어렵습니다 합니다 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 프레임 워크는 모델을 선택 했기 기본 <xref:System.Windows.Input.Mouse> 로라우트된이벤트표시[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 경로의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-408">The difficulty in making the appropriate choices about whether other elements should also be informed about any given mouse action is in fact why the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework chose the model of having the underlying <xref:System.Windows.Input.Mouse> routed event be surfaced as [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] events along the route.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-409">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-409">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-410">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-410">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseDownEvent>|  
|<span data-ttu-id="b4b05-411">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-411">Routing strategy</span></span>|<span data-ttu-id="b4b05-412">터널링</span><span class="sxs-lookup"><span data-stu-id="b4b05-412">Tunneling</span></span>|  
|<span data-ttu-id="b4b05-413">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-413">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="b4b05-414">해당 버블링 이벤트가 <xref:System.Windows.Input.Mouse.MouseDown>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-414">The corresponding bubbling event is <xref:System.Windows.Input.Mouse.MouseDown>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseDownEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-415"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-415">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-416">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-416">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-417">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-417">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-418">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-418">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownOutsideCapturedElement">
      <MemberSignature Language="C#" Value="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" Usage="see AddPreviewMouseDownOutsideCapturedElementHandler, and RemovePreviewMouseDownOutsideCapturedElementHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-419">마우스 이벤트를 캡처하는 요소 외부에서 기본 마우스 단추를 누를 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-419">Occurs when the primary mouse button is pressed outside the element that is capturing mouse events.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-420">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-420">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-421">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-421">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-422">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-422">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-423">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-423">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-424">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-424">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-425">이 이벤트는 기본 요소에 다시 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-425">This event is not resurfaced on base elements.</span></span> <span data-ttu-id="b4b05-426">마우스 캡처 및 해당 컨트롤 합치기 내에서 마우스 입력을 조정 하려는 컨트롤 작성자가 관심의 주로 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-426">It is mainly of concern to control authors that are attempting to reconcile mouse capture and mouse input within their control compositing.</span></span>  
  
<a name="routedEventInfo_PreviewMouseDownOutsideCaptureElement"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-427">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-427">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-428">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-428">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent>|  
|<span data-ttu-id="b4b05-429">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-429">Routing strategy</span></span>|<span data-ttu-id="b4b05-430">터널링</span><span class="sxs-lookup"><span data-stu-id="b4b05-430">Tunneling</span></span>|  
|<span data-ttu-id="b4b05-431">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-431">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownOutsideCapturedElementEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownOutsideCapturedElementEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownOutsideCapturedElementEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownOutsideCapturedElementEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownOutsideCapturedElementEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseDownOutsideCapturedElementEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElementEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-432"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-432">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-433">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-433">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-434">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-434">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-435">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-435">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" Usage="see AddPreviewMouseMoveHandler, and RemovePreviewMouseMoveHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-436">마우스가 요소 위로 이동할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-436">Occurs when the mouse moves over an element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-437">마우스 포인터를 새로 요소 범위에서 이동 하면이 이벤트가 발생 모두도 마우스 포인터를 이동 하면 요소 범위 내에 그대로 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-437">This event occurs both when the mouse pointer is newly moved in the element bounds, and also when the mouse pointer moves while still remaining in the element bounds.</span></span>  
  
 <span data-ttu-id="b4b05-438">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-438">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-439">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-439">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-440">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-440">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-441">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-441">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-442">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-442">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-443">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-443">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-444">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-444">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseMoveEvent>|  
|<span data-ttu-id="b4b05-445">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-445">Routing strategy</span></span>|<span data-ttu-id="b4b05-446">터널링</span><span class="sxs-lookup"><span data-stu-id="b4b05-446">Tunneling</span></span>|  
|<span data-ttu-id="b4b05-447">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-447">Delegate</span></span>|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   <span data-ttu-id="b4b05-448">해당 버블링 이벤트가 <xref:System.Windows.Input.Mouse.MouseMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-448">The corresponding bubbling event is <xref:System.Windows.Input.Mouse.MouseMove>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseMoveEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseMoveEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-449"><see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-449">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-450">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-450">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-451">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-451">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-452">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-452">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" Usage="see AddPreviewMouseUpHandler, and RemovePreviewMouseUpHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-453">마우스 단추를 놓을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-453">Occurs when any mouse button is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-454">어떤 마우스 단추를 놓았음을 이벤트의 인수를 통해 결정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-454">Which mouse button was released is determined by checking the arguments of the event.</span></span>  
  
 <span data-ttu-id="b4b05-455">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-455">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-456">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-456">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-457">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-457">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-458">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-458">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-459">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-459">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-460">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework 두 가지로 표시 하는 방법으로이 연결 된 이벤트 기반 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 이벤트 <xref:System.Windows.UIElement>: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> 고 <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-460">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework builds on this attached event by surfacing it as two different [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events on <xref:System.Windows.UIElement>: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</span></span> <span data-ttu-id="b4b05-461">이러한 구현은 기본 처리 <xref:System.Windows.Input.Mouse.PreviewMouseUp> 이벤트 왼쪽 또는 오른쪽 마우스 단추 관련 되어 있는지 여부를 확인 하려면 이벤트의 인수를 읽습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-461">These implementations handle the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp> event and read the arguments of the event to determine whether the left or right mouse button was involved.</span></span> <span data-ttu-id="b4b05-462">3 단추에 대 한 가운데 단추에 대 한 프레임 워크 수준 이벤트는 지원 되지 않으며 사용 해야는 <xref:System.Windows.Input.Mouse.PreviewMouseUp> 이벤트 및 가운데 단추에 대 한 검사 조건 이벤트 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-462">For three-button, there is no framework-level event support for the center button, and you should use the <xref:System.Windows.Input.Mouse.PreviewMouseUp> event and check for the center button condition in the event arguments.</span></span>  
  
 <span data-ttu-id="b4b05-463">마우스 관련 라우트된 이벤트에 대 한 처리 된 것으로 표시 되거나 하는 방법에 대 한 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-463">For routed events that relate to the mouse, be careful about how or when you mark them handled.</span></span> <span data-ttu-id="b4b05-464">루트에 가까운 이벤트를 처리 하 고 원본 방향의 자식에서 처리 되지 적합 하지 않을 합성 컨트롤에 대 한 위치에 따라 합성 부분 예상 된 마우스 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-464">Handling the event near the root and not handling by a child further toward the source may not be appropriate for composited controls, where the compositing pieces might have expected mouse behaviors.</span></span> <span data-ttu-id="b4b05-465">알려야 하는지 여부 다른 요소 또한에 대 한 지정 된 마우스 동작 때문에 실제로 적합 하 게 선택 하기가 어렵습니다 합니다 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 프레임 워크는 모델을 선택 했기 기본 <xref:System.Windows.Input.Mouse> 로라우트된이벤트표시[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 경로의 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-465">The difficulty in making the appropriate choices about whether other elements should also be informed about any given mouse action is in fact why the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework chose the model of having the underlying <xref:System.Windows.Input.Mouse> routed event be surfaced as [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] events along the route.</span></span>  
  
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-466">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-466">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-467">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-467">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseUpEvent>|  
|<span data-ttu-id="b4b05-468">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-468">Routing strategy</span></span>|<span data-ttu-id="b4b05-469">터널링</span><span class="sxs-lookup"><span data-stu-id="b4b05-469">Tunneling</span></span>|  
|<span data-ttu-id="b4b05-470">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-470">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="b4b05-471">해당 버블링 이벤트가 <xref:System.Windows.Input.Mouse.MouseUp>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-471">The corresponding bubbling event is <xref:System.Windows.Input.Mouse.MouseUp>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseUpEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-472"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-472">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-473">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-473">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-474">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-474">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-475">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-475">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpOutsideCapturedElement">
      <MemberSignature Language="C#" Value="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" Usage="see AddPreviewMouseUpOutsideCapturedElementHandler, and RemovePreviewMouseUpOutsideCapturedElementHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-476">마우스 이벤트를 캡처하는 요소 외부에서 기본 마우스 단추를 놓을 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-476">Occurs when the primary mouse button is released outside the element that is capturing mouse events.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-477">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-477">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-478">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-478">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-479">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-479">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-480">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-480">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-481">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-481">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
 <span data-ttu-id="b4b05-482">이 이벤트는 기본 요소에 다시 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-482">This event is not resurfaced on base elements.</span></span> <span data-ttu-id="b4b05-483">마우스 캡처 및 해당 컨트롤 합치기 내에서 마우스 입력을 조정 하려는 컨트롤 작성자가 관심의 주로 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-483">It is mainly of concern to control authors that are attempting to reconcile mouse capture and mouse input within their control compositing.</span></span>  
  
<a name="routedEventInfo_PreviewMouseUpOutsideCaptureElement"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-484">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-484">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-485">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-485">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent>|  
|<span data-ttu-id="b4b05-486">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-486">Routing strategy</span></span>|<span data-ttu-id="b4b05-487">터널링</span><span class="sxs-lookup"><span data-stu-id="b4b05-487">Tunneling</span></span>|  
|<span data-ttu-id="b4b05-488">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-488">Delegate</span></span>|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   <span data-ttu-id="b4b05-489">해당 없음 버블링 이벤트가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-489">There is no corresponding bubbling event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpOutsideCapturedElementEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpOutsideCapturedElementEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpOutsideCapturedElementEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpOutsideCapturedElementEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpOutsideCapturedElementEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseUpOutsideCapturedElementEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElementEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-490"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-490">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-491">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-491">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-492">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-492">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-493">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-493">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" />
      <MemberSignature Language="ILAsm" Value="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" />
      <MemberSignature Language="F#" Value="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" Usage="see AddPreviewMouseWheelHandler, and RemovePreviewMouseWheelHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-494">마우스 휠이 회전할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-494">Occurs when the mouse wheel rotates.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-495">포커스 또는 마우스 캡처 우선; 마우스 포인터가 인 따라서 캡처된 또는 포커스가 있는 요소에서이 이벤트를 받을 경우 마우스 포인터 실제로 다른 요소 있을 시.</span><span class="sxs-lookup"><span data-stu-id="b4b05-495">Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might in fact be over another element at the time.</span></span>  
  
 <span data-ttu-id="b4b05-496">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-496">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-497">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-497">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-498">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-498">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-499">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-499">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-500">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-500">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-501">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-501">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-502">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-502">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.PreviewMouseWheelEvent>|  
|<span data-ttu-id="b4b05-503">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-503">Routing strategy</span></span>|<span data-ttu-id="b4b05-504">터널링</span><span class="sxs-lookup"><span data-stu-id="b4b05-504">Tunneling</span></span>|  
|<span data-ttu-id="b4b05-505">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-505">Delegate</span></span>|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   <span data-ttu-id="b4b05-506">해당 버블링 이벤트가 <xref:System.Windows.Input.Mouse.MouseWheel>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-506">The corresponding bubbling event is <xref:System.Windows.Input.Mouse.MouseWheel>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable PreviewMouseWheelEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.PreviewMouseWheelEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-507"><see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-507">Identifies the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-508">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-508">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-509">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-509">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-510">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-510">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryDevice">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseDevice PrimaryDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.MouseDevice PrimaryDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.PrimaryDevice" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property PrimaryDevice As MouseDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseDevice ^ PrimaryDevice { System::Windows::Input::MouseDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryDevice : System.Windows.Input.MouseDevice" Usage="System.Windows.Input.Mouse.PrimaryDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-511">기본 마우스 디바이스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-511">Gets the primary mouse device.</span></span></summary>
        <value><span data-ttu-id="b4b05-512">디바이스입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-512">The device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-513">이 속성에 Windows Presentation Foundation 인프라를 지원 하며 코드에서 직접 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-513">This property supports the Windows Presentation Foundation infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseDevice" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="see AddQueryCursorHandler, and RemoveQueryCursorHandler" />
      <MemberSignature Language="ILAsm" Value="see AddQueryCursorHandler, and RemoveQueryCursorHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Mouse.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="see AddQueryCursorHandler, and RemoveQueryCursorHandler" />
      <MemberSignature Language="F#" Value="see AddQueryCursorHandler, and RemoveQueryCursorHandler" Usage="see AddQueryCursorHandler, and RemoveQueryCursorHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b4b05-514">요소가 현재 마우스 커서를 쿼리할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-514">Occurs when an element queries for the current mouse cursor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-515">연결 된 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-515">This is an attached event.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="b4b05-516">라우트된 이벤트로 연결 된 이벤트를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-516">implements attached events as routed events.</span></span> <span data-ttu-id="b4b05-517">연결 된 이벤트는 기본적으로 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 해당 이벤트를 정의 하지 않은 개체에서 처리 될 수 있는 이벤트를 참조 하는 것에 대 한 언어 개념은 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 경로 순회 하도록 하 여 이벤트를 설정 하는 방식으로 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-517">Attached events are fundamentally a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] language concept for referencing events that can be handled on objects that do not define that event, which [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expands upon by also enabling the event to traverse a route.</span></span> <span data-ttu-id="b4b05-518">연결 된 이벤트 코드에서 직접 처리 구문이 없습니다 지정 된 추가 사용 하면 코드에서 라우트된 이벤트에 대 한 처리기를 연결 하려면 \* 처리기 메서드.</span><span class="sxs-lookup"><span data-stu-id="b4b05-518">Attached events do not have a direct handling syntax in code; to attach handlers for a routed event in code, you use a designated Add\*Handler method.</span></span> <span data-ttu-id="b4b05-519">자세한 내용은 참조 하세요 [연결 된 이벤트 개요](~/docs/framework/wpf/advanced/attached-events-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-519">For details, see [Attached Events Overview](~/docs/framework/wpf/advanced/attached-events-overview.md).</span></span>  
  
<a name="routedEventInfo_Querycursor"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="b4b05-520">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="b4b05-520">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="b4b05-521">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="b4b05-521">Identifier field</span></span>|<xref:System.Windows.Input.Mouse.QueryCursorEvent>|  
|<span data-ttu-id="b4b05-522">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="b4b05-522">Routing strategy</span></span>|<span data-ttu-id="b4b05-523">버블링</span><span class="sxs-lookup"><span data-stu-id="b4b05-523">Bubbling</span></span>|  
|<span data-ttu-id="b4b05-524">대리자</span><span class="sxs-lookup"><span data-stu-id="b4b05-524">Delegate</span></span>|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
 <span data-ttu-id="b4b05-525">정의 된 해당 터널링 이벤트가 없습니다 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-525">There is no defined corresponding tunneling event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.Mouse.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable QueryCursorEvent : System.Windows.RoutedEvent" Usage="System.Windows.Input.Mouse.QueryCursorEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-526"><see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 연결된 이벤트를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-526">Identifies the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-527">라우트된 이벤트에 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 하는 경우 라우트된 이벤트 식별자가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-527">Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</span></span> <span data-ttu-id="b4b05-528">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트에 대 한 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-528">These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span> <span data-ttu-id="b4b05-529">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-529">You often use these identifiers as parameters to event system methods, to identify a particular routed event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveGotMouseCaptureHandler">
      <MemberSignature Language="C#" Value="public static void RemoveGotMouseCaptureHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveGotMouseCaptureHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveGotMouseCaptureHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveGotMouseCaptureHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveGotMouseCaptureHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveGotMouseCaptureHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-530">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-530">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-531">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-531">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-532"><see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-532">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLostMouseCaptureHandler">
      <MemberSignature Language="C#" Value="public static void RemoveLostMouseCaptureHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveLostMouseCaptureHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveLostMouseCaptureHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveLostMouseCaptureHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveLostMouseCaptureHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveLostMouseCaptureHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-533">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-533">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-534">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-534">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-535"><see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-535">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseDownHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseDownHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseDownHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseDownHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-536">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-536">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-537">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-537">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-538"><see cref="E:System.Windows.Input.Mouse.MouseDown" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-538">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseDown" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseEnterHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseEnterHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseEnterHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseEnterHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseEnterHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseEnterHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseEnterHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseEnterHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-539">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-539">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-540">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-540">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-541"><see cref="E:System.Windows.Input.Mouse.MouseEnter" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-541">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseLeaveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseLeaveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseLeaveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseLeaveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseLeaveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseLeaveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseLeaveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseLeaveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-542">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-542">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-543">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-543">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-544"><see cref="E:System.Windows.Input.Mouse.MouseLeave" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-544">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseMoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseMoveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseMoveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseMoveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseMoveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseMoveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseMoveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-545">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-545">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-546">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-546">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-547"><see cref="E:System.Windows.Input.Mouse.MouseMove" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-547">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseMove" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseUpHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseUpHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseUpHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseUpHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-548">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-548">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-549">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-549">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-550"><see cref="E:System.Windows.Input.Mouse.MouseUp" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-550">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseUp" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveMouseWheelHandler">
      <MemberSignature Language="C#" Value="public static void RemoveMouseWheelHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMouseWheelHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseWheelEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMouseWheelHandler (element As DependencyObject, handler As MouseWheelEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMouseWheelHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseWheelEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveMouseWheelHandler : System.Windows.DependencyObject * System.Windows.Input.MouseWheelEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveMouseWheelHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseWheelEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-551">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-551">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-552">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-552">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-553"><see cref="E:System.Windows.Input.Mouse.MouseWheel" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-553">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseDownHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseDownHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseDownHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseDownHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseDownHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseDownHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseDownHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseDownHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-554">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-554">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-555">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-555">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-556"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-556">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseDownOutsideCapturedElementHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseDownOutsideCapturedElementHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseDownOutsideCapturedElementHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseDownOutsideCapturedElementHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseDownOutsideCapturedElementHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseDownOutsideCapturedElementHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseDownOutsideCapturedElementHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-557">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-557">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-558">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-558">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-559"><see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-559">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseDownOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseMoveHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseMoveHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseMoveHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler(System.Windows.DependencyObject,System.Windows.Input.MouseEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseMoveHandler (element As DependencyObject, handler As MouseEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseMoveHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseMoveHandler : System.Windows.DependencyObject * System.Windows.Input.MouseEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseMoveHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-560">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-560">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-561">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-561">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-562"><see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-562">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseUpHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseUpHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseUpHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseUpHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseUpHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseUpHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseUpHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseUpHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-563">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-563">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-564">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-564">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-565"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-565">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseUpOutsideCapturedElementHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseUpOutsideCapturedElementHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseUpOutsideCapturedElementHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseButtonEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseUpOutsideCapturedElementHandler (element As DependencyObject, handler As MouseButtonEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseUpOutsideCapturedElementHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseButtonEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseUpOutsideCapturedElementHandler : System.Windows.DependencyObject * System.Windows.Input.MouseButtonEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseUpOutsideCapturedElementHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseButtonEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-566">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-566">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-567">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-567">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-568"><see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-568">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseUpOutsideCapturedElement" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePreviewMouseWheelHandler">
      <MemberSignature Language="C#" Value="public static void RemovePreviewMouseWheelHandler (System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePreviewMouseWheelHandler(class System.Windows.DependencyObject element, class System.Windows.Input.MouseWheelEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemovePreviewMouseWheelHandler (element As DependencyObject, handler As MouseWheelEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePreviewMouseWheelHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::MouseWheelEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemovePreviewMouseWheelHandler : System.Windows.DependencyObject * System.Windows.Input.MouseWheelEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemovePreviewMouseWheelHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.MouseWheelEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-569">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-569">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-570">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-570">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-571"><see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-571">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveQueryCursorHandler">
      <MemberSignature Language="C#" Value="public static void RemoveQueryCursorHandler (System.Windows.DependencyObject element, System.Windows.Input.QueryCursorEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveQueryCursorHandler(class System.Windows.DependencyObject element, class System.Windows.Input.QueryCursorEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.RemoveQueryCursorHandler(System.Windows.DependencyObject,System.Windows.Input.QueryCursorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveQueryCursorHandler (element As DependencyObject, handler As QueryCursorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveQueryCursorHandler(System::Windows::DependencyObject ^ element, System::Windows::Input::QueryCursorEventHandler ^ handler);" />
      <MemberSignature Language="F#" Value="static member RemoveQueryCursorHandler : System.Windows.DependencyObject * System.Windows.Input.QueryCursorEventHandler -&gt; unit" Usage="System.Windows.Input.Mouse.RemoveQueryCursorHandler (element, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.Input.QueryCursorEventHandler" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="b4b05-572">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-572">The <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" /> that listens to this event.</span></span></param>
        <param name="handler"><span data-ttu-id="b4b05-573">이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-573">The event handler.</span></span></param>
        <summary><span data-ttu-id="b4b05-574"><see cref="E:System.Windows.Input.Mouse.QueryCursor" /> 연결된 이벤트에 대한 처리기를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-574">Removes a handler for the <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> attached event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightButton">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState RightButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState RightButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.RightButton" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RightButton As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState RightButton { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.RightButton : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.RightButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-575">마우스 오른쪽 단추의 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-575">Gets the state of the right button.</span></span></summary>
        <value><span data-ttu-id="b4b05-576">마우스 오른쪽 단추의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-576">The state of the right mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b4b05-577">다음 예제에서는 확인 하 여 마우스 오른쪽 단추를 눌렀는지 여부를 결정 하는 방법의 상태를 <xref:System.Windows.Input.Mouse.RightButton%2A> 값과 같음 합니다 <xref:System.Windows.Input.MouseButtonState> 열거형 값 <xref:System.Windows.Input.MouseButtonState.Pressed>.</span><span class="sxs-lookup"><span data-stu-id="b4b05-577">The following example shows how to determine whether the right mouse button is pressed by checking if the state of the <xref:System.Windows.Input.Mouse.RightButton%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="b4b05-578">단추를 누르는 경우 샘플의 요소를 표시 하는 업데이트 하는 메서드 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-578">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetRightButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetrightbuttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetRightButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetrightbuttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SetCursor">
      <MemberSignature Language="C#" Value="public static bool SetCursor (System.Windows.Input.Cursor cursor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetCursor(class System.Windows.Input.Cursor cursor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.SetCursor(System.Windows.Input.Cursor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetCursor(System::Windows::Input::Cursor ^ cursor);" />
      <MemberSignature Language="F#" Value="static member SetCursor : System.Windows.Input.Cursor -&gt; bool" Usage="System.Windows.Input.Mouse.SetCursor cursor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cursor" Type="System.Windows.Input.Cursor" />
      </Parameters>
      <Docs>
        <param name="cursor"><span data-ttu-id="b4b05-579">마우스 포인터를 설정할 커서입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-579">The cursor to set the mouse pointer to.</span></span></param>
        <summary><span data-ttu-id="b4b05-580">마우스 포인터를 지정된 <see cref="T:System.Windows.Input.Cursor" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-580">Sets the mouse pointer to the specified <see cref="T:System.Windows.Input.Cursor" />.</span></span></summary>
        <returns><span data-ttu-id="b4b05-581">커서가 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-581"><see langword="true" />, if the cursor was set; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b4b05-582">설정 되는 커서, 특정 요소에 적용 되지 않습니다 하지만 대신 전체 응용 프로그램에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-582">The cursor being set does not apply to any particular element, but rather it applies to the whole application.</span></span>  <span data-ttu-id="b4b05-583">따라서 커서를 설정 하는 개체 위로 마우스 포인터를 이동 하는 커서를 설정한 후 커서 다시 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-583">So, if after setting the cursor the mouse pointer moves over an object which sets the cursor, the cursor will be changed again.</span></span>  
  
 <span data-ttu-id="b4b05-584">특정 마우스 포인터를 강제로 <xref:System.Windows.Input.Cursor> 이 강제로 <xref:System.Windows.Input.Cursor> 모든 요소를 설정 합니다 <xref:System.Windows.Input.Mouse.OverrideCursor%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-584">To force the mouse pointer to a specific <xref:System.Windows.Input.Cursor> and to force this <xref:System.Windows.Input.Cursor> on all elements, set the <xref:System.Windows.Input.Mouse.OverrideCursor%2A> property.</span></span>  
  
 <span data-ttu-id="b4b05-585">특정 요소에 커서를 설정 하려면 사용 합니다 <xref:System.Windows.FrameworkElement.Cursor%2A> 속성에 <xref:System.Windows.FrameworkElement> 또는 <xref:System.Windows.FrameworkContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-585">To set the cursor on a specific element, use the <xref:System.Windows.FrameworkElement.Cursor%2A> property on either <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span>  <span data-ttu-id="b4b05-586">기본 요소에 대 한 자세한 내용은 참조는 [기본 요소 개요](~/docs/framework/wpf/advanced/base-elements-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-586">For more information on the base elements, see the [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursors" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="Synchronize">
      <MemberSignature Language="C#" Value="public static void Synchronize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Synchronize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.Synchronize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Synchronize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Synchronize();" />
      <MemberSignature Language="F#" Value="static member Synchronize : unit -&gt; unit" Usage="System.Windows.Input.Mouse.Synchronize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b4b05-587">마우스를 다시 동기화합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-587">Forces the mouse to resynchronize.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.MouseDevice" />
        <altmember cref="M:System.Windows.Input.Mouse.Synchronize" />
      </Docs>
    </Member>
    <Member MemberName="UpdateCursor">
      <MemberSignature Language="C#" Value="public static void UpdateCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateCursor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Mouse.UpdateCursor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UpdateCursor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UpdateCursor();" />
      <MemberSignature Language="F#" Value="static member UpdateCursor : unit -&gt; unit" Usage="System.Windows.Input.Mouse.UpdateCursor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b4b05-588">마우스 커서를 업데이트합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-588">Forces the mouse cursor to be updated.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XButton1">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState XButton1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState XButton1" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.XButton1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property XButton1 As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState XButton1 { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.XButton1 : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.XButton1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-589">첫 번째로 확장된 단추의 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-589">Gets the state of the first extended button.</span></span></summary>
        <value><span data-ttu-id="b4b05-590">첫 번째로 확장된 마우스 단추의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-590">The state of the first extended mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b4b05-591">다음 예제에서는 확인 하 여 첫 번째 확장 된 마우스 단추를 눌렀는지 여부를 결정 하는 방법의 상태 <xref:System.Windows.Input.Mouse.XButton1%2A> 값과 같음 합니다 <xref:System.Windows.Input.MouseButtonState> 열거형 값 <xref:System.Windows.Input.MouseButtonState.Pressed>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-591">The following example shows how to determine whether the first extended mouse button is pressed by checking if the state of <xref:System.Windows.Input.Mouse.XButton1%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="b4b05-592">단추를 누르는 경우 샘플의 요소를 표시 하는 업데이트 하는 메서드 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-592">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetX1ButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetx1buttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetX1ButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetx1buttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="XButton2">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.MouseButtonState XButton2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Input.MouseButtonState XButton2" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Mouse.XButton2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property XButton2 As MouseButtonState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::MouseButtonState XButton2 { System::Windows::Input::MouseButtonState get(); };" />
      <MemberSignature Language="F#" Value="member this.XButton2 : System.Windows.Input.MouseButtonState" Usage="System.Windows.Input.Mouse.XButton2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b4b05-593">두 번째로 확장된 단추의 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-593">Gets the state of the second extended button.</span></span></summary>
        <value><span data-ttu-id="b4b05-594">두 번째로 확장된 마우스 단추의 상태입니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-594">The state of the second extended mouse button.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b4b05-595">다음 예제에서는 확인 하 여 두 번째 확장 된 마우스 단추를 눌렀는지 여부를 결정 하는 방법의 상태 <xref:System.Windows.Input.Mouse.XButton2%2A> 값과 같음 합니다 <xref:System.Windows.Input.MouseButtonState> 열거형 값 <xref:System.Windows.Input.MouseButtonState.Pressed>합니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-595">The following example shows how to determine whether the second extended mouse button is pressed by checking if the state of <xref:System.Windows.Input.Mouse.XButton2%2A> is equal to the <xref:System.Windows.Input.MouseButtonState> enumeration value <xref:System.Windows.Input.MouseButtonState.Pressed>.</span></span>  <span data-ttu-id="b4b05-596">단추를 누르는 경우 샘플의 요소를 표시 하는 업데이트 하는 메서드 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b4b05-596">If the button is pressed, a method is called which updates display elements in the sample.</span></span>  
  
 [!code-csharp[MouseRelatedSnippets#MouseRelatedSnippetsGetX2ButtonMouse](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseRelatedSnippets/CSharp/Window1.xaml.cs#mouserelatedsnippetsgetx2buttonmouse)]
 [!code-vb[MouseRelatedSnippets#MouseRelatedSnippetsGetX2ButtonMouse](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseRelatedSnippets/visualbasic/window1.xaml.vb#mouserelatedsnippetsgetx2buttonmouse)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.MouseButtonEventArgs" />
      </Docs>
    </Member>
  </Members>
</Type>