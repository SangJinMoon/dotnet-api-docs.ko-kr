<Type Name="Touch" FullName="System.Windows.Input.Touch">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bfe044e6246f3488392cc43580452b6a0c27114f" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53224035" /></Metadata><TypeSignature Language="C#" Value="public static class Touch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Touch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Touch" />
  <TypeSignature Language="VB.NET" Value="Public Class Touch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Touch abstract sealed" />
  <TypeSignature Language="F#" Value="type Touch = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="bef54-101">운영 체제에서 다중 터치 입력을 처리하는 응용 프로그램 수준 서비스를 제공하며 <see cref="E:System.Windows.Input.Touch.FrameReported" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-101">Provides an application-level service that processes multitouch input from the operating system and raises the <see cref="E:System.Windows.Input.Touch.FrameReported" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bef54-102"><xref:System.Windows.Input.Touch.FrameReported> 이벤트는 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] Silverlight 호환성을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-102">The <xref:System.Windows.Input.Touch.FrameReported> event is included in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] to support compatibility with Silverlight.</span></span> <span data-ttu-id="bef54-103">Silverlight 사용 하 여 호환성을 보장 해야 하는 경우 사용 하 여 터치 이벤트와 같은 <xref:System.Windows.UIElement.TouchDown> 하 고 <xref:System.Windows.UIElement.TouchMove>의 <xref:System.Windows.UIElement>를 <xref:System.Windows.UIElement3D>, 또는 <xref:System.Windows.ContentElement>합니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-103">If you do not have to ensure compatibility with Silverlight, use the touch events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>, on <xref:System.Windows.UIElement>, <xref:System.Windows.UIElement3D>, or <xref:System.Windows.ContentElement>.</span></span>  
  
 <span data-ttu-id="bef54-104">합니다 <xref:System.Windows.Input.Touch.FrameReported> 이벤트 모델을 사용 하지는 동일한 이벤트 다른 WPF 입력된 이벤트와 같은 <xref:System.Windows.UIElement.TouchDown> 고 <xref:System.Windows.UIElement.TouchMove>입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-104">The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other WPF input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>.</span></span> <span data-ttu-id="bef54-105">개체 트리를 UI 통해 라우팅하는 요소별 이벤트로 노출 되는 대신는 <xref:System.Windows.Input.Touch.FrameReported> 이벤트는 응용 프로그램 수준에서 처리 되는 단일 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-105">Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level.</span></span> <span data-ttu-id="bef54-106">따라서 사용할 수 없습니다는 `sender` 어떤 요소가 터치 되었는지 확인 하려면 이벤트 처리기의 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-106">Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.</span></span>  
  
 <span data-ttu-id="bef54-107">사용 합니다 <xref:System.Windows.Input.TouchFrameEventArgs> 가져오려는 <xref:System.Windows.Input.TouchPoint> 터치 이벤트와 관련 된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-107">Use the <xref:System.Windows.Input.TouchFrameEventArgs> to get the <xref:System.Windows.Input.TouchPoint> values that are relevant to the touch event.</span></span> <span data-ttu-id="bef54-108"><xref:System.Windows.Input.TouchPoint>를 가져올 수 있습니다를 <xref:System.Windows.Input.TouchPoint.Position%2A> 터치의 확인 및 있는지 여부를 <xref:System.Windows.Input.TouchAction> 되었습니다를 <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, 또는 <xref:System.Windows.Input.TouchAction.Up> 작업.</span><span class="sxs-lookup"><span data-stu-id="bef54-108">From the <xref:System.Windows.Input.TouchPoint>, you can get the <xref:System.Windows.Input.TouchPoint.Position%2A> of the touch and determine whether the <xref:System.Windows.Input.TouchAction> was a <xref:System.Windows.Input.TouchAction.Down>, <xref:System.Windows.Input.TouchAction.Move>, or <xref:System.Windows.Input.TouchAction.Up> action.</span></span> <span data-ttu-id="bef54-109">사용할 수도 있습니다는 <xref:System.Windows.Input.TouchPoint> 가져오려고 합니다 <xref:System.Windows.Input.TouchDevice>합니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-109">You can also use the <xref:System.Windows.Input.TouchPoint> to get the <xref:System.Windows.Input.TouchDevice>.</span></span> <span data-ttu-id="bef54-110"><xref:System.Windows.Input.TouchDevice>, 장치를 확인할 수 있습니다 <xref:System.Windows.Input.TouchDevice.Id%2A> 받고 있는 위치의 요소에 대 한 정보.</span><span class="sxs-lookup"><span data-stu-id="bef54-110">From the <xref:System.Windows.Input.TouchDevice>, you can determine the device <xref:System.Windows.Input.TouchDevice.Id%2A> and get information about the element that is touched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bef54-111">다음 예에서는 간단한 패턴에서 만들 수는 <xref:System.Windows.Controls.Canvas> 터치 스크린에서 두 손가락을 드래그 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-111">The following example enables you to create simple patterns on a <xref:System.Windows.Controls.Canvas> by dragging two fingers across a touchscreen.</span></span> <span data-ttu-id="bef54-112">각 터치는 표현 된 <xref:System.Windows.Input.TouchDevice>합니다. 패턴은 터치에 의해 제공 된 터치 지점 사이의 선을 그려 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-112">Each touch is represented by a <xref:System.Windows.Input.TouchDevice>.The pattern is created by drawing a line between the touch points provided by the touches.</span></span> <span data-ttu-id="bef54-113">이 예제에서는 Windows Touch 호환 화면이 필요합니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-113">This example requires a Windows Touch-compatible screen.</span></span>  
  
 <span data-ttu-id="bef54-114">다음 태그에 구성 된 사용자 인터페이스를 만들고를 <xref:System.Windows.Controls.Canvas> 가운데에 <xref:System.Windows.Controls.Grid>합니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-114">The following markup creates the user interface, which consists of a <xref:System.Windows.Controls.Canvas> that is centered in a <xref:System.Windows.Controls.Grid>.</span></span>  
  
 [!code-xaml[TouchFrameSample#000](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml#000)]  
  
 <span data-ttu-id="bef54-115">다음 코드 처리를 <xref:System.Windows.Input.Touch.FrameReported> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-115">The following code handles the <xref:System.Windows.Input.Touch.FrameReported> event.</span></span> <span data-ttu-id="bef54-116">터치가 누를 때 합니다 <xref:System.Windows.Controls.Canvas>, <xref:System.Windows.Input.TouchDevice> 에 캡처되는지를 <xref:System.Windows.Controls.Canvas>입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-116">When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>.</span></span> <span data-ttu-id="bef54-117">터치 리프트 된 때를 <xref:System.Windows.Input.TouchDevice> 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-117">When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released.</span></span> <span data-ttu-id="bef54-118">터치에서 이동 하는 경우는 <xref:System.Windows.Controls.Canvas>, <xref:System.Windows.Input.TouchDevice.Id%2A> 확인란이 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-118">When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked.</span></span> <span data-ttu-id="bef54-119">첫 번째 터치에서 이동 하는 경우, 해당 위치에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-119">If the move came from the first touch, its location is recorded.</span></span> <span data-ttu-id="bef54-120">두 번째 터치에서 이동 하는 경우, 두 번째 터치 위치를 줄의 첫 번째 터치 위치에서 그려집니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-120">If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.</span></span>  
  
 [!code-csharp[TouchFrameSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#100)]
 [!code-vb[TouchFrameSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#100)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FrameReported">
      <MemberSignature Language="C#" Value="public static event System.Windows.Input.TouchFrameEventHandler FrameReported;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TouchFrameEventHandler FrameReported" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Touch.FrameReported" />
      <MemberSignature Language="VB.NET" Value="Public Shared Event FrameReported As TouchFrameEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Windows::Input::TouchFrameEventHandler ^ FrameReported;" />
      <MemberSignature Language="F#" Value="member this.FrameReported : System.Windows.Input.TouchFrameEventHandler " Usage="member this.FrameReported : System.Windows.Input.TouchFrameEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchFrameEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bef54-121">터치 메시지가 전송되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-121">Occurs when a touch message is sent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bef54-122">프레임은 일련의 다중 터치 메시지 또는 터치 포인트에서.</span><span class="sxs-lookup"><span data-stu-id="bef54-122">A frame is one in a series of multitouch messages or touch points.</span></span> <span data-ttu-id="bef54-123">처리 하 여 터치에 응답할 수는 <xref:System.Windows.Input.Touch.FrameReported> 이벤트의 세부 정보에 액세스 하 고는 <xref:System.Windows.Input.TouchPoint> 에서 <xref:System.Windows.Input.TouchFrameEventArgs> 이벤트 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-123">You can respond to touches by handling the <xref:System.Windows.Input.Touch.FrameReported> event and accessing the details of the <xref:System.Windows.Input.TouchPoint> from the <xref:System.Windows.Input.TouchFrameEventArgs> event data.</span></span>  
  
 <span data-ttu-id="bef54-124">합니다 <xref:System.Windows.Input.Touch.FrameReported> 이벤트 다른 동일한 이벤트 모델을 사용 하지 [!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)] 와 같은 입력 이벤트 <xref:System.Windows.UIElement.TouchDown> 및 <xref:System.Windows.UIElement.TouchMove>합니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-124">The <xref:System.Windows.Input.Touch.FrameReported> event does not use the same event model as other [!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)] input events, such as <xref:System.Windows.UIElement.TouchDown> and <xref:System.Windows.UIElement.TouchMove>.</span></span> <span data-ttu-id="bef54-125">개체 트리를 UI 통해 라우팅하는 요소별 이벤트로 노출 되는 대신는 <xref:System.Windows.Input.Touch.FrameReported> 이벤트는 응용 프로그램 수준에서 처리 되는 단일 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-125">Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <xref:System.Windows.Input.Touch.FrameReported> event is a single event that is handled at the application level.</span></span> <span data-ttu-id="bef54-126">따라서 사용할 수 없습니다는 `sender` 어떤 요소가 터치 되었는지 확인 하려면 이벤트 처리기의 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-126">Therefore, you cannot use the `sender` parameter of the event handler to determine what element is touched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bef54-127">다음 예제에서는 처리 된 <xref:System.Windows.Input.Touch.FrameReported> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-127">The following example handles the <xref:System.Windows.Input.Touch.FrameReported> event.</span></span> <span data-ttu-id="bef54-128">터치가 누를 때 합니다 <xref:System.Windows.Controls.Canvas>, <xref:System.Windows.Input.TouchDevice> 에 캡처되는지를 <xref:System.Windows.Controls.Canvas>입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-128">When a touch presses on the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice> is captured to the <xref:System.Windows.Controls.Canvas>.</span></span> <span data-ttu-id="bef54-129">터치 리프트 된 때를 <xref:System.Windows.Input.TouchDevice> 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-129">When the touch is lifted, the <xref:System.Windows.Input.TouchDevice> is released.</span></span> <span data-ttu-id="bef54-130">터치에서 이동 하는 경우는 <xref:System.Windows.Controls.Canvas>, <xref:System.Windows.Input.TouchDevice.Id%2A> 확인란이 선택 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-130">When a touch moves across the <xref:System.Windows.Controls.Canvas>, the <xref:System.Windows.Input.TouchDevice.Id%2A> is checked.</span></span> <span data-ttu-id="bef54-131">첫 번째 터치에서 이동 하는 경우, 해당 위치에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-131">If the move came from the first touch, its location is recorded.</span></span> <span data-ttu-id="bef54-132">두 번째 터치에서 이동 하는 경우, 두 번째 터치 위치를 줄의 첫 번째 터치 위치에서 그려집니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-132">If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.</span></span>  
  
 <span data-ttu-id="bef54-133">이 예제는에서 사용할 수 있는 보다 큰 예제의 일부는 <xref:System.Windows.Input.Touch> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="bef54-133">This example is part of a larger example that is available in the <xref:System.Windows.Input.Touch> class overview.</span></span>  
  
 [!code-csharp[TouchFrameSample#110](~/samples/snippets/csharp/VS_Snippets_Wpf/touchframesample/cs/mainwindow.xaml.cs#110)]
 [!code-vb[TouchFrameSample#110](~/samples/snippets/visualbasic/VS_Snippets_Wpf/touchframesample/vb/mainwindow.xaml.vb#110)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>