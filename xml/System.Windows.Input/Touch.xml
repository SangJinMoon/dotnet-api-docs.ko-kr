<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Touch.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c303be5b4a301d0fee4df08c2d9b374d0081a934.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c303be5b4a301d0fee4df08c2d9b374d0081a934</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.Touch">
          <source>Provides an application-level service that processes multitouch input from the operating system and raises the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Touch.FrameReported" /&gt;</ph> event.</source>
          <target state="translated">운영 체제에서 다중 터치 입력을 처리하는 응용 프로그램 수준 서비스를 제공하며 <ph id="ph1">&lt;see cref="E:System.Windows.Input.Touch.FrameReported" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event is included in <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> to support compatibility with Silverlight.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> 이벤트는 <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> Silverlight 호환성을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>If you do not have to ensure compatibility with Silverlight, use the touch events, such as <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>, on <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.UIElement3D&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
          <target state="translated">Silverlight와의 호환성을 확인 해야 하는 경우 사용 하 여 터치 이벤트와 같은 <ph id="ph1">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>의 <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.UIElement3D&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.Windows.ContentElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event does not use the same event model as other WPF input events, such as <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> 이벤트를 사용 하지 않는 동일한 이벤트 모델 다른 WPF 입력된 이벤트와 같은 <ph id="ph2">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event is a single event that is handled at the application level.</source>
          <target state="translated">개체 트리는 UI 통해 라우팅하는 요소 관련 이벤트로 노출 되는 대신는 <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> 이벤트는 응용 프로그램 수준에서 처리 하는 단일 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>Therefore, you cannot use the <ph id="ph1">`sender`</ph> parameter of the event handler to determine what element is touched.</source>
          <target state="translated">따라서 사용할 수 없습니다는 <ph id="ph1">`sender`</ph> 어떤 요소가 터치 되었는지 확인 하려면 이벤트 처리기의 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Input.TouchFrameEventArgs&gt;</ph> to get the <ph id="ph2">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> values that are relevant to the touch event.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Input.TouchFrameEventArgs&gt;</ph> 가져오려는 <ph id="ph2">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> 터치 이벤트와 관련 된 된 값입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>From the <ph id="ph1">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph>, you can get the <ph id="ph2">&lt;xref:System.Windows.Input.TouchPoint.Position%2A&gt;</ph> of the touch and determine whether the <ph id="ph3">&lt;xref:System.Windows.Input.TouchAction&gt;</ph> was a <ph id="ph4">&lt;xref:System.Windows.Input.TouchAction.Down&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.TouchAction.Move&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Input.TouchAction.Up&gt;</ph> action.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph>, 얻을 수 있습니다는 <ph id="ph2">&lt;xref:System.Windows.Input.TouchPoint.Position%2A&gt;</ph> 터치의 확인 여부는 <ph id="ph3">&lt;xref:System.Windows.Input.TouchAction&gt;</ph> 했습니다는 <ph id="ph4">&lt;xref:System.Windows.Input.TouchAction.Down&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.TouchAction.Move&gt;</ph>, 또는 <ph id="ph6">&lt;xref:System.Windows.Input.TouchAction.Up&gt;</ph> 동작 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> to get the <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>.</source>
          <target state="translated">사용할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> 가져오려는 <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>From the <ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>, you can determine the device <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> and get information about the element that is touched.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>, 장치를 확인할 수 있습니다 <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> 있는 위치의 요소에 대 한 정보를 얻을 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>The following example enables you to create simple patterns on a <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> by dragging two fingers across a touchscreen.</source>
          <target state="translated">다음 예에서는 간단한 패턴에 만들 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> 두 손가락 터치 스크린에서 끌어 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>Each touch is represented by a <ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>.The pattern is created by drawing a line between the touch points provided by the touches.</source>
          <target state="translated">각 터치로 표시 됩니다는 <ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph>합니다. 패턴은 터치에 의해 제공 터치 포인트 사이 선을 그려 하 여 만들어집니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>This example requires a Windows Touch–compatible screen.</source>
          <target state="translated">이 예제에서는 Windows 터치 호환 화면이 필요합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>The following markup creates the user interface, which consists of a <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> that is centered in a <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.</source>
          <target state="translated">다음 태그의 구성 된 사용자 인터페이스를 만들고는 <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> 가운데에 <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>The following code handles the <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event.</source>
          <target state="translated">다음 코드 핸들의 <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>When a touch presses on the <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is captured to the <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
          <target state="translated">를 누르면 터치는 <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> 캡처는 <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>When the touch is lifted, the <ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is released.</source>
          <target state="translated">터치가 올리면 때는 <ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>When a touch moves across the <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> is checked.</source>
          <target state="translated">터치를 통해 이동 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> 을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>If the move came from the first touch, its location is recorded.</source>
          <target state="translated">이동 하는 첫 번째 터치 로부터 전송 된, 해당 위치에 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Touch">
          <source>If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.</source>
          <target state="translated">이동 하는 두 번째 터치 로부터 전송 된, 두 번째 터치의 위치에 첫 번째 터치 위치에서 선이 그려집니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>Occurs when a touch message is sent.</source>
          <target state="translated">터치 메시지가 전송되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>A frame is one in a series of multitouch messages or touch points.</source>
          <target state="translated">프레임은 1 멀티 터치 메시지 또는 터치 포인트의 일련의 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>You can respond to touches by handling the <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event and accessing the details of the <ph id="ph2">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> from the <ph id="ph3">&lt;xref:System.Windows.Input.TouchFrameEventArgs&gt;</ph> event data.</source>
          <target state="translated">처리 하 여 작업에 응답할 수는 <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> 이벤트의 세부 정보에 액세스 하 고는 <ph id="ph2">&lt;xref:System.Windows.Input.TouchPoint&gt;</ph> 에서 <ph id="ph3">&lt;xref:System.Windows.Input.TouchFrameEventArgs&gt;</ph> 이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event does not use the same event model as other <ph id="ph2">[!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)]</ph> input events, such as <ph id="ph3">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> 이벤트 다른 동일한 이벤트 모델을 사용 하지 않는 <ph id="ph2">[!INCLUDE[TLA#tla_titlewinclient](~/includes/tlasharptla-titlewinclient-md.md)]</ph> 입력 이벤트와 같은 <ph id="ph3">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> 및 <ph id="ph4">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>Instead of being exposed as an element-specific event that potentially routes through the object tree of a UI, the <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event is a single event that is handled at the application level.</source>
          <target state="translated">개체 트리는 UI 통해 라우팅하는 요소 관련 이벤트로 노출 되는 대신는 <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> 이벤트는 응용 프로그램 수준에서 처리 하는 단일 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>Therefore, you cannot use the <ph id="ph1">`sender`</ph> parameter of the event handler to determine what element is touched.</source>
          <target state="translated">따라서 사용할 수 없습니다는 <ph id="ph1">`sender`</ph> 어떤 요소가 터치 되었는지 확인 하려면 이벤트 처리기의 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>The following example handles the <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> event.</source>
          <target state="translated">다음 예제에서는 핸들의 <ph id="ph1">&lt;xref:System.Windows.Input.Touch.FrameReported&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>When a touch presses on the <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is captured to the <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
          <target state="translated">를 누르면 터치는 <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> 캡처는 <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>When the touch is lifted, the <ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is released.</source>
          <target state="translated">터치가 올리면 때는 <ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> 해제 됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>When a touch moves across the <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> is checked.</source>
          <target state="translated">터치를 통해 이동 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.TouchDevice.Id%2A&gt;</ph> 을 선택 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>If the move came from the first touch, its location is recorded.</source>
          <target state="translated">이동 하는 첫 번째 터치 로부터 전송 된, 해당 위치에 기록 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>If the move came from the second touch, a line is drawn from the position of the first touch to the position of the second touch.</source>
          <target state="translated">이동 하는 두 번째 터치 로부터 전송 된, 두 번째 터치의 위치에 첫 번째 터치 위치에서 선이 그려집니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.Touch.FrameReported">
          <source>This example is part of a larger example that is available in the <ph id="ph1">&lt;xref:System.Windows.Input.Touch&gt;</ph> class overview.</source>
          <target state="translated">이 예제는에서 사용할 수 있는 보다 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Windows.Input.Touch&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>