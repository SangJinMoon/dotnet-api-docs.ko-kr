<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CommandManager.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5174db82edff5383f90d1d46c76c2a625f61f628a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">174db82edff5383f90d1d46c76c2a625f61f628a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.CommandManager">
          <source>Provides command related utility methods that register <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> objects for class owners and commands, add and remove command event handlers, and provides services for querying the status of a command.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> 개체를 클래스 소유자 및 명령에 등록하고 명령 이벤트 처리기를 추가 및 제거하며 명령 상태를 쿼리하는 서비스를 제공하는 명령 관련 유틸리티 메서드를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> is responsible for managing routed commands.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 는 라우트된 명령을 관리 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>For more information about commanding, see <bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>.</source>
          <target state="translated">명령 실행에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>명령 실행 개요<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A&gt;</ph> to register a <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> to a class as opposed to an instance.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A&gt;</ph> 등록 하는 <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> 인스턴스가 아닌 클래스에 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> to register an <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> to a class as opposed to an instance.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> 등록 하는 <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> 인스턴스가 아닌 클래스에 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> method forces the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> 메서드는 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 시키려면는 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CommandManager">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event informs a command source to query the command it is associated with to determine whether or not the command can execute.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> 이벤트에 명령 소스 쿼리 명령을 실행할 수 있는지 여부를 확인 하려면 연관 된 명령을에 알립니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>처리기<ept id="p1">&lt;/c&gt;</ept>를 연결할 요소입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">실행 가능 처리기입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph>를 지정된 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 에 연결 된 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> 에 대 한 명령 소스는 <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">첫째는 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 생성 되 고 연결 된는 <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">다음으로 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 만들어집니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>And finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">에 연결 된 처리기는 마지막으로, 및는 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>처리기<ept id="p1">&lt;/c&gt;</ept>를 연결할 요소입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The executed handler.</source>
          <target state="translated">실행된 처리기입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph>를 지정된 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 에 연결 된 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> 에 대 한 명령 소스는 <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">첫째는 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 생성 되 고 연결 된는 <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">다음으로 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 만들어집니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>And finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">에 연결 된 처리기는 마지막으로, 및는 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>처리기<ept id="p1">&lt;/c&gt;</ept>를 연결할 요소입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">실행 가능 처리기입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph>를 지정된 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 에 연결 된 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> 에 대 한 명령 소스는 <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">첫째는 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 생성 되 고 연결 된는 <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">다음으로 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 만들어집니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">에 연결 된 처리기는 마지막으로 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to attach <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>처리기<ept id="p1">&lt;/c&gt;</ept>를 연결할 요소입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">실행 가능 처리기입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Attaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> to the specified element.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph>를 지정된 요소에 연결합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> and attaches them to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> which is a command source for the <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 에 연결 된 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> 에 대 한 명령 소스는 <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>First, the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is created and associated with the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> command.</source>
          <target state="translated">첫째는 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 생성 되 고 연결 된는 <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Help%2A&gt;</ph> 명령입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Next, the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> are created.</source>
          <target state="translated">다음으로 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 만들어집니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Finally, the handlers are attached to the <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>.</source>
          <target state="translated">에 연결 된 처리기는 마지막으로 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 를 사용 하는 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.CanExecuteEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.CanExecute" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.CanExecute" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.ExecutedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.Executed" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.Executed" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>Forces the <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> to raise the <ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph>가 <ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandManager.RequerySuggested" /&gt;</ph> 이벤트를 발생시키도록 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> only pays attention to certain conditions in determining when the command target has changed, such as change in keyboard focus.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 특정 조건만 변경 될 때 명령 대상, 키보드 포커스 변경에에서 같은 결정 하는 데만 지불 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>In situations where the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> does not sufficiently determine a change in conditions that cause a command to not be able to execute, <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> can be called to force the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
          <target state="translated">경우에 여기서는 <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 변경을 명령이 실행 되지 않을 수를 충분히 확인 하지 않은 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> 강제 하기 위해 호출할 수는 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 를 발생 시키는 <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.InvalidateRequerySuggested">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherTimer&gt;</ph> to periodically call <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> to force the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raise the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Windows.Threading.DispatcherTimer&gt;</ph> 주기적으로 호출 하려면 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> 강제로 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 를 발생 시키는 <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.PreviewCanExecuteEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.CommandManager.PreviewExecutedEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>The class with which to register <bpt id="p1">&lt;c&gt;</bpt>commandBinding<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>commandBinding<ept id="p1">&lt;/c&gt;</ept>을 등록할 클래스입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>The command binding to register.</source>
          <target state="translated">등록할 명령 바인딩입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>Registers a <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph> with the specified type.</source>
          <target state="translated">지정된 형식의 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandBinding" /&gt;</ph>을 등록합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source>This method enables a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> to be associated with a class instead than an instance of a class.</source>
          <target state="translated">이 메서드를 사용 하면 한 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> 클래스의 인스턴스가 아닌 클래스와 연결 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="commandBinding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="commandBinding" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>The type to register <bpt id="p1">&lt;c&gt;</bpt>inputBinding<ept id="p1">&lt;/c&gt;</ept> with.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>inputBinding<ept id="p1">&lt;/c&gt;</ept>을 등록할 형식입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>The input binding to register.</source>
          <target state="translated">등록할 입력 바인딩입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>Registers the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> with the specified type.</source>
          <target state="translated">지정된 형식의 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>을 등록합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source>This method enables an <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> to be associated with a type instead of an instance of a class.</source>
          <target state="translated">이 메서드를 사용 하면 한 <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> 클래스의 인스턴스가 아닌 형식에 연결 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inputBinding" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="inputBinding" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>처리기<ept id="p1">&lt;/c&gt;</ept>를 제거할 요소입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">실행 가능 처리기입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">지정된 요소에서 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph>를 분리합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">다음 예에서는 분리는 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 에 첨부 된 이전에 한 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>처리기<ept id="p1">&lt;/c&gt;</ept>를 제거할 요소입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The executed handler.</source>
          <target state="translated">실행된 처리기입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">지정된 요소에서 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph>를 분리합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">다음 예에서는 분리는 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 에 첨부 된 이전에 한 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>처리기<ept id="p1">&lt;/c&gt;</ept>를 제거할 요소입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The can execute handler.</source>
          <target state="translated">실행 가능 처리기입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">지정된 요소에서 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" /&gt;</ph>를 분리합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">다음 예에서는 분리는 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 에 첨부 된 이전에 한 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The element to remove <bpt id="p1">&lt;c&gt;</bpt>handler<ept id="p1">&lt;/c&gt;</ept> from.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>처리기<ept id="p1">&lt;/c&gt;</ept>를 제거할 요소입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The executed handler.</source>
          <target state="translated">실행된 처리기입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>Detaches the specified <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph> from the specified element.</source>
          <target state="translated">지정된 요소에서 지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ExecutedRoutedEventHandler" /&gt;</ph>를 분리합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source>The following example detaches a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> which had previously been attached to a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">다음 예에서는 분리는 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 에 첨부 된 이전에 한 <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)">
          <source><ph id="ph1">&lt;paramref name="element" /&gt;</ph> or <ph id="ph2">&lt;paramref name="handler" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="element" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="handler" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>Occurs when the <ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph> detects conditions that might change the ability of a command to execute.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.CommandManager" /&gt;</ph>가 명령을 실행하는 기능을 변경할 수 있는 조건을 감지할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>This event holds onto the handler as a weak reference.</source>
          <target state="translated">이 이벤트 처리기에 대 한 약한 참조를 보유합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>Objects that listen for this event should keep a strong reference to their event handler to avoid it being garbage collected.</source>
          <target state="translated">이 이벤트에 대 한 수신 대기 하는 개체는 가비지 수집 되지 않도록 해당 이벤트 처리기에 대 한 강한 참조를 유지 해야 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.CommandManager.RequerySuggested">
          <source>This can be accomplished by having a private field and assigning the handler as the value before or after attaching to this event.</source>
          <target state="translated">전용 필드를 보유 하 고 할당 처리기 값으로 앞 이나이 이벤트에 연결한 후이 수행할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>