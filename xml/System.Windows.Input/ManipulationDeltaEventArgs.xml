<Type Name="ManipulationDeltaEventArgs" FullName="System.Windows.Input.ManipulationDeltaEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="14e330c730054f8a6441ee6306a12db68536d587" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658637" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManipulationDeltaEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationDeltaEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManipulationDeltaEventArgs&#xA;Inherits InputEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationDeltaEventArgs sealed : System::Windows::Input::InputEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="762bb-101">
        <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 이벤트에 대한 데이터를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="762bb-101">Provides data for the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="762bb-102"><xref:System.Windows.Input.ManipulationDeltaEventArgs> 클래스 조작 하는 위치에 변경 내용에 대 한 데이터를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-102">The <xref:System.Windows.Input.ManipulationDeltaEventArgs> class contains data about changes in the position of a manipulation.</span></span> <span data-ttu-id="762bb-103"><xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> 속성 마지막 이후에 발생 한 변경 내용이 들어 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-103">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred.</span></span> <span data-ttu-id="762bb-104"><xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> 속성에 대 한 현재 조작 된 전체 변경 내용을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-104">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation.</span></span> <span data-ttu-id="762bb-105">조작된 된 개체를 변환 하려면 이러한 속성 중 하나를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-105">You use one of those properties to transform the manipulated object.</span></span>  
  
 <span data-ttu-id="762bb-106">조작 하는 호출 하 여 종료할 수 있습니다는 <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> 메서드 또는 호출 하 여 관성을 조작 force는 <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="762bb-106">You can end a manipulation by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method or force the manipulation into inertia by calling the <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="762bb-107">다음 예제에 대 한 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-107">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="762bb-108">이 예제에서는 사용 된 <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> 속성 이동, 크기 조정 및 회전을 <xref:System.Windows.Shapes.Rectangle>합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-108">The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.</span></span> <span data-ttu-id="762bb-109">이 예제는 또한 확인 여부는 <xref:System.Windows.UIElement.ManipulationDelta> 관성 및 사각형 창의 가장자리에 연결 되어 있는지 여부는 동안 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-109">The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.</span></span> <span data-ttu-id="762bb-110">이러한 경우에 해당할 경우 응용 프로그램 중지 사각형 응용 프로그램의 표시 영역을 종료 하지 못하도록 방지 하기 위해 조작 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-110">If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</span></span> <span data-ttu-id="762bb-111">이 예제는에 보다 큰 예제의 일부 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-111">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Function Cancel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="762bb-112">조작을 취소합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-112">Cancels the manipulation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="762bb-113">조작이 성공적으로 취소되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-113">
              <see langword="true" /> if the manipulation was successfully canceled; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="762bb-114">메서드가 성공 하면 기본 <xref:System.Windows.Input.TouchDevice> 이전 보냅니다 터치 이벤트 마우스를 또는 마우스 이동 이벤트 요소에 고 향후 조작 이벤트 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-114">If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur.</span></span> <span data-ttu-id="762bb-115">터치 경우 마우스 이벤트로 승격할 수 없습니다는 <xref:System.Windows.UIElement.ManipulationCompleted> 관성 중에 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-115">Touch cannot be promoted to mouse events if the <xref:System.Windows.UIElement.ManipulationCompleted> event occurs during inertia.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="762bb-116">무활동 상태 없이 조작을 완료합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-116">Completes the manipulation without inertia.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="762bb-117">호출할 수 있습니다는 <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> 조작 발생 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-117">You can call the <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> method to end the manipulation.</span></span> <span data-ttu-id="762bb-118">예를 들어 개체 창의 가장자리에 도달 하면 호출할 수 있습니다 <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> 개체 화면 밖으로 이동 하지 못하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-118">For example, when an object reaches the edge of a window, you can call <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> to prevent the object from going off the screen.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="762bb-119">다음 예제에 대 한 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-119">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="762bb-120">확인 여부는 <xref:System.Windows.UIElement.ManipulationDelta> 관성 및 사각형 창의 가장자리에 연결 되어 있는지 여부는 동안 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-120">The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.</span></span> <span data-ttu-id="762bb-121">이러한 경우에 해당할 경우 응용 프로그램 중지 사각형 응용 프로그램의 표시 영역을 종료 하지 못하도록 방지 하기 위해 조작 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-121">If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</span></span> <span data-ttu-id="762bb-122">이 예제는에 보다 큰 예제의 일부 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-122">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CumulativeManipulation">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationDelta CumulativeManipulation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CumulativeManipulation As ManipulationDelta" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationDelta ^ CumulativeManipulation { System::Windows::Input::ManipulationDelta ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationDelta</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="762bb-123">현재 조작의 누적된 변경 사항을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-123">Gets the cumulated changes of the current manipulation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="762bb-124">현재 조작의 누적된 변경 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-124">The cumulated changes of the current manipulation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="762bb-125"><xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> 속성에 대 한 현재 조작 된 전체 변경 내용을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-125">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> property contains the total changes that occurred for the current manipulation.</span></span> <span data-ttu-id="762bb-126">사용할 수 있습니다 <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> 조작된 하는 개체를 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-126">You can use <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> to transform the manipulated object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeltaManipulation">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationDelta DeltaManipulation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeltaManipulation As ManipulationDelta" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationDelta ^ DeltaManipulation { System::Windows::Input::ManipulationDelta ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationDelta</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="762bb-127">현재 조작의 최신 변경 사항을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-127">Gets the most recent changes of the current manipulation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="762bb-128">현재 조작의 최신 변경 사항입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-128">The most recent changes of the current manipulation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="762bb-129"><xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> 속성 마지막 이후에 발생 한 변경 내용이 들어 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-129">The <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property contains the changes that occurred since the last <xref:System.Windows.UIElement.ManipulationDelta> event occurred.</span></span> <span data-ttu-id="762bb-130">조작된 된 개체를 변환 하려면이 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-130">You can use this property to transform the manipulated object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="762bb-131">다음 예제에 대 한 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-131">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="762bb-132">이 예제에서는 사용 된 <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> 속성 이동, 크기 조정 및 회전을 <xref:System.Windows.Shapes.Rectangle>합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-132">The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.</span></span> <span data-ttu-id="762bb-133">이 예제는에 보다 큰 예제의 일부 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-133">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInertial">
      <MemberSignature Language="C#" Value="public bool IsInertial { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInertial" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInertial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInertial { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="762bb-134">무활동 중 <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 이벤트가 발생하는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-134">Gets a value that indicates whether the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs during inertia.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="762bb-135">활동이 없는 동안 <see cref="E:System.Windows.UIElement.ManipulationDelta" /> 이벤트가 발생하면 <see langword="true" />이고, 사용자가 <see cref="T:System.Windows.UIElement" />에 연결되어 있는 동안 이벤트가 발생하면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-135">
              <see langword="true" /> if the <see cref="E:System.Windows.UIElement.ManipulationDelta" /> event occurs during inertia; <see langword="false" /> if the event occurs while the user has contact with the <see cref="T:System.Windows.UIElement" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="762bb-136">확인 하려면이 메서드를 사용할 수 있는지 여부를 <xref:System.Windows.UIElement.ManipulationDelta> 관성 하는 동안 또는 사용자가을 받는 요소와 연결 하는 동안 이벤트가 발생할는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-136">You can use this method to determine whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurs during inertia or while the user has contact with the element that receives the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="762bb-137">다음 예제에 대 한 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-137">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event.</span></span> <span data-ttu-id="762bb-138">확인 여부는 <xref:System.Windows.UIElement.ManipulationDelta> 관성 및 사각형 창의 가장자리에 연결 되어 있는지 여부는 동안 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-138">The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.</span></span> <span data-ttu-id="762bb-139">이러한 경우에 해당할 경우 응용 프로그램 중지 사각형 응용 프로그램의 표시 영역을 종료 하지 못하도록 방지 하기 위해 조작 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-139">If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</span></span> <span data-ttu-id="762bb-140">이 예제는에 보다 큰 예제의 일부 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-140">This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationContainer">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement ManipulationContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement ManipulationContainer" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManipulationContainer As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ ManipulationContainer { System::Windows::IInputElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="762bb-141">조작의 좌표를 정의하는 컨테이너를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-141">Gets the container that defines the coordinates for the manipulation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="762bb-142">조작의 좌표를 정의하는 컨테이너입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-142">The container that defines the coordinates for the manipulation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point ManipulationOrigin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point ManipulationOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManipulationOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point ManipulationOrigin { System::Windows::Point get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="762bb-143">조작이 발생한 점을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-143">Gets the point from which the manipulation originated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="762bb-144">조작이 발생한 점입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-144">The point from which the manipulation originated.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Manipulators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.IManipulator&gt; Manipulators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.Manipulators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Manipulators As IEnumerable(Of IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ Manipulators { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="762bb-145">조작을 위한 터치 접촉을 나타내는 개체의 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-145">Gets a collection of objects that represents the touch contacts for the manipulation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="762bb-146">조작을 위한 터치 접촉을 나타내는 개체의 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-146">A collection of objects that represents the touch contacts for the manipulation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportBoundaryFeedback">
      <MemberSignature Language="C#" Value="public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportBoundaryFeedback(class System.Windows.Input.ManipulationDelta unusedManipulation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportBoundaryFeedback (unusedManipulation As ManipulationDelta)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportBoundaryFeedback(System::Windows::Input::ManipulationDelta ^ unusedManipulation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unusedManipulation" Type="System.Windows.Input.ManipulationDelta" />
      </Parameters>
      <Docs>
        <param name="unusedManipulation">
          <span data-ttu-id="762bb-147">경계를 넘어 이동하는 것을 나타내는 조작의 부분입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-147">The portion of the manipulation that represents moving beyond the boundary.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="762bb-148">특정 경계를 넘어 조작이 수행되었음을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-148">Specifies that the manipulation has gone beyond certain boundaries.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="762bb-149">사용 하 여는 <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> 메서드는 요소는 특정 경계를 벗어나 옮겨 졌음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-149">Use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> method to indicate that an element has moved beyond a certain boundary.</span></span>  <span data-ttu-id="762bb-150">예를 들어, 사용자의 범위 밖으로 요소를 이동 하는 경우는 <xref:System.Windows.Window>, 하는 창에 보고 하기 위해이 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-150">For example, if a user moves an element outside of the bounds of a <xref:System.Windows.Window>, you can call this method to report that to the window.</span></span>  <span data-ttu-id="762bb-151">호출 하는 경우 <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-151">When you call <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A>, the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event occurs.</span></span>  <span data-ttu-id="762bb-152">기본적으로는 <xref:System.Windows.Window> 구독 하는 <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> 경계에 도달 했습니다 사용자에 게 시각적 피드백을 제공 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-152">By default, the <xref:System.Windows.Window> subscribes to the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event to provide visual feedback to the user that a boundary has been reached.</span></span>  <span data-ttu-id="762bb-153">구독할 수 있습니다 <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> 사용자 지정 동작을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-153">You can subscribe to <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> to implement custom behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="762bb-154">다음 예제에 대 한 이벤트 처리기는 <xref:System.Windows.UIElement.ManipulationDelta> 호출 하는 이벤트는 <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> 메서드는 요소를 컨테이너의 가장자리 위로 이동할 때.</span><span class="sxs-lookup"><span data-stu-id="762bb-154">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event that calls the <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> method when the user moves the element over the edge of its container.</span></span>  <span data-ttu-id="762bb-155">이 예제를 테스트 하려면의 단계에 따라 [연습: 만드는 첫 번째 터치 응용 프로그램](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md) 5 단계에서 코드를이 코드로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="762bb-155">To test this example, follow the steps in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md) and replace the code in step 5 with this code.</span></span>  
  
 [!code-csharp[BasicManipulation#ReportBoundaryFeedback](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/reportboundaryfeedbackexample.xaml.cs#reportboundaryfeedback)]
 [!code-vb[BasicManipulation#ReportBoundaryFeedback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/reportboundaryfeedbackexample.xaml.vb#reportboundaryfeedback)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="762bb-156">
            <paramref name="unusedManipulation" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-156">
              <paramref name="unusedManipulation" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="StartInertia">
      <MemberSignature Language="C#" Value="public void StartInertia ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartInertia() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartInertia ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartInertia();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="762bb-157">이후 접촉 이동을 무시하고 <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> 이벤트를 발생시켜 조작에 대한 무활동 상태를 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-157">Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Velocities">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationVelocities Velocities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationVelocities Velocities" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.Velocities" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Velocities As ManipulationVelocities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationVelocities ^ Velocities { System::Windows::Input::ManipulationVelocities ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationVelocities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="762bb-158">조작에 대한 최신 변경 사항의 비율을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-158">Gets the rates of the most recent changes to the manipulation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="762bb-159">조작에 대한 최신 변경 사항의 비율입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="762bb-159">The rates of the most recent changes to the manipulation.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>