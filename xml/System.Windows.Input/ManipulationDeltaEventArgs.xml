<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ManipulationDeltaEventArgs.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac514e330c730054f8a6441ee6306a12db68536d587.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14e330c730054f8a6441ee6306a12db68536d587</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>Provides data for the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> 이벤트에 대한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;</ph> class contains data about changes in the position of a manipulation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;</ph> 클래스 조작 하는 위치에 변경 내용에 대 한 데이터를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> property contains the changes that occurred since the last <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurred.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> 속성 마지막 이후에 발생 한 변경 내용이 들어 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> property contains the total changes that occurred for the current manipulation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> 속성에 대 한 현재 조작 된 전체 변경 내용을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>You use one of those properties to transform the manipulated object.</source>
          <target state="translated">조작된 된 개체를 변환 하려면 이러한 속성 중 하나를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>You can end a manipulation by calling the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt;</ph> method or force the manipulation into inertia by calling the <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A&gt;</ph> method.</source>
          <target state="translated">조작 하는 호출 하 여 종료할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt;</ph> 메서드 또는 호출 하 여 관성을 조작 force는 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>The following example shows an event handler for the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.</source>
          <target state="translated">다음 예제에 대 한 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> property to move, resize, and rotate a <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> 속성 이동, 크기 조정 및 회전을 <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>The example also checks whether the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurred during inertia and whether the rectangle is touching the edge of a window.</source>
          <target state="translated">이 예제는 또한 확인 여부는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 관성 및 사각형 창의 가장자리에 연결 되어 있는지 여부는 동안 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</source>
          <target state="translated">이러한 경우에 해당할 경우 응용 프로그램 중지 사각형 응용 프로그램의 표시 영역을 종료 하지 못하도록 방지 하기 위해 조작 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ManipulationDeltaEventArgs">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Cancel">
          <source>Cancels the manipulation.</source>
          <target state="translated">조작을 취소합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Cancel">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the manipulation was successfully canceled; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">조작이 성공적으로 취소되었으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Cancel">
          <source>If the method succeeds, the default <ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> sends previous touch events as mouse down or mouse move events to the element and future manipulation events do not occur.</source>
          <target state="translated">메서드가 성공 하면 기본 <ph id="ph1">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> 이전 보냅니다 터치 이벤트 마우스를 또는 마우스 이동 이벤트 요소에 고 향후 조작 이벤트 발생 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Cancel">
          <source>Touch cannot be promoted to mouse events if the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> event occurs during inertia.</source>
          <target state="translated">터치 경우 마우스 이벤트로 승격할 수 없습니다는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> 관성 중에 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete">
          <source>Completes the manipulation without inertia.</source>
          <target state="translated">무활동 상태 없이 조작을 완료합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete">
          <source>You can call the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt;</ph> method to end the manipulation.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt;</ph> 조작 발생 하 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete">
          <source>For example, when an object reaches the edge of a window, you can call <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt;</ph> to prevent the object from going off the screen.</source>
          <target state="translated">예를 들어 개체 창의 가장자리에 도달 하면 호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A&gt;</ph> 개체 화면 밖으로 이동 하지 못하도록 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete">
          <source>The following example shows an event handler for the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.</source>
          <target state="translated">다음 예제에 대 한 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete">
          <source>The example checks whether the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurred during inertia and whether the rectangle is touching the edge of a window.</source>
          <target state="translated">확인 여부는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 관성 및 사각형 창의 가장자리에 연결 되어 있는지 여부는 동안 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete">
          <source>If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</source>
          <target state="translated">이러한 경우에 해당할 경우 응용 프로그램 중지 사각형 응용 프로그램의 표시 영역을 종료 하지 못하도록 방지 하기 위해 조작 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation">
          <source>Gets the cumulated changes of the current manipulation.</source>
          <target state="translated">현재 조작의 누적된 변경 사항을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation">
          <source>The cumulated changes of the current manipulation.</source>
          <target state="translated">현재 조작의 누적된 변경 사항입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> property contains the total changes that occurred for the current manipulation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> 속성에 대 한 현재 조작 된 전체 변경 내용을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> to transform the manipulated object.</source>
          <target state="translated">사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> 조작된 하는 개체를 변환 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation">
          <source>Gets the most recent changes of the current manipulation.</source>
          <target state="translated">현재 조작의 최신 변경 사항을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation">
          <source>The most recent changes of the current manipulation.</source>
          <target state="translated">현재 조작의 최신 변경 사항입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> property contains the changes that occurred since the last <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurred.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> 속성 마지막 이후에 발생 한 변경 내용이 들어 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation">
          <source>You can use this property to transform the manipulated object.</source>
          <target state="translated">조작된 된 개체를 변환 하려면이 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation">
          <source>The following example shows an event handler for the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.</source>
          <target state="translated">다음 예제에 대 한 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> property to move, resize, and rotate a <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> 속성 이동, 크기 조정 및 회전을 <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> event occurs during inertia.</source>
          <target state="translated">무활동 중 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> 이벤트가 발생하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> event occurs during inertia; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the event occurs while the user has contact with the <ph id="ph4">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>.</source>
          <target state="translated">활동이 없는 동안 <ph id="ph2">&lt;see cref="E:System.Windows.UIElement.ManipulationDelta" /&gt;</ph> 이벤트가 발생하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 사용자가 <ph id="ph4">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph>에 연결되어 있는 동안 이벤트가 발생하면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial">
          <source>You can use this method to determine whether the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurs during inertia or while the user has contact with the element that receives the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.</source>
          <target state="translated">확인 하려면이 메서드를 사용할 수 있는지 여부를 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 관성 하는 동안 또는 사용자가을 받는 요소와 연결 하는 동안 이벤트가 발생할는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial">
          <source>The following example shows an event handler for the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.</source>
          <target state="translated">다음 예제에 대 한 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial">
          <source>The example checks whether the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurred during inertia and whether the rectangle is touching the edge of a window.</source>
          <target state="translated">확인 여부는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 관성 및 사각형 창의 가장자리에 연결 되어 있는지 여부는 동안 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial">
          <source>If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application.</source>
          <target state="translated">이러한 경우에 해당할 경우 응용 프로그램 중지 사각형 응용 프로그램의 표시 영역을 종료 하지 못하도록 방지 하기 위해 조작 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial">
          <source>This example is part of a larger example in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer">
          <source>Gets the container that defines the coordinates for the manipulation.</source>
          <target state="translated">조작의 좌표를 정의하는 컨테이너를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer">
          <source>The container that defines the coordinates for the manipulation.</source>
          <target state="translated">조작의 좌표를 정의하는 컨테이너입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin">
          <source>Gets the point from which the manipulation originated.</source>
          <target state="translated">조작이 발생한 점을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin">
          <source>The point from which the manipulation originated.</source>
          <target state="translated">조작이 발생한 점입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.Manipulators">
          <source>Gets a collection of objects that represents the touch contacts for the manipulation.</source>
          <target state="translated">조작을 위한 터치 접촉을 나타내는 개체의 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.Manipulators">
          <source>A collection of objects that represents the touch contacts for the manipulation.</source>
          <target state="translated">조작을 위한 터치 접촉을 나타내는 개체의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source>The portion of the manipulation that represents moving beyond the boundary.</source>
          <target state="translated">경계를 넘어 이동하는 것을 나타내는 조작의 부분입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source>Specifies that the manipulation has gone beyond certain boundaries.</source>
          <target state="translated">특정 경계를 넘어 조작이 수행되었음을 지정합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A&gt;</ph> method to indicate that an element has moved beyond a certain boundary.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A&gt;</ph> 메서드는 요소는 특정 경계를 벗어나 옮겨 졌음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source>For example, if a user moves an element outside of the bounds of a <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, you can call this method to report that to the window.</source>
          <target state="translated">예를 들어, 사용자의 범위 밖으로 요소를 이동 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, 하는 창에 보고 하기 위해이 메서드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source>When you call <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event occurs.</source>
          <target state="translated">호출 하는 경우 <ph id="ph1">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> subscribes to the <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event to provide visual feedback to the user that a boundary has been reached.</source>
          <target state="translated">기본적으로는 <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> 구독 하는 <ph id="ph2">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> 경계에 도달 했습니다 사용자에 게 시각적 피드백을 제공 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source>You can subscribe to <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> to implement custom behavior.</source>
          <target state="translated">구독할 수 있습니다 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> 사용자 지정 동작을 구현 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source>The following example shows an event handler for the <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event that calls the <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A&gt;</ph> method when the user moves the element over the edge of its container.</source>
          <target state="translated">다음 예제에 대 한 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> 호출 하는 이벤트는 <ph id="ph2">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A&gt;</ph> 메서드는 요소를 컨테이너의 가장자리 위로 이동할 때.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source>To test this example, follow the steps in <bpt id="p1">[</bpt>Walkthrough: Creating Your First Touch Application<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept> and replace the code in step 5 with this code.</source>
          <target state="translated">이 예제를 테스트 하려면의 단계에 따라 <bpt id="p1">[</bpt>연습: 만드는 첫 번째 터치 응용 프로그램<ept id="p1">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept> 5 단계에서 코드를이 코드로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)">
          <source><ph id="ph1">&lt;paramref name="unusedManipulation" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="unusedManipulation" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia">
          <source>Starts inertia on the manipulation by ignoring subsequent contact movements and raising the <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> event.</source>
          <target state="translated">이후 접촉 이동을 무시하고 <ph id="ph1">&lt;see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" /&gt;</ph> 이벤트를 발생시켜 조작에 대한 무활동 상태를 시작합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.Velocities">
          <source>Gets the rates of the most recent changes to the manipulation.</source>
          <target state="translated">조작에 대한 최신 변경 사항의 비율을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.ManipulationDeltaEventArgs.Velocities">
          <source>The rates of the most recent changes to the manipulation.</source>
          <target state="translated">조작에 대한 최신 변경 사항의 비율입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>