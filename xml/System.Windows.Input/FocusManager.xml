<Type Name="FocusManager" FullName="System.Windows.Input.FocusManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e1051a2c47fbf0892f35e2ccc3f38ea87cba9a5" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32693856" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class FocusManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit FocusManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.FocusManager" />
  <TypeSignature Language="VB.NET" Value="Public Class FocusManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class FocusManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>포커스 범위를 확인 및 설정하고 범위 내에서 포커스가 있는 요소를 설정하기 위한 정적 메서드, 연결된 속성 및 이벤트의 집합을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows Presentation Foundation (WPF)의 두 가지 개념인 포커스와: 키보드 포커스와 논리 포커스 합니다.  
  
 키보드 포커스는 키보드 입력을 받고 현재 요소에 적용 됩니다.  키보드 포커스가 있는 요소는 하나만 있을 수 있습니다.  키보드 포커스를이 요소에 <xref:System.Windows.IInputElement.IsKeyboardFocused%2A> 로 설정 `true`합니다.  <xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=nameWithType> 키보드 포커스가 있는 요소를 반환합니다.  
  
 에 관련 된 논리적 포커스는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=nameWithType> 특정 포커스 범위 내에서.  
  
 포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=nameWithType> 해당 범위 내에서.  기본적으로는 <xref:System.Windows.Window> 클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar> 클래스입니다.  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 로 설정 `true`합니다.  
  
 논리 포커스를 가진 요소가 여러 개 있을 수 있지만 단일 포커스 범위 내에서 논리적 포커스를 가진 요소가 하나만 존재할 합니다.  요소가 논리 포커스와 키보드 포커스를가지고 있지 않습니다 되지만 키보드 포커스를 가진 요소가 논리 포커스를 갖게 됩니다.  포커스 범위 내에서 포커스가 범위를 정의 하는 것이 불가능 합니다.  이 경우 부모 포커스 범위와 자식 포커스 범위를 모두 가질 수 있습니다는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=nameWithType>합니다.  
  
 다음과 같은 경우 논리적 포커스와 키보드 포커스가 있는 WPF 응용 프로그램에서 변경 하는 방법을 보여 줍니다.는 <xref:System.Windows.Window> 와 <xref:System.Windows.Controls.TextBox> 및 <xref:System.Windows.Controls.Menu> 가 <xref:System.Windows.Controls.MenuItem>합니다.  키보드 포커스가 변경 될 때는 <xref:System.Windows.Controls.TextBox> 에 <xref:System.Windows.Controls.MenuItem>, <xref:System.Windows.Controls.TextBox> 키보드 포커스를 잃지에 대 한 논리 포커스를 유지 하지만 <xref:System.Windows.Window> 포커스 범위입니다.  <xref:System.Windows.Controls.MenuItem> 키보드 활성화 되 고에 대 한 논리적 포커스를 가져옵니다는 <xref:System.Windows.Controls.Menu> 포커스 범위입니다.  키보드 포커스 루트를 반환 하는 경우 <xref:System.Windows.Window>에 있는 요소의 <xref:System.Windows.Window> 논리 포커스를 사용 하 여 포커스 범위는이 경우에 키보드 포커스를 가져옵니다는 <xref:System.Windows.Controls.TextBox>합니다.  <xref:System.Windows.Controls.TextBox> 논리 포커스와 키보드 포커스가 되었습니다.  <xref:System.Windows.Controls.MenuItem> 키보드 포커스를 잃을 대 한 논리적 포커스를 유지 하지만 <xref:System.Windows.Controls.Menu> 포커스 범위입니다.  
  
 기본값 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 에 <xref:System.Windows.Window>, <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ToolBar>, 및 <xref:System.Windows.Controls.ContextMenu> 은 `true`합니다.  
  
 포커스에 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md) 및 [포커스 개요](~/docs/framework/wpf/advanced/focus-overview.md)합니다.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddGotFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddGotFocusHandler(class System.Windows.DependencyObject element, class System.Windows.RoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddGotFocusHandler (element As DependencyObject, handler As RoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddGotFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::RoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.RoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</param>
        <param name="handler">추가할 이벤트 처리기입니다.</param>
        <summary>
          <see cref="E:System.Windows.Input.FocusManager.GotFocus" /> 연결된 이벤트에 대한 처리기를 추가합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLostFocusHandler">
      <MemberSignature Language="C#" Value="public static void AddLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddLostFocusHandler(class System.Windows.DependencyObject element, class System.Windows.RoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddLostFocusHandler (element As DependencyObject, handler As RoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddLostFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::RoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.RoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</param>
        <param name="handler">추가할 이벤트 처리기입니다.</param>
        <summary>
          <see cref="E:System.Windows.Input.FocusManager.LostFocus" /> 연결된 이벤트에 대한 처리기를 추가합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusedElement">
      <MemberSignature Language="C#" Value="see GetFocusedElement, and SetFocusedElement" />
      <MemberSignature Language="ILAsm" Value="see GetFocusedElement, and SetFocusedElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.FocusManager.FocusedElement" />
      <MemberSignature Language="VB.NET" Value="see GetFocusedElement, and SetFocusedElement" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusedElementProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusedElementProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusedElementProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.FocusManager.FocusedElementProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusedElementProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusedElementProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Input.FocusManager.FocusedElement" /> 연결된 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFocusedElement">
      <MemberSignature Language="C#" Value="public static System.Windows.IInputElement GetFocusedElement (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.IInputElement GetFocusedElement(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFocusedElement (element As DependencyObject) As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::IInputElement ^ GetFocusedElement(System::Windows::DependencyObject ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">지정된 포커스 범위 내에서 논리적 포커스가 있는 요소입니다.</param>
        <summary>지정된 포커스 범위 내에서 논리적 포커스가 있는 요소를 가져옵니다.</summary>
        <returns>지정된 포커스 범위 내에서 논리적 포커스가 있는 요소입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.FocusManager.FocusedElement%2A> 특정 포커스 범위에 대 한 논리 포커스가 있는 요소입니다.  이 개체가 되거나 키보드 포커스를 사용할 수 없습니다.  키보드 포커스 키보드 입력을 받는 요소를 가리킵니다.  논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
 경우 `element` 않습니다 포커스 범위가이 메서드는 반환 `null`합니다.  
  
 사용 하 여 <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>, 지정 된 포커스 범위 내에서 논리적 포커스를 가진 요소를 지정할 수 있습니다.  
  
   
  
## Examples  
 사용 하 여 논리 포커스가 있는 요소를 설정 하는 다음 예제는 <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A> 를 사용 하 여 논리 포커스가 있는 요소를 가져옵니다는 <xref:System.Windows.Input.FocusManager.GetFocusedElement%2A>합니다.  
  
 [!code-csharp[focussnippets#FocusGetSetFocusedElement](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSnippets/CSharp/Window1.xaml.cs#focusgetsetfocusedelement)]
 [!code-vb[focussnippets#FocusGetSetFocusedElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSnippets/visualbasic/window1.xaml.vb#focusgetsetfocusedelement)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFocusScope">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetFocusScope (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetFocusScope(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFocusScope (element As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetFocusScope(System::Windows::DependencyObject ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">가장 가까운 포커스 범위를 가져올 요소입니다.</param>
        <summary>
          <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" />가 <see langword="true" />로 설정된 지정된 요소의 가장 가까운 상위 요소를 확인합니다.</summary>
        <returns>지정된 요소에 대한 포커스 범위입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본값 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 에 <xref:System.Windows.Window>, <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ToolBar>, <xref:System.Windows.Controls.ContextMenu> 은 `true`합니다.  
  
 포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=nameWithType> 해당 범위 내에서.  기본적으로는 <xref:System.Windows.Window> 클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar> 클래스입니다.  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 로 설정 `true`합니다.  
  
 논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetIsFocusScope">
      <MemberSignature Language="C#" Value="public static bool GetIsFocusScope (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsFocusScope(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIsFocusScope (element As DependencyObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsFocusScope(System::Windows::DependencyObject ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">연결된 속성을 읽을 요소입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.DependencyObject" />가 포커스 범위인지 여부를 확인합니다.</summary>
        <returns>
          지정된 요소에서 <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" />가 <see langword="true" />로 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=nameWithType> 해당 범위 내에서.  기본적으로는 <xref:System.Windows.Window> 클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar> 클래스입니다.  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 로 설정 `true`합니다.  
  
 논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="see AddGotFocusHandler, and RemoveGotFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddGotFocusHandler, and RemoveGotFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.FocusManager.GotFocus" />
      <MemberSignature Language="VB.NET" Value="see AddGotFocusHandler, and RemoveGotFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.FocusManager.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.Input.FocusManager.GotFocus" /> 연결된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocusScope">
      <MemberSignature Language="C#" Value="see GetIsFocusScope, and SetIsFocusScope" />
      <MemberSignature Language="ILAsm" Value="see GetIsFocusScope, and SetIsFocusScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.FocusManager.IsFocusScope" />
      <MemberSignature Language="VB.NET" Value="see GetIsFocusScope, and SetIsFocusScope" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocusScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.FocusManager.IsFocusScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusScopeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Input.FocusManager.IsFocusScope" /> 연결된 속성을 식별합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본값 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 에 <xref:System.Windows.Window>, <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ToolBar>, <xref:System.Windows.Controls.ContextMenu> 은 `true`합니다.  
  
 포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=nameWithType> 해당 범위 내에서.  기본적으로는 <xref:System.Windows.Window> 클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar> 클래스입니다.  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 로 설정 `true`합니다.  
  
 논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="see AddLostFocusHandler, and RemoveLostFocusHandler" />
      <MemberSignature Language="ILAsm" Value="see AddLostFocusHandler, and RemoveLostFocusHandler" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.FocusManager.LostFocus" />
      <MemberSignature Language="VB.NET" Value="see AddLostFocusHandler, and RemoveLostFocusHandler" />
      <MemberType>AttachedEvent</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.FocusManager.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.Windows.Input.FocusManager.LostFocus" /> 연결된 이벤트를 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveGotFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveGotFocusHandler(class System.Windows.DependencyObject element, class System.Windows.RoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveGotFocusHandler (element As DependencyObject, handler As RoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveGotFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::RoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.RoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</param>
        <param name="handler">제거할 이벤트 처리기입니다.</param>
        <summary>
          <see cref="E:System.Windows.Input.FocusManager.GotFocus" /> 연결된 이벤트에 대한 처리기를 제거합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLostFocusHandler">
      <MemberSignature Language="C#" Value="public static void RemoveLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveLostFocusHandler(class System.Windows.DependencyObject element, class System.Windows.RoutedEventHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveLostFocusHandler (element As DependencyObject, handler As RoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveLostFocusHandler(System::Windows::DependencyObject ^ element, System::Windows::RoutedEventHandler ^ handler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="handler" Type="System.Windows.RoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="element">이 이벤트를 수신 대기하는 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />입니다.</param>
        <param name="handler">제거할 이벤트 처리기입니다.</param>
        <summary>
          <see cref="E:System.Windows.Input.FocusManager.LostFocus" /> 연결된 이벤트에 대한 처리기를 제거합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFocusedElement">
      <MemberSignature Language="C#" Value="public static void SetFocusedElement (System.Windows.DependencyObject element, System.Windows.IInputElement value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFocusedElement(class System.Windows.DependencyObject element, class System.Windows.IInputElement value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFocusedElement (element As DependencyObject, value As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFocusedElement(System::Windows::DependencyObject ^ element, System::Windows::IInputElement ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="element">지정된 요소를 <see cref="P:System.Windows.Input.FocusManager.FocusedElement" />로 만들 포커스 범위입니다.</param>
        <param name="value">논리적 포커스를 제공할 요소입니다.</param>
        <summary>지정된 요소에 논리적 포커스를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.FocusManager.FocusedElement%2A> 특정 포커스 범위에 대 한 논리 포커스가 있는 요소입니다.  이 개체가 되거나 키보드 포커스를 사용할 수 없습니다.  키보드 포커스 키보드 입력을 받는 요소를 가리킵니다.  논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
 요소가 포커스 범위의 상위 포커스 범위를 지정 하는 것이 불가능 합니다.  예를 들어 경우는 <xref:System.Windows.Controls.StackPanel> 포커스 범위와 해당 부모는 <xref:System.Windows.Window> 포커스 범위는 <xref:System.Windows.Controls.TextBox> 의 자식은 <xref:System.Windows.Controls.StackPanel> 지정할 수는 <xref:System.Windows.Window> 를 호출할 때 포커스 범위로 <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>합니다.  <xref:System.Windows.Controls.TextBox> 그러면 <xref:System.Windows.Input.FocusManager.FocusedElement%2A> 모두에 대 한는 <xref:System.Windows.Window> 포커스 범위 및 <xref:System.Windows.Controls.StackPanel> 포커스 범위입니다.  
  
 <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A> 지정된 된 포커스 범위에 지정 된 요소가 논리 포커스를 표시 하 고 요소가 키보드 포커스를 시도 합니다.  
  
   
  
## Examples  
 사용 하 여 논리 포커스가 있는 요소를 설정 하는 다음 예제는 <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A> 를 사용 하 여 논리 포커스가 있는 요소를 가져옵니다는 <xref:System.Windows.Input.FocusManager.GetFocusedElement%2A>합니다.  
  
 [!code-csharp[focussnippets#FocusGetSetFocusedElement](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSnippets/CSharp/Window1.xaml.cs#focusgetsetfocusedelement)]
 [!code-vb[focussnippets#FocusGetSetFocusedElement](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSnippets/visualbasic/window1.xaml.vb#focusgetsetfocusedelement)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsFocusScope">
      <MemberSignature Language="C#" Value="public static void SetIsFocusScope (System.Windows.DependencyObject element, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsFocusScope(class System.Windows.DependencyObject element, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIsFocusScope (element As DependencyObject, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsFocusScope(System::Windows::DependencyObject ^ element, bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">포커스 범위를 만들 요소입니다.</param>
        <param name="value">
          해당 <c>요소</c>가 포커스 범위이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.DependencyObject" />를 포커스 범위로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 포커스 범위는 컨테이너 요소를 추적 하는 <xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=nameWithType> 해당 범위 내에서.  기본적으로는 <xref:System.Windows.Window> 클래스는 마찬가지로 포커스 범위는 <xref:System.Windows.Controls.Menu>, <xref:System.Windows.Controls.ContextMenu>, 및 <xref:System.Windows.Controls.ToolBar> 클래스입니다.  포커스 범위를 요소에 <xref:System.Windows.Input.FocusManager.IsFocusScope%2A> 로 설정 `true`합니다.  
  
 논리 포커스 포커스와 키보드 포커스, 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.  
  
   
  
## Examples  
 다음 예에서는 요소 포커스 범위를 사용 하 여 <xref:System.Windows.Input.FocusManager.SetIsFocusScope%2A>합니다.  
  
 [!code-csharp[focussnippets#FocusSetIsFocusScope](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSnippets/CSharp/Window1.xaml.cs#focussetisfocusscope)]
 [!code-vb[focussnippets#FocusSetIsFocusScope](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSnippets/visualbasic/window1.xaml.vb#focussetisfocusscope)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>