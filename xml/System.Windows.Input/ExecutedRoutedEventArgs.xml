<Type Name="ExecutedRoutedEventArgs" FullName="System.Windows.Input.ExecutedRoutedEventArgs">
  <TypeSignature Language="C#" Value="public sealed class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExecutedRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutedRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutedRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="31328-101"><see cref="E:System.Windows.Input.CommandManager.Executed" /> 및 <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> 라우트된 이벤트에 대한 데이터를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="31328-101">Provides data for the <see cref="E:System.Windows.Input.CommandManager.Executed" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> routed events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31328-102"><xref:System.Windows.Input.ExecutedRoutedEventHandler> 명령 논리를 구현 하는 메서드를 나타냅니다는 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="31328-102"><xref:System.Windows.Input.ExecutedRoutedEventHandler> represents the method that implements the command logic of a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="31328-103">명령에서 구현 논리를 분리 하는 명령을 여러 소스와 형식에서 호출할 수를 통해 명령 논리를 중앙 집중식.</span><span class="sxs-lookup"><span data-stu-id="31328-103">Separating the implementation logic from the command allows the command to be invoked from different sources and types and enables the centralization of command logic.</span></span>  
  
 <span data-ttu-id="31328-104">에 대 한이 이벤트 데이터 클래스는 또한 <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> 및 <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="31328-104">This event data class is also used for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>.</span></span> <span data-ttu-id="31328-105">대부분의 실제 처리기를 처리할 수는 <xref:System.Windows.Input.CommandBinding.Executed> 에서 특정 이벤트 <xref:System.Windows.Input.CommandBinding>않고에서 작동 하지는 <xref:System.Windows.Input.CommandManager> 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="31328-105">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="31328-106">명령에 대한 자세한 내용은 [명령 개요](~/docs/framework/wpf/advanced/commanding-overview.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="31328-106">For more information on commanding, see [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31328-107">다음 예제에서는 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 열립니다는 <xref:System.Windows.MessageBox> 명령이 실행 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="31328-107">The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that opens a <xref:System.Windows.MessageBox> when the command is executed.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31328-108">호출된 명령을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="31328-108">Gets the command that was invoked.</span></span></summary>
        <value><span data-ttu-id="31328-109">이 이벤트와 연결된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="31328-109">The command associated with this event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31328-110">이벤트와 연결 된 명령의 특정 구현으로 캐스팅 될 수 <xref:System.Windows.Input.ICommand>와 같은 한 <xref:System.Windows.Input.RoutedCommand>형식이 알려져 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="31328-110">The command associated with the event can be cast to the specific implementation of <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>, if the type is known.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31328-111">다음 예제에서는 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 여러 명령을 처리 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="31328-111">The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that handles multiple commands.</span></span> <span data-ttu-id="31328-112">처리기 검사는 <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> 속성에는 <xref:System.Windows.Input.ExecutedRoutedEventArgs> 호출할 메서드를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="31328-112">The handler checks the <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> property on the <xref:System.Windows.Input.ExecutedRoutedEventArgs> to determine which method to call.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecmdhander)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCmdHander](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecmdhander)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="31328-113">명령의 데이터 매개 변수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="31328-113">Gets data parameter of the command.</span></span></summary>
        <value><span data-ttu-id="31328-114">명령별 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="31328-114">The command-specific data.</span></span> <span data-ttu-id="31328-115">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="31328-115">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31328-116">이 속성은 특정 명령에 의해 정의 된 일반 데이터 매개 변수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="31328-116">This property represents a generic data parameter that is defined by the particular command.</span></span>  
  
 <span data-ttu-id="31328-117">이 매개 변수가 필요 하지 않은 경우 `null` 전달 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="31328-117">If this parameter is not needed, `null` can be passed.</span></span>  
  
 <span data-ttu-id="31328-118">일반적으로 <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> 실행 될 때 명령에 특정 정보를 전달 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="31328-118">Normally, the <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="31328-119">데이터 형식은 명령에 의해 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="31328-119">The type of the data is defined by the command.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31328-120">다음 예제에서는 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 사용자 지정에 대 한 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="31328-120">The following example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> for a custom <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="31328-121">처리기 업데이트는 <xref:System.Windows.Controls.TextBox> 현재 시간 및 <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> 속성은 <xref:System.Windows.Controls.Slider> 를 통해 처리기에 전달 되는 컨트롤의 <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="31328-121">The handler updates a <xref:System.Windows.Controls.TextBox> with the current time and the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control that is passed to the handler through the <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampleexecuted)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampleexecuted)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
  </Members>
</Type>