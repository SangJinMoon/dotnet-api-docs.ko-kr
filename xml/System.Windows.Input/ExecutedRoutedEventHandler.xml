<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ExecutedRoutedEventHandler.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55e7060feb6bd9cc789b91cd51b75c1f71d708b5f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e7060feb6bd9cc789b91cd51b75c1f71d708b5f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>The object where the event handler is attached.</source>
          <target state="translated">이벤트 처리기가 연결된 개체입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>The event data.</source>
          <target state="translated">이벤트 데이터입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>Represents the method that will handle the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandBinding.Executed" /&gt;</ph> and <ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /&gt;</ph> routed events, as well as related attached events.</source>
          <target state="translated">관련 연결된 이벤트뿐만 아니라 <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandBinding.Executed" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /&gt;</ph> 라우트된 이벤트를 처리할 메서드를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>This delegate contains the implementation logic for a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">이 대리자에 대 한 구현 논리를 포함 한 <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>Separating the implementation logic from the command allows the command to be invoked from different sources and types, and enables the centralization of command logic.</source>
          <target state="translated">명령에서 구현 논리를 분리 하는 명령을 다른 소스와 형식에서 호출할 수를 통해 명령 논리를 중앙 집중식.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>This delegate is also used for <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType&gt;</ph>, which are attached events on the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> class that implements much of the commanding infrastructure.</source>
          <target state="translated">이 대리자에도 사용 됩니다 <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType&gt;</ph>에 연결 된 이벤트는는 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 많은 명령 인프라를 구현 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>But most practical handlers will handle the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> events from a particular <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>, rather than work at the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> level.</source>
          <target state="translated">대부분의 실제 처리기를 처리할 수는 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> 에서 특정 이벤트 <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>않고에서 작동 하지는 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 수준입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>Within <ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph>, the following properties are generally of interest when you write an event handler for a routed event that results from an executed command:</source>
          <target state="translated">내에서 <ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph>, 다음 속성은 일반적으로 원하는 실행 된 명령 결과인 라우트된 이벤트에 대 한 이벤트 처리기를 작성 하는 경우:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> reports the target where the command was executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 명령이 실행 된 대상을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>Once the command is executed, you can also think of the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> more generally in routed event terms, as the object that raised a routed event.</source>
          <target state="translated">명령이 실행 되 면 생각할 수 있으며 또한는 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> 더 일반적으로 라우트됩니다 이벤트 관점 라우트된 이벤트를 발생 시킨 개체입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A&gt;</ph> reports the command that executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A&gt;</ph> 명령 실행을 보고 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>This property is useful if you use command bindings and if you write handlers that potentially handle multiple commands.</source>
          <target state="translated">이 속성은 명령 바인딩을 사용 하 여 및 잠재적으로 여러 명령을 처리 하는 처리기를 작성 하는 경우에 유용 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A&gt;</ph> reports any command-specific parameters that were passed by the executing command.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A&gt;</ph> 실행 중인 명령에 의해 전달 된 명령 별 매개 변수를 보고 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>Not all commands use or expect command-specific parameters.</source>
          <target state="translated">일부 명령을 사용 하거나 명령 별 매개 변수가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> reports whether the routed event that resulted from the executed command was already handled by a different element along the route.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> 경로 따라 다른 요소에 의해 실행된 된 명령으로 생성 된 라우트된 이벤트가 이미 처리 되었는지 여부를 보고 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>For routed event handlers, it is a recommended practice to have handlers that do meaningful work when handling the event to set <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">라우트된 이벤트 처리기에 대 한 처리기를 설정 하는 이벤트를 처리할 때 필요한 작업을 수행 해야 하는 것 이기 <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> 를 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>This prevents typical handlers for the event from handling the event again further along the route.</source>
          <target state="translated">이렇게 하면 일반 처리기를 이벤트에 대 한 처리 이벤트 다시 이벤트가 경로 따라 않습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>For more information on handling routed events, see <bpt id="p1">[</bpt>Marking Routed Events as Handled, and Class Handling<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>.</source>
          <target state="translated">라우트된 이벤트를 처리에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>표시 라우트된 이벤트로 클래스를 처리 하 고,<ept id="p1">](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>This delegate also represents handlers for <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType&gt;</ph>, which are attached events on the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> class that implements much of the commanding infrastructure.</source>
          <target state="translated">이 대리자에 대 한 처리기를 나타내는 <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType&gt;</ph>에 연결 된 이벤트는는 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 많은 명령 인프라를 구현 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>But most practical handlers will handle the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> events from a particular <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>, rather than work at the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> level.</source>
          <target state="translated">대부분의 실제 처리기를 처리할 수는 <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> 에서 특정 이벤트 <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>않고에서 작동 하지는 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 수준입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>For more information on commanding, see <bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>.</source>
          <target state="translated">명령에 대한 자세한 내용은 <bpt id="p1">[</bpt>명령 개요<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>This example creates an <ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> that sets a visual property on the target when the command is executed.</source>
          <target state="translated">이 예제에서는 만듭니다는 <ph id="ph1">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> 명령이 실행 될 때 대상의 시각적 속성을 설정 하는 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ExecutedRoutedEventHandler">
          <source>The example also includes the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> for the same command.</source>
          <target state="translated">또한이 예제에 포함 되어는 <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> 동일한 명령에 대 한 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>