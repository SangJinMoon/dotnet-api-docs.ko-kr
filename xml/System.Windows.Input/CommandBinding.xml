<Type Name="CommandBinding" FullName="System.Windows.Input.CommandBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b0eeb5ad8aae9d63afb29792fc798c1b4d3e69b" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55406353" /></Metadata><TypeSignature Language="C#" Value="public class CommandBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandBinding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class CommandBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class CommandBinding" />
  <TypeSignature Language="F#" Value="type CommandBinding = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="86463-101"><see cref="T:System.Windows.Input.RoutedCommand" />를 명령을 구현하는 이벤트 처리기에 바인딩합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-101">Binds a <see cref="T:System.Windows.Input.RoutedCommand" /> to the event handlers that implement the command.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86463-102">A <xref:System.Windows.Input.CommandBinding> 와 명령을 연결 합니다 <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed> 및 <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute> 이벤트 구현 하 고 명령의 상태를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-102">A <xref:System.Windows.Input.CommandBinding> associates a command with the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> and <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events which implement and determine the status of the command.</span></span>  
  
 <span data-ttu-id="86463-103">때를 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 또는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드의 <xref:System.Windows.Input.RoutedCommand> 호출 되는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed> 또는 <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute> 명령 대상에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-103">When the <xref:System.Windows.Input.RoutedCommand.Execute%2A> or <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed> or the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute> events are raised on the command target.</span></span>  <span data-ttu-id="86463-104">명령 대상에는 <xref:System.Windows.Input.CommandBinding> 명령에 대 한 적절 한 처리기가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="86463-104">If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the appropriate handlers are called.</span></span>  <span data-ttu-id="86463-105">명령 대상에 없는 경우는 <xref:System.Windows.Input.CommandBinding> 명령에 대 한 이벤트를 통해 라우팅됩니다 요소 트리를 가진 요소가 될 때까지 <xref:System.Windows.Input.CommandBinding> 를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="86463-105">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the events are routed through the element tree until an element that has a <xref:System.Windows.Input.CommandBinding> is found.</span></span>  
  
 <span data-ttu-id="86463-106">A <xref:System.Windows.Input.CommandBinding> 제한적으로 사용 하 여 사용 하 여는 <xref:System.Windows.Input.ICommand> 하지 않은 <xref:System.Windows.Input.RoutedCommand>입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-106">A <xref:System.Windows.Input.CommandBinding> has limited use with an <xref:System.Windows.Input.ICommand> that is not a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="86463-107">때문에 이것이 <xref:System.Windows.Input.CommandBinding> 명령에 바인딩합니다를 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 및 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 수신 대기 하는 <xref:System.Windows.Input.CommandManager.Executed> 및 <xref:System.Windows.Input.CommandManager.CanExecute> 라우트된 이벤트는 때 발생 합니다 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 및 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드의 합니다 <xref:System.Windows.Input.RoutedCommand>이라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-107">This is because a <xref:System.Windows.Input.CommandBinding> binds the command to the <xref:System.Windows.Input.ExecutedRoutedEventHandler> and the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which listen to the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> routed events which are raised when the <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method of the <xref:System.Windows.Input.RoutedCommand> are called.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="86463-108"><see cref="T:System.Windows.Input.CommandBinding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-108">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86463-109"><see cref="T:System.Windows.Input.CommandBinding" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-109">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding command" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="86463-110">새 <see cref="T:System.Windows.Input.RoutedCommand" />의 기반이 되는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-110">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</span></span></param>
        <summary><span data-ttu-id="86463-111">지정된 <see cref="T:System.Windows.Input.CommandBinding" />을 사용하여 <see cref="T:System.Windows.Input.ICommand" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-111">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="86463-112">새 <see cref="T:System.Windows.Input.RoutedCommand" />의 기반이 되는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-112">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</span></span></param>
        <param name="executed"><span data-ttu-id="86463-113">새 <see cref="E:System.Windows.Input.CommandBinding.Executed" />의 <see cref="T:System.Windows.Input.RoutedCommand" /> 이벤트에 대한 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-113">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></param>
        <summary><span data-ttu-id="86463-114">지정된 <see cref="T:System.Windows.Input.CommandBinding" /> 및 <see cref="T:System.Windows.Input.ICommand" /> 이벤트 처리기를 사용하여 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-114">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event handler.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed, class System.Windows.Input.CanExecuteRoutedEventHandler canExecute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, executed As ExecutedRoutedEventHandler, canExecute As CanExecuteRoutedEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CommandBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::ExecutedRoutedEventHandler ^ executed, System::Windows::Input::CanExecuteRoutedEventHandler ^ canExecute);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.CommandBinding : System.Windows.Input.ICommand * System.Windows.Input.ExecutedRoutedEventHandler * System.Windows.Input.CanExecuteRoutedEventHandler -&gt; System.Windows.Input.CommandBinding" Usage="new System.Windows.Input.CommandBinding (command, executed, canExecute)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
        <Parameter Name="canExecute" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="86463-115">새 <see cref="T:System.Windows.Input.RoutedCommand" />의 기반이 되는 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-115">The command to base the new <see cref="T:System.Windows.Input.RoutedCommand" /> on.</span></span></param>
        <param name="executed"><span data-ttu-id="86463-116">새 <see cref="E:System.Windows.Input.CommandBinding.Executed" />의 <see cref="T:System.Windows.Input.RoutedCommand" /> 이벤트에 대한 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-116">The handler for the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></param>
        <param name="canExecute"><span data-ttu-id="86463-117">새 <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />의 <see cref="T:System.Windows.Input.RoutedCommand" /> 이벤트에 대한 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-117">The handler for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event on the new <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></param>
        <summary><span data-ttu-id="86463-118">지정된 <see cref="T:System.Windows.Input.CommandBinding" />와 지정된 <see cref="T:System.Windows.Input.ICommand" /> 및 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 이벤트 처리기를 사용하여 <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-118">Initializes a new instance of the <see cref="T:System.Windows.Input.CommandBinding" /> class by using the specified <see cref="T:System.Windows.Input.ICommand" /> and the specified <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event handlers.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler CanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event CanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ CanExecute;" />
      <MemberSignature Language="F#" Value="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.CanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86463-119">명령 대상에서 이 <see cref="T:System.Windows.Input.CommandBinding" />에 연결된 명령을 실행할 수 있는지 여부를 결정하는 검사를 시작하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-119">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86463-120">경우는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드를를 <xref:System.Windows.Input.RoutedCommand> 호출 되는 <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> 명령 대상에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-120">When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target.</span></span>  <span data-ttu-id="86463-121">이벤트 처리 되지 않은 경우는 <xref:System.Windows.Input.CommandBinding.CanExecute> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-121">If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.</span></span>  <span data-ttu-id="86463-122">명령 대상에는 <xref:System.Windows.Input.CommandBinding> 명령에 대 한는 <xref:System.Windows.Input.CommandBinding.CanExecute> 처리기에 대 한 <xref:System.Windows.Input.CommandBinding> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-122">If the command target has a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="86463-123">명령 대상에 없는 경우는 <xref:System.Windows.Input.CommandBinding> 명령에 대를 <xref:System.Windows.Input.CommandBinding.CanExecute> 있는 요소를 검색 하는 요소 트리를 이벤트 버블링을 <xref:System.Windows.Input.CommandBinding> 명령과 사용 하 여 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-123">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="86463-124">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="86463-124">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="86463-125">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="86463-125">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|<span data-ttu-id="86463-126">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="86463-126">Routing strategy</span></span>|<span data-ttu-id="86463-127">버블링</span><span class="sxs-lookup"><span data-stu-id="86463-127">Bubbling</span></span>|  
|<span data-ttu-id="86463-128">대리자</span><span class="sxs-lookup"><span data-stu-id="86463-128">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   <span data-ttu-id="86463-129">해당 터널링 이벤트가 <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-129">The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86463-130">다음 예제에서는 <xref:System.Windows.Input.CommandBinding> 매핑되는 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 및 <xref:System.Windows.Input.CanExecuteRoutedEventArgs> 처리기를 <xref:System.Windows.Input.ApplicationCommands.Open%2A> 명령 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-130">The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span>  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 <span data-ttu-id="86463-131">다음은 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 집합 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 에 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-131">The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CommandBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.CommandBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86463-132">이 <see cref="T:System.Windows.Input.ICommand" />에 연결된 <see cref="T:System.Windows.Input.CommandBinding" />를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-132">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this <see cref="T:System.Windows.Input.CommandBinding" />.</span></span></summary>
        <value><span data-ttu-id="86463-133">이 바인딩과 연결된 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-133">The command associated with this binding.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="86463-134">다음 예제에서는 <xref:System.Windows.Input.CommandBinding> 매핑되는 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 및 <xref:System.Windows.Input.CanExecuteRoutedEventArgs> 처리기를 <xref:System.Windows.Input.ApplicationCommands.Open%2A> 명령 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-134">The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span>  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 <span data-ttu-id="86463-135">다음은 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 집합 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 에 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-135">The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 <span data-ttu-id="86463-136">에서는 다음 합니다 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 만듭니다는 <xref:System.Windows.MessageBox> 명령이 실행 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="86463-136">The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.</span></span>  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler Executed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler Executed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.Executed" />
      <MemberSignature Language="VB.NET" Value="Public Event Executed As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ Executed;" />
      <MemberSignature Language="F#" Value="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.Executed : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86463-137">이 <see cref="T:System.Windows.Input.CommandBinding" />에 연결된 명령이 실행되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-137">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86463-138">경우는 <xref:System.Windows.Input.RoutedCommand> 실행 발생는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted> 명령 대상에서 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-138">When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.</span></span>  <span data-ttu-id="86463-139">경우는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted> 이벤트가 처리 되지 않은 <xref:System.Windows.Input.CommandBinding.Executed> 명령 대상에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-139">If the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on the command target.</span></span>  <span data-ttu-id="86463-140">명령 대상에는 <xref:System.Windows.Input.CommandBinding> 특정 명령에 대 한는 <xref:System.Windows.Input.CommandBinding.Executed> 에 대 한 처리기 <xref:System.Windows.Input.CommandBinding> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-140">If the command target has a <xref:System.Windows.Input.CommandBinding> for the specific command, the <xref:System.Windows.Input.CommandBinding.Executed> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="86463-141">명령 대상에 없는 경우는 <xref:System.Windows.Input.CommandBinding> 해당 특정 명령에 대 한는 <xref:System.Windows.Input.CommandBinding.Executed> 있는 요소를 검색 하는 요소 트리를 이벤트 버블링을 <xref:System.Windows.Input.CommandBinding> 명령과 사용 하 여 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-141">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for that specific command the <xref:System.Windows.Input.CommandBinding.Executed> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  <span data-ttu-id="86463-142">경우는 <xref:System.Windows.Input.CommandBinding> 발견 되지 않으면이 명령은 처리 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="86463-142">If a <xref:System.Windows.Input.CommandBinding> is not found, the command is not handled.</span></span>  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="86463-143">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="86463-143">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="86463-144">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="86463-144">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|<span data-ttu-id="86463-145">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="86463-145">Routing strategy</span></span>|<span data-ttu-id="86463-146">버블링</span><span class="sxs-lookup"><span data-stu-id="86463-146">Bubbling</span></span>|  
|<span data-ttu-id="86463-147">대리자</span><span class="sxs-lookup"><span data-stu-id="86463-147">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   <span data-ttu-id="86463-148">해당 터널링 이벤트가 <xref:System.Windows.Input.CommandBinding.PreviewExecuted>합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-148">The corresponding tunneling event is <xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86463-149">다음 예제에서는 <xref:System.Windows.Input.CommandBinding> 매핑되는 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 및 <xref:System.Windows.Input.CanExecuteRoutedEventArgs> 처리기를 <xref:System.Windows.Input.ApplicationCommands.Open%2A> 명령 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-149">The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span>  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 <span data-ttu-id="86463-150">에서는 다음 합니다 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 만듭니다는 <xref:System.Windows.MessageBox> 명령이 실행 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="86463-150">The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.</span></span>  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewCanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewCanExecute As CanExecuteRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::CanExecuteRoutedEventHandler ^ PreviewCanExecute;" />
      <MemberSignature Language="F#" Value="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " Usage="member this.PreviewCanExecute : System.Windows.Input.CanExecuteRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86463-151">현재 명령 대상에서 이 <see cref="T:System.Windows.Input.CommandBinding" />에 연결된 명령을 실행할 수 있는지 여부를 확인하는 검사를 시작하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-151">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> initiates a check to determine whether the command can be executed on the current command target.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86463-152">때를 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드를를 <xref:System.Windows.Input.RoutedCommand> 호출 되는 <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> 명령 대상에 명령 대상에서 이벤트 발생을 <xref:System.Windows.Input.CommandBinding> 명령에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-152">When the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> is called, the <xref:System.Windows.Input.CommandBinding.PreviewCanExecute> event is raised on the command target if the command target has a <xref:System.Windows.Input.CommandBinding> for the command.</span></span> <span data-ttu-id="86463-153">그런 다음 <xref:System.Windows.Input.CommandBinding.CanExecute> 처리기에 대 한 <xref:System.Windows.Input.CommandBinding> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-153">Then the <xref:System.Windows.Input.CommandBinding.CanExecute> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="86463-154">명령 대상에 없는 경우는 <xref:System.Windows.Input.CommandBinding> 명령에 대를 <xref:System.Windows.Input.CommandBinding.CanExecute> 있는 요소를 검색 하는 요소 트리를 이벤트 버블링을 <xref:System.Windows.Input.CommandBinding> 명령과 사용 하 여 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-154">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command, the <xref:System.Windows.Input.CommandBinding.CanExecute> event bubbles up the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  <span data-ttu-id="86463-155">이벤트 처리 되지 않은 경우는 <xref:System.Windows.Input.CommandBinding.CanExecute> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-155">If the event is not handled, the <xref:System.Windows.Input.CommandBinding.CanExecute> event is raised.</span></span>  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="86463-156">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="86463-156">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="86463-157">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="86463-157">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|<span data-ttu-id="86463-158">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="86463-158">Routing strategy</span></span>|<span data-ttu-id="86463-159">터널링</span><span class="sxs-lookup"><span data-stu-id="86463-159">Tunneling</span></span>|  
|<span data-ttu-id="86463-160">대리자</span><span class="sxs-lookup"><span data-stu-id="86463-160">Delegate</span></span>|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   <span data-ttu-id="86463-161">해당 버블링 이벤트가 <xref:System.Windows.Input.CommandBinding.CanExecute>합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-161">The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.CanExecute>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewExecuted" />
      <MemberSignature Language="VB.NET" Value="Public Event PreviewExecuted As ExecutedRoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ExecutedRoutedEventHandler ^ PreviewExecuted;" />
      <MemberSignature Language="F#" Value="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " Usage="member this.PreviewExecuted : System.Windows.Input.ExecutedRoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="86463-162">이 <see cref="T:System.Windows.Input.CommandBinding" />에 연결된 명령이 실행되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-162">Occurs when the command associated with this <see cref="T:System.Windows.Input.CommandBinding" /> executes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86463-163">경우는 <xref:System.Windows.Input.RoutedCommand> 실행 발생는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted> 명령 대상에서 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="86463-163">When a <xref:System.Windows.Input.RoutedCommand> executes, it raises the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event on the command target.</span></span>  <span data-ttu-id="86463-164">명령 대상에는 <xref:System.Windows.Input.CommandBinding> 명령에는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted> 처리기에 대 한 <xref:System.Windows.Input.CommandBinding> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-164">If the command target has a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> handler for that <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="86463-165">명령 대상에 없는 경우는 <xref:System.Windows.Input.CommandBinding> 명령에 대 한는 <xref:System.Windows.Input.CommandBinding.PreviewExecuted> 이벤트를 터널링 된 요소에 대 한 검색 하는 요소 트리를 <xref:System.Windows.Input.CommandBinding> 명령과 연결 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-165">If the command target does not have a <xref:System.Windows.Input.CommandBinding> for the command the <xref:System.Windows.Input.CommandBinding.PreviewExecuted> event tunnels down the element tree searching for an element that has a <xref:System.Windows.Input.CommandBinding> associated with the command.</span></span>  <span data-ttu-id="86463-166">미리 보기 이벤트 처리 되지 않은 경우는 <xref:System.Windows.Input.CommandBinding.Executed> 명령 대상에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-166">If the preview event is not handled, the <xref:System.Windows.Input.CommandBinding.Executed> event is raised on command target.</span></span>  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="86463-167">라우팅 이벤트 정보</span><span class="sxs-lookup"><span data-stu-id="86463-167">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="86463-168">식별자 필드</span><span class="sxs-lookup"><span data-stu-id="86463-168">Identifier field</span></span>|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|<span data-ttu-id="86463-169">라우팅 전략</span><span class="sxs-lookup"><span data-stu-id="86463-169">Routing strategy</span></span>|<span data-ttu-id="86463-170">터널링</span><span class="sxs-lookup"><span data-stu-id="86463-170">Tunneling</span></span>|  
|<span data-ttu-id="86463-171">대리자</span><span class="sxs-lookup"><span data-stu-id="86463-171">Delegate</span></span>|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   <span data-ttu-id="86463-172">해당 버블링 이벤트가 <xref:System.Windows.Input.CommandBinding.Executed>합니다.</span><span class="sxs-lookup"><span data-stu-id="86463-172">The corresponding bubbling event is <xref:System.Windows.Input.CommandBinding.Executed>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>