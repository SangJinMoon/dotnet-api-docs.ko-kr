<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="KeyBinding.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f7ffcff8092d477e75345cd0afc6f0d3c265489e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7ffcff8092d477e75345cd0afc6f0d3c265489e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.KeyBinding">
          <source>Binds a <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph> to a <ph id="ph2">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> (or another  <ph id="ph3">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> implementation).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>를 <ph id="ph2">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>(또는 다른 <ph id="ph3">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> 구현)에 바인딩합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> associates a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> with a <ph id="ph3">&lt;xref:System.Windows.Input.ICommand&gt;</ph>, such as a <ph id="ph4">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 연결는 <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Windows.Input.ICommand&gt;</ph>와 같은 <ph id="ph4">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is the primary implementation of the <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface for the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> commanding system .</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> 기본 구현에서 <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> 에 대 한 인터페이스는 <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 명령 시스템입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>In general, when the <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <ph id="ph2">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> value.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 실행 되는 명령을 호출 하지만 명령 동작은 영향을 받기 명령 별 요소와 같은 <ph id="ph2">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> 값.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>For more information on commanding, see the <bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>.</source>
          <target state="translated">명령에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>명령 실행 개요<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>With the exception of the function keys and the numeric keypad keys, a valid <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must contain exactly one <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> and one or more <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">기능 키와 올바른 숫자 키패드의 키를 제외한 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 하나만 있어야 <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> 와 하나 이상의 <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>Function keys and numeric keypad keys do not require a modifier key in order to be a valid <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.</source>
          <target state="translated">기능 키 및 숫자 키패드 키가 필요 없습니다 보조키는 유효 하려면 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>It is possible to specify an invalid <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> and a <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> with an invalid associated gesture, either through <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> or code.</source>
          <target state="translated">잘못 된 지정할 수는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 잘못 된 연결을 통해 제스처 <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 또는 코드입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>For instance, there is no validation that prevents creating and binding a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> that contains only a nonfunction key, or only modifiers but no key.</source>
          <target state="translated">예를 들어,는 만들고 바인딩할 수 없는 없는 유효성 검사는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 비 키만 또는 한정자 하지만 키를 포함 하 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>Such a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> will never attempt to invoke its associated command.</source>
          <target state="translated">이러한는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 연결 된 명령이 호출 하려고 시도 하지 것입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>When defining a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the <ph id="ph3">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.</source>
          <target state="translated">정의 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 에 <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> 두 가지 방법으로 지정 하는 <ph id="ph3">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>The first way to establish a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is to define the <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute of the <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element, which enables a syntax to specify keys and modifiers as a single string, for example "CTRL+P".</source>
          <target state="translated">설정 하는 첫 번째 방법은 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 에 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 정의 하는 것은 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> 특성은 <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 예를 들어 "CTRL + P" 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>The second way is to define the <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> attribute and the <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> attributes of the <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element.</source>
          <target state="translated">두 번째 방법은 정의 하는 것은 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> 특성 및 <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> 의 특성은 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>Both ways of setting the <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> are equivalent and modify the same underlying object, but there will be a conflict if both are used.</source>
          <target state="translated">설정의 두 가지 방법을 모두는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>In the case when the <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph>, and the <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attributes are all set, the attribute which is defined last will be used for the <ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.</source>
          <target state="translated">경우에는 경우는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> 특성이 모두 설정 되어, 정의 된 특성 마지막에 사용할는 <ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>You can potentially have situations where for example a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.</source>
          <target state="translated">예를 들어 상황을 잠재적으로 점이 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> 집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>In general, it is recommended that you use only the <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute from <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.</source>
          <target state="translated">일반적으로 것이 좋습니다만 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> 에서 특성 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>;이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> can be defined on a specific object or at the class level by registering a <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> on the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> class.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 등록 하 여 특정 개체 또는 클래스 수준에서 정의할 수는 <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>The most typical way to define a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> is within the control template, setting the <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> property in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> by declaring one or more <ph id="ph4">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> elements.</source>
          <target state="translated">정의 하는 가장 일반적인 방법은 한 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 컨트롤 템플릿, 설정 내에서 <ph id="ph2">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> 속성에 <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 하나 이상의 선언 하 여 <ph id="ph4">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> 또는 <ph id="ph5">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 요소.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.KeyBinding">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and adds it to the <ph id="ph2">&lt;xref:System.Windows.Input.InputBindingCollection&gt;</ph> of the root window.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 에 추가 <ph id="ph2">&lt;xref:System.Windows.Input.InputBindingCollection&gt;</ph> 루트 창.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.KeyBinding">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)">
          <source>The command to associate with <bpt id="p1">&lt;c&gt;</bpt>gesture<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>gesture<ept id="p1">&lt;/c&gt;</ept>와 연결할 명령입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)">
          <source>The key combination to associate with <bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>와 연결할 키 조합입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph>를 사용하여 <ph id="ph3">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)">
          <source><ph id="ph1">&lt;paramref name="command" /&gt;</ph> or <ph id="ph2">&lt;paramref name="gesture" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="command" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="gesture" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
          <source>The command to invoke.</source>
          <target state="translated">호출할 명령입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
          <source>The key to be associated with <bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>와 연결할 키입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
          <source>The modifiers to be associated with <bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>와 연결할 한정자입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> and the specified <ph id="ph3">&lt;see cref="T:System.Windows.Input.Key" /&gt;</ph> and <ph id="ph4">&lt;see cref="T:System.Windows.Input.ModifierKeys" /&gt;</ph> which will be converted into a <ph id="ph5">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph>로 변환될 지정된 <ph id="ph3">&lt;see cref="T:System.Windows.Input.Key" /&gt;</ph>와 <ph id="ph4">&lt;see cref="T:System.Windows.Input.ModifierKeys" /&gt;</ph>를 사용하여 <ph id="ph5">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.CreateInstanceCore">
          <source>Creates an instance of a <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph>의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.KeyBinding.CreateInstanceCore">
          <source>The new object.</source>
          <target state="translated">새 개체입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.KeyBinding.Gesture">
          <source>Gets or sets the gesture associated with this <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph>과 연결된 제스처를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Gesture">
          <source>The key sequence.</source>
          <target state="translated">키 시퀀스입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Gesture">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Gesture">
          <source>With the exception of the function keys and the numeric keypad keys, a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must contain a <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> and one or more <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">기능 키와 숫자 키패드의 키를 제외한는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 포함 해야 합니다는 <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> 와 하나 이상의 <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Gesture">
          <source>The following example shows how to bind a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> using a <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> (the markup and code examples specify different keys but are otherwise equivalent).</source>
          <target state="translated">다음 예제에서는 바인딩하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 에 <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> 를 사용 하 여는 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> (태그 및 코드 예제에서는 서로 다른 키를 지정 하지만 그렇지 않으면 동일).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.KeyBinding.Gesture">
          <source>the value <ph id="ph1">&lt;paramref name="gesture" /&gt;</ph> is being set to is not a <ph id="ph2">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="gesture" /&gt;</ph> 값이 <ph id="ph2">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>로 설정되지 않는 경우</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Input.Key" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph> associated with this <ph id="ph3">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Input.Key" /&gt;</ph>과 연결된 <ph id="ph2">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>의 <ph id="ph3">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph>를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>The key part of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>의 키 부분입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Windows.Input.Key.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Input.Key.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>With the exception of the function keys and the numeric keypad keys, a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must contain a <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> and one or more <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">기능 키와 숫자 키패드의 키를 제외한는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 포함 해야 합니다는 <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> 와 하나 이상의 <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>When defining a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the <ph id="ph3">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.</source>
          <target state="translated">정의 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 에 <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> 두 가지 방법으로 지정 하는 <ph id="ph3">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>The first way to establish a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is to define the <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute of the <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element, which enables a syntax to specify keys and modifiers as a single string, for example "CTRL+P".</source>
          <target state="translated">설정 하는 첫 번째 방법은 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 에 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 정의 하는 것은 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> 특성은 <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 예를 들어 "CTRL + P" 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>The second way is to define the <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> attribute and the <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> attributes of the <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element.</source>
          <target state="translated">두 번째 방법은 정의 하는 것은 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> 특성 및 <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> 의 특성은 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>Both ways of setting the <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> are equivalent and modify the same underlying object, but there will be a conflict if both are used.</source>
          <target state="translated">설정의 두 가지 방법을 모두는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>In the case when the <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph>, and the <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attributes are all set, the attribute which is defined last will be used for the <ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.</source>
          <target state="translated">경우에는 경우는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> 특성이 모두 설정 되어, 정의 된 특성 마지막에 사용할는 <ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>You can potentially have situations where for example a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.</source>
          <target state="translated">예를 들어 상황을 잠재적으로 점이 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> 집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Key">
          <source>In general, it is recommended that you use only the <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute from <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.</source>
          <target state="translated">일반적으로 것이 좋습니다만 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> 에서 특성 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>;이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.KeyBinding.KeyProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.KeyBinding.Key" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Input.KeyBinding.Key" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Input.ModifierKeys" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph> associated with this <ph id="ph3">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph>.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ModifierKeys" /&gt;</ph>과 연결된 <ph id="ph2">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>의 <ph id="ph3">&lt;see cref="T:System.Windows.Input.KeyBinding" /&gt;</ph>를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>The modifier keys of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyGesture" /&gt;</ph>의 보조키입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>The default value is <ph id="ph1">&lt;see cref="F:System.Windows.Input.ModifierKeys.None" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Input.ModifierKeys.None" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>With the exception of the function keys and the numeric keypad keys, a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must contain a <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> and one or more <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">기능 키와 숫자 키패드의 키를 제외한는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 포함 해야 합니다는 <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> 와 하나 이상의 <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>When defining a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the <ph id="ph3">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.</source>
          <target state="translated">정의 하는 경우는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 에 <ph id="ph2">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> 두 가지 방법으로 지정 하는 <ph id="ph3">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>The first way to establish a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is to define the <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute of the <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element, which enables a syntax to specify keys and modifiers as a single string, for example "CTRL+P".</source>
          <target state="translated">설정 하는 첫 번째 방법은 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 에 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 정의 하는 것은 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> 특성은 <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 예를 들어 "CTRL + P" 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>The second way is to define the <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> attribute and the <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> attributes of the <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element.</source>
          <target state="translated">두 번째 방법은 정의 하는 것은 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> 특성 및 <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> 의 특성은 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> 요소입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>Both ways of setting the <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> are equivalent and modify the same underlying object, but there will be a conflict if both are used.</source>
          <target state="translated">설정의 두 가지 방법을 모두는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> 동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>In the case when the <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph>, and the <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attributes are all set, the attribute which is defined last will be used for the <ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.</source>
          <target state="translated">경우에는 경우는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> 특성이 모두 설정 되어, 정의 된 특성 마지막에 사용할는 <ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>You can potentially have situations where for example a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.</source>
          <target state="translated">예를 들어 상황을 잠재적으로 점이 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> 집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>In general, it is recommended that you use only the <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute from <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.</source>
          <target state="translated">일반적으로 것이 좋습니다만 사용 하 여 <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> 에서 특성 <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>;이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source><bpt id="p1">*</bpt>oneOrMoreModifierKeys<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>oneOrMoreModifierKeys<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.KeyBinding.Modifiers">
          <source>One or more modifier keys, defined by the <ph id="ph1">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph> enumeration, delimited with a "+" character.</source>
          <target state="translated">에 정의 된 하나 이상의 보조 키의 <ph id="ph1">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph> "+" 문자로 구분 된 열거형입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.KeyBinding.ModifiersProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.KeyBinding.Modifiers" /&gt;</ph> dependency property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Windows.Input.KeyBinding.Modifiers" /&gt;</ph> 종속성 속성을 식별합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>