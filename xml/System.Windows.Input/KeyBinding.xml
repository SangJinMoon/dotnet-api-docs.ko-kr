<Type Name="KeyBinding" FullName="System.Windows.Input.KeyBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3a720edaac5c7f719dc1045717fc47b33c2a6893" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36506903" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyBinding : System.Windows.Input.InputBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyBinding extends System.Windows.Input.InputBinding" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyBinding&#xA;Inherits InputBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyBinding : System::Windows::Input::InputBinding" />
  <TypeSignature Language="F#" Value="type KeyBinding = class&#xA;    inherit InputBinding" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputBinding</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Windows.Input.KeyGesture" />를 <see cref="T:System.Windows.Input.RoutedCommand" />(또는 다른 <see cref="T:System.Windows.Input.ICommand" /> 구현)에 바인딩합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Input.KeyBinding> 연결는 <xref:System.Windows.Input.KeyGesture> 와 <xref:System.Windows.Input.ICommand>와 같은 <xref:System.Windows.Input.RoutedCommand>합니다. <xref:System.Windows.Input.RoutedCommand> 기본 구현에서 <xref:System.Windows.Input.ICommand> 에 대 한 인터페이스는 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 명령 시스템입니다.  일반적으로 <xref:System.Windows.Input.KeyGesture> 실행 되는 명령을 호출 하지만 명령 동작은 영향을 받기 명령 별 요소와 같은 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 값.  명령에 대 한 자세한 내용은 참조는 [명령 실행 개요](~/docs/framework/wpf/advanced/commanding-overview.md)합니다.  
  
 기능 키와 올바른 숫자 키패드의 키를 제외한 <xref:System.Windows.Input.KeyGesture> 하나만 있어야 <xref:System.Windows.Input.Key> 와 하나 이상의 <xref:System.Windows.Input.ModifierKeys>합니다.  기능 키 및 숫자 키패드 키가 필요 없습니다 보조키는 유효 하려면 <xref:System.Windows.Input.KeyGesture>합니다. 잘못 된 지정할 수는 <xref:System.Windows.Input.KeyGesture> 및 <xref:System.Windows.Input.KeyBinding> 잘못 된 연결을 통해 제스처 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 또는 코드입니다. 예를 들어,는 만들고 바인딩할 수 없는 없는 유효성 검사는 <xref:System.Windows.Input.KeyGesture> 비 키만 또는 한정자 하지만 키를 포함 하 합니다. 이러한는 <xref:System.Windows.Input.KeyBinding> 연결 된 명령이 호출 하려고 시도 하지 것입니다.  
  
 정의 하는 경우는 <xref:System.Windows.Input.KeyBinding> 에 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 두 가지 방법으로 지정 하는 <xref:System.Windows.Input.KeyGesture>합니다. 설정 하는 첫 번째 방법은 <xref:System.Windows.Input.KeyBinding> 에 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 특성은 <xref:System.Windows.Input.KeyBinding> 예를 들어 "CTRL + P" 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를 합니다. 두 번째 방법은 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Key%2A> 특성 및 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 의 특성은 <xref:System.Windows.Input.KeyBinding> 요소입니다. 설정의 두 가지 방법을 모두는 <xref:System.Windows.Input.KeyGesture> 동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.  경우에는 경우는 <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, 및 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 특성이 모두 설정 되어, 정의 된 특성 마지막에 사용할는 <xref:System.Windows.Input.KeyGesture>합니다. 예를 들어 상황을 잠재적으로 점이 <xref:System.Windows.Input.KeyBinding.Key%2A> 집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다. 일반적으로 것이 좋습니다만 사용 하 여 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 에서 특성 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)];이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.  
  
 A <xref:System.Windows.Input.KeyBinding> 등록 하 여 특정 개체 또는 클래스 수준에서 정의할 수는 <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> 에 <xref:System.Windows.Input.CommandManager> 클래스입니다. 정의 하는 가장 일반적인 방법은 한 <xref:System.Windows.Input.KeyBinding> 컨트롤 템플릿, 설정 내에서 <xref:System.Windows.UIElement.InputBindings%2A> 속성에 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 하나 이상의 선언 하 여 <xref:System.Windows.Input.MouseBinding> 또는 <xref:System.Windows.Input.KeyBinding> 요소.  
  
   
  
## Examples  
 다음 예제에서는 한 <xref:System.Windows.Input.KeyBinding> 에 추가 <xref:System.Windows.Input.InputBindingCollection> 루트 창.  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerkeybindingcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Input.KeyBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Input.KeyBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.KeyGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As KeyGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::KeyGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyBinding : System.Windows.Input.ICommand * System.Windows.Input.KeyGesture -&gt; System.Windows.Input.KeyBinding" Usage="new System.Windows.Input.KeyBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.KeyGesture" />
      </Parameters>
      <Docs>
        <param name="command">
          <c>gesture</c>와 연결할 명령입니다.</param>
        <param name="gesture">
          <c>command</c>와 연결할 키 조합입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.Input.KeyBinding" /> 및 <see cref="T:System.Windows.Input.ICommand" />를 사용하여 <see cref="T:System.Windows.Input.KeyGesture" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> 또는 <paramref name="gesture" />가 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyBinding : System.Windows.Input.ICommand * System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyBinding" Usage="new System.Windows.Input.KeyBinding (command, key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="command">호출할 명령입니다.</param>
        <param name="key">
          <c>command</c>와 연결할 키입니다.</param>
        <param name="modifiers">
          <c>command</c>와 연결할 한정자입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.Input.KeyBinding" /> 및 <see cref="T:System.Windows.Input.ICommand" />로 변환될 지정된 <see cref="T:System.Windows.Input.Key" />와 <see cref="T:System.Windows.Input.ModifierKeys" />를 사용하여 <see cref="T:System.Windows.Input.KeyGesture" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="keyBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Input.KeyBinding" />의 인스턴스를 만듭니다.</summary>
        <returns>새 개체입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public override System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.KeyBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Input.KeyBinding" />과 연결된 제스처를 가져오거나 설정합니다.</summary>
        <value>키 시퀀스입니다. 기본값은 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기능 키와 숫자 키패드의 키를 제외한는 <xref:System.Windows.Input.KeyGesture> 포함 해야 합니다는 <xref:System.Windows.Input.Key> 와 하나 이상의 <xref:System.Windows.Input.ModifierKeys>합니다.  
  
   
  
## Examples  
 다음 예제에서는 바인딩하는 방법을 보여 줍니다.는 <xref:System.Windows.Input.KeyGesture> 에 <xref:System.Windows.Input.RoutedCommand> 를 사용 하 여는 <xref:System.Windows.Input.KeyBinding> (태그 및 코드 예제에서는 서로 다른 키를 지정 하지만 그렇지 않으면 동일).  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="gesture" /> 값이 <see cref="T:System.Windows.Input.KeyGesture" />로 설정되지 않는 경우</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Key" />
      <MemberSignature Language="VB.NET" Value="Public Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); void set(System::Windows::Input::Key value); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key with get, set" Usage="System.Windows.Input.KeyBinding.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Input.Key" />과 연결된 <see cref="T:System.Windows.Input.KeyGesture" />의 <see cref="T:System.Windows.Input.KeyBinding" />를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Input.KeyGesture" />의 키 부분입니다. 기본값은 <see cref="F:System.Windows.Input.Key.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기능 키와 숫자 키패드의 키를 제외한는 <xref:System.Windows.Input.KeyGesture> 포함 해야 합니다는 <xref:System.Windows.Input.Key> 와 하나 이상의 <xref:System.Windows.Input.ModifierKeys>합니다.  
  
 정의 하는 경우는 <xref:System.Windows.Input.KeyBinding> 에 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 두 가지 방법으로 지정 하는 <xref:System.Windows.Input.KeyGesture>합니다. 설정 하는 첫 번째 방법은 <xref:System.Windows.Input.KeyBinding> 에 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 특성은 <xref:System.Windows.Input.KeyBinding> 예를 들어 "CTRL + P" 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를 합니다. 두 번째 방법은 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Key%2A> 특성 및 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 의 특성은 <xref:System.Windows.Input.KeyBinding> 요소입니다. 설정의 두 가지 방법을 모두는 <xref:System.Windows.Input.KeyGesture> 동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.  경우에는 경우는 <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, 및 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 특성이 모두 설정 되어, 정의 된 특성 마지막에 사용할는 <xref:System.Windows.Input.KeyGesture>합니다. 예를 들어 상황을 잠재적으로 점이 <xref:System.Windows.Input.KeyBinding.Key%2A> 집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다. 일반적으로 것이 좋습니다만 사용 하 여 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 에서 특성 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)];이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="KeyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty KeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty KeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.KeyBinding.KeyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ KeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.KeyBinding.KeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Input.KeyBinding.Key" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); void set(System::Windows::Input::ModifierKeys value); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys with get, set" Usage="System.Windows.Input.KeyBinding.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.Windows.Input.ModifierKeys" />과 연결된 <see cref="T:System.Windows.Input.KeyGesture" />의 <see cref="T:System.Windows.Input.KeyBinding" />를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Input.KeyGesture" />의 보조키입니다.  기본값은 <see cref="F:System.Windows.Input.ModifierKeys.None" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기능 키와 숫자 키패드의 키를 제외한는 <xref:System.Windows.Input.KeyGesture> 포함 해야 합니다는 <xref:System.Windows.Input.Key> 와 하나 이상의 <xref:System.Windows.Input.ModifierKeys>합니다.  
  
 정의 하는 경우는 <xref:System.Windows.Input.KeyBinding> 에 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 두 가지 방법으로 지정 하는 <xref:System.Windows.Input.KeyGesture>합니다. 설정 하는 첫 번째 방법은 <xref:System.Windows.Input.KeyBinding> 에 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 특성은 <xref:System.Windows.Input.KeyBinding> 예를 들어 "CTRL + P" 단일 문자열로 키 한정자를 지정 하는 구문을 사용 하는 요소를 합니다. 두 번째 방법은 정의 하는 것은 <xref:System.Windows.Input.KeyBinding.Key%2A> 특성 및 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 의 특성은 <xref:System.Windows.Input.KeyBinding> 요소입니다. 설정의 두 가지 방법을 모두는 <xref:System.Windows.Input.KeyGesture> 동일 하 고 같은 내부 개체를 수정 하지만 할 충돌이 모두 사용 됩니다.  경우에는 경우는 <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, 및 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 특성이 모두 설정 되어, 정의 된 특성 마지막에 사용할는 <xref:System.Windows.Input.KeyGesture>합니다. 예를 들어 상황을 잠재적으로 점이 <xref:System.Windows.Input.KeyBinding.Key%2A> 집합 마지막 됩니다 이전 제스처의 키 구성 요소는 방금 덮어쓰되 제스처의 한정자를 그대로 둡니다. 일반적으로 것이 좋습니다만 사용 하 여 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 에서 특성 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)];이 모호성을 방지 하는 가장 효율적인된 구문을 제공 되 고, 제공 serialization에 대 한 가장 간단한 표현입니다.  
  
<a name="xamlAttributeUsage_Modifiers"></a>   
## <a name="xaml-attribute-usage"></a>XAML 특성 사용  
  
```  
<object Modifiers="oneOrMoreModifierKeys"/>  
  
```  
  
<a name="xamlValues_Modifiers"></a>   
## <a name="xaml-values"></a>XAML 값  
 *oneOrMoreModifierKeys*  
 에 정의 된 하나 이상의 보조 키의 <xref:System.Windows.Input.ModifierKeys> "+" 문자로 구분 된 열거형입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="ModifiersProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ModifiersProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ModifiersProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.KeyBinding.ModifiersProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ModifiersProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ModifiersProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ModifiersProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.KeyBinding.ModifiersProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Input.KeyBinding.Modifiers" /> 종속성 속성을 식별합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>