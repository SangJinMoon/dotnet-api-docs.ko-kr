<Type Name="ICommandSource" FullName="System.Windows.Input.ICommandSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c2cc671612548463db8b444d52a8d84986b73927" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37505173" /></Metadata><TypeSignature Language="C#" Value="public interface ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommandSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommandSource" />
  <TypeSignature Language="F#" Value="type ICommandSource = interface" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ab44e-101">명령 호출 방법을 알고 있는 개체를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-101">Defines an object that knows how to invoke a command.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab44e-102">명령 소스는 특정 개체에 의해 명령을 호출 하는 방법을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-102">The command source defines how a command is invoked by that particular object.</span></span>  <span data-ttu-id="ab44e-103">예를 들어, 경우를 <xref:System.Windows.Controls.Button> 명령 명령으로 연결 된 호출할 때를 <xref:System.Windows.Controls.Button> 를 클릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-103">For example, if a <xref:System.Windows.Controls.Button> is associated with a command, the command is invoked when the <xref:System.Windows.Controls.Button> is clicked.</span></span>  
  
 <span data-ttu-id="ab44e-104">명령 소스는 일반적으로 사용 하지 않도록 설정 자체와 연결 된 명령이 현재 명령 대상에서 실행할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ab44e-104">A command source will normally disable itself if the command it is associated with cannot execute on the current command target.</span></span>  <span data-ttu-id="ab44e-105">예를 들어,를 <xref:System.Windows.Controls.MenuItem> 연관 합니다 <xref:System.Windows.Input.ApplicationCommands.Paste%2A> 명령이 회색으로 표시 될 때를 <xref:System.Windows.Input.ApplicationCommands.Paste%2A> 현재 명령 대상에서 명령을 실행할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-105">For example, a <xref:System.Windows.Controls.MenuItem> associated with the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command will gray itself out when the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command cannot execute on the current command target.</span></span>  
  
 <span data-ttu-id="ab44e-106">일반적으로 명령 소스에서 수신 대기 하는 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 명령에는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-106">Normally, a command source will listen to the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the command.</span></span>  <span data-ttu-id="ab44e-107">이 명령 대상에서 키보드 포커스의 손실 등 조건이 변경 되 면 명령 소스를 알립니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-107">This informs the command source when conditions change on the command target, such as loss of keyboard focus.</span></span>  <span data-ttu-id="ab44e-108">명령 소스를 사용 하 여 명령을 확인할 수 있습니다는 <xref:System.Windows.Input.ICommand.CanExecute%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab44e-108">The command source can then query the command using the <xref:System.Windows.Input.ICommand.CanExecute%2A> method.</span></span>  
  
 <span data-ttu-id="ab44e-109">클래스의 일부 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 구현 하는 <xref:System.Windows.Input.ICommandSource> 는: <xref:System.Windows.Controls.Primitives.ButtonBase>를 <xref:System.Windows.Controls.MenuItem>, 및 <xref:System.Windows.Documents.Hyperlink>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-109">Some of the classes in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that implement <xref:System.Windows.Input.ICommandSource> are: <xref:System.Windows.Controls.Primitives.ButtonBase>, <xref:System.Windows.Controls.MenuItem>, and <xref:System.Windows.Documents.Hyperlink>.</span></span>  
  
 <span data-ttu-id="ab44e-110">명령 시스템에서 Windows Presentation Foundation의를 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 속성을 <xref:System.Windows.Input.ICommandSource> 은 적용 될 때를 <xref:System.Windows.Input.ICommand> 는 <xref:System.Windows.Input.RoutedCommand>입니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-110">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="ab44e-111">경우는 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 에 설정 되어를 <xref:System.Windows.Input.ICommandSource> 해당 명령이 아니며는 <xref:System.Windows.Input.RoutedCommand>, 명령 대상이 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-111">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ICommand" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.ICommandSource.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab44e-112">명령 소스가 호출될 때 실행할 명령을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-112">Gets the command that will be executed when the command source is invoked.</span></span></summary>
        <value><span data-ttu-id="ab44e-113">명령 소스가 호출될 때 실행할 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-113">The command that will be executed when the command source is invoked.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj" Usage="System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab44e-114">실행할 때 명령에 전달될 수 있는 사용자 정의 데이터 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-114">Represents a user defined data value that can be passed to the command when it is executed.</span></span></summary>
        <value><span data-ttu-id="ab44e-115">명령별 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-115">The command specific data.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab44e-116">일반적으로 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 명령이 실행 될 때 특정 정보를 전달 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-116">Normally, the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="ab44e-117">데이터 유형의 명령에 의해 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-117">The type of the data is defined by the command.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement" Usage="System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab44e-118">명령이 실행되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-118">The object that the command is being executed on.</span></span></summary>
        <value><span data-ttu-id="ab44e-119">명령이 실행되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-119">The object that the command is being executed on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab44e-120">명령 시스템에서 Windows Presentation Foundation의를 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 속성을 <xref:System.Windows.Input.ICommandSource> 은 적용 될 때를 <xref:System.Windows.Input.ICommand> 는 <xref:System.Windows.Input.RoutedCommand>입니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-120">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="ab44e-121">경우는 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 에 설정 되어를 <xref:System.Windows.Input.ICommandSource> 해당 명령이 아니며는 <xref:System.Windows.Input.RoutedCommand>, 명령 대상이 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-121">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="ab44e-122">와 함께 사용할 경우는 <xref:System.Windows.Input.RoutedCommand>, 명령 대상이 개체입니다는 <xref:System.Windows.Input.CommandManager.Executed> 및 <xref:System.Windows.Input.CommandManager.CanExecute> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-122">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="ab44e-123">경우는 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 속성이 설정 되지 않은, 키보드 포커스가 있는 요소가 대상으로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab44e-123">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> property is not set, the element with keyboard focus will be used as the target.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
  </Members>
</Type>