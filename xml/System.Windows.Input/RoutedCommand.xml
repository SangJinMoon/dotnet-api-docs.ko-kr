<Type Name="RoutedCommand" FullName="System.Windows.Input.RoutedCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d7469aafedfab5bf01be9f8214fc44809973b73" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30659627" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RoutedCommand : System.Windows.Input.ICommand" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedCommand extends System.Object implements class System.Windows.Input.ICommand" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.RoutedCommand" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedCommand&#xA;Implements ICommand" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedCommand : System::Windows::Input::ICommand" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommand</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="408a6-101">
        <see cref="T:System.Windows.Input.ICommand" />를 구현하고 요소 트리를 통해 라우트되는 명령을 정의합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="408a6-101">Defines a command that implements <see cref="T:System.Windows.Input.ICommand" /> and is routed through the element tree.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="408a6-102"><xref:System.Windows.Input.RoutedCommand.Execute%2A> 및 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 에 대 한 메서드는 <xref:System.Windows.Input.RoutedCommand> 는 일반적인 경우 처럼 명령에 대 한 응용 프로그램 논리가 포함 되어 있지 않으면 <xref:System.Windows.Input.ICommand>, 하지만 이러한 메서드에 있는 개체를 찾는 요소 트리를 탐색 하는 이벤트를 발생 하는 대신,는 <xref:System.Windows.Input.CommandBinding>.</span><span class="sxs-lookup"><span data-stu-id="408a6-102">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a <xref:System.Windows.Input.RoutedCommand> do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="408a6-103">에 연결 된 이벤트 처리기는 <xref:System.Windows.Input.CommandBinding> 명령 논리를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-103">The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.</span></span>  
  
 <span data-ttu-id="408a6-104"><xref:System.Windows.Input.RoutedCommand.Execute%2A> 발생 시키는 메서드는 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 및 <xref:System.Windows.Input.CommandManager.Executed> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-104">The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.</span></span>  <span data-ttu-id="408a6-105"><xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 발생 시키는 메서드는 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> 및 <xref:System.Windows.Input.CommandManager.CanExecute> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-105">The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.</span></span>  
  
<a name="xamlAttributeUsage_RoutedCommand"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="408a6-106">XAML 특성 사용</span><span class="sxs-lookup"><span data-stu-id="408a6-106">XAML Attribute Usage</span></span>  
 <span data-ttu-id="408a6-107">\<*object* *property*="*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="408a6-107">\<*object* *property*="*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="408a6-108">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="408a6-108">\- or -</span></span>  
  
 <span data-ttu-id="408a6-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span><span class="sxs-lookup"><span data-stu-id="408a6-109">\<*object* *property*="*predefinedClassName*.*predefinedCommandName*"/></span></span>  
  
 <span data-ttu-id="408a6-110">\- 또는 -</span><span class="sxs-lookup"><span data-stu-id="408a6-110">\- or -</span></span>  
  
 <span data-ttu-id="408a6-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span><span class="sxs-lookup"><span data-stu-id="408a6-111">\<*object* *property*="{ *customClassName*.*customCommandName*}"/></span></span>  
  
<a name="xamlValues_RoutedCommand"></a>   
## <a name="xaml-values"></a><span data-ttu-id="408a6-112">XAML 값</span><span class="sxs-lookup"><span data-stu-id="408a6-112">XAML Values</span></span>  
 <span data-ttu-id="408a6-113">*predefinedClassName*</span><span class="sxs-lookup"><span data-stu-id="408a6-113">*predefinedClassName*</span></span>  
 <span data-ttu-id="408a6-114">미리 정의 된 명령 클래스 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-114">One of the predefined command classes.</span></span>  
  
 <span data-ttu-id="408a6-115">*predefinedCommandName*</span><span class="sxs-lookup"><span data-stu-id="408a6-115">*predefinedCommandName*</span></span>  
 <span data-ttu-id="408a6-116">미리 정의 된 명령 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-116">One of the predefined commands.</span></span>  
  
 <span data-ttu-id="408a6-117">*customClassName*</span><span class="sxs-lookup"><span data-stu-id="408a6-117">*customClassName*</span></span>  
 <span data-ttu-id="408a6-118">사용자 지정 명령을 포함 하는 사용자 지정 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-118">A custom class which contains the custom command.</span></span> <span data-ttu-id="408a6-119">사용자 지정 클래스는 일반적으로 필요는 `xlmns` 매핑을 앞에; 참조 [XAML 네임 스페이스 및 WPF XAML에 대 한 매핑을 Namespace](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-119">Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="408a6-120">*customCommandName*</span><span class="sxs-lookup"><span data-stu-id="408a6-120">*customCommandName*</span></span>  
 <span data-ttu-id="408a6-121">사용자 지정 명령입니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-121">A custom command.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="408a6-122">
            <see cref="T:System.Windows.Input.RoutedCommand" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-122">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="408a6-123">
            <see cref="T:System.Windows.Input.RoutedCommand" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-123">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="408a6-124">직렬화에 대해 선언된 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-124">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="408a6-125">명령을 등록하는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-125">The type which is registering the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="408a6-126">지정된 이름과 소유자 형식을 사용하여 <see cref="T:System.Windows.Input.RoutedCommand" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-126">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name and owner type.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="408a6-127">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-127">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="408a6-128">
            <paramref name="ownerType" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-128">
              <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type ownerType, class System.Windows.Input.InputGestureCollection inputGestures) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, ownerType As Type, inputGestures As InputGestureCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedCommand(System::String ^ name, Type ^ ownerType, System::Windows::Input::InputGestureCollection ^ inputGestures);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="inputGestures" Type="System.Windows.Input.InputGestureCollection" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="408a6-129">직렬화에 대해 선언된 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-129">Declared name for serialization.</span>
          </span>
        </param>
        <param name="ownerType">
          <span data-ttu-id="408a6-130">명령을 등록할 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-130">The type that is registering the command.</span>
          </span>
        </param>
        <param name="inputGestures">
          <span data-ttu-id="408a6-131">이 명령과 연결된 기본 입력 제스처입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-131">Default input gestures associated with this command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="408a6-132">지정된 이름, 소유자 형식 및 제스처 컬렉션을 사용하여 <see cref="T:System.Windows.Input.RoutedCommand" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-132">Initializes a new instance of the <see cref="T:System.Windows.Input.RoutedCommand" /> class with the specified name, owner type, and collection of gestures.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="408a6-133">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-133">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="408a6-134">
            <paramref name="name" />의 길이가 0인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-134">the length of <paramref name="name" /> is zero</span>
          </span>
          <span data-ttu-id="408a6-135">\- 또는 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-135">\- or -</span>
          </span>
          <span data-ttu-id="408a6-136">
            <paramref name="ownerType" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-136">
              <paramref name="ownerType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExecute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecute (parameter As Object, target As IInputElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="408a6-137">사용자 정의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-137">A user defined data type.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="408a6-138">명령 대상입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-138">The command target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="408a6-139">이 <see cref="T:System.Windows.Input.RoutedCommand" />가 현재 상태에서 실행될 수 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-139">Determines whether this <see cref="T:System.Windows.Input.RoutedCommand" /> can execute in its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="408a6-140">현재 명령 대상에서 명령을 실행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-140">
              <see langword="true" /> if the command can execute on the current command target; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="408a6-141">있는지 여부를 확인 하는 실제 논리는 <xref:System.Windows.Input.RoutedCommand> 의 현재 상태에서 실행할 수 있습니다 명령 대상에 포함 되지 않은 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드 대신 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 발생는 <xref:System.Windows.Input.CommandManager.PreviewCanExecute> 및 <xref:System.Windows.Input.CommandManager.CanExecute> 터널을 통해 발생 되는 이벤트 요소 포함 된 개체를 찾는 트리는 <xref:System.Windows.Input.CommandBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-141">The actual logic that determines if a <xref:System.Windows.Input.RoutedCommand> can execute on the current command target is not contained in the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods, rather <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and the <xref:System.Windows.Input.CommandManager.CanExecute> events which tunnel and bubble through element tree looking for a object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="408a6-142">경우는 <xref:System.Windows.Input.CommandBinding> 해당 <xref:System.Windows.Input.RoutedCommand> 발견 되 면 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 에 연결 된 <xref:System.Windows.Input.CommandBinding> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-142">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="408a6-143">여부를 결정 하기에 대 한 프로그래밍 논리를 제공 하는 이러한 처리기는 <xref:System.Windows.Input.RoutedCommand> 여부 실행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-143">These handlers supply the programming logic for determining if the <xref:System.Windows.Input.RoutedCommand> can execute or not.</span></span>  
  
 <span data-ttu-id="408a6-144"><xref:System.Windows.Input.CommandManager.PreviewCanExecute> 및 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 에서 발생 하는 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-144">The <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.PreviewExecuted> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="408a6-145">경우는 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 에 설정 되어 있지는 <xref:System.Windows.Input.ICommandSource>, <xref:System.Windows.Input.CommandManager.PreviewCanExecute> 및 <xref:System.Windows.Input.CommandManager.CanExecute> 키보드 포커스가 있는 요소에 대해 발생 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-145">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="408a6-146">다음 예제는 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 이벤트 처리기를 구현 하는 사용자 지정 <xref:System.Windows.Input.ICommandSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-146">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="408a6-147">`this.Command` 이 예제는 <xref:System.Windows.Input.ICommandSource.Command%2A> 속성에는 <xref:System.Windows.Input.ICommandSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-147">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="408a6-148">명령이 없으면 `null`, 명령은로 캐스팅 되는 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-148">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="408a6-149">명령이 있는 경우는 <xref:System.Windows.Input.RoutedCommand>, 하면 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드는 전달 된 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 및 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-149">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="408a6-150">명령을 없으면는 <xref:System.Windows.Input.RoutedCommand>로 캐스팅 되는 <xref:System.Windows.Input.ICommand> 및 <xref:System.Windows.Input.ICommand.CanExecute%2A> 메서드는 전달 된 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-150">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="408a6-151">경우는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드 반환 `true`, 다음 컨트롤은 사용할 수 있습니다; 그렇지 않은 경우 컨트롤을 사용 하지 않도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-151">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disable.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="408a6-152">
            <paramref name="target" />가 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-152">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanExecuteChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CanExecuteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CanExecuteChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.RoutedCommand.CanExecuteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CanExecuteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ CanExecuteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="408a6-153">명령 관리자가 명령 소스에 대한 변경 내용을 감지하는 경우 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-153">Occurs when changes to the command source are detected by the command manager.</span>
          </span>
          <span data-ttu-id="408a6-154">이러한 변경 내용은 대개 현재 명령 대상에서 명령을 실행해야 하는지 여부에 영향을 줍니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-154">These changes often affect whether the command should execute on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="408a6-155"><xref:System.Windows.Input.RoutedCommand> 에 대 한 수신 대기 하는 <xref:System.Windows.Input.CommandManager.RequerySuggested> 이벤트에 의해 발생 하는 <xref:System.Windows.Input.CommandManager>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-155">The <xref:System.Windows.Input.RoutedCommand> listens for the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, which is raised by the <xref:System.Windows.Input.CommandManager>.</span></span> <span data-ttu-id="408a6-156"><xref:System.Windows.Input.CommandManager.RequerySuggested> 이벤트는 조건이 충족 될 때마다 발생 여부를 변경할 수 있는 키보드 포커스 변경에에서 같은 명령을 실행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-156">The <xref:System.Windows.Input.CommandManager.RequerySuggested> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</span></span>  <span data-ttu-id="408a6-157">명령의 받을 때는 <xref:System.Windows.Input.CommandManager.RequerySuggested> 발생 이벤트는 <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-157">When the command receives the <xref:System.Windows.Input.CommandManager.RequerySuggested> event, it raises the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  <span data-ttu-id="408a6-158">이 이벤트와 쿼리 명령 소스 수신할 일반적으로 <xref:System.Windows.Input.RoutedCommand> 통해는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="408a6-158">Generally, the command source will listen for this event and query the <xref:System.Windows.Input.RoutedCommand> by way of the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method.</span></span>  <span data-ttu-id="408a6-159">대부분의 명령 소스 명령이 없습니다 실행할 수 있으면 해당 명령 바인딩의 일환으로 비활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-159">Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</span></span>  <span data-ttu-id="408a6-160">이러한 예는 경우는 <xref:System.Windows.Controls.MenuItem> 명령을 실행할 수 없는 경우 회색으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-160">An example of this is when a <xref:System.Windows.Controls.MenuItem> grays itself out when the command cannot be executed.</span></span>  
  
 <span data-ttu-id="408a6-161">일부 경우에는 <xref:System.Windows.Input.CommandManager> 은 실행할 명령의 수를 변경 하는 조건 변경을 인식 하지 못합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-161">In some situations, the <xref:System.Windows.Input.CommandManager> is unaware of a change in conditions that alters the ability of a command to execute.</span></span>  <span data-ttu-id="408a6-162">이러한 경우에 적용할 수 있습니다는 <xref:System.Windows.Input.CommandManager> 발생 하는 <xref:System.Windows.Input.CommandManager.RequerySuggested> 호출 하 여 이벤트는 <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> 메서드, 이렇게 하면는 <xref:System.Windows.Input.RoutedCommand> 시키려면는 <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-162">In these cases, you can force the <xref:System.Windows.Input.CommandManager> to raises the <xref:System.Windows.Input.CommandManager.RequerySuggested> event by calling the <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> method, this will in turn cause the <xref:System.Windows.Input.RoutedCommand> to raise the <xref:System.Windows.Input.RoutedCommand.CanExecuteChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="408a6-163">다음 예제는 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 이벤트 처리기를 구현 하는 사용자 지정 <xref:System.Windows.Input.ICommandSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-163">The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.</span></span>  
  
 <span data-ttu-id="408a6-164">`this.Command` 이 예제는 <xref:System.Windows.Input.ICommandSource.Command%2A> 속성에는 <xref:System.Windows.Input.ICommandSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-164">`this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="408a6-165">명령이 없으면 `null`, 명령은로 캐스팅 되는 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-165">If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="408a6-166">명령이 있는 경우는 <xref:System.Windows.Input.RoutedCommand>, 하면 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드는 전달 된 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 및 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-166">If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="408a6-167">명령을 없으면는 <xref:System.Windows.Input.RoutedCommand>로 캐스팅 되는 <xref:System.Windows.Input.ICommand> 및 <xref:System.Windows.Input.ICommand.CanExecute%2A> 메서드는 전달 된 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-167">If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 <span data-ttu-id="408a6-168">경우는 <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 메서드 반환 `true`, 다음 컨트롤은 사용할 수 있습니다; 그렇지 않은 경우 컨트롤이 비활성화 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-168">If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandcanexecutechanged)]
 [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandcanexecutechanged)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (object parameter, System.Windows.IInputElement target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(object parameter, class System.Windows.IInputElement target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (parameter As Object, target As IInputElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Object ^ parameter, System::Windows::IInputElement ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="target" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="408a6-169">처리기에 전달되는 사용자 정의 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-169">User defined parameter to be passed to the handler.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="408a6-170">명령 처리기를 찾을 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-170">Element at which to begin looking for command handlers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="408a6-171">현재 명령 대상에서 <see cref="T:System.Windows.Input.RoutedCommand" />를 실행합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-171">Executes the <see cref="T:System.Windows.Input.RoutedCommand" /> on the current command target.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="408a6-172">실행 하는 실제 논리는 <xref:System.Windows.Input.RoutedCommand> 에 포함 되지 않은 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="408a6-172">The actual logic that executes the <xref:System.Windows.Input.RoutedCommand> is not contained in the <xref:System.Windows.Input.RoutedCommand.Execute%2A> methods.</span></span>  <span data-ttu-id="408a6-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> 발생는 <xref:System.Windows.Input.CommandManager.PreviewExecuted> 및 <xref:System.Windows.Input.CommandManager.Executed> 이벤트와 개체를 찾는 트리 터널 및 요소를 통해 버블링 되는 <xref:System.Windows.Input.CommandBinding>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-173"><xref:System.Windows.Input.RoutedCommand.Execute%2A> raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events, which tunnel and bubble through the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.</span></span>  <span data-ttu-id="408a6-174">경우는 <xref:System.Windows.Input.CommandBinding> 해당 <xref:System.Windows.Input.RoutedCommand> 발견 되 면 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 에 연결 된 <xref:System.Windows.Input.CommandBinding> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-174">If a <xref:System.Windows.Input.CommandBinding> for that <xref:System.Windows.Input.RoutedCommand> is found, then the <xref:System.Windows.Input.ExecutedRoutedEventHandler> attached to <xref:System.Windows.Input.CommandBinding> is called.</span></span>  <span data-ttu-id="408a6-175">수행 하는 프로그래밍 논리를 제공 하는 이러한 처리기는 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-175">These handlers supply the programming logic that performs the <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 <span data-ttu-id="408a6-176"><xref:System.Windows.Input.CommandManager.PreviewExecuted> 및 <xref:System.Windows.Input.CommandManager.Executed> 에서 발생 하는 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-176">The <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</span></span>  <span data-ttu-id="408a6-177">경우는 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 에 설정 되어 있지는 <xref:System.Windows.Input.ICommandSource>, <xref:System.Windows.Input.CommandManager.PreviewExecuted> 및 <xref:System.Windows.Input.CommandManager.Executed> 키보드 포커스가 있는 요소에 대해 발생 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-177">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set on the <xref:System.Windows.Input.ICommandSource>, the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events are raised on the element with keyboard focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="408a6-178">다음 예제는 사용자 지정 구현에서 <xref:System.Windows.Input.ICommandSource> 샘플.</span><span class="sxs-lookup"><span data-stu-id="408a6-178">The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.</span></span>  
  
 <span data-ttu-id="408a6-179">`this.Command` 이 예제 명령 속성에는 <xref:System.Windows.Input.ICommandSource>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-179">`this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.</span></span>  <span data-ttu-id="408a6-180">이 명령은 캐스팅 된 명령은 null 이면는 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-180">If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="408a6-181">이 경우는 <xref:System.Windows.Input.RoutedCommand>, 하면 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 메서드는 전달는 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 및 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-181">If it is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  <span data-ttu-id="408a6-182">명령이 없는 경우는 <xref:System.Windows.Input.RoutedCommand>로 캐스팅 되는 <xref:System.Windows.Input.ICommand> 및 <xref:System.Windows.Input.ICommand.Execute%2A> 메서드는 전달 된 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-182">If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-csharp[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/ImplementICommandSource/CSharp/CommandSlider.cs#implementicommandexecute)]
 [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ImplementICommandSource/visualbasic/commandslider.vb#implementicommandexecute)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="408a6-183">
            <paramref name="target" />가 <see cref="T:System.Windows.UIElement" /> 또는 <see cref="T:System.Windows.ContentElement" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-183">
              <paramref name="target" /> is not a <see cref="T:System.Windows.UIElement" /> or <see cref="T:System.Windows.ContentElement" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="InputGestures">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputGestureCollection InputGestures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGestureCollection InputGestures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.InputGestures" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputGestures As InputGestureCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputGestureCollection ^ InputGestures { System::Windows::Input::InputGestureCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGestureCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="408a6-184">이 명령과 연결된 <see cref="T:System.Windows.Input.InputGesture" /> 개체의 컬렉션을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-184">Gets the collection of <see cref="T:System.Windows.Input.InputGesture" /> objects that are associated with this command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="408a6-185">입력 제스처입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-185">The input gestures.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="408a6-186">다음 예제에서는 새 <xref:System.Windows.Input.MouseGesture> 에 <xref:System.Windows.Input.RoutedCommand>합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-186">The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#mousebindingaddedcommand)]
 [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#mousebindingaddedcommand)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="408a6-187">명령 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-187">Gets the name of the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="408a6-188">명령 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-188">The name of the command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="408a6-189">이 속성을 참조할 때 사용할 수는 <xref:System.Windows.Input.RoutedCommand> 에서 [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-189">This property can be used when referencing a <xref:System.Windows.Input.RoutedCommand> in [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.RoutedCommand.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="408a6-190">명령에 등록된 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-190">Gets the type that is registered with the command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="408a6-191">명령 소유자의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-191">The type of the command owner.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.CanExecute">
      <MemberSignature Language="C#" Value="bool ICommand.CanExecute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Input.ICommand.CanExecute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CanExecute (parameter As Object) As Boolean Implements ICommand.CanExecute" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Input.ICommand.CanExecute(System::Object ^ parameter) = System::Windows::Input::ICommand::CanExecute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="408a6-192">명령에 사용된 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-192">Data used by the command.</span>
          </span>
          <span data-ttu-id="408a6-193">명령에서 데이터를 전달할 필요가 없으면 이 개체를 <see langword="null" />로 설정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-193">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="408a6-194">이 멤버에 대한 설명은 <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />를 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-194">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="408a6-195">이 명령을 실행할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-195">
              <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="408a6-196">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="408a6-196">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="408a6-197"><xref:System.Windows.Input.RoutedCommand> 인스턴스가 <xref:System.Windows.Input.ICommand> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-197">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.ICommand.Execute">
      <MemberSignature Language="C#" Value="void ICommand.Execute (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.ICommand.Execute(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Execute (parameter As Object) Implements ICommand.Execute" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Input.ICommand.Execute(System::Object ^ parameter) = System::Windows::Input::ICommand::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="408a6-198">명령에 사용된 데이터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-198">Data used by the command.</span>
          </span>
          <span data-ttu-id="408a6-199">명령에서 데이터를 전달할 필요가 없으면 이 개체를 <see langword="null" />로 설정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-199">If the command does not require data to be passed, this object can be set to <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="408a6-200">이 멤버에 대한 설명은 <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />를 참조하십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="408a6-200">For a description of this members, see <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="408a6-201">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="408a6-201">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="408a6-202"><xref:System.Windows.Input.RoutedCommand> 인스턴스가 <xref:System.Windows.Input.ICommand> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="408a6-202">It can be used only when the <xref:System.Windows.Input.RoutedCommand> instance is cast to an <xref:System.Windows.Input.ICommand> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="408a6-203">참고 항목</span><span class="sxs-lookup"><span data-stu-id="408a6-203">See Also</span></span>  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>