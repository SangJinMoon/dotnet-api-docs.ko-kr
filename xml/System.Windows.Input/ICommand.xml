<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ICommand.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ea5eff6a81bd27b0ab5ad70e628f1d59b7ee7f56.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea5eff6a81bd27b0ab5ad70e628f1d59b7ee7f56</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.ICommand">
          <source>Defines a command.</source>
          <target state="translated">명령을 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.RoutedUICommand&gt;</ph> are two implementations of the <ph id="ph3">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface in <ph id="ph4">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.Input.RoutedUICommand&gt;</ph> 의 두 가지 구현 되는 <ph id="ph3">&lt;xref:System.Windows.Input.ICommand&gt;</ph> 인터페이스 <ph id="ph4">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>ICommand in Windows Runtime apps</source>
          <target state="translated">ICommand windows에서 런타임 앱</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface is the code contract for commands that are written in .NET for Windows Runtime apps.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> 인터페이스는 Windows 런타임용.NET에 대 한 응용 프로그램에서 작성 된 명령에 대 한 코드 계약입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML <ph id="ph1">`Button`</ph> and in particular an <ph id="ph2">`AppBarButton`</ph>.</source>
          <target state="translated">이러한 명령은 Windows 런타임 XAML 등의 UI 요소에 대 한 명령 동작을 제공 <ph id="ph1">`Button`</ph> , 특히는 <ph id="ph2">`AppBarButton`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>If you're defining commands for Windows Runtime apps you use basically the same techniques you'd use for defining commands for a .NET app.</source>
          <target state="translated">Windows 런타임 앱에 대 한 명령을 정의 하는 경우 하면 기본적으로 동일한 기술을 사용 명령을.NET 앱에 대 한 정의를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>Implement the command by defining a class that implements <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> and specifically implement the <ph id="ph2">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph> method.</source>
          <target state="translated">명령을 구현 하는 클래스를 정의 하 여 구현 <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> 구체적으로 구현 된 <ph id="ph2">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>XAML for Windows Runtime does not support x<ph id="ph1">`:Static`</ph>, so don't attempt to use the <ph id="ph2">`x:Static`</ph> markup extension if the command is used from Windows Runtime XAML.</source>
          <target state="translated">XAML에 대 한 Windows Runtime에서는 x<ph id="ph1">`:Static`</ph>이므로 사용 하려고 시도 하지 않습니다는 <ph id="ph2">`x:Static`</ph> Windows 런타임 XAML에서 명령을 사용 하는 경우 태그 확장입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>Also, the Windows Runtime does not have any predefined command libraries, so the XAML syntax shown here doesn't really apply for the case where you're implementing the interface and defining the command for Windows Runtime usage.</source>
          <target state="translated">또한는 Windows 런타임에서 없으므로 미리 정의 된 명령으로 실행 되는 라이브러리, 여기에 표시 된 XAML 구문에 대 한 인터페이스를 구현 하 고 Windows 런타임 사용에 대 한 명령 정의 하는 경우 실제로 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>XAML Attribute Usage</source>
          <target state="translated">XAML 특성 사용</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object property<ept id="p1">*</ept>="<bpt id="p2">*</bpt>predefinedCommandName<ept id="p2">*</ept>"/&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object property<ept id="p1">*</ept>="<bpt id="p2">*</bpt>predefinedCommandName<ept id="p2">*</ept>"/&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object property<ept id="p1">*</ept>="<bpt id="p2">*</bpt>predefinedCommandName.predefinedCommandName<ept id="p2">*</ept>"/&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object property<ept id="p1">*</ept>="<bpt id="p2">*</bpt>predefinedCommandName.predefinedCommandName<ept id="p2">*</ept>"/&gt;</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> 또는 -</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object property<ept id="p1">*</ept>="{ <bpt id="p2">*</bpt>customClassName.customCommandName<ept id="p2">*</ept>}"/&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object property<ept id="p1">*</ept>="{ <bpt id="p2">*</bpt>customClassName.customCommandName<ept id="p2">*</ept>}"/&gt;</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>XAML Values</source>
          <target state="translated">XAML 값</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><bpt id="p1">*</bpt>predefinedClassName<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>predefinedClassName<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>One of the predefined command classes.</source>
          <target state="translated">미리 정의 된 명령 클래스 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><bpt id="p1">*</bpt>predefinedCommandName<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>predefinedCommandName<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>One of the predefined commands.</source>
          <target state="translated">미리 정의 된 명령 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><bpt id="p1">*</bpt>customClassName<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>customClassName<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>A custom class that contains the custom command.</source>
          <target state="translated">사용자 지정 명령을 포함 하는 사용자 지정 클래스입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>Custom classes generally require an <ph id="ph1">`xlmns`</ph> prefix mapping; see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.</source>
          <target state="translated">사용자 지정 클래스는 일반적으로 필요는 <ph id="ph1">`xlmns`</ph> 매핑을 앞에; 참조 <bpt id="p1">[</bpt>XAML 네임 스페이스 및 WPF XAML에 대 한 매핑을 Namespace<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source><bpt id="p1">*</bpt>customCommandName<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>customCommandName<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.ICommand">
          <source>A custom command.</source>
          <target state="translated">사용자 지정 명령입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
          <source>Data used by the command.</source>
          <target state="translated">명령에 사용된 데이터입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
          <source>If the command does not require data to be passed, this object can be set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">명령에서 데이터를 전달할 필요가 없으면 이 개체를 <ph id="ph1">&lt;see langword="null" /&gt;</ph>로 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
          <source>Defines the method that determines whether the command can execute in its current state.</source>
          <target state="translated">명령을 현재 상태에서 실행할 수 있는지를 결정하는 메서드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this command can be executed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 명령을 실행할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그러지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
          <source>Typically, a command source calls the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> method when the <ph id="ph2">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event is raised.</source>
          <target state="translated">명령 소스가 호출 하는 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> 메서드 때는 <ph id="ph2">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="E:System.Windows.Input.ICommand.CanExecuteChanged">
          <source>Occurs when changes occur that affect whether or not the command should execute.</source>
          <target state="translated">명령을 실행해야 하는지 여부에 영향을 주는 변경이 발생할 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.ICommand.CanExecuteChanged">
          <source>Normally, a command source calls <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> on the command when this event occurs.</source>
          <target state="translated">명령 소스가 호출 하는 일반적으로 <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> 이 이벤트가 발생할 때 명령입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.ICommand.CanExecuteChanged">
          <source>Normally, if the command cannot execute, the command source disables itself.</source>
          <target state="translated">일반적으로 명령을 실행할 수 없는 경우 명령 소스를 사용할 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ICommand.Execute(System.Object)">
          <source>Data used by the command.</source>
          <target state="translated">명령에 사용된 데이터입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ICommand.Execute(System.Object)">
          <source>If the command does not require data to be passed, this object can be set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">명령에서 데이터를 전달할 필요가 없으면 이 개체를 <ph id="ph1">&lt;see langword="null" /&gt;</ph>로 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.ICommand.Execute(System.Object)">
          <source>Defines the method to be called when the command is invoked.</source>
          <target state="translated">명령이 호출될 때 호출될 메서드를 정의합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>