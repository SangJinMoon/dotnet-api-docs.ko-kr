<Type Name="ManipulationStartingEventArgs" FullName="System.Windows.Input.ManipulationStartingEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ffc25ff0eb8029ed631e68be946a5ab03e21d80f" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48656209" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManipulationStartingEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManipulationStartingEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationStartingEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManipulationStartingEventArgs&#xA;Inherits InputEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationStartingEventArgs sealed : System::Windows::Input::InputEventArgs" />
  <TypeSignature Language="F#" Value="type ManipulationStartingEventArgs = class&#xA;    inherit InputEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b97c8-101"><see cref="E:System.Windows.UIElement.ManipulationStarting" /> 이벤트에 대한 데이터를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-101">Provides data for the <see cref="E:System.Windows.UIElement.ManipulationStarting" />, event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b97c8-102"><xref:System.Windows.Input.ManipulationStartingEventArgs> 조작의 동작을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-102">The <xref:System.Windows.Input.ManipulationStartingEventArgs> enable you to specify the behavior of a manipulation.</span></span>  <span data-ttu-id="b97c8-103">사용 하 여는 <xref:System.Windows.Input.ManipulationStartingEventArgs> 다음을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-103">Use the <xref:System.Windows.Input.ManipulationStartingEventArgs> to do the following:</span></span>  
  
-   <span data-ttu-id="b97c8-104">위치 되어야 하는 요소를 기준으로 설정 하 여는 <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-104">Specify that the position should be relative to an element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span>  
  
-   <span data-ttu-id="b97c8-105">한 손가락 조작 설정 하 여 사용 되는지 여부를 지정 합니다 <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-105">Specify whether single-finger manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="b97c8-106">조작의 유형을 설정 하 여 활성화할 지정 된 <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> 속성을를 <xref:System.Windows.Input.ManipulationModes> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-106">Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.</span></span>  
  
-   <span data-ttu-id="b97c8-107">한 손가락 회전 중심을 설정 하 여 지정 된 <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-107">Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="b97c8-108">설정 하면 조작을 취소할 합니다 <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> 속성을 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-108">Cancel the manipulation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> property to `true`.</span></span>  
  
 <span data-ttu-id="b97c8-109">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-109">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="b97c8-110">조작에 응답 하는 애플리케이션 예제를 보려면 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-110">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationStartingEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Function Cancel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; bool" Usage="manipulationStartingEventArgs.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b97c8-111">조작을 취소하고 터치를 마우스 이벤트로 승격합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-111">Cancels the manipulation and promotes touch to mouse events.</span></span></summary>
        <returns><span data-ttu-id="b97c8-112">터치가 마우스 이벤트로 승격되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-112"><see langword="true" /> if touch was successfully promoted to mouse events, otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b97c8-113">메서드가 성공 하면 기본 <xref:System.Windows.Input.TouchDevice> 마우스 누름 이벤트로 보냅니다 이전 터치 이벤트와 향후 조작 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-113">If the method succeeds, the default <xref:System.Windows.Input.TouchDevice> sends previous touch down events as mouse down events and future manipulation events do not occur.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationStartingEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="manipulationStartingEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSingleTouchEnabled">
      <MemberSignature Language="C#" Value="public bool IsSingleTouchEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleTouchEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSingleTouchEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSingleTouchEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSingleTouchEnabled : bool with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b97c8-114">조작을 한 번에 시작할 수 있는지 여부를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-114">Gets or sets whether one finger can start a manipulation.</span></span></summary>
        <value><span data-ttu-id="b97c8-115">조작을 한 번에 시작할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-115"><see langword="true" /> one finger can start a manipulation; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="b97c8-116">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-116">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b97c8-117">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-117">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="b97c8-118">조작에 응답 하는 애플리케이션 예제를 보려면 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-118">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationContainer">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement ManipulationContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement ManipulationContainer" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property ManipulationContainer As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ ManipulationContainer { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ManipulationContainer : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b97c8-119">모든 조작 이벤트 및 계산이 관련된 컨테이너를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-119">Gets or sets the container that all manipulation events and calculations are relative to.</span></span></summary>
        <value><span data-ttu-id="b97c8-120">모든 조작 이벤트 및 계산이 관련된 컨테이너입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-120">The container that all manipulation events and calculations are relative to.</span></span> <span data-ttu-id="b97c8-121">기본값은 이벤트가 발생한 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-121">The default is the element on which the event occurred.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b97c8-122">설정 하는 위치가 다른 요소를 기준으로 되도록 지정할 수 있습니다는 <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-122">You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property.</span></span> <span data-ttu-id="b97c8-123">예를 들어, 조작 이벤트를 수신 하는 요소의 부모에 상대적인 조작 위치를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-123">For example, you can make the manipulation positions relative to the parent of the element that receives the manipulation events.</span></span> <span data-ttu-id="b97c8-124">합니다 <xref:System.Windows.UIElement.ManipulationStarting> 이벤트 처리기는 설정할 수 있는 유일한 장소를 <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-124">The <xref:System.Windows.UIElement.ManipulationStarting> event handler is the only place in which you can set the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>.</span></span>  
  
 <span data-ttu-id="b97c8-125">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-125">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="b97c8-126">조작에 응답 하는 애플리케이션 예제를 보려면 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-126">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Manipulators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.IManipulator&gt; Manipulators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.Manipulators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Manipulators As IEnumerable(Of IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ Manipulators { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Manipulators : seq&lt;System.Windows.Input.IManipulator&gt;" Usage="System.Windows.Input.ManipulationStartingEventArgs.Manipulators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b97c8-127">조작을 위한 터치 접촉을 나타내는 개체의 컬렉션을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-127">Gets a collection of objects that represents the touch contacts for the manipulation.</span></span></summary>
        <value><span data-ttu-id="b97c8-128">조작을 위한 터치 접촉을 나타내는 개체의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-128">A collection of objects that represents the touch contacts for the manipulation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationModes Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ManipulationModes Mode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As ManipulationModes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationModes Mode { System::Windows::Input::ManipulationModes get(); void set(System::Windows::Input::ManipulationModes value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Windows.Input.ManipulationModes with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationModes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b97c8-129">가능한 조작의 유형을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-129">Gets or sets which types of manipulations are possible.</span></span></summary>
        <value><span data-ttu-id="b97c8-130">열거형 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-130">One of the enumeration values.</span></span> <span data-ttu-id="b97c8-131">기본값은 <see cref="F:System.Windows.Input.ManipulationModes.All" />입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-131">The default is <see cref="F:System.Windows.Input.ManipulationModes.All" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b97c8-132">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-132">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="b97c8-133">조작에 응답 하는 애플리케이션 예제를 보려면 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-133">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="b97c8-134">이 속성은 <see cref="T:System.Windows.Input.ManipulationModes" /> 열거형 값이 아닌 값으로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-134">The property is set to a value other than one or more of the <see cref="T:System.Windows.Input.ManipulationModes" /> enumerations value</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Pivot">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationPivot Pivot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationPivot Pivot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationStartingEventArgs.Pivot" />
      <MemberSignature Language="VB.NET" Value="Public Property Pivot As ManipulationPivot" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationPivot ^ Pivot { System::Windows::Input::ManipulationPivot ^ get(); void set(System::Windows::Input::ManipulationPivot ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pivot : System.Windows.Input.ManipulationPivot with get, set" Usage="System.Windows.Input.ManipulationStartingEventArgs.Pivot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationPivot</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b97c8-135">단일 지점 조작에 대한 피벗을 설명하는 개체를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-135">Gets or sets an object that describes the pivot for a single-point manipulation.</span></span></summary>
        <value><span data-ttu-id="b97c8-136">단일 지점 조작에 대한 피벗을 설명하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-136">An object that describes the pivot for a single-point manipulation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b97c8-137">설정 하는 경우는 <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> 속성 조작은 데이터가 회전 조작 하는 동안 사용자가 한 번 사용 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="b97c8-137">When you set the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> property, the manipulation will contain rotation data when the user uses one finger during a manipulation.</span></span>  <span data-ttu-id="b97c8-138">이 테이블에는 종이 등의 개체를 회전 하려면 한 손가락을 사용할 수 있는 실제 상황을 시뮬레이션 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-138">This is to simulate real-world situations where you can use one finger to rotate an object, such as a piece of paper on a table.</span></span>  <span data-ttu-id="b97c8-139">경우는 <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> 는 `null`, 사용자 회전 시킬 두 손가락을 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-139">If the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A> is `null`, the user must use two fingers to cause rotation.</span></span>  
  
 <span data-ttu-id="b97c8-140">조작에 대 한 자세한 내용은 참조는 [입력 개요](~/docs/framework/wpf/advanced/input-overview.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-140">For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).</span></span>  <span data-ttu-id="b97c8-141">조작에 응답 하는 애플리케이션 예제를 보려면 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-141">For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b97c8-142">다음 예제에서는 이벤트 처리기를 <xref:System.Windows.UIElement.ManipulationStarting> 이벤트 집합과 <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-142">The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationStarting> event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="b97c8-143">이 예제를 테스트 하려면의 단계를 따릅니다 [연습: 만드는 첫 번째 터치 애플리케이션](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md) 4 단계에서 코드를이 코드로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-143">To test this example, follow the steps in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md) and replace the code in step 4 with this code.</span></span>  
  
 [!code-csharp[BasicManipulation#ManipulationPivot](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/reportboundaryfeedbackexample.xaml.cs#manipulationpivot)]
 [!code-vb[BasicManipulation#ManipulationPivot](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/reportboundaryfeedbackexample.xaml.vb#manipulationpivot)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetManipulationParameter">
      <MemberSignature Language="C#" Value="public void SetManipulationParameter (System.Windows.Input.Manipulations.ManipulationParameters2D parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetManipulationParameter(class System.Windows.Input.Manipulations.ManipulationParameters2D parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationStartingEventArgs.SetManipulationParameter(System.Windows.Input.Manipulations.ManipulationParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetManipulationParameter (parameter As ManipulationParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetManipulationParameter(System::Windows::Input::Manipulations::ManipulationParameters2D ^ parameter);" />
      <MemberSignature Language="F#" Value="member this.SetManipulationParameter : System.Windows.Input.Manipulations.ManipulationParameters2D -&gt; unit" Usage="manipulationStartingEventArgs.SetManipulationParameter parameter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Windows.Input.Manipulations.ManipulationParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="b97c8-144">추가할 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-144">The parameter to add.</span></span></param>
        <summary><span data-ttu-id="b97c8-145">지정된 요소의 현재 조작에 매개 변수를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-145">Adds parameters to the current manipulation of the specified element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b97c8-146">일반적으로이 메서드를 호출할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-146">You typically do not need to call this method.</span></span>  <span data-ttu-id="b97c8-147">속성을 사용 합니다 <xref:System.Windows.Input.ManipulationStartingEventArgs> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="b97c8-147">Use the properties on the <xref:System.Windows.Input.ManipulationStartingEventArgs> instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>