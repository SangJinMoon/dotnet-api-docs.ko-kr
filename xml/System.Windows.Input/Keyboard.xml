<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Keyboard.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a7f573a4ba18bded8545efa1eed98e40782d2d79.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7f573a4ba18bded8545efa1eed98e40782d2d79</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.Keyboard">
          <source>Represents the keyboard device.</source>
          <target state="translated">키보드 장치를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class provides keyboard-related events, methods, and properties that provide information regarding the state of the keyboard.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> 키보드 관련 이벤트, 메서드 및 속성 키보드의 상태에 대 한 정보를 제공 하는 클래스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>Each of the events that <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> defines as an attached event is also re-exposed by the base element classes <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> as a new routed event.</source>
          <target state="translated">각 이벤트는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> 정의 연결된 된 이벤트의 클래스에 의해 다시 노출 됩니다 <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> 새 라우트된 이벤트로 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>Generally, it is more convenient to handle keyboard events for an application on <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>, rather than using the <ph id="ph3">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> events.</source>
          <target state="translated">응용 프로그램에 대 한 키보드 이벤트를 처리 하는 편리한 방법을 일반적으로 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>를 사용 하는 대신는 <ph id="ph3">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>For details, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>In order for an element to receive keyboard input, the element must be focusable.</source>
          <target state="translated">키보드 입력을 받는 요소에 대 한 순서로 요소가 포커스를 받을 수 여야 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>Most <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> derived objects are focusable by default.</source>
          <target state="translated">대부분 <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> 파생된 개체는 기본적으로 포커스를 받을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>Otherwise, to make an element focusable, set the <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> property on the base element to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">그렇지 않은 경우 요소가 포커스를 받을 수 설정를 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 속성을 기본 요소의 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>For more information on the base elements, see <bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>.</source>
          <target state="translated">기본 요소에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>기본 요소 개요<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> classes, such as <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, set the default value of <ph id="ph4">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> to <ph id="ph5">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> 와 같은 클래스 <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, 설정의 기본값 <ph id="ph4">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 를 <ph id="ph5">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>Therefore, for these objects to obtain keyboard focus, <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> must be set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">키보드 포커스를 받으려면 이러한 개체에 대 한 따라서 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 로 설정 해야 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>Keyboard focus refers to the object that is receiving keyboard input.</source>
          <target state="translated">키보드 포커스 키보드 입력을 수신 하는 개체를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>The element with keyboard focus has <ph id="ph1">&lt;xref:System.Windows.IInputElement.IsKeyboardFocused%2A&gt;</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">키보드 포커스가 있는 요소에 <ph id="ph1">&lt;xref:System.Windows.IInputElement.IsKeyboardFocused%2A&gt;</ph> 로 설정 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>There can be only one element with keyboard focus on the entire desktop.</source>
          <target state="translated">전체 데스크톱에 키보드 포커스가 있는 요소는 하나만 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>Logical focus refers to the object within a focus scope that has focus.</source>
          <target state="translated">논리 포커스 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>For more information on focus, keyboard focus, and logical focus, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> and <bpt id="p2">[</bpt>Focus Overview<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.</source>
          <target state="translated">논리 포커스 포커스, 키보드 포커스, 등에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> 및 <bpt id="p2">[</bpt>포커스 개요<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>The static members of the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class delegate to the primary <ph id="ph2">&lt;xref:System.Windows.Input.KeyboardDevice&gt;</ph> of the calling thread, so they are not necessarily thread-safe.</source>
          <target state="translated">정적 멤버는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> 주 클래스 대리자 <ph id="ph2">&lt;xref:System.Windows.Input.KeyboardDevice&gt;</ph> 호출 스레드의 되므로 반드시 스레드로부터 안전 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph> method to determine if a key is in the toggled state.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph> 전환 된 상태에서 키가 있는지 확인 하는 메서드.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.Keyboard">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.Key&gt;</ph> passed to <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph> is toggled, the background of a button is changed.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Windows.Input.Key&gt;</ph> 에 전달 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph> 은 설정/해제 단추의 배경을 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddPreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The event handler to be added.</source>
          <target state="translated">추가할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>Adds a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 추가합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>This method provides attached property accessors for code access and <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> attribute processing of the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">이 메서드는 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하 고 <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> 특성 처리는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.ClearFocus">
          <source>Clears focus.</source>
          <target state="translated">포커스를 지웁니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.ClearFocus">
          <source>If focus is within a Win32 window, WPF calls the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.ClearFocus%2A&gt;</ph> method on restoration of focus when a menu is closed.</source>
          <target state="translated">WPF를 호출 하는 Win32 창 내에 포커스가 있는 경우는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.ClearFocus%2A&gt;</ph> 메뉴가 닫힐 때 포커스 복원에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.ClearFocus">
          <source>When leaving menu mode, Win32 focus is returned to the hosted child HWND, and no element has WPF focus.</source>
          <target state="translated">메뉴 모드를 벗어날 때 Win32 포커스는 HWND에 호스트 된 자식도 돌아와 요소에 WPF 포커스 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Keyboard.DefaultRestoreFocusMode">
          <source>Gets or sets the behavior of <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> when restoring focus.</source>
          <target state="translated">포커스를 복원할 때 <ph id="ph1">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph>의 동작을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.DefaultRestoreFocusMode">
          <source>An enumeration value that specifies the behavior of <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> when restoring focus.</source>
          <target state="translated">포커스를 복원할 때 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>의 동작을 지정하는 열거형 값입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.DefaultRestoreFocusMode">
          <source>The default in <ph id="ph1">&lt;see cref="F:System.Windows.Input.RestoreFocusMode.Auto" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see cref="F:System.Windows.Input.RestoreFocusMode.Auto" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>The element on which to set keyboard focus.</source>
          <target state="translated">키보드 포커스를 설정할 요소입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>Sets keyboard focus on the specified element.</source>
          <target state="translated">지정한 요소에 키보드 포커스를 설정합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>The element with keyboard focus.</source>
          <target state="translated">키보드 포커스를 가지는 요소입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>For an element to receive keyboard input, the element must be focusable.</source>
          <target state="translated">키보드 입력을 받는 요소에 대 한 요소가 포커스를 받을 수 여야 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>To make an element focusable, set the <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> property on the base element to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">요소가 포커스를 설정의 <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 속성을 기본 요소의 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>For more information on the base elements, see <bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>.</source>
          <target state="translated">기본 요소에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>기본 요소 개요<ept id="p1">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> classes, such as <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, set the default value of <ph id="ph4">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> to <ph id="ph5">`false`</ph>; therefore, for these objects to obtain keyboard focus, <ph id="ph6">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> must be set to <ph id="ph7">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> 와 같은 클래스 <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, 설정의 기본값 <ph id="ph4">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 를 <ph id="ph5">`false`</ph>키보드 포커스를 받으려면 이러한 개체에 대 한 따라서; <ph id="ph6">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> 로 설정 해야 <ph id="ph7">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>Keyboard focus refers to the object that is receiving keyboard input.</source>
          <target state="translated">키보드 포커스 키보드 입력을 수신 하는 개체를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>The element with keyboard focus has <ph id="ph1">&lt;xref:System.Windows.IInputElement.IsKeyboardFocused%2A&gt;</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">키보드 포커스가 있는 요소에 <ph id="ph1">&lt;xref:System.Windows.IInputElement.IsKeyboardFocused%2A&gt;</ph> 로 설정 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>There can be only one element with keyboard focus on the entire desktop.</source>
          <target state="translated">전체 데스크톱에 키보드 포커스가 있는 요소는 하나만 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>Logical focus refers to the object within a focus scope that has focus.</source>
          <target state="translated">논리 포커스 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>For more information on focus, keyboard focus, and logical focus, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> and <bpt id="p2">[</bpt>Focus Overview<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.</source>
          <target state="translated">논리 포커스 포커스, 키보드 포커스, 등에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> 및 <bpt id="p2">[</bpt>포커스 개요<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>An element with keyboard focus also has logical focus for the focus scope the element belongs to.</source>
          <target state="translated">키보드 포커스가 있는 요소에는 다음과 같은 요소에 속하는 포커스 범위에 대 한 논리 포커스가 있습니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>An element with logical focus may or may not have keyboard focus.</source>
          <target state="translated">논리적 포커스가 있는 요소 수도 있습니다 키보드 포커스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.Focus(System.Windows.IInputElement)">
          <source>The following example shows a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event handler that sets keyboard focus on a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> 에 키보드 포커스를 설정 하는 이벤트 처리기는 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>Gets the element that has keyboard focus.</source>
          <target state="translated">키보드 포커스를 갖는 요소를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>The focused element.</source>
          <target state="translated">포커스가 있는 요소입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>Keyboard focus refers to the object that is receiving keyboard input.</source>
          <target state="translated">키보드 포커스 키보드 입력을 수신 하는 개체를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>The element with keyboard focus has <ph id="ph1">&lt;xref:System.Windows.IInputElement.IsKeyboardFocused%2A&gt;</ph> set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">키보드 포커스가 있는 요소에 <ph id="ph1">&lt;xref:System.Windows.IInputElement.IsKeyboardFocused%2A&gt;</ph> 로 설정 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>There can be only one element with keyboard focus on the entire desktop.</source>
          <target state="translated">전체 데스크톱에 키보드 포커스가 있는 요소는 하나만 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>Logical focus refers to the object within a focus scope that has focus.</source>
          <target state="translated">논리 포커스 포커스가 있는 포커스 범위 내에서 개체를 가리킵니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>For more information on focus, keyboard focus, and logical focus, see <bpt id="p1">[</bpt>Input Overview<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> and <bpt id="p2">[</bpt>Focus Overview<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.</source>
          <target state="translated">논리 포커스 포커스, 키보드 포커스, 등에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>입력 개요<ept id="p1">](~/docs/framework/wpf/advanced/input-overview.md)</ept> 및 <bpt id="p2">[</bpt>포커스 개요<ept id="p2">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>An element with keyboard focus also has logical focus for the focus scope the element belongs to.</source>
          <target state="translated">키보드 포커스가 있는 요소에는 다음과 같은 요소에 속하는 포커스 범위에 대 한 논리 포커스가 있습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>An element with logical focus may or may not have keyboard focus.</source>
          <target state="translated">논리적 포커스가 있는 요소 수도 있습니다 키보드 포커스를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>The following example gets the element with keyboard focus and casts it to a <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 키보드 포커스가 있는 요소를 가져와서으로 캐스팅 한 <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.FocusedElement">
          <source>If the element with keyboard focus is a <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>, the background of the element is changed.</source>
          <target state="translated">키보드 포커스가 있는 요소는 경우는 <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>, 요소의 배경이 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>The specified key.</source>
          <target state="translated">지정된 키입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>Gets the set of key states for the specified key.</source>
          <target state="translated">지정한 키의 키 상태 집합을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyStates" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.KeyStates" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.KeyStates&gt;</ph> is a bit field enumeration; therefore, it is possible for a key to be in multiple states.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.KeyStates&gt;</ph> 비트 필드 열거형입니다. 따라서 여러 상태에 있는 것으로 키에 대 한 같습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>For example, a key could be in the pressed state as well as in the toggled state.</source>
          <target state="translated">예를 들어 키는 눌린 상태로 이면 수 있습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>Use bit comparison operations to determine the exact state or states the key is in.</source>
          <target state="translated">비트 비교 연산자를 사용 하 여 키의 정확한 상태를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class provides a number of static methods which can also be used to obtain key state information.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> 클래스는 다양 한 키 상태 정보를 얻으려면도 사용할 수 있는 정적 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>The methods are: <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph>.</source>
          <target state="translated">메서드는: <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> method to determine if the <ph id="ph2">&lt;xref:System.Windows.Input.Key.Return&gt;</ph> key is in the <ph id="ph3">&lt;xref:System.Windows.Input.KeyStates.Down&gt;</ph> state.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> 여부를 확인 하는 메서드는 <ph id="ph2">&lt;xref:System.Windows.Input.Key.Return&gt;</ph> 키가 있는 <ph id="ph3">&lt;xref:System.Windows.Input.KeyStates.Down&gt;</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>A bit AND operation is used to compare the <ph id="ph1">&lt;xref:System.Windows.Input.KeyStates&gt;</ph> returned from <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Windows.Input.Key.Down&gt;</ph> state.</source>
          <target state="translated">비트 AND 연산을 비교에 사용 되는 <ph id="ph1">&lt;xref:System.Windows.Input.KeyStates&gt;</ph> 에서 반환 된 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Windows.Input.Key.Down&gt;</ph> 상태입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.GetKeyStates(System.Windows.Input.Key)">
          <source>If the key is down, the background of a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is changed.</source>
          <target state="translated">키의 배경을 다운가 <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.GotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.GotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.GotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.GotKeyboardFocusEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)">
          <source>The specified key.</source>
          <target state="translated">지정된 키입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)">
          <source>Determines whether the specified key is pressed.</source>
          <target state="translated">지정한 키가 눌러져 있는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is in the down state; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="key" /&gt;</ph>가 눌러져 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> method can be used to determine the set of states of a specific key.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> 일련의 특정 키의 상태를 확인 하려면 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt;</ph> method to determine the state of a specific key.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt;</ph> 메서드 특정 키의 상태를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Key.Return&gt;</ph> key is passed to the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Key.Return&gt;</ph> 키에 전달 되는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyDown(System.Windows.Input.Key)">
          <source>If the method returns <ph id="ph1">`true`</ph>, the background of a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> is changed.</source>
          <target state="translated">메서드에서 반환 되 면 <ph id="ph1">`true`</ph>, 배경의 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)">
          <source>The specified key.</source>
          <target state="translated">지정된 키입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)">
          <source>Determines whether the specified key is toggled.</source>
          <target state="translated">지정한 키가 전환되었는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is in the toggled state; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="key" /&gt;</ph>가 전환된 상태이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> method can be used to determine the set of states of a specific key.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> 일련의 특정 키의 상태를 확인 하려면 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph> method to determine the state of a specific key.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph> 메서드 특정 키의 상태를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Key.Return&gt;</ph> key is passed to the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Key.Return&gt;</ph> 키에 전달 되는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyToggled(System.Windows.Input.Key)">
          <source>If the method returns <ph id="ph1">`true`</ph>, then the background of a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> is changed.</source>
          <target state="translated">메서드에서 반환 되 면 <ph id="ph1">`true`</ph>의 배경을 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)">
          <source>The key to check.</source>
          <target state="translated">확인할 키입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)">
          <source>Determines whether the specified key is released.</source>
          <target state="translated">지정한 키가 놓여 있는지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> is in the up state; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="key" /&gt;</ph>가 놓여 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> method can be used to determine the set of states of a specific key.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GetKeyStates%2A&gt;</ph> 일련의 특정 키의 상태를 확인 하려면 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt;</ph> method to determine the state of a specific key.</source>
          <target state="translated">사용 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt;</ph> 메서드 특정 키의 상태를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Key.Return&gt;</ph> key is passed to the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.Key.Return&gt;</ph> 키에 전달 되는 <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.IsKeyUp(System.Windows.Input.Key)">
          <source>If the method returns <ph id="ph1">`true`</ph>, then the background of a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> is changed.</source>
          <target state="translated">메서드에서 반환 되 면 <ph id="ph1">`true`</ph>의 배경을 <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> 변경 됩니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocusEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.KeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.KeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.KeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.KeyDownEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.KeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.KeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.KeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.KeyUpEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.LostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.LostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.LostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.LostKeyboardFocusEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Keyboard.Modifiers">
          <source>Gets the set of <ph id="ph1">&lt;see cref="T:System.Windows.Input.ModifierKeys" /&gt;</ph> that are currently pressed.</source>
          <target state="translated">현재 눌러져 있는 <ph id="ph1">&lt;see cref="T:System.Windows.Input.ModifierKeys" /&gt;</ph>의 집합을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.Modifiers">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.ModifierKeys" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.Input.ModifierKeys" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.Modifiers">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph> is a bit field enumeration, so it is possible for multiple modifier keys to be pressed at the same time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph> 비트 필드 열거형 이므로 여러 보조 키를 동시에 누를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.Modifiers">
          <source>Use bit operations to determine the exact set of modifier keys pressed.</source>
          <target state="translated">보조 키의 정확한 집합을 확인 하려면 비트 연산을 사용 눌렀습니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.Modifiers">
          <source>The following example uses a bit AND comparison to determine if the <ph id="ph1">&lt;xref:System.Windows.Input.ModifierKeys.Control&gt;</ph> modifier key is pressed.</source>
          <target state="translated">비트 비교를를 사용 하 여 여부를 확인 하는 다음 예제는 <ph id="ph1">&lt;xref:System.Windows.Input.ModifierKeys.Control&gt;</ph> 보조 키를 누르면 됩니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewGotKeyboardFocusEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocusEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.PreviewKeyDownEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewKeyDownEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewKeyDownEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewKeyDownEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.PreviewKeyUpEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewKeyUpEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewKeyUpEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewKeyUpEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent">
          <source>Identifies the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /&gt;</ph> 연결된 이벤트를 식별합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent">
          <source>Routed event identifiers are created when routed events are registered, and the result is stored as a field on the class that registers the routed event.</source>
          <target state="translated">라우트된 이벤트 식별자는 라우트된 이벤트를 등록 하 고 결과 라우트된 이벤트를 등록 하는 클래스에 필드로 저장 됩니다 때 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent">
          <source>These identifiers contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</source>
          <target state="translated">이러한 식별자는 식별 이름, 소유자 유형, 처리기 형식, 라우팅 전략 및 이벤트 소유자를 추가 하기 위한 유틸리티 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent">
          <source>You often use these identifiers as parameters to event system methods, to identify a particular routed event.</source>
          <target state="translated">대개 이러한 식별자 이벤트 시스템 메서드의 매개 변수로 사용 특정 라우트된 이벤트를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.Keyboard.PrimaryDevice">
          <source>Gets the primary keyboard input device.</source>
          <target state="translated">기본 키보드 입력 장치를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.PrimaryDevice">
          <source>The device.</source>
          <target state="translated">장치입니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.Keyboard.PrimaryDevice">
          <source>This property supports the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.</source>
          <target state="translated">이 속성은 <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> 인프라를 지원하며 코드에서 직접 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyboardInputProviderAcquireFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyDown" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemoveKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.KeyUp" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemoveKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyboardInputProviderAcquireFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyDownHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemovePreviewKeyUpHandler(System.Windows.DependencyObject,System.Windows.Input.KeyEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph> that listens to this event.</source>
          <target state="translated">이 이벤트를 수신 대기하는 <ph id="ph1">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>The event handler to be removed.</source>
          <target state="translated">제거할 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>Removes a handler for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /&gt;</ph> attached event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus" /&gt;</ph> 연결된 이벤트에 대한 처리기를 제거합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.Keyboard.RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject,System.Windows.Input.KeyboardFocusChangedEventHandler)">
          <source>This method provides attached property accessors for code access to the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> attached event.</source>
          <target state="translated">에 대 한 코드 액세스에 대 한 연결 된 속성 접근자를 제공 하는이 메서드는 <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType&gt;</ph> 연결 된 이벤트입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>