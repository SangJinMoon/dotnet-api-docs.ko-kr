<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISymbolWriter.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56e350929abc36f84a74566e71622bef50159cab1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e350929abc36f84a74566e71622bef50159cab1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Diagnostics.SymbolStore.ISymbolWriter">
          <source>Represents a symbol writer for managed code.</source>
          <target state="translated">관리 코드의 기호 작성기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.SymbolStore.ISymbolWriter">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter&gt;</ph> interface provides methods that define documents, sequence points, lexical scopes, and variables.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter&gt;</ph> 인터페이스 문서 "," 시퀀스 위치 "," 어휘 범위 "및" 변수를 정의 하는 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Diagnostics.SymbolStore.ISymbolWriter">
          <source>This interface is the managed counterpart of the <ph id="ph1">`ISymUnmanagedWriter`</ph> interface, which is one of the unmanaged symbol store interfaces that provides an alternative way to read and write debug symbol information.</source>
          <target state="translated">이 인터페이스는 관리 되는 관련은 <ph id="ph1">`ISymUnmanagedWriter`</ph> 인터페이스를 읽고 디버그 기호 정보를 쓸 수 있는 다른 방법을 제공 하는 관리 되지 않는 기호 저장소 인터페이스 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
          <source>Closes <ph id="ph1">&lt;see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /&gt;</ph> and commits the symbols to the symbol store.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /&gt;</ph>를 닫고 기호를 기호 저장소에 커밋합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
          <source>After this call, <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter&gt;</ph> becomes invalid for further updates.</source>
          <target state="translated">이 호출 후 <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter&gt;</ph> 추가로 업데이트할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
          <source>Closes the current method.</source>
          <target state="translated">현재 메서드를 닫습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
          <source>After a method is closed, you cannot define a symbol from within it.</source>
          <target state="translated">메서드를 닫은 후 내에서 기호를 정의할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
          <source>Closes the most recent namespace.</source>
          <target state="translated">최근의 네임스페이스를 닫습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
          <source>The points past the last instruction in the scope.</source>
          <target state="translated">범위 내의 마지막 명령을 벗어난 지점입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
          <source>Closes the current lexical scope.</source>
          <target state="translated">현재 어휘 범위를 닫습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
          <source>After a scope is closed, you cannot define a variable from within it.</source>
          <target state="translated">범위를 닫은 후 내에서 변수를 정의할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The URL that identifies the document.</source>
          <target state="translated">문서를 식별하는 URL입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The document language.</source>
          <target state="translated">문서 언어입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>This parameter can be <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The identity of the vendor for the document language.</source>
          <target state="translated">문서 언어의 공급업체 ID입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>This parameter can be <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The type of the document.</source>
          <target state="translated">문서의 형식입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>This parameter can be <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>.</source>
          <target state="translated">이 매개 변수는 <ph id="ph1">&lt;see cref="F:System.Guid.Empty" /&gt;</ph>일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>Defines a source document.</source>
          <target state="translated">소스 문서를 정의합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
          <source>The object that represents the document.</source>
          <target state="translated">문서를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The metadata type or method token.</source>
          <target state="translated">메타데이터 형식 또는 메서드 토큰입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The field name.</source>
          <target state="translated">필드 이름입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>A bitwise combination of the field attributes.</source>
          <target state="translated">필드 특성의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The field signature.</source>
          <target state="translated">필드 시그니처입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The address types for <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept> 및 <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>의 주소 형식입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The first address for the field specification.</source>
          <target state="translated">필드 사양의 첫 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The second address for the field specification.</source>
          <target state="translated">필드 사양의 두 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The third address for the field specification.</source>
          <target state="translated">필드 사양의 세 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>Defines a field in a type or a global field.</source>
          <target state="translated">형식의 필드나 전역 필드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField%2A&gt;</ph> method defines a single variable that is not within a method by using specified fields in classes, bit fields, and so on.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField%2A&gt;</ph> 메서드 클래스, 비트 필드에 지정 된 필드를 사용 하 여 메서드 내에서 되지 않는 단일 변수를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The global variable name.</source>
          <target state="translated">전역 변수 이름입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>A bitwise combination of the global variable attributes.</source>
          <target state="translated">전역 변수 특성의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The global variable signature.</source>
          <target state="translated">전역 변수 시그니처입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The address types for <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>, and <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept> 및 <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>의 주소 형식입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The first address for the global variable specification.</source>
          <target state="translated">전역 변수 사양의 첫 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The second address for the global variable specification.</source>
          <target state="translated">전역 변수 사양의 두 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The third address for the global variable specification.</source>
          <target state="translated">전역 변수 사양의 세 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>Defines a single global variable.</source>
          <target state="translated">단일 전역 변수를 정의합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The local variable name.</source>
          <target state="translated">지역 변수 이름입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>A bitwise combination of the local variable attributes.</source>
          <target state="translated">지역 변수 특성의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The local variable signature.</source>
          <target state="translated">지역 변수 서명입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The address types for <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>, and <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept> 및 <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>의 주소 형식입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The first address for the local variable specification.</source>
          <target state="translated">지역 변수 사양의 첫 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The second address for the local variable specification.</source>
          <target state="translated">지역 변수 사양의 두 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The third address for the local variable specification.</source>
          <target state="translated">지역 변수 사양의 세 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The start offset for the variable.</source>
          <target state="translated">변수의 시작 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If this parameter is zero, it is ignored and the variable is defined throughout the entire scope.</source>
          <target state="translated">이 매개 변수가 0이면 매개 변수가 무시되고 변수가 전체 범위에 걸쳐 정의됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the parameter is nonzero, the variable falls within the offsets of the current scope.</source>
          <target state="translated">0이 아닌 경우에는 변수가 현재 범위의 오프셋에 포함됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The end offset for the variable.</source>
          <target state="translated">변수의 끝 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If this parameter is zero, it is ignored and the variable is defined throughout the entire scope.</source>
          <target state="translated">이 매개 변수가 0이면 매개 변수가 무시되고 변수가 전체 범위에 걸쳐 정의됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If the parameter is nonzero, the variable falls within the offsets of the current scope.</source>
          <target state="translated">0이 아닌 경우에는 변수가 현재 범위의 오프셋에 포함됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>Defines a single variable in the current lexical scope.</source>
          <target state="translated">현재 어휘 범위에 단일 변수를 정의합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>The <ph id="ph1">`startOffset`</ph> and <ph id="ph2">`endOffset`</ph> parameters are optional.</source>
          <target state="translated"><ph id="ph1">`startOffset`</ph> 및 <ph id="ph2">`endOffset`</ph> 매개 변수는 선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If their value is zero, they are ignored and the variable is defined throughout the entire scope.</source>
          <target state="translated">해당 값이 0 인 경우 무시 됩니다 하 고 변수가 전체 범위에서 정의 됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>If their value is nonzero, the variable falls within the offsets of the current scope.</source>
          <target state="translated">해당 값이 0이 아니고, 현재 범위의 오프셋 내는 변수가 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>You can call <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable%2A&gt;</ph> multiple times for a variable of the same name that occurs multiple times in different offset ranges throughout a scope.</source>
          <target state="translated">호출할 수 있습니다 <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable%2A&gt;</ph> 다른 오프셋된 범위는 범위 전체에서 여러 번 발생 하는 동일한 이름의 변수에 대 한 여러 번입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
          <source>(In this case, start and end offsets must not overlap.)</source>
          <target state="translated">(이 경우 시작 및 종료 오프셋 겹치지 않아야 합니다.)</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The parameter name.</source>
          <target state="translated">매개 변수 이름입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>A bitwise combination of the parameter attributes.</source>
          <target state="translated">매개 변수 특성의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The parameter signature.</source>
          <target state="translated">매개 변수 시그니처입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The address types for <bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept>, and <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>addr1<ept id="p1">&lt;/c&gt;</ept>, <bpt id="p2">&lt;c&gt;</bpt>addr2<ept id="p2">&lt;/c&gt;</ept> 및 <bpt id="p3">&lt;c&gt;</bpt>addr3<ept id="p3">&lt;/c&gt;</ept>의 주소 형식입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The first address for the parameter specification.</source>
          <target state="translated">매개 변수 사양의 첫 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The second address for the parameter specification.</source>
          <target state="translated">매개 변수 사양의 두 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The third address for the parameter specification.</source>
          <target state="translated">매개 변수 사양의 세 번째 주소입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>Defines a single parameter in the current method.</source>
          <target state="translated">현재 메서드의 단일 매개 변수를 정의합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>The type of each parameter is taken from its position within the signature of the method.</source>
          <target state="translated">메서드 시그니처 내의 위치에서 각 매개 변수의 형식을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>If parameters are defined in the metadata for a given method, you do not have to define them again with calls to this method.</source>
          <target state="translated">매개 변수 지정된 메서드에 대 한 메타 데이터에 정의 된 경우이 메서드를 호출 하 여 다시 정의할 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
          <source>Symbol readers need to check for these in the normal metadata first, and then use the symbol store.</source>
          <target state="translated">기호 판독기 일반 메타 데이터에서이 먼저 확인 하 고 다음 기호 저장소를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document object for which the sequence points are being defined.</source>
          <target state="translated">시퀀스 위치를 정의할 문서 개체입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The sequence point offsets measured from the beginning of methods.</source>
          <target state="translated">메서드의 시작 부분에서 측정된 시퀀스 위치 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document lines for the sequence points.</source>
          <target state="translated">시퀀스 위치의 문서 줄입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document positions for the sequence points.</source>
          <target state="translated">시퀀스 위치의 문서 위치입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document end lines for the sequence points.</source>
          <target state="translated">시퀀스 위치의 문서 끝 줄입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The document end positions for the sequence points.</source>
          <target state="translated">시퀀스 위치의 문서 끝 위치입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>Defines a group of sequence points within the current method.</source>
          <target state="translated">현재 메서드 내에서 시퀀스 위치 그룹을 정의합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>Each line and each column defines the start of a statement within a method.</source>
          <target state="translated">각 줄과 각 열은 메서드 내에서 문의 시작을 정의합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The arrays should be sorted in increasing order of offsets.</source>
          <target state="translated">배열은 오프셋의 오름차순으로 정렬 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
          <source>The offset is always the offset from the start of the method, in bytes.</source>
          <target state="translated">오프셋은 항상 바이트에서 메서드의 시작 부분부터 오프셋 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>The metadata emitter interface.</source>
          <target state="translated">메타데이터 내보내기 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>The file name for which the debugging symbols are written.</source>
          <target state="translated">디버깅 기호가 쓰여진 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>Some writers require a file name, and others do not.</source>
          <target state="translated">일부 작성기에는 파일 이름이 필요하지만 다른 작성기에는 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>If a file name is specified for a writer that does not use file names, this parameter is ignored.</source>
          <target state="translated">파일 이름을 사용하지 않는 작성기에 대해 파일 이름이 지정되면 이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> indicates that this is a full rebuild; <ph id="ph2">&lt;see langword="false" /&gt;</ph> indicates that this is an incremental compilation.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>는 전체 다시 빌드를, <ph id="ph2">&lt;see langword="false" /&gt;</ph>는 증분 컴파일을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>Sets the metadata emitter interface to associate with a writer.</source>
          <target state="translated">작성기와 연결할 메타데이터 생성기 인터페이스를 설정합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize%2A&gt;</ph> also sets the output file name where the debugging symbols are written.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize%2A&gt;</ph> 또한 설정 디버깅 기호가 쓰여진 있는 출력 파일 이름입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
          <source>This method can be called only once and must be called before any other writer methods.</source>
          <target state="translated">이 메서드는 한 번만 호출할 수 하며 다른 기록기 메서드보다 먼저 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>The metadata token for the method to be opened.</source>
          <target state="translated">열릴 메서드의 메타데이터 토큰입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>Opens a method to place symbol information into.</source>
          <target state="translated">기호 정보를 배치할 메서드를 엽니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>The specified method becomes the current method for calls to define sequence points, parameters, and lexical scopes.</source>
          <target state="translated">지정 된 메서드 시퀀스 위치, 매개 변수 및 어휘 범위를 정의 하는 호출에 대 한 현재 메서드가 됩니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>There is an implicit lexical scope around the entire method.</source>
          <target state="translated">전체 메서드 주위에 암시적 어휘 범위가 있습니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>Reopening a method that has been previously closed erases any previously defined symbols for the method.</source>
          <target state="translated">이전에 종료 된 메서드를 다시 열면 메서드에 대 한 모든 이전에 정의 된 기호를 지워집니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
          <source>The name of the new namespace.</source>
          <target state="translated">새 네임스페이스의 이름입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
          <source>Opens a new namespace.</source>
          <target state="translated">새 네임스페이스를 엽니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
          <source>Call this method before defining methods or variables that exist within a namespace.</source>
          <target state="translated">메서드 또는 네임 스페이스 내에 있는 변수를 정의 하기 전에이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
          <source>Namespaces can be nested.</source>
          <target state="translated">네임 스페이스를 중첩할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope.</source>
          <target state="translated">메서드의 시작 부분과 어휘 범위의 첫 번째 명령 사이의 오프셋(바이트 단위)입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>Opens a new lexical scope in the current method.</source>
          <target state="translated">현재 메서드에서 새 어휘 범위를 엽니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>An opaque scope identifier that can be used with <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /&gt;</ph> to define the start and end offsets of a scope at a later time.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /&gt;</ph>와 함께 사용하여 차후에 범위의 시작과 끝 오프셋을 정의하는 불투명한 범위 식별자입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>In this case, the offsets passed to <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /&gt;</ph> are ignored.</source>
          <target state="translated">이 경우 <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /&gt;</ph>에 전달된 오프셋은 무시됩니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>A scope identifier is valid only in the current method.</source>
          <target state="translated">범위 식별자는 현재 메서드에서만 유효합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>This scope becomes the new current scope and is pushed onto a stack of scopes.</source>
          <target state="translated">이 새로운 현재 범위가 되 고 범위 스택에 푸시됩니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>Scopes must form a hierarchy.</source>
          <target state="translated">범위 계층을 구성 해야 합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>Siblings are not allowed to overlap.</source>
          <target state="translated">형제 겹칠 수 없습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
          <source>Scope identifiers are valid only in the current method.</source>
          <target state="translated">범위 식별자는 현재 메서드에서만 유효 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The document that contains the starting position.</source>
          <target state="translated">시작 위치가 들어 있는 문서입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The starting line number.</source>
          <target state="translated">시작 줄 번호입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The starting column.</source>
          <target state="translated">시작 열입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The document that contains the ending position.</source>
          <target state="translated">끝 위치가 들어 있는 문서입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The ending line number.</source>
          <target state="translated">끝 줄 번호입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>The ending column number.</source>
          <target state="translated">끝 열 번호입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>Specifies the true start and end of a method within a source file.</source>
          <target state="translated">소스 파일 내에서 메서드의 실제 시작과 끝을 지정합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /&gt;</ph> to specify the extent of a method, independent of the sequence points that exist within the method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /&gt;</ph>를 사용하여 메서드의 범위와 메서드 내에 있는 독립적인 시퀀스 위치를 지정합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
          <source>The identifier of the lexical scope.</source>
          <target state="translated">어휘 범위의 식별자입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
          <source>The byte offset of the beginning of the lexical scope.</source>
          <target state="translated">어휘 범위 시작 부분의 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
          <source>The byte offset of the end of the lexical scope.</source>
          <target state="translated">어휘 범위 끝 부분의 바이트 오프셋입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
          <source>Defines the offset range for the specified lexical scope.</source>
          <target state="translated">지정된 어휘 범위에 대한 오프셋 범위를 정의합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>The metadata token for which the attribute is being defined.</source>
          <target state="translated">특성이 정의되는 메타데이터 토큰입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>The attribute name.</source>
          <target state="translated">특성 이름입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>The attribute value.</source>
          <target state="translated">특성 값입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>Defines an attribute when given the attribute name and the attribute value.</source>
          <target state="translated">특성 이름 및 특성 값이 주어지면 특성을 정의합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute%2A&gt;</ph> method is only associated with symbolic information and is not a metadata custom attribute.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute%2A&gt;</ph> 메서드는 에서만 기호화 된 정보와 관련 된 및은 메타 데이터 사용자 지정 특성이 아닙니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
          <source>A pointer to code that represents the underlying writer.</source>
          <target state="translated">내부 작성기를 나타내는 코드에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
          <source>Sets the underlying <ph id="ph1">&lt;see langword="ISymUnmanagedWriter" /&gt;</ph> (the corresponding unmanaged interface) that a managed <ph id="ph2">&lt;see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /&gt;</ph> uses to emit symbols.</source>
          <target state="translated">관리되는 <ph id="ph2">&lt;see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /&gt;</ph>가 기호를 내보내는 데 사용하는 내부 <ph id="ph1">&lt;see langword="ISymUnmanagedWriter" /&gt;</ph>(관리되지 않는 해당 인터페이스)를 설정합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
          <source>The underlying <ph id="ph1">`ISymUnmanagedWriter`</ph> (the corresponding unmanaged interface) represents a symbol writer for managed code.</source>
          <target state="translated">내부 <ph id="ph1">`ISymUnmanagedWriter`</ph> (해당 관리 되지 않는 인터페이스)는 관리 코드에 대 한 기호 작성기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
          <source>The interface provides methods for defining documents, sequence points, lexical scopes, and variables.</source>
          <target state="translated">인터페이스는 문서 "," 시퀀스 위치 "," 어휘 범위 "및" 변수를 정의 하기 위한 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>The metadata token for the method that is the user entry point.</source>
          <target state="translated">사용자 엔트리 지점인 메서드의 메타데이터 토큰입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>Identifies the user-defined method as the entry point for the current module.</source>
          <target state="translated">사용자 정의 메서드를 현재 모듈의 진입점으로 식별합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
          <source>This is normally your main method, rather than compiler-generated stubs before the main method.</source>
          <target state="translated">이 이름은 일반적으로 컴파일러에서 생성 된 스텁이 main 메서드 전에 보다는 기본 방법입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
          <source>The fully qualified name of the namespace.</source>
          <target state="translated">네임스페이스의 정규화된 이름입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
          <source>Specifies that the given, fully qualified namespace name is used within the open lexical scope.</source>
          <target state="translated">지정된 정규화된 네임스페이스 이름이 열린 어휘 범위 내에서 사용되도록 지정합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
          <source>Closing the current scope prevents this scope from using the namespace.</source>
          <target state="translated">현재 범위를 닫으면이 범위를에서 네임 스페이스를 사용 하 여 수 없습니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
          <source>The namespace remains in use in all scopes that inherit from the current open scope.</source>
          <target state="translated">네임 스페이스는 현재 열린 범위에서 상속 되는 모든 범위에서 사용 중인 상태로 유지 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>