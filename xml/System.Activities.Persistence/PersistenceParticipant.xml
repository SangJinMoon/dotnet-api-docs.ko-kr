<Type Name="PersistenceParticipant" FullName="System.Activities.Persistence.PersistenceParticipant">
  <TypeSignature Language="C#" Value="public abstract class PersistenceParticipant" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceParticipant extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Persistence.PersistenceParticipant" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceParticipant" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceParticipant abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="cef32-101">이 클래스를 사용하면 <see cref="T:System.Activities.WorkflowApplication" /> 및 <see cref="T:System.ServiceModel.WorkflowServiceHost" />가 모두 지속성 프로세스에 참가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-101">This class allows both <see cref="T:System.Activities.WorkflowApplication" /> and <see cref="T:System.ServiceModel.WorkflowServiceHost" /> to participate in persistence process.</span></span> <span data-ttu-id="cef32-102">지속성 참석자는 <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 클래스 또는 <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> 클래스(<see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 클래스의 파생 클래스)에서 파생되며, 추상 메서드를 구현한 후 클래스 인스턴스를 워크플로 인스턴스 확장으로 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-102">A persistence participant derives from the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class or the <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> class (derived class of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class), implements abstract methods, and then add an instance of the class as a workflow instance extension.</span></span> <span data-ttu-id="cef32-103"><see cref="T:System.Activities.WorkflowApplication" /> 및 <see cref="T:System.ServiceModel.WorkflowServiceHost" />는 인스턴스를 지속할 때 이러한 확장을 찾고 적절한 시간에 적절한 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-103">The <see cref="T:System.Activities.WorkflowApplication" /> and <see cref="T:System.ServiceModel.WorkflowServiceHost" /> look for such extensions when persisting an instance and invoke appropriate methods at appropriate times.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cef32-104">호스트는 인스턴스를 지속할 때 다음 단계를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-104">A host executes the following steps (or stages) when persisting an instance:</span></span>  
  
1.  <span data-ttu-id="cef32-105">지속할 값을 수집합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-105">Collects values to be persisted.</span></span>  
  
2.  <span data-ttu-id="cef32-106">단일 구조 값의 필드를 개별 값으로 매핑합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-106">Maps fields of monolithic structured values to individual values.</span></span>  
  
3.  <span data-ttu-id="cef32-107">지속성 공급자에게 <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-107">Issues the <xref:System.Activities.DurableInstancing.SaveWorkflowCommand> to the persistence provider.</span></span>  
  
4.  <span data-ttu-id="cef32-108">지속성 트랜잭션에서 I/O를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-108">Performs I/O under the persistence transaction.</span></span>  
  
 <span data-ttu-id="cef32-109">호스트가 단계를 완료한 후 다음 단계를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-109">A host completes a stage before beginning the next stage.</span></span> <span data-ttu-id="cef32-110">예를 들어, 지속할 때 호스트는 두 번째 단계로 이동하기 전에 모든 지속성 참석자로부터 값을 수집합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-110">For example when persisting, the host collects values from all the persistence participants before moving to the second stage.</span></span> <span data-ttu-id="cef32-111">두 번째 단계에서는 호스트가 첫 번째 단계에서 수집한 모든 값을 두 번째 단계의 모든 지속성 참석자에게 매핑을 위해 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-111">In the second stage, the host provides all the values collected in the first stage to all persistence participants in the second stage for mapping.</span></span> <span data-ttu-id="cef32-112">세 번째 단계에서는 호스트가 <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>를 호출할 때 첫 번째 및 두 번째 단계에서 수집한 모든 값을 지속성 공급자에게 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-112">In the third stage, the host provides all the collected values in the first and second stages to the persistence provider when invoking the <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>.</span></span> <span data-ttu-id="cef32-113">네 번째 단계에서는 호스트가 지속성 트랜잭션에서 수집한 모든 값을 모든 지속성 IO 참석자에게 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-113">Then in the fourth stage, the host provides all the collected values to all the persistence IO participants under the persistence transaction.</span></span>  
  
 <span data-ttu-id="cef32-114">호스트는 지속성 인스턴스를 로드할 때 다음 단계를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-114">A host executes the following stages when loading a persistence instance:</span></span>  
  
1.  <span data-ttu-id="cef32-115">지속성 공급자에게 <xref:System.Activities.DurableInstancing.LoadWorkflowCommand> 및 <xref:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand>를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-115">Issues the <xref:System.Activities.DurableInstancing.LoadWorkflowCommand> and <xref:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand> to the persistence provider.</span></span>  
  
2.  <span data-ttu-id="cef32-116">지속성 트랜잭션에서 I/O를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-116">Performs I/O under the persistence transaction.</span></span>  
  
3.  <span data-ttu-id="cef32-117">로드된 값을 게시합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-117">Publishes the loaded values.</span></span>  
  
 <span data-ttu-id="cef32-118">상위 수준에서 <xref:System.Activities.Persistence.PersistenceParticipant> 클래스로부터 파생된 워크플로 인스턴스 확장은 지속 프로세스의 첫 번째(수집) 및 두 번째(매핑) 단계와 로드 프로세스의 세 번째 단계(게시)에 참가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-118">At the highest level, workflow instance extensions that derive from the <xref:System.Activities.Persistence.PersistenceParticipant> class can participate in the first (Collect) and second (Map) stages of persisting process and the third stage (Publish) of loading process.</span></span>  <span data-ttu-id="cef32-119">PersistenceIOParticipant 클래스로부터 파생된 워크플로 인스턴스 확장은 지속 프로세스의 네 번째 단계와 로드 프로세스의 두 번째 단계(I/O)에 추가로 참가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-119">Workflow instance extensions deriving from the PersistenceIOParticipant class can additionally participate in the fourth stage of the persisting process and the second stage of the loading process (I/O).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cef32-120">다음 코드 샘플에서는 <xref:System.Activities.Persistence.PersistenceParticipant>에서 파생되는 클래스를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-120">The following code sample demonstrates creating a class that derives from <xref:System.Activities.Persistence.PersistenceParticipant>.</span></span> <span data-ttu-id="cef32-121">이 예제에서는 [채용 프로세스](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="cef32-121">This example is from the [Hiring Process](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) sample.</span></span>  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceParticipant();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cef32-122">
          <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> 클래스의 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-122">Initializes an instance of the <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cef32-123">다음 코드 샘플에서는 <xref:System.Activities.Persistence.PersistenceParticipant>에서 파생되는 클래스를 만드는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-123">The following code sample demonstrates creating a class that derives from <xref:System.Activities.Persistence.PersistenceParticipant>.</span></span> <span data-ttu-id="cef32-124">이 예제에서는 [채용 프로세스](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="cef32-124">This example is from the [Hiring Process](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) sample.</span></span>  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectValues">
      <MemberSignature Language="C#" Value="protected virtual void CollectValues (out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CollectValues([out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; readWriteValues, [out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CollectValues (ByRef readWriteValues As IDictionary(Of XName, Object), ByRef writeOnlyValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CollectValues([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % readWriteValues, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % writeOnlyValues);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readWriteValues"><span data-ttu-id="cef32-125">지속할 읽기/쓰기 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-125">The read-write values to be persisted.</span></span></param>
        <param name="writeOnlyValues"><span data-ttu-id="cef32-126">지속할 쓰기 전용 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-126">The write-only values to be persisted.</span></span></param>
        <summary><span data-ttu-id="cef32-127">호스트는 지속할 읽기/쓰기 값과 쓰기 전용 값을 수집하기 위해 사용자 지정 지속성 참석자에 대해 이 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-127">A host invokes this method on a custom persistence participant to collect read-write values and write-only values, to be persisted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cef32-128">호스트는 첫 번째 사전의 읽기/쓰기 값을 <xref:System.Runtime.DurableInstancing.InstanceValue> 컬렉션의 <xref:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData*> 개체로 패키징하고 두 번째 사전의 쓰기 전용 값을 <xref:System.Runtime.DurableInstancing.InstanceValue> 및 <xref:System.Runtime.DurableInstancing.InstanceValueOptions.Optional> 플래그가 설정된 <xref:System.Runtime.DurableInstancing.InstanceValueOptions.WriteOnly> 개체로 패키징합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-128">The host packages read-write values in the first dictionary as <xref:System.Runtime.DurableInstancing.InstanceValue> objects of an <xref:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData*> collection, and packages write-only values in the second dictionary as <xref:System.Runtime.DurableInstancing.InstanceValue> objects with <xref:System.Runtime.DurableInstancing.InstanceValueOptions.Optional> and <xref:System.Runtime.DurableInstancing.InstanceValueOptions.WriteOnly> flags set.</span></span> <span data-ttu-id="cef32-129">자세한 내용은 <xref:System.Runtime.DurableInstancing.InstanceValueOptions>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cef32-129">For more information, see <xref:System.Runtime.DurableInstancing.InstanceValueOptions>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cef32-130">한 지속성 에피소드 내의 모든 지속성 참석자에 대해 <xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A> 구현이 제공하는 각 값에는 고유한 XName이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-130">Each value provided by implementations of <xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A> across all persistence participants within one persistence episode must have a unique XName.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cef32-131">다음 코드 샘플에서는 <xref:System.Activities.Persistence.PersistenceParticipant>에서 파생되는 클래스에 CollectValues를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-131">The following code sample demonstrates using CollectValues in a class that derives from <xref:System.Activities.Persistence.PersistenceParticipant>.</span></span> <span data-ttu-id="cef32-132">이 예제에서는 [지 속성 참가자](~/docs/framework/windows-workflow-foundation/persistence-participants.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="cef32-132">This example is from the [Persistence Participants](~/docs/framework/windows-workflow-foundation/persistence-participants.md) sample.</span></span>  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; MapValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; MapValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MapValues (readWriteValues As IDictionary(Of XName, Object), writeOnlyValues As IDictionary(Of XName, Object)) As IDictionary(Of XName, Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ MapValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ writeOnlyValues);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues"><span data-ttu-id="cef32-133">지속할 읽기/쓰기 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-133">The read-write values to be persisted.</span></span></param>
        <param name="writeOnlyValues"><span data-ttu-id="cef32-134">지속할 쓰기 전용 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-134">The write-only values to be persisted.</span></span></param>
        <summary><span data-ttu-id="cef32-135">호스트는 첫 번째 단계에서 값 수집을 완료한 후 이 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-135">A host invokes this method after it is done with collecting the values in the first stage.</span></span> <span data-ttu-id="cef32-136">호스트는 첫 번째 단계(CollectValues 단계) 중에 모든 지속성 참석자로부터 수집한 값의 읽기 전용 사전 두 개를 매핑을 위해 이 메서드로 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-136">The host forwards two read-only dictionaries of values it collected from all persistence participants during the first stage (CollectValues stage) to this method for mapping.</span></span> <span data-ttu-id="cef32-137">호스트는 이 메서드에 의해 반환된 사전의 값을 쓰기 전용 값 컬렉션에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-137">The host adds values in the dictionary returned by this method to the collection of write-only values.</span></span></summary>
        <returns><span data-ttu-id="cef32-138">지속할 추가 쓰기 전용 값이 포함된 사전입니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-138">A dictionary containing additional write-only values to be persisted.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cef32-139">첫 번째 단계(CollectValues 단계)에서 수집한 모든 값을 포함하는 모든 지속성 참석자에 대해 모든 <xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A> 메서드 구현이 제공하는 각 값에는 고유한 XName이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-139">Each value provided by implementations of all the <xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A> methods across all persistence participants including all the values collected in the first stage (CollectValues stage) must have a unique XName.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cef32-140">다음 코드 샘플에서는 <xref:System.Activities.Persistence.PersistenceParticipant>에서 파생되는 클래스에 MapValues를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-140">The following code sample demonstrates using MapValues in a class that derives from <xref:System.Activities.Persistence.PersistenceParticipant>.</span></span> <span data-ttu-id="cef32-141">이 예제에서는 [기업 구매 프로세스](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="cef32-141">This example is from the [Corporate Purchase Process](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) sample.</span></span>  
  
 [!code-csharp[wfs_PurchaseProcess#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/xmlpersistenceparticipant.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishValues">
      <MemberSignature Language="C#" Value="protected virtual void PublishValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PublishValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PublishValues (readWriteValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PublishValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues"><span data-ttu-id="cef32-142">지속성 저장소에서 로드된 읽기/쓰기 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-142">The read-write values that were loaded from the persistence store.</span></span> <span data-ttu-id="cef32-143">이 사전은 최신 지속성 에피소드에서 지속된 읽기/쓰기 값의 사전에 해당합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-143">This dictionary corresponds to the dictionary of read-write values persisted in the most recent persistence episode.</span></span></param>
        <summary><span data-ttu-id="cef32-144">호스트는 이 메서드를 호출하고 <see cref="P:System.Activities.Persistence.SaveWorkflowCommand.InstanceData" /> 또는 <see cref="T:System.Activities.Persistence.LoadWorkflowCommand" />로 채워진 <see cref="T:System.Activities.Persistence.LoadWorkflowByInstanceKeyCommand" /> 컬렉션에 로드된 모든 값을 사전 매개 변수로 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-144">The host invokes this method and passes all the loaded values in the <see cref="P:System.Activities.Persistence.SaveWorkflowCommand.InstanceData" /> collection (filled by the <see cref="T:System.Activities.Persistence.LoadWorkflowCommand" /> or <see cref="T:System.Activities.Persistence.LoadWorkflowByInstanceKeyCommand" />) as a dictionary parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cef32-145">다음 코드 샘플에서는 <xref:System.Activities.Persistence.PersistenceParticipant>에서 파생되는 클래스에 PublishValues를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cef32-145">The following code sample demonstrates using PublishValues in a class that derives from <xref:System.Activities.Persistence.PersistenceParticipant>.</span></span> <span data-ttu-id="cef32-146">이 예제에서는 [지 속성 참가자](~/docs/framework/windows-workflow-foundation/persistence-participants.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="cef32-146">This example is from the [Persistence Participants](~/docs/framework/windows-workflow-foundation/persistence-participants.md) sample.</span></span>  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>