<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BitVector32.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50187e3d43f8844200daecae41659cd7baaa0b83e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0187e3d43f8844200daecae41659cd7baaa0b83e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.Specialized.BitVector32">
          <source>Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.</source>
          <target state="translated">32비트 메모리에 부울 값과 small 정수를 저장하는 간단한 구조를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is more efficient than <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> for Boolean values and small integers that are used internally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 보다 더 효율적 <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> 부울 값과 내부적으로 사용 되는 작은 정수에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>A <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> can grow indefinitely as needed, but it has the memory and performance overhead that a class instance requires.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> 필요에 따라 무한정 증가할 수 있지만 클래스 인스턴스를 필요로 하는 메모리 및 성능 오버 헤드입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>In contrast, a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> uses only 32 bits.</source>
          <target state="translated">반면, 한 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 만 32 비트를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> structure can be set up to contain either sections for small integers or bit flags for Booleans, but not both.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 구조 섹션에서 작은 정수 또는 부울의 비트 플래그를 포함 하도록 중 하나만 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> is a window into the <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> 는 창에는 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 연속 비트에 지정 된 최대 값을 포함할 수 있는 가장 작은 수로 구성 되며 <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.</source>
          <target state="translated">예를 들어 1의 최대 값을 가진 섹션 5의 최대 값을 가진 섹션은 세 개의 비트로 구성 하는 반면 1 비트만 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>You can create a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.</source>
          <target state="translated">만들 수는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> 1 부울 값을 토대로 최대값이 적용 된 있으므로 저장할 수 있으므로 정수 및 부울 같은 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>Some members can be used for a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections, while other members can be used for one that is set up as bit flags.</source>
          <target state="translated">일부 구성원에 사용할 수는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 로 설정 되어 있는 섹션에 비트 플래그를 설정 하는 하나에 대해 다른 멤버를 사용할 수 있지만 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>For example, the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=nameWithType&gt;</ph> property is the indexer for a <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections, and the <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=nameWithType&gt;</ph> property is the indexer for a <ph id="ph4">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as bit flags.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=nameWithType&gt;</ph> 속성에 대 한 인덱서는는 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 섹션으로 설정 된 및 <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=nameWithType&gt;</ph> 속성은에 대 한 인덱서는 <ph id="ph4">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 에 비트 플래그 설정 된 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.CreateMask%2A&gt;</ph> creates a series of masks that can be used to access individual bits in a <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as bit flags.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.CreateMask%2A&gt;</ph> 일련의 개별 비트를 액세스 하는 데 사용할 수 있는 마스크의 만듭니다는 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 에 비트 플래그 설정 된 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>Using a mask on a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections might cause unexpected results.</source>
          <target state="translated">에 마스크를 사용 하는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 를으로 설정 된 섹션에는 예기치 않은 결과가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>The following code example uses a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> as a collection of bit flags.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 비트 플래그의 컬렉션으로.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Specialized.BitVector32">
          <source>The following code example uses a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> as a collection of sections.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 섹션의 컬렉션으로.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Collections.Specialized.BitVector32">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> structure.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> 구조체의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> structure that contains the data to copy.</source>
          <target state="translated">복사할 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> 구조입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> structure containing the data represented in an existing <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> structure.</source>
          <target state="translated">기존의 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> 구조로 표현되는 데이터가 들어 있는 <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> 구조체의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">이 생성자는 o (1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)">
          <source>An integer representing the data of the new <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>의 데이터를 나타내는 정수입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> structure containing the data represented in an integer.</source>
          <target state="translated">정수로 표현되는 데이터가 들어 있는 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> 구조체의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">이 생성자는 o (1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Collections.Specialized.BitVector32">
          <source>Creates a series of masks that can be used to retrieve individual bits in a <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> that is set up as bit flags.</source>
          <target state="translated">비트 플래그로 설정된 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>에서 개별 비트를 검색하는 데 사용할 수 있는 일련의 마스크를 만듭니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateMask">
          <source>Creates the first mask in a series of masks that can be used to retrieve individual bits in a <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> that is set up as bit flags.</source>
          <target state="translated">비트 플래그로 설정된 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>에서 개별 비트를 검색하는 데 사용할 수 있는 일련의 마스크 중의 첫 번째 마스크를 만듭니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateMask">
          <source>A mask that isolates the first bit flag in the <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>에서 첫 번째 비트 플래그를 격리하는 마스크입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask">
          <source>Use <ph id="ph1">`CreateMask()`</ph> to create the first mask in a series and <ph id="ph2">`CreateMask(int)`</ph> for all subsequent masks.</source>
          <target state="translated">사용 하 여 <ph id="ph1">`CreateMask()`</ph> 계열의 첫 번째 마스크를 만들려고 하 고 <ph id="ph2">`CreateMask(int)`</ph> 모든 후속 마스크에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask">
          <source>Multiple masks can be created to refer to the same bit flag.</source>
          <target state="translated">동일한 비트 플래그를 가리키는 여러 마스크를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask">
          <source>The resulting mask isolates only one bit flag in the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.</source>
          <target state="translated">결과 마스크 격리에 1 비트 플래그는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask">
          <source>You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.</source>
          <target state="translated">비트 OR 연산을 사용 하 여 여러 비트 플래그에 격리 하는 마스크를 만들 마스크를 결합할 수는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask">
          <source>Using a mask on a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections might cause unexpected results.</source>
          <target state="translated">에 마스크를 사용 하는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 를으로 설정 된 섹션에는 예기치 않은 결과가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask">
          <source>The following code example shows how to create and use masks.</source>
          <target state="translated">다음 코드 예제에는 만들고 마스크를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>The mask that indicates the previous bit flag.</source>
          <target state="translated">이전 비트 플래그를 나타내는 마스크입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> that is set up as bit flags.</source>
          <target state="translated">비트 플래그로 설정된 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>에서 개별 비트를 검색하는 데 사용할 수 있는 일련의 마스크 중에서 지정된 마스크 다음에 마스크를 추가로 만듭니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>A mask that isolates the bit flag following the one that <ph id="ph1">&lt;paramref name="previous" /&gt;</ph> points to in <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>에서 <ph id="ph1">&lt;paramref name="previous" /&gt;</ph>가 가리키는 마스크 다음의 비트 플래그를 격리하는 마스크입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>Use <ph id="ph1">`CreateMask()`</ph> to create the first mask in a series and <ph id="ph2">`CreateMask(int)`</ph> for all subsequent masks.</source>
          <target state="translated">사용 하 여 <ph id="ph1">`CreateMask()`</ph> 계열의 첫 번째 마스크를 만들려고 하 고 <ph id="ph2">`CreateMask(int)`</ph> 모든 후속 마스크에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>Multiple masks can be created to refer to the same bit flag.</source>
          <target state="translated">동일한 비트 플래그를 가리키는 여러 마스크를 만들 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>The resulting mask isolates only one bit flag in the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.</source>
          <target state="translated">결과 마스크 격리에 1 비트 플래그는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>You can combine masks using the bitwise OR operation to create a mask that isolates multiple bit flags in the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.</source>
          <target state="translated">비트 OR 연산을 사용 하 여 여러 비트 플래그에 격리 하는 마스크를 만들 마스크를 결합할 수는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>Using a mask on a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections might cause unexpected results.</source>
          <target state="translated">에 마스크를 사용 하는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 를으로 설정 된 섹션에는 예기치 않은 결과가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source>The following code example shows how to create and use masks.</source>
          <target state="translated">다음 코드 예제에는 만들고 마스크를 사용 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="previous" /&gt;</ph> indicates the last bit flag in the <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="previous" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>의 마지막 비트 플래그를 나타내는 경우</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.Collections.Specialized.BitVector32">
          <source>Creates a series of sections that contain small integers.</source>
          <target state="translated">small 정수가 포함되어 있는 일련의 섹션을 만듭니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source>A 16-bit signed integer that specifies the maximum value for the new <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>의 최대값을 지정하는 16비트의 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source>Creates the first <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph> in a series of sections that contain small integers.</source>
          <target state="translated">small 정수가 들어 있는 일련의 섹션에 첫 번째 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>을 만듭니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph> that can hold a number from zero to <ph id="ph2">&lt;paramref name="maxValue" /&gt;</ph>.</source>
          <target state="translated">0부터 <ph id="ph2">&lt;paramref name="maxValue" /&gt;</ph> 범위의 숫자를 보유할 수 있는 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> is a window into the <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> 는 창에는 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 연속 비트에 지정 된 최대 값을 포함할 수 있는 가장 작은 수로 구성 되며 <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source>For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.</source>
          <target state="translated">예를 들어 1의 최대 값을 가진 섹션 5의 최대 값을 가진 섹션은 세 개의 비트로 구성 하는 반면 1 비트만 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source>You can create a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.</source>
          <target state="translated">만들 수는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> 1 부울 값을 토대로 최대값이 적용 된 있으므로 저장할 수 있으므로 정수 및 부울 같은 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source>If sections already exist in the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>, those sections are still accessible; however, overlapping sections might cause unexpected results.</source>
          <target state="translated">섹션이 이미 있는 경우는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>, 해당 섹션에 액세스할 수는; 하지만 섹션 겹치는 않을 예기치 않은 결과입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source>The following code example uses a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> as a collection of sections.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 섹션의 컬렉션으로.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
          <source><ph id="ph1">&lt;paramref name="maxValue" /&gt;</ph> is less than 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="maxValue" /&gt;</ph>가 1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>A 16-bit signed integer that specifies the maximum value for the new <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>의 최대값을 지정하는 16비트의 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>The previous <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph> in the <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>에서 이전의 <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph> following the specified <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph> in a series of sections that contain small integers.</source>
          <target state="translated">small 정수가 들어 있는 일련의 섹션에서 지정된 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph> 다음에 새 <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>을 만듭니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph> that can hold a number from zero to <ph id="ph2">&lt;paramref name="maxValue" /&gt;</ph>.</source>
          <target state="translated">0부터 <ph id="ph2">&lt;paramref name="maxValue" /&gt;</ph> 범위의 숫자를 보유할 수 있는 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> is a window into the <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> 는 창에는 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 연속 비트에 지정 된 최대 값을 포함할 수 있는 가장 작은 수로 구성 되며 <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.</source>
          <target state="translated">예를 들어 1의 최대 값을 가진 섹션 5의 최대 값을 가진 섹션은 세 개의 비트로 구성 하는 반면 1 비트만 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>You can create a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.</source>
          <target state="translated">만들 수는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> 1 부울 값을 토대로 최대값이 적용 된 있으므로 저장할 수 있으므로 정수 및 부울 같은 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>If sections already exist after <ph id="ph1">`previous`</ph> in the <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>, those sections are still accessible; however, overlapping sections might cause unexpected results.</source>
          <target state="translated">다음 섹션에서는 이미 있는 경우 <ph id="ph1">`previous`</ph> 에 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>, 해당 섹션에 액세스할 수는; 그러나 섹션 겹치는 않을 예기치 않은 결과가 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>The following code example uses a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> as a collection of sections.</source>
          <target state="translated">다음 코드 예제에서는 한 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 섹션의 컬렉션으로.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source><ph id="ph1">&lt;paramref name="maxValue" /&gt;</ph> is less than 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="maxValue" /&gt;</ph>가 1보다 작습니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source><ph id="ph1">&lt;paramref name="previous" /&gt;</ph> includes the final bit in the <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="previous" /&gt;</ph>에 <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>의 마지막 비트가 포함되는 경우</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
          <source><ph id="ph1">&lt;paramref name="maxValue" /&gt;</ph> is greater than the highest value that can be represented by the number of bits after <ph id="ph2">&lt;paramref name="previous" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="maxValue" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="previous" /&gt;</ph> 다음에 나오는 비트 수가 나타낼 수 있는 최대값보다 큰 경우</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Collections.Specialized.BitVector32.Data">
          <source>Gets the value of the <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> as an integer.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>의 값을 정수로 가져옵니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Data">
          <source>The value of the <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> as an integer.</source>
          <target state="translated">정수인 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>의 값입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Data">
          <source>To access the value of the individual sections or bit flags, use the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> property.</source>
          <target state="translated">개별 섹션의 값에 액세스 또는 비트 플래그를 사용 하 여 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Data">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">이 속성 값을 검색하는 것은 O(1) 연산입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
          <source>The object to compare with the current <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
          <source>Determines whether the specified object is equal to the <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated">지정된 개체가 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>와 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified object is equal to the <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 개체가 <ph id="ph2">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>와 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
          <source>The object <ph id="ph1">`o`</ph> is considered equal to the <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> if the type of <ph id="ph3">`o`</ph> is compatible with the <ph id="ph4">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> type and if the value of <ph id="ph5">`o`</ph> is equal to the value of <ph id="ph6">&lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;</ph>.</source>
          <target state="translated">개체 <ph id="ph1">`o`</ph> 같은 것으로 간주 되는 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 경우 유형의 <ph id="ph3">`o`</ph> 와 호환 되는 <ph id="ph4">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 형식 경우의 값 <ph id="ph5">`o`</ph> 의 값과 같은 <ph id="ph6">&lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
          <source>The following code example compares a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> with another <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> and with an <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">다음 코드 예제에서는 비교는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 다른 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 와 <ph id="ph3">&lt;xref:System.Int32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.GetHashCode">
          <source>Serves as a hash function for the <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>에 대한 해시 함수로 작용합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.GetHashCode">
          <source>A hash code for the <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>에 대한 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.GetHashCode">
          <source>The hash code of a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is based on the value of <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;</ph>.</source>
          <target state="translated">해시 코드는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 의 값에 따라 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.GetHashCode">
          <source>Two instances of <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> with the same value for <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;</ph> will also generate the same hash code.</source>
          <target state="translated">두 인스턴스 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 에 대 한 동일한 값을 가진 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32.Data%2A&gt;</ph> 동일한 해시 코드를 생성할 수도 됩니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.GetHashCode">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="T:System.Collections.Specialized.BitVector32">
          <source>Gets or sets the value of the specified section or bit flag.</source>
          <target state="translated">지정된 섹션이나 비트 플래그의 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph> that contains the value to get or set.</source>
          <target state="translated">가져오거나 설정할 값이 들어 있는 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>Gets or sets the value stored in the specified <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>에 저장된 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>The value stored in the specified <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32.Section" /&gt;</ph>에 저장된 값입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [Section] property is the indexer for a <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections, and the <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [int] property is the indexer for a <ph id="ph4">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as bit flags.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [섹션] 속성은에 대 한 인덱서는 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 섹션으로 설정 된 및 <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [int] 속성은 인덱스에 대 한는 <ph id="ph4">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 에 비트 플래그 설정 된 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> is a window into the <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> 는 창에는 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 연속 비트에 지정 된 최대 값을 포함할 수 있는 가장 작은 수로 구성 되며 <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.CreateSection%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits.</source>
          <target state="translated">예를 들어 1의 최대 값을 가진 섹션 5의 최대 값을 가진 섹션은 세 개의 비트로 구성 하는 반면 1 비트만 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>You can create a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>.</source>
          <target state="translated">만들 수는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Section&gt;</ph> 1 부울 값을 토대로 최대값이 적용 된 있으므로 저장할 수 있으므로 정수 및 부울 같은 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 언어의 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph>을 기본 속성으로 구현합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. o (1) 작업 이기도 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
          <source>A mask that indicates the bit to get or set.</source>
          <target state="translated">가져오거나 설정할 비트를 나타내는 마스크입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
          <source>Gets or sets the state of the bit flag indicated by the specified mask.</source>
          <target state="translated">지정된 마스크가 나타내는 비트 플래그의 상태를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified bit flag is on (1); otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">지정된 비트 플래그가 (1)에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [Section] property is the indexer for a <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections, and the <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [int] property is the indexer for a <ph id="ph4">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as bit flags.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [섹션] 속성은에 대 한 인덱서는 <ph id="ph2">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 섹션으로 설정 된 및 <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> [int] 속성은 인덱스에 대 한는 <ph id="ph4">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 에 비트 플래그 설정 된 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
          <source>Using this property on a <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> that is set up as sections might cause unexpected results.</source>
          <target state="translated">이 속성을 사용 하면 한 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> 를으로 설정 된 섹션에는 예기치 않은 결과가 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 언어의 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32.Item%2A&gt;</ph>을 기본 속성으로 구현합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">이 속성의 값을 검색 하 하는 것은 o (1) 연산입니다. o (1) 작업 이기도 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="T:System.Collections.Specialized.BitVector32">
          <source>Returns a string that represents a <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>를 나타내는 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.ToString">
          <source>Returns a string that represents the current <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>를 나타내는 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.ToString">
          <source>A string that represents the current <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>을(를) 나타내는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.ToString">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph>를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.ToString">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph> to represent.</source>
          <target state="translated">나타낼 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)">
          <source>Returns a string that represents the specified <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>를 나타내는 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)">
          <source>A string that represents the specified <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Collections.Specialized.BitVector32" /&gt;</ph>를 나타내는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">이 메서드는 o (1) 작업.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>