<Type Name="ListDictionary" FullName="System.Collections.Specialized.ListDictionary">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="262f9be373dfcda4fef3bd78d54db7d154049ab2" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39951505" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListDictionary : System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ListDictionary extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.ListDictionary" />
  <TypeSignature Language="VB.NET" Value="Public Class ListDictionary&#xA;Implements IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListDictionary : System::Collections::IDictionary" />
  <TypeSignature Language="F#" Value="type ListDictionary = class&#xA;    interface IDictionary&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="08d7a-101">단일 연결 목록을 사용하여 <see langword="IDictionary" />를 구현합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="08d7a-101">Implements <see langword="IDictionary" /> using a singly linked list.</span>
      </span>
      <span data-ttu-id="08d7a-102">일반적으로 10개 미만의 항목이 포함된 컬렉션에 사용하는 것이 좋습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="08d7a-102">Recommended for collections that typically include fewer than 10 items.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-103">간단한 구현을 이것이 <xref:System.Collections.IDictionary> 단일 연결된 목록을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-103">This is a simple implementation of <xref:System.Collections.IDictionary> using a singly linked list.</span></span> <span data-ttu-id="08d7a-104">보다 빠르고 작은 것을 <xref:System.Collections.Hashtable> 요소 수가 10 개 이하의 경우.</span><span class="sxs-lookup"><span data-stu-id="08d7a-104">It is smaller and faster than a <xref:System.Collections.Hashtable> if the number of elements is 10 or less.</span></span> <span data-ttu-id="08d7a-105">이렇게 해서는 안 성능이 많은 수의 요소에 대 한 중요 한 경우.</span><span class="sxs-lookup"><span data-stu-id="08d7a-105">This should not be used if performance is important for large numbers of elements.</span></span>  
  
 <span data-ttu-id="08d7a-106">항목을 <xref:System.Collections.Specialized.ListDictionary> 에 순서를 보장 하는 모든; 코드의 현재 순서 사용 하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-106">Items in a <xref:System.Collections.Specialized.ListDictionary> are not in any guaranteed order; code should not depend on the current order.</span></span> <span data-ttu-id="08d7a-107"><xref:System.Collections.Specialized.ListDictionary> 구현 되어 빠른 검색 키로 사용 하 고 항목의 내부 순서 실제 구현에 따라 다릅니다 변경할 수 이후 버전의 제품입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-107">The <xref:System.Collections.Specialized.ListDictionary> is implemented for fast keyed retrieval; the actual internal order of items is implementation-dependent and could change in future versions of the product.</span></span>  
  
 <span data-ttu-id="08d7a-108">멤버와 같은 <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>를 <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, 및 <xref:System.Collections.Specialized.ListDictionary.Contains%2A> o (`n`) 작업을 여기서 `n` 는 <xref:System.Collections.Specialized.ListDictionary.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-108">Members, such as <xref:System.Collections.Specialized.ListDictionary.Item%2A>, <xref:System.Collections.Specialized.ListDictionary.Add%2A>, <xref:System.Collections.Specialized.ListDictionary.Remove%2A>, and <xref:System.Collections.Specialized.ListDictionary.Contains%2A> are O(`n`) operations, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
 <span data-ttu-id="08d7a-109">키 일 수 없습니다 `null`, 값 수입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-109">A key cannot be `null`, but a value can.</span></span>  
  
 <span data-ttu-id="08d7a-110">합니다 `foreach` C# 언어의 (`for each` Visual basic에서) 컬렉션 요소의 형식의 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-110">The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="08d7a-111">각 요소의 이후는 <xref:System.Collections.Specialized.ListDictionary> 는 키/값 쌍은 요소 형식이 키의 형식 또는 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-111">Since each element of the <xref:System.Collections.Specialized.ListDictionary> is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="08d7a-112">요소 형식은 대신 <xref:System.Collections.DictionaryEntry>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-112">Instead, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="08d7a-113">예:</span><span class="sxs-lookup"><span data-stu-id="08d7a-113">For example:</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#3)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#3)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#3)]  
  
 <span data-ttu-id="08d7a-114">`foreach` 문을 열거자를 컬렉션에 쓰는 것부터 읽기 가능 래퍼입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-114">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-115">다양 한 속성 및 메서드는 다음 코드 예제에서는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-115">The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="08d7a-116">공용 정적 (<see langword="Shared" /> Visual Basic의)이 형식의 멤버는 스레드로부터 안전 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="08d7a-116">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="08d7a-117">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="08d7a-117">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="08d7a-118">이 구현은 동기화를 제공 하지 않습니다 스레드로부터 안전한 래퍼를 <see cref="T:System.Collections.Specialized.ListDictionary" />, 파생된 클래스의 자체 동기화 된 버전을 만들 수 있지만 <see cref="T:System.Collections.Specialized.ListDictionary" /> 사용 하 여를 <see cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" /> 속성.</span>
      <span class="sxs-lookup">
        <span data-stu-id="08d7a-118">This implementation does not provide a synchronized (thread safe) wrapper for a <see cref="T:System.Collections.Specialized.ListDictionary" />, but derived classes can create their own synchronized versions of the <see cref="T:System.Collections.Specialized.ListDictionary" /> using the <see cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" /> property.</span>
      </span>
      <span data-ttu-id="08d7a-119">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="08d7a-119">Enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="08d7a-120">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="08d7a-120">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span>
      </span>
      <span data-ttu-id="08d7a-121">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="08d7a-121">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.Hashtable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-122">
            <see cref="T:System.Collections.Specialized.ListDictionary" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-122">Initializes a new instance of the <see cref="T:System.Collections.Specialized.ListDictionary" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListDictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListDictionary();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-123">기본 비교자를 사용하여 빈 <see cref="T:System.Collections.Specialized.ListDictionary" />를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-123">Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the default comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-124">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-124">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="08d7a-125">모든 키를 <xref:System.Collections.Specialized.ListDictionary> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-125">Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique.</span></span> <span data-ttu-id="08d7a-126">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-126">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="08d7a-127">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-127">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-128">다양 한 속성 및 메서드는 다음 코드 예제에서는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-128">The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/listdictionary.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/listdictionary.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/listdictionary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListDictionary (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListDictionary(System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Specialized.ListDictionary : System.Collections.IComparer -&gt; System.Collections.Specialized.ListDictionary" Usage="new System.Collections.Specialized.ListDictionary comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="08d7a-129">두 키가 같은지 여부를 확인하는 데 사용하는 <see cref="T:System.Collections.IComparer" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-129">The <see cref="T:System.Collections.IComparer" /> to use to determine whether two keys are equal.</span>
          </span>
          <span data-ttu-id="08d7a-130">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-130">-or-</span>
          </span>
          <span data-ttu-id="08d7a-131">각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-131">
              <see langword="null" /> to use the default comparer, which is each key's implementation of <see cref="M:System.Object.Equals(System.Object)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="08d7a-132">지정된 비교자를 사용하여 빈 <see cref="T:System.Collections.Specialized.ListDictionary" />를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-132">Creates an empty <see cref="T:System.Collections.Specialized.ListDictionary" /> using the specified comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-133">두 키가 같은지 여부를 결정 하는 비교자입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-133">The comparer determines whether two keys are equal.</span></span> <span data-ttu-id="08d7a-134">모든 키를 <xref:System.Collections.Specialized.ListDictionary> 고유 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-134">Every key in a <xref:System.Collections.Specialized.ListDictionary> must be unique.</span></span> <span data-ttu-id="08d7a-135">기본 비교자는 키의 구현의 <xref:System.Object.Equals%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-135">The default comparer is the key's implementation of <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="08d7a-136">사용자 지정 비교자는 대/소문자 문자열을 사용 하 여 조회를 수행 합니다. 이러한 시나리오를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-136">The custom comparer enables such scenarios as doing lookups with case-insensitive strings.</span></span>  
  
 <span data-ttu-id="08d7a-137">이 생성자는 o (1) 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-137">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit&#xA;override this.Add : obj * obj -&gt; unit" Usage="listDictionary.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="08d7a-138">추가할 엔트리의 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-138">The key of the entry to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="08d7a-139">추가할 엔트리의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-139">The value of the entry to add.</span>
          </span>
          <span data-ttu-id="08d7a-140">값은 <see langword="null" />이 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-140">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="08d7a-141">지정한 키와 값을 가지는 엔트리를 <see cref="T:System.Collections.Specialized.ListDictionary" />에 추가합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-141">Adds an entry with the specified key and value into the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-142">개체의 상태와 해당 해시 코드 값 간에 상관 관계가 있는 일반적으로 쓰일 수 없습니다 키로 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-142">An object that has no correlation between its state and its hash code value should typically not be used as the key.</span></span> <span data-ttu-id="08d7a-143">예를 들어, 문자열 개체는 키로 사용 하 여 StringBuilder 개체 보다 더 나은입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-143">For example, String objects are better than StringBuilder objects for use as keys.</span></span>  
  
 <span data-ttu-id="08d7a-144">사용할 수도 있습니다는 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 는 키의 값을 설정 하 여 새 요소를 추가 하는 속성에 없는 경우는 <xref:System.Collections.Specialized.ListDictionary>예를 들어, `myCollection["myNonexistentKey"] = myValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-144">You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="08d7a-145">그러나 지정된 된 키가 이미 있는 경우는 <xref:System.Collections.Specialized.ListDictionary>설정의 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-145">However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="08d7a-146">반면,는 <xref:System.Collections.Specialized.ListDictionary.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-146">In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="08d7a-147">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Specialized.ListDictionary.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-147">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-148">다음 코드 예제를 추가 하 고에서 요소를 제거는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-148">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="08d7a-149">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-149">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="08d7a-150">같은 키를 가지는 엔트리가 이미 <see cref="T:System.Collections.Specialized.ListDictionary" />에 있는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-150">An entry with the same key already exists in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Item(System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="listDictionary.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-151">
            <see cref="T:System.Collections.Specialized.ListDictionary" />에서 모든 엔트리를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-151">Removes all entries from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-152"><xref:System.Collections.Specialized.ListDictionary.Count%2A> 가 0으로 설정 하 고 컬렉션의 요소에서 다른 개체에 대 한 참조도 해제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-152"><xref:System.Collections.Specialized.ListDictionary.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="08d7a-153">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-153">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-154">다음 코드 예제를 추가 하 고에서 요소를 제거는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-154">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.IDictionary.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="listDictionary.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="08d7a-155">
            <see cref="T:System.Collections.Specialized.ListDictionary" />에서 찾을 수 있는 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-155">The key to locate in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="08d7a-156">
            <see cref="T:System.Collections.Specialized.ListDictionary" />에 특정 키가 들어 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-156">Determines whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="08d7a-157">지정된 키가 있는 항목이 <see cref="T:System.Collections.Specialized.ListDictionary" />에 포함되어 있으면 <see langword="true" />이고, 포함되어 있지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-157">
              <see langword="true" /> if the <see cref="T:System.Collections.Specialized.ListDictionary" /> contains an entry with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-158">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Specialized.ListDictionary.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-158">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
 <span data-ttu-id="08d7a-159">컬렉션의 개체를 사용 하 여이 메서드는.NET Framework 2.0부터 <xref:System.Object.Equals%2A> 하 고 <xref:System.IComparable.CompareTo%2A> 메서드 `key` 결정할 여부를 `item` 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-159">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `key` to determine whether `item` exists.</span></span> <span data-ttu-id="08d7a-160">.NET Framework의 이전 버전을 사용 하 여이 결정 했습니다 합니다 <xref:System.Object.Equals%2A> 및 <xref:System.IComparable.CompareTo%2A> 의 메서드는 `item` 컬렉션의 개체에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-160">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-161">다음 코드 예제에서 요소를 검색 한 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-161">The following code example searches for an element in a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CPP/listdictionary_contains.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/CS/listdictionary_contains.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Contains/VB/listdictionary_contains.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="08d7a-162">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-162">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="listDictionary.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="08d7a-163">
            <see cref="T:System.Array" />에서 복사한 <see cref="T:System.Collections.DictionaryEntry" /> 개체의 대상인 1차원 <see cref="T:System.Collections.Specialized.ListDictionary" /> 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-163">The one-dimensional <see cref="T:System.Array" /> that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
          <span data-ttu-id="08d7a-164">
            <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-164">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="08d7a-165">
            <c>배열</c>에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-165">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="08d7a-166">지정한 인덱스에서 <see cref="T:System.Collections.Specialized.ListDictionary" /> 엔트리를 1차원 <see cref="T:System.Array" /> 인스턴스에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-166">Copies the <see cref="T:System.Collections.Specialized.ListDictionary" /> entries to a one-dimensional <see cref="T:System.Array" /> instance at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-167">요소에 복사 됩니다는 <xref:System.Array> 열거자가 반복 나타나는 순서에서는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-167">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 <span data-ttu-id="08d7a-168">에 있는 키를 복사 하는 <xref:System.Collections.Specialized.ListDictionary>를 사용 하 여 `ListDictionary.Keys.CopyTo`입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-168">To copy only the keys in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="08d7a-169">값만 복사 하는 <xref:System.Collections.Specialized.ListDictionary>를 사용 하 여 `ListDictionary.Values.CopyTo`입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-169">To copy only the values in the <xref:System.Collections.Specialized.ListDictionary>, use `ListDictionary.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="08d7a-170">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Specialized.ListDictionary.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-170">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-171">요소를 복사 하는 다음 코드 예제는 <xref:System.Collections.Specialized.ListDictionary> 를 배열 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-171">The following code example copies the elements of a <xref:System.Collections.Specialized.ListDictionary> to an array.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CPP/listdictionary_copyto.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/CS/listdictionary_copyto.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_CopyTo/VB/listdictionary_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="08d7a-172">
            <paramref name="array" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-172">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="08d7a-173">
            <paramref name="index" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-173">
              <paramref name="index" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="08d7a-174">
            <paramref name="array" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-174">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="08d7a-175">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-175">-or-</span>
          </span>
          <span data-ttu-id="08d7a-176">소스 <see cref="T:System.Collections.Specialized.ListDictionary" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-176">The number of elements in the source <see cref="T:System.Collections.Specialized.ListDictionary" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="08d7a-177">소스 <see cref="T:System.Collections.Specialized.ListDictionary" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-177">The type of the source <see cref="T:System.Collections.Specialized.ListDictionary" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.Specialized.ListDictionary.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Specialized.ListDictionary.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-178">
            <see cref="T:System.Collections.Specialized.ListDictionary" />에 포함된 키/값 쌍의 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-178">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="08d7a-179">
            <see cref="T:System.Collections.Specialized.ListDictionary" />에 포함된 키/값 쌍의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-179">The number of key/value pairs contained in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-180">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-180">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-181">요소를 열거 하는 다음 코드 예제는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-181">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="listDictionary.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-182">
            <see cref="T:System.Collections.IDictionaryEnumerator" />를 반복하는 <see cref="T:System.Collections.Specialized.ListDictionary" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-182">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="08d7a-183">
            <see cref="T:System.Collections.IDictionaryEnumerator" />에 대한 <see cref="T:System.Collections.Specialized.ListDictionary" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-183">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-184">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-184">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="08d7a-185">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-185">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="08d7a-186">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-186">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="08d7a-187">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-187">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="08d7a-188"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-188"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="08d7a-189">이 위치에서 <xref:System.Collections.IEnumerator.Current%2A>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-189">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="08d7a-190">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-190">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="08d7a-191"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-191"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="08d7a-192"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-192"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="08d7a-193">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-193">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="08d7a-194">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-194">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="08d7a-195">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`, <xref:System.Collections.IEnumerator.Current%2A> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-195">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="08d7a-196"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-196">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="08d7a-197">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-197">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="08d7a-198">컬렉션에 대해 변경 내용을 수행하면(예: 요소 추가, 수정 또는 삭제) 열거자는 복구 불가능하게 무효화되고 해당 동작은 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-198">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="08d7a-199">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-199">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="08d7a-200">열거 동안 스레드 보안을 보장하려면 전체 열거 동안 컬렉션을 잠그면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-200">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="08d7a-201">여러 스레드에서 컬렉션에 액세스하여 읽고 쓸 수 있도록 허용하려면 사용자 지정 동기화를 구현해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-201">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="08d7a-202">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-202">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-203">요소를 열거 하는 다음 코드 예제는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-203">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.Specialized.ListDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-204">
            <see cref="T:System.Collections.Specialized.ListDictionary" />의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-204">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="08d7a-205">이 속성은 항상 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-205">This property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-206"><xref:System.Collections.Specialized.ListDictionary> 구현 된 <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> 속성에서 필요 하므로 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="08d7a-206"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsFixedSize%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="08d7a-207">크기가 고정된 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가하거나 제거할 수 없지만 기존 요소는 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-207">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="08d7a-208">크기가 고정된 된 컬렉션은 요소; 추가 및 제거를 방지 하는 래퍼를 지정 된 컬렉션 따라서 기본 컬렉션 추가 또는 제거 요소를 포함 하 여 변경 된 경우 고정 크기 컬렉션에 해당 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-208">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="08d7a-209">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-209">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.Specialized.ListDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-210">
            <see cref="T:System.Collections.Specialized.ListDictionary" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-210">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="08d7a-211">이 속성은 항상 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-211">This property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-212"><xref:System.Collections.Specialized.ListDictionary> 구현 된 <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> 속성에서 필요 하므로 <xref:System.Collections.IDictionary?displayProperty=nameWithType> 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="08d7a-212"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsReadOnly%2A> property because it is required by the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="08d7a-213">읽기 전용 컬렉션에서는 컬렉션을 만든 다음에 요소를 추가, 제거 또는 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-213">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="08d7a-214">읽기 전용 컬렉션은 지정 된 컬렉션을 수정 하지 못하도록 하는 래퍼 컬렉션 따라서 기본 컬렉션이 변경 되 면 읽기 전용 컬렉션에 이러한 내용을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-214">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="08d7a-215">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-215">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.Specialized.ListDictionary.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-216">
            <see cref="T:System.Collections.Specialized.ListDictionary" />가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-216">Gets a value indicating whether the <see cref="T:System.Collections.Specialized.ListDictionary" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="08d7a-217">이 속성은 항상 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-217">This property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-218"><xref:System.Collections.Specialized.ListDictionary> 구현 된 <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> 속성에서 필요 하므로 <xref:System.Collections.ICollection?displayProperty=nameWithType> 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="08d7a-218"><xref:System.Collections.Specialized.ListDictionary> implements the <xref:System.Collections.Specialized.ListDictionary.IsSynchronized%2A> property because it is required by the <xref:System.Collections.ICollection?displayProperty=nameWithType> interface.</span></span>  
  
 <span data-ttu-id="08d7a-219">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.Specialized.ListDictionary> 를 사용 하는 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-219">Derived classes can provide a synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.</span></span>  
  
 <span data-ttu-id="08d7a-220">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-220">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="08d7a-221">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-221">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="08d7a-222">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-222">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-223">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 열거 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-223">The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  
  
 <span data-ttu-id="08d7a-224">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-224">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.ListDictionary.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.Specialized.ListDictionary.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="08d7a-225">가져오거나 설정할 값이 있는 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-225">The key whose value to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="08d7a-226">지정된 키에 연결된 값을 가져오거나 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-226">Gets or sets the value associated with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="08d7a-227">지정한 키와 연결된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-227">The value associated with the specified key.</span>
          </span>
          <span data-ttu-id="08d7a-228">지정한 키가 없는 경우 해당 키를 가져오려고 시도하면 <see langword="null" />이 반환되고 해당 키를 설정하려고 시도하면 지정한 키를 사용하여 새 엔트리가 만들어집니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-228">If the specified key is not found, attempting to get it returns <see langword="null" />, and attempting to set it creates a new entry using the specified key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-229">이 속성은 `myCollection[key]` 구문을 사용하여 컬렉션의 특정 요소에 액세스하는 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-229">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="08d7a-230">사용할 수도 있습니다는 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 는 키의 값을 설정 하 여 새 요소를 추가 하는 속성에 없는 경우는 <xref:System.Collections.Specialized.ListDictionary>예를 들어, `myCollection["myNonexistentKey"] = myValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-230">You can also use the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Specialized.ListDictionary>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="08d7a-231">그러나 지정된 된 키가 이미 있는 경우는 <xref:System.Collections.Specialized.ListDictionary>설정의 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 속성 이전 값을 덮어씁니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-231">However, if the specified key already exists in the <xref:System.Collections.Specialized.ListDictionary>, setting the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="08d7a-232">반면,는 <xref:System.Collections.Specialized.ListDictionary.Add%2A> 메서드는 기존 요소를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-232">In contrast, the <xref:System.Collections.Specialized.ListDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="08d7a-233">키 일 수 없습니다 `null`, 값 수입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-233">A key cannot be `null`, but a value can.</span></span> <span data-ttu-id="08d7a-234">구분 `null` 지정된 된 키를 찾을 수 없으므로 반환 되는 및 `null` 지정된 된 키의 값은 반환 되는 `null`를 사용 하 여는 <xref:System.Collections.Specialized.ListDictionary.Contains%2A> 목록의 키가 존재 하는지 확인 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="08d7a-234">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.Specialized.ListDictionary.Contains%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="08d7a-235">C# 언어 키워드를 사용 하 여 구현 하는 대신 인덱서를 정의 하는 <xref:System.Collections.Specialized.ListDictionary.Item%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-235">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Specialized.ListDictionary.Item%2A> property.</span></span> <span data-ttu-id="08d7a-236">Visual Basic에서는 동일한 인덱싱 기능을 제공하는 <xref:System.Collections.Specialized.ListDictionary.Item%2A>을 기본 속성으로 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-236">Visual Basic implements <xref:System.Collections.Specialized.ListDictionary.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="08d7a-237">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Specialized.ListDictionary.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-237">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-238">요소를 열거 하는 다음 코드 예제는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-238">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="08d7a-239">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-239">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.Specialized.ListDictionary.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-240">
            <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.Specialized.ListDictionary" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-240">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="08d7a-241">
            <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.Specialized.ListDictionary" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-241">An <see cref="T:System.Collections.ICollection" /> containing the keys in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-242">에 있는 값의 순서를 <xref:System.Collections.ICollection> 지정 되지의 연결된 된 값과 같은 순서로 이지만 합니다 <xref:System.Collections.ICollection> 반환한는 <xref:System.Collections.Specialized.ListDictionary.Values%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08d7a-242">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Values%2A> method.</span></span>  
  
 <span data-ttu-id="08d7a-243">반환 된 <xref:System.Collections.ICollection> 정적 복사본이 없는 대신 합니다 <xref:System.Collections.ICollection> 원래에서 키를 다시 참조 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-243">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the keys in the original <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="08d7a-244">따라서를 변경 합니다 <xref:System.Collections.Specialized.ListDictionary> 계속에 반영 됩니다는 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-244">Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="08d7a-245">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-245">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-246">요소를 열거 하는 다음 코드 예제는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-246">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Values" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="listDictionary.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="08d7a-247">제거할 엔트리의 키입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-247">The key of the entry to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="08d7a-248">
            <see cref="T:System.Collections.Specialized.ListDictionary" />에서 지정한 키를 가지는 엔트리를 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-248">Removes the entry with the specified key from the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-249">경우는 <xref:System.Collections.Specialized.ListDictionary> 지정된 된 키를 사용 하 여 요소를 포함 하지 않습니다는 <xref:System.Collections.Specialized.ListDictionary> 그대로 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-249">If the <xref:System.Collections.Specialized.ListDictionary> does not contain an element with the specified key, the <xref:System.Collections.Specialized.ListDictionary> remains unchanged.</span></span> <span data-ttu-id="08d7a-250">예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-250">No exception is thrown.</span></span>  
  
 <span data-ttu-id="08d7a-251">이 메서드는 O (`n`) 작업, 여기서 `n` 는 <xref:System.Collections.Specialized.ListDictionary.Count%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-251">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Specialized.ListDictionary.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-252">다음 코드 예제를 추가 하 고에서 요소를 제거는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-252">The following code example adds to and removes elements from a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CPP/listdictionary_addremove.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/CS/listdictionary_addremove.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_AddRemove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_AddRemove/VB/listdictionary_addremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="08d7a-253">
            <paramref name="key" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-253">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.IDictionary.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.Specialized.ListDictionary.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-254">
            <see cref="T:System.Collections.Specialized.ListDictionary" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-254">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="08d7a-255">
            <see cref="T:System.Collections.Specialized.ListDictionary" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-255">An object that can be used to synchronize access to the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-256">파생된 클래스의 동기화 된 버전을 제공할 수 있습니다 합니다 <xref:System.Collections.Specialized.ListDictionary> 를 사용 하는 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-256">Derived classes can provide their own synchronized version of the <xref:System.Collections.Specialized.ListDictionary> using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> property.</span></span> <span data-ttu-id="08d7a-257">동기화 하는 코드에서 작업을 수행 해야 합니다 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 의 합니다 <xref:System.Collections.Specialized.ListDictionary>에서 직접는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-257">The synchronizing code must perform operations on the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> of the <xref:System.Collections.Specialized.ListDictionary>, not directly on the <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="08d7a-258">이렇게 하면 다른 개체에서 파생되는 컬렉션에 대해 적절한 작업이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-258">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="08d7a-259">특히, 동시에 수정할 수 있는 다른 스레드와 적절 한 동기화를 유지 관리는 <xref:System.Collections.Specialized.ListDictionary> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-259">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.Specialized.ListDictionary> object.</span></span>  
  
 <span data-ttu-id="08d7a-260">컬렉션 전체를 열거하는 프로시저는 기본적으로 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-260">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="08d7a-261">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-261">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="08d7a-262">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-262">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-263">다음 코드 예제에 사용 하 여 컬렉션을 잠그는 방법을 보여 줍니다는 <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> 열거 하는 중입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-263">The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.ListDictionary.SyncRoot%2A> during the entire enumeration.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CPP/source2.cpp#2)]
 [!code-csharp[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/CS/source2.cs#2)]
 [!code-vb[System.Collections.Specialized.ListDictionary2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary2/VB/source2.vb#2)]  
  
 <span data-ttu-id="08d7a-264">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-264">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.ListDictionary.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-265">
            <see cref="T:System.Collections.IEnumerator" />를 반복하는 <see cref="T:System.Collections.Specialized.ListDictionary" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-265">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="08d7a-266">
            <see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.Specialized.ListDictionary" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-266">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-267">@FSHO1@C# 언어의 `foreach` 문(Visual Basic의 경우 `for each`)은 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-267">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="08d7a-268">그러므로 열거자를 직접 조작하는 대신 `foreach`를 사용하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-268">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="08d7a-269">열거자를 사용하여 컬렉션의 데이터를 읽을 수는 있지만 내부 컬렉션을 수정할 수는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-269">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="08d7a-270">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-270">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="08d7a-271"><xref:System.Collections.IEnumerator.Reset%2A>을 실행하면 열거자가 이 위치로 복원됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-271"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="08d7a-272">이 위치에서, 호출 <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-272">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="08d7a-273">따라서 <xref:System.Collections.IEnumerator.MoveNext%2A>의 값을 읽기 전에 <xref:System.Collections.IEnumerator.Current%2A>를 호출하여 열거자를 해당 컬렉션의 첫 번째 요소로 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-273">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="08d7a-274"><xref:System.Collections.IEnumerator.Current%2A>에서는 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A>이 호출될 때까지 동일한 개체를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-274"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="08d7a-275"><xref:System.Collections.IEnumerator.MoveNext%2A>는 <xref:System.Collections.IEnumerator.Current%2A>를 다음 요소로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-275"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="08d7a-276">경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 열거자를 컬렉션의 끝 컬렉션의 마지막 요소 뒤에 배치 되는 전달 하 고 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-276">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="08d7a-277">열거자가 있는 경우이 위치에 대 한 후속 호출은 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-277">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="08d7a-278">마지막으로 호출 하는 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 반환 `false`호출, <xref:System.Collections.IEnumerator.Current%2A> 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-278">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="08d7a-279"><xref:System.Collections.IEnumerator.Current%2A>를 컬렉션의 첫째 요소에 다시 설정하려면 <xref:System.Collections.IEnumerator.Reset%2A>을 호출한 뒤 <xref:System.Collections.IEnumerator.MoveNext%2A>를 호출해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-279">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="08d7a-280">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-280">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="08d7a-281">변경에 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제, 열거자가 복구할 유효 하지 않으며을 다음에 호출할 <xref:System.Collections.IEnumerator.MoveNext%2A> 또는 <xref:System.Collections.IEnumerator.Reset%2A> throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-281">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="08d7a-282">컬렉션 사이 수정 된 경우 <xref:System.Collections.IEnumerator.MoveNext%2A> 하 고 <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> 열거자가 이미 무효화 된 경우에로 설정 되어 있는 요소를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-282">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="08d7a-283">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-283">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="08d7a-284">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-284">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="08d7a-285">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-285">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="08d7a-286">이 방법은 O(1) 작업에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-286">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-287">요소를 열거 하는 다음 코드 예제는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-287">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.ListDictionary.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.Specialized.ListDictionary.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="08d7a-288">
            <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.Specialized.ListDictionary" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-288">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="08d7a-289">
            <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.Specialized.ListDictionary" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="08d7a-289">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.Specialized.ListDictionary" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08d7a-290">에 있는 값의 순서를 <xref:System.Collections.ICollection> 지정 되지 동일한 순서에 연결된 된 키와 이지만 합니다 <xref:System.Collections.ICollection> 반환한를 <xref:System.Collections.Specialized.ListDictionary.Keys%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08d7a-290">The order of the values in the <xref:System.Collections.ICollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.Specialized.ListDictionary.Keys%2A> method.</span></span>  
  
 <span data-ttu-id="08d7a-291">반환 된 <xref:System.Collections.ICollection> 정적 복사본이 없는 대신 합니다 <xref:System.Collections.ICollection> 원래에서 값을 다시 참조 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-291">The returned <xref:System.Collections.ICollection> is not a static copy; instead, the <xref:System.Collections.ICollection> refers back to the values in the original <xref:System.Collections.Specialized.ListDictionary>.</span></span> <span data-ttu-id="08d7a-292">따라서를 변경 합니다 <xref:System.Collections.Specialized.ListDictionary> 계속에 반영 됩니다는 <xref:System.Collections.ICollection>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-292">Therefore, changes to the <xref:System.Collections.Specialized.ListDictionary> continue to be reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="08d7a-293">이 속성 값을 검색하는 것은 O(1) 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-293">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08d7a-294">요소를 열거 하는 다음 코드 예제는 <xref:System.Collections.Specialized.ListDictionary>합니다.</span><span class="sxs-lookup"><span data-stu-id="08d7a-294">The following code example enumerates the elements of a <xref:System.Collections.Specialized.ListDictionary>.</span></span>  
  
 [!code-cpp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CPP/listdictionary_enumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/CS/listdictionary_enumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.ListDictionary_Enumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.ListDictionary_Enumerator/VB/listdictionary_enumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Specialized.ListDictionary.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>