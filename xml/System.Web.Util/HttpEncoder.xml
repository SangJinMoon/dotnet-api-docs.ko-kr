<Type Name="HttpEncoder" FullName="System.Web.Util.HttpEncoder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e35efb72622eb52376091974f022482dc3d28df" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30610067" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpEncoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.HttpEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>인코딩 및 디코딩 논리를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클래스에는 인코딩 및 디코딩와 같은 클래스의 메서드로 사용 되는 논리가 포함 되어 <xref:System.Web.HttpUtility>, <xref:System.Web.HttpServerUtility>, 및 <xref:System.Net.HttpResponseHeader>합니다.  
  
 상속할 수 있습니다는 <xref:System.Web.Util.HttpEncoder> 클래스 및 기본 인코딩 및 디코딩 ASP.NET의 동작을 사용자 지정 하는 동작을 재정의 합니다. 다음 설정의 <xref:System.Web.Configuration.HttpRuntimeSection.EncoderType%2A> 의 속성은 <xref:System.Web.Configuration.HttpRuntimeSection> 사용자 지정 클래스를 구성 하는 클래스입니다.  
  
 인코딩 및 디코딩하는 대 한 사용자 지정 클래스에서 파생 <xref:System.Web.Util.HttpEncoder> 기본 제공 ASP.NET 인코딩 및 디코딩 동작을 재정의할 수 또는 변경에만 가지 설정을 선택 합니다.  
  
 에 대 한 사용자 지정 인코딩 형식을 대체 하거나 다음 인코딩 동작을 보완 하기 위해 ASP.NET에서 구성할 수 있습니다.  
  
-   HTML 인코딩  
  
-   HTML 특성 인코딩입니다.  
  
-   URL 인코딩  
  
-   URL 경로 인코딩  
  
-   HTTP 헤더 이름 및 헤더 값 인코딩  
  
 기본적으로 ASP.NET 응용 프로그램 사용 하도록 구성 되는 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 인코딩 모든 출력에 대해를 입력 합니다.  
  
 다음 예제에서는 응용 프로그램 수준 Web.config 파일 표시에서 방법을 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 유형이 ASP.NET 응용 프로그램에 대해 설정 되어:  
  
 `<httpRuntime requestValidationMode="4.5" encoderType="System.Web.Security.AntiXss.AntiXssEncoder, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>`  
  
 예제에서는 구성 설정의 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 있는 모든 클래스는 응용 프로그램에서 인코딩 출력 합니다. 자세한 내용은 참조는 <xref:System.Web.Security.AntiXss.AntiXssEncoder> 클래스 개요입니다.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>사용자 지정 인코더 클래스를 만들고 기본 클래스의 기본 메서드를 재정의 하는 경우 파생 된 인코더 재정의 된 메서드 중 하나에서 예외를 throw 할 수 있습니다. 그러나 다음과 같은 경우에 이러한 예외를 throw 시킬 수 있는 ASP.NET에서 예기치 않은 동작이:  
  
-   ASP.NET 사용자 지정 인코더에서 throw 된 처리 되지 않은 예외로 인해 발생 하는 오류 페이지를 렌더링 하는 경우 ASP.NET은 사용자 지정 인코더를 호출 하 여 오류 출력을 인코딩하는 데 시도 하지 않습니다. 오류 조건 재귀를 방지합니다.  
  
-   IIS에 ASP.NET HTTP 헤더 보낼 때 ASP.NET는 처리 되지 않은 예외에 대 한 제공 하지 않습니다. 따라서 (이 페이지를 표시할 수를 허용 하는 구성 설정) 하는 경우 표준 ASP.NET 오류 페이지가 렌더링 됩니다.</para>
    </block>
    <altmember cref="T:System.Web.HttpUtility" />
    <altmember cref="T:System.Web.HttpServerUtility" />
    <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
    <altmember cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.Util.HttpEncoder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Current { System::Web::Util::HttpEncoder ^ get(); void set(System::Web::Util::HttpEncoder ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>응용 프로그램에서 사용될 <see cref="T:System.Web.Util.HttpEncoder" /> 형식을 가져오거나 설정합니다.</summary>
        <value>사용될 인코더/디코더 형식에 대한 참조입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 파생 된 경우 <xref:System.Web.Util.HttpEncoder> 형식이 구성 파일에 지정 되어는 <xref:System.Web.Util.HttpEncoder.Current%2A> 속성 사용자 지정 형식에 대 한 참조를 반환 합니다. 그러나 없는 사용자 지정 인코더를 사용 하 고, 속성은 기본 ASP.NET에 대 한 참조 반환 <xref:System.Web.Util.HttpEncoder> 인스턴스.  
  
 <xref:System.Web.Util.HttpEncoder.Current%2A> 속성은 스레드로부터 안전 하지 않습니다. 응용 프로그램의 경우에이 속성을 설정 `Application_Start` 메서드를 때문에 `Application_Start` 는 단일 스레드를 실행 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">이 속성에 할당되는 인코더 인스턴스는 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Web.Util.HttpEncoder Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.HttpEncoder Default" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.HttpEncoder.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As HttpEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::HttpEncoder ^ Default { System::Web::Util::HttpEncoder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.HttpEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET의 기본 인코더에 대한 참조를 가져옵니다.</summary>
        <value>기본 인코더에 대한 참조입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 일반적인 인코딩 문제 기본 ASP.NET은 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> 동작 공간 "+" 문자가 변환 합니다. 지금까지 "+" 문자를 보다 읽기 쉬운 방식으로 URL에서 공백 문자 인코딩을 위한 인터넷 규약 되었습니다. 그러나 표준에 따르면 공백 문자 할 대신 "%20"로 인코딩할 수는 "+" 문자입니다. ASP.NET를 사용 하면 더 많은 표준 규격 인코딩 알고리즘 구현 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderNameValueEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HeaderNameValueEncode (string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HeaderNameValueEncode(string headerName, string headerValue, [out] string&amp; encodedHeaderName, [out] string&amp; encodedHeaderValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HeaderNameValueEncode(System.String,System.String,System.String@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HeaderNameValueEncode (headerName As String, headerValue As String, ByRef encodedHeaderName As String, ByRef encodedHeaderValue As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HeaderNameValueEncode(System::String ^ headerName, System::String ^ headerValue, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderName, [Runtime::InteropServices::Out] System::String ^ % encodedHeaderValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="headerValue" Type="System.String" />
        <Parameter Name="encodedHeaderName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="encodedHeaderValue" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="headerName">인코딩할 HTTP 헤더 이름입니다.</param>
        <param name="headerValue">인코딩할 HTTP 헤더 값입니다.</param>
        <param name="encodedHeaderName">이 메서드가 반환될 때 HTTP 헤더에 사용할 인코딩된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <param name="encodedHeaderValue">이 메서드가 반환될 때 HTTP 헤더에 사용할 인코딩된 값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>HTTP 헤더로 사용할 수 있는 문자열로 헤더 이름 및 값을 인코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> 메서드는 입력된 문자열에서는 `headerName` 및 `headerValue` 매개 변수를으로 인코딩합니다. 인코딩된 값은 출력 매개 변수로 반환 됩니다.  
  
 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> 메서드는 다음과 같은 논리 헤더 이름 및 값을 인코딩하는 데 사용 하 여:  
  
-   유니코드 값이 9, ASCII 문자를 제외 하 고 ASCII 문자 32 보다 작은 모든 문자는 URL로 인코딩된 형식으로 `%NN` 여기서는 `N` 문자 16 진수 값을 나타냅니다.  
  
-   ASCII 문자 9 (가로 탭 문자) URL로 인코딩되지 않습니다.  
  
-   ASCII 문자 127 바이트로 인코딩됩니다 `%7F`합니다.  
  
-   다른 모든 문자는 인코딩되지 않습니다.  
  
    > [!NOTE]
    >  이 메서드는 유니코드 값에 사용할 수 있지만 ASCII 범위에서 값에 대 한 일반적으로 사용 됩니다.  
  
 기본 구현에서 <xref:System.Web.Util.HttpEncoder.HeaderNameValueEncode%2A> 의 값을 반환 하는 메서드 `headerValue` 에 `encodedHeaderValue` 경우 `headerValue` 은 `null` 은 빈 문자열 또는 합니다. 기본 구현은의 값을 반환 하는 마찬가지로, `headerName` 에 `encodedHeaderName` 경우 `headerName` 은 `null` 이거나 빈 문자열입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">인코딩할 문자열입니다.</param>
        <param name="output">인코딩된 값을 쓸 텍스트 기록기입니다.</param>
        <summary>들어오는 값을 작은 따옴표나 큰따옴표로 구분된 HTML 특성에 삽입할 수 있는 문자열로 인코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> 메서드는 표준 HTML 엔터티를 사용 하 여 문자를 인코딩합니다. 예를 들어는 `<` (왼쪽된 꺾쇠 괄호)으로 인코딩된 `&lt;` 및 `\` (백슬래시)으로 인코딩된 `&#92;`합니다.  
  
 안전 하 게 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A> 작은따옴표 및 큰따옴표가 특성 내에서. 값에 포함 되어야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlDecode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlDecode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlDecode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlDecode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">디코딩할 문자열입니다.</param>
        <param name="output">디코딩된 값을 쓸 텍스트 기록기입니다.</param>
        <summary>HTML로 인코딩된 문자열에서 값을 디코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 ASP.NET 디코딩 논리가 디코딩할 수 있는 문자 시퀀스를 보여 줍니다.  
  
|문자 시퀀스|규칙|  
|------------------------|----------|  
|`&#NNN;` (ASCII 문자에 대 한 10 진수 코드)입니다.|지정 된 ASCII 문자로 디코딩됩니다. 문자 시퀀스는 # 문자 뒤 첫째 자리에서 시작 하 고 세미콜론 마칩니다.|  
|`&#xZZ;` (ASCII 문자에 대 한 16 진수 코드)입니다.|지정 된 ASCII 문자로 디코딩됩니다. 인코딩된 양식 대신 10 진수 값을 16 진수 문자를 사용 하 여 문자를 지정 합니다. 문자 시퀀스는 # 문자 뒤 첫째 자리에서 시작 하 고 세미콜론 마칩니다.|  
|명명 된 HTML 엔터티입니다.|해당 ASCII 문자로 디코딩됩니다.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">인코딩할 문자열입니다.</param>
        <param name="output">인코딩된 값을 쓸 텍스트 기록기입니다.</param>
        <summary>문자열을 HTML로 인코딩된 문자열로 인코딩합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 ASP.NET 인코딩 논리가 디코딩할 수 있는 문자 시퀀스를 보여 줍니다.  
  
|문자|같이 인코딩됩니다.|  
|---------------|----------------|  
|`<` (왼쪽된 꺾쇠 괄호)|`&lt;`|  
|`>` (오른쪽 꺾쇠 괄호)|`&gt;`|  
|`"` (큰따옴표)|`&quot;`|  
|`&` (앰퍼샌드)|`&amp;`|  
|`\` (백슬래시)|`&#92;`|  
|160에서 255 사이의 ASCII 문자|`&#NNN;`여기서 `NNN` 는 3 자리 10 진수 문자 코드|  
  
 재정의 하는 경우는 <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> 메서드를 작은따옴표 또는 큰따옴표로 묶은 HTML 특성 내에서 안전 하 게 보호 되는 출력을 생성 해야 합니다. 여기서 태그와 코드 결합할 수 있습니다와 같은 Razor 엔진에 의해 구문 분석에이 노드 \<attr 태그 = "@value" >. 또한는 @ 연산자는 컨텍스트 인식 하지 Razor 엔진에서 처리 될 때 따라서 호출 <xref:System.Web.Util.HttpEncoder.HtmlEncode%2A> 대신 <xref:System.Web.Util.HttpEncoder.HtmlAttributeEncode%2A>합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="output" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="JavaScriptStringEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string JavaScriptStringEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string JavaScriptStringEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.JavaScriptStringEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function JavaScriptStringEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ JavaScriptStringEncode(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">인코딩할 문자열입니다.</param>
        <summary>문자열을 인코딩합니다.</summary>
        <returns>인코딩된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 URL 인코딩은 되도록 모든 브라우저에서 URL 문자열의에서 텍스트를 올바르게 전달할 합니다. 물음표 (?), 앰퍼샌드 (&), 슬래시 (/) 및 공간 등의 문자 잘리거나 일부 브라우저 수 있습니다. 따라서 이러한 문자를 인코딩해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal virtual byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">인코딩할 바이트 배열입니다.</param>
        <param name="offset">인코딩을 시작할 <c>바이트</c> 배열의 위치입니다.</param>
        <param name="count">인코딩할 <c>바이트</c> 배열의 항목 수입니다.</param>
        <summary>URL에 사용할 수 없는 문자 배열을 해당하는 16진수 문자 엔터티로 인코딩합니다.</summary>
        <returns>인코딩된 문자 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> 메서드에서 여러 URL 인코딩 메서드에 의해 호출 됩니다는 <xref:System.Web.HttpUtility> 클래스입니다.  
  
 <xref:System.Web.Util.HttpEncoder.UrlEncode%2A> 메서드 URL로 인코딩하고 모든 않는 문자에는 ASCII 문자 집합 하는 URL 안전한 것으로 간주 합니다. 공백 ASCII로 인코딩됩니다 "`+"` 문자입니다. URL 지원 ASCII 문자를 ASCI 문자로 포함 (A ~ Z 및-z), 일부 문장 부호와 숫자 (0 ~ 9,)입니다. 다음 표에서 URL 로부터 안전한 ASCII 문자로 간주 되는 문장 부호를 나열 합니다.  
  
|문자|설명|  
|---------------|-----------------|  
|-|하이픈|  
|_|밑줄|  
|이어야 합니다.|마침표 (.)|  
|!|느낌표|  
|*|별표 (*)|  
|(|여는 괄호|  
|)|닫는 괄호|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" />이 0보다 작거나 <paramref name="bytes" /> 배열의 길이보다 큰 경우  
  
 또는  
  
 <paramref name="count" />가 0보다 작거나 <paramref name="count" />와 <paramref name="offset" />의 합이 <paramref name="bytes" /> 배열의 길이보다 큰 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal virtual string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.HttpEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">인코딩할 문자열입니다.</param>
        <summary>URL의 하위 섹션을 인코딩합니다.</summary>
        <returns>URL 인코딩된 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> 메서드는 <xref:System.Web.HttpUtility.UrlPathEncode%2A> 메서드에 의해 호출됩니다. <xref:System.Web.HttpUtility.UrlPathEncode%2A> 메서드는 다음 단계를 수행 합니다.  
  
-   인코딩 논리 적용 하 고는 <xref:System.Web.Util.HttpEncoder.UrlPathEncode%2A> 메서드를 URL의 (쿼리 문자열 제외) 경로 부분에만 합니다. 메서드는 URL을 u t F-8 문자열로 인코딩된는 가정 합니다.  
  
-   인코딩된 문자열 결과에서 처음 128 개 ASCII 문자 집합만 사용 되도록 비 공간을 인코딩합니다. 모든 문자와 128을, 또는 32 크고, 유니코드 값은 URL로 인코딩됩니다.  
  
-   공간을 (%20)으로 인코딩합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>