<Type Name="RequestValidator" FullName="System.Web.Util.RequestValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e9af6ca1efee30c522e150ec0ff7b42684ff91ce" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36574997" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RequestValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequestValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Util.RequestValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class RequestValidator" />
  <TypeSignature Language="F#" Value="type RequestValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Defines base methods for custom request validation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본적으로 ASP.NET 유효성이 확인 되지 않습니다 요청 코드 요청에서 값을 명시적으로 요청 될 때까지 합니다. 예를 들어 ASP.NET 유효성이 확인 되지 않습니다 쿼리 문자열 값으로 코드에 액세스 될 때까지 <xref:System.Web.HttpRequest.QueryString%2A> 컬렉션입니다. 기본적으로 ASP.NET도 검사 하지 않습니다 일부 유형의 폼 값, 쿠키, HTTP 및의 값을 사용 하 여 업로드 된 파일의 이름 등의 요청 데이터는 <xref:System.Web.HttpRequest.RawUrl%2A> 속성입니다.  
  
 <xref:System.Web.Util.RequestValidator> 클래스는 사용자 지정 요청 유효성 검사를 제공 하기 위해 구현할 수 있는 기본 클래스입니다. 이 클래스를 구현 하 여 유효성 검사가 수행 되는 시기와 유효성 검사를 수행할 요청 데이터의 종류를 확인할 수 있습니다.  
  
 기본적으로 ASP.NET 사이트 간 스크립팅 (XSS) 검사를 제공합니다. 그러나 보완 하 하거나는 XSS의 사용자가 직접 구현 하 여 ASP.NET에서 제공 되는 요청 유효성 검사 논리를 바꿀 수 있습니다. 예를 들어 XSS 공격에 대 한 수행 될 뿐 아니라 SQL 삽입 공격에 대 한 검색 하는 사용자 지정 요청 유효성 검사 구현을 작성할 수 있습니다.  
  
 사용자 지정 클래스에서 파생 된 사용자 지정 요청 유효성 검사를 만들려면 작성 된 <xref:System.Web.Util.RequestValidator> 기본 클래스입니다. 응용 프로그램 수준 Web.config 파일에서 사용자 지정 요청 유효성 검사기를 사용 하는 ASP.NET을 구성 합니다. GAC에 컴파일된 클래스 라이브러리 또는 App_Code 폴더에 Bin 폴더에서 컴파일된 클래스 라이브러리에 사용자 지정 클래스를 넣을 수 있습니다.  
  
> [!NOTE]
>  응용 프로그램에 대 한 하나의 사용자 지정 요청 유효성 검사 유형을 구성할 수 있습니다. 개별 가상 경로 또는 페이지에 대 한 다른 요청 유효성 검사 유형을 구성 하는 것이 불가능 합니다.  
  
   
  
## Examples  
 다음 예제에는 쿼리 문자열 값에 사용할 특정 문자열만 허용 하는 사용자 지정 요청 유효성 검사기를 만드는 방법을 보여 줍니다.  
  
 [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]
 [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  
  
 다음 예제에서는 ASP.NET 응용 프로그램에 대 한 Web.config 파일에 사용자 지정 유효성 검사기를 사용 하도록 구성 하는 방법을 보여 줍니다.  
  
```  
<system.web>  
  <httpRuntime requestValidationType="CustomRequestValidation" />  
</system.web>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Util.RequestValidationSource" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequestValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RequestValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Util.RequestValidator" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator> 클래스에 기본 생성자입니다. 클래스의 새 인스턴스를 초기화 하는 내부 메서드는 응용 프로그램의 구성 정보에서 사용자 지정 유효성 검사 세부 정보를 검색 합니다. 구성 세부 정보에 포함 되어는 <xref:System.Web.Configuration.HttpRuntimeSection> 섹션. 자세한 내용은 참조 [) (httpRuntime Element (ASP.NET 설정 스키마)](http://msdn.microsoft.com/library/e9b81350-8aaf-47cc-9843-5f7d0c59f369) 및 <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> 특성입니다.  
  
 단일 인스턴스를 초기화 하는 동안는 <xref:System.Web.Util.RequestValidator> 클래스를 만들고 대로 유지 관리 되는 인스턴스에 대 한 참조는 <xref:System.Web.Util.RequestValidator.Current%2A> 속성입니다. ASP.NET 요청에 따라 새 요청 유효성 검사기 인스턴스를 만들지 않습니다. 따라서의 사용자 지정 구현을 <xref:System.Web.Util.RequestValidator> 클래스는 스레드로부터 안전 해야 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Web.Util.RequestValidator Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Util.RequestValidator Current" />
      <MemberSignature Language="DocId" Value="P:System.Web.Util.RequestValidator.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As RequestValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Util::RequestValidator ^ Current { System::Web::Util::RequestValidator ^ get(); void set(System::Web::Util::RequestValidator ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Web.Util.RequestValidator with get, set" Usage="System.Web.Util.RequestValidator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Util.RequestValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a reference to the current <see cref="T:System.Web.Util.RequestValidator" /> instance that will be used in an application.</summary>
        <value>
          <see cref="T:System.Web.Util.RequestValidator" /> 클래스의 인스턴스입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.Current%2A> 속성의 허용 되는 단일 인스턴스에 대 한 참조를 유지 관리는 <xref:System.Web.Util.RequestValidator> 클래스입니다. 인스턴스가 없으면 새로가 만들어집니다. 인스턴스가 이미 존재 하는 경우 현재 인스턴스가 반환 됩니다.  
  
 단일 인스턴스를 초기화 하는 동안는 <xref:System.Web.Util.RequestValidator> 클래스 작성 되 고 인스턴스에 대 한 참조를에서 사용할 수는 <xref:System.Web.Util.RequestValidator.Current%2A> 속성입니다. ASP.NET 요청에 따라 새 요청 유효성 검사기 인스턴스를 만들지 않습니다. 따라서의 사용자 지정 구현을 <xref:System.Web.Util.RequestValidator> 클래스는 스레드로부터 안전 해야 합니다.  
  
> [!NOTE]
>  <xref:System.Web.Util.RequestValidator.Current%2A> 속성은 현재에 대 한 참조를 설정 하는 동안 속성은 스레드로부터 안전 하지 <xref:System.Web.Util.RequestValidator> 클래스입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The property is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeIsValidRequestString">
      <MemberSignature Language="C#" Value="public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InvokeIsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool InvokeIsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="member this.InvokeIsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.InvokeIsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">The HTTP context of the request.</param>
        <param name="value">The HTTP request data to validate.</param>
        <param name="requestValidationSource">An enumeration that represents the source of request data that is being validated. The following are possible values for the enumeration:  -   <see langword="QueryString" />  
  
-   <see langword="Form" />  
  
-   <see langword="Cookies" />  
  
-   <see langword="Files" />  
  
-   <see langword="Path" />  
  
-   <see langword="PathInfo" />  
  
-   <see langword="Headers" /></param>
        <param name="collectionKey">(Optional) The key in the request collection of the item to validate. This parameter is used if the data to validate is obtained from a collection. If the data to validate is not from a collection, this parameter can be <see langword="null" />.</param>
        <param name="validationFailureIndex">When this method returns, indicates the zero-based starting point of the problematic or invalid text in the request collection. This parameter is passed uninitialized.</param>
        <summary>Provides a public method that calls the protected <see cref="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" /> method in order to validate HTTP request data.</summary>
        <returns>
          <see langword="true" /> if the string to validate does not contain unencoded characters that could be used in a malicious scripting attack; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> 메서드는 보호 된에 대 한 공용 액세스를 제공 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 메서드. 따라서 사용자 지정 래퍼 클래스를 만들 수 있습니다는 <xref:System.Web.Util.RequestValidator> 클래스 및 호출은 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 에서 상속 하지 않고 메서드는 <xref:System.Web.Util.RequestValidator> 클래스입니다.  
  
 요청 유효성 검사에 대 한 정보를 참조 하십시오. <xref:System.Web.UnvalidatedRequestValues>합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidRequestString">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool IsValidRequestString(class System.Web.HttpContext context, string value, valuetype System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, [out] int32&amp; validationFailureIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool IsValidRequestString(System::Web::HttpContext ^ context, System::String ^ value, System::Web::Util::RequestValidationSource requestValidationSource, System::String ^ collectionKey, [Runtime::InteropServices::Out] int % validationFailureIndex);" />
      <MemberSignature Language="F#" Value="abstract member IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool&#xA;override this.IsValidRequestString : System.Web.HttpContext * string * System.Web.Util.RequestValidationSource * string *  -&gt; bool" Usage="requestValidator.IsValidRequestString (context, value, requestValidationSource, collectionKey, validationFailureIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="requestValidationSource" Type="System.Web.Util.RequestValidationSource" />
        <Parameter Name="collectionKey" Type="System.String" />
        <Parameter Name="validationFailureIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="context">The context of the current request.</param>
        <param name="value">The HTTP request data to validate.</param>
        <param name="requestValidationSource">An enumeration that represents the source of request data that is being validated. The following are possible values for the enumeration:  - <see langword="QueryString" />
- <see langword="Form " />
- <see langword="Cookies" />
- <see langword="Files" />
- <see langword="RawUrl" />
- <see langword="Path" />
- <see langword="PathInfo" />
- <see langword="Headers" /></param>
        <param name="collectionKey">The key in the request collection of the item to validate. This parameter is optional. This parameter is used if the data to validate is obtained from a collection. If the data to validate is not from a collection, <c>collectionKey</c> can be <see langword="null" />.</param>
        <param name="validationFailureIndex">When this method returns, indicates the zero-based starting point of the problematic or invalid text in the request collection. This parameter is passed uninitialized.</param>
        <summary>Validates a string that contains HTTP request data.</summary>
        <returns>
          <see langword="true" /> if the string to be validated is valid; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 요청 데이터의 사용자 지정 유효성 검사를 수행 하려면이 메서드를 구현 합니다. 기본 동작의 <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> 메서드는 교차 사이트 스크립팅 유효성 검사에서 위험한 문자열을 확인 하려면 ASP.NET 내부적으로 구현 하는 동작과 유사 합니다. 자세한 내용은 참조 [방법: ASP.NET에서 사이트 간 스크립팅 방지](http://go.microsoft.com/fwlink/?LinkID=178708)합니다.  
  
 이 메서드를 반환 하도록 하는 경우 사용자 지정 유효성 검사 논리 오류를 검색 `false` 에 값을 입력 하 고 `validationFailureIndex` 오류의 원인이 된 텍스트의 시작 위치를 나타냅니다. 값 `validationFailureIndex` 0 또는 양의 정수 여야 합니다.  
  
 요청 유효성 검사 논리를 다음과 같이 됩니다.  
  
-   <xref:System.Web.HttpRequest> 들어오는 데이터에서 null 문자 제거 검사를 수행 하는 클래스입니다.  
  
-   <xref:System.Web.HttpRequest> 클래스는 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 메서드 (기본 메서드의 기본 구현) 하거나 파생된 버전의 메서드를 호출 합니다.  
  
-   경우 <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 메서드 반환 `false` 유효성 검사 실패를 나타내려면 ASP.NET (필요한 경우)는 오류 문자열을 생성 하 고 throw 된 <xref:System.Web.HttpRequestValidationException> 예외입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>