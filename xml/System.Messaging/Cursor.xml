<Type Name="Cursor" FullName="System.Messaging.Cursor">
  <TypeSignature Language="C#" Value="public sealed class Cursor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Cursor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.Cursor" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Cursor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cursor sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="628c1-101"><see cref="T:System.Messaging.Cursor" />는 <see cref="T:System.Messaging.MessageQueue" />의 메시지를 읽을 때 큐의 특정 위치를 유지하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-101">A <see cref="T:System.Messaging.Cursor" /> is used to maintain a specific location in a <see cref="T:System.Messaging.MessageQueue" /> when reading the queue's messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="628c1-102">에 대 한 한 커서를 가져오려면는 <xref:System.Messaging.MessageQueue>, 호출 된 <xref:System.Messaging.MessageQueue.CreateCursor%2A> 해당 큐에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="628c1-102">To get a cursor for a <xref:System.Messaging.MessageQueue>, call the <xref:System.Messaging.MessageQueue.CreateCursor%2A> method for that queue.</span></span>  
  
 <span data-ttu-id="628c1-103">A <xref:System.Messaging.Cursor> 같은 메서드와 함께 사용 되는 <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> 및 <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> 큐의 앞에 있지 않는 메시지를 읽으려면 중지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-103">A <xref:System.Messaging.Cursor> is used with such methods as <xref:System.Messaging.MessageQueue.Peek%28System.TimeSpan%2CSystem.Messaging.Cursor%2CSystem.Messaging.PeekAction%29> and <xref:System.Messaging.MessageQueue.Receive%28System.TimeSpan%2CSystem.Messaging.Cursor%29> when you need to read messages that are not at the front of the queue.</span></span> <span data-ttu-id="628c1-104">동기적 또는 비동기적으로 메시지를 읽는 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-104">This includes reading messages synchronously or asynchronously.</span></span> <span data-ttu-id="628c1-105">커서를 큐에만 첫 번째 메시지를 읽는 데 사용할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-105">Cursors do not need to be used to read only the first message in a queue.</span></span>  
  
 <span data-ttu-id="628c1-106">트랜잭션 내에서 메시지를 읽을 때 메시지 큐 롤백되지 않습니다 커서 움직임 트랜잭션이 중단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-106">When reading messages within a transaction, Message Queuing does not roll back cursor movement if the transaction is aborted.</span></span> <span data-ttu-id="628c1-107">예를 들어 A1 및 A2 메시지 큐가 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-107">For example, suppose there is a queue with two messages, A1 and A2.</span></span> <span data-ttu-id="628c1-108">메시지 트랜잭션에서 a 1을 제거 하는 경우 메시지 큐 커서 메시지 a 2로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-108">If you remove message A1 while in a transaction, Message Queuing moves the cursor to message A2.</span></span> <span data-ttu-id="628c1-109">그러나 어떤 이유로 든 트랜잭션이 중단 되 면 A1 큐 하지만 커서에 다시 삽입 되는 메시지 메시지 a 2 가리키는 남아 있습니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-109">However, if the transaction is aborted for any reason, message A1 is inserted back into the queue but the cursor remains pointing at message A2.</span></span>  
  
 <span data-ttu-id="628c1-110">커서를 닫으려면 호출 <xref:System.Messaging.Cursor.Close%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-110">To close the cursor, call <xref:System.Messaging.Cursor.Close%2A>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Cursor.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="628c1-111">메시지 큐에서 연결된 리소스를 해제할 수 있도록 커서를 닫습니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-111">Closes the cursor, allowing Message Queuing to release the associated resources.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Cursor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="628c1-112">
          <see cref="T:System.Messaging.Cursor" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="628c1-112">Releases all resources used by the <see cref="T:System.Messaging.Cursor" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Messaging.Cursor" />
        <altmember cref="M:System.Messaging.MessageQueue.CreateCursor" />
      </Docs>
    </Member>
  </Members>
</Type>