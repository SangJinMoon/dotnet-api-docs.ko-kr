<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ab019-101">메시지 큐 내부 트랜잭션을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-101">Provides a Message Queuing internal transaction.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab019-102">보내거나 메시지가 트랜잭션의 일부로 사용할 수 있습니다는 <xref:System.Messaging.MessageQueueTransaction> 트랜잭션을 만들고의 오버 로드에 전달 하는 클래스는 <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> 메서드 또는 <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> 를 받는 메서드에 `transaction` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-102">To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> method that takes a `transaction` parameter.</span></span> <span data-ttu-id="ab019-103">트랜잭션의 일부로 전송 되는 메시지 트랜잭션 큐로 전송 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-103">Messages sent as part of a transaction must be sent to transactional queues.</span></span> <span data-ttu-id="ab019-104">지정 된 트랜잭션을 사용 하 여 트랜잭션 큐에서 받은 메시지를 수신 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-104">Messages received from transactional queues must be received using a specified transaction.</span></span>  
  
 <span data-ttu-id="ab019-105">이외에 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드를 지정 된 식별자 또는 지정 된 상관 관계 식별자를 사용 하 여 메시지를 받을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-105">In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier.</span></span> <span data-ttu-id="ab019-106">참조는 <xref:System.Messaging.MessageQueue.ReceiveById%2A> 및 <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> 선택적으로 트랜잭션 큐에서 메시지를 수신 하는 방법에 대 한 자세한 내용은 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-106">See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.</span></span>  
  
 <span data-ttu-id="ab019-107">트랜잭션 큐로 보낸 메시지는 트랜잭션이 커밋될 때 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-107">Messages sent to transactional queues are removed if the transaction is committed.</span></span> <span data-ttu-id="ab019-108">마찬가지로, 트랜잭션이 롤백되면 트랜잭션 큐에서 수신 된 메시지 큐로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-108">Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</span></span>  
  
 <span data-ttu-id="ab019-109">인스턴스화하는 경우는 <xref:System.Messaging.MessageQueueTransaction> 의 적용 가능한 오버 로드에 전달 된 <xref:System.Messaging.MessageQueue.Send%2A> 메서드 또는 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드를 비트랜잭션 큐로 메시지를 보내거나 메서드는 비트랜잭션 큐에서 메시지를 받을 예외를 throw 하는 "잘못 된 트랜잭션 사용을"을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-109">If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</span></span>  
  
 <span data-ttu-id="ab019-110"><xref:System.Messaging.MessageQueueTransaction> 스레딩 아파트를 인식 아파트 상태가 따라서 `STA`, 트랜잭션이 여러 스레드를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-110"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="ab019-111">에 주 스레드의 상태를 설정 하는 Visual Basic `STA`적용 해야 하므로 <xref:System.MTAThreadAttribute> 에 `Main` 서브루틴 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-111">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="ab019-112">그렇지 않으면 다른 스레드를 사용하여 트랜잭션 메시지를 전달할 때 <xref:System.Messaging.MessageQueueException> 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-112">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="ab019-113">적용 된 <xref:System.MTAThreadAttribute> 다음 부분을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-113">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="ab019-114">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-114">This type is thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab019-115"><see cref="T:System.Messaging.MessageQueueTransaction" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-115">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab019-116">이 생성자는 설정의 <xref:System.Messaging.MessageQueueTransaction.Status%2A> 속성을 `Initialized`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-116">This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab019-117">내부 트랜잭션 보류를 롤백합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-117">Rolls back the pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab019-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> 에 대 한 호출에서 시작 되는 프로세스를 성공적으로 완료 표시 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="ab019-119">일반적으로 하나를 호출 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 내에서 한 `Try...Catch` 를 호출 하는 예외 처리 블록 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 에 `Try` 절 및에 대 한 호출 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 에 `Catch` 절.</span><span class="sxs-lookup"><span data-stu-id="ab019-119">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 <span data-ttu-id="ab019-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> 전체 트랜잭션을 롤백합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction.</span></span> <span data-ttu-id="ab019-121">호출한 후 보내거나 받는 모든 메시지가 포함 됩니다 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-121">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab019-122">롤백하려는 내부 트랜잭션이 시작되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="ab019-122">The internal transaction you are attempting to roll back has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ab019-123">내부 메시지 큐 오류가 발생하는 경우</span><span class="sxs-lookup"><span data-stu-id="ab019-123">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab019-124">새 메시지 큐 내부 트랜잭션을 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-124">Begins a new Message Queuing internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab019-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> 커밋 또는 롤백 트랜잭션이의 성공 여부를 지정 하는 처리의 시작을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</span></span> <span data-ttu-id="ab019-126">처리 하는 동안 예외가 발생 하면 전체 트랜잭션이 롤백됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-126">If an exception occurs during processing, the entire transaction is rolled back.</span></span> <span data-ttu-id="ab019-127">호출한 후 보내거나 받는 모든 메시지가 포함 됩니다 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-127">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="ab019-128">일반적으로 하나를 호출 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 내에서 한 `Try...Catch` 를 호출 하는 예외 처리 블록 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 에 `Try` 절 및에 대 한 호출 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 에 `Catch` 절.</span><span class="sxs-lookup"><span data-stu-id="ab019-128">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab019-129">트랜잭션이 이미 시작된 경우</span><span class="sxs-lookup"><span data-stu-id="ab019-129">The transaction has already been started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ab019-130">내부 메시지 큐 오류가 발생하는 경우</span><span class="sxs-lookup"><span data-stu-id="ab019-130">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab019-131">보류 중인 내부 트랜잭션을 커밋합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-131">Commits a pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab019-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> 에 대 한 호출에서 시작 되는 프로세스가 완료 되었는지 표시 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span> <span data-ttu-id="ab019-133">호출 사이 예외가 발생 하는 경우는 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 에 대 한 호출은 <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, 전체 트랜잭션이 롤백됩니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-133">If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back.</span></span> <span data-ttu-id="ab019-134">호출한 후 보내거나 받는 모든 메시지가 포함 됩니다 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-134">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="ab019-135">일반적으로 하나를 호출 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 내에서 한 `Try...Catch` 를 호출 하는 예외 처리 블록 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 에 `Try` 절 및에 대 한 호출 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 에 `Catch` 절.</span><span class="sxs-lookup"><span data-stu-id="ab019-135">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ab019-136">커밋하려는 트랜잭션이 시작되지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="ab019-136">The transaction you are trying to commit has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ab019-137">내부 메시지 큐 오류가 발생하는 경우</span><span class="sxs-lookup"><span data-stu-id="ab019-137">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ab019-138">
          <see cref="T:System.Messaging.MessageQueueTransaction" />에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-138">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab019-139">
          <see cref="T:System.Messaging.MessageQueueTransaction" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-139">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab019-140">호출 <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> 에서 사용 하는 리소스는 <xref:System.Messaging.MessageQueueTransaction> 다른 용도에 다시 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-140">Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes.</span></span> <span data-ttu-id="ab019-141">에 대 한 자세한 내용은 `Dispose`, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-141">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="ab019-142">보류 중인 내부 트랜잭션이 모두 의해 롤백됩니다 <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-142">Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="ab019-143">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-143"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="ab019-144"><see cref="T:System.Messaging.MessageQueueTransaction" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-144">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab019-145">이 메서드는 public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab019-145">This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="ab019-146">`Dispose` 보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-146">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="ab019-147"><xref:System.Object.Finalize%2A> 호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-147"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="ab019-148">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.Messaging.MessageQueueTransaction>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-148">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references.</span></span> <span data-ttu-id="ab019-149">이 메서드는 참조되는 각 개체의 `Dispose` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-149">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="ab019-150"><see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-150"><see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="ab019-151"><see langword="Dispose(Boolean)" />를 재정의할 때 이전 <see langword="Dispose" /> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.</span><span class="sxs-lookup"><span data-stu-id="ab019-151">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="ab019-152">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-152">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="ab019-153">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see langword="Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드를 재정의](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-153">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab019-154">현재 인스턴스에서 보유한 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-154">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab019-155">이 메서드는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-155">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ab019-156">응용 프로그램 코드,이 메서드를 호출 하지 않아야 개체의 <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> 메서드를 호출 하 여 가비지 수집기의 종료를 사용 하지 않도록 설정 된 경우가 아니면 자동으로 가비지 수집 중 호출 됩니다는 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab019-156">Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ab019-157">자세한 내용은 참조 [Finalize 메서드 및 소멸자](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md), 및 [Finalize 메서드를 재정의](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-157">For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab019-158">트랜잭션 상태를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-158">Gets the status of the transaction.</span></span></summary>
        <value><span data-ttu-id="ab019-159">트랜잭션 커밋, 중단, 초기화 또는 보류 여부를 표시하는 <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-159">One of the <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab019-160">인스턴스는 <xref:System.Messaging.MessageQueueTransaction> 클래스를 만든는 <xref:System.Messaging.MessageQueueTransaction.Status%2A> 를 생성자에 의해 설정 `Initialized`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-160">When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`.</span></span> <span data-ttu-id="ab019-161">호출한 후 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 를 호출 하기 전에 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 또는 <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, <xref:System.Messaging.MessageQueueTransaction.Status%2A> 은 `Pending`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab019-161">After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>