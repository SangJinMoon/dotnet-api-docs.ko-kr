<Type Name="MessageQueueEnumerator" FullName="System.Messaging.MessageQueueEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2dd645dcfd97fa2036ad0395acbbbf3e86c2865e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="360f4-101">메시지 큐의 메시지를 열거하는 정방향 전용 커서를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="360f4-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="360f4-102">사용 하 여 <xref:System.Messaging.MessageQueueEnumerator> 네트워크에서 큐와 동적 상호 작용 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-102">Use <xref:System.Messaging.MessageQueueEnumerator> for dynamic interaction with queues on the network.</span></span> <span data-ttu-id="360f4-103">통해 사용할 수 있는 메서드는 <xref:System.Messaging.MessageQueue> 클래스 중 하나를 반환할 수는 <xref:System.Messaging.MessageQueueEnumerator> 큐 또는 큐 컬렉션 내의 시간에 대 한 스냅숏을 포함 하는 배열을 동적 목록이 포함 된 지정 된 메서드가 호출 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageQueueEnumerator> containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="360f4-104">큐는 네트워크에 정의 된 순서가 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-104">There is no defined ordering of queues in a network.</span></span> <span data-ttu-id="360f4-105">예를 들어 컴퓨터, 레이블, 공개 또는 개인 상태 여 정렬 되거나 다른 사용자를 액세스할 수 있는 기준 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-105">They are not ordered, for example, by computer, label, public or private status, or other user-accessible criteria.</span></span> <span data-ttu-id="360f4-106">A <xref:System.Messaging.MessageQueueEnumerator> 는 목록 헤드를 동적으로 초기화 하는 커서입니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-106">A <xref:System.Messaging.MessageQueueEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="360f4-107">열거형의 첫 번째 큐를 호출 하 여 커서를 이동할 수 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-107">You can move the cursor to the first queue of the enumeration by calling <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="360f4-108">열거자가 초기화 된 후 사용할 수 있습니다 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 나머지 큐 앞으로 단계별로 실행 되도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-108">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to step forward through the remaining queues.</span></span>  
  
 <span data-ttu-id="360f4-109">여 뒤로 이동 불가능 한 <xref:System.Messaging.MessageQueueEnumerator>합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-109">It is not possible to step backward with a <xref:System.Messaging.MessageQueueEnumerator>.</span></span> <span data-ttu-id="360f4-110">커서는 큐 열거형에서 앞으로 이동 하는 것을 허용합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-110">A cursor only allows forward movement through the queue enumeration.</span></span> <span data-ttu-id="360f4-111">호출할 수 있습니다 <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 열거형 다시 설정 하 고 다시 목록의 처음에 커서를 놓습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-111">However, you can call <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to reset the enumeration and put the cursor at the beginning of the list again.</span></span> <span data-ttu-id="360f4-112">열거자는 동적 커서의 현재 위치 뒤에 추가 하는 큐 열거자가 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-112">Because the enumerator is dynamic, a queue that is appended beyond the cursor's current position can be accessed by the enumerator.</span></span> <span data-ttu-id="360f4-113">첫 번째 호출 재설정 하지 않고 커서의 현재 위치 앞에 삽입 하는 큐를 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-113">A queue that is inserted before the cursor's current position cannot be accessed without first calling Reset.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="360f4-114">다음 코드 예제에서는 네트워크의 모든 메시지 큐에서 반복 되며 각 큐에 대 한 경로 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-114">The following code example iterates through all the message queues in the network, and examines the path for each queue.</span></span> <span data-ttu-id="360f4-115">마지막으로, 네트워크에 공개 큐의 수를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-115">Finally, it displays the number of public queues on the network.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CPP/mqgetmessagequeueenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CS/mqgetmessagequeueenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/VB/mqgetmessagequeueenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="360f4-116">해당 열거자와 관련된 리소스를 삭제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-116">Frees the resources associated with the enumerator.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="360f4-117">운영 체제에 대해 열린 핸들이 유지 <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, 커서의 수명 동안 큐 열거자에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-117">The operating system retains an open handle, <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, to the queue enumerator during the lifetime of the cursor.</span></span> <span data-ttu-id="360f4-118">열거자를 사용한 작업이 끝나면 호출 <xref:System.Messaging.MessageQueueEnumerator.Close%2A> 핸들에 연결 된 리소스를 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-118">When you finish working with the enumerator, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ Current { System::Messaging::MessageQueue ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="360f4-119">열거형의 현재 <see cref="T:System.Messaging.MessageQueue" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-119">Gets the current <see cref="T:System.Messaging.MessageQueue" /> of the enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="360f4-120">현재 커서가 배치되어 있는 큐입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-120">The queue at which the cursor is currently positioned.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="360f4-121">열거자를 만들 때이를 가리키지 않습니다 아무 것도 따라서 <xref:System.Messaging.MessageQueueEnumerator.Current%2A> 올바르지 않으며 액세스 하는 경우 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-121">When the enumerator is created, it does not point to anything, so <xref:System.Messaging.MessageQueueEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="360f4-122">호출 해야 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 열거형의 첫 번째 큐에 커서를 배치할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-122">You must call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to position the cursor at the first queue in the enumeration.</span></span>  
  
 <span data-ttu-id="360f4-123">여러 번 호출 <xref:System.Messaging.MessageQueueEnumerator.Current%2A> 에 대 한 중간 호출 된 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 동일한 돌아갑니다 <xref:System.Messaging.MessageQueue> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-123">Multiple calls to <xref:System.Messaging.MessageQueueEnumerator.Current%2A> with no intervening calls to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return the same <xref:System.Messaging.MessageQueue> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="360f4-124">
            <see cref="P:System.Messaging.MessageQueueEnumerator.Current" />를 처음 호출하기 전에 <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />를 호출하여</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-124">You called <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />.</span>
          </span>
          <span data-ttu-id="360f4-125">커서가 열거형의 첫 번째 큐 앞에 배치되는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-125">The cursor is located before the first queue in the enumeration.</span>
          </span>
          <span data-ttu-id="360f4-126">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-126">-or-</span>
          </span>
          <span data-ttu-id="360f4-127">
            <see cref="P:System.Messaging.MessageQueueEnumerator.Current" />를 호출하여 false를 반환한 후에 <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />를 호출한 경우(커서가 열거형의 마지막 큐 뒤에 배치됨을 표시)</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-127">You called <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> had returned false (indicating the cursor is located after the last queue in the enumeration).</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="360f4-128">
            <see cref="T:System.Messaging.MessageQueueEnumerator" />에서 사용하는 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-128">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="360f4-129">
            <see cref="T:System.Messaging.MessageQueueEnumerator" />에서 사용하는 모든 리소스를 해제합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-129">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="360f4-130">호출 <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> 에서 사용 하는 리소스는 <xref:System.Messaging.MessageQueueEnumerator> 다른 용도에 다시 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-130">Calling <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="360f4-131">에 대 한 자세한 내용은 <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-131">For more information about <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="360f4-132">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-132">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="360f4-133">
            <see cref="T:System.Messaging.MessageQueueEnumerator" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-133">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="360f4-134">이 메서드는 public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="360f4-134">This method is called by the public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="360f4-135">`Dispose` 보호 된 호출 `Dispose(Boolean)` 메서드는 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-135">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="360f4-136"><xref:System.Object.Finalize%2A> 호출 `Dispose` 와 `disposing` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-136"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="360f4-137">`disposing` 매개 변수가 `true`인 경우 이 메서드는 이 <xref:System.Messaging.MessageQueueEnumerator>에서 참조하는 관리 개체가 보유하고 있는 리소스를 모두 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-137">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueEnumerator> references.</span></span> <span data-ttu-id="360f4-138">이 메서드는 참조되는 각 개체의 `Dispose` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-138">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="360f4-139">
              <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="360f4-139">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="360f4-140">
              <see langword="Dispose(Boolean)" />를 재정의할 때 이전 <see langword="Dispose" /> 호출에서 삭제된 개체를 참조하지 않도록 주의하십시오.</span>
            <span class="sxs-lookup">
              <span data-stu-id="360f4-140">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="360f4-141">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose" />, 참조 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="360f4-141">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="360f4-142">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see langword="Finalize" />, 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드를 재정의](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="360f4-142">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueEnumerator ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocatorHandle">
      <MemberSignature Language="C#" Value="public IntPtr LocatorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int LocatorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.LocatorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocatorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr LocatorHandle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="360f4-143">네트워크에서 큐를 찾는 데 사용되는 네이티브 메시지 큐 핸들을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-143">Gets the native Message Queuing handle used to locate queues in a network.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="360f4-144">현재 큐의 기본 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-144">The native handle to the current queue.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="360f4-145">더 이상 필요한 경우이 <xref:System.Messaging.MessageQueueEnumerator> 인스턴스를 호출 <xref:System.Messaging.MessageQueueEnumerator.Close%2A> 리소스에이 핸들을 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-145">When you no longer need this <xref:System.Messaging.MessageQueueEnumerator> instance, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to free this handle to the resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="360f4-146">핸들이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-146">The handle does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="360f4-147">호출 코드에는 찾아보기 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-147">The calling code does not have browse permissions.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="360f4-148">가능한 경우 해당 열거자를 열거형의 다음 큐로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-148">Advances the enumerator to the next queue of the enumeration, if one is currently available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="360f4-149">열거자가 다음 큐로 이동하면 <see langword="true" />를 반환하고, 열거자가 열거형의 끝에 도달하면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-149">
              <see langword="true" /> if the enumerator was successfully advanced to the next queue; <see langword="false" /> if the enumerator has reached the end of the enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="360f4-150"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 반환 `false` 열거형과 관련 된 큐가 없는 경우 즉시 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-150"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> returns `false` immediately if there are no queues associated with the enumeration.</span></span>  
  
 <span data-ttu-id="360f4-151"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 반환 `true` 컬렉션의 끝에 도달 하면 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-151"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return `true` until it has reached the end of the collection.</span></span> <span data-ttu-id="360f4-152">그런 다음 반환 합니다 `false` 각 연속 호출에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-152">It will then return `false` for each successive call.</span></span> <span data-ttu-id="360f4-153">그러나 한 번 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 를 반환 했습니다. `false`, 액세스 하는 <xref:System.Messaging.MessageQueueEnumerator.Current%2A> 속성 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-153">However once <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> has returned `false`, accessing the <xref:System.Messaging.MessageQueueEnumerator.Current%2A> property will throw an exception.</span></span>  
  
 <span data-ttu-id="360f4-154">만들어지면 열거자는 일반적으로 배치 중 첫 번째 앞 <xref:System.Messaging.MessageQueue> 열거형 및 첫 번째 호출의 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 으로 열거형의 첫 번째 큐를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-154">Upon creation, an enumerator is conceptually positioned before the first <xref:System.Messaging.MessageQueue> of the enumeration, and the first call to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> brings the first queue of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="360f4-155">호출 코드에는 찾아보기 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-155">The calling code does not have browse permissions.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
        <altmember cref="T:System.Messaging.MessageQueue" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="360f4-156">커서가 열거형의 시작 부분을 가리키도록 다시 설정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-156">Resets the cursor, so it points to the beginning of the enumeration.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="360f4-157">열거자 앞 으로만 이동 가능한 방향으로 이동합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-157">An enumerator moves in a forward-only direction.</span></span> <span data-ttu-id="360f4-158">이 메서드를 사용 하 여 열거 된 큐의 시작 부분으로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-158">Use this method to return to the beginning of the enumeration of queues.</span></span>  
  
 <span data-ttu-id="360f4-159"><xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 목록에서 첫 번째 큐에 커서를 놓습니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-159"><xref:System.Messaging.MessageQueueEnumerator.Reset%2A> positions the cursor at the first queue in the list.</span></span> <span data-ttu-id="360f4-160">호출할 필요가 없습니다 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 호출한 후 <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 열거형의 첫 번째 큐에 커서를 앞으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="360f4-160">You do not need to call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to move the cursor forward to the first queue in the enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="360f4-161">열거형의 현재 <see cref="T:System.Messaging.MessageQueue" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-161">Gets the current <see cref="T:System.Messaging.MessageQueue" /> of the enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="360f4-162">현재 커서가 배치되어 있는 큐입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="360f4-162">The queue at which the cursor is currently positioned.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>