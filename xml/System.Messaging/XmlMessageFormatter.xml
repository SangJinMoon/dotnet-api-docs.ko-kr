<Type Name="XmlMessageFormatter" FullName="System.Messaging.XmlMessageFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="563e678b40760a20036da2630095cb8b05f461de" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.XmlMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="f8d19-101">XSD 스키마 정의에 기반한 XML 형식을 사용하여 개체를 메시지 본문 간에 serialize 및 deserialize합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f8d19-101">Serializes and deserializes objects to or from the body of a message, using the XML format based on the XSD schema definition.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-102"><xref:System.Messaging.XmlMessageFormatter> 기본 포맷터가 있는 인스턴스의 <xref:System.Messaging.MessageQueue> 큐에 기록 되는 메시지를 serialize 하는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-102">The <xref:System.Messaging.XmlMessageFormatter> is the default formatter that an instance of <xref:System.Messaging.MessageQueue> uses to serialize messages written to the queue.</span></span> <span data-ttu-id="f8d19-103">인스턴스를 만들 때 <xref:System.Messaging.MessageQueue>, 인스턴스의 <xref:System.Messaging.XmlMessageFormatter> 으로 생성 되 고 연결 된는 <xref:System.Messaging.MessageQueue>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-103">When you create an instance of <xref:System.Messaging.MessageQueue>, an instance of <xref:System.Messaging.XmlMessageFormatter> is created for you and associated with the <xref:System.Messaging.MessageQueue>.</span></span> <span data-ttu-id="f8d19-104">코드에서 만들고에 할당 하 여 다른 포맷터를 지정할 수는 <xref:System.Messaging.MessageQueue.Formatter%2A> 속성의 프로그램 <xref:System.Messaging.MessageQueue>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-104">You can specify a different formatter by creating it in your code and assigning it to the <xref:System.Messaging.MessageQueue.Formatter%2A> property of your <xref:System.Messaging.MessageQueue>.</span></span>  
  
 <span data-ttu-id="f8d19-105">큐의 기본 <xref:System.Messaging.XmlMessageFormatter> 인스턴스 큐에 쓰는 데 사용할 수 있지만 중 하나를 설정할 때까지 큐에서 읽은를 사용할 수는 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 또는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 포맷터에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-105">A queue's default <xref:System.Messaging.XmlMessageFormatter> instance can be used to write to the queue, but it cannot be used to read from the queue until you set either the <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> property on the formatter.</span></span> <span data-ttu-id="f8d19-106">기본 포맷터 인스턴스에서 이러한 값 중 하나 또는 모두 설정 하거나 또는 포맷터의 새 인스턴스를 만들고를 적절 한 인수로 전달 하 여 값을 자동으로 설정할 수 있습니다 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-106">You can either set one or both of these values on the default formatter instance, or you can create a new instance of the formatter and set the values automatically by passing them as arguments into the appropriate <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="f8d19-107">지정 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 대신 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, 오류가 발생할 가능성이 줄어듭니다 읽기 시간 보다는 컴파일 타임에 형식이 존재를 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-107">When specifying <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> rather than <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, type existence is checked at compile time rather than read time, reducing possibility for error.</span></span> <span data-ttu-id="f8d19-108"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 정규화 된 어셈블리 이름을 지정 하 되도록 모든 항목이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-108"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> requires every entry to be fully qualified, specifying its assembly name.</span></span> <span data-ttu-id="f8d19-109">또한 여러 동시 작업 버전에서 작업할 때는 버전 번호는 대상 형식 이름에 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-109">Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</span></span>  
  
 <span data-ttu-id="f8d19-110"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알려 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-110">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="f8d19-111">이렇게 하면 메시지 본문의 해석 하는 포맷터입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-111">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="f8d19-112">형식 배열에 있는 스키마 중 하나를 사용 하 여 메시지 본문에 serialize 된 인스턴스를 따라야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-112">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="f8d19-113">사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드 메서드를 식별 하는 스키마에 해당 하는 메시지 본문 읽어들입니다 형식의 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-113">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="f8d19-114">두 속성 중 하나에만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-114">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="f8d19-115">형식 집합이 결합된 된 집합은 두 속성이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-115">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="f8d19-116">응용 프로그램에 사용할 속성을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-116">The decision of which property to use is specific to your application.</span></span> <span data-ttu-id="f8d19-117">스키마와 일치 하지 않으므로 두 속성 중 하나에 대 한 배열에 있는 형식의 형식을 포함 하는 메시지 본문, 메시지를 읽을 때 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-117">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</span></span>  
  
 <span data-ttu-id="f8d19-118"><xref:System.Messaging.XmlMessageFormatter> 느슨하게 연결 된 XML 기반 메시징을의 중요 한 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-118">The <xref:System.Messaging.XmlMessageFormatter> is a crucial component of loosely coupled XML-based messaging.</span></span> <span data-ttu-id="f8d19-119">XSD.exe 유틸리티 사용 하는 XML 형식은 유틸리티 응용 프로그램에서 사용 되는 클래스를 serialize 하는 데 사용 하는 경우와 같은 XML 스키마를 생성 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-119">The XSD.exe utility uses the XML format is used to generate XML schema, such as when you use the utility to serialize a class used by your application.</span></span> <span data-ttu-id="f8d19-120">이 클래스에는 기본 생성자가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-120">The class must have a default constructor.</span></span>  
  
 <span data-ttu-id="f8d19-121">형식은 사용 되는 다시 역 프로세스에서이 유틸리티는 스키마를 기반으로 클래스를 생성 하는 경우에 배포 하 클래스 데이터에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-121">The format is used again in the reverse process when the utility generates a class based on the schema you distribute to describe your class data.</span></span> <span data-ttu-id="f8d19-122">유틸리티 및 생성 된 XML 스키마의 사용을 사용 하면 클래스의 구현에서 변경 된 후에 클래스를 다시 컴파일할 때마다 redistributing.dll 파일을 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-122">The use of the utility and the XML schema it generates enables you to avoid redistributing.dll files every time you recompile a class after the implementation of your class has changed.</span></span> <span data-ttu-id="f8d19-123">클라이언트 또는 서버에서 스키마를 변경 되지 않으면으로 어느 한 쪽의 변경 내용이 다른 다른 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-123">As long as the schema does not change on the client or the server, other changes on either side do not affect the other.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d19-124">다음 코드 예제에서는 포함 코드의 세 부분: 서버 구성 요소, order 클래스 및 클라이언트 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-124">The following code example includes three pieces of code: a server component, an order class, and client code.</span></span> <span data-ttu-id="f8d19-125">Order 클래스 서버가 들어오는 메시지에서 인식 하는 스키마를 생성 하는 XSD.exe 유틸리티에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-125">The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages.</span></span> <span data-ttu-id="f8d19-126">스키마는 클래스의 "모양"에 대해 설명 하는 XML 형식된 파일.</span><span class="sxs-lookup"><span data-stu-id="f8d19-126">The schema is an XML formatted file that describes the "shape" of the class.</span></span> <span data-ttu-id="f8d19-127">이 스키마 서버 클래스와 동일한 스키마를 공유 하는 클라이언트 관련 order 클래스를 생성 합니다. 클라이언트 쪽에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-127">This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.</span></span>  
  
 <span data-ttu-id="f8d19-128">다음 코드 예제에서는 메시지 큐를 통해 주문을 수신 하는 서버 구성 요소를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-128">The following code example represents a server component that receives orders through a message queue.</span></span> <span data-ttu-id="f8d19-129">메시지의 본문에 있는 스키마의 아래 Order.cs 클래스와 일치 하는 order 개체 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-129">The body of the message should be an order object whose schema matches the Order.cs class below.</span></span> <span data-ttu-id="f8d19-130">서버 프로세스 또는 응용 프로그램에는 순서를 역직렬화합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-130">The server process or application deserializes the order.</span></span>  
  
 [!code-cpp[Classic XmlMessageFormatter Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlMessageFormatter Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source.cs#1)]
 [!code-vb[Classic XmlMessageFormatter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source.vb#1)]  
  
 <span data-ttu-id="f8d19-131">다음 코드 예제에서는 서버에서 응용 프로그램을 받아서 deserialize 하는 order 개체에 대 한 스키마를 제공 하는 order 클래스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-131">The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.</span></span>  
  
 [!code-cpp[Classic XmlMessageFormatter Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic XmlMessageFormatter Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source2.cs#2)]
 [!code-vb[Classic XmlMessageFormatter Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="f8d19-132">모든 클라이언트 응용 프로그램 상호 작용 하는 응용 프로그램 서버에 로컬로 정의 된 order 클래스에 직렬화 정보에 메시지 본문에 의해 서버에 메시지를 보내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-132">Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body.</span></span> <span data-ttu-id="f8d19-133">로컬로 정의 된 순서 클래스는 서버에서 응용 프로그램 메시지 본문을 deserialize 하는 데 읽으려고 order 서버에서 정의 된 클래스와 동일한 스키마를 가져야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-133">The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body.</span></span> <span data-ttu-id="f8d19-134">XSD.exe 유틸리티를 사용 하면 서버에서 응용 프로그램의 관리자를 클라이언트가 서버에는 메시지를 serialize 하는 데 사용 해야 하는 스키마를 만들고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-134">The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.</span></span>  
  
 <span data-ttu-id="f8d19-135">클라이언트 응용 프로그램의 관리자가 order 클래스에 대 한 스키마를 스키마에서 클라이언트 관련 order 클래스를 생성 하려면 XSD.exe 유틸리티 다시 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-135">When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema.</span></span> <span data-ttu-id="f8d19-136">서버의 순서 클래스가 아닌 아래 클라이언트 코드 예제에 사용 되는이 클래스는 (XSD.exe 유틸리티 스키마에서 생성 된 클래스는 원본 클래스와 동일한 이름을 사용 하면).</span><span class="sxs-lookup"><span data-stu-id="f8d19-136">It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class).</span></span> <span data-ttu-id="f8d19-137">이 새 order 클래스는 메시지 본문에는 순서를 직렬화 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-137">This new order class is used to serialize the order into the message body.</span></span>  
  
 <span data-ttu-id="f8d19-138">다음 코드 예제에서는 클라이언트 쪽 처리를 큐에는 순서와 관련 된 정보를 보내고는 주문을 serialize 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-138">The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue.</span></span> <span data-ttu-id="f8d19-139">코드는 Order.cs 클래스에는 XSD.exe 유틸리티에서 생성 된 스키마의 요소와 항목, 수량 및 주소 정보를 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-139">The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility.</span></span> <span data-ttu-id="f8d19-140">주문 로컬 컴퓨터의 주문 큐로 전송 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-140">An order is sent to the Orders queue on the local computer.</span></span>  
  
 [!code-cpp[Classic XmlMessageFormatter Example#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source3.cpp#3)]
 [!code-csharp[Classic XmlMessageFormatter Example#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source3.cs#3)]
 [!code-vb[Classic XmlMessageFormatter Example#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source3.vb#3)]  
  
 <span data-ttu-id="f8d19-141">스키마를 서버에서 order 클래스에서 생성 한 후에 클래스를 수정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-141">After the schema is generated from the order class on the server, you can modify the class.</span></span> <span data-ttu-id="f8d19-142">스키마를 변경 하지 않는 스키마를 다시 배포할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-142">Unless the schema changes, you do not need to redistribute the schema.</span></span> <span data-ttu-id="f8d19-143">스키마를 배포 하 고 클라이언트 쪽 order 클래스를 생성 된 후 해당 클라이언트 클래스를 수정할 수도 있습니다 서버의 order 클래스와 독립적으로으로 스키마 자체는 수정 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-143">After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified.</span></span> <span data-ttu-id="f8d19-144">두 클래스는 느슨하게 결합 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-144">The two classes have become loosely coupled.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.IMessageFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f8d19-145">
            <see cref="T:System.Messaging.XmlMessageFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-145">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f8d19-146">대상 형식 집합을 설정하지 않고 <see cref="T:System.Messaging.XmlMessageFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-146">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, without target types set.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-147">이 오버 로드 생성자의 가장 많이 사용 됩니다는 큐에 쓸 때 쓸 때에 대상 형식은 필요 하지 않기 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-147">This overload of the constructor is used most frequently when writing to the queue, as target types are not required when writing.</span></span>  
  
 <span data-ttu-id="f8d19-148">인스턴스를 사용 하 여 큐에서 메시지를 읽으려면를 <xref:System.Messaging.XmlMessageFormatter> 설정 해야이 생성자를 사용 하 여 만든는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 또는 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 포맷터에서 deserialize 할 형식을 알 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-148">To read a message from a queue using an instance of <xref:System.Messaging.XmlMessageFormatter> created using this constructor, you must set the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties so the formatter knows what types to attempt to deserialize.</span></span>  
  
 <span data-ttu-id="f8d19-149">새 만들 때 <xref:System.Messaging.MessageQueue>, 기본 <xref:System.Messaging.XmlMessageFormatter> 의 대상 유형으로 설정 하지 않고 인스턴스가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-149">When you create a new <xref:System.Messaging.MessageQueue>, a default <xref:System.Messaging.XmlMessageFormatter> instance is created, without the target types set.</span></span> <span data-ttu-id="f8d19-150">이 생성자를 사용 하 여 만든에 포맷터와 마찬가지로 큐에서 읽으려 한다고 경우 포맷터 인스턴스에 대 한 대상 형식을 설정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-150">As with a formatter created using this constructor, you must set target types for that formatter instance if you want to read from the queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (string[] targetTypeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] targetTypeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypeNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;System::String ^&gt; ^ targetTypeNames);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="targetTypeNames">
          <span data-ttu-id="f8d19-151">제공된 메시지로부터 포맷터에 의해 deserialize될 사용 가능한 형식의 집합을 지정하는 <see cref="T:System.String" /> 형식의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-151">An array of type <see cref="T:System.String" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
          <span data-ttu-id="f8d19-152">이러한 값은 "MyNamespace.MyOrders, MyOrdersAssemblyName"처럼 정규화된 값이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-152">These values must be fully qualified, for example, "MyNamespace.MyOrders, MyOrdersAssemblyName".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d19-153">정규화된 문자열 값의 배열로 전달된 대상 형식을 설정하여 <see cref="T:System.Messaging.XmlMessageFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-153">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, setting target types passed in as an array of (fully qualified) string values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-154">대상 형식 매개 변수가 있는 생성자는 큐에서 읽을 때 가장 자주 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-154">The constructors with target type parameters are most frequently used when reading from the queue.</span></span> <span data-ttu-id="f8d19-155">를 작성할 때 대상 유형을 지정할 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-155">When writing, it is not necessary to specify target types.</span></span>  
  
 <span data-ttu-id="f8d19-156">이 오버 로드는 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 생성자는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 속성을 통해 전달 된 배열의 값은 `targetTypeNames` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-156">This overload of the <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> constructor sets the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> property to the array values passed in through the `targetTypeNames` parameter.</span></span> <span data-ttu-id="f8d19-157">이 속성을 사용 하면 설정은 <xref:System.Messaging.MessageQueue> 이 사용 하 여 <xref:System.Messaging.XmlMessageFormatter> 인스턴스 개체가 포함 된 메시지를 읽을 형식 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-157">Setting this property enables a <xref:System.Messaging.MessageQueue> using this <xref:System.Messaging.XmlMessageFormatter> instance to read messages containing objects of given types.</span></span>  
  
 <span data-ttu-id="f8d19-158">둘 다는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알려 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-158">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="f8d19-159">이렇게 하면 메시지 본문의 해석 하는 포맷터입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-159">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="f8d19-160">형식 배열에 있는 스키마 중 하나를 사용 하 여 메시지 본문에 serialize 된 인스턴스를 따라야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-160">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="f8d19-161">사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드 메서드를 식별 하는 스키마에 해당 하는 메시지 본문 읽어들입니다 형식의 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-161">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="f8d19-162">두 속성 중 하나에만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-162">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="f8d19-163">형식 집합이 결합된 된 집합은 두 속성이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-163">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="f8d19-164">응용 프로그램에 있는를 결정 하는 1에서 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-164">The decision of which one to use is specific to your application.</span></span> <span data-ttu-id="f8d19-165">메시지 본문 스키마와 일치 하지 않으므로 형식 속성 중 하나에 대 한 배열에는 형식을 포함 하는 경우 읽기 시 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-165">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</span></span>  
  
   
  
## Examples  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d19-166">
            <paramref name="targetTypeNames" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-166">The <paramref name="targetTypeNames" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (Type[] targetTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type[] targetTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;Type ^&gt; ^ targetTypes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="targetTypes">
          <span data-ttu-id="f8d19-167">제공된 메시지로부터 포맷터에 의해 deserialize될 사용 가능한 형식의 집합을 지정하는 <see cref="T:System.Type" /> 형식의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-167">An array of type <see cref="T:System.Type" /> that specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d19-168">개체 형식의 배열로 전달된 대상 형식을 설정하여 <see cref="T:System.Messaging.XmlMessageFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-168">Initializes a new instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class, setting target types passed in as an array of object types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-169">대상 형식 매개 변수가 있는 생성자는 큐에서 읽을 때 가장 자주 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-169">The constructors with target type parameters are most frequently used when reading from the queue.</span></span> <span data-ttu-id="f8d19-170">를 작성할 때 대상 유형을 지정할 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-170">When writing, it is not necessary to specify target types.</span></span>  
  
 <span data-ttu-id="f8d19-171">이 오버 로드는 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 생성자는 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성을 통해 전달 된 배열의 값은 `targetTypes` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-171">This overload of the <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> constructor sets the <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> property to the array values passed in through the `targetTypes` parameter.</span></span> <span data-ttu-id="f8d19-172">이 속성을 사용 하면 설정 된 <xref:System.Messaging.MessageQueue> 이 사용 하 여 <xref:System.Messaging.XmlMessageFormatter> 인스턴스 메시지에서 지정 된 형식의 개체가 포함 된 읽기를 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-172">Setting this property enables a <xref:System.Messaging.MessageQueue> using this <xref:System.Messaging.XmlMessageFormatter> instance to read messages containing objects of the given types.</span></span>  
  
 <span data-ttu-id="f8d19-173">둘 다는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알려 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-173">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="f8d19-174">이렇게 하면 메시지 본문의 해석 하는 포맷터입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-174">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="f8d19-175">형식 배열에 있는 스키마 중 하나를 사용 하 여 메시지 본문에 serialize 된 인스턴스를 따라야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-175">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="f8d19-176">사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드 메서드를 식별 하는 스키마에 해당 하는 메시지 본문 읽어들입니다 형식의 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-176">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="f8d19-177">두 속성 중 하나에만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-177">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="f8d19-178">형식 집합이 결합된 된 집합은 두 속성이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-178">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="f8d19-179">응용 프로그램에 있는를 결정 하는 1에서 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-179">The decision of which one to use is specific to your application.</span></span> <span data-ttu-id="f8d19-180">메시지 본문 스키마와 일치 하지 않으므로 형식 속성 중 하나에 대 한 배열에는 형식을 포함 하는 경우 읽기 시 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-180">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown at read time.</span></span>  
  
 <span data-ttu-id="f8d19-181">지정 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 대신 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, 오류가 발생할 가능성이 줄어듭니다 읽기 시간 보다는 컴파일 타임에 형식이 존재를 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-181">When specifying <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> rather than <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, type existence is checked at compile time rather than read time, reducing possibility for error.</span></span> <span data-ttu-id="f8d19-182"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 정규화 된 어셈블리 이름을 지정 하 되도록 모든 항목이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-182"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> requires every entry to be fully qualified, specifying its assembly name.</span></span> <span data-ttu-id="f8d19-183">또한 여러 동시 작업 버전에서 작업할 때는 버전 번호는 대상 형식 이름에 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-183">Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</span></span>  
  
 <span data-ttu-id="f8d19-184">사용 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, 각 개체를 추가할 수 있습니다 (예를 들어 `MyClass`) 다음 C# 코드에서와 같은 방법으로 목록에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-184">When using <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, you can add each object (for example, `MyClass`) to the list in a way demonstrated by the following C# code.</span></span>  
  
```  
TargetTypes = new Type[]{typeof(MyClass)}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d19-185">
            <paramref name="targetTypes" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-185">The <paramref name="targetTypes" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="f8d19-186">검사할 <see cref="T:System.Messaging.Message" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-186">The <see cref="T:System.Messaging.Message" /> to inspect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d19-187">포맷터에서 메시지를 deserialize할 수 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-187">Determines whether the formatter can deserialize the message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d19-188">XML 포맷터에서 메시지를 읽을 수 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-188">
              <see langword="true" /> if the XML formatter can deserialize the message; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-189">때 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 호출 되는 메시지의 내용을 deserialize 할 수 있는 문제가 되었는지 여부를 확인할 포맷터 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-189">When <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> is called, the formatter attempts to determine if the contents of the message are something it can deserialize.</span></span> <span data-ttu-id="f8d19-190">형식에 있는 경우 메시지 본문에 같은 스키마 형식 중 하나에 의해 표현 된 배열의 포맷터에서 메시지를 읽을 수는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-190">The formatter can only deserialize the message if the type in the message body has the same schema as one of the types in the array represented by the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties.</span></span> <span data-ttu-id="f8d19-191"><xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 반환 `false` 는 다음 두 가지 상황에서:</span><span class="sxs-lookup"><span data-stu-id="f8d19-191"><xref:System.Messaging.XmlMessageFormatter.CanRead%2A> returns `false` under the following two circumstances:</span></span>  
  
-   <span data-ttu-id="f8d19-192">메시지를 사용 하 여 형식이 지정 되지 않았습니다 고 <xref:System.Messaging.XmlMessageFormatter>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-192">The message was not formatted using the <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
-   <span data-ttu-id="f8d19-193">메시지 본문의 스키마가 하나에 나열 된는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 또는 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-193">The schema of the message body is not among those listed in either the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> property.</span></span>  
  
 <span data-ttu-id="f8d19-194"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알려 포맷터 어떤 유형의 개체 수 있어야를 역직렬화 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-194">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what types of objects it must be able to deserialize.</span></span> <span data-ttu-id="f8d19-195">모든 형식 목록에서 누락을 아직 메시지 내에서 발견 되 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-195">If any type is missing from the list, yet is found within the message, <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f8d19-196">
            <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 및 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 속성을 모두 설정하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-196">Neither the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> nor <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property has been set.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d19-197">
            <paramref name="message" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-197">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f8d19-198">현재 <see cref="T:System.Messaging.XmlMessageFormatter" /> 인스턴스와 읽기/쓰기 속성(대상 형식의 집합)이 같은 <see cref="T:System.Messaging.XmlMessageFormatter" />의 인스턴스를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-198">Creates an instance of the <see cref="T:System.Messaging.XmlMessageFormatter" /> class whose read/write properties (the sets of target types) are the same as the current <see cref="T:System.Messaging.XmlMessageFormatter" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d19-199">이 <see cref="T:System.Messaging.XmlMessageFormatter" /> 인스턴스와 속성이 같지만 해당 메타데이터에서 포맷터 클래스 인스턴스가 되도록 지정되지 않은 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-199">An object whose properties are identical to those of this <see cref="T:System.Messaging.XmlMessageFormatter" /> instance, but whose metadata does not specify it to be a formatter class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-200">이 메서드는 포맷터의 복사본을 만들고 모든 속성의 값을 초기화 <xref:System.Messaging.XmlMessageFormatter> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-200">This method creates a copy of the formatter and initializes all its properties to the values of this <xref:System.Messaging.XmlMessageFormatter> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="f8d19-201">deserialize될 <see cref="T:System.Messaging.Message" />(XML 형식)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-201">The <see cref="T:System.Messaging.Message" />, in XML format, to deserialize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d19-202">지정된 메시지의 내용을 읽고 deserialize된 메시지가 포함된 개체를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-202">Reads the contents from the given message and creates an object that contains the deserialized message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d19-203">deserialize된 메시지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-203">The deserialized message.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-204">둘 다는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알려 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-204">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="f8d19-205">이러한 속성 중 하나는 메시지를 역직렬화 할 수 전에 설정 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-205">One of these properties must be set before the message can be deserialized.</span></span>  
  
 <span data-ttu-id="f8d19-206">형식 배열에 있는 스키마 중 하나를 사용 하 여 메시지 본문에 serialize 된 인스턴스를 따라야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-206">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="f8d19-207">사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드 메서드를 식별 하는 스키마에 해당 하는 메시지 본문 읽어들입니다 형식의 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-207">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="f8d19-208">대상 유형을 큐에 쓰려면 지정할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-208">The target types do not have to be specified in order to write to the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f8d19-209">
            <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 및 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 속성을 모두 설정하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-209">Neither the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> nor <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property has been set.</span>
          </span>
          <span data-ttu-id="f8d19-210">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-210">-or-</span>
          </span>
          <span data-ttu-id="f8d19-211">메시지 본문에 serialize된 인스턴스가 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 및 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 속성에 표시된 어느 특성도 따르지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-211">The instance serialized in the message body does not comply with any of the schemas represented by the types in the <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> and <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> properties.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d19-212">
            <paramref name="message" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-212">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeNames">
      <MemberSignature Language="C#" Value="public string[] TargetTypeNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetTypeNames" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypeNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetTypeNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f8d19-213">제공된 메시지로부터 포맷터에 의해 deserialize될 사용 가능한 형식의 집합을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-213">Specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f8d19-214">메시지를 읽을 때 메시지 본문에서 deserialize되는 개체의 형식을 지정하는 <see cref="T:System.String" /> 형식의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-214">An array of type <see cref="T:System.String" /> that specifies the types of objects to deserialize from the message body when reading the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-215">둘 다는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알려 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-215">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="f8d19-216">이렇게 하면 메시지 본문의 해석 하는 포맷터입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-216">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="f8d19-217">형식 배열에 있는 스키마 중 하나를 사용 하 여 메시지 본문에 serialize 된 인스턴스를 따라야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-217">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="f8d19-218">사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드 메서드를 식별 하는 스키마에 해당 하는 메시지 본문 읽어들입니다 형식의 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-218">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="f8d19-219">두 속성 중 하나에만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-219">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="f8d19-220">형식 집합이 결합된 된 집합은 두 속성이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-220">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="f8d19-221">응용 프로그램에 사용할 속성을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-221">The decision of which property to use is specific to your application.</span></span> <span data-ttu-id="f8d19-222">스키마와 일치 하지 않으므로 두 속성 중 하나에 대 한 배열에 있는 형식의 형식을 포함 하는 메시지 본문, 메시지를 읽을 때 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-222">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</span></span>  
  
 <span data-ttu-id="f8d19-223"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 정규화 된 어셈블리 이름을 지정 하 되도록 모든 항목이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-223"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> requires every entry to be fully qualified, specifying its assembly name.</span></span> <span data-ttu-id="f8d19-224">또한 여러 동시 작업 버전에서 작업할 때는 버전 번호는 대상 형식 이름에 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-224">Further, when working with multiple concurrent versions, the version number must also be appended to the target type name as well.</span></span>  
  
 <span data-ttu-id="f8d19-225">대상 유형은 큐에서 읽는 경우에 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-225">The target types are only required when reading from the queue.</span></span> <span data-ttu-id="f8d19-226"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 큐에 쓸 수에 대해 설정할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-226">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties do not need to be set to write to the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d19-227">
            <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 속성은 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-227">The <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> property is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public Type[] TargetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] TargetTypes" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypes As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Type ^&gt; ^ TargetTypes { cli::array &lt;Type ^&gt; ^ get(); void set(cli::array &lt;Type ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f8d19-228">제공된 메시지로부터 포맷터에 의해 deserialize될 사용 가능한 형식의 집합을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-228">Specifies the set of possible types that will be deserialized by the formatter from the message provided.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f8d19-229">메시지를 읽을 때 메시지 본문에서 deserialize되는 개체의 형식을 지정하는 <see cref="T:System.Type" /> 형식의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-229">An array of type <see cref="T:System.Type" /> that specifies the types of objects to deserialize from the message body when reading the message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-230">둘 다는 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 알려 포맷터는 스키마를 메시지를 역직렬화 하는 동안 일치 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-230">Both the <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties tell the formatter what schemas to attempt to match when deserializing a message.</span></span> <span data-ttu-id="f8d19-231">이렇게 하면 메시지 본문의 해석 하는 포맷터입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-231">This allows the formatter to interpret the message body.</span></span>  
  
 <span data-ttu-id="f8d19-232">형식 배열에 있는 스키마 중 하나를 사용 하 여 메시지 본문에 serialize 된 인스턴스를 따라야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-232">The instance serialized in the message body must comply with one of the schemas represented in the type array.</span></span> <span data-ttu-id="f8d19-233">사용 하 여 메시지를 읽을 때의 <xref:System.Messaging.MessageQueue.Receive%2A> 메서드 메서드를 식별 하는 스키마에 해당 하는 메시지 본문 읽어들입니다 형식의 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-233">When you read the message using the <xref:System.Messaging.MessageQueue.Receive%2A> method, the method creates an object of the type that corresponds to the schema identified and reads the message body into it.</span></span>  
  
 <span data-ttu-id="f8d19-234">두 속성 중 하나에만 큐에서 읽을 때 설정 해야 하지만 둘 다 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-234">Only one of the two properties needs to be set when reading from the queue, but you can set both.</span></span> <span data-ttu-id="f8d19-235">형식 집합이 결합된 된 집합은 두 속성이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-235">The set of types is the combined set from the two properties.</span></span> <span data-ttu-id="f8d19-236">응용 프로그램에 사용할 속성을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-236">The decision of which property to use is specific to your application.</span></span> <span data-ttu-id="f8d19-237">스키마와 일치 하지 않으므로 두 속성 중 하나에 대 한 배열에 있는 형식의 형식을 포함 하는 메시지 본문, 메시지를 읽을 때 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-237">If the message body contains a type whose schema does not match any of the types in the array for either property, an exception will be thrown when the message is read.</span></span>  
  
 <span data-ttu-id="f8d19-238">대상 유형은 큐에서 읽는 경우에 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-238">The target types are only required when reading from the queue.</span></span> <span data-ttu-id="f8d19-239"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 및 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성 큐에 쓸 수에 대해 설정할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-239">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> and <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> properties do not need to be set to write to the queue.</span></span>  
  
 <span data-ttu-id="f8d19-240">지정 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 대신 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, 오류가 발생할 가능성이 줄어듭니다 읽기 시간 보다는 컴파일 타임에 형식이 존재를 검사 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-240">When specifying <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> rather than <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, type existence is checked at compile time rather than read time, reducing possibility for error.</span></span>  
  
 <span data-ttu-id="f8d19-241">사용 하는 경우 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, 각 개체를 추가할 수 있습니다 (예를 들어 `MyClass`) 목록에 C# 코드에서와 같은 방법으로 `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-241">When using <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, you can add each object (for example, `MyClass`) to the list in a way demonstrated by the C# code `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d19-242">다음 코드 예제는 큐에서 주문에 포함 된 메시지 송수신 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-242">The following code example sends and receives a message that contains an order to and from a queue.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d19-243">
            <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 속성은 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-243">The <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> property is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="f8d19-244">
            <see cref="T:System.Messaging.Message" /> 속성에 serialize된 개체가 포함될 <see cref="P:System.Messaging.Message.Body" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-244">The <see cref="T:System.Messaging.Message" /> whose <see cref="P:System.Messaging.Message.Body" /> property will contain the serialized object.</span>
          </span>
        </param>
        <param name="obj">
          <span data-ttu-id="f8d19-245">메시지 본문으로 serialize될 <see cref="T:System.Object" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-245">The <see cref="T:System.Object" /> to be serialized into the message body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d19-246">메시지 본문으로 개체를 serialize합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-246">Serializes an object into the body of the message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d19-247">대상 유형은 지정할 필요가 없습니다 읽을 때 있어야 큐에 쓰려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-247">The target types need not be specified to write to the queue as they must be when reading.</span></span> <span data-ttu-id="f8d19-248"><xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 또는 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 속성은 메시지를 역직렬화 하는 경우에 포맷터에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-248">The <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> or <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> property is used by the formatter only when deserializing a message.</span></span>  
  
 <span data-ttu-id="f8d19-249"><xref:System.Messaging.XmlMessageFormatter> 를 사용 하 여 <xref:System.Xml.Serialization.XmlSerializer> serialize 할 수 있는 정의 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-249">The <xref:System.Messaging.XmlMessageFormatter> makes use of the <xref:System.Xml.Serialization.XmlSerializer> class, which defines what can be serialized.</span></span> <span data-ttu-id="f8d19-250">만 공용 필드 및 공용 속성을 serialize 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-250">Only public fields and public properties can be serialized.</span></span> <span data-ttu-id="f8d19-251">구조, 배열 및 배열 구조를 사용 하 여 구조는 모든 직렬화 가능으로 인코딩된 스타일은 SOAP 프로토콜에 사용 하지 않도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d19-251">Structures, structures with arrays, and arrays of structures are all serializable, as long as they do not use the encoded style with the SOAP protocol.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d19-252">
            <paramref name="message" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-252">The <paramref name="message" /> parameter is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d19-253">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-253">-or-</span>
          </span>
          <span data-ttu-id="f8d19-254">
            <paramref name="obj" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d19-254">The <paramref name="obj" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>