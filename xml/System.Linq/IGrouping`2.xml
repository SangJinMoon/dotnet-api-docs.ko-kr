<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IGrouping`2.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c47c1df4018603d8fc86527dc772198530aa223ae.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47c1df4018603d8fc86527dc772198530aa223ae</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>The type of the key of the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>의 키 형식입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>The type of the values in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>의 값 형식입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.IGrouping`2">
          <source>Represents a collection of objects that have a common key.</source>
          <target state="translated">공통 키가 있는 개체 컬렉션을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that additionally has a key.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 는 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 또한에 있는 키입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>The key represents the attribute that is common to each value in the <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">키의 각 값에 공통적으로 적용 되는 특성을 나타내는 <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>The values of an <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> are accessed much as the elements of an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> are accessed.</source>
          <target state="translated">값은 <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 의 요소와 훨씬 액세스는 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 액세스 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>For example, you can access the values by using a <ph id="ph1">`foreach`</ph> in Visual C# or <ph id="ph2">`For Each`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> loop to iterate through the <ph id="ph4">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object.</source>
          <target state="translated">예를 들어, 사용 하 여 값에 액세스할 수 있습니다는 <ph id="ph1">`foreach`</ph> Visual C# 또는 <ph id="ph2">`For Each`</ph> 에 <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> 루프에서 반복 하는 <ph id="ph4">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>The Example section contains a code example that shows you how to access both the key and the values of an <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object.</source>
          <target state="translated">"예" 섹션에 키와 값을 액세스 하는 방법을 보여 주는 코드 예제가 포함 되어 있는 <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> type is used by the <ph id="ph2">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph> standard query operator methods, which return a sequence of elements of type <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 형식에서 사용 되는 <ph id="ph2">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph> 형식의 요소 시퀀스를 반환 하는 표준 쿼리 연산자 메서드의 <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>The following example demonstrates how to work with an <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 사용 하는 <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>In this example, <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> is called on the array of <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects returned by <ph id="ph3">&lt;xref:System.Type.GetMembers%2A&gt;</ph>.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> 의 배열에 라고 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> 에서 반환 된 개체 <ph id="ph3">&lt;xref:System.Type.GetMembers%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> groups the objects based on the value of their <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> 값에 따라 개체를 그룹화가 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>Each unique value for <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> in the array of <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects becomes a key for a new <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object, and the <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objects that have that key form the <ph id="ph5">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object's sequence of values.</source>
          <target state="translated">각 고유 값에 대 한 <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.MemberType%2A&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph> 개체 키가 되는 새 <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체 및 <ph id="ph4">&lt;xref:System.Reflection.MemberInfo&gt;</ph> 해당 키 형식을 사용 하는 개체는 <ph id="ph5">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 값의 시퀀스 개체의 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%2A&gt;</ph> method is called on the sequence of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects to obtain just the first <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object.</source>
          <target state="translated">마지막으로 <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%2A&gt;</ph> 메서드는 시퀀스에 <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 첫 번째 개체 <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>The example then outputs the key of the <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object and the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> property of each value in the <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object's sequence of values.</source>
          <target state="translated">이 예제에서는 다음의 키를 출력는 <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체 및 <ph id="ph2">&lt;xref:System.Reflection.MemberInfo.Name%2A&gt;</ph> 의 각 값의 속성은 <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 값의 시퀀스 개체의 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IGrouping`2">
          <source>Notice that to access an <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object's sequence of values, you simply use the <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> variable itself.</source>
          <target state="translated">액세스 하는 프로그램 <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 값 개체의 시퀀스를 그대로 사용 하면는 <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 변수 자체입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Linq.IGrouping`2.Key">
          <source>Gets the key of the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>의 키를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.IGrouping`2.Key">
          <source>The key of the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>의 키입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.IGrouping`2.Key">
          <source>The key of an <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> represents the attribute that is common to each value in the <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">키는 <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 의 각 값에 공통적으로 적용 되는 특성을 나타내는 <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.IGrouping`2.Key">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.IGrouping%602.Key%2A&gt;</ph> property to label each <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object in a sequence of <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Linq.IGrouping%602.Key%2A&gt;</ph> 에 각각 레이블을 지정 하는 속성 <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체 시퀀스의 <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.IGrouping`2.Key">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method is used to obtain a sequence of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> 메서드의 시퀀스를 가져옵니다는 <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.IGrouping`2.Key">
          <source>The <ph id="ph1">`foreach`</ph> in Visual C# or <ph id="ph2">`For Each`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> loop then iterates through each <ph id="ph4">&lt;xref:System.Linq.IGrouping%602&gt;</ph> object, outputting its key and the number of values it contains.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> Visual C# 또는 <ph id="ph2">`For Each`</ph> 에 <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> 을 각 루프 반복 <ph id="ph4">&lt;xref:System.Linq.IGrouping%602&gt;</ph> 개체를 해당 키와 포함 된 값의 수를 출력 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>