<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IQueryable`1.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5cd9bbf59b99fa01f9cd26081e78ad3eccd4f035d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd9bbf59b99fa01f9cd26081e78ad3eccd4f035d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>The type of the data in the data source.</source>
          <target state="translated">데이터 소스의 데이터 형식입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.IQueryable`1">
          <source>Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</source>
          <target state="translated">데이터 형식을 알 수 있는 특정 데이터 원본에 대한 쿼리를 평가하는 기능을 제공합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface is intended for implementation by query providers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> 쿼리 공급자가 인터페이스는 구현을 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>This interface inherits the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface so that if it represents a query, the results of that query can be enumerated.</source>
          <target state="translated">이 인터페이스가 상속 된 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 인터페이스는 쿼리를 나타내는 경우 해당 쿼리의 결과 열거할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>Enumeration forces the expression tree associated with an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> object to be executed.</source>
          <target state="translated">열거를 수행 하면 연결 된 식 트리는 <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> 실행할 개체입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>Queries that do not return enumerable results are executed when the <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method is called.</source>
          <target state="translated">열거 가능한 결과 반환 하지 않는 쿼리를 실행 하는 경우는 <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>The definition of "executing an expression tree" is specific to a query provider.</source>
          <target state="translated">"는 식 트리 실행"의 정의 쿼리 공급자 관련이 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>For example, it may involve translating the expression tree to a query language appropriate for an underlying data source.</source>
          <target state="translated">예를 들어, 식 트리를 데이터 원본에 대 한 적합 한 쿼리 언어로 변환 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface enables queries to be polymorphic.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> 인터페이스를 쿼리 하세요를 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>That is, because a query against an <ph id="ph1">`IQueryable`</ph> data source is represented as an expression tree, it can be executed against different types of data sources.</source>
          <target state="translated">즉, 때문에 대 한 쿼리는 <ph id="ph1">`IQueryable`</ph> 데이터 소스는 식 트리로 표시 됩니다, 다양 한 유형의 데이터 원본에 대해 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>The <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) methods defined in the class <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph> (except for <ph id="ph4">&lt;xref:System.Linq.Queryable.AsQueryable%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.ThenBy%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Linq.Queryable.ThenByDescending%2A&gt;</ph>) extend objects of types that implement the <ph id="ph7">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> Visual basic에서) 클래스에 정의 된 메서드 <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph> (제외 하 고 <ph id="ph4">&lt;xref:System.Linq.Queryable.AsQueryable%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.ThenBy%2A&gt;</ph>, 및 <ph id="ph6">&lt;xref:System.Linq.Queryable.ThenByDescending%2A&gt;</ph>) 구현 하는 형식의 개체를 확장는 <ph id="ph7">&lt;xref:System.Linq.IQueryable%601&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.IQueryable`1">
          <source>For more information about how to create your own LINQ provider, see <bpt id="p1">[</bpt>LINQ: Building an IQueryable Provider<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=112370)</ept> on MSDN Blogs.</source>
          <target state="translated">LINQ 공급자를 만드는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>LINQ: IQueryable 공급자 빌드<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=112370)</ept> on MSDN 블로그.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>