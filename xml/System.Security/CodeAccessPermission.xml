<Type Name="CodeAccessPermission" FullName="System.Security.CodeAccessPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b497a3cd20cb1d0ae8172ce6caf259ae001ddee0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30500857" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit CodeAccessPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.CodeAccessPermission" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeAccessPermission&#xA;Implements IPermission, IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeAccessPermission abstract : System::Security::IPermission, System::Security::IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IStackWalk</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>모든 코드 액세스 권한의 기본 구조를 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 코드 액세스 권한 스택 워크를 사용 하 여 사용 권한을 코드의 모든 호출자에 게 부여 되어 있는지 확인 하십시오. 사용 권한 개체가 `null`, 상태와 사용 권한 개체와 동일한 처리 <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>합니다.  
  
 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.  
  
 상속자는 <xref:System.Security.CodeAccessPermission> 클래스 보안 인프라를 확장 하는 권한으로 제대로 작동 하려면 완전 신뢰를 부여 해야 합니다. 상속 자가 완전히 신뢰할 수 있는지 확인 하려면 <xref:System.Security.CodeAccessPermission> 문제는 <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> 에 대 한 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence>  =  `true` 및 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy>  =  `true`합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는에서 파생 된 사용 권한을 <xref:System.Security.CodeAccessPermission> 클래스입니다.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#1)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#1)]
 [!code-vb[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">증명 정보 및 보기를 제공 하 고 정책을 수정 상속자 수 있습니다. 연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />합니다.</permission>
    <block subset="none" type="overrides">
      <para>상속 하는 경우 <see cref="T:System.Security.CodeAccessPermission" />를 구현 해야는 <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> 인터페이스입니다.  
  
 다음 <see cref="T:System.Security.CodeAccessPermission" /> 멤버를 재정의 해야 합니다: <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, 및 <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />합니다.  
  
 사용 하는 생성자도 정의 해야는 <see cref="T:System.Security.Permissions.PermissionState" /> 유일한 매개 변수로 합니다.  
  
 적용 해야 합니다는 <see cref="T:System.SerializableAttribute" /> 에서 상속 되는 클래스에 특성 <see cref="T:System.Security.CodeAccessPermission" />합니다.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeAccessPermission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeAccessPermission();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.CodeAccessPermission" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 호출 하 여 파생된 클래스의 인스턴스를 만들 때마다 형식의 상태를 초기화 하 합니다. 파생된 클래스 생성자의 생성자 선언에이 생성자를 명시적으로 호출할 수, 있지만이 대개 필요는 없습니다. 대부분의 컴파일러에서는 사용자에 대 한 호출을 자동으로 생성 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Assert();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>스택의 상위 호출자에게 리소스에 액세스할 수 있는 권한이 부여되지 않더라도 호출 코드가 이 메서드를 호출하는 코드를 통해 사용 권한 요구로 보호되는 리소스에 액세스할 수 있음을 선언합니다. <see cref="M:System.Security.CodeAccessPermission.Assert" />를 사용하면 보안 문제가 발생할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다. 호출 <xref:System.Security.CodeAccessPermission.Assert%2A> 이 메서드를 호출 하는 코드를 넘어 진행에서 호출 스택을에서 더 아래로 발생 스택 워크 수 없습니다. 따라서 호출 스택의 상위 호출자에 리소스를 액세스할 수 있는 필수 권한이 없는 경우에은 여전히 액세스할 수는 데 필요한 사용 권한을이 메서드를 호출 하는 코드를 통해. 어설션을 코드를 호출 하는 경우에 유효 <xref:System.Security.CodeAccessPermission.Assert%2A> 어설션하는 사용 권한에 대해 보안 검사를 통과 합니다.  
  
 에 대 한 호출 <xref:System.Security.CodeAccessPermission.Assert%2A> 호출 하는 코드는 호출자에 반환 될 때까지 유효 합니다. 하나의 <xref:System.Security.CodeAccessPermission.Assert%2A> 프레임에서 활성화 될 수 있습니다. 호출 하려고 <xref:System.Security.CodeAccessPermission.Assert%2A> 때 활성 <xref:System.Security.CodeAccessPermission.Assert%2A> 프레임 결과 따라 존재는 <xref:System.Security.SecurityException>합니다. 호출 <xref:System.Security.CodeAccessPermission.RevertAssert%2A> 또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A> 활성을 제거 하려면 <xref:System.Security.CodeAccessPermission.Assert%2A>합니다.  
  
 <xref:System.Security.CodeAccessPermission.Assert%2A> 권한에 대 한 요청이 실패 합니다 부여 되지 않은 사용 권한을 무시 됩니다. 그러나 코드가 호출 스택에 낮은 호출 <xref:System.Security.CodeAccessPermission.Demand%2A> 권한에 대해는 <xref:System.Security.SecurityException> 스택 워크를 호출 하려고 하는 코드에 도달 하면 throw 되 <xref:System.Security.CodeAccessPermission.Assert%2A>합니다. 코드를 호출 하기 때문에 이런 <xref:System.Security.CodeAccessPermission.Assert%2A> 가 부여 되지 권한, 하 려 했지만 <xref:System.Security.CodeAccessPermission.Assert%2A> 것입니다.  
  
> [!CAUTION]
>  호출 하기 때문에 <xref:System.Security.CodeAccessPermission.Assert%2A> 호출 체인에 모든 코드가 요구 해야 권한이 제거 지정 된 리소스에 액세스할 수, 메서드를 잘못 사용할 경우 보안 문제가 발생할 수 있습니다. 따라서 매우 주의 해 서 사용 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">호출 코드에 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />이 없습니다.  
  
 또는  
  
 현재 프레임에 대해 활성 <see cref="M:System.Security.CodeAccessPermission.Assert" />가 이미 있습니다.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">호출 하는 기능에 대 한 <see cref="M:System.Security.CodeAccessPermission.Assert" />합니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></permission>
        <block subset="none" type="overrides">
          <para>이 메서드를 재정의할 수 없습니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생된 클래스에 의해 구현될 때 현재 권한 개체의 동일한 복사본을 만들어서 반환합니다.</summary>
        <returns>현재 권한 개체의 복사본입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 권한 개체의 복사본을 원래 권한 개체 리소스에 동일한 액세스를 권한을 나타냅니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.Copy%2A> 메서드. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#2)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#2)]
 [!code-vb[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생된 클래스에서이 메서드를 재정의 해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>호출 스택의 상위 호출자에게 현재 인스턴스로 지정된 권한이 없는 경우 런타임에 <see cref="T:System.Security.SecurityException" />을 강제 적용합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 일반적으로 호출자에 게 리소스에 액세스할 수 있는 권한이 있는지 확인 하려면 보안 라이브러리에서 사용 됩니다. 예를 들어 보안 클래스 라이브러리의 파일 클래스 호출 <xref:System.Security.CodeAccessPermission.Demand%2A> 필요한 <xref:System.Security.Permissions.FileIOPermission> 는 호출자가 요청한 파일 작업을 수행 합니다.  
  
 이 메서드를 호출 하는 코드의 사용 권한은 검사 하지 않습니다. 검사 해당 코드의 직접 실행 호출자에서 시작 되 고 스택 위로 진행 됩니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다. <xref:System.Security.CodeAccessPermission.Demand%2A> 없는 경우에 성공 <xref:System.Security.SecurityException> 발생 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">호출 스택의 상위에 있는 호출자에게 현재 인스턴스가 지정한 사용 권한이 없습니다.  
  
 또는  
  
 호출 스택의 상위 호출자가 현재 사용 권한 개체에 대해 <see cref="M:System.Security.CodeAccessPermission.Deny" />를 호출했습니다.</exception>
        <block subset="none" type="overrides">
          <para>이 메서드를 재정의할 수 없습니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Deny();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>호출 스택의 상위 호출자가 이 메서드를 호출하는 코드를 사용하여 현재 인스턴스에 의해 지정된 리소스에 액세스하지 못하게 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Security.CodeAccessPermission.Deny%2A> 완전히 신뢰할 수 있는 코드에서 메서드를 실수로 액세스 로부터 리소스를 보호에 사용 해야 합니다. 하지 신뢰할 수 없는 코드 리소스 의도적인 악용 으로부터 보호 하기 위해 사용 해야 합니다. 예를 들어 경우 메서드 `A` 문제는 <xref:System.Security.CodeAccessPermission.Deny%2A> 사용 권한 및 다음 호출 메서드 `B`, 메서드 `B` 명백히 재정의할 수 있습니다는 <xref:System.Security.CodeAccessPermission.Deny%2A> 실행 하 여 프로그램 <xref:System.Security.CodeAccessPermission.Assert%2A>합니다. 호출된 된 메서드가 스택의 항상 높습니다. 따라서 경우 메서드 `B` 보안 시스템에서 보호 된 리소스에 액세스 하려고 하기 때문에 여 사용 권한을 확인 하기 시작 메서드 `B` 직접 실행 호출자 이며 워크 우선이 있는지 확인 하기 위해 스택의 없습니다 <xref:System.Security.CodeAccessPermission.Deny%2A> 또는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 스택의 더 낮은 합니다. 메서드 `B`, 리소스에 액세스 하려고 하는 수는 스택 워크 즉시 사용 하 여 중지 된 <xref:System.Security.CodeAccessPermission.Assert%2A> 메서드. 이 경우에 <xref:System.Security.CodeAccessPermission.Deny%2A> 메서드에서 스택에 배치 `A` (호출 하는 방법)가 검색 되지 않습니다.  
  
 이 메서드는 호출 스택의 상위 호출자가 해당 호출자가 액세스할 수 있는 권한이 부여 되어 있는 경우에이 메서드를 호출 하는 코드를 통해 보호 된 리소스에 액세스 하지 못하도록 방지 합니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.  
  
 <xref:System.Security.CodeAccessPermission.Deny%2A> 프로그래머의 책임을 제한 하거나 호출 하는 메서드를 방지할 수 있으므로 실수로 인 한 보안 문제를 방지할 수 있습니다 <xref:System.Security.CodeAccessPermission.Deny%2A> 에서 거부 된 권한으로 보호 되는 리소스에 액세스 하는 데 사용 되 고 있습니다. 메서드를 호출 하는 경우 <xref:System.Security.CodeAccessPermission.Deny%2A> 권한, 경우에 <xref:System.Security.CodeAccessPermission.Demand%2A> 에 도달 하면 해당 보안 검사에서 실패에 해당 권한이 하위 호출 스택의 호출자가 호출 되는 <xref:System.Security.CodeAccessPermission.Deny%2A>합니다.  
  
 에 대 한 호출 <xref:System.Security.CodeAccessPermission.Deny%2A> 호출 하는 코드는 호출자에 반환 될 때까지 유효 합니다. 하나의 <xref:System.Security.CodeAccessPermission.Deny%2A> 프레임에서 활성화 될 수 있습니다. 호출 하려고 <xref:System.Security.CodeAccessPermission.Deny%2A> 때 활성 <xref:System.Security.CodeAccessPermission.Deny%2A> 프레임 결과 따라 존재는 <xref:System.Security.SecurityException>합니다. 호출 <xref:System.Security.CodeAccessPermission.RevertDeny%2A> 또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A> 활성을 제거 하려면 <xref:System.Security.CodeAccessPermission.Deny%2A>합니다. <xref:System.Security.CodeAccessPermission.Deny%2A> 권한에 대 한 요청이 실패 합니다 부여 되지 않은 사용 권한을 무시 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">현재 프레임에 대해 활성 <see cref="M:System.Security.CodeAccessPermission.Deny" />가 이미 있습니다.</exception>
        <block subset="none" type="overrides">
          <para>이 메서드를 재정의할 수 없습니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">현재 <see cref="T:System.Security.CodeAccessPermission" />와 비교할 <see cref="T:System.Security.CodeAccessPermission" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Security.CodeAccessPermission" /> 개체가 현재 <see cref="T:System.Security.CodeAccessPermission" />과 같은지 여부를 확인합니다.</summary>
        <returns>
          지정한 <see cref="T:System.Security.CodeAccessPermission" /> 개체가 현재  <see cref="T:System.Security.CodeAccessPermission" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은 <xref:System.Object.Equals%2A>을 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public abstract void FromXml (System.Security.SecurityElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub FromXml (elem As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void FromXml(System::Security::SecurityElement ^ elem);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elem" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="elem">보안 개체를 다시 생성하는 데 사용할 XML 인코딩입니다.</param>
        <summary>파생된 클래스에서 재정의되는 경우, XML 인코딩에서 지정된 상태의 보안 개체를 다시 생성합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 보안 개체를 확장 하는 사용자 지정 코드를 구현 해야는 <xref:System.Security.CodeAccessPermission.ToXml%2A> 및 <xref:System.Security.CodeAccessPermission.FromXml%2A> 보안 인코딩할 수 있는 개체를 만드는 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.FromXml%2A> 메서드. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#10)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#10)]
 [!code-vb[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="elem" /> 매개 변수가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="elem" /> 매개 변수에 현재 인스턴스와 동일한 형식의 인스턴스에 대한 XML 인코딩이 포함되어 있지 않은 경우  
  
 또는  
  
 <paramref name="elem" /> 매개 변수의 버전 번호가 지원되지 않는 경우</exception>
        <block subset="none" type="overrides">
          <para>파생된 클래스에서이 메서드를 재정의 해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>해시 알고리즘과 해시 테이블 같은 데이터 구조에 사용하기 적합한 <see cref="T:System.Security.CodeAccessPermission" /> 개체에 대한 해시 코드를 가져옵니다.</summary>
        <returns>현재 <see cref="T:System.Security.CodeAccessPermission" /> 개체의 해시 코드입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 인스턴스가 같은 권한의 대 한 해시 코드 서로 다를 수 있으므로 해시 코드를 사용 두 개를 비교 하 <xref:System.Security.CodeAccessPermission> 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">현재 사용 권한과 공통되는 사용 권한입니다. 현재 사용 권한과 동일한 형식이어야 합니다.</param>
        <summary>파생된 클래스에서 구현되는 경우 현재 사용 권한 및 지정된 사용 권한의 공통 권한을 만들어 반환합니다.</summary>
        <returns>현재 사용 권한 및 지정된 사용 권한의 공통 영역을 나타내는 새 사용 권한입니다. 교집합이 비어 있으면 새 사용 권한은 <see langword="null" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 사용 권한의 공통 사항에는 모두 공통으로 설명 하는 작업 집합을 설명 하는 권한입니다. 원래 사용 권한을 모두 전달 하는 요구만 교집합에 전달 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.Intersect%2A> 메서드. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#5)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#5)]
 [!code-vb[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> 매개 변수가 <see langword="null" />이 아니고 현재 사용 권한과 동일한 클래스의 인스턴스가 아닌 경우</exception>
        <block subset="none" type="overrides">
          <para>파생된 클래스에서이 메서드를 재정의 해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public abstract bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">하위 집합 관계에 대해 테스트할 사용 권한입니다. 이 사용 권한은 현재 권한과 동일한 형식이어야 합니다.</param>
        <summary>파생 클래스에 의해 구현될 경우 권한이 지정된 사용 권한의 하위 집합인지를 확인합니다.</summary>
        <returns>
          현재 사용 권한이 지정된 사용 권한의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 현재 권한은 현재 사용 권한이 지정된 된 사용 하 여 완전히 포함 된 작업의 집합을 지정 하는 경우 지정된 된 사용 권한의 하위 집합입니다. 예를 들어 c:\example.txt 있는 사용 권한을의 하위 집합인 c: \에 대 한 액세스를 나타내는 사용 권한의\\합니다. 이 메서드가 반환 하는 경우 `true`, 현재 사용 권한과 동일한 액세스 보호 된 리소스에 지정된 된 사용은 보다를 나타냅니다.  
  
 다음 문은 되어야 하는 데 필요한 `true` 의 모든 재정의 위한는 <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> 메서드. *X*, *Y*, 및 *Z* null 참조가 아닌 사용자 지정 코드 액세스 권한 개체 나타내는 *U* 제한 되지 않은 코드 액세스 권한을 나타내는 및 *N* 와 빈 권한을 나타내는 <xref:System.Security.Permissions.PermissionState> 의 <xref:System.Security.Permissions.PermissionState.None>합니다.  
  
-   *X*합니다. IsSubsetOf (*X*) 반환 `true`합니다.  
  
-   *X*합니다. IsSubsetOf (*Y*)과 동일한 값을 반환 *Y*합니다. IsSubsetOf (*X*) 경우에 *X* 및 *Y* 동일한 사용 권한 집합을 나타냅니다.  
  
-   경우 *X*합니다. IsSubsetOf (*Y*) 및 *Y*합니다. IsSubsetOf (*Z*) 둘 다 반환 `true`, *X*합니다. IsSubsetOf (*Z*) 반환 `true`합니다.  
  
-   *X*합니다. IsSubsetOf (*U*) 반환 `true`합니다.  
  
-   *X*합니다. IsSubsetOf (*N*) 반환 `false`합니다.  
  
-   *N*합니다. IsSubsetOf (*X*) 반환 `true`합니다.  
  
 경우 *X* 및 *Y* 사용자 지정 코드 액세스 권한 개체가 null 참조를 나타내는 *X*합니다. IsSubsetOf (*Y*) 반환 `true`합니다. 경우 *Z* 도 null, 복합 집합 연산 *X*합니다. Union (*Y*). IsSubsetOf (*Z*)도 반환 `true` 하므로 두 개의 null 사용 권한의 합집합 null 권한입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> 메서드. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#4)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#4)]
 [!code-vb[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> 매개 변수가 <see langword="null" />이 아니고 현재 사용 권한과 형식이 다른 경우</exception>
        <block subset="none" type="overrides">
          <para>파생된 클래스에서이 메서드를 재정의 해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PermitOnly();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>호출 스택의 상위 호출자가 이 메서드를 호출하는 코드를 사용하여 현재 인스턴스에 의해 지정된 리소스를 제외한 모든 리소스에 액세스하지 못하게 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 완전히 신뢰할 수 있는 코드에서 메서드를 실수로 액세스 로부터 리소스를 보호에 사용 해야 합니다. 하지 신뢰할 수 없는 코드 리소스 의도적인 악용 으로부터 보호 하기 위해 사용 해야 합니다. 예를 들어 경우 메서드 `A` 문제는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 사용 권한 및 다음 호출 메서드 `B`, 메서드 `B` 명백히 재정의할 수 있습니다는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 실행 하 여 프로그램 <xref:System.Security.CodeAccessPermission.Assert%2A>합니다. 호출된 된 메서드가 스택의 항상 높습니다. 따라서 경우 메서드 `B` 보안 시스템에서 보호 된 리소스에 액세스 하려고 하기 때문에 여 사용 권한을 확인 하기 시작 메서드 `B` 직접 실행 호출자 이며 워크 우선이 있는지 확인 하기 위해 스택의 없습니다 <xref:System.Security.CodeAccessPermission.Deny%2A> 또는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 스택의 더 낮은 합니다. 메서드 `B`, 리소스에 액세스 하려고 하는 수는 스택 워크 즉시 사용 하 여 중지 된 <xref:System.Security.CodeAccessPermission.Assert%2A> 메서드. 이 경우에 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 메서드에서 스택에 배치 `A` (호출 하는 방법)가 검색 되지 않습니다.  
  
 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 유사한 <xref:System.Security.CodeAccessPermission.Deny%2A>그렇지 않은 경우는 성공 시 작동이 실패 하도록 스택 워크 있는 상황에서, 합니다. 차이점은 <xref:System.Security.CodeAccessPermission.Deny%2A> 실패 하는 스택 워크를 발생 시키는 사용 권한을 지정 하지만 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 스택 워크 실패 하지 않게 되는 유일한 권한을 지정 합니다.  
  
 코드 지정 된 리소스에만 액세스할 수 사용 될 수 있도록 하려면이 메서드를 호출 합니다. 에 대 한 호출 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 호출 하는 코드는 호출자에 반환 될 때까지 유효 합니다. 하나의 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 프레임에서 활성화 될 수 있습니다. 호출 하려고 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 때 활성 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 프레임 결과 따라 존재는 <xref:System.Security.SecurityException>합니다. 호출 <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> 또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A> 활성을 제거 하려면 <xref:System.Security.CodeAccessPermission.PermitOnly%2A>합니다.  
  
 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 권한에 대 한 요청이 실패 합니다 부여 되지 않은 사용 권한을 무시 됩니다. 그러나 코드에 대 한 호출에 낮은 나중 스택 하는 경우 호출 <xref:System.Security.CodeAccessPermission.Demand%2A> 권한에 대해는 <xref:System.Security.SecurityException> 스택 워크를 호출 하려고 하는 코드에 도달 하면 throw 되 <xref:System.Security.CodeAccessPermission.PermitOnly%2A>합니다. 호출한 코드 때문에 이것이 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 에 권한이 부여 되지는 호출 했지만 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 권한에 합니다. 호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">현재 프레임에 대해 활성 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />가 이미 있습니다.</exception>
        <block subset="none" type="overrides">
          <para>이 메서드를 재정의할 수 없습니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RevertAll">
      <MemberSignature Language="C#" Value="public static void RevertAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAll" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 프레임에 대한 모든 이전 재정의가 제거되고 더 이상 적용되지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 재정의 없는 경우 (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, 또는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) 현재 프레임에 대 한는 <xref:System.ExecutionEngineException> throw 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">현재 프레임에 대한 이전 <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" /> 또는 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />가 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RevertAssert">
      <MemberSignature Language="C#" Value="public static void RevertAssert ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAssert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAssert" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAssert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAssert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 프레임에 대한 이전의 모든 <see cref="M:System.Security.CodeAccessPermission.Assert" />를 제거하여 더 이상 적용되지 않도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 없는 경우 없는 <xref:System.Security.CodeAccessPermission.Assert%2A> 현재 프레임에 대 한는 <xref:System.ExecutionEngineException> throw 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">현재 프레임에 대한 이전 <see cref="M:System.Security.CodeAccessPermission.Assert" />가 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RevertDeny">
      <MemberSignature Language="C#" Value="public static void RevertDeny ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertDeny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertDeny" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertDeny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertDeny();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 프레임에 대한 이전의 모든 <see cref="M:System.Security.CodeAccessPermission.Deny" />를 제거하여 더 이상 적용되지 않도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 없는 경우 없는 <xref:System.Security.CodeAccessPermission.Deny%2A> 현재 프레임에 대 한는 <xref:System.ExecutionEngineException> throw 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">현재 프레임에 대한 이전 <see cref="M:System.Security.CodeAccessPermission.Deny" />가 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="RevertPermitOnly">
      <MemberSignature Language="C#" Value="public static void RevertPermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertPermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertPermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertPermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertPermitOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 프레임에 대한 이전의 모든 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />를 제거하여 더 이상 적용되지 않도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 없는 경우 없는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 현재 프레임에 대 한는 <xref:System.ExecutionEngineException> throw 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">현재 프레임에 대한 이전 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />가 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IPermission.Demand">
      <MemberSignature Language="C#" Value="void IPermission.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IPermission.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IPermission#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IPermission.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IPermission.Demand() = System::Security::IPermission::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Assert">
      <MemberSignature Language="C#" Value="void IStackWalk.Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert" />
      <MemberSignature Language="VB.NET" Value="Sub Assert () Implements IStackWalk.Assert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Assert() = System::Security::IStackWalk::Assert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Demand">
      <MemberSignature Language="C#" Value="void IStackWalk.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IStackWalk.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Demand() = System::Security::IStackWalk::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Deny">
      <MemberSignature Language="C#" Value="void IStackWalk.Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny" />
      <MemberSignature Language="VB.NET" Value="Sub Deny () Implements IStackWalk.Deny" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Deny() = System::Security::IStackWalk::Deny;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.PermitOnly">
      <MemberSignature Language="C#" Value="void IStackWalk.PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Sub PermitOnly () Implements IStackWalk.PermitOnly" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.PermitOnly() = System::Security::IStackWalk::PermitOnly;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 사용 권한 개체에 대한 문자열 표현을 만들고 반환합니다.</summary>
        <returns>현재 사용 권한 개체에 대한 문자열 표현입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 사용 권한을 문자열로 표시 하기 위해 필요한 경우 디버깅에 유용 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public abstract System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::SecurityElement ^ ToXml();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>파생된 클래스에서 재정의되면 보안 개체 및 현재 상태의 XML 인코딩을 만듭니다.</summary>
        <returns>모든 상태 정보를 포함하는 보안 개체의 XML 인코딩입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 보안 개체를 확장 하는 사용자 지정 코드를 구현 해야는 <xref:System.Security.CodeAccessPermission.ToXml%2A> 및 <xref:System.Security.CodeAccessPermission.FromXml%2A> 보안 인코딩할 수 있는 개체를 만드는 메서드.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.ToXml%2A> 메서드. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#11)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#11)]
 [!code-vb[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>파생된 클래스에서이 메서드를 재정의 해야 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public virtual System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Union (other As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other">현재 사용 권한과 결합할 사용 권한입니다. 현재 사용 권한과 동일한 형식이어야 합니다.</param>
        <summary>파생된 클래스에서 재정의되는 경우 현재 사용 권한 및 지정한 사용 권한을 합한 사용 권한을 만듭니다.</summary>
        <returns>현재 사용 권한 및 지정한 사용 권한의 합을 나타내는 새 사용 권한입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 에 대 한 호출의 결과 <xref:System.Security.CodeAccessPermission.Union%2A> 현재 사용 권한 및 지정한 사용 권한의 둘 다로 나타나는 모든 작업을 나타내는 권한입니다. 사용 권한 중 하나를 전달 하는 모든 요청의 합집합을 통과 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.Union%2A> 메서드. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#12)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#12)]
 [!code-vb[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="other" /> 매개 변수는 <see langword="null" />이 아닌 경우. 이 메서드는 <see langword="null" />을 전달한 경우 이 수준에서만 지원됩니다.</exception>
        <block subset="none" type="overrides">
          <para>파생된 클래스에서이 메서드를 재정의 해야 합니다. 경우에 사용 권한의 복사본을 반환 해야의 값은 <paramref name="other" /> 매개 변수는 <see langword="null" />합니다.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>