<Type Name="CodeAccessPermission" FullName="System.Security.CodeAccessPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b497a3cd20cb1d0ae8172ce6caf259ae001ddee0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30500857" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit CodeAccessPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.CodeAccessPermission" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeAccessPermission&#xA;Implements IPermission, IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeAccessPermission abstract : System::Security::IPermission, System::Security::IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IStackWalk</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="c08cb-101">모든 코드 액세스 권한의 기본 구조를 정의합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c08cb-101">Defines the underlying structure of all code access permissions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-102">코드 액세스 권한 스택 워크를 사용 하 여 사용 권한을 코드의 모든 호출자에 게 부여 되어 있는지 확인 하십시오.</span><span class="sxs-lookup"><span data-stu-id="c08cb-102">Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission.</span></span> <span data-ttu-id="c08cb-103">사용 권한 개체가 `null`, 상태와 사용 권한 개체와 동일한 처리 <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-103">If a permission object is `null`, it is handled the same as a permission object with the state <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c08cb-104">호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-104">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="c08cb-105">상속자는 <xref:System.Security.CodeAccessPermission> 클래스 보안 인프라를 확장 하는 권한으로 제대로 작동 하려면 완전 신뢰를 부여 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-105">Inheritors of the <xref:System.Security.CodeAccessPermission> class must be granted full trust to function correctly as permissions extending the security infrastructure.</span></span> <span data-ttu-id="c08cb-106">상속 자가 완전히 신뢰할 수 있는지 확인 하려면 <xref:System.Security.CodeAccessPermission> 문제는 <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> 에 대 한 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence>  =  `true` 및 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy>  =  `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-106">To determine that the inheritors are fully trusted, <xref:System.Security.CodeAccessPermission> issues an <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> for <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence> = `true` and <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy> = `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c08cb-107">다음 코드 예제에서는에서 파생 된 사용 권한을 <xref:System.Security.CodeAccessPermission> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-107">The following code example shows a permission derived from the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#1)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#1)]
 [!code-vb[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="c08cb-108">증명 정보 및 보기를 제공 하 고 정책을 수정 상속자 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c08cb-108">for the ability of inheritors to provide evidence and view and modify policy.</span>
      </span>
      <span data-ttu-id="c08cb-109">연관 된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c08cb-109">Associated enumerations: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />.</span>
      </span>
    </permission>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="c08cb-110">상속 하는 경우 <see cref="T:System.Security.CodeAccessPermission" />를 구현 해야는 <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> 인터페이스입니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="c08cb-110">When you inherit from <see cref="T:System.Security.CodeAccessPermission" />, you must also implement the <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> interface.</span>
        </span>
        <span data-ttu-id="c08cb-111">다음 <see cref="T:System.Security.CodeAccessPermission" /> 멤버를 재정의 해야 합니다: <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, 및 <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="c08cb-111">The following <see cref="T:System.Security.CodeAccessPermission" /> members must be overridden: <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, and <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />.</span>
        </span>
        <span data-ttu-id="c08cb-112">사용 하는 생성자도 정의 해야는 <see cref="T:System.Security.Permissions.PermissionState" /> 유일한 매개 변수로 합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="c08cb-112">You must also define a constructor that takes a <see cref="T:System.Security.Permissions.PermissionState" /> as its only parameter.</span>
        </span>
        <span data-ttu-id="c08cb-113">적용 해야 합니다는 <see cref="T:System.SerializableAttribute" /> 에서 상속 되는 클래스에 특성 <see cref="T:System.Security.CodeAccessPermission" />합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="c08cb-113">You must apply the <see cref="T:System.SerializableAttribute" /> attribute to a class that inherits from <see cref="T:System.Security.CodeAccessPermission" />.</span>
        </span>
      </para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeAccessPermission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeAccessPermission();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-114">
            <see cref="T:System.Security.CodeAccessPermission" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-114">Initializes a new instance of the <see cref="T:System.Security.CodeAccessPermission" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-115">이 생성자를 호출 하 여 파생된 클래스의 인스턴스를 만들 때마다 형식의 상태를 초기화 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-115">This constructor is called to initialize state in the type whenever an instance of the derived class is created.</span></span> <span data-ttu-id="c08cb-116">파생된 클래스 생성자의 생성자 선언에이 생성자를 명시적으로 호출할 수, 있지만이 대개 필요는 없습니다. 대부분의 컴파일러에서는 사용자에 대 한 호출을 자동으로 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-116">Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Assert();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-117">스택의 상위 호출자에게 리소스에 액세스할 수 있는 권한이 부여되지 않더라도 호출 코드가 이 메서드를 호출하는 코드를 통해 사용 권한 요구로 보호되는 리소스에 액세스할 수 있음을 선언합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-117">Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.</span>
          </span>
          <span data-ttu-id="c08cb-118">
            <see cref="M:System.Security.CodeAccessPermission.Assert" />를 사용하면 보안 문제가 발생할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-118">Using <see cref="M:System.Security.CodeAccessPermission.Assert" /> can create security issues.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-119">호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-119">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="c08cb-120">호출 <xref:System.Security.CodeAccessPermission.Assert%2A> 이 메서드를 호출 하는 코드를 넘어 진행에서 호출 스택을에서 더 아래로 발생 스택 워크 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-120">Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method.</span></span> <span data-ttu-id="c08cb-121">따라서 호출 스택의 상위 호출자에 리소스를 액세스할 수 있는 필수 권한이 없는 경우에은 여전히 액세스할 수는 데 필요한 사용 권한을이 메서드를 호출 하는 코드를 통해.</span><span class="sxs-lookup"><span data-stu-id="c08cb-121">Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission.</span></span> <span data-ttu-id="c08cb-122">어설션을 코드를 호출 하는 경우에 유효 <xref:System.Security.CodeAccessPermission.Assert%2A> 어설션하는 사용 권한에 대해 보안 검사를 통과 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-122">An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting.</span></span>  
  
 <span data-ttu-id="c08cb-123">에 대 한 호출 <xref:System.Security.CodeAccessPermission.Assert%2A> 호출 하는 코드는 호출자에 반환 될 때까지 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-123">The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="c08cb-124">하나의 <xref:System.Security.CodeAccessPermission.Assert%2A> 프레임에서 활성화 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-124">Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame.</span></span> <span data-ttu-id="c08cb-125">호출 하려고 <xref:System.Security.CodeAccessPermission.Assert%2A> 때 활성 <xref:System.Security.CodeAccessPermission.Assert%2A> 프레임 결과 따라 존재는 <xref:System.Security.SecurityException>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-125">An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="c08cb-126">호출 <xref:System.Security.CodeAccessPermission.RevertAssert%2A> 또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A> 활성을 제거 하려면 <xref:System.Security.CodeAccessPermission.Assert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-126">Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span>  
  
 <span data-ttu-id="c08cb-127"><xref:System.Security.CodeAccessPermission.Assert%2A> 권한에 대 한 요청이 실패 합니다 부여 되지 않은 사용 권한을 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-127"><xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="c08cb-128">그러나 코드가 호출 스택에 낮은 호출 <xref:System.Security.CodeAccessPermission.Demand%2A> 권한에 대해는 <xref:System.Security.SecurityException> 스택 워크를 호출 하려고 하는 코드에 도달 하면 throw 되 <xref:System.Security.CodeAccessPermission.Assert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-128">However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="c08cb-129">코드를 호출 하기 때문에 이런 <xref:System.Security.CodeAccessPermission.Assert%2A> 가 부여 되지 권한, 하 려 했지만 <xref:System.Security.CodeAccessPermission.Assert%2A> 것입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-129">This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="c08cb-130">호출 하기 때문에 <xref:System.Security.CodeAccessPermission.Assert%2A> 호출 체인에 모든 코드가 요구 해야 권한이 제거 지정 된 리소스에 액세스할 수, 메서드를 잘못 사용할 경우 보안 문제가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-130">Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately.</span></span> <span data-ttu-id="c08cb-131">따라서 매우 주의 해 서 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-131">Therefore, it should be used with great caution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c08cb-132">호출 코드에 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-132">The calling code does not have <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</span>
          </span>
          <span data-ttu-id="c08cb-133">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-133">-or-</span>
          </span>
          <span data-ttu-id="c08cb-134">현재 프레임에 대해 활성 <see cref="M:System.Security.CodeAccessPermission.Assert" />가 이미 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-134">There is already an active <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="c08cb-135">호출 하는 기능에 대 한 <see cref="M:System.Security.CodeAccessPermission.Assert" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-135">for the ability to call <see cref="M:System.Security.CodeAccessPermission.Assert" />.</span>
          </span>
          <span data-ttu-id="c08cb-136">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-136">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></span>
          </span>
        </permission>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-137">이 메서드를 재정의할 수 없습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-137">You cannot override this method.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-138">파생된 클래스에 의해 구현될 때 현재 권한 개체의 동일한 복사본을 만들어서 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-138">When implemented by a derived class, creates and returns an identical copy of the current permission object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c08cb-139">현재 권한 개체의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-139">A copy of the current permission object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-140">사용 권한 개체의 복사본을 원래 권한 개체 리소스에 동일한 액세스를 권한을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-140">A copy of a permission object represents the same access to resources as the original permission object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c08cb-141">다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.Copy%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-141">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Copy%2A> method.</span></span> <span data-ttu-id="c08cb-142">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-142">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#2)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#2)]
 [!code-vb[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-143">파생된 클래스에서이 메서드를 재정의 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-143">You must override this method in a derived class.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-144">호출 스택의 상위 호출자에게 현재 인스턴스로 지정된 권한이 없는 경우 런타임에 <see cref="T:System.Security.SecurityException" />을 강제 적용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-144">Forces a <see cref="T:System.Security.SecurityException" /> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-145">이 메서드는 일반적으로 호출자에 게 리소스에 액세스할 수 있는 권한이 있는지 확인 하려면 보안 라이브러리에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-145">This method is typically used by secure libraries to ensure that callers have permission to access a resource.</span></span> <span data-ttu-id="c08cb-146">예를 들어 보안 클래스 라이브러리의 파일 클래스 호출 <xref:System.Security.CodeAccessPermission.Demand%2A> 필요한 <xref:System.Security.Permissions.FileIOPermission> 는 호출자가 요청한 파일 작업을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-146">For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.</span></span>  
  
 <span data-ttu-id="c08cb-147">이 메서드를 호출 하는 코드의 사용 권한은 검사 하지 않습니다. 검사 해당 코드의 직접 실행 호출자에서 시작 되 고 스택 위로 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-147">The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</span></span> <span data-ttu-id="c08cb-148">호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-148">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span> <span data-ttu-id="c08cb-149"><xref:System.Security.CodeAccessPermission.Demand%2A> 없는 경우에 성공 <xref:System.Security.SecurityException> 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-149"><xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c08cb-150">호출 스택의 상위에 있는 호출자에게 현재 인스턴스가 지정한 사용 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-150">A caller higher in the call stack does not have the permission specified by the current instance.</span>
          </span>
          <span data-ttu-id="c08cb-151">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-151">-or-</span>
          </span>
          <span data-ttu-id="c08cb-152">호출 스택의 상위 호출자가 현재 사용 권한 개체에 대해 <see cref="M:System.Security.CodeAccessPermission.Deny" />를 호출했습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-152">A caller higher in the call stack has called <see cref="M:System.Security.CodeAccessPermission.Deny" /> on the current permission object.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-153">이 메서드를 재정의할 수 없습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-153">You cannot override this method.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Deny();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-154">호출 스택의 상위 호출자가 이 메서드를 호출하는 코드를 사용하여 현재 인스턴스에 의해 지정된 리소스에 액세스하지 못하게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-154">Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="c08cb-155"><xref:System.Security.CodeAccessPermission.Deny%2A> 완전히 신뢰할 수 있는 코드에서 메서드를 실수로 액세스 로부터 리소스를 보호에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-155">The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="c08cb-156">하지 신뢰할 수 없는 코드 리소스 의도적인 악용 으로부터 보호 하기 위해 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-156">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="c08cb-157">예를 들어 경우 메서드 `A` 문제는 <xref:System.Security.CodeAccessPermission.Deny%2A> 사용 권한 및 다음 호출 메서드 `B`, 메서드 `B` 명백히 재정의할 수 있습니다는 <xref:System.Security.CodeAccessPermission.Deny%2A> 실행 하 여 프로그램 <xref:System.Security.CodeAccessPermission.Assert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-157">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="c08cb-158">호출된 된 메서드가 스택의 항상 높습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-158">The called method is always higher in the stack.</span></span> <span data-ttu-id="c08cb-159">따라서 경우 메서드 `B` 보안 시스템에서 보호 된 리소스에 액세스 하려고 하기 때문에 여 사용 권한을 확인 하기 시작 메서드 `B` 직접 실행 호출자 이며 워크 우선이 있는지 확인 하기 위해 스택의 없습니다 <xref:System.Security.CodeAccessPermission.Deny%2A> 또는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 스택의 더 낮은 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-159">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="c08cb-160">메서드 `B`, 리소스에 액세스 하려고 하는 수는 스택 워크 즉시 사용 하 여 중지 된 <xref:System.Security.CodeAccessPermission.Assert%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-160">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="c08cb-161">이 경우에 <xref:System.Security.CodeAccessPermission.Deny%2A> 메서드에서 스택에 배치 `A` (호출 하는 방법)가 검색 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-161">In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="c08cb-162">이 메서드는 호출 스택의 상위 호출자가 해당 호출자가 액세스할 수 있는 권한이 부여 되어 있는 경우에이 메서드를 호출 하는 코드를 통해 보호 된 리소스에 액세스 하지 못하도록 방지 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-162">This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</span></span> <span data-ttu-id="c08cb-163">호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-163">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 <span data-ttu-id="c08cb-164"><xref:System.Security.CodeAccessPermission.Deny%2A> 프로그래머의 책임을 제한 하거나 호출 하는 메서드를 방지할 수 있으므로 실수로 인 한 보안 문제를 방지할 수 있습니다 <xref:System.Security.CodeAccessPermission.Deny%2A> 에서 거부 된 권한으로 보호 되는 리소스에 액세스 하는 데 사용 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-164"><xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission.</span></span> <span data-ttu-id="c08cb-165">메서드를 호출 하는 경우 <xref:System.Security.CodeAccessPermission.Deny%2A> 권한, 경우에 <xref:System.Security.CodeAccessPermission.Demand%2A> 에 도달 하면 해당 보안 검사에서 실패에 해당 권한이 하위 호출 스택의 호출자가 호출 되는 <xref:System.Security.CodeAccessPermission.Deny%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-165">If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span>  
  
 <span data-ttu-id="c08cb-166">에 대 한 호출 <xref:System.Security.CodeAccessPermission.Deny%2A> 호출 하는 코드는 호출자에 반환 될 때까지 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-166">The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="c08cb-167">하나의 <xref:System.Security.CodeAccessPermission.Deny%2A> 프레임에서 활성화 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-167">Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame.</span></span> <span data-ttu-id="c08cb-168">호출 하려고 <xref:System.Security.CodeAccessPermission.Deny%2A> 때 활성 <xref:System.Security.CodeAccessPermission.Deny%2A> 프레임 결과 따라 존재는 <xref:System.Security.SecurityException>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-168">An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="c08cb-169">호출 <xref:System.Security.CodeAccessPermission.RevertDeny%2A> 또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A> 활성을 제거 하려면 <xref:System.Security.CodeAccessPermission.Deny%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-169">Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>.</span></span> <span data-ttu-id="c08cb-170"><xref:System.Security.CodeAccessPermission.Deny%2A> 권한에 대 한 요청이 실패 합니다 부여 되지 않은 사용 권한을 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-170"><xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c08cb-171">현재 프레임에 대해 활성 <see cref="M:System.Security.CodeAccessPermission.Deny" />가 이미 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-171">There is already an active <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-172">이 메서드를 재정의할 수 없습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-172">You cannot override this method.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c08cb-173">현재 <see cref="T:System.Security.CodeAccessPermission" />와 비교할 <see cref="T:System.Security.CodeAccessPermission" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-173">The <see cref="T:System.Security.CodeAccessPermission" /> object to compare with the current <see cref="T:System.Security.CodeAccessPermission" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c08cb-174">지정된 <see cref="T:System.Security.CodeAccessPermission" /> 개체가 현재 <see cref="T:System.Security.CodeAccessPermission" />과 같은지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-174">Determines whether the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c08cb-175">지정한 <see cref="T:System.Security.CodeAccessPermission" /> 개체가 현재  <see cref="T:System.Security.CodeAccessPermission" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-175">
              <see langword="true" /> if the specified <see cref="T:System.Security.CodeAccessPermission" /> object is equal to the current <see cref="T:System.Security.CodeAccessPermission" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-176">자세한 내용은 <xref:System.Object.Equals%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="c08cb-176">For more information, see <xref:System.Object.Equals%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public abstract void FromXml (System.Security.SecurityElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub FromXml (elem As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void FromXml(System::Security::SecurityElement ^ elem);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elem" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="elem">
          <span data-ttu-id="c08cb-177">보안 개체를 다시 생성하는 데 사용할 XML 인코딩입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-177">The XML encoding to use to reconstruct the security object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c08cb-178">파생된 클래스에서 재정의되는 경우, XML 인코딩에서 지정된 상태의 보안 개체를 다시 생성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-178">When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-179">보안 개체를 확장 하는 사용자 지정 코드를 구현 해야는 <xref:System.Security.CodeAccessPermission.ToXml%2A> 및 <xref:System.Security.CodeAccessPermission.FromXml%2A> 보안 인코딩할 수 있는 개체를 만드는 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-179">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c08cb-180">다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.FromXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-180">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.FromXml%2A> method.</span></span> <span data-ttu-id="c08cb-181">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-181">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#10)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#10)]
 [!code-vb[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c08cb-182">
            <paramref name="elem" /> 매개 변수가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-182">The <paramref name="elem" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c08cb-183">
            <paramref name="elem" /> 매개 변수에 현재 인스턴스와 동일한 형식의 인스턴스에 대한 XML 인코딩이 포함되어 있지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-183">The <paramref name="elem" /> parameter does not contain the XML encoding for an instance of the same type as the current instance.</span>
          </span>
          <span data-ttu-id="c08cb-184">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-184">-or-</span>
          </span>
          <span data-ttu-id="c08cb-185">
            <paramref name="elem" /> 매개 변수의 버전 번호가 지원되지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-185">The version number of the <paramref name="elem" /> parameter is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-186">파생된 클래스에서이 메서드를 재정의 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-186">You must override this method in a derived class.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-187">해시 알고리즘과 해시 테이블 같은 데이터 구조에 사용하기 적합한 <see cref="T:System.Security.CodeAccessPermission" /> 개체에 대한 해시 코드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-187">Gets a hash code for the <see cref="T:System.Security.CodeAccessPermission" /> object that is suitable for use in hashing algorithms and data structures such as a hash table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c08cb-188">현재 <see cref="T:System.Security.CodeAccessPermission" /> 개체의 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-188">A hash code for the current <see cref="T:System.Security.CodeAccessPermission" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-189">두 인스턴스가 같은 권한의 대 한 해시 코드 서로 다를 수 있으므로 해시 코드를 사용 두 개를 비교 하 <xref:System.Security.CodeAccessPermission> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-189">The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.CodeAccessPermission> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="c08cb-190">현재 사용 권한과 공통되는 사용 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-190">A permission to intersect with the current permission.</span>
          </span>
          <span data-ttu-id="c08cb-191">현재 사용 권한과 동일한 형식이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-191">It must be of the same type as the current permission.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c08cb-192">파생된 클래스에서 구현되는 경우 현재 사용 권한 및 지정된 사용 권한의 공통 권한을 만들어 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-192">When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c08cb-193">현재 사용 권한 및 지정된 사용 권한의 공통 영역을 나타내는 새 사용 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-193">A new permission that represents the intersection of the current permission and the specified permission.</span>
          </span>
          <span data-ttu-id="c08cb-194">교집합이 비어 있으면 새 사용 권한은 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-194">This new permission is <see langword="null" /> if the intersection is empty.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-195">두 사용 권한의 공통 사항에는 모두 공통으로 설명 하는 작업 집합을 설명 하는 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-195">The intersection of two permissions is a permission that describes the set of operations they both describe in common.</span></span> <span data-ttu-id="c08cb-196">원래 사용 권한을 모두 전달 하는 요구만 교집합에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-196">Only a demand that passes both original permissions will pass the intersection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c08cb-197">다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.Intersect%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-197">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Intersect%2A> method.</span></span> <span data-ttu-id="c08cb-198">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-198">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#5)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#5)]
 [!code-vb[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c08cb-199">
            <paramref name="target" /> 매개 변수가 <see langword="null" />이 아니고 현재 사용 권한과 동일한 클래스의 인스턴스가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-199">The <paramref name="target" /> parameter is not <see langword="null" /> and is not an instance of the same class as the current permission.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-200">파생된 클래스에서이 메서드를 재정의 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-200">You must override this method in a derived class.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public abstract bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="c08cb-201">하위 집합 관계에 대해 테스트할 사용 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-201">A permission that is to be tested for the subset relationship.</span>
          </span>
          <span data-ttu-id="c08cb-202">이 사용 권한은 현재 권한과 동일한 형식이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-202">This permission must be of the same type as the current permission.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c08cb-203">파생 클래스에 의해 구현될 경우 권한이 지정된 사용 권한의 하위 집합인지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-203">When implemented by a derived class, determines whether the current permission is a subset of the specified permission.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c08cb-204">현재 사용 권한이 지정된 사용 권한의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-204">
              <see langword="true" /> if the current permission is a subset of the specified permission; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-205">현재 권한은 현재 사용 권한이 지정된 된 사용 하 여 완전히 포함 된 작업의 집합을 지정 하는 경우 지정된 된 사용 권한의 하위 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-205">The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.</span></span> <span data-ttu-id="c08cb-206">예를 들어 c:\example.txt 있는 사용 권한을의 하위 집합인 c: \에 대 한 액세스를 나타내는 사용 권한의\\합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-206">For example, a permission that represents access to C:\example.txt is a subset of a permission that represents access to C:\\.</span></span> <span data-ttu-id="c08cb-207">이 메서드가 반환 하는 경우 `true`, 현재 사용 권한과 동일한 액세스 보호 된 리소스에 지정된 된 사용은 보다를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-207">If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.</span></span>  
  
 <span data-ttu-id="c08cb-208">다음 문은 되어야 하는 데 필요한 `true` 의 모든 재정의 위한는 <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-208">The following statements are required to be `true` for all overrides of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="c08cb-209">*X*, *Y*, 및 *Z* null 참조가 아닌 사용자 지정 코드 액세스 권한 개체 나타내는 *U* 제한 되지 않은 코드 액세스 권한을 나타내는 및 *N* 와 빈 권한을 나타내는 <xref:System.Security.Permissions.PermissionState> 의 <xref:System.Security.Permissions.PermissionState.None>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-209">*X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState.None>.</span></span>  
  
-   <span data-ttu-id="c08cb-210">*X*합니다. IsSubsetOf (*X*) 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-210">*X*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
-   <span data-ttu-id="c08cb-211">*X*합니다. IsSubsetOf (*Y*)과 동일한 값을 반환 *Y*합니다. IsSubsetOf (*X*) 경우에 *X* 및 *Y* 동일한 사용 권한 집합을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-211">*X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.</span></span>  
  
-   <span data-ttu-id="c08cb-212">경우 *X*합니다. IsSubsetOf (*Y*) 및 *Y*합니다. IsSubsetOf (*Z*) 둘 다 반환 `true`, *X*합니다. IsSubsetOf (*Z*) 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-212">If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.</span></span>  
  
-   <span data-ttu-id="c08cb-213">*X*합니다. IsSubsetOf (*U*) 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-213">*X*.IsSubsetOf(*U*) returns `true`.</span></span>  
  
-   <span data-ttu-id="c08cb-214">*X*합니다. IsSubsetOf (*N*) 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-214">*X*.IsSubsetOf(*N*) returns `false`.</span></span>  
  
-   <span data-ttu-id="c08cb-215">*N*합니다. IsSubsetOf (*X*) 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-215">*N*.IsSubsetOf(*X*) returns `true`.</span></span>  
  
 <span data-ttu-id="c08cb-216">경우 *X* 및 *Y* 사용자 지정 코드 액세스 권한 개체가 null 참조를 나타내는 *X*합니다. IsSubsetOf (*Y*) 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-216">If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`.</span></span> <span data-ttu-id="c08cb-217">경우 *Z* 도 null, 복합 집합 연산 *X*합니다. Union (*Y*). IsSubsetOf (*Z*)도 반환 `true` 하므로 두 개의 null 사용 권한의 합집합 null 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-217">If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c08cb-218">다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-218">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method.</span></span> <span data-ttu-id="c08cb-219">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-219">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#4)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#4)]
 [!code-vb[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c08cb-220">
            <paramref name="target" /> 매개 변수가 <see langword="null" />이 아니고 현재 사용 권한과 형식이 다른 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-220">The <paramref name="target" /> parameter is not <see langword="null" /> and is not of the same type as the current permission.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-221">파생된 클래스에서이 메서드를 재정의 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-221">You must override this method in a derived class.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PermitOnly();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-222">호출 스택의 상위 호출자가 이 메서드를 호출하는 코드를 사용하여 현재 인스턴스에 의해 지정된 리소스를 제외한 모든 리소스에 액세스하지 못하게 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-222">Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="c08cb-223"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> 완전히 신뢰할 수 있는 코드에서 메서드를 실수로 액세스 로부터 리소스를 보호에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-223">The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code.</span></span> <span data-ttu-id="c08cb-224">하지 신뢰할 수 없는 코드 리소스 의도적인 악용 으로부터 보호 하기 위해 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-224">It should not be used to protect resources from intentional misuse by untrusted code.</span></span> <span data-ttu-id="c08cb-225">예를 들어 경우 메서드 `A` 문제는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 사용 권한 및 다음 호출 메서드 `B`, 메서드 `B` 명백히 재정의할 수 있습니다는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 실행 하 여 프로그램 <xref:System.Security.CodeAccessPermission.Assert%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-225">For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>.</span></span> <span data-ttu-id="c08cb-226">호출된 된 메서드가 스택의 항상 높습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-226">The called method is always higher in the stack.</span></span> <span data-ttu-id="c08cb-227">따라서 경우 메서드 `B` 보안 시스템에서 보호 된 리소스에 액세스 하려고 하기 때문에 여 사용 권한을 확인 하기 시작 메서드 `B` 직접 실행 호출자 이며 워크 우선이 있는지 확인 하기 위해 스택의 없습니다 <xref:System.Security.CodeAccessPermission.Deny%2A> 또는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 스택의 더 낮은 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-227">Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack.</span></span> <span data-ttu-id="c08cb-228">메서드 `B`, 리소스에 액세스 하려고 하는 수는 스택 워크 즉시 사용 하 여 중지 된 <xref:System.Security.CodeAccessPermission.Assert%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-228">Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method.</span></span> <span data-ttu-id="c08cb-229">이 경우에 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 메서드에서 스택에 배치 `A` (호출 하는 방법)가 검색 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-229">In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered.</span></span>  
  
 <span data-ttu-id="c08cb-230"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> 유사한 <xref:System.Security.CodeAccessPermission.Deny%2A>그렇지 않은 경우는 성공 시 작동이 실패 하도록 스택 워크 있는 상황에서, 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-230"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed.</span></span> <span data-ttu-id="c08cb-231">차이점은 <xref:System.Security.CodeAccessPermission.Deny%2A> 실패 하는 스택 워크를 발생 시키는 사용 권한을 지정 하지만 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 스택 워크 실패 하지 않게 되는 유일한 권한을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-231">The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.</span></span>  
  
 <span data-ttu-id="c08cb-232">코드 지정 된 리소스에만 액세스할 수 사용 될 수 있도록 하려면이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-232">Call this method to ensure that your code can be used to access only the specified resources.</span></span> <span data-ttu-id="c08cb-233">에 대 한 호출 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 호출 하는 코드는 호출자에 반환 될 때까지 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-233">The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller.</span></span> <span data-ttu-id="c08cb-234">하나의 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 프레임에서 활성화 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-234">Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame.</span></span> <span data-ttu-id="c08cb-235">호출 하려고 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 때 활성 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 프레임 결과 따라 존재는 <xref:System.Security.SecurityException>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-235">An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>.</span></span> <span data-ttu-id="c08cb-236">호출 <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> 또는 <xref:System.Security.CodeAccessPermission.RevertAll%2A> 활성을 제거 하려면 <xref:System.Security.CodeAccessPermission.PermitOnly%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-236">Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span>  
  
 <span data-ttu-id="c08cb-237"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> 권한에 대 한 요청이 실패 합니다 부여 되지 않은 사용 권한을 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-237"><xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed.</span></span> <span data-ttu-id="c08cb-238">그러나 코드에 대 한 호출에 낮은 나중 스택 하는 경우 호출 <xref:System.Security.CodeAccessPermission.Demand%2A> 권한에 대해는 <xref:System.Security.SecurityException> 스택 워크를 호출 하려고 하는 코드에 도달 하면 throw 되 <xref:System.Security.CodeAccessPermission.PermitOnly%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-238">However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.</span></span> <span data-ttu-id="c08cb-239">호출한 코드 때문에 이것이 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 에 권한이 부여 되지는 호출 했지만 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 권한에 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-239">This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission.</span></span> <span data-ttu-id="c08cb-240">호출 스택의 호출 스택의 상위 메서드를 호출할 낮은 호출 스택에 있도록 하향식으로 일반적으로 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-240">The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="c08cb-241">현재 프레임에 대해 활성 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />가 이미 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-241">There is already an active <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-242">이 메서드를 재정의할 수 없습니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-242">You cannot override this method.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RevertAll">
      <MemberSignature Language="C#" Value="public static void RevertAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAll" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-243">현재 프레임에 대한 모든 이전 재정의가 제거되고 더 이상 적용되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-243">Causes all previous overrides for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-244">재정의 없는 경우 (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, 또는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) 현재 프레임에 대 한는 <xref:System.ExecutionEngineException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-244">If there are no overrides (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, or <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c08cb-245">현재 프레임에 대한 이전 <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" /> 또는 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-245">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" />, or <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RevertAssert">
      <MemberSignature Language="C#" Value="public static void RevertAssert ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAssert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAssert" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAssert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAssert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-246">현재 프레임에 대한 이전의 모든 <see cref="M:System.Security.CodeAccessPermission.Assert" />를 제거하여 더 이상 적용되지 않도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-246">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-247">없는 경우 없는 <xref:System.Security.CodeAccessPermission.Assert%2A> 현재 프레임에 대 한는 <xref:System.ExecutionEngineException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-247">If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c08cb-248">현재 프레임에 대한 이전 <see cref="M:System.Security.CodeAccessPermission.Assert" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-248">There is no previous <see cref="M:System.Security.CodeAccessPermission.Assert" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RevertDeny">
      <MemberSignature Language="C#" Value="public static void RevertDeny ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertDeny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertDeny" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertDeny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertDeny();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-249">현재 프레임에 대한 이전의 모든 <see cref="M:System.Security.CodeAccessPermission.Deny" />를 제거하여 더 이상 적용되지 않도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-249">Causes any previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-250">없는 경우 없는 <xref:System.Security.CodeAccessPermission.Deny%2A> 현재 프레임에 대 한는 <xref:System.ExecutionEngineException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-250">If there is no <xref:System.Security.CodeAccessPermission.Deny%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c08cb-251">현재 프레임에 대한 이전 <see cref="M:System.Security.CodeAccessPermission.Deny" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-251">There is no previous <see cref="M:System.Security.CodeAccessPermission.Deny" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RevertPermitOnly">
      <MemberSignature Language="C#" Value="public static void RevertPermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertPermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertPermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertPermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertPermitOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-252">현재 프레임에 대한 이전의 모든 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />를 제거하여 더 이상 적용되지 않도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-252">Causes any previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame to be removed and no longer in effect.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-253">없는 경우 없는 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> 현재 프레임에 대 한는 <xref:System.ExecutionEngineException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-253">If there is no <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c08cb-254">현재 프레임에 대한 이전 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-254">There is no previous <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> for the current frame.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IPermission.Demand">
      <MemberSignature Language="C#" Value="void IPermission.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IPermission.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IPermission#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IPermission.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IPermission.Demand() = System::Security::IPermission::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Assert">
      <MemberSignature Language="C#" Value="void IStackWalk.Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert" />
      <MemberSignature Language="VB.NET" Value="Sub Assert () Implements IStackWalk.Assert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Assert() = System::Security::IStackWalk::Assert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Demand">
      <MemberSignature Language="C#" Value="void IStackWalk.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IStackWalk.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Demand() = System::Security::IStackWalk::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Deny">
      <MemberSignature Language="C#" Value="void IStackWalk.Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny" />
      <MemberSignature Language="VB.NET" Value="Sub Deny () Implements IStackWalk.Deny" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Deny() = System::Security::IStackWalk::Deny;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.PermitOnly">
      <MemberSignature Language="C#" Value="void IStackWalk.PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Sub PermitOnly () Implements IStackWalk.PermitOnly" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.PermitOnly() = System::Security::IStackWalk::PermitOnly;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-255">현재 사용 권한 개체에 대한 문자열 표현을 만들고 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-255">Creates and returns a string representation of the current permission object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c08cb-256">현재 사용 권한 개체에 대한 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-256">A string representation of the current permission object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-257">이 메서드는 사용 권한을 문자열로 표시 하기 위해 필요한 경우 디버깅에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-257">This method is useful in debugging when you need to display the permission as a string.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public abstract System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::SecurityElement ^ ToXml();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c08cb-258">파생된 클래스에서 재정의되면 보안 개체 및 현재 상태의 XML 인코딩을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-258">When overridden in a derived class, creates an XML encoding of the security object and its current state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c08cb-259">모든 상태 정보를 포함하는 보안 개체의 XML 인코딩입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-259">An XML encoding of the security object, including any state information.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-260">보안 개체를 확장 하는 사용자 지정 코드를 구현 해야는 <xref:System.Security.CodeAccessPermission.ToXml%2A> 및 <xref:System.Security.CodeAccessPermission.FromXml%2A> 보안 인코딩할 수 있는 개체를 만드는 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-260">Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c08cb-261">다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.ToXml%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-261">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.ToXml%2A> method.</span></span> <span data-ttu-id="c08cb-262">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-262">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#11)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#11)]
 [!code-vb[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-263">파생된 클래스에서이 메서드를 재정의 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-263">You must override this method in a derived class.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public virtual System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Union (other As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="c08cb-264">현재 사용 권한과 결합할 사용 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-264">A permission to combine with the current permission.</span>
          </span>
          <span data-ttu-id="c08cb-265">현재 사용 권한과 동일한 형식이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-265">It must be of the same type as the current permission.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c08cb-266">파생된 클래스에서 재정의되는 경우 현재 사용 권한 및 지정한 사용 권한을 합한 사용 권한을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-266">When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c08cb-267">현재 사용 권한 및 지정한 사용 권한의 합을 나타내는 새 사용 권한입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-267">A new permission that represents the union of the current permission and the specified permission.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c08cb-268">에 대 한 호출의 결과 <xref:System.Security.CodeAccessPermission.Union%2A> 현재 사용 권한 및 지정한 사용 권한의 둘 다로 나타나는 모든 작업을 나타내는 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-268">The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission.</span></span> <span data-ttu-id="c08cb-269">사용 권한 중 하나를 전달 하는 모든 요청의 합집합을 통과 합니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-269">Any demand that passes either permission passes their union.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c08cb-270">다음 코드 예제에서는 <xref:System.Security.CodeAccessPermission.Union%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c08cb-270">The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Union%2A> method.</span></span> <span data-ttu-id="c08cb-271">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Security.CodeAccessPermission> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c08cb-271">This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.</span></span>  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#12)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#12)]
 [!code-vb[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c08cb-272">
            <paramref name="other" /> 매개 변수는 <see langword="null" />이 아닌 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-272">The <paramref name="other" /> parameter is not <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c08cb-273">이 메서드는 <see langword="null" />을 전달한 경우 이 수준에서만 지원됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c08cb-273">This method is only supported at this level when passed <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c08cb-274">파생된 클래스에서이 메서드를 재정의 해야 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-274">You must override this method in a derived class.</span>
            </span>
            <span data-ttu-id="c08cb-275">경우에 사용 권한의 복사본을 반환 해야의 값은 <paramref name="other" /> 매개 변수는 <see langword="null" />합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="c08cb-275">You should return a copy of the permission if the value of the <paramref name="other" /> parameter is <see langword="null" />.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>