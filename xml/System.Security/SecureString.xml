<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SecureString.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c4d029653e3eb38bb3ed2b723b2a1a007b810413e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d029653e3eb38bb3ed2b723b2a1a007b810413e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.SecureString">
          <source>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.</source>
          <target state="translated">더 이상 필요 없게 되면 컴퓨터 메모리에서 삭제되는 텍스트처럼 기밀을 유지해야 하는 텍스트를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Security.SecureString">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is a string type that provides a measure of security.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 보안 수단을 제공 하는 문자열 형식이입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>It tries to avoid storing potentially sensitive strings in process memory as plain text.</source>
          <target state="translated">일반 텍스트로 프로세스 메모리에 잠재적으로 중요 한 문자열을 저장 하지 않도록 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>(For limitations, however, see the <bpt id="p1">[</bpt>How secure is SecureString?<ept id="p1">](#HowSecure)</ept> section.) The value of an instance of <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.</source>
          <target state="translated">그러나 (자세한 내용은는 <bpt id="p1">[</bpt>보안은 SecureString?<ept id="p1">](#HowSecure)</ept> 섹션.) 인스턴스 값 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 또는 값을 수정할 인스턴스를 초기화 하는 경우에 기본 플랫폼에서 지원 되는 메커니즘을 사용 하 여 자동으로 보호 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Your application can render the instance immutable and prevent further modification by invoking the <ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method.</source>
          <target state="translated">응용 프로그램 인스턴스를 변경할 수 없는 렌더링할 수 및 호출 하 여 더 이상 수정할 수는 <ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The maximum length of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance is 65,536 characters.</source>
          <target state="translated">최대 길이 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 인스턴스는 65, 536 자입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식의 인스턴스를 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class and its members are not visible to COM.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 클래스와 해당 멤버 COM에 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComVisibleAttribute&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>In this section:</source>
          <target state="translated">섹션 내용</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>String vs. SecureString<ept id="p1">](#vsString)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>문자열 vs입니다. SecureString<ept id="p1">](#vsString)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>SecureString operations<ept id="p1">](#Ops)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>SecureString 작업<ept id="p1">](#Ops)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>SecureString 및 interop<ept id="p1">](#interop)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>How secure is  SecureString?<ept id="p1">](#HowSecure)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>SecureString은 얼마나 안전?<ept id="p1">](#HowSecure)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>String versus SecureString</source>
          <target state="translated">SecureString와 문자열</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>An instance of the <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.</source>
          <target state="translated">인스턴스는 <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> 클래스는 모두 변경할 수 없는 더 이상 필요 없는 프로그래밍 방식으로 예약 될 가비지 수집에 대 한; 즉, 인스턴스는 읽기 전용 인스턴스 수 있는 시점을 예측할 수 없는 카탈로그 항목이 생성 된 후 컴퓨터 메모리에서 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.String?displayProperty=nameWithType&gt;</ph> 인스턴스를 변경할 수 없는 경우, 기존 인스턴스를 수정 하는 작업은 실제로 조작 하기 위한 것의 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Consequently, if a <ph id="ph1">&lt;xref:System.String&gt;</ph> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</source>
          <target state="translated">따라서 경우는 <ph id="ph1">&lt;xref:System.String&gt;</ph> 암호, 신용 카드 번호 또는 개인 데이터와 같은 중요 한 정보를 포함 하는 개체, 응용 프로그램 컴퓨터 메모리에서 데이터를 삭제할 수 없으므로 사용 된 후 정보 누설 될 위험이 있습니다 .</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is similar to a <ph id="ph2">&lt;xref:System.String&gt;</ph> object in that it has a text value.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체는 비슷합니다는 <ph id="ph2">&lt;xref:System.String&gt;</ph> 텍스트 값이 있다는 점에서 개체입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>However, the value of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <ph id="ph2">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method  or by the .NET Framework garbage collector.</source>
          <target state="translated">그러나 값은 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 메모리에 고정 개체, 응용 프로그램이 읽기 전용으로 표시 될 때까지 수정할 수는 기본 운영 체제에서 제공 하는 암호화와 같은 보호 메커니즘을 사용할 수 있고 컴퓨터 메모리에서 삭제할 수 있습니다 응용 프로그램 호출 하 여 하나는 <ph id="ph2">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> 메서드 또는.NET Framework 가비지 수집기가 있습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For a discussion of the limitations of the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class, see the <bpt id="p1">[</bpt>How secure is  SecureString?<ept id="p1">](#HowSecure)</ept> section.</source>
          <target state="translated">제한 사항에 대 한 내용은 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 클래스를 참조 하십시오.는 <bpt id="p1">[</bpt>보안은 SecureString?<ept id="p1">](#HowSecure)</ept> 섹션.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>맨 위로 이동<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>SecureString operations</source>
          <target state="translated">SecureString 작업</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class includes members that allow you to do the following:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 클래스는 다음 작업을 수행할 수 있는 멤버를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Instantiate a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object</source>
          <target state="translated">인스턴스화하는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>You instantiate a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object by calling its parameterless constructor.</source>
          <target state="translated">인스턴스화하는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 해당 매개 변수가 없는 생성자를 호출 하 여 개체입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Add characters to a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object</source>
          <target state="translated">추가 문자는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>You can add a single character at a time to a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object  by calling its <ph id="ph2">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> method.</source>
          <target state="translated">한 번에 단일 문자를 추가할 수 있습니다는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체를 호출 하 여 해당 <ph id="ph2">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object should never be constructed from a <ph id="ph2">&lt;xref:System.String&gt;</ph>, because the sensitive data is already subject to the memory persistence consequences of the immutable <ph id="ph3">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체에서 생성 되지 해야는 <ph id="ph2">&lt;xref:System.String&gt;</ph>중요 한 데이터를 변경할 수 없는 작업의 메모리 지 속성 결과 따라 이미 이므로, <ph id="ph3">&lt;xref:System.String&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The best way to construct a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is from a character-at-a-time unmanaged source, such as the <ph id="ph2">&lt;xref:System.Console.ReadKey%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">생성 하는 가장 좋은 방법은 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 과 같은 문자 런타임 관리 되지 않는 소스에서 개체를는 <ph id="ph2">&lt;xref:System.Console.ReadKey%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Remove characters from a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object</source>
          <target state="translated">문자를 제거는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>You can replace an individual character by calling the <ph id="ph1">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph> method, remove an individual character by calling the <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> method, or remove all characters from the <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> instance by calling the  <ph id="ph4">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> method.</source>
          <target state="translated">호출 하 여 개별 문자를 바꿀 수 있습니다는 <ph id="ph1">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph> 메서드를 호출 하 여 개별 문자를 제거는 <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> 메서드나에서 모든 문자의 제거는 <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> 호출 하 여 인스턴스는 <ph id="ph4">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Make the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object read-only</source>
          <target state="translated">확인 된 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체 읽기 전용</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Once you have defined the string that the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object represents, you call its  <ph id="ph2">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method to make the string read-only.</source>
          <target state="translated">문자열을 정의 하는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체가 나타내는 호출 합니다. 해당 <ph id="ph2">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> 읽기 전용 문자열을 만드는 메서드와 알림이 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Get information about the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object</source>
          <target state="translated">에 대 한 정보를 가져오기는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class has only two members that provide information about the string: its <ph id="ph2">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph> property, which indicates the number of UTF16-encoded code units in the string; and the <ph id="ph3">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph>, method, which indicates whether the instance is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 클래스에는 문자열에 대 한 정보를 제공 하는 두 명의 멤버: 해당 <ph id="ph2">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph> ; 문자열에 u t f 16으로 인코딩된 코드 단위 수를 나타내는 속성도 및 <ph id="ph3">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph>, 인스턴스 인지 여부를 나타내는 메서드 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Release the memory allocated to the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance</source>
          <target state="translated">에 할당 된 메모리를 해제는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 인스턴스</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> implements the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface, you release its memory by calling the <ph id="ph3">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 구현 하는 <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> 인터페이스를 호출 하 여 해당 메모리를 해제는 <ph id="ph3">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class has no members that inspect, compare, or convert the value of a <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 클래스에 검사, 비교, 또는 값으로 변환 하는 멤버가 없는 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The absence of such members helps protect the value of the instance from accidental or malicious exposure.</source>
          <target state="translated">이러한 멤버가 없으므로 실수로 또는 악의적으로 노출 로부터 인스턴스 값을 보호할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Use appropriate members of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType&gt;</ph> class, such as the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt;</ph> method, to manipulate the value of a <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">적절 한 멤버를 사용 하 여는 <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType&gt;</ph> 클래스 같은 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A&gt;</ph> 메서드 값을 조작 하는 <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The .NET Framework Class Library commonly uses <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instances in the following ways:</source>
          <target state="translated">자주 사용 되는.NET Framework 클래스 라이브러리 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 다음과 같은 방법으로 인스턴스:</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To provide password information to a process by using the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> structure or by calling an overload of the <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType&gt;</ph> method that has a parameter of type <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph>.</source>
          <target state="translated">사용 하 여 프로세스에 대 한 암호 정보를 제공 하는 <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> 구조체 또는 오버 로드를 호출 하는 <ph id="ph2">&lt;xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType&gt;</ph> 형식의 매개 변수가 있는 메서드에 <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To provide network password information by calling a <ph id="ph1">&lt;xref:System.Net.NetworkCredential&gt;</ph> class constructor that has a parameter of type <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> or by using the <ph id="ph3">&lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">호출 하 여 네트워크 암호 정보를 제공 하는 <ph id="ph1">&lt;xref:System.Net.NetworkCredential&gt;</ph> 형식의 매개 변수를 가진 클래스 생성자 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> 또는 사용 하 여는 <ph id="ph3">&lt;xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To provide password information for SQL Server Authentication by calling the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor or retrieving the value of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">호출 하 여 SQL Server 인증에 대 한 암호 정보를 제공 하는 <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType&gt;</ph> 생성자 또는 값을 검색 하는 <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>To pass a string to unmanaged code.</source>
          <target state="translated">비관리 코드에 문자열을 전달 하 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>SecureString interop 및<ept id="p1">](#interop)</ept> 섹션.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>맨 위로 이동<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>SecureString and interop</source>
          <target state="translated">SecureString 및 interop</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because the operating system does not  directly support <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>, you must convert the value of the <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> object to the required string type before passing the string to a native method.</source>
          <target state="translated">운영 체제에서 직접 지원 하지 않으므로 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>를 값으로 변환 해야 합니다는 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> 개체에 네이티브 메서드에서 문자열을 전달 하기 전에 필수 문자열 형식입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class has five methods that do this:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> 클래스에이 작업을 수행 하는 5 개의 메서드가 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType&gt;</ph>, which converts the <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> string value to a binary string (BSTR) recognized by COM.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType&gt;</ph>으로 변환 하는 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> 문자열 이진 문자열 (BSTR) com 인식 하는 값</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType&gt;</ph>, which copy the <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> string value to an ANSI string in unmanaged memory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType&gt;</ph>는 복사는 <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> 문자열을 관리 되지 않는 메모리에서 ANSI 문자열 값입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType&gt;</ph>, which copy the <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> string value to a Unicode string in unmanaged memory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType&gt;</ph>는 복사는 <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> 문자열 값 관리 되지 않는 메모리에서 유니코드 문자열입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Each of these methods creates a clear-text string in unmanaged memory.</source>
          <target state="translated">이러한 각 방법의 관리 되지 않는 메모리의 일반 텍스트 문자열을 만듭니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.</source>
          <target state="translated">것은을 비우고 더 이상 필요 하는 즉시 해당 메모리를 확보 하는 개발자의 책임입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:</source>
          <target state="translated">문자열 변환 및 메모리 할당 메서드는 각각 해당 하는 메서드를 비우고 할당된 된 메모리:</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Allocation and conversion method</source>
          <target state="translated">할당 및 변환 메서드</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Zero and free method</source>
          <target state="translated">0과 free 메서드</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>맨 위로 이동<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>How secure is SecureString?</source>
          <target state="translated">SecureString은 얼마나 안전?</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>When created properly, a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance provides more data protection than a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">적절 하 게 만들 때 한 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 보다 더 많은 데이터 보호를 제공 하는 인스턴스는 <ph id="ph2">&lt;xref:System.String&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>When creating a string from a character-at-a-time source, <ph id="ph1">&lt;xref:System.String&gt;</ph> creates multiple intermediate in memory, whereas  <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> creates just a single instance.</source>
          <target state="translated">문자 런타임 원본에서 문자열을 만들 때 <ph id="ph1">&lt;xref:System.String&gt;</ph> 여러 중간 메모리에 만듭니다. 반면 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> 바로 단일 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Garbage collection of <ph id="ph1">&lt;xref:System.String&gt;</ph> objects  is non-deterministic.</source>
          <target state="translated">가비지 수집의 <ph id="ph1">&lt;xref:System.String&gt;</ph> 개체 명확 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>In addition, because its memory is not pinned, the garbage collector will make additional copies of <ph id="ph1">&lt;xref:System.String&gt;</ph> values when moving and compacting memory.</source>
          <target state="translated">또한 메모리 고정 되지 않으므로 때문에 가비지 수집기 추가의 복사본을 만드는 <ph id="ph1">&lt;xref:System.String&gt;</ph> 값 메모리를 압축 하 고 이동 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>In contrast, the memory allocated to a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is pinned,  and that memory can be freed by calling the <ph id="ph2">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method.</source>
          <target state="translated">반면에 할당 된 메모리는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체를 고정 하 고 호출 하 여 해당 메모리를 해제할 수는 <ph id="ph2">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Although data stored in a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance is more secure than data stored in a <ph id="ph2">&lt;xref:System.String&gt;</ph> instance, there are significant limitations on how secure a <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> instance is.</source>
          <target state="translated">데이터에 저장 되지만 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 인스턴스가에 저장 된 데이터 보다 더 안전는 <ph id="ph2">&lt;xref:System.String&gt;</ph> 인스턴스를 보안에 중요 한 제한 사항이 <ph id="ph3">&lt;xref:System.Security.SecureString&gt;</ph> 인스턴스가 있습니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>These include:</source>
          <target state="translated">여기에는 다음이 포함됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Platform</source>
          <target state="translated">플랫폼</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>On the Windows operating system, the contents of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance's internal character array are encrypted.</source>
          <target state="translated">Windows 운영 체제의 내용에는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 인스턴스의 내부 문자 배열 암호화 됩니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.</source>
          <target state="translated">그러나 누락 된 Api 또는 키 관리 문제 인해 여부 암호화가 모든 플랫폼에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because of this platform dependency, <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> does not encrypt the internal storage on non-Windows platform.</source>
          <target state="translated">이 플랫폼 종속성으로 인해 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> Windows 이외의 플랫폼에서 내부 저장소를 암호화 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Other techniques are used on those platforms to provide additional protection.</source>
          <target state="translated">명시 된 기타 기술은 보호 하기 위해 해당 플랫폼에 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Duration</source>
          <target state="translated">기간</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Even if the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> implementation is able to take advantage of encryption, the plain text assigned to the <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> instance may be exposed at various times:</source>
          <target state="translated">경우에는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 구현 암호화 기능을 활용할 수에 할당 된 일반 텍스트는 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> 인스턴스는 다양 한 시간에 노출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.</source>
          <target state="translated">Windows 운영 체제 수준에서 보안 문자열 구현을 제공 하지 않으면.NET Framework 여전히 하기 때문에 보안 문자열 값을 사용 하려면 일반 텍스트 표현으로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Whenever the value of the secure string is modified by methods such as <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, it must be decrypted (i.e., converted back to plain text), modified, and then encrypted again.</source>
          <target state="translated">보안 문자열의 값 수정 될 때마다 메서드에 의해와 같은 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>를 해독 해야 합니다 (즉, 변환 된 뒤로를 일반 텍스트로), 수정, 한 다음 다시 암호화 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).</source>
          <target state="translated">Interop 호출에 보안 문자열을 사용 하는 경우 ANSI 문자열, 유니코드 문자열 또는 이진 문자열 (BSTR)을 변환 합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>For more information, see the <bpt id="p1">[</bpt>SecureString and interop<ept id="p1">](#interop)</ept> section.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>SecureString interop 및<ept id="p1">](#interop)</ept> 섹션.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The time interval for which the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance's value is exposed  is merely shortened in comparison to the <ph id="ph2">&lt;xref:System.String&gt;</ph> class.</source>
          <target state="translated">시간 간격을는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 인스턴스의 값이 노출 단순히 비해 줄어듭니다는 <ph id="ph2">&lt;xref:System.String&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Storage versus usage</source>
          <target state="translated">사용 및 저장소</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>More generally, the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class defines a storage mechanism for string values that should be protected or kept confidential.</source>
          <target state="translated">보다 일반적으로 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 클래스 보호 되거나 기밀로 유지 해야 하는 문자열 값에 대 한 저장소 메커니즘을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>However, outside of the .NET Framework itself, no usage mechanism supports <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>.</source>
          <target state="translated">그러나 외부.NET Framework 자체에서 사용 현황 메커니즘이 지원 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.</source>
          <target state="translated">즉, 보안 문자열을 해당 대상에서 인식할 수 있는 가능한 형식 (일반적으로 일반 텍스트 형식)으로 변환 해야 하 고 암호 해독 및 변환 사용자 공간에서 수행 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Overall, <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is more secure than <ph id="ph2">&lt;xref:System.String&gt;</ph> because it limits the exposure of sensitive string data.</source>
          <target state="translated">전반적으로 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 보다 더 안전 <ph id="ph2">&lt;xref:System.String&gt;</ph> 중요 한 문자열 데이터의 노출을 제한 하므로 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.</source>
          <target state="translated">그러나 이러한 문자열 프로세스 또는 호스트 컴퓨터, 프로세스 덤프 또는 사용자가 볼 수 있는 스왑 파일에서 실행 되는 악성 프로세스 등의 원시 메모리에 액세스할 수 있는 작업에 노출 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>Instead of using <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.</source>
          <target state="translated">사용 하는 대신 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 암호를 보호 하려면 메서드 대신 사용 하는 것을 프로세스 외부에 저장 된 자격 증명으로 불투명 핸들입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>맨 위로 이동<ept id="p1">](#top)</ept></target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecureString">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> to secure a user’s password for use as a credential to start a new process.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 새로운 프로세스를 시작 하는 자격 증명으로 사용 하기 위해 사용자의 암호를 보안 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Security.SecureString">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor">
          <source>The following example uses the default (or parameterless) constructor to instantiate a new <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">다음 예에서는 기본값을 사용 하 여 (또는 매개 변수가 없는) 생성자를 인스턴스화하는 새 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> method to add an array of characters to it.</source>
          <target state="translated">그런 다음 호출 하는 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> 메서드를 추가할 문자 배열입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object from the value of a <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체의 값에서 한 <ph id="ph2">&lt;xref:System.String&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor">
          <source>An error occurred while protecting or unprotecting the value of this instance.</source>
          <target state="translated">이 인스턴스의 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor">
          <source>This operation is not supported on this platform.</source>
          <target state="translated">이 작업이 이 플랫폼에서 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>A pointer to an array of <ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> 개체의 배열에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>The number of elements of <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to include in the new instance.</source>
          <target state="translated">새 인스턴스에 포함할 <bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept>의 요소 수입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> class from a subarray of <ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Char" /&gt;</ph> 개체의 하위 배열에서 <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>This constructor is not CLS-compliant.</source>
          <target state="translated">이 생성자는 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>The CLS-compliant alternative is <ph id="ph1">&lt;see cref="M:System.Security.SecureString.#ctor" /&gt;</ph>.</source>
          <target state="translated">CLS 규격 대체 항목은 <ph id="ph1">&lt;see cref="M:System.Security.SecureString.#ctor" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>This constructor initializes the new <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object to the number of characters in <ph id="ph2">`value`</ph> specified by <ph id="ph3">`length`</ph>; the value of the instance is then encrypted.</source>
          <target state="translated">이 생성자는 새 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 개체에 있는 문자의 수를 <ph id="ph2">`value`</ph> 에 지정 된 <ph id="ph3">`length`</ph>; 인스턴스의 값이 다음 암호화 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>In C#, this constructor is defined only in the context of unsafe code.</source>
          <target state="translated">이 생성자는 C#에서는 안전 하지 않은 코드의 경우에만 정의 됩니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>The following example instantiates a new <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object by passing its constructor a pointer to a character array.</source>
          <target state="translated">다음 예제에서는 새 인스턴스화합니다 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 문자 배열에 대 한 포인터 생성자에 전달 하 여 개체입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="length" /&gt;</ph> is less than zero or greater than 65,536.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph>가 0보다 작거나 65,536보다 큽니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>This operation is not supported on this platform.</source>
          <target state="translated">이 작업이 이 플랫폼에서 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>A character to append to this secure string.</source>
          <target state="translated">이 보안 문자열에 추가할 문자입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>Appends a character to the end of the current secure string.</source>
          <target state="translated">현재 보안 문자열의 끝에 문자를 추가합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is appended; then the new value of the secure string is re-protected.</source>
          <target state="translated">있는 경우이 보안 문자열의 값이; 보호 된 구현에서는 암호화 같은 보호 메커니즘을 사용 하는 경우 <ph id="ph1">`c`</ph> 붙여집니다; 보안 문자열의 새 값은 다시 보호 합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 방법을 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> 메서드가의 값에 영향을 <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> methods can be used to collect the characters in a password.</source>
          <target state="translated">다음 예제에서는 방법을 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> 메서드를 사용 하 여 암호의 문자를 수집할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>This secure string has already been disposed.</source>
          <target state="translated">이 보안 문자열이 이미 삭제된 경우</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>This secure string is read-only.</source>
          <target state="translated">이 보안 문자열이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
          <target state="translated">이 작업을 수행하면 이 보안 문자열의 길이가 65536문자보다 커집니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.AppendChar(System.Char)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Clear">
          <source>Deletes the value of the current secure string.</source>
          <target state="translated">현재 보안 문자열의 값을 삭제합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Clear">
          <source>The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</source>
          <target state="translated">이 보안 문자열의 값을 포함 하는 컴퓨터 메모리를 0으로 처리 한 후이 보안 문자열의 값의 길이 0으로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Clear">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 방법을 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> 메서드가의 값에 영향을 <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Clear">
          <source>This secure string has already been disposed.</source>
          <target state="translated">이 보안 문자열이 이미 삭제된 경우</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Clear">
          <source>This secure string is read-only.</source>
          <target state="translated">이 보안 문자열이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Copy">
          <source>Creates a copy of the current secure string.</source>
          <target state="translated">현재 보안 문자열의 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Copy">
          <source>A duplicate of this secure string.</source>
          <target state="translated">이 보안 문자열의 복제본입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Copy">
          <source>If an instance of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is marked read-only, the copy of that instance will not be read-only.</source>
          <target state="translated">인스턴스는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 은 읽기 전용으로 표시, 해당 인스턴스의 복사본 됩니다 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Copy">
          <source>This secure string has already been disposed.</source>
          <target state="translated">이 보안 문자열이 이미 삭제된 경우</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Copy">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.Dispose">
          <source>Releases all resources used by the current <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Security.SecureString" /&gt;</ph> 개체에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> method writes binary zeroes to the allocated memory that contains the value of this <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> object, then frees the allocated memory.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString.Dispose%2A&gt;</ph> 메서드 작성이 값이 포함 된 할당된 된 메모리에 이진 0 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> 한 다음 할당 된 메모리를 해제 합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>가비지 수집<ept id="p1">](http://msdn.microsoft.com/library/22b6cb97-0c80-4eeb-a2cf-5ed7655e37f9)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The index position where parameter <bpt id="p1">&lt;c&gt;</bpt>c<ept id="p1">&lt;/c&gt;</ept> is inserted.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>c<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 삽입될 인덱스 위치입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The character to insert.</source>
          <target state="translated">삽입할 문자입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>Inserts a character in this secure string at the specified index position.</source>
          <target state="translated">이 보안 문자열의 지정한 인덱스 위치에 문자를 삽입합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The index is zero-based; the first character in this secure string is at index position zero.</source>
          <target state="translated">인덱스는 0부터 시작 합니다. 이 보안 문자열의 첫 번째 문자 인덱스 위치 0입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is inserted at the specified index position; then the new value is re-protected.</source>
          <target state="translated">있는 경우 보안 문자열의 값이; 보호 된 구현에서는 암호화 같은 보호 메커니즘을 사용 하는 경우 <ph id="ph1">`c`</ph> ; 지정 된 인덱스 위치에 삽입 되어 새 값은 다시 보호 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> method yields the same results as the <ph id="ph2">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> method, which inserts a character at the end of a secure string, if the <ph id="ph3">`index`</ph> parameter of <ph id="ph4">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> is set to the length of this instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> 와 동일한 결과 생성 하는 메서드는 <ph id="ph2">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> 메서드를 보안 문자열의 끝에 문자를 삽입 하는 경우는 <ph id="ph3">`index`</ph> 의 매개 변수 <ph id="ph4">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph> 이 인스턴스의 길이를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 방법을 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> 메서드가의 값에 영향을 <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>This secure string has already been disposed.</source>
          <target state="translated">이 보안 문자열이 이미 삭제된 경우</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>This secure string is read-only.</source>
          <target state="translated">이 보안 문자열이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero, or greater than the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작거나 이 보안 문자열의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>Performing this operation would make the length of this secure string greater than 65,536 characters.</source>
          <target state="translated">이 작업을 수행하면 이 보안 문자열의 길이가 65536문자보다 커집니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.IsReadOnly">
          <source>Indicates whether this secure string is marked read-only.</source>
          <target state="translated">이 보안 문자열이 읽기 전용으로 표시되었는지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this secure string is marked read-only; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 보안 문자열이 읽기 전용이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.IsReadOnly">
          <source>After an instance of <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> is marked read-only by the <ph id="ph2">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method, any attempt to modify the value of the instance throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">인스턴스 뒤 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 읽기 전용으로 표시 되는 <ph id="ph2">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> 인스턴스 throw의 값을 수정 하려고 하면 메서드에 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.IsReadOnly">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph> method to test whether a <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> is read-only before attempting to modify it.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph> 메서드 테스트를 여부는 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> 수정 하려고 하기 전에 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.IsReadOnly">
          <source>This secure string has already been disposed.</source>
          <target state="translated">이 보안 문자열이 이미 삭제된 경우</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Security.SecureString.Length">
          <source>Gets the number of characters in the current secure string.</source>
          <target state="translated">현재 보안 문자열의 문자 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecureString.Length">
          <source>The number of <ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> objects in this secure string.</source>
          <target state="translated">이 보안 문자열에 있는 <ph id="ph1">&lt;see cref="T:System.Char" /&gt;</ph> 개체의 수입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecureString.Length">
          <source>The <ph id="ph1">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph> property returns the number of <ph id="ph2">&lt;xref:System.Char&gt;</ph> objects in this instance, not the number of Unicode characters.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.SecureString.Length%2A&gt;</ph> 속성의 수를 반환 <ph id="ph2">&lt;xref:System.Char&gt;</ph> 의이 인스턴스 개체, 유니코드 문자 수 없습니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecureString.Length">
          <source>A Unicode character might be represented by more than one <ph id="ph1">&lt;xref:System.Char&gt;</ph> object.</source>
          <target state="translated">개 이상의 유니코드 문자를 표현 될 수 있습니다 <ph id="ph1">&lt;xref:System.Char&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecureString.Length">
          <source>The maximum length of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> instance is 65,536 characters.</source>
          <target state="translated">최대 길이 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 인스턴스는 65, 536 자입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Security.SecureString.Length">
          <source>This secure string has already been disposed.</source>
          <target state="translated">이 보안 문자열이 이미 삭제된 경우</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>Makes the text value of this secure string read-only.</source>
          <target state="translated">이 보안 문자열의 텍스트 값을 읽기 전용으로 만듭니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>Initialize the text value of an instance of the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class with the <ph id="ph2">&lt;xref:System.Security.SecureString.%23ctor%2A&gt;</ph> constructors, and modify the value with the <ph id="ph3">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> methods.</source>
          <target state="translated">텍스트 값의 인스턴스를 초기화는 <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> 클래스와 <ph id="ph2">&lt;xref:System.Security.SecureString.%23ctor%2A&gt;</ph> 생성자를 사용 하 여 값을 수정 하 고는 <ph id="ph3">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>After you have made your final modifications, use the <ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> method to make the value of the instance immutable (read-only).</source>
          <target state="translated">최종 사용자 따라 수정한 후 사용 하 여는 <ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> 인스턴스 값을 변경할 수 없는 만드는 메서드와 알림이 (읽기 전용).</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>After the value is marked as read-only, any further attempt to modify it throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">값은 읽기 전용으로 표시 되 면 후 하려고 throw 수정 프로그램 <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>The effect of invoking <ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> is permanent because the <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> class provides no means to make the secure string modifiable again.</source>
          <target state="translated">호출의 효과 <ph id="ph1">&lt;xref:System.Security.SecureString.MakeReadOnly%2A&gt;</ph> 영구적 때문에 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> 클래스는 보안 문자열을 다시 수정할 수 있도록 의미를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>Use the <ph id="ph1">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph> method to test whether an instance of <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> is read-only.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Security.SecureString.IsReadOnly%2A&gt;</ph> 인스턴스에 있는지 여부를 테스트 메서드에 <ph id="ph2">&lt;xref:System.Security.SecureString&gt;</ph> 읽기 전용입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> methods can be used to collect the characters in a password.</source>
          <target state="translated">다음 예제에서는 방법을 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> 메서드를 사용 하 여 암호의 문자를 수집할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>After the password is collected, it is made read-only.</source>
          <target state="translated">암호를 수집한 후 읽기 전용으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.MakeReadOnly">
          <source>This secure string has already been disposed.</source>
          <target state="translated">이 보안 문자열이 이미 삭제된 경우</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>The index position of a character in this secure string.</source>
          <target state="translated">이 보안 문자열에서 문자의 인덱스 위치입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>Removes the character at the specified index position from this secure string.</source>
          <target state="translated">이 보안 문자열에서 지정한 인덱스 위치의 문자를 제거합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
          <target state="translated">인덱스는 0부터 시작 합니다. 이 인스턴스의의 첫 번째 문자 인덱스 위치 0입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</source>
          <target state="translated">있는 경우이 보안 문자열의 값이; 보호 된 구현에서는 암호화 같은 보호 메커니즘을 사용 하는 경우 지정된 된 인덱스 위치에 있는 문자가 제거 됩니다. 그런 다음 새 값이 다시 보호 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 방법을 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> 메서드가의 값에 영향을 <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> methods can be used to collect the characters in a password.</source>
          <target state="translated">다음 예제에서는 방법을 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph> 메서드를 사용 하 여 암호의 문자를 수집할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>This secure string has already been disposed.</source>
          <target state="translated">이 보안 문자열이 이미 삭제된 경우</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>This secure string is read-only.</source>
          <target state="translated">이 보안 문자열이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작거나 이 보안 문자열의 길이보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.RemoveAt(System.Int32)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>The index position of an existing character in this secure string</source>
          <target state="translated">이 보안 문자열에서 기존 문자의 인덱스 위치입니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>A character that replaces the existing character.</source>
          <target state="translated">기존 문자를 바꾸는 문자입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>Replaces the existing character at the specified index position with another character.</source>
          <target state="translated">지정한 인덱스 위치의 기존 문자를 다른 문자로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>The index is zero-based; the first character in this instance is at index position zero.</source>
          <target state="translated">인덱스는 0부터 시작 합니다. 이 인스턴스의의 첫 번째 문자 인덱스 위치 0입니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; <ph id="ph1">`c`</ph> is assigned to the specified index position; then the new value is re-protected.</source>
          <target state="translated">있는 경우 보안 문자열의 값이; 보호 된 구현에서는 암호화 같은 보호 메커니즘을 사용 하는 경우 <ph id="ph1">`c`</ph> ; 지정한 인덱스 위치에 할당 된 새 값은 다시 보호 합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> methods affect the value of a <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> object.</source>
          <target state="translated">다음 예제에서는 방법을 <ph id="ph1">&lt;xref:System.Security.SecureString.AppendChar%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.SecureString.InsertAt%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.SecureString.RemoveAt%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecureString.SetAt%2A&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Security.SecureString.Clear%2A&gt;</ph> 메서드가의 값에 영향을 <ph id="ph6">&lt;xref:System.Security.SecureString&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>This secure string has already been disposed.</source>
          <target state="translated">이 보안 문자열이 이미 삭제된 경우</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>This secure string is read-only.</source>
          <target state="translated">이 보안 문자열이 읽기 전용인 경우</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero, or greater than or equal to the length of this secure string.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작거나 이 보안 문자열의 길이보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
          <source>An error occurred while protecting or unprotecting the value of this secure string.</source>
          <target state="translated">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>