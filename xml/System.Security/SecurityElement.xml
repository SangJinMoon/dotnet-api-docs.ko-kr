<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="SecurityElement.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c818d504196f12b9c0fb2d709edba0ae29cba89d4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">818d504196f12b9c0fb2d709edba0ae29cba89d4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.SecurityElement">
          <source>Represents the XML object model for encoding security objects.</source>
          <target state="translated">보안 개체를 인코딩하기 위한 XML 개체 모델을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Security.SecurityElement">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.</source>
          <target state="translated">이 클래스는 단순 XML 개체 모델 보안 시스템 내에서 사용 하기 위해 일반 XML 개체 모델으로 사용할 수 있도록 하지의 간단한 구현이 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>This documentation assumes a basic knowledge of XML.</source>
          <target state="translated">이 문서에는 XML에 대 한 기본적인 지식이 있다고 가정 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>The simple XML object model for an element consists of the following parts:</source>
          <target state="translated">단순 XML 개체 모델 요소에 대 한 다음과 같은 부분으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>The tag is the element name.</source>
          <target state="translated">태그에는 요소 이름입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>The attributes are zero or more name/value attribute pairs on the element.</source>
          <target state="translated">특성은 요소에 0 개 이상의 이름/값 특성 쌍입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>The children are zero or more elements nested within <ph id="ph1">`&lt;tag&gt;`</ph> and <ph id="ph2">`&lt;/tag&gt;`</ph>.</source>
          <target state="translated">자식은 0 이나 더 많은 요소가 중첩 <ph id="ph1">`&lt;tag&gt;`</ph> 및 <ph id="ph2">`&lt;/tag&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>It is strongly suggested that attribute based XML representation is used to express security elements and their values.</source>
          <target state="translated">특성 기반 XML 표현을 보안 요소 및 해당 값을 표현 하는 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>This means properties of an element are expressed as attributes and property values are expressed as attribute values.</source>
          <target state="translated">즉, 있는 요소의 속성을 특성으로 표시 되는 속성 값을 특성 값으로 표현 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>Avoid nesting text within tags.</source>
          <target state="translated">태그 내의 텍스트를 중첩 하지 마십시오.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>For any <ph id="ph1">`&lt;tag&gt;text&lt;/tag&gt;`</ph> representation a representation of type <ph id="ph2">`&lt;tag value="text"/&gt;`</ph> is usually available.</source>
          <target state="translated">에 대 한 <ph id="ph1">`&lt;tag&gt;text&lt;/tag&gt;`</ph> 형식의 표현을 표현 <ph id="ph2">`&lt;tag value="text"/&gt;`</ph> 일반적으로 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization.</source>
          <target state="translated">이 특성에 기반한 XML 표현을 사용 하 여 가독성이 향상 되 고 결과 XML serialization의 쉬운 WMI 이식성을 허용 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>An attribute name must be one character or longer, and cannot be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">특성 이름은 1 자 이상 이어야 하며 안 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>If element-based value representation is used, elements with a text string that is <ph id="ph1">`null`</ph> are represented in the <ph id="ph2">`&lt;tag/&gt;`</ph> form; otherwise, text is delimited by the <ph id="ph3">`&lt;tag&gt;`</ph> and <ph id="ph4">`&lt;/tag&gt;`</ph> tokens.</source>
          <target state="translated">요소 기반 값 표현을 사용 하는 경우 텍스트를 사용 하 여 요소 문자열 <ph id="ph1">`null`</ph> 에서 표현 되는 <ph id="ph2">`&lt;tag/&gt;`</ph> 형성;로 텍스트 구분 그렇지 않은 경우는 <ph id="ph3">`&lt;tag&gt;`</ph> 및 <ph id="ph4">`&lt;/tag&gt;`</ph> 토큰입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>Both forms can be combined with attributes, which are shown if present.</source>
          <target state="translated">두 형태를 모두 표시 되는 특성을 함께 사용할 수 있는 경우.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>The tags, attributes, and text of elements, if present, are always case-sensitive.</source>
          <target state="translated">태그, 특성 및 요소의 텍스트는 존재 하면 항상 대/소문자 구분 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>The XML form contains quotations and escapes where necessary.</source>
          <target state="translated">XML 형식에는 인용 부호를 포함 하 고 필요한 경우를 이스케이프 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>String values that include characters invalid for use in XML result in an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">문자열 값이 XML에 사용 하기 위해 잘못 된 문자를 포함 하는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>These rules apply to all properties and methods.</source>
          <target state="translated">이러한 규칙은 모든 속성 및 메서드에 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method.</source>
          <target state="translated">성능상의 이유로 문자의 유효성은 때만 확인 요소는 XML 텍스트 형식으로 및 속성이 나 메서드의 모든 집합에 없는 인코딩됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>Static methods allow explicit checking where needed.</source>
          <target state="translated">정적 메서드를 명시적으로 필요한 부분을 검사할 사용 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.SecurityElement">
          <source>The following example shows the use of members of the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">다음 예제에서는의 멤버를 사용 하 여 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="T:System.Security.SecurityElement">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.#ctor(System.String)">
          <source>The tag name of an XML element.</source>
          <target state="translated">XML 요소의 태그 이름입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> class with the specified tag.</source>
          <target state="translated">지정된 태그를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.#ctor(System.String)">
          <source>The <ph id="ph1">`tag`</ph> parameter must consist of a valid XML tag name.</source>
          <target state="translated"><ph id="ph1">`tag`</ph> 매개 변수는 유효한 XML 태그 이름으로 구성 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.#ctor(System.String)">
          <source>Use <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> to remove invalid characters from the string.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> 문자열에서 잘못 된 문자를 제거 하려면.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.#ctor(System.String)">
          <source>The following code shows the use of  the <ph id="ph1">&lt;xref:System.Security.SecurityElement.%23ctor%2A&gt;</ph> constructor to create a new <ph id="ph2">&lt;xref:System.Security.SecurityElement&gt;</ph> object.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.%23ctor%2A&gt;</ph> 생성자를 만들려면 새 <ph id="ph2">&lt;xref:System.Security.SecurityElement&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.#ctor(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="tag" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tag" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="tag" /&gt;</ph> parameter is invalid in XML.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tag" /&gt;</ph> 매개 변수가 XML에 적합하지 않은 경우</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
          <source>The tag name of the XML element.</source>
          <target state="translated">XML 요소의 태그 이름입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
          <source>The text content within the element.</source>
          <target state="translated">요소 안에 있는 텍스트 내용입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> class with the specified tag and text.</source>
          <target state="translated">지정된 태그 및 텍스트를 사용하여 <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
          <source>If the <ph id="ph1">`text`</ph> parameter is <ph id="ph2">`null`</ph> this constructor produces an element identical to the default constructor.</source>
          <target state="translated">경우는 <ph id="ph1">`text`</ph> 매개 변수는 <ph id="ph2">`null`</ph> 이 생성자는 기본 생성자와 동일한 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="tag" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tag" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="tag" /&gt;</ph> parameter or <ph id="ph2">&lt;paramref name="text" /&gt;</ph> parameter is invalid in XML.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tag" /&gt;</ph> 매개 변수 또는 <ph id="ph2">&lt;paramref name="text" /&gt;</ph> 매개 변수가 XML에 적합하지 않은 경우</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>The name of the attribute.</source>
          <target state="translated">특성 이름입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>The value of the attribute.</source>
          <target state="translated">특성 값</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>Adds a name/value attribute to an XML element.</source>
          <target state="translated">이름/값 특성을 XML 요소에 추가합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>Names and values in attributes should only contain valid XML attribute characters.</source>
          <target state="translated">Name 및 value 특성에 유효한 XML 특성 문자만 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>XML attribute names must be unique.</source>
          <target state="translated">XML 특성 이름은 고유 해야 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>Use <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> to remove invalid characters from the string.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> 문자열에서 잘못 된 문자를 제거 하려면.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.</source>
          <target state="translated">지원은 없습니다 따옴표 붙은 문자열에 대 한 이름/값 쌍에 대 한 문자열에서 따옴표를 포함 하면 안 되므로 또는 따옴표가 필요한 기타 문자가 있습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.AddAttribute%2A&gt;</ph> method to add a name/value attribute to an XML element.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.AddAttribute%2A&gt;</ph> 메서드는 XML 요소를 이름/값 특성입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수 또는 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 매개 변수가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is invalid in XML.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수 또는 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 매개 변수가 XML에 적합하지 않은 경우</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
          <source>An attribute with the name specified by the <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter already exists.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수에서 지정한 이름을 가진 특성이 이미 존재하는 경우</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
          <source>The child element to add.</source>
          <target state="translated">추가할 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
          <source>Adds a child element to the XML element.</source>
          <target state="translated">자식 요소를 XML 요소에 추가합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
          <source>The child element is added following any previously existing child elements.</source>
          <target state="translated">자식 요소는 다음과 같은 모든 기존 자식 요소가 추가 됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.AddChild%2A&gt;</ph> method to add a child element to the XML element.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.AddChild%2A&gt;</ph> 메서드를 XML 요소에 자식 요소를 추가 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
          <source>The <ph id="ph1">&lt;paramref name="child" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="child" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Attribute(System.String)">
          <source>The name of the attribute for which to search.</source>
          <target state="translated">검색할 특성 이름입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Attribute(System.String)">
          <source>Finds an attribute by name in an XML element.</source>
          <target state="translated">XML 요소에서 특성을 이름으로 찾습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Attribute(System.String)">
          <source>The value associated with the named attribute, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no attribute with <ph id="ph2">&lt;paramref name="name" /&gt;</ph> exists.</source>
          <target state="translated">이름이 지정된 특성과 연결된 값입니다. <ph id="ph2">&lt;paramref name="name" /&gt;</ph>이 포함된 특성이 존재하지 않으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Attribute(System.String)">
          <source>With XML as follows, <ph id="ph1">`Attribute("B")`</ph> would return "456".</source>
          <target state="translated">다음과 같이 XML로 <ph id="ph1">`Attribute("B")`</ph> "456"를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Attribute(System.String)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.Attribute%2A&gt;</ph> method to find an attribute by name.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Attribute%2A&gt;</ph> 메서드 이름으로 특성을 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Attribute(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Attribute(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="name" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Attributes">
          <source>Gets or sets the attributes of an XML element as name/value pairs.</source>
          <target state="translated">XML 요소의 특성을 이름/값 쌍으로 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Attributes">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> object for the attribute values of the XML element.</source>
          <target state="translated">XML 요소의 특성 값에 대한 <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Attributes">
          <source>Each attribute is stored in the <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph> as a name/value pair.</source>
          <target state="translated">각 특성에 저장 됩니다는 <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph> 이름/값 쌍으로 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Attributes">
          <source>Names and values in attributes should contain only valid XML attribute characters.</source>
          <target state="translated">Name 및 value 특성에 유효한 XML 특성 문자만 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Attributes">
          <source>Use <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> to remove invalid characters from the string.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> 문자열에서 잘못 된 문자를 제거 하려면.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Attributes">
          <source>There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.</source>
          <target state="translated">지원은 없습니다 따옴표 붙은 문자열에 대 한 이름/값 쌍에 대 한 문자열에서 따옴표를 포함 하면 안 되므로 또는 따옴표가 필요한 기타 문자가 있습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Attributes">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.Attributes%2A&gt;</ph> property to get an attribute of an XML element.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Attributes%2A&gt;</ph> XML 요소의 특성을 가져올 속성입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Attributes">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Attributes">
          <source>The name or value of the <ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> object is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Hashtable" /&gt;</ph> 개체의 이름 또는 값이 잘못된 경우</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Attributes">
          <source>The name is not a valid XML attribute name.</source>
          <target state="translated">이름이 유효한 XML 특성 이름이 아닙니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Children">
          <source>Gets or sets the array of child elements of the XML element.</source>
          <target state="translated">XML 요소의 자식 요소 배열을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Children">
          <source>The ordered child elements of the XML element as security elements.</source>
          <target state="translated">보안 요소로서 순서가 있는 XML 요소의 자식 요소입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Children">
          <source>If a <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> contains both <ph id="ph2">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.SecurityElement.Children%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> will appear first.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 둘 다 포함 되어 <ph id="ph2">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Security.SecurityElement.Children%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> 맨 먼저 나타납니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Children">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.Children%2A&gt;</ph> property to get the array of child elements of the XML element.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Children%2A&gt;</ph> XML 요소의 자식 요소의 배열을 가져올 속성입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Children">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Children">
          <source>A child of the XML parent node is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">XML 부모 노드의 자식이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Copy">
          <source>Creates and returns an identical copy of the current <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> 개체의 동일한 복사본을 만들어 반환합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Copy">
          <source>A copy of the current <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> 개체의 복사본입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Copy">
          <source>The copy includes both the <ph id="ph1">&lt;xref:System.Security.SecurityElement.Children%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.SecurityElement.Attributes%2A&gt;</ph> properties.</source>
          <target state="translated">복사본 둘 다 포함 된 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Children%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Security.SecurityElement.Attributes%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
          <source>An XML element object to which to compare the current XML element object.</source>
          <target state="translated">현재 XML 요소 개체와 비교할 XML 요소 개체입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
          <source>Compares two XML element objects for equality.</source>
          <target state="translated">두 개의 XML 요소 개체가 일치하는지 비교합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 XML 요소의 태그, 특성 이름과 값, 자식 요소 및 텍스트 필드가 <ph id="ph2">&lt;paramref name="other" /&gt;</ph> 매개 변수의 상대 요소와 동일하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
          <source>If there are child elements, comparison extends recursively to them.</source>
          <target state="translated">자식 요소가 비교를 재귀적으로 확장 됩니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
          <source>There is no support for comparing different XML representations of the same characters.</source>
          <target state="translated">같은 문자의 다른 XML 표현 비교에 대 한 지원은 없습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.Equal%2A&gt;</ph> method to compare two XML elements.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Equal%2A&gt;</ph> 메서드 두 개의 XML 요소를 비교 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>The string within which to escape invalid characters.</source>
          <target state="translated">이스케이프할 잘못된 문자가 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>Replaces invalid XML characters in a string with their valid XML equivalent.</source>
          <target state="translated">문자열에 있는 잘못된 XML 문자를 해당하는 올바른 XML로 바꿉니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>The input string with invalid characters replaced.</source>
          <target state="translated">잘못된 문자가 있었으나 바뀐 입력 문자열입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>Use this method to replace invalid characters in a string before using the string in a <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph>.</source>
          <target state="translated">이 메서드를 사용 하는 문자열에 잘못 된 문자가 문자열에 사용 하기 전에 교체는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>If invalid characters are used in a <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> without being escaped, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated">잘못 된 문자에 사용 되는 경우는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 이스케이프 하지 않고는 <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>The following table shows the invalid XML characters and their escaped equivalents.</source>
          <target state="translated">다음 표에서 잘못 된 XML 문자 및 상응 하는 이스케이프를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>Invalid XML character</source>
          <target state="translated">잘못 된 XML 문자</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>Replaced with</source>
          <target state="translated">으로 대체</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> method to replace invalid XML characters in a string with their valid XML equivalent.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> 잘못 된 XML을 대체할 메서드를을 유효한 XML 동등한 문자열에 문자를 입력 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.Escape(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.FromString(System.String)">
          <source>The XML-encoded string from which to create the security element.</source>
          <target state="translated">보안 요소를 만드는 데 사용할 XML로 인코딩된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.FromString(System.String)">
          <source>Creates a security element from an XML-encoded string.</source>
          <target state="translated">XML로 인코딩된 문자열에서 보안 요소를 만듭니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.FromString(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph> created from the XML.</source>
          <target state="translated">XML에서 만든 <ph id="ph1">&lt;see cref="T:System.Security.SecurityElement" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.FromString(System.String)">
          <source>Do not use single quotation marks in the XML string; instead, use escaped double quotation marks.</source>
          <target state="translated">XML 문자열에서 작은따옴표를 사용 하지 마십시오 이스케이프 된 큰따옴표를 대신 사용 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.FromString(System.String)">
          <source>For example, instead of "<ph id="ph1">`&lt;value name='Company'&gt;Microsoft&lt;/value&gt;"`</ph> use "<ph id="ph2">`&lt;value name=\"Company\"&gt;Microsoft&lt;/value&gt;"`</ph>.</source>
          <target state="translated">예를 들어 대신의 "<ph id="ph1">`&lt;value name='Company'&gt;Microsoft&lt;/value&gt;"`</ph> 사용"<ph id="ph2">`&lt;value name=\"Company\"&gt;Microsoft&lt;/value&gt;"`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.FromString(System.String)">
          <source>Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string.</source>
          <target state="translated">작은따옴표를 사용 하 여 예외가 발생 하거나 또는 문자열에 텍스트로 간주 되는 작은따옴표 어떤 경우 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.FromString(System.String)">
          <source><ph id="ph1">&lt;paramref name="xml" /&gt;</ph> contains one or more single quotation mark characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xml" /&gt;</ph>에 하나 이상의 작은따옴표 문자가 포함된 경우</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.FromString(System.String)">
          <source><ph id="ph1">&lt;paramref name="xml" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xml" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
          <source>The attribute name to test for validity.</source>
          <target state="translated">유효성을 테스트할 특성 이름입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
          <source>Determines whether a string is a valid attribute name.</source>
          <target state="translated">문자열이 유효한 특성 이름인지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="name" /&gt;</ph> parameter is a valid XML attribute name; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="name" /&gt;</ph> 매개 변수가 유효한 XML 특성 이름이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
          <source>This method can be used to test an attribute before adding it to a security element.</source>
          <target state="translated">보안 요소를 추가 하기 전에 특성을 테스트 하려면이 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.IsValidAttributeName%2A&gt;</ph> method to determine whether a string is a valid attribute name.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.IsValidAttributeName%2A&gt;</ph> 메서드는 문자열에 잘못 된 특성 이름 인지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
          <source>The attribute value to test for validity.</source>
          <target state="translated">유효성을 테스트할 특성 값입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
          <source>Determines whether a string is a valid attribute value.</source>
          <target state="translated">문자열이 유효한 특성 값인지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is a valid XML attribute value; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph> 매개 변수가 유효한 XML 특성 값이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
          <source>This method can be used to test an attribute before adding it to a security element.</source>
          <target state="translated">보안 요소를 추가 하기 전에 특성을 테스트 하려면이 메서드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.IsValidAttributeValue%2A&gt;</ph> method to determine whether a string is a valid attribute value.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.IsValidAttributeValue%2A&gt;</ph> 메서드는 문자열에 유효한 특성 값을 인지 여부를 확인 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidTag(System.String)">
          <source>The tag to test for validity.</source>
          <target state="translated">유효성을 테스트할 태그입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidTag(System.String)">
          <source>Determines whether a string is a valid tag.</source>
          <target state="translated">문자열이 유효한 태그인지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidTag(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="tag" /&gt;</ph> parameter is a valid XML tag; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="tag" /&gt;</ph> 매개 변수가 유효한 XML 태그이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidTag(System.String)">
          <source>This can be used to test a <ph id="ph1">&lt;xref:System.Security.SecurityElement.Tag%2A&gt;</ph> before setting it.</source>
          <target state="translated">이 테스트에 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Tag%2A&gt;</ph> 설정 하기 전에.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidTag(System.String)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.IsValidTag%2A&gt;</ph> method to determine whether a string is a valid attribute tag.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.IsValidTag%2A&gt;</ph> 메서드를 문자열로 유효한 특성 태그 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidTag(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidText(System.String)">
          <source>The text to test for validity.</source>
          <target state="translated">유효성을 테스트할 텍스트입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidText(System.String)">
          <source>Determines whether a string is valid as text within an XML element.</source>
          <target state="translated">문자열이 XML 요소 내의 텍스트로 유효한지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.IsValidText(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="text" /&gt;</ph> parameter is a valid XML text element; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="text" /&gt;</ph> 매개 변수가 유효한 XML 텍스트 요소이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidText(System.String)">
          <source>This method can be used to test <ph id="ph1">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> before setting it.</source>
          <target state="translated">이 메서드는 테스트를 사용할 수 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> 설정 하기 전에.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidText(System.String)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.IsValidText%2A&gt;</ph> method to determine whether a string is valid as XML element text.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.IsValidText%2A&gt;</ph> 메서드를 문자열로 XML 요소의 텍스트로 올바른지 여부를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.IsValidText(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
          <source>The tag for which to search in child elements.</source>
          <target state="translated">자식 요소에서 검색할 태그입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
          <source>Finds a child by its tag name.</source>
          <target state="translated">태그 이름으로 자식을 찾습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
          <source>The first child XML element with the specified tag value, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no child element with <ph id="ph2">&lt;paramref name="tag" /&gt;</ph> exists.</source>
          <target state="translated">지정된 태그 값을 가지는 첫째 자식 XML 요소입니다. <ph id="ph2">&lt;paramref name="tag" /&gt;</ph>를 가지는 자식 요소가 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
          <source>With XML as follows, <ph id="ph1">`SearchForChildByTag("second")`</ph> would return the child element <ph id="ph2">`&lt;second&gt;`</ph>.</source>
          <target state="translated">다음과 같이 XML로 <ph id="ph1">`SearchForChildByTag("second")`</ph> 자식 요소를 반환 합니다 <ph id="ph2">`&lt;second&gt;`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.SearchForChildByTag%2A&gt;</ph> method to find a child by its tag name.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.SearchForChildByTag%2A&gt;</ph> 메서드 자식 태그 이름을 사용 하 여 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="tag" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tag" /&gt;</ph> 매개 변수가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
          <source>The tag for which to search in child elements.</source>
          <target state="translated">자식 요소에서 검색할 태그입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
          <source>Finds a child by its tag name and returns the contained text.</source>
          <target state="translated">태그 이름으로 자식을 찾고 포함된 텍스트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
          <source>The text contents of the first child element with the specified tag value.</source>
          <target state="translated">지정된 태그 값을 가지는 첫째 자식 요소의 텍스트 내용입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
          <source>This method is equivalent to the following:</source>
          <target state="translated">이 메서드는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
          <source>With XML as follows, <ph id="ph1">`SearchForTextOfTag("second")`</ph> would return "text2".</source>
          <target state="translated">다음과 같이 XML로 <ph id="ph1">`SearchForTextOfTag("second")`</ph> "텍스트 2"를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.SearchForTextOfTag%2A&gt;</ph> method to find a child by its tag name and return the contained text.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.SearchForTextOfTag%2A&gt;</ph> 메서드 태그 이름을 사용 하 여 자식을 찾아 포함 된 텍스트를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
          <source><ph id="ph1">&lt;paramref name="tag" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="tag" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Tag">
          <source>Gets or sets the tag name of an XML element.</source>
          <target state="translated">XML 요소의 태그 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Tag">
          <source>The tag name of an XML element.</source>
          <target state="translated">XML 요소의 태그 이름입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Tag">
          <source>In XML, the tag appears in the script as appears below:</source>
          <target state="translated">Xml에서는 태그 아래에 표시 되는 스크립트에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Tag">
          <source>If this element has child elements, the children will replace <ph id="ph1">`text`</ph>.</source>
          <target state="translated">이 요소에 자식 요소가 있으면 자식 바뀝니다 <ph id="ph1">`text`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Tag">
          <source>Assign only valid XML tag strings to this property.</source>
          <target state="translated">이 속성에만 유효한 XML 태그 문자열을 할당 합니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Tag">
          <source>Use <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> to remove invalid characters from the string.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> 문자열에서 잘못 된 문자를 제거 하려면.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Tag">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.Tag%2A&gt;</ph> property to get the tag name of an XML element.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Tag%2A&gt;</ph> XML 요소 태그 이름을 가져올 속성입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Tag">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Tag">
          <source>The tag is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">태그가 <ph id="ph1">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Tag">
          <source>The tag is not valid in XML.</source>
          <target state="translated">태그가 XML에 적합하지 않은 경우</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Text">
          <source>Gets or sets the text within an XML element.</source>
          <target state="translated">XML 요소 안에 있는 텍스트를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Text">
          <source>The value of the text within an XML element.</source>
          <target state="translated">XML 요소 안에 있는 텍스트 값입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Text">
          <source>The text should not contain XML special characters.</source>
          <target state="translated">텍스트는 XML 특수 문자를 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Text">
          <source>Use <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> to remove invalid characters from the string.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Escape%2A&gt;</ph> 문자열에서 잘못 된 문자를 제거 하려면.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Text">
          <source>If a <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> contains both <ph id="ph2">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.SecurityElement.Children%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> will appear first.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 둘 다 포함 되어 <ph id="ph2">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Security.SecurityElement.Children%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> 맨 먼저 나타납니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Text">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> property to get the text of an XML element.</source>
          <target state="translated">다음 코드의 사용을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Security.SecurityElement.Text%2A&gt;</ph> XML 요소의 텍스트를 가져올 속성입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.SecurityElement.Text">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Security.SecurityElement&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="P:System.Security.SecurityElement.Text">
          <source>The text is not valid in XML.</source>
          <target state="translated">태그가 XML에 적합하지 않은 경우</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.ToString">
          <source>Produces a string representation of an XML element and its constituent attributes, child elements, and text.</source>
          <target state="translated">XML 요소의 문자열 표현과 구성 요소 특성, 자식 요소 및 텍스트를 만듭니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Security.SecurityElement.ToString">
          <source>The XML element and its contents.</source>
          <target state="translated">XML 요소 및 해당 내용입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.SecurityElement.ToString">
          <source>This method is useful in debugging to see the XML representation of the element.</source>
          <target state="translated">이 메서드는 요소의 XML 표현을 확인 하는 디버깅에 유용 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>