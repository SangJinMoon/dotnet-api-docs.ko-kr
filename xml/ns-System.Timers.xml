<Namespace Name="System.Timers">
  <Metadata><Meta Name="ms.openlocfilehash" Value="16e8a11b0b2e9a1da17eb506a6408b9e4ee97265" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="30736177" /></Metadata><Docs>
    <summary><span data-ttu-id="c2064-101"><see cref="N:System.Timers" /> 네임스페이스는 <see cref="T:System.Timers.Timer" /> 구성 요소를 제공합니다. 이 구성 요소를 사용하면 지정된 간격으로 이벤트를 발생시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c2064-101">The <see cref="N:System.Timers" /> namespace provides the <see cref="T:System.Timers.Timer" /> component, which allows you to raise an event on a specified interval.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2064-102">합니다 <xref:System.Timers.Timer> 구성 요소는 되풀이 간격을 지정할 수 있는 서버 기반 타이머는는 <xref:System.Timers.Timer.Elapsed> 애플리케이션에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2064-102">The <xref:System.Timers.Timer> component is a server-based timer, which allows you to specify a recurring interval at which the <xref:System.Timers.Timer.Elapsed> event is raised in your application.</span></span> <span data-ttu-id="c2064-103">그런 다음 정상적인 처리를 제공 하려면이 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c2064-103">You can then handle this event to provide regular processing.</span></span> <span data-ttu-id="c2064-104">예를 들어, 유지 해야 하는 중요 한 서버가 있는 24 시간 내내 하루를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2064-104">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="c2064-105">사용 하는 서비스를 만들 수는 <xref:System.Timers.Timer> 주기적으로 서버를 검사 하는 시스템이 실행 되 고 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2064-105">You could create a service that uses a <xref:System.Timers.Timer> to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="c2064-106">시스템이 응답 하지 않는 경우 서비스 서버를 다시 시작 하거나 관리자에 게 알리는를 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c2064-106">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
 <span data-ttu-id="c2064-107">서버 기반 <xref:System.Timers.Timer> 다중 스레드 환경에서 작업자 스레드를 사용 하 여 사용 하도록 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c2064-107">The server-based <xref:System.Timers.Timer> is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="c2064-108">발생 한 처리 서버 타이머 스레드로 이동할 수 <xref:System.Timers.Timer.Elapsed> 이벤트에 Windows 타이머 시간에 이벤트를 발생 시키는 것 보다 더 정확 합니다.</span><span class="sxs-lookup"><span data-stu-id="c2064-108">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>