<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ElapsedEventArgs.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5054276d76f47da80b3b5509fe52a79591bb5b8dc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">054276d76f47da80b3b5509fe52a79591bb5b8dc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Timers.ElapsedEventArgs">
          <source>Provides data for the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트에 대한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.ElapsedEventArgs">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 발생 하는 개체의 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.ElapsedEventArgs">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">값을 표시 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> 속성 될 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="P:System.Timers.ElapsedEventArgs.SignalTime">
          <source>Gets the date/time when the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event was raised.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트가 발생한 날짜/시간을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.ElapsedEventArgs.SignalTime">
          <source>The time the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event was raised.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트가 발생한 시간입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.ElapsedEventArgs.SignalTime">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event is raised on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread, so the event-handling method might run on one thread at the same time that a call to the <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType&gt;</ph> method runs on another thread.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 에서 이벤트가 발생 합니다는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드, 이벤트 처리 메서드는 동일한 하나의 스레드에서 실행 되므로 시간에 대 한 호출은 <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType&gt;</ph> 다른 스레드에서 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.ElapsedEventArgs.SignalTime">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">이 될 수 있습니다는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 후 발생 하는 이벤트는 <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.ElapsedEventArgs.SignalTime">
          <source>This race condition cannot be prevented simply by comparing the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A&gt;</ph> property with the time when the <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called, because the event-handling method might already be executing when the <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called, or might begin executing between the moment when the <ph id="ph4">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called and the moment when the stop time is saved.</source>
          <target state="translated">비교 하 여이 경합 상태를 방지할 수 없습니다는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A&gt;</ph> 속성 시간 때는 <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 이벤트 처리 메서드 수 때 이미 실행 하기 때문에 메서드가 호출 되는 <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드를 호출 하거나 시작할 수 있습니다 순간 사이 실행 때는 <ph id="ph4">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드를 호출 하 고 중지 시간이 저장 될 때 현재 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.ElapsedEventArgs.SignalTime">
          <source>If it is critical to prevent the thread that calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method from proceeding while the event-handling method is still executing, use a more robust synchronization mechanism such as the <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> class or the <ph id="ph3">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method.</source>
          <target state="translated">호출 하는 스레드를 방지 하기 위해 중요 한 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 이벤트 처리 메서드 여전히 실행 되는 동안 진행 메서드와 같은 보다 강력한 동기화 메커니즘을 사용는 <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph> 클래스 또는 <ph id="ph3">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.ElapsedEventArgs.SignalTime">
          <source>Code that uses the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> method can be found in the example for the <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">사용 하는 코드는 <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%2A&gt;</ph> 대 한 예제에서 메서드를 찾을 수는 <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.ElapsedEventArgs.SignalTime">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 발생 하는 개체의 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.ElapsedEventArgs.SignalTime">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">값을 표시 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> 속성 될 때마다 발생 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>