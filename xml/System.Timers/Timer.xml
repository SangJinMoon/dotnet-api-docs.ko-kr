<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Timer.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5618b69c9a4d91151391fe5e2c79054e0441f4aec.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">618b69c9a4d91151391fe5e2c79054e0441f4aec</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Timers.Timer">
          <source>Generates an event after a set interval, with an option to generate recurring events.</source>
          <target state="translated">반복 이벤트를 생성하는 옵션으로 설정된 간격 후 이벤트를 생성합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component is a server-based timer that raises an <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event in your application after the number of milliseconds in the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property has elapsed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 구성 요소는 발생 하는 서버 기반 타이머는 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 수에서 1/1000 후 응용 프로그램에서 이벤트는 <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성 경과 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can configure the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object to raise the event just once or repeatedly using the <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property.</source>
          <target state="translated">구성할 수는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 를 한 번 또는 반복적으로 사용 하 여 이벤트를 발생 시키는 개체는 <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Typically, a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object is declared at the class level so that it stays in scope as long as it is needed.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 필요할 때 범위 내에 유지 되도록 클래스 수준에서 개체를 선언 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can then handle its <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to provide regular processing.</source>
          <target state="translated">그런 다음 처리할 수는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 정상적인 처리를 제공 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</source>
          <target state="translated">예를 들어 가정해 유지 해야 하는 중요 한 서버가 주 7 일, 하루 24 시간을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You could create a service that uses a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object to periodically check the server and ensure that the system is up and running.</source>
          <target state="translated">사용 하는 서비스를 만들 수는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 개체를 정기적으로 서버를 확인 하 고 실행 되 고 시스템 인지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If the system is not responding, the service could attempt to restart the server or notify an administrator.</source>
          <target state="translated">시스템이 응답 하지 않는 경우 서비스는 서버를 다시 시작 하거나 관리자에 게 알릴를 시도할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 클래스는 모든.NET 구현 및.NET 표준 1.6 및 더 낮은 버전 등 버전을 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>In these cases, you can use the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class instead.</source>
          <target state="translated">이러한 경우에 사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> 클래스를 대신 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">이 형식이 구현 하는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">직접 형식의 dispose를 호출 해당 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> 에서 메서드는 <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 <ph id="ph1">`using`</ph> (C#에서) 또는 <ph id="ph2">`Using`</ph> (Visual Basic)에서는 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 항목입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The server-based <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class is designed for use with worker threads in a multithreaded environment.</source>
          <target state="translated">서버 기반 <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> 클래스는 다중 스레드 환경에서 작업자 스레드와 함께 사용 하기 위해 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Server timers can move among threads to handle the raised <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, resulting in more accuracy than Windows timers in raising the event on time.</source>
          <target state="translated">서버 타이머 올려진 처리 스레드 간에 이동할 수 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> Windows 타이머 이벤트를 발생 시키는 시간에에서 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> component raises the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event, based on the value (in milliseconds) of the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> 구성 요소는 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 값 (밀리초)에 따른 이벤트는 <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You can handle this event to perform the processing you need.</source>
          <target state="translated">필요한 처리를 수행 하도록이 이벤트를 처리할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For example, suppose that you have an online sales application that continuously posts sales orders to a database.</source>
          <target state="translated">예를 들어 지속적으로 데이터베이스에 판매 주문을 게시 하는 온라인 판매 응용 프로그램이 있다고 가정 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</source>
          <target state="translated">배송에 대 한 지침을 컴파일하는 서비스는 주문을 각 주문을 개별적으로 처리 하지 않고 일괄 처리에서 작동 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>You could use a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> to start the batch processing every 30 minutes.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 를 30 분 마다 일괄 처리를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The System.Timers.Timer class has the same resolution as the system clock.</source>
          <target state="translated">System.Timers.Timer 클래스에는 시스템 클록의 해상도입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This means that the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.</source>
          <target state="translated">즉는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트는 시스템 시계의 정밀도 의해 정의 된 간격으로 발생 하는 <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 시스템 클록의 해상도 보다 작아야 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성을 참조하세요.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>When <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph2">`false`</ph>, a <ph id="ph3">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> object raises the <ph id="ph4">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, after the first <ph id="ph5">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> has elapsed.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 로 설정 된 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> 발생 시키는 개체는 <ph id="ph4">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트 한 번만 첫 번째 후 <ph id="ph5">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 경과 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>To keep raising the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event regularly at the interval defined by the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, set <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> to <ph id="ph4">`true`</ph>, which is the default value.</source>
          <target state="translated">올리기 유지는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 가 정의한 간격에서 정기적으로 이벤트는 <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>설정, <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 를 <ph id="ph4">`true`</ph>은 기본 값입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 구성 요소의 catch 하 여 억제에 대 한 이벤트 처리기에서 발생 한 모든 예외는 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">이 동작은.NET Framework의 이후 릴리스에서 변경 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Note, however, that this is not true of event handlers that execute asynchronously and include the <ph id="ph1">`await`</ph> operator (in C#)  or the <ph id="ph2">`Await`</ph> operator (in Visual Basic).</source>
          <target state="translated">단,이 아닌지 포함할를 비동기적으로 실행 하는 이벤트 처리기의 경우에 <ph id="ph1">`await`</ph> 연산자 (C#) 또는 <ph id="ph2">`Await`</ph> 연산자 (Visual Basic의 경우).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</source>
          <target state="translated">다음 예제와 같이 이러한 이벤트 처리기에서 throw 된 예외를 호출 스레드로 다시 전파 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For more information on exceptions thrown in asynchronous methods, see   <bpt id="p1">[</bpt>Exception Handling<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>.</source>
          <target state="translated">비동기 메서드에서 throw 된 예외에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>예외 처리<ept id="p1">](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 속성은 <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 에서 이벤트가 발생 한 <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If processing of the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">처리 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 보다 오래 지속 되는 이벤트 <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, 다른 이벤트를 다시 발생할 수 있습니다 <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">이 경우 이벤트 처리기 재진입 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The event-handling method might run on one thread at the same time that another thread calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">이벤트 처리 메서드는 한 스레드에서 다른 스레드에서 호출 하는 동시에 실행 될 수 있습니다는 <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드 또는 집합은 <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성을 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.</source>
          <target state="translated">이 될 수 있습니다는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 타이머가 중지 된 후 발생 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The example code for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.</source>
          <target state="translated">에 대 한 예제 코드는 <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드가 경합 상태를 방지 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Even if <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">경우에 <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 않습니다 <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트 후에 발생할 수 있습니다는 <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> 또는 <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드가 호출 된 후 또는 <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성이로 설정 된 <ph id="ph7">`false`</ph>때문에 발생시키는신호<ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 스레드 풀 스레드에서 실행 이벤트는 항상 대기 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">이 경합 상태에 대 한 이벤트 처리기를 알려주는 플래그를 설정 하는 것을 해결할 수는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 후속 이벤트를 무시 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>If you use the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> to the <ph id="ph3">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property, so that the event is marshaled to the user interface thread.</source>
          <target state="translated">사용 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> 폼 이나 컨트롤 해당 사용자 인터페이스 요소에 사용 되는 타이머를 배치 하지 않고 같은 사용자 인터페이스 요소를 사용 하 여 클래스 할당 폼 이나 컨트롤 포함 하는 <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> 에 <ph id="ph3">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 속성, 이벤트는 않도록 사용자 인터페이스 스레드 마샬링됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>For a list of default property values for an instance of <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>, see the <ph id="ph2">&lt;xref:System.Timers.Timer.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">인스턴스에 대 한 기본 속성 값 목록은 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>, 참조는 <ph id="ph2">&lt;xref:System.Timers.Timer.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Be aware that .NET includes four classes named <ph id="ph1">`Timer`</ph>, each of which offers different functionality:</source>
          <target state="translated">.NET 라는 4 개의 클래스가 포함 되어 있는지 알아야 <ph id="ph1">`Timer`</ph>각각 서로 다른 기능을 제공 하는 중:</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> (this topic): fires an event at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> (이 항목): 정기적으로 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">클래스는 서버 기반으로 사용 또는 되며 다중 스레드 환경에서 서비스 구성 요소를 위한 사용자 인터페이스가 없는 하 고 런타임 시 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>: executes a single callback method on a thread pool thread at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph>: 정기적으로 스레드 풀 스레드에서 단일 콜백 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The callback method is defined when the timer is instantiated and cannot be changed.</source>
          <target state="translated">콜백 메서드는 사용 되는 타이머 인스턴스화되고 변경할 수 없는 때 정의 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Like the <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</source>
          <target state="translated">마찬가지로 <ph id="ph1">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> 클래스,이 클래스는 다중 스레드 환경에서 서버 기반 또는 서비스 구성 요소로 사용 하기 위한 사용자 인터페이스가 없는 하 고을 런타임 시 표시 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.Timer?displayProperty=nameWithType&gt;</ph> (.NET framework에만 해당): Windows Forms 구성 요소를 일정 한 간격 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The component has no user interface and is designed for use in a single-threaded environment.</source>
          <target state="translated">구성 요소 사용자 인터페이스가 없는 및 단일 스레드 환경에서 사용 하도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.Timer?displayProperty=nameWithType&gt;</ph> (.NET framework에만 해당): 일정 한 간격으로 비동기 또는 동기 웹 페이지 포스트백을 수행 하는 ASP.NET 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The following example instantiates a <ph id="ph1">`System.Timers.Timer`</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">다음 예제는 <ph id="ph1">`System.Timers.Timer`</ph> 발생 하는 개체의 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 이벤트 2 초 마다 (2, 000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">값을 표시 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> 속성 될 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Any public <ph id="ph1">&lt;see langword="static" /&gt;</ph> members of this type are thread safe.</source>
          <target state="translated">모든 공용 <ph id="ph1">&lt;see langword="static" /&gt;</ph> 이 형식의 멤버는 스레드로부터 안전 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Timers.Timer">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="T:System.Timers.Timer">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class, and sets all the properties to their initial values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 클래스의 새 인스턴스를 초기화하고 모든 속성을 각각의 초기 값으로 설정합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The following table shows initial property values for an instance of <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">다음 표에서의 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>Property</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>Initial value</source>
          <target state="translated">초기 값</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>100 milliseconds</source>
          <target state="translated">100 밀리초</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 참조(Visual Basic의 경우 <ph id="ph1">`Nothing`</ph>)</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 발생 하는 개체의 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">값을 표시 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> 속성 될 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The time, in milliseconds, between events.</source>
          <target state="translated">이벤트 간의 시간(밀리초 단위)입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The value must be greater than zero and less than or equal to <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">값은 0보다 크고 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>보다 작거나 같아야 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> class, and sets the <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> property to the specified number of milliseconds.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 클래스의 새 인스턴스를 초기화하고 <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> 속성을 지정된 시간(밀리초)으로 설정합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>This constructor sets the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property of the new timer instance, but does not enable the timer.</source>
          <target state="translated">이 생성자는 설정의 <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 새 타이머 인스턴스의 속성 하지만 사용 되는 타이머를 사용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 발생 하는 개체의 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">값을 표시 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> 속성 될 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.#ctor(System.Double)">
          <source>The value of the <ph id="ph1">&lt;paramref name="interval" /&gt;</ph> parameter is less than or equal to zero, or greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="interval" /&gt;</ph> 매개 변수 값이 0보다 작거나 같거나 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>보다 큰 경우</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.AutoReset">
          <source>Gets or sets a Boolean indicating whether the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event only once (<ph id="ph3">&lt;see langword="false" /&gt;</ph>) or repeatedly (<ph id="ph4">&lt;see langword="true" /&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>에서 <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트를 한 번만(<ph id="ph3">&lt;see langword="false" /&gt;</ph>) 발생시켜야 하는지 반복해서(<ph id="ph4">&lt;see langword="true" /&gt;</ph>) 발생시켜야 하는지 나타내는 부울을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event each time the interval elapses; <ph id="ph4">&lt;see langword="false" /&gt;</ph> if it should raise the <ph id="ph5">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event only once, after the first time the interval elapses.</source>
          <target state="translated">간격이 경과할 때마다 <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>에서 <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트를 발생시켜야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 첫 번째 간격이 경과한 후 한 번만 <ph id="ph5">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트를 발생시켜야 하면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="true" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> is already enabled when the <ph id="ph2">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method is called, the interval is reset.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 이미 때 사용할 수는 <ph id="ph2">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> 메서드가 호출 되 면 재설정 됩니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 은 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> 개수를 다시 시작 하기 위해 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>Resetting the interval affects when the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised.</source>
          <target state="translated">간격을 다시 설정에 영향을 줍니다 시기는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">예를 들어 간격을 5 초로 설정 하 고 다음을 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph>, 수 시간에 시작 <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>If you reset the interval to 10 seconds when the count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">지났을 때 3 초, 10 초 간격을 다시 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 13 초 후 처음으로 이벤트는 <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성이로 설정 된 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> whose <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event fires after 1.5 seconds.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 인 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 1.5 초 후에 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>Its event handler then displays "Hello World!"</source>
          <target state="translated">해당 이벤트 처리기는 "Hello World!"를 표시 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.AutoReset">
          <source>on the console.</source>
          <target state="translated">콘솔.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.BeginInit">
          <source>Begins the run-time initialization of a <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> that is used on a form or by another component.</source>
          <target state="translated">폼에 사용되거나 다른 구성 요소에서 사용하는 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>의 런타임 초기화를 시작합니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to start the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> 디자인 환경에서이 메서드를 사용 하 여 폼에 또는 다른 구성 요소에서 사용 되는 구성 요소 초기화를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> method ends the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> 메서드 초기화를 끝냅니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.BeginInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Close">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Close">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.Close%2A&gt;</ph> method in turn calls the <ph id="ph2">`Dispose`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Close%2A&gt;</ph> 메서드 호출에서 <ph id="ph2">`Dispose`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Dispose(System.Boolean)">
          <source>Releases all resources used by the current <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="E:System.Timers.Timer.Elapsed">
          <source>Occurs when the interval elapses.</source>
          <target state="translated">간격이 경과하면 발생합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised if the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is <ph id="ph3">`true`</ph> and the time interval (in milliseconds) defined by the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property elapses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트는 <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성은 <ph id="ph3">`true`</ph> 에 정의 된 시간 간격 (밀리초)는 <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성 간격이 경과 합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the event is raised repeatedly at an interval defined by the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property; otherwise, the event is raised only once, the first time the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> value elapses.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>에 정의 된 간격으로 이벤트를 반복적으로 발생는 <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성;는 이벤트가 그렇지 않으면 처음으로 한 번만 <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 간격이 경과 값입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> is set after the <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 후 설정 됩니다는 <ph id="ph2">&lt;xref:System.Timers.Timer&gt;</ph> 가 시작 된 횟수가 재설정 됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>For example, if you set the interval to 5 seconds and then set <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">예를 들어 간격을 5 초로 설정 하 고 다음 설정 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 를 <ph id="ph2">`true`</ph>, 수 시간에 시작 <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">때 3 초, 10 초 간격을 다시 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 13 초 후 처음으로 이벤트는 <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 로 설정 된 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is <ph id="ph2">`null`</ph>,the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised on a <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 속성은 <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 에서 이벤트가 발생 한 <ph id="ph4">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>If the processing of the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event lasts longer than <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, the event might be raised again on another <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">하는 경우의 처리는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 보다 오래 지속 되는 이벤트 <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph>, 다른 이벤트를 다시 발생할 수 있습니다 <ph id="ph3">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>In this situation, the event handler should be reentrant.</source>
          <target state="translated">이 경우 이벤트 처리기 재진입 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The event-handling method might run on one thread at the same time that another thread calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method or sets the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">이벤트 처리 메서드는 한 스레드에서 다른 스레드에서 호출 하는 동시에 실행 될 수 있습니다는 <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드 또는 집합은 <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성을 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the timer is stopped.</source>
          <target state="translated">이 될 수 있습니다는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 타이머가 중지 된 후 발생 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The example code for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to avoid this race condition.</source>
          <target state="translated">에 대 한 예제 코드는 <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드가 경합 상태를 방지 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>Even if <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">경우에 <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 않습니다 <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트 후에 발생할 수 있습니다는 <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> 또는 <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드가 호출 된 후 또는 <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성이로 설정 된 <ph id="ph7">`false`</ph>때문에 발생시키는신호<ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 스레드 풀 스레드에서 실행 이벤트는 항상 대기 합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">이 경합 상태에 대 한 이벤트 처리기를 알려주는 플래그를 설정 하는 것을 해결할 수는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 후속 이벤트를 무시 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> component catches and suppresses all exceptions thrown by event handlers for the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 구성 요소의 catch 하 여 억제에 대 한 이벤트 처리기에서 발생 한 모든 예외는 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>This behavior is subject to change in future releases of the .NET Framework.</source>
          <target state="translated">이 동작은.NET Framework의 이후 릴리스에서 변경 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 발생 하는 개체의 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Timers.Timer.Elapsed">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">값을 표시 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> 속성 될 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>Gets or sets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>에서 <ph id="ph2">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트를 발생시켜야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> should raise the <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>에서 <ph id="ph3">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트를 발생시켜야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그러지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>Setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph> is the same as calling <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>, while setting <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph5">`false`</ph> is the same as calling <ph id="ph6">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>.</source>
          <target state="translated">설정 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 를 <ph id="ph2">`true`</ph> 호출할 때와 동일 하 게 <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph>, 설정 <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 를 <ph id="ph5">`false`</ph> 호출할 때와 동일 <ph id="ph6">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The signal to raise the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
          <target state="translated">발생 시키는 신호는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 에 실행 이벤트는 항상 대기는 <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property is set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">이 될 수 있습니다는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 후 발생 하는 이벤트는 <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성이 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The code example for the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method shows one way to work around this race condition.</source>
          <target state="translated">에 대 한 코드 예제는 <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드가 경합 상태를 해결 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 로 설정 된 <ph id="ph2">`true`</ph> 및 <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 로 설정 된 <ph id="ph4">`false`</ph>, <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> 를 발생 시킵니다는 <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트는 처음에는 간격으로 한 번만 경과 합니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If the interval is set after the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">다음은 간격을 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 가 시작 된 횟수가 재설정 됩니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">예를 들어 간격을 5 초로 설정 하 고 다음을 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph>, 수 시간에 시작 <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">때 3 초, 10 초 간격을 다시 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 13 초 후 처음으로 이벤트는 <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 로 설정 된 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>Some visual designers, such as those in Microsoft Visual Studio, set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph> when inserting a new <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">예: Microsoft Visual Studio의 일부 비주얼 디자이너에서 설정 된 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph> 새 삽입할 때 <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 발생 하는 개체의 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Enabled">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">값을 표시 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> 속성 될 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>This property cannot be set because the timer has been disposed.</source>
          <target state="translated">타이머가 삭제되어 이 속성을 설정할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Enabled">
          <source>The <ph id="ph1">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> property was set to a value greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> before the timer was enabled.</source>
          <target state="translated">타이머를 사용하기 전에 <ph id="ph1">&lt;see cref="P:System.Timers.Timer.Interval" /&gt;</ph> 속성은 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 보다 큰 값으로 설정되었습니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.EndInit">
          <source>Ends the run-time initialization of a <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> that is used on a form or by another component.</source>
          <target state="translated">폼에 사용되거나 다른 구성 요소에서 사용하는 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>의 런타임 초기화를 마칩니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>The <ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> design environment uses this method to end the initialization of a component that is used on a form or by another component.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> 디자인 환경에서이 메서드를 사용 하 여 폼에 또는 다른 구성 요소에서 사용 되는 구성 요소 초기화를 끝냅니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>The <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> method starts the initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> 메서드 초기화를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.EndInit">
          <source>Using the <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> methods prevents the control from being used before it is fully initialized.</source>
          <target state="translated">사용 하는 <ph id="ph1">&lt;xref:System.Timers.Timer.BeginInit%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Timers.Timer.EndInit%2A&gt;</ph> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>Gets or sets the interval, expressed in milliseconds, at which to raise the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트를 발생시킬 간격(밀리초)을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The time, in milliseconds, between <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> events.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트 간의 시간(밀리초)입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The value must be greater than zero, and less than or equal to <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">값은 0보다 크고 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>보다 작거나 같아야 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The default is 100 milliseconds.</source>
          <target state="translated">기본값은 100밀리초입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>You use the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to determine the frequency at which the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is fired.</source>
          <target state="translated">사용 하면는 <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성은 빈도 확인 하는 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>Because the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class depends on the system clock, it has the same resolution as the system clock.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 시스템 클록에 따라 달라 집니다 클래스, 시스템 클록의 해상도 있습니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>This means that the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event will fire at an interval defined by the resolution of the system clock if the <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is less than the resolution of the system clock.</source>
          <target state="translated">즉는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트는 시스템 시계의 정밀도 의해 정의 된 간격으로 발생 하는 <ph id="ph2">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 시스템 클록의 해상도 보다 작아야 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to 5 milliseconds.</source>
          <target state="translated">다음 예에서는 <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성을 5 밀리초입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>When run on a <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</source>
          <target state="translated">실행할 때는 <ph id="ph1">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> 시스템 클럭의 5 밀리초 마다 보다는 약 15 밀리초 마다 약 15 밀리초, 이벤트 발생의 해상도가 하는 시스템입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>You can use the following code to determine the resolution of the system clock on the current system:</source>
          <target state="translated">현재 시스템에서 시스템 클록의 해상도 확인 하려면 다음 코드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If your app requires greater resolution than that offered by the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> class or the system clock, use the high-resolution multimedia timers; see <bpt id="p1">[</bpt>How to: Use the High-Resolution Timer<ept id="p1">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>.</source>
          <target state="translated">응용 프로그램에서 제공 하는 보다 큰 해상도 필요로 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 클래스 또는 고해상도 멀티미디어 타이머를 사용 하 여; 참조 시스템 클록 <bpt id="p1">[</bpt>하는 방법: High-Resolution 타이머를 사용 하 여<ept id="p1">](http://msdn.microsoft.com/library/aa964692.aspx)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If the interval is set after the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> has started, the count is reset.</source>
          <target state="translated">다음은 간격을 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 가 시작 된 횟수가 재설정 됩니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>For example, if you set the interval to 5 seconds and then set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, the count starts at the time <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set.</source>
          <target state="translated">예를 들어 간격을 5 초로 설정 하 고 다음을 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph>, 수 시간에 시작 <ph id="ph3">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If you reset the interval to 10 seconds when count is 3 seconds, the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is raised for the first time 13 seconds after <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> was set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">때 3 초, 10 초 간격을 다시 설정 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 13 초 후 처음으로 이벤트는 <ph id="ph2">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 로 설정 된 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> and <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph4">`false`</ph>, the <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 로 설정 된 <ph id="ph2">`true`</ph> 및 <ph id="ph3">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 로 설정 된 <ph id="ph4">`false`</ph>, <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> 를 발생 시킵니다는 <ph id="ph6">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트는 처음에는 간격으로 한 번만 경과 합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source><ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> is then set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 으로 설정 됩니다 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> are both set to <ph id="ph3">`false`</ph>, and the timer has previously been enabled, setting the <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property causes the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be raised once, as if the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property had been set to <ph id="ph7">`true`</ph>.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 으로 설정 됩니다 <ph id="ph3">`false`</ph>, 및 타이머 이전에 활성화 되어 있는 설정의 <ph id="ph4">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성 원인을 <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트를 한 번 발생 처럼는 <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 에설정된속성<ph id="ph7">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>To set the interval without raising the event, you can temporarily set the <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property to <ph id="ph2">`true`</ph>, set the <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property to the desired time interval, and then immediately set the <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property back to <ph id="ph5">`false`</ph>.</source>
          <target state="translated">간격 이벤트를 생성 하지 않고을 설정 하려면 일시적으로 설정한는 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성을 <ph id="ph2">`true`</ph>설정는 <ph id="ph3">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성을 원하는 시간 간격을 즉시 설정 하 고는 <ph id="ph4">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성을 다시 <ph id="ph5">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 발생 하는 개체의 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Interval">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">값을 표시 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> 속성 될 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>The interval is less than or equal to zero.</source>
          <target state="translated">간격이 0 이하인 경우</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>The interval is greater than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>, and the timer is currently enabled.</source>
          <target state="translated">간격은 <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> 보다 크며, 타이머는 현재 사용 가능합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Interval">
          <source>(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</source>
          <target state="translated">타이머를 현재 사용할 수 없는 경우, 사용 가능하게 될 때까지 예외가 throw되지 않습니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.Site">
          <source>Gets or sets the site that binds the <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> to its container in design mode.</source>
          <target state="translated">디자인 모드에서 <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>를 컨테이너에 바인딩하는 사이트를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Site">
          <source>An <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> interface representing the site that binds the <ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> object to its container.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> 개체를 컨테이너에 바인딩하는 사이트를 나타내는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.Site">
          <source>Sites bind a <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> to a <ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph> and enable communication between them, as well as providing a way for the container to manage its components.</source>
          <target state="translated">사이트 바인딩는 <ph id="ph1">&lt;xref:System.ComponentModel.Component&gt;</ph> 에 <ph id="ph2">&lt;xref:System.ComponentModel.Container&gt;</ph> 서로 통신할 수 있도록 할 뿐만 아니라 해당 구성 요소를 관리 하는 컨테이너에 대 한 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Start">
          <source>Starts raising the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event by setting <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph>를 <ph id="ph3">&lt;see langword="true" /&gt;</ph>로 설정하여 <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트를 발생시킵니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is set to <ph id="ph3">`false`</ph>, the <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event only once, the first time the interval elapses.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> 라고 하 고 <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 로 설정 된 <ph id="ph3">`false`</ph>, <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> 를 발생 시킵니다는 <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트는 처음에는 간격으로 한 번만 경과 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> is called and <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph3">`true`</ph>, the <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> raises the <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event the first time the interval elapses and continues to raise the event on the specified interval.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> 라고 하 고 <ph id="ph2">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 은 <ph id="ph3">`true`</ph>, <ph id="ph4">&lt;xref:System.Timers.Timer&gt;</ph> 를 발생 시킵니다는 <ph id="ph5">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 첫 번째 이벤트 시간 간격이 경과 하 고 계속 지정된 된 간격에 이벤트를 발생 시킵니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>You can also start timing by setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">설정 하 여 타이밍을 시작할 수도 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 를 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>If <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method must be called in order to start the count again.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Timers.Timer.AutoReset%2A&gt;</ph> 은 <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> 개수를 다시 시작 하기 위해 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Start">
          <source>A call to the <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> method when the timer is enabled has no effect.</source>
          <target state="translated">에 대 한 호출에서 <ph id="ph1">&lt;xref:System.Timers.Timer.Start%2A&gt;</ph> 메서드를 사용 되는 타이머를 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Start">
          <source>The <ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph> is created with an interval equal to or greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> + 1, or set to an interval less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Timers.Timer" /&gt;</ph>를 만들 때 간격을 <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> + 1보다 크거나 같은 값으로 설정했거나 0보다 작은 값으로 설정한 경우</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Timers.Timer.Stop">
          <source>Stops raising the <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> event by setting <ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph> to <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="P:System.Timers.Timer.Enabled" /&gt;</ph>를 <ph id="ph3">&lt;see langword="false" /&gt;</ph>로 설정하여 <ph id="ph1">&lt;see cref="E:System.Timers.Timer.Elapsed" /&gt;</ph> 이벤트 발생을 중지합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>You can also stop timing by setting <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">설정 하 여 타이밍을 중지할 수도 <ph id="ph1">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 를 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The signal to raise the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread, so the event-handling method might run on one thread at the same time that a call to the <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method runs on another thread.</source>
          <target state="translated">발생 시키는 신호는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트는 항상 실행 대기에 <ph id="ph2">&lt;xref:System.Threading.ThreadPool&gt;</ph> 스레드, 이벤트 처리 메서드는 동일한 하나의 스레드에서 실행 되므로 시간에 대 한 호출은 <ph id="ph3">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 다른 스레드에서 메서드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>This might result in the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event being raised after the <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method is called.</source>
          <target state="translated">이 될 수 있습니다는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 후 발생 하는 이벤트는 <ph id="ph2">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The code example in the next section shows one way to work around this race condition.</source>
          <target state="translated">다음 섹션의 코드 예제에서는이 경합 상태를 해결 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The following example instantiates a <ph id="ph1">`System.Timers.Timer`</ph> object that fires its <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</source>
          <target state="translated">다음 예제는 <ph id="ph1">`System.Timers.Timer`</ph> 발생 하는 개체의 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType&gt;</ph> 이벤트 2 초 마다 (2, 000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler displays the value of the <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> property each time it is raised.</source>
          <target state="translated">값을 표시 하는 이벤트 처리기는 <ph id="ph1">&lt;xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType&gt;</ph> 속성 될 때마다 발생 합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>When the user presses the Enter key, the application calls the  <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method before terminating the application.</source>
          <target state="translated">사용자가 Enter 키를 누르면 응용 프로그램 호출에서 <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 응용 프로그램을 종료 하기 전에 메서드.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The following code example shows one way to prevent the thread that calls the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method from continuing until a currently executing <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event ends, and also to prevent two <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events from executing the event handler at the same time (often referred to as reentrancy).</source>
          <target state="translated">다음 코드 예제에서는 호출 하는 스레드를 방지 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드를 현재 실행 될 때까지 계속할 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트 끝 두 것을 방지 하려면 또한 <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트는 동일한 이벤트 처리기를 실행 합니다. 시간 (재진입 라고도 함)입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example executes 100 test runs.</source>
          <target state="translated">이 예제에서는 100 테스트 실행을 실행합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>Each time the test is run, the timer is started with an interval of 150 milliseconds.</source>
          <target state="translated">에 테스트가 실행 될 때마다 타이머가 150 시간 (밀리초) 간격으로 시작 됩니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler uses the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</source>
          <target state="translated">이벤트 처리기에서 사용 된 <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> 다양 한 길이는 50 200 밀리초를 하는 작업을 시뮬레이션 하는 메서드.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The test method also starts a control thread that waits for a second and then stops the timer.</source>
          <target state="translated">테스트 메서드는 또한 잠시 동안 기다린 다음 타이머를 중지 하는 제어 스레드를 시작 합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</source>
          <target state="translated">컨트롤 스레드 타이머를 중지 하는 경우 이벤트를 처리 되 고, 컨트롤 스레드 이벤트가 계속 진행 하기 전에 완료 될 때까지 기다려야 합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> 재진입을 방지 하 고 제어 스레드 실행 중인 이벤트가 종료 될 때까지 계속 하지 않게 하려면 메서드 오버 로드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The event handler uses the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to set a control variable to 1, but only if the value is currently zero.</source>
          <target state="translated">이벤트 처리기에서 사용 된 <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> 변수를 1로 되지만 현재 값이 0 인 경우에 컨트롤을 설정 하려면 메서드.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>This is an atomic operation.</source>
          <target state="translated">이 작업은 원자성 작업입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</source>
          <target state="translated">반환 값 0 이면 제어 변수를 1로 설정 하 고 이벤트 처리기에 진행 됩니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the return value is non-zero, the event is simply discarded to avoid reentrancy.</source>
          <target state="translated">반환 값 0이 아닌 경우 재진입을 방지 하는 이벤트가 취소 됩니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>(If it were necessary to execute every event, the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</source>
          <target state="translated">(모든 이벤트를 실행 하는 데 필요한 것은 <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> 클래스에 더 좋은 방법은 이벤트를 동기화 하는 것입니다.) 이벤트 처리기가 종료 때 제어 변수를 다시 0으로 설정.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method was called.</source>
          <target state="translated">이 예제에서는 기록 하 고 실행 된 재진입으로 인해 삭제 된 후에 발생 한 이벤트의 총 수는 <ph id="ph1">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드를 호출 했습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The control thread uses the <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method to set the control variable to -1 (minus one), but only if the value is currently zero.</source>
          <target state="translated">컨트롤 스레드가 사용 하는 <ph id="ph1">&lt;xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> 변수 (-1),-1로 되지만 현재 값이 0 인 경우에 컨트롤을 설정 하는 메서드.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>If the atomic operation returns non-zero, an event is currently executing.</source>
          <target state="translated">원자 단위 작업에서 반환 하는 0이 아닌 이벤트 진행 중입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The control thread waits and tries again.</source>
          <target state="translated">컨트롤 스레드 잠시 기다린 후 다시 시도 합니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Timers.Timer.Stop">
          <source>The example records the number of times the control thread had to wait for an event to finish.</source>
          <target state="translated">이 예제에서는 컨트롤 스레드 이벤트가 완료 될 때까지 기다려야 했던 횟수를 기록 합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated">시간 간격이 경과할 때 발행되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</source>
          <target state="translated">시간 간격이 경과할 때 발행되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 나타내는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISynchronizeInvoke" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is <ph id="ph2">`null`</ph>, the method that handles the <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is called on a thread from the system-thread pool.</source>
          <target state="translated">때 <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 은 <ph id="ph2">`null`</ph>를 처리 하는 메서드는 <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트 시스템 스레드 풀의 스레드라도에서 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>For more information on system-thread pools, see <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>.</source>
          <target state="translated">시스템 스레드 풀에 대 한 자세한 내용은 참조 하십시오. <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 수 결과 예외가 하거나 작동 하지 않을 수 시스템 스레드 풀을 통해 구성 요소에 액세스 하는 단추와 같은 한 시각적 Windows Forms 구성 요소 이벤트를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Avoid this effect by setting <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> to a Windows Forms component, which causes the method that handles the <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to be called on the same thread that the component was created on.</source>
          <target state="translated">이 효과 설정 하 여 방지할 <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 처리 하는 메서드 때문에 Windows Forms 구성 요소에는 <ph id="ph2">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 구성 요소에 만들어진 스레드와 동일한 스레드에서 호출 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>Even if the <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is not <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> events can occur after the <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> method has been called or after the <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> property has been set to <ph id="ph7">`false`</ph>, because the signal to raise the <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event is always queued for execution on a thread pool thread.</source>
          <target state="translated">경우에는 <ph id="ph1">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 속성은 <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 이벤트 후에 발생할 수 있습니다는 <ph id="ph4">&lt;xref:System.Timers.Timer.Dispose%2A&gt;</ph> 또는 <ph id="ph5">&lt;xref:System.Timers.Timer.Stop%2A&gt;</ph> 메서드가 호출 된 후 또는 <ph id="ph6">&lt;xref:System.Timers.Timer.Enabled%2A&gt;</ph> 속성이로 설정 된 <ph id="ph7">`false`</ph>때문에 발생 시키는 신호 <ph id="ph8">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 스레드 풀 스레드에서 실행 이벤트는 항상 대기 합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>One way to resolve this race condition is to set a flag that tells the event handler for the <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> event to ignore subsequent events.</source>
          <target state="translated">이 경합 상태에 대 한 이벤트 처리기를 알려주는 플래그를 설정 하는 것을 해결할 수는 <ph id="ph1">&lt;xref:System.Timers.Timer.Elapsed&gt;</ph> 후속 이벤트를 무시 하는 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>If the <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> is used inside Visual Studio in a Windows Forms designer, <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> is automatically set to the control that contains the <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> Windows Forms 디자이너에서 Visual Studio 내에서 사용 되 <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 포함 하는 컨트롤에 자동으로 설정 됩니다는 <ph id="ph3">&lt;xref:System.Timers.Timer&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>For example, if you place a <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> on a designer for <ph id="ph2">`Form1`</ph> (which inherits from <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>), the <ph id="ph4">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property of <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> is set to the instance of <ph id="ph6">`Form1`</ph>.</source>
          <target state="translated">예를 들어, 배치 하는 경우는 <ph id="ph1">&lt;xref:System.Timers.Timer&gt;</ph> 에 대 한 디자이너에서 <ph id="ph2">`Form1`</ph> (에서 상속 되 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph>), <ph id="ph4">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 속성 <ph id="ph5">&lt;xref:System.Timers.Timer&gt;</ph> 인스턴스의로 설정 된 <ph id="ph6">`Form1`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The following example is a Windows Forms app that serves as a very simple text file editor.</source>
          <target state="translated">다음 예제는 매우 간단한 텍스트 파일 편집기로 사용 되는 Windows Forms 응용 프로그램입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</source>
          <target state="translated">텍스트 상자에 텍스트 저장 되지 않은 경우 응용 프로그램 사용자에 게 요청 1 분 간격으로 하는지 여부를 보려는 입력란의 내용을 저장 하 합니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>To do this, the <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> property is set to one minute (60,000 milliseconds), and the <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> property is set to the <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> object.</source>
          <target state="translated">이렇게 하려면는 <ph id="ph1">&lt;xref:System.Timers.Timer.Interval%2A&gt;</ph> 속성을 1 분 (60, 000 밀리초)로 설정 및 <ph id="ph2">&lt;xref:System.Timers.Timer.SynchronizingObject%2A&gt;</ph> 속성이로 설정 되는 <ph id="ph3">&lt;xref:System.Windows.Forms.Form&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>The example requires that you add the following controls to the form:</source>
          <target state="translated">이 예제에서는 폼에는 다음과 같은 컨트롤을 추가 합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> control named <ph id="ph2">`TextBox1`</ph> (its default name).</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> 라는 컨트롤 <ph id="ph2">`TextBox1`</ph> (기본 이름).</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control named <ph id="ph2">`Button1`</ph> (its default name).</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> 라는 컨트롤 <ph id="ph2">`Button1`</ph> (기본 이름).</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Timers.Timer.SynchronizingObject">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.SaveFileDialog&gt;</ph> control named <ph id="ph2">`SaveSaveFileDialog1`</ph> (its default name) .</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Forms.SaveFileDialog&gt;</ph> 라는 컨트롤 <ph id="ph2">`SaveSaveFileDialog1`</ph> (기본 이름).</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>