<Type Name="Timer" FullName="System.Timers.Timer">
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Timers.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Elapsed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="047ac-101">반복 이벤트를 생성하는 옵션으로 설정된 간격 후 이벤트를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-101">Generates an event after a set interval, with an option to generate recurring events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-102"><xref:System.Timers.Timer> 구성 요소는 발생 하는 서버 기반 타이머는 <xref:System.Timers.Timer.Elapsed> 수에서 1/1000 후 응용 프로그램에서 이벤트는 <xref:System.Timers.Timer.Interval%2A> 속성 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-102">The <xref:System.Timers.Timer> component is a server-based timer that raises an <xref:System.Timers.Timer.Elapsed> event in your application after the number of milliseconds in the <xref:System.Timers.Timer.Interval%2A> property has elapsed.</span></span> <span data-ttu-id="047ac-103">구성할 수는 <xref:System.Timers.Timer> 를 한 번 또는 반복적으로 사용 하 여 이벤트를 발생 시키는 개체는 <xref:System.Timers.Timer.AutoReset%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-103">You can configure the <xref:System.Timers.Timer> object to raise the event just once or repeatedly using the <xref:System.Timers.Timer.AutoReset%2A> property.</span></span> <span data-ttu-id="047ac-104">일반적으로 <xref:System.Timers.Timer> 필요할 때 범위 내에 유지 되도록 클래스 수준에서 개체를 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-104">Typically, a <xref:System.Timers.Timer> object is declared at the class level so that it stays in scope as long as it is needed.</span></span> <span data-ttu-id="047ac-105">그런 다음 처리할 수는 <xref:System.Timers.Timer.Elapsed> 정상적인 처리를 제공 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-105">You can then handle its <xref:System.Timers.Timer.Elapsed> event to provide regular processing.</span></span> <span data-ttu-id="047ac-106">예를 들어 가정해 유지 해야 하는 중요 한 서버가 주 7 일, 하루 24 시간을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-106">For example, suppose you have a critical server that must be kept running 24 hours a day, 7 days a week.</span></span> <span data-ttu-id="047ac-107">사용 하는 서비스를 만들 수는 <xref:System.Timers.Timer> 개체를 정기적으로 서버를 확인 하 고 실행 되 고 시스템 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-107">You could create a service that uses a <xref:System.Timers.Timer> object to periodically check the server and ensure that the system is up and running.</span></span> <span data-ttu-id="047ac-108">시스템이 응답 하지 않는 경우 서비스는 서버를 다시 시작 하거나 관리자에 게 알릴를 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-108">If the system is not responding, the service could attempt to restart the server or notify an administrator.</span></span>  
  
> [!IMPORTANT]
> <span data-ttu-id="047ac-109"><xref:System.Timers.Timer> 클래스는 모든.NET 구현 및.NET 표준 1.6 및 더 낮은 버전 등 버전을 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-109">The <xref:System.Timers.Timer> class is not available for all .NET implementations and versions, such as .NET Standard 1.6 and lower versions.</span></span>
> <span data-ttu-id="047ac-110">이러한 경우에 사용할 수 있습니다는 <xref:System.Threading.Timer?displayProperty=nameWithType> 클래스를 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-110">In these cases, you can use the <xref:System.Threading.Timer?displayProperty=nameWithType> class instead.</span></span>
  
 <span data-ttu-id="047ac-111">이 형식이 구현 하는 <xref:System.IDisposable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="047ac-112">형식을 사용 하 여 마쳤으면는 삭제 해야의 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="047ac-113">직접 형식의 dispose를 호출 해당 <xref:System.IDisposable.Dispose%2A> 에서 메서드는 `try` / `catch` 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="047ac-114">작업을 삭제할 하지 직접,를 사용 하 여 언어 구문와 같은 `using` (C#에서) 또는 `Using` (Visual Basic)에서는 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="047ac-115">자세한 내용은의 "를 사용 하는 개체는 구현 IDisposable" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 인터페이스 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="047ac-116">서버 기반 <xref:System.Timers.Timer?displayProperty=nameWithType> 클래스는 다중 스레드 환경에서 작업자 스레드와 함께 사용 하기 위해 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-116">The server-based <xref:System.Timers.Timer?displayProperty=nameWithType> class is designed for use with worker threads in a multithreaded environment.</span></span> <span data-ttu-id="047ac-117">서버 타이머 올려진 처리 스레드 간에 이동할 수 <xref:System.Timers.Timer.Elapsed> Windows 타이머 이벤트를 발생 시키는 시간에에서 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-117">Server timers can move among threads to handle the raised <xref:System.Timers.Timer.Elapsed> event, resulting in more accuracy than Windows timers in raising the event on time.</span></span>  
  
 <span data-ttu-id="047ac-118"><xref:System.Timers.Timer?displayProperty=nameWithType> 구성 요소는 <xref:System.Timers.Timer.Elapsed> 값 (밀리초)에 따른 이벤트는 <xref:System.Timers.Timer.Interval%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-118">The <xref:System.Timers.Timer?displayProperty=nameWithType> component raises the <xref:System.Timers.Timer.Elapsed> event, based on the value (in milliseconds) of the <xref:System.Timers.Timer.Interval%2A> property.</span></span> <span data-ttu-id="047ac-119">필요한 처리를 수행 하도록이 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-119">You can handle this event to perform the processing you need.</span></span> <span data-ttu-id="047ac-120">예를 들어 지속적으로 데이터베이스에 판매 주문을 게시 하는 온라인 판매 응용 프로그램이 있다고 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-120">For example, suppose that you have an online sales application that continuously posts sales orders to a database.</span></span> <span data-ttu-id="047ac-121">배송에 대 한 지침을 컴파일하는 서비스는 주문을 각 주문을 개별적으로 처리 하지 않고 일괄 처리에서 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-121">The service that compiles the instructions for shipping operates on a batch of orders rather than processing each order individually.</span></span> <span data-ttu-id="047ac-122">사용할 수는 <xref:System.Timers.Timer> 를 30 분 마다 일괄 처리를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-122">You could use a <xref:System.Timers.Timer> to start the batch processing every 30 minutes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="047ac-123">System.Timers.Timer 클래스에는 시스템 클록의 해상도입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-123">The System.Timers.Timer class has the same resolution as the system clock.</span></span> <span data-ttu-id="047ac-124">즉는 <xref:System.Timers.Timer.Elapsed> 이벤트는 시스템 시계의 정밀도 의해 정의 된 간격으로 발생 하는 <xref:System.Timers.Timer.Interval%2A> 시스템 클록의 해상도 보다 작아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-124">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="047ac-125">자세한 내용은 <xref:System.Timers.Timer.Interval%2A> 속성을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="047ac-125">For more information, see the <xref:System.Timers.Timer.Interval%2A> property.</span></span>  
  
 <span data-ttu-id="047ac-126">때 <xref:System.Timers.Timer.AutoReset%2A> 로 설정 된 `false`, <xref:System.Timers.Timer?displayProperty=nameWithType> 발생 시키는 개체는 <xref:System.Timers.Timer.Elapsed> 이벤트 한 번만 첫 번째 후 <xref:System.Timers.Timer.Interval%2A> 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-126">When <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, a <xref:System.Timers.Timer?displayProperty=nameWithType> object raises the <xref:System.Timers.Timer.Elapsed> event only once, after the first <xref:System.Timers.Timer.Interval%2A> has elapsed.</span></span> <span data-ttu-id="047ac-127">올리기 유지는 <xref:System.Timers.Timer.Elapsed> 가 정의한 간격에서 정기적으로 이벤트는 <xref:System.Timers.Timer.Interval%2A>설정, <xref:System.Timers.Timer.AutoReset%2A> 를 `true`은 기본 값입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-127">To keep raising the <xref:System.Timers.Timer.Elapsed> event regularly at the interval defined by the <xref:System.Timers.Timer.Interval%2A>, set <xref:System.Timers.Timer.AutoReset%2A> to `true`, which is the default value.</span></span>  
  
 <span data-ttu-id="047ac-128"><xref:System.Timers.Timer> 구성 요소의 catch 하 여 억제에 대 한 이벤트 처리기에서 발생 한 모든 예외는 <xref:System.Timers.Timer.Elapsed> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-128">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="047ac-129">이 동작은.NET Framework의 이후 릴리스에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-129">This behavior is subject to change in future releases of the .NET Framework.</span></span> <span data-ttu-id="047ac-130">단,이 아닌지 포함할를 비동기적으로 실행 하는 이벤트 처리기의 경우에 `await` 연산자 (C#) 또는 `Await` 연산자 (Visual Basic의 경우).</span><span class="sxs-lookup"><span data-stu-id="047ac-130">Note, however, that this is not true of event handlers that execute asynchronously and include the `await` operator (in C#)  or the `Await` operator (in Visual Basic).</span></span> <span data-ttu-id="047ac-131">다음 예제와 같이 이러한 이벤트 처리기에서 throw 된 예외를 호출 스레드로 다시 전파 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-131">Exceptions thrown in these event handlers are propagated back to the calling thread, as the following example illustrates.</span></span> <span data-ttu-id="047ac-132">비동기 메서드에서 throw 된 예외에 대 한 자세한 내용은 참조 하십시오. [예외 처리](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-132">For more information on exceptions thrown in asynchronous methods, see   [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 <span data-ttu-id="047ac-133">경우는 <xref:System.Timers.Timer.SynchronizingObject%2A> 속성은 `null`, <xref:System.Timers.Timer.Elapsed> 에서 이벤트가 발생 한 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-133">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`, the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="047ac-134">처리 하는 경우는 <xref:System.Timers.Timer.Elapsed> 보다 오래 지속 되는 이벤트 <xref:System.Timers.Timer.Interval%2A>, 다른 이벤트를 다시 발생할 수 있습니다 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-134">If processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="047ac-135">이 경우 이벤트 처리기 재진입 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-135">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="047ac-136">이벤트 처리 메서드는 한 스레드에서 다른 스레드에서 호출 하는 동시에 실행 될 수 있습니다는 <xref:System.Timers.Timer.Stop%2A> 메서드 또는 집합은 <xref:System.Timers.Timer.Enabled%2A> 속성을 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-136">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="047ac-137">이 될 수 있습니다는 <xref:System.Timers.Timer.Elapsed> 타이머가 중지 된 후 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-137">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="047ac-138">에 대 한 예제 코드는 <xref:System.Timers.Timer.Stop%2A> 메서드가 경합 상태를 방지 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-138">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="047ac-139">경우에 <xref:System.Timers.Timer.SynchronizingObject%2A> 않습니다 `null`, <xref:System.Timers.Timer.Elapsed> 이벤트 후에 발생할 수 있습니다는 <xref:System.Timers.Timer.Dispose%2A> 또는 <xref:System.Timers.Timer.Stop%2A> 메서드가 호출 된 후 또는 <xref:System.Timers.Timer.Enabled%2A> 속성이로 설정 된 `false`때문에 발생시키는신호<xref:System.Timers.Timer.Elapsed> 스레드 풀 스레드에서 실행 이벤트는 항상 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-139">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="047ac-140">이 경합 상태에 대 한 이벤트 처리기를 알려주는 플래그를 설정 하는 것을 해결할 수는 <xref:System.Timers.Timer.Elapsed> 후속 이벤트를 무시 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-140">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="047ac-141">사용 하는 경우는 <xref:System.Timers.Timer?displayProperty=nameWithType> 폼 이나 컨트롤 해당 사용자 인터페이스 요소에 사용 되는 타이머를 배치 하지 않고 같은 사용자 인터페이스 요소를 사용 하 여 클래스 할당 폼 이나 컨트롤 포함 하는 <xref:System.Timers.Timer> 에 <xref:System.Timers.Timer.SynchronizingObject%2A> 속성, 이벤트는 않도록 사용자 인터페이스 스레드 마샬링됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-141">If you use the <xref:System.Timers.Timer?displayProperty=nameWithType> class with a user interface element, such as a form or control, without placing the timer on that user interface element, assign the form or control that contains the <xref:System.Timers.Timer> to the <xref:System.Timers.Timer.SynchronizingObject%2A> property, so that the event is marshaled to the user interface thread.</span></span>  
  
 <span data-ttu-id="047ac-142">인스턴스에 대 한 기본 속성 값 목록은 <xref:System.Timers.Timer>, 참조는 <xref:System.Timers.Timer.%23ctor%2A> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-142">For a list of default property values for an instance of <xref:System.Timers.Timer>, see the <xref:System.Timers.Timer.%23ctor%2A> constructor.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="047ac-143">.NET 라는 4 개의 클래스가 포함 되어 있는지 알아야 `Timer`각각 서로 다른 기능을 제공 하는 중:</span><span class="sxs-lookup"><span data-stu-id="047ac-143">Be aware that .NET includes four classes named `Timer`, each of which offers different functionality:</span></span>  
>   
> - <span data-ttu-id="047ac-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (이 항목): 정기적으로 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-144"><xref:System.Timers.Timer?displayProperty=nameWithType> (this topic): fires an event at regular intervals.</span></span> <span data-ttu-id="047ac-145">클래스는 서버 기반으로 사용 또는 되며 다중 스레드 환경에서 서비스 구성 요소를 위한 사용자 인터페이스가 없는 하 고 런타임 시 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-145">The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="047ac-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: 정기적으로 스레드 풀 스레드에서 단일 콜백 메서드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-146"><xref:System.Threading.Timer?displayProperty=nameWithType>: executes a single callback method on a thread pool thread at regular intervals.</span></span> <span data-ttu-id="047ac-147">콜백 메서드는 사용 되는 타이머 인스턴스화되고 변경할 수 없는 때 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-147">The callback method is defined when the timer is instantiated and cannot be changed.</span></span> <span data-ttu-id="047ac-148">마찬가지로 <xref:System.Timers.Timer?displayProperty=nameWithType> 클래스,이 클래스는 다중 스레드 환경에서 서버 기반 또는 서비스 구성 요소로 사용 하기 위한 사용자 인터페이스가 없는 하 고을 런타임 시 표시 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-148">Like the <xref:System.Timers.Timer?displayProperty=nameWithType> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime.</span></span>  
> - <span data-ttu-id="047ac-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET framework에만 해당): Windows Forms 구성 요소를 일정 한 간격 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-149"><xref:System.Windows.Forms.Timer?displayProperty=nameWithType> (.NET Framework only): a Windows Forms component that fires an event at regular intervals.</span></span> <span data-ttu-id="047ac-150">구성 요소 사용자 인터페이스가 없는 및 단일 스레드 환경에서 사용 하도록 설계 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-150">The component has no user interface and is designed for use in a single-threaded environment.</span></span>  
> - <span data-ttu-id="047ac-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET framework에만 해당): 일정 한 간격으로 비동기 또는 동기 웹 페이지 포스트백을 수행 하는 ASP.NET 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-151"><xref:System.Web.UI.Timer?displayProperty=nameWithType> (.NET Framework only): an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval.</span></span>  

## Examples  
 <span data-ttu-id="047ac-152">다음 예제는 `System.Timers.Timer` 발생 하는 개체의 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 이벤트 2 초 마다 (2, 000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-152">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="047ac-153">값을 표시 하는 이벤트 처리기는 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 속성 될 때마다 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-153">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="047ac-154">모든 공용 <see langword="static" /> 이 형식의 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-154">Any public <see langword="static" /> members of this type are thread safe.</span></span> <span data-ttu-id="047ac-155">인터페이스 멤버는 스레드로부터 안전하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-155">Any instance members are not guaranteed to be thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Timers.Timer.AutoReset" />
    <altmember cref="P:System.Timers.Timer.Interval" />
    <altmember cref="E:System.Timers.Timer.Elapsed" />
    <altmember cref="M:System.Timers.Timer.#ctor" />
    <altmember cref="T:System.Threading.Timer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="047ac-156"><see cref="T:System.Timers.Timer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-156">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="047ac-157"><see cref="T:System.Timers.Timer" /> 클래스의 새 인스턴스를 초기화하고 모든 속성을 각각의 초기 값으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-157">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets all the properties to their initial values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-158">다음 표에서의 인스턴스에 대 한 초기 속성 값을 보여 줍니다. <xref:System.Timers.Timer>합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-158">The following table shows initial property values for an instance of <xref:System.Timers.Timer>.</span></span>  
  
|<span data-ttu-id="047ac-159">속성</span><span class="sxs-lookup"><span data-stu-id="047ac-159">Property</span></span>|<span data-ttu-id="047ac-160">초기 값</span><span class="sxs-lookup"><span data-stu-id="047ac-160">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Timers.Timer.AutoReset%2A>|`true`|  
|<xref:System.Timers.Timer.Enabled%2A>|`false`|  
|<xref:System.Timers.Timer.Interval%2A>|<span data-ttu-id="047ac-161">100 밀리초</span><span class="sxs-lookup"><span data-stu-id="047ac-161">100 milliseconds</span></span>|  
|<xref:System.Timers.Timer.SynchronizingObject%2A>|<span data-ttu-id="047ac-162">null 참조(Visual Basic의 경우 `Nothing`)</span><span class="sxs-lookup"><span data-stu-id="047ac-162">A null reference (`Nothing` in Visual Basic).</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="047ac-163">다음 예제는 <xref:System.Timers.Timer> 발생 하는 개체의 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-163">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="047ac-164">값을 표시 하는 이벤트 처리기는 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 속성 될 때마다 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-164">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (double interval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.#ctor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (interval As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(double interval);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="interval"><span data-ttu-id="047ac-165">이벤트 간의 시간(밀리초 단위)입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-165">The time, in milliseconds, between events.</span></span> <span data-ttu-id="047ac-166">값은 0보다 크고 <see cref="F:System.Int32.MaxValue" />보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-166">The value must be greater than zero and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="047ac-167"><see cref="T:System.Timers.Timer" /> 클래스의 새 인스턴스를 초기화하고 <see cref="P:System.Timers.Timer.Interval" /> 속성을 지정된 시간(밀리초)으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-167">Initializes a new instance of the <see cref="T:System.Timers.Timer" /> class, and sets the <see cref="P:System.Timers.Timer.Interval" /> property to the specified number of milliseconds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-168">이 생성자는 설정의 <xref:System.Timers.Timer.Interval%2A> 새 타이머 인스턴스의 속성 하지만 사용 되는 타이머를 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-168">This constructor sets the <xref:System.Timers.Timer.Interval%2A> property of the new timer instance, but does not enable the timer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="047ac-169">다음 예제는 <xref:System.Timers.Timer> 발생 하는 개체의 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-169">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="047ac-170">값을 표시 하는 이벤트 처리기는 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 속성 될 때마다 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-170">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-csharp[System.Timers.Timer#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/AsyncHandlerEx1.cs#3)]
 [!code-vb[System.Timers.Timer#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/AsyncHandlerEx1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="047ac-171"><paramref name="interval" /> 매개 변수 값이 0보다 작거나 같거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="047ac-171">The value of the <paramref name="interval" /> parameter is less than or equal to zero, or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="public bool AutoReset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReset" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.AutoReset" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoReset As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoReset { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer will be restarted when it is enabled.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="047ac-172"><see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 한 번만(<see langword="false" />) 발생시켜야 하는지 반복해서(<see langword="true" />) 발생시켜야 하는지 나타내는 부울을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-172">Gets or sets a Boolean indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once (<see langword="false" />) or repeatedly (<see langword="true" />).</span></span></summary>
        <value>
          <span data-ttu-id="047ac-173">간격이 경과할 때마다 <see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하면 <see langword="true" />이고, 첫 번째 간격이 경과한 후 한 번만 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-173"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event each time the interval elapses; <see langword="false" /> if it should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event only once, after the first time the interval elapses.</span></span> <span data-ttu-id="047ac-174">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-174">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-175">경우는 <xref:System.Timers.Timer> 이미 때 사용할 수는 <xref:System.Timers.Timer.Start%2A> 메서드가 호출 되 면 재설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-175">If the <xref:System.Timers.Timer> is already enabled when the <xref:System.Timers.Timer.Start%2A> method is called, the interval is reset.</span></span> <span data-ttu-id="047ac-176">경우 <xref:System.Timers.Timer.AutoReset%2A> 은 `false`, <xref:System.Timers.Timer.Start%2A> 개수를 다시 시작 하기 위해 메서드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-176">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="047ac-177">간격을 다시 설정에 영향을 줍니다 시기는 <xref:System.Timers.Timer.Elapsed> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-177">Resetting the interval affects when the <xref:System.Timers.Timer.Elapsed> event is raised.</span></span> <span data-ttu-id="047ac-178">예를 들어 간격을 5 초로 설정 하 고 다음을 설정 하는 경우는 <xref:System.Timers.Timer.Enabled%2A> 속성을 `true`, 수 시간에 시작 <xref:System.Timers.Timer.Enabled%2A> 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-178">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="047ac-179">지났을 때 3 초, 10 초 간격을 다시 설정 하는 경우는 <xref:System.Timers.Timer.Elapsed> 13 초 후 처음으로 이벤트는 <xref:System.Timers.Timer.Enabled%2A> 속성이로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-179">If you reset the interval to 10 seconds when the count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after the <xref:System.Timers.Timer.Enabled%2A> property was set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="047ac-180">다음 예제에서는 한 <xref:System.Timers.Timer> 인 <xref:System.Timers.Timer.Elapsed> 1.5 초 후에 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-180">The following example creates a <xref:System.Timers.Timer> whose <xref:System.Timers.Timer.Elapsed> event fires after 1.5 seconds.</span></span> <span data-ttu-id="047ac-181">해당 이벤트 처리기는 "Hello World!"를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-181">Its event handler then displays "Hello World!"</span></span> <span data-ttu-id="047ac-182">콘솔.</span><span class="sxs-lookup"><span data-stu-id="047ac-182">on the console.</span></span>  
  
 [!code-cpp[Classic Timer.Timer1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer.Timer1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/CS/source.cs#1)]
 [!code-vb[Classic Timer.Timer1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Timer.Timer1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="047ac-183">폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Timers.Timer" />의 런타임 초기화를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-183">Begins the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-184">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 디자인 환경에서이 메서드를 사용 하 여 폼에 또는 다른 구성 요소에서 사용 되는 구성 요소 초기화를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-184">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to start the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="047ac-185"><xref:System.Timers.Timer.EndInit%2A> 메서드 초기화를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-185">The <xref:System.Timers.Timer.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="047ac-186">사용 하는 <xref:System.Timers.Timer.BeginInit%2A> 및 <xref:System.Timers.Timer.EndInit%2A> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-186">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.EndInit" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="047ac-187">
          <see cref="T:System.Timers.Timer" />에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-187">Releases the resources used by the <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-188"><xref:System.Timers.Timer.Close%2A> 메서드 호출에서 `Dispose` 메서드.</span><span class="sxs-lookup"><span data-stu-id="047ac-188">The <xref:System.Timers.Timer.Close%2A> method in turn calls the `Dispose` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="047ac-189">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-189"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="047ac-190">현재 <see cref="T:System.Timers.Timer" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-190">Releases all resources used by the current <see cref="T:System.Timers.Timer" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public event System.Timers.ElapsedEventHandler Elapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Timers.ElapsedEventHandler Elapsed" />
      <MemberSignature Language="DocId" Value="E:System.Timers.Timer.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Elapsed As ElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Timers::ElapsedEventHandler ^ Elapsed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Occurs when the Interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Timers.ElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="047ac-191">간격이 경과하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-191">Occurs when the interval elapses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-192"><xref:System.Timers.Timer.Elapsed> 이벤트는 <xref:System.Timers.Timer.Enabled%2A> 속성은 `true` 에 정의 된 시간 간격 (밀리초)는 <xref:System.Timers.Timer.Interval%2A> 속성 간격이 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-192">The <xref:System.Timers.Timer.Elapsed> event is raised if the <xref:System.Timers.Timer.Enabled%2A> property is `true` and the time interval (in milliseconds) defined by the <xref:System.Timers.Timer.Interval%2A> property elapses.</span></span> <span data-ttu-id="047ac-193">경우는 <xref:System.Timers.Timer.AutoReset%2A> 속성은 `true`에 정의 된 간격으로 이벤트를 반복적으로 발생는 <xref:System.Timers.Timer.Interval%2A> 속성;는 이벤트가 그렇지 않으면 처음으로 한 번만 <xref:System.Timers.Timer.Interval%2A> 간격이 경과 값입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-193">If the <xref:System.Timers.Timer.AutoReset%2A> property is `true`, the event is raised repeatedly at an interval defined by the <xref:System.Timers.Timer.Interval%2A> property; otherwise, the event is raised only once, the first time the <xref:System.Timers.Timer.Interval%2A> value elapses.</span></span>  
  
 <span data-ttu-id="047ac-194">경우 <xref:System.Timers.Timer.Interval%2A> 후 설정 됩니다는 <xref:System.Timers.Timer> 가 시작 된 횟수가 재설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-194">If <xref:System.Timers.Timer.Interval%2A> is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="047ac-195">예를 들어 간격을 5 초로 설정 하 고 다음 설정 <xref:System.Timers.Timer.Enabled%2A> 를 `true`, 수 시간에 시작 <xref:System.Timers.Timer.Enabled%2A> 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-195">For example, if you set the interval to 5 seconds and then set <xref:System.Timers.Timer.Enabled%2A> to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="047ac-196">때 3 초, 10 초 간격을 다시 설정 하는 경우는 <xref:System.Timers.Timer.Elapsed> 13 초 후 처음으로 이벤트는 <xref:System.Timers.Timer.Enabled%2A> 로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-196">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="047ac-197">경우는 <xref:System.Timers.Timer.SynchronizingObject%2A> 속성은 `null`, <xref:System.Timers.Timer.Elapsed> 에서 이벤트가 발생 한 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-197">If the <xref:System.Timers.Timer.SynchronizingObject%2A> property is `null`,the <xref:System.Timers.Timer.Elapsed> event is raised on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="047ac-198">하는 경우의 처리는 <xref:System.Timers.Timer.Elapsed> 보다 오래 지속 되는 이벤트 <xref:System.Timers.Timer.Interval%2A>, 다른 이벤트를 다시 발생할 수 있습니다 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-198">If the processing of the <xref:System.Timers.Timer.Elapsed> event lasts longer than <xref:System.Timers.Timer.Interval%2A>, the event might be raised again on another <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="047ac-199">이 경우 이벤트 처리기 재진입 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-199">In this situation, the event handler should be reentrant.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="047ac-200">이벤트 처리 메서드는 한 스레드에서 다른 스레드에서 호출 하는 동시에 실행 될 수 있습니다는 <xref:System.Timers.Timer.Stop%2A> 메서드 또는 집합은 <xref:System.Timers.Timer.Enabled%2A> 속성을 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-200">The event-handling method might run on one thread at the same time that another thread calls the <xref:System.Timers.Timer.Stop%2A> method or sets the <xref:System.Timers.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="047ac-201">이 될 수 있습니다는 <xref:System.Timers.Timer.Elapsed> 타이머가 중지 된 후 발생 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-201">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the timer is stopped.</span></span> <span data-ttu-id="047ac-202">에 대 한 예제 코드는 <xref:System.Timers.Timer.Stop%2A> 메서드가 경합 상태를 방지 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-202">The example code for the <xref:System.Timers.Timer.Stop%2A> method shows one way to avoid this race condition.</span></span>  
  
 <span data-ttu-id="047ac-203">경우에 <xref:System.Timers.Timer.SynchronizingObject%2A> 않습니다 `null`, <xref:System.Timers.Timer.Elapsed> 이벤트 후에 발생할 수 있습니다는 <xref:System.Timers.Timer.Dispose%2A> 또는 <xref:System.Timers.Timer.Stop%2A> 메서드가 호출 된 후 또는 <xref:System.Timers.Timer.Enabled%2A> 속성이로 설정 된 `false`때문에 발생시키는신호<xref:System.Timers.Timer.Elapsed> 스레드 풀 스레드에서 실행 이벤트는 항상 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-203">Even if <xref:System.Timers.Timer.SynchronizingObject%2A> is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="047ac-204">이 경합 상태에 대 한 이벤트 처리기를 알려주는 플래그를 설정 하는 것을 해결할 수는 <xref:System.Timers.Timer.Elapsed> 후속 이벤트를 무시 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-204">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="047ac-205"><xref:System.Timers.Timer> 구성 요소의 catch 하 여 억제에 대 한 이벤트 처리기에서 발생 한 모든 예외는 <xref:System.Timers.Timer.Elapsed> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-205">The <xref:System.Timers.Timer> component catches and suppresses all exceptions thrown by event handlers for the <xref:System.Timers.Timer.Elapsed> event.</span></span> <span data-ttu-id="047ac-206">이 동작은.NET Framework의 이후 릴리스에서 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-206">This behavior is subject to change in future releases of the .NET Framework.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="047ac-207">다음 예제는 <xref:System.Timers.Timer> 발생 하는 개체의 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-207">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="047ac-208">값을 표시 하는 이벤트 처리기는 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 속성 될 때마다 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-208">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
        <altmember cref="T:System.Timers.ElapsedEventArgs" />
        <altmember cref="T:System.Timers.ElapsedEventHandler" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("Indicates whether the timer is enabled to fire events at a defined interval.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="047ac-209"><see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-209">Gets or sets a value indicating whether the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value>
          <span data-ttu-id="047ac-210"><see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하면 <see langword="true" />이고 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-210"><see langword="true" /> if the <see cref="T:System.Timers.Timer" /> should raise the <see cref="E:System.Timers.Timer.Elapsed" /> event; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="047ac-211">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-211">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-212">설정 <xref:System.Timers.Timer.Enabled%2A> 를 `true` 호출할 때와 동일 하 게 <xref:System.Timers.Timer.Start%2A>, 설정 <xref:System.Timers.Timer.Enabled%2A> 를 `false` 호출할 때와 동일 <xref:System.Timers.Timer.Stop%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-212">Setting <xref:System.Timers.Timer.Enabled%2A> to `true` is the same as calling <xref:System.Timers.Timer.Start%2A>, while setting <xref:System.Timers.Timer.Enabled%2A> to `false` is the same as calling <xref:System.Timers.Timer.Stop%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="047ac-213">발생 시키는 신호는 <xref:System.Timers.Timer.Elapsed> 에 실행 이벤트는 항상 대기는 <xref:System.Threading.ThreadPool> 스레드입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-213">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread.</span></span> <span data-ttu-id="047ac-214">이 될 수 있습니다는 <xref:System.Timers.Timer.Elapsed> 후 발생 하는 이벤트는 <xref:System.Timers.Timer.Enabled%2A> 속성이 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-214">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Enabled%2A> property is set to `false`.</span></span> <span data-ttu-id="047ac-215">에 대 한 코드 예제는 <xref:System.Timers.Timer.Stop%2A> 메서드가 경합 상태를 해결 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-215">The code example for the <xref:System.Timers.Timer.Stop%2A> method shows one way to work around this race condition.</span></span>  
  
 <span data-ttu-id="047ac-216">경우 <xref:System.Timers.Timer.Enabled%2A> 로 설정 된 `true` 및 <xref:System.Timers.Timer.AutoReset%2A> 로 설정 된 `false`, <xref:System.Timers.Timer> 를 발생 시킵니다는 <xref:System.Timers.Timer.Elapsed> 이벤트는 처음에는 간격으로 한 번만 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-216">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span>  
  
 <span data-ttu-id="047ac-217">다음은 간격을 설정 하는 경우는 <xref:System.Timers.Timer> 가 시작 된 횟수가 재설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-217">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="047ac-218">예를 들어 간격을 5 초로 설정 하 고 다음을 설정 하는 경우는 <xref:System.Timers.Timer.Enabled%2A> 속성을 `true`, 수 시간에 시작 <xref:System.Timers.Timer.Enabled%2A> 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-218">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="047ac-219">때 3 초, 10 초 간격을 다시 설정 하는 경우는 <xref:System.Timers.Timer.Elapsed> 13 초 후 처음으로 이벤트는 <xref:System.Timers.Timer.Enabled%2A> 로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-219">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="047ac-220">예: Microsoft Visual Studio의 일부 비주얼 디자이너에서 설정 된 <xref:System.Timers.Timer.Enabled%2A> 속성을 `true` 새 삽입할 때 <xref:System.Timers.Timer>합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-220">Some visual designers, such as those in Microsoft Visual Studio, set the <xref:System.Timers.Timer.Enabled%2A> property to `true` when inserting a new <xref:System.Timers.Timer>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="047ac-221">다음 예제는 <xref:System.Timers.Timer> 발생 하는 개체의 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-221">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="047ac-222">값을 표시 하는 이벤트 처리기는 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 속성 될 때마다 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-222">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="047ac-223">타이머가 삭제되어 이 속성을 설정할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="047ac-223">This property cannot be set because the timer has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="047ac-224">타이머를 사용하기 전에 <see cref="P:System.Timers.Timer.Interval" /> 속성은 <see cref="F:System.Int32.MaxValue" /> 보다 큰 값으로 설정되었습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-224">The <see cref="P:System.Timers.Timer.Interval" /> property was set to a value greater than <see cref="F:System.Int32.MaxValue" /> before the timer was enabled.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="047ac-225">폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Timers.Timer" />의 런타임 초기화를 마칩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-225">Ends the run-time initialization of a <see cref="T:System.Timers.Timer" /> that is used on a form or by another component.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-226">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] 디자인 환경에서이 메서드를 사용 하 여 폼에 또는 다른 구성 요소에서 사용 되는 구성 요소 초기화를 끝냅니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-226">The [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] design environment uses this method to end the initialization of a component that is used on a form or by another component.</span></span> <span data-ttu-id="047ac-227"><xref:System.Timers.Timer.BeginInit%2A> 메서드 초기화를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-227">The <xref:System.Timers.Timer.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="047ac-228">사용 하는 <xref:System.Timers.Timer.BeginInit%2A> 및 <xref:System.Timers.Timer.EndInit%2A> 메서드는 컨트롤이 완전히 초기화 되기 전에 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-228">Using the <xref:System.Timers.Timer.BeginInit%2A> and <xref:System.Timers.Timer.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Timers.Timer.BeginInit" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="P:System.Timers.Timer.Interval" />
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The number of milliseconds between timer events.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="047ac-229"><see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시킬 간격(밀리초)을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-229">Gets or sets the interval, expressed in milliseconds, at which to raise the <see cref="E:System.Timers.Timer.Elapsed" /> event.</span></span></summary>
        <value><span data-ttu-id="047ac-230"><see cref="E:System.Timers.Timer.Elapsed" /> 이벤트 간의 시간(밀리초)입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-230">The time, in milliseconds, between <see cref="E:System.Timers.Timer.Elapsed" /> events.</span></span> <span data-ttu-id="047ac-231">값은 0보다 크고 <see cref="F:System.Int32.MaxValue" />보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-231">The value must be greater than zero, and less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span> <span data-ttu-id="047ac-232">기본값은 100밀리초입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-232">The default is 100 milliseconds.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-233">사용 하면는 <xref:System.Timers.Timer.Interval%2A> 속성은 빈도 확인 하는 <xref:System.Timers.Timer.Elapsed> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-233">You use the <xref:System.Timers.Timer.Interval%2A> property to determine the frequency at which the <xref:System.Timers.Timer.Elapsed> event is fired.</span></span> <span data-ttu-id="047ac-234">때문에 <xref:System.Timers.Timer> 시스템 클록에 따라 달라 집니다 클래스, 시스템 클록의 해상도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-234">Because the <xref:System.Timers.Timer> class depends on the system clock, it has the same resolution as the system clock.</span></span> <span data-ttu-id="047ac-235">즉는 <xref:System.Timers.Timer.Elapsed> 이벤트는 시스템 시계의 정밀도 의해 정의 된 간격으로 발생 하는 <xref:System.Timers.Timer.Interval%2A> 시스템 클록의 해상도 보다 작아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-235">This means that the <xref:System.Timers.Timer.Elapsed> event will fire at an interval defined by the resolution of the system clock if the <xref:System.Timers.Timer.Interval%2A> property is less than the resolution of the system clock.</span></span> <span data-ttu-id="047ac-236">다음 예에서는 <xref:System.Timers.Timer.Interval%2A> 속성을 5 밀리초입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-236">The following example sets the <xref:System.Timers.Timer.Interval%2A> property to 5 milliseconds.</span></span> <span data-ttu-id="047ac-237">실행할 때는 [!INCLUDE[win7](~/includes/win7-md.md)] 시스템 클럭의 5 밀리초 마다 보다는 약 15 밀리초 마다 약 15 밀리초, 이벤트 발생의 해상도가 하는 시스템입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-237">When run on a [!INCLUDE[win7](~/includes/win7-md.md)] system whose system clock has a resolution of approximately 15 milliseconds, the event fires approximately every 15 milliseconds rather than every 5 milliseconds.</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/interval2.cs#1)]
 [!code-vb[System.Timers.Timer.Interval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/interval2.vb#1)]  
  
 <span data-ttu-id="047ac-238">현재 시스템에서 시스템 클록의 해상도 확인 하려면 다음 코드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-238">You can use the following code to determine the resolution of the system clock on the current system:</span></span>  
  
 [!code-csharp[System.Timers.Timer.Interval#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer.interval/cs/resolution1.cs#2)]
 [!code-vb[System.Timers.Timer.Interval#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer.interval/vb/resolution1.vb#2)]  
  
 <span data-ttu-id="047ac-239">응용 프로그램에서 제공 하는 보다 큰 해상도 필요로 하는 경우는 <xref:System.Timers.Timer> 클래스 또는 고해상도 멀티미디어 타이머를 사용 하 여; 참조 시스템 클록 [하는 방법: High-Resolution 타이머를 사용 하 여](http://msdn.microsoft.com/library/aa964692.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-239">If your app requires greater resolution than that offered by the <xref:System.Timers.Timer> class or the system clock, use the high-resolution multimedia timers; see [How to: Use the High-Resolution Timer](http://msdn.microsoft.com/library/aa964692.aspx).</span></span>  
  
 <span data-ttu-id="047ac-240">다음은 간격을 설정 하는 경우는 <xref:System.Timers.Timer> 가 시작 된 횟수가 재설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-240">If the interval is set after the <xref:System.Timers.Timer> has started, the count is reset.</span></span> <span data-ttu-id="047ac-241">예를 들어 간격을 5 초로 설정 하 고 다음을 설정 하는 경우는 <xref:System.Timers.Timer.Enabled%2A> 속성을 `true`, 수 시간에 시작 <xref:System.Timers.Timer.Enabled%2A> 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-241">For example, if you set the interval to 5 seconds and then set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, the count starts at the time <xref:System.Timers.Timer.Enabled%2A> is set.</span></span> <span data-ttu-id="047ac-242">때 3 초, 10 초 간격을 다시 설정 하는 경우는 <xref:System.Timers.Timer.Elapsed> 13 초 후 처음으로 이벤트는 <xref:System.Timers.Timer.Enabled%2A> 로 설정 된 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-242">If you reset the interval to 10 seconds when count is 3 seconds, the <xref:System.Timers.Timer.Elapsed> event is raised for the first time 13 seconds after <xref:System.Timers.Timer.Enabled%2A> was set to `true`.</span></span>  
  
 <span data-ttu-id="047ac-243">경우 <xref:System.Timers.Timer.Enabled%2A> 로 설정 된 `true` 및 <xref:System.Timers.Timer.AutoReset%2A> 로 설정 된 `false`, <xref:System.Timers.Timer> 를 발생 시킵니다는 <xref:System.Timers.Timer.Elapsed> 이벤트는 처음에는 간격으로 한 번만 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-243">If <xref:System.Timers.Timer.Enabled%2A> is set to `true` and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="047ac-244"><xref:System.Timers.Timer.Enabled%2A> 으로 설정 됩니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-244"><xref:System.Timers.Timer.Enabled%2A> is then set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="047ac-245">경우 <xref:System.Timers.Timer.Enabled%2A> 및 <xref:System.Timers.Timer.AutoReset%2A> 으로 설정 됩니다 `false`, 및 타이머 이전에 활성화 되어 있는 설정의 <xref:System.Timers.Timer.Interval%2A> 속성 원인을 <xref:System.Timers.Timer.Elapsed> 이벤트를 한 번 발생 처럼는 <xref:System.Timers.Timer.Enabled%2A> 에설정된속성`true`.</span><span class="sxs-lookup"><span data-stu-id="047ac-245">If <xref:System.Timers.Timer.Enabled%2A> and <xref:System.Timers.Timer.AutoReset%2A> are both set to `false`, and the timer has previously been enabled, setting the <xref:System.Timers.Timer.Interval%2A> property causes the <xref:System.Timers.Timer.Elapsed> event to be raised once, as if the <xref:System.Timers.Timer.Enabled%2A> property had been set to `true`.</span></span> <span data-ttu-id="047ac-246">간격 이벤트를 생성 하지 않고을 설정 하려면 일시적으로 설정한는 <xref:System.Timers.Timer.Enabled%2A> 속성을 `true`설정는 <xref:System.Timers.Timer.Interval%2A> 속성을 원하는 시간 간격을 즉시 설정 하 고는 <xref:System.Timers.Timer.Enabled%2A> 속성을 다시 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-246">To set the interval without raising the event, you can temporarily set the <xref:System.Timers.Timer.Enabled%2A> property to `true`, set the <xref:System.Timers.Timer.Interval%2A> property to the desired time interval, and then immediately set the <xref:System.Timers.Timer.Enabled%2A> property back to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="047ac-247">다음 예제는 <xref:System.Timers.Timer> 발생 하는 개체의 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 이벤트 2 초 마다 (2000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-247">The following example instantiates a <xref:System.Timers.Timer> object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2000 milliseconds), sets up an event handler for the event, and starts the timer.</span></span> <span data-ttu-id="047ac-248">값을 표시 하는 이벤트 처리기는 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 속성 될 때마다 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-248">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span>  
  
 [!code-cpp[System.Timers.Timer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.timers.timer/cpp/timer1.cpp#1)]
 [!code-csharp[System.Timers.Timer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer1.cs#1)]
 [!code-vb[System.Timers.Timer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="047ac-249">간격이 0 이하인 경우</span><span class="sxs-lookup"><span data-stu-id="047ac-249">The interval is less than or equal to zero.</span></span>  
  
 <span data-ttu-id="047ac-250">또는</span><span class="sxs-lookup"><span data-stu-id="047ac-250">-or-</span></span>  
  
 <span data-ttu-id="047ac-251">간격은 <see cref="F:System.Int32.MaxValue" /> 보다 크며, 타이머는 현재 사용 가능합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-251">The interval is greater than <see cref="F:System.Int32.MaxValue" />, and the timer is currently enabled.</span></span> <span data-ttu-id="047ac-252">타이머를 현재 사용할 수 없는 경우, 사용 가능하게 될 때까지 예외가 throw되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-252">(If the timer is not currently enabled, no exception is thrown until it becomes enabled.)</span></span></exception>
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="047ac-253">디자인 모드에서 <see cref="T:System.Timers.Timer" />를 컨테이너에 바인딩하는 사이트를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-253">Gets or sets the site that binds the <see cref="T:System.Timers.Timer" /> to its container in design mode.</span></span></summary>
        <value><span data-ttu-id="047ac-254"><see cref="T:System.Timers.Timer" /> 개체를 컨테이너에 바인딩하는 사이트를 나타내는 <see cref="T:System.ComponentModel.ISite" /> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-254">An <see cref="T:System.ComponentModel.ISite" /> interface representing the site that binds the <see cref="T:System.Timers.Timer" /> object to its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-255">사이트 바인딩는 <xref:System.ComponentModel.Component> 에 <xref:System.ComponentModel.Container> 서로 통신할 수 있도록 할 뿐만 아니라 해당 구성 요소를 관리 하는 컨테이너에 대 한 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-255">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as providing a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="047ac-256"><see cref="P:System.Timers.Timer.Enabled" />를 <see langword="true" />로 설정하여 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-256">Starts raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-257">경우 <xref:System.Timers.Timer.Start%2A> 라고 하 고 <xref:System.Timers.Timer.AutoReset%2A> 로 설정 된 `false`, <xref:System.Timers.Timer> 를 발생 시킵니다는 <xref:System.Timers.Timer.Elapsed> 이벤트는 처음에는 간격으로 한 번만 경과 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-257">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is set to `false`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event only once, the first time the interval elapses.</span></span> <span data-ttu-id="047ac-258">경우 <xref:System.Timers.Timer.Start%2A> 라고 하 고 <xref:System.Timers.Timer.AutoReset%2A> 은 `true`, <xref:System.Timers.Timer> 를 발생 시킵니다는 <xref:System.Timers.Timer.Elapsed> 첫 번째 이벤트 시간 간격이 경과 하 고 계속 지정된 된 간격에 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-258">If <xref:System.Timers.Timer.Start%2A> is called and <xref:System.Timers.Timer.AutoReset%2A> is `true`, the <xref:System.Timers.Timer> raises the <xref:System.Timers.Timer.Elapsed> event the first time the interval elapses and continues to raise the event on the specified interval.</span></span>  
  
 <span data-ttu-id="047ac-259">설정 하 여 타이밍을 시작할 수도 <xref:System.Timers.Timer.Enabled%2A> 를 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-259">You can also start timing by setting <xref:System.Timers.Timer.Enabled%2A> to `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="047ac-260">경우 <xref:System.Timers.Timer.AutoReset%2A> 은 `false`, <xref:System.Timers.Timer.Start%2A> 개수를 다시 시작 하기 위해 메서드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-260">If <xref:System.Timers.Timer.AutoReset%2A> is `false`, the <xref:System.Timers.Timer.Start%2A> method must be called in order to start the count again.</span></span>  
  
 <span data-ttu-id="047ac-261">에 대 한 호출에서 <xref:System.Timers.Timer.Start%2A> 메서드를 사용 되는 타이머를 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-261">A call to the <xref:System.Timers.Timer.Start%2A> method when the timer is enabled has no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="047ac-262"><see cref="T:System.Timers.Timer" />를 만들 때 간격을 <see cref="F:System.Int32.MaxValue" /> + 1보다 크거나 같은 값으로 설정했거나 0보다 작은 값으로 설정한 경우</span><span class="sxs-lookup"><span data-stu-id="047ac-262">The <see cref="T:System.Timers.Timer" /> is created with an interval equal to or greater than <see cref="F:System.Int32.MaxValue" /> + 1, or set to an interval less than zero.</span></span></exception>
        <altmember cref="P:System.Timers.Timer.Interval" />
        <altmember cref="P:System.Timers.Timer.AutoReset" />
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Stop" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Timers.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="047ac-263"><see cref="P:System.Timers.Timer.Enabled" />를 <see langword="false" />로 설정하여 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트 발생을 중지합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-263">Stops raising the <see cref="E:System.Timers.Timer.Elapsed" /> event by setting <see cref="P:System.Timers.Timer.Enabled" /> to <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-264">설정 하 여 타이밍을 중지할 수도 <xref:System.Timers.Timer.Enabled%2A> 를 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-264">You can also stop timing by setting <xref:System.Timers.Timer.Enabled%2A> to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="047ac-265">발생 시키는 신호는 <xref:System.Timers.Timer.Elapsed> 이벤트는 항상 실행 대기에 <xref:System.Threading.ThreadPool> 스레드, 이벤트 처리 메서드는 동일한 하나의 스레드에서 실행 되므로 시간에 대 한 호출은 <xref:System.Timers.Timer.Stop%2A> 다른 스레드에서 메서드를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-265">The signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a <xref:System.Threading.ThreadPool> thread, so the event-handling method might run on one thread at the same time that a call to the <xref:System.Timers.Timer.Stop%2A> method runs on another thread.</span></span> <span data-ttu-id="047ac-266">이 될 수 있습니다는 <xref:System.Timers.Timer.Elapsed> 후 발생 하는 이벤트는 <xref:System.Timers.Timer.Stop%2A> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-266">This might result in the <xref:System.Timers.Timer.Elapsed> event being raised after the <xref:System.Timers.Timer.Stop%2A> method is called.</span></span> <span data-ttu-id="047ac-267">다음 섹션의 코드 예제에서는이 경합 상태를 해결 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-267">The code example in the next section shows one way to work around this race condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="047ac-268">다음 예제는 `System.Timers.Timer` 발생 하는 개체의 <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> 이벤트 2 초 마다 (2, 000 밀리초)는 이벤트에 대 한 이벤트 처리기를 설정 하 고 타이머를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-268">The following example instantiates a `System.Timers.Timer` object that fires its <xref:System.Timers.Timer.Elapsed?displayProperty=nameWithType> event every two seconds (2,000 milliseconds), sets up an event handler for the  event, and starts the timer.</span></span> <span data-ttu-id="047ac-269">값을 표시 하는 이벤트 처리기는 <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> 속성 될 때마다 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-269">The event handler displays the value of the <xref:System.Timers.ElapsedEventArgs.SignalTime%2A?displayProperty=nameWithType> property each time it is raised.</span></span> <span data-ttu-id="047ac-270">사용자가 Enter 키를 누르면 응용 프로그램 호출에서 <xref:System.Timers.Timer.Stop%2A> 응용 프로그램을 종료 하기 전에 메서드.</span><span class="sxs-lookup"><span data-stu-id="047ac-270">When the user presses the Enter key, the application calls the  <xref:System.Timers.Timer.Stop%2A> method before terminating the application.</span></span>  
  
 [!code-csharp[System.Timers.Timer#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timers.timer/cs/timer2a.cs#2)]
 [!code-vb[System.Timers.Timer#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timers.timer/vb/timer2a.vb#2)]  
  
 <span data-ttu-id="047ac-271">다음 코드 예제에서는 호출 하는 스레드를 방지 하는 방법을 보여 줍니다.는 <xref:System.Timers.Timer.Stop%2A> 메서드를 현재 실행 될 때까지 계속할 <xref:System.Timers.Timer.Elapsed> 이벤트 끝 두 것을 방지 하려면 또한 <xref:System.Timers.Timer.Elapsed> 이벤트는 동일한 이벤트 처리기를 실행 합니다. 시간 (재진입 라고도 함)입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-271">The following code example shows one way to prevent the thread that calls the <xref:System.Timers.Timer.Stop%2A> method from continuing until a currently executing <xref:System.Timers.Timer.Elapsed> event ends, and also to prevent two <xref:System.Timers.Timer.Elapsed> events from executing the event handler at the same time (often referred to as reentrancy).</span></span>  
  
 <span data-ttu-id="047ac-272">이 예제에서는 100 테스트 실행을 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-272">The example executes 100 test runs.</span></span> <span data-ttu-id="047ac-273">에 테스트가 실행 될 때마다 타이머가 150 시간 (밀리초) 간격으로 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-273">Each time the test is run, the timer is started with an interval of 150 milliseconds.</span></span> <span data-ttu-id="047ac-274">이벤트 처리기에서 사용 된 <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> 다양 한 길이는 50 200 밀리초를 하는 작업을 시뮬레이션 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="047ac-274">The event handler uses the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to simulate a task that randomly varies in length from 50 to 200 milliseconds.</span></span> <span data-ttu-id="047ac-275">테스트 메서드는 또한 잠시 동안 기다린 다음 타이머를 중지 하는 제어 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-275">The test method also starts a control thread that waits for a second and then stops the timer.</span></span> <span data-ttu-id="047ac-276">컨트롤 스레드 타이머를 중지 하는 경우 이벤트를 처리 되 고, 컨트롤 스레드 이벤트가 계속 진행 하기 전에 완료 될 때까지 기다려야 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-276">If an event is being handled when the control thread stops the timer, the control thread must wait until the event is finished before proceeding.</span></span>  
  
 <span data-ttu-id="047ac-277"><xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 재진입을 방지 하 고 제어 스레드 실행 중인 이벤트가 종료 될 때까지 계속 하지 않게 하려면 메서드 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-277">The <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload is used to avoid reentrancy and to prevent the control thread from continuing until an executing event ends.</span></span> <span data-ttu-id="047ac-278">이벤트 처리기에서 사용 된 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> 변수를 1로 되지만 현재 값이 0 인 경우에 컨트롤을 설정 하려면 메서드.</span><span class="sxs-lookup"><span data-stu-id="047ac-278">The event handler uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set a control variable to 1, but only if the value is currently zero.</span></span> <span data-ttu-id="047ac-279">이 작업은 원자성 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-279">This is an atomic operation.</span></span> <span data-ttu-id="047ac-280">반환 값 0 이면 제어 변수를 1로 설정 하 고 이벤트 처리기에 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-280">If the return value is zero, the control variable has been set to 1 and the event handler proceeds.</span></span> <span data-ttu-id="047ac-281">반환 값 0이 아닌 경우 재진입을 방지 하는 이벤트가 취소 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-281">If the return value is non-zero, the event is simply discarded to avoid reentrancy.</span></span> <span data-ttu-id="047ac-282">(모든 이벤트를 실행 하는 데 필요한 것은 <xref:System.Threading.Monitor> 클래스에 더 좋은 방법은 이벤트를 동기화 하는 것입니다.) 이벤트 처리기가 종료 때 제어 변수를 다시 0으로 설정.</span><span class="sxs-lookup"><span data-stu-id="047ac-282">(If it were necessary to execute every event, the <xref:System.Threading.Monitor> class would be a better way to synchronize the events.) When the event handler ends, it sets the control variable back to zero.</span></span> <span data-ttu-id="047ac-283">이 예제에서는 기록 하 고 실행 된 재진입으로 인해 삭제 된 후에 발생 한 이벤트의 총 수는 <xref:System.Timers.Timer.Stop%2A> 메서드를 호출 했습니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-283">The example records the total number of events that executed, that were discarded because of reentrancy, and that occurred after the <xref:System.Timers.Timer.Stop%2A> method was called.</span></span>  
  
 <span data-ttu-id="047ac-284">컨트롤 스레드가 사용 하는 <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> 변수 (-1),-1로 되지만 현재 값이 0 인 경우에 컨트롤을 설정 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="047ac-284">The control thread uses the <xref:System.Threading.Interlocked.CompareExchange%28System.Int32%40%2CSystem.Int32%2CSystem.Int32%29> method to set the control variable to -1 (minus one), but only if the value is currently zero.</span></span> <span data-ttu-id="047ac-285">원자 단위 작업에서 반환 하는 0이 아닌 이벤트 진행 중입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-285">If the atomic operation returns non-zero, an event is currently executing.</span></span> <span data-ttu-id="047ac-286">컨트롤 스레드 잠시 기다린 후 다시 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-286">The control thread waits and tries again.</span></span> <span data-ttu-id="047ac-287">이 예제에서는 컨트롤 스레드 이벤트가 완료 될 때까지 기다려야 했던 횟수를 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-287">The example records the number of times the control thread had to wait for an event to finish.</span></span>  
  
 [!code-csharp[Timer.Stop#1](~/samples/snippets/csharp/VS_Snippets_CLR/Timer.Stop/CS/source.cs#1)]
 [!code-vb[Timer.Stop#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Timer.Stop/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Timers.Timer.Enabled" />
        <altmember cref="M:System.Timers.Timer.Start" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Timers.Timer.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Timers.TimersDescription("The object used to marshal the event handler calls issued when an interval has elapsed.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="047ac-288">시간 간격이 경과할 때 발행되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-288">Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.</span></span></summary>
        <value><span data-ttu-id="047ac-289">시간 간격이 경과할 때 발행되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 나타내는 <see cref="T:System.ComponentModel.ISynchronizeInvoke" />입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-289">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object used to marshal the event-handler calls that are issued when an interval has elapsed.</span></span> <span data-ttu-id="047ac-290">기본값은 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-290">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="047ac-291">때 <xref:System.Timers.Timer.SynchronizingObject%2A> 은 `null`를 처리 하는 메서드는 <xref:System.Timers.Timer.Elapsed> 이벤트 시스템 스레드 풀의 스레드라도에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-291">When <xref:System.Timers.Timer.SynchronizingObject%2A> is `null`, the method that handles the <xref:System.Timers.Timer.Elapsed> event is called on a thread from the system-thread pool.</span></span> <span data-ttu-id="047ac-292">시스템 스레드 풀에 대 한 자세한 내용은 참조 하십시오. <xref:System.Threading.ThreadPool>합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-292">For more information on system-thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="047ac-293">경우는 <xref:System.Timers.Timer.Elapsed> 수 결과 예외가 하거나 작동 하지 않을 수 시스템 스레드 풀을 통해 구성 요소에 액세스 하는 단추와 같은 한 시각적 Windows Forms 구성 요소 이벤트를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-293">When the <xref:System.Timers.Timer.Elapsed> event is handled by a visual Windows Forms component, such as a button, accessing the component through the system-thread pool might result in an exception or just might not work.</span></span> <span data-ttu-id="047ac-294">이 효과 설정 하 여 방지할 <xref:System.Timers.Timer.SynchronizingObject%2A> 처리 하는 메서드 때문에 Windows Forms 구성 요소에는 <xref:System.Timers.Timer.Elapsed> 구성 요소에 만들어진 스레드와 동일한 스레드에서 호출 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-294">Avoid this effect by setting <xref:System.Timers.Timer.SynchronizingObject%2A> to a Windows Forms component, which causes the method that handles the <xref:System.Timers.Timer.Elapsed> event to be called on the same thread that the component was created on.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="047ac-295">경우에는 <xref:System.Timers.Timer.SynchronizingObject%2A> 속성은 `null`, <xref:System.Timers.Timer.Elapsed> 이벤트 후에 발생할 수 있습니다는 <xref:System.Timers.Timer.Dispose%2A> 또는 <xref:System.Timers.Timer.Stop%2A> 메서드가 호출 된 후 또는 <xref:System.Timers.Timer.Enabled%2A> 속성이로 설정 된 `false`때문에 발생 시키는 신호 <xref:System.Timers.Timer.Elapsed> 스레드 풀 스레드에서 실행 이벤트는 항상 대기 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-295">Even if the <xref:System.Timers.Timer.SynchronizingObject%2A> property is not `null`, <xref:System.Timers.Timer.Elapsed> events can occur after the <xref:System.Timers.Timer.Dispose%2A> or <xref:System.Timers.Timer.Stop%2A> method has been called or after the <xref:System.Timers.Timer.Enabled%2A> property has been set to `false`, because the signal to raise the <xref:System.Timers.Timer.Elapsed> event is always queued for execution on a thread pool thread.</span></span> <span data-ttu-id="047ac-296">이 경합 상태에 대 한 이벤트 처리기를 알려주는 플래그를 설정 하는 것을 해결할 수는 <xref:System.Timers.Timer.Elapsed> 후속 이벤트를 무시 하는 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-296">One way to resolve this race condition is to set a flag that tells the event handler for the <xref:System.Timers.Timer.Elapsed> event to ignore subsequent events.</span></span>  
  
 <span data-ttu-id="047ac-297">경우는 <xref:System.Timers.Timer> Windows Forms 디자이너에서 Visual Studio 내에서 사용 되 <xref:System.Timers.Timer.SynchronizingObject%2A> 포함 하는 컨트롤에 자동으로 설정 됩니다는 <xref:System.Timers.Timer>합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-297">If the <xref:System.Timers.Timer> is used inside Visual Studio in a Windows Forms designer, <xref:System.Timers.Timer.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Timers.Timer>.</span></span> <span data-ttu-id="047ac-298">예를 들어, 배치 하는 경우는 <xref:System.Timers.Timer> 에 대 한 디자이너에서 `Form1` (에서 상속 되 <xref:System.Windows.Forms.Form>), <xref:System.Timers.Timer.SynchronizingObject%2A> 속성 <xref:System.Timers.Timer> 인스턴스의로 설정 된 `Form1`합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-298">For example, if you place a <xref:System.Timers.Timer> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>), the <xref:System.Timers.Timer.SynchronizingObject%2A> property of <xref:System.Timers.Timer> is set to the instance of `Form1`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="047ac-299">다음 예제는 매우 간단한 텍스트 파일 편집기로 사용 되는 Windows Forms 응용 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-299">The following example is a Windows Forms app that serves as a very simple text file editor.</span></span> <span data-ttu-id="047ac-300">텍스트 상자에 텍스트 저장 되지 않은 경우 응용 프로그램 사용자에 게 요청 1 분 간격으로 하는지 여부를 보려는 입력란의 내용을 저장 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-300">When the text in the text box has not been saved, the app asks the user at one-minute intervals whether he or she wants to save the contents of the text box.</span></span>  <span data-ttu-id="047ac-301">이렇게 하려면는 <xref:System.Timers.Timer.Interval%2A> 속성을 1 분 (60, 000 밀리초)로 설정 및 <xref:System.Timers.Timer.SynchronizingObject%2A> 속성이로 설정 되는 <xref:System.Windows.Forms.Form> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-301">To do this, the <xref:System.Timers.Timer.Interval%2A> property is set to one minute (60,000 milliseconds), and the <xref:System.Timers.Timer.SynchronizingObject%2A> property is set to the <xref:System.Windows.Forms.Form> object.</span></span>  
  
 [!code-csharp[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/cs/Form1.cs#1)]
 [!code-vb[System.Timers.Timer.SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Timers.Timer.SynchronizingObject/vb/Form1.vb#1)]  
  
 <span data-ttu-id="047ac-302">이 예제에서는 폼에는 다음과 같은 컨트롤을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="047ac-302">The example requires that you add the following controls to the form:</span></span>  
  
-   <span data-ttu-id="047ac-303">A <xref:System.Windows.Forms.TextBox> 라는 컨트롤 `TextBox1` (기본 이름).</span><span class="sxs-lookup"><span data-stu-id="047ac-303">A <xref:System.Windows.Forms.TextBox> control named `TextBox1` (its default name).</span></span>  
  
-   <span data-ttu-id="047ac-304">A <xref:System.Windows.Forms.Button> 라는 컨트롤 `Button1` (기본 이름).</span><span class="sxs-lookup"><span data-stu-id="047ac-304">A <xref:System.Windows.Forms.Button> control named `Button1` (its default name).</span></span>  
  
-   <span data-ttu-id="047ac-305">A <xref:System.Windows.Forms.SaveFileDialog> 라는 컨트롤 `SaveSaveFileDialog1` (기본 이름).</span><span class="sxs-lookup"><span data-stu-id="047ac-305">A <xref:System.Windows.Forms.SaveFileDialog> control named `SaveSaveFileDialog1` (its default name) .</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.ComponentModel.ISynchronizeInvoke" />
        <altmember cref="T:System.Threading.ThreadPool" />
        <altmember cref="E:System.Timers.Timer.Elapsed" />
      </Docs>
    </Member>
  </Members>
</Type>