<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a3f571fdd8687db855e07c0035a0de1869318081" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34285316" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f541e-101">워크플로를 메서드 호출인 것처럼 호출할 수 있는 방법을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f541e-101">Provides a means for invoking a workflow as if it were a method call.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-102"><xref:System.Activities.WorkflowInvoker>는 워크플로를 동기적으로 호출하는 데 필요한 인스턴스 및 정적 메서드와 워크플로를 비동기적으로 호출하는 데 필요한 인스턴스 메서드를 모두 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="f541e-103"><xref:System.Activities.WorkflowInvoker>에서는 책갈피 지속, 언로드 또는 다시 시작과 같은 인스턴스 제어를 허용하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="f541e-104">인스턴스 제어를 원하는 경우에는 대신 <xref:System.Activities.WorkflowApplication>을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="f541e-105">인스턴스 제어를 사용하지 않고 워크플로를 동기적으로 실행하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="f541e-106">인스턴스 제어를 사용하지 않고 워크플로를 비동기적으로 실행하려면 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 메서드와 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드의 쌍 또는 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 메서드를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-107">다음 예제에서는 단일 <xref:System.Activities.Statements.WriteLine> 활동으로 구성된 워크플로를 <xref:System.Activities.WorkflowInvoker>를 사용하여 동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="f541e-108">이 <see cref="T:System.Activities.WorkflowInvoker" /> 클래스의 인스턴스에 의해 호출될 워크플로의 워크플로 정의입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-109">
            <see cref="T:System.Activities.WorkflowInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-110"><xref:System.Activities.WorkflowInvoker>는 워크플로를 동기적으로 호출하는 데 필요한 인스턴스 및 정적 메서드와 워크플로를 비동기적으로 호출하는 데 필요한 인스턴스 메서드를 모두 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-111">다음 예제에서는 단일 <xref:System.Activities.Statements.WriteLine> 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f541e-112">
            <see cref="T:System.IAsyncResult" /> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-113">자세한 내용은 참조 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="f541e-114">워크플로가 완료될 때 호출될 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-114">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="f541e-115">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-115">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-116">지정한 <see cref="T:System.AsyncCallback" /> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-117">비동기 호출 작업에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-117">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-118">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드에서 `callback`를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="f541e-119">워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="f541e-120">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f541e-121">이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f541e-122">자세한 내용은 참조 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-123">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-124">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-125">이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f541e-126"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="f541e-127">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-127">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="f541e-128">워크플로가 완료될 때 호출될 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-128">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="f541e-129">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-129">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-130">입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />, <see cref="T:System.AsyncCallback" /> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-131">비동기 호출 작업에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-131">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-132">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드에서 `callback`를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="f541e-133">워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="f541e-134">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f541e-135">이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f541e-136">자세한 내용은 참조 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-137">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-138">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-139">이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f541e-140"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f541e-141">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="f541e-142">워크플로가 완료될 때 호출될 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-142">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="f541e-143">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-143">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-144">지정한 시간 제한 간격, <see cref="T:System.AsyncCallback" /> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-145">비동기 호출 작업에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-145">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-146">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드에서 `callback`를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="f541e-147">워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="f541e-148">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 <xref:System.TimeoutException> 메서드 호출 시 워크플로가 중단되고 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-149"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-150">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f541e-151">이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f541e-152">자세한 내용은 참조 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-153">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-154">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-155">이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f541e-156"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="f541e-157">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-157">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f541e-158">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="f541e-159">워크플로가 완료될 때 호출될 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-159">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="f541e-160">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-160">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-161">입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />, 시간 제한 간격, <see cref="T:System.AsyncCallback" /> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-162">비동기 호출 작업에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-162">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-163">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 메서드에서 `callback`를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="f541e-164">워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="f541e-165">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 <xref:System.TimeoutException> 호출 시 워크플로가 중단되고 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-166"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-167">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f541e-168">이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f541e-169">자세한 내용은 참조 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-170">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-171">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-172">이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f541e-173"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="f541e-174">취소할 워크플로의 토큰입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-174">The token for the workflow to cancel.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-175">지정한 <paramref name="userState" />를 사용하여 호출된 워크플로를 취소하려고 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-176"><xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 매개 변수를 사용하는 `userState` 오버로드 중 하나에 의해 호출되는 워크플로만 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="f541e-177">취소에 성공 하면는 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 속성의는 <xref:System.Activities.InvokeCompletedEventArgs> 에 전달 되는 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기로 설정 되어 `true`, 그렇지 않으면로 설정 된 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-178">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-179">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-180">워크플로가 호출되면 호스트가 워크플로를 취소하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="f541e-181">워크플로를 시작한 <see cref="T:System.IAsyncResult" /> 작업을 참조하는 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-182">
            <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 오버로드 중 하나를 사용하여 호출한 워크플로의 결과를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-183">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-183">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-184">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 의해 지정된 `callback` 메서드에서 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="f541e-185">워크플로가 완료되기 전에 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="f541e-186">이 메서드는 <xref:System.IAsyncResult> 비동기 디자인 패턴을 사용하여 비동기적으로 호출된 워크플로의 결과를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="f541e-187">자세한 내용은 참조 [비동기 프로그래밍 개요](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-188">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-189">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-190">이러한 인수는 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>를 호출하여 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="f541e-191"><xref:System.Activities.WorkflowInvoker.EndInvoke%2A>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f541e-192">
            <see cref="T:System.Collections.ObjectModel.Collection`1" /> 인스턴스에 의해 호출되는 워크플로에서 사용할 수 있는 확장의 <see cref="T:System.Activities.WorkflowInvoker" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f541e-193">
            <see cref="T:System.Collections.ObjectModel.Collection`1" /> 인스턴스에 의해 호출되는 워크플로에서 사용할 수 있는 확장의 <see cref="T:System.Activities.WorkflowInvoker" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-194">이 속성은 워크플로 호스트 작성자가 <xref:System.Activities.WorkflowInvoker> 인스턴스에 확장을 추가하여 이 인스턴스에 의해 호출되는 워크플로에서 확장을 사용할 수 있도록 하는 데 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-195">다음 예제에서는 <xref:System.Activities.Tracking.TrackingParticipant> 인스턴스의 <xref:System.Activities.WorkflowInvoker.Extensions%2A> 컬렉션을 사용하여 사용자 지정 <xref:System.Activities.WorkflowInvoker>를 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="f541e-196">이 코드 예제는의 일부는 [사용자 지정 추적](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="f541e-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f541e-197">워크플로를 동기적으로 호출하고, 워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-197">Invokes a workflow synchronously and returns a dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-198">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-199">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-200">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f541e-201">
            <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 생성자로 전달된 워크플로 정의를 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-202">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-202">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-203">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-204">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-205">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-206">다음 예제에서는 단일 `DiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="f541e-207">`DiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-208">`Invoke`에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="f541e-209">워크플로가 호출 되을 두 번에 전달 된 워크플로 정의 사용 하 여 `WorkflowInvoker` 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="f541e-210">워크플로의 루트 활동에 출력 인수가 없거나 호스트에 해당 활동이 필요하지 않은 경우 루트 활동을 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="f541e-211">다음 예제에서는 출력 인수를 포함하지 않는 단일 <xref:System.Activities.Statements.WriteLine> 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="f541e-212">호출할 워크플로의 워크플로 정의입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-212">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-213">지정한 워크플로 정의를 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-213">Invokes a workflow synchronously using the specified workflow definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-214">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-214">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-215">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-216">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-217">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-218">다음 예제에서는 단일 `DiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="f541e-219">`DiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-220">`Invoke`에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="f541e-221">워크플로의 루트 활동에 출력 인수가 없거나 호스트에 해당 활동이 필요하지 않은 경우 루트 활동을 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="f541e-222">다음 예제에서는 출력 인수를 포함하지 않는 단일 <xref:System.Activities.Statements.WriteLine> 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="f541e-223">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-223">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-224">입력 매개 변수의 지정한 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />를 사용하여 <see cref="T:System.Collections.Generic.IDictionary`2" /> 생성자로 전달된 활동을 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-225">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-225">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-226">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-227">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-228">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-229">다음 예제에서는 두 개의 입력 인수와 두 개의 출력 인수를 포함하는 단일 `Divide` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="f541e-230">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f541e-231">`Invoke`에 대한 호출이 반환되면 각 출력 인수가 `outputs` 사전에 반환됩니다. 이렇게 반환되는 인수에는 인수 이름이 키로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="f541e-232">파생 된 워크플로 경우 <xref:System.Activities.ActivityWithResult>와 같은 `CodeActivity<TResult>` 또는 `Activity<TResult>`, 출력 인수 외에도 잘 정의 된 되며 <xref:System.Activities.Activity%601.Result%2A> 출력 인수는 비 제네릭 오버 로드의 `Invoke`,이 샘플과 같이 사용 해야 합니다. 추가 인수를 검색 하는 순서입니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="f541e-233">이렇게 하려면에 전달 된 워크플로 정의 `WorkflowInvoker` 생성자 형식 이어야 합니다 <xref:System.Activities.Activity>합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="f541e-234">이 예제는 `Divide` 에서 파생 된 활동 `CodeActivity<int>`,으로 선언 하지만 <xref:System.Activities.Activity> 의 오버 로드이 `Invoke`, 단일 반환 값 대신 인수 사전을 반환 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f541e-235">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-236">지정한 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-236">Invokes a workflow synchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-237">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-237">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-238">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-239">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-240">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-241"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-242">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-243">다음 예제에서는 두 개의 <xref:System.Activities.Statements.WriteLine> 활동과 <xref:System.Activities.Statements.Delay>이 1분으로 구성된 하나의 <xref:System.Activities.Statements.Delay.Duration%2A> 활동을 포함하는 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="f541e-244">이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="f541e-245">첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <xref:System.TimeoutException>이 throw되고 다음 메시지가 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="f541e-246">사용 하는 예제에 대 한 `Invoke` 출력 인수를 갖는 오버 로드를 참조 하십시오. <xref:System.Activities.WorkflowInvoker.Invoke%2A> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="f541e-247">호출할 워크플로의 워크플로 정의입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-247">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="f541e-248">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-248">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-249">지정한 워크플로 정의 및 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" />를 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-250">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-250">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-251">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-252">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-253">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-254">다음 예제에서는 두 개의 입력 인수와 두 개의 출력 인수를 포함하는 단일 `Divide` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="f541e-255">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f541e-256">`Invoke`에 대한 호출이 반환되면 각 출력 인수가 `outputs` 사전에 반환됩니다. 이렇게 반환되는 인수에는 인수 이름이 키로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="f541e-257">파생 된 워크플로 경우 <xref:System.Activities.ActivityWithResult>와 같은 `CodeActivity<TResult>` 또는 `Activity<TResult>`, 출력 인수 외에도 잘 정의 된 되며 <xref:System.Activities.Activity%601.Result%2A> 출력 인수는 비 제네릭 오버 로드의 `Invoke`,이 샘플과 같이 사용 해야 합니다. 추가 인수를 검색 하는 순서입니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="f541e-258">이렇게 하려면 `Invoke`로 전달된 워크플로 정의가 <xref:System.Activities.Activity> 형식이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="f541e-259">이 예제는 `Divide` 에서 파생 된 활동 `CodeActivity<int>`,으로 선언 하지만 <xref:System.Activities.Activity> 의 오버 로드이 `Invoke`, 단일 반환 값 대신 인수 사전을 반환 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="f541e-260">호출할 워크플로의 워크플로 정의입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-260">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f541e-261">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-262">지정한 워크플로 정의 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-263">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-263">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-264">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-265">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-266">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-267"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-268">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-269">다음 예제에서는 두 개의 <xref:System.Activities.Statements.WriteLine> 활동과 <xref:System.Activities.Statements.Delay>이 1분으로 구성된 하나의 <xref:System.Activities.Statements.Delay.Duration%2A> 활동을 포함하는 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="f541e-270">이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="f541e-271">첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="f541e-272">사용 하는 예제에 대 한 `Invoke` 출력 인수를 갖는 오버 로드를 참조 하십시오. <xref:System.Activities.WorkflowInvoker.Invoke%2A> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="f541e-273">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-273">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f541e-274">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-275">입력 매개 변수의 지정한 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 및 지정한 시간 제한 간격을 사용하여 <see cref="T:System.Collections.Generic.IDictionary`2" /> 생성자로 전달된 활동을 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-276">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-276">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-277">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-278">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-279">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-280"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-281">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-282">다음 예제에서는 두 개의 <xref:System.Activities.Statements.WriteLine> 활동과 <xref:System.Activities.Statements.Delay>이 1분으로 구성된 하나의 <xref:System.Activities.Statements.Delay.Duration%2A> 활동을 포함하는 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="f541e-283">이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="f541e-284">첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <xref:System.TimeoutException>이 throw되고 다음 메시지가 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="f541e-285">사용 하는 예제에 대 한 `Invoke` 입력 및 출력 인수를 갖는 오버 로드를 참조 하십시오. <xref:System.Activities.WorkflowInvoker.Invoke%2A> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="f541e-286">호출할 워크플로의 워크플로 정의입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-286">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="f541e-287">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-287">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f541e-288">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-289">지정한 워크플로 정의, 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-290">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <see cref="T:System.Activities.OutArgument" /> 및 <see cref="T:System.Activities.InOutArgument" /> 값의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-290">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-291">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-292">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-293">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-294"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-295">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-296">다음 예제에서는 두 개의 <xref:System.Activities.Statements.WriteLine> 활동과 <xref:System.Activities.Statements.Delay>이 1분으로 구성된 하나의 <xref:System.Activities.Statements.Delay.Duration%2A> 활동을 포함하는 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="f541e-297">이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="f541e-298">첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="f541e-299">사용 하는 예제에 대 한 `Invoke` 입력 및 출력 인수를 갖는 오버 로드를 참조 하십시오. <xref:System.Activities.WorkflowInvoker.Invoke%2A> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="f541e-300">워크플로 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-300">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="f541e-301">호출할 워크플로의 워크플로 정의입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-301">The workflow definition of the workflow to invoke.</span>
          </span>
          <span data-ttu-id="f541e-302">워크플로 정의는 <see cref="T:System.Activities.ActivityWithResult" />에서 파생해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-303">
            <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 생성자로 전달된 워크플로 정의를 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-304">작업 실행 결과를 포함하는 TResult 형식의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-304">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-305">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-306">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-307">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-308">다음 예제에서는 단일 구성 된 워크플로 호출 `Add` 두 가지 입력된 인수에 있는 활동을에서 파생 되며 `CodeActivity<int>` 잘 정의 된 한 <xref:System.Activities.Activity%601.Result%2A> 출력 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="f541e-309">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f541e-310">경우에 대 한 호출 `Invoke` 의 값을 반환 된 <xref:System.Activities.Activity%601.Result%2A> 출력 인수가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="f541e-311">이 코드 예제는에 기반을 둔는 [WorkflowInvoker 클래스를 사용 하 여](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="f541e-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="f541e-312">워크플로 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-312">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="f541e-313">호출할 워크플로의 워크플로 정의입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-313">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="f541e-314">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-314">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-315">지정한 워크플로 정의 및 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" />를 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-316">작업 실행 결과를 포함하는 TResult 형식의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-316">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-317">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-318">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-319">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.Invoke%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-320"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-321">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-322">다음 예제에서는 단일 구성 된 워크플로 호출 `Add` 두 가지 입력된 인수에 있는 활동을에서 파생 되며 `CodeActivity<int>` 잘 정의 된 한 <xref:System.Activities.Activity%601.Result%2A> 출력 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="f541e-323">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f541e-324">경우에 대 한 호출 `Invoke` 의 값을 반환 된 <xref:System.Activities.Activity%601.Result%2A> 출력 인수가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="f541e-325">이 코드 예제는에 기반을 둔는 [WorkflowInvoker 클래스를 사용 하 여](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="f541e-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="f541e-326">워크플로 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-326">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="f541e-327">호출할 워크플로의 워크플로 정의입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-327">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="f541e-328">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-328">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f541e-329">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-330">지정한 워크플로 정의, 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-331">작업 실행 결과를 포함하는 TResult 형식의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-331">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-332">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-333">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-334">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-335"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-336">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-337">다음 예제에서는 단일 구성 된 워크플로 호출 `Add` 두 가지 입력된 인수에 있는 활동을에서 파생 되며 `CodeActivity<int>` 잘 정의 된 한 <xref:System.Activities.Activity%601.Result%2A> 출력 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="f541e-338">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f541e-339">경우에 대 한 호출 `Invoke` 의 값을 반환 된 <xref:System.Activities.Activity%601.Result%2A> 출력 인수가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="f541e-340">이 코드 예제는에 기반을 둔는 [WorkflowInvoker 클래스를 사용 하 여](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="f541e-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="f541e-341">워크플로 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-341">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="f541e-342">호출할 워크플로의 워크플로 정의입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-342">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="f541e-343">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-343">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="additionalOutputs">
          <span data-ttu-id="f541e-344">인수 이름으로 키가 지정된 워크플로에 대한 추가 출력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f541e-345">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-346">지정한 워크플로 정의, 입력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" />, 추가 출력 매개 변수의 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f541e-347">작업 실행 결과를 포함하는 TResult 형식의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-347">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-348">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="f541e-349">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="f541e-350">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-351"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-352">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-353">다음 예제에서는 단일 구성 된 워크플로 호출 `Add` 두 가지 입력된 인수에 있는 활동을에서 파생 되며 `CodeActivity<int>` 잘 정의 된 한 <xref:System.Activities.Activity%601.Result%2A> 출력 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="f541e-354">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 `arguments` 사전이 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="f541e-355">경우에 대 한 호출 `Invoke` 의 값을 반환 된 <xref:System.Activities.Activity%601.Result%2A> 출력 인수가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="f541e-356">이 코드 예제는에 기반을 둔는 [WorkflowInvoker 클래스를 사용 하 여](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) 샘플.</span><span class="sxs-lookup"><span data-stu-id="f541e-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f541e-357">이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-358">워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f541e-359">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f541e-360">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f541e-361">자세한 내용은 [이벤트 기반 비동기 패턴 개요](http://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f541e-361">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f541e-362">워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-362">Invokes a workflow asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-363">워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f541e-364">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f541e-365">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f541e-366">자세한 내용은 [이벤트 기반 비동기 패턴 개요](http://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f541e-366">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-367">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-368">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-369">워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="f541e-370">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-370">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-371">입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />를 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-372">워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f541e-373">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f541e-374">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f541e-375">자세한 내용은 [이벤트 기반 비동기 패턴 개요](http://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f541e-375">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-376">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-377">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-378">워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="f541e-379">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-380">지정한 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-380">Invokes a workflow asynchronously using the specified unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-381">`userState` 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 작업에서 고유해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="f541e-382">`userState` 매개 변수가 고유하지 않으면 <xref:System.ArgumentException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="f541e-383">`userState`를 사용하여 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>에서 워크플로를 식별하고 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>를 통해 워크플로를 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="f541e-384">워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f541e-385">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f541e-386">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f541e-387">자세한 내용은 [이벤트 기반 비동기 패턴 개요](http://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f541e-387">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-388">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-389">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-390">워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f541e-391">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-392">지정한 시간 제한 간격을 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-392">Invokes a workflow asynchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-393">워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f541e-394">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-395"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-396">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f541e-397">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f541e-398">자세한 내용은 [이벤트 기반 비동기 패턴 개요](http://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f541e-398">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-399">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-400">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-401">워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="f541e-402">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-402">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="f541e-403">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-404">입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-405">`userState` 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 작업에서 고유해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="f541e-406">`userState`가 고유하지 않으면 <xref:System.ArgumentException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="f541e-407">`userState`를 사용하여 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>에서 워크플로를 식별하고 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>를 통해 워크플로를 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="f541e-408">워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f541e-409">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>을 사용하는 <xref:System.TimeSpan> 오버로드 중 하나를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="f541e-410">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f541e-411">자세한 내용은 [이벤트 기반 비동기 패턴 개요](http://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f541e-411">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-412">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-413">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-414">워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="f541e-415">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-415">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f541e-416">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-417">입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" /> 및 지정한 시간 제한 간격을 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-418">워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f541e-419">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-420"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-421">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f541e-422">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f541e-423">자세한 내용은 [이벤트 기반 비동기 패턴 개요](http://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f541e-423">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-424">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-425">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-426">워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="f541e-427">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="f541e-428">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-429">지정한 시간 제한 간격 및 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-430">`userState` 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 작업에서 고유해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="f541e-431">`userState`가 고유하지 않으면 <xref:System.ArgumentException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="f541e-432">`userState`를 사용하여 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>에서 워크플로를 식별하고 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>를 통해 워크플로를 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="f541e-433">워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f541e-434">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-435"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-436">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f541e-437">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f541e-438">자세한 내용은 [이벤트 기반 비동기 패턴 개요](http://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f541e-438">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-439">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-440">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-441">워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="f541e-442">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-442">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="f541e-443">워크플로가 중단되고 <see cref="T:System.TimeoutException" />이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="f541e-444">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f541e-445">입력 매개 변수의 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />, 지정한 시간 제한 간격 및 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-446">`userState` 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 작업에서 고유해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="f541e-447">`userState`가 고유하지 않으면 <xref:System.ArgumentException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="f541e-448">`userState`를 사용하여 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>에서 워크플로를 식별하고 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>를 통해 워크플로를 취소할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="f541e-449">워크플로가 완료될 때 알림을 받으려면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>를 처리합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="f541e-450">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <xref:System.TimeoutException>이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f541e-451"><xref:System.TimeoutException>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="f541e-452">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="f541e-453">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="f541e-454">자세한 내용은 [이벤트 기반 비동기 패턴 개요](http://go.microsoft.com/fwlink/?LinkId=141765)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="f541e-454">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-455">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-456">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-457">워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f541e-458">
            <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> 오버로드 중 하나에 의해 호출된 워크플로가 완료되거나 취소될 때 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f541e-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f541e-459">이를 처리하면 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 오버로드 중 하나를 사용하여 호출된 워크플로가 완료되었는지 확인하고 완료된 워크플로의 출력 인수를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f541e-460">다음 예제에서는 하나의 `LongRunningDiceRoll` 활동으로 구성된 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="f541e-461">`LongRunningDiceRoll` 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="f541e-462">워크플로가 완료되면 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 처리기에서 이러한 인수가 검색됩니다.</span><span class="sxs-lookup"><span data-stu-id="f541e-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>