<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WorkflowInvoker.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae25fbb5-14a8-44f2-90c2-3c6d6fcaae7f354e06dc1e37e2448d14f29e07d176eaa05a8dea.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">354e06dc1e37e2448d14f29e07d176eaa05a8dea</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b899505ed6d42225f2b3c9150bfdc080d0d1f9b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/28/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowInvoker">
          <source>Provides a means for invoking a workflow as if it were a method call.</source>
          <target state="translated">워크플로를 메서드 호출인 것처럼 호출할 수 있는 방법을 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>는 워크플로를 동기적으로 호출하는 데 필요한 인스턴스 및 정적 메서드와 워크플로를 비동기적으로 호출하는 데 필요한 인스턴스 메서드를 모두 포함합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> does not allow instance control such as persisting, unloading, or resuming bookmarks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>에서는 책갈피 지속, 언로드 또는 다시 시작과 같은 인스턴스 제어를 허용하지 않습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>If instance control is desired, use <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instead.</source>
          <target state="translated">인스턴스 제어를 원하는 경우에는 대신 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To execute workflows synchronously with no instance control, call the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">인스턴스 제어를 사용하지 않고 워크플로를 동기적으로 실행하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To execute a workflow asynchronously with no instance control, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> method pairs, or the <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> method.</source>
          <target state="translated">인스턴스 제어를 사용하지 않고 워크플로를 비동기적으로 실행하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> 메서드와 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> 메서드의 쌍 또는 <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> 메서드를 사용합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>The following example synchronously invokes a workflow consisting of a single <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity using <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 단일 <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> 활동으로 구성된 워크플로를 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>를 사용하여 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
          <source>The workflow definition of the workflow to be invoked by this instance of the <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> class.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> 클래스의 인스턴스에 의해 호출될 워크플로의 워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>는 워크플로를 동기적으로 호출하는 데 필요한 인스턴스 및 정적 메서드와 워크플로를 비동기적으로 호출하는 데 필요한 인스턴스 메서드를 모두 포함합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity.</source>
          <target state="translated">다음 예제에서는 단일 <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowInvoker">
          <source>Invokes a workflow asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>The method to be called when the workflow has completed.</source>
          <target state="translated">워크플로가 완료될 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> and user-provided state.</source>
          <target state="translated">지정한 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous invoke operation.</source>
          <target state="translated">비동기 호출 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> 메서드에서 <ph id="ph2">`callback`</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">워크플로가 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">이러한 인수는 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하여 검색됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>The method to be called when the workflow has completed.</source>
          <target state="translated">워크플로가 완료될 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, <ph id="ph2">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>, and user-provided state.</source>
          <target state="translated">입력 매개 변수의 지정한 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous invoke operation.</source>
          <target state="translated">비동기 호출 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> 메서드에서 <ph id="ph2">`callback`</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">워크플로가 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">이러한 인수는 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하여 검색됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the workflow has completed.</source>
          <target state="translated">워크플로가 완료될 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Invokes a workflow asynchronously using the specified time-out interval, <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>, and user-provided state.</source>
          <target state="translated">지정한 시간 제한 간격, <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous invoke operation.</source>
          <target state="translated">비동기 호출 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> 메서드에서 <ph id="ph2">`callback`</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">워크플로가 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> method is called.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> 메서드 호출 시 워크플로가 중단되고 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">이러한 인수는 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하여 검색됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the workflow has completed.</source>
          <target state="translated">워크플로가 완료될 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, time-out interval, <ph id="ph2">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>, and user-provided state.</source>
          <target state="translated">입력 매개 변수의 지정한 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>, 시간 제한 간격, <ph id="ph2">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 및 사용자가 제공한 상태를 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous invoke operation.</source>
          <target state="translated">비동기 호출 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> 메서드에서 <ph id="ph2">`callback`</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">워크플로가 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown when <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> 호출 시 워크플로가 중단되고 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">이러한 인수는 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하여 검색됩니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>The token for the workflow to cancel.</source>
          <target state="translated">취소할 워크플로의 토큰입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>Attempts to cancel the workflow that was invoked with the specified <ph id="ph1">&lt;paramref name="userState" /&gt;</ph>.</source>
          <target state="translated">지정한 <ph id="ph1">&lt;paramref name="userState" /&gt;</ph>를 사용하여 호출된 워크플로를 취소하려고 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>Only a workflow invoked by one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that takes a <ph id="ph2">`userState`</ph> parameter can be canceled.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> 매개 변수를 사용하는 <ph id="ph2">`userState`</ph> 오버로드 중 하나에 의해 호출되는 워크플로만 취소할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>If the cancellation succeeds, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Activities.InvokeCompletedEventArgs&gt;</ph> passed to the <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler is set to <ph id="ph4">`true`</ph>; otherwise, it is set to <ph id="ph5">`false`</ph>.</source>
          <target state="translated">취소에 성공 하면는 <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> 속성의는 <ph id="ph2">&lt;xref:System.Activities.InvokeCompletedEventArgs&gt;</ph> 에 전달 되는 <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기로 설정 되어 <ph id="ph4">`true`</ph>, 그렇지 않으면로 설정 된 <ph id="ph5">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>Once the workflow is invoked, the host attempts to cancel the workflow.</source>
          <target state="translated">워크플로가 호출되면 호스트가 워크플로를 취소하려고 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the <ph id="ph2">&lt;see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /&gt;</ph> operation that started the workflow.</source>
          <target state="translated">워크플로를 시작한 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 작업을 참조하는 <ph id="ph2">&lt;see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>Returns the results of a workflow that was invoked using one of the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /&gt;</ph> overloads.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /&gt;</ph> 오버로드 중 하나를 사용하여 호출한 워크플로의 결과를 반환합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method specified by <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받고 워크플로의 출력 매개 변수를 검색하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>에 의해 지정된 <ph id="ph2">`callback`</ph> 메서드에서 <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">워크플로가 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하면 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>This method returns the result of a workflow invoked asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 비동기적으로 호출된 워크플로의 결과를 반환합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">이러한 인수는 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>를 호출하여 검색됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> of extensions that are available to workflows invoked by a <ph id="ph2">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> 인스턴스에 의해 호출되는 워크플로에서 사용할 수 있는 확장의 <ph id="ph2">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph>을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> of extensions that are available to workflows invoked by a <ph id="ph2">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> 인스턴스에 의해 호출되는 워크플로에서 사용할 수 있는 확장의 <ph id="ph2">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>This property is used by workflow host authors to add extensions to the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> instance so they will be available to workflows invoked by it.</source>
          <target state="translated">이 속성은 워크플로 호스트 작성자가 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> 인스턴스에 확장을 추가하여 이 인스턴스에 의해 호출되는 워크플로에서 확장을 사용할 수 있도록 하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>The following example registers a custom <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> with the <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Extensions%2A&gt;</ph> collection of a <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> instance.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> 인스턴스의 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Extensions%2A&gt;</ph> 컬렉션을 사용하여 사용자 지정 <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>를 등록합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>This code example is part of the <bpt id="p1">[</bpt>Custom Tracking<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md)</ept> sample.</source>
          <target state="translated">이 코드 예제는의 일부는 <bpt id="p1">[</bpt>사용자 지정 추적<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowInvoker">
          <source>Invokes a workflow synchronously and returns a dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로를 동기적으로 호출하고, 워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전을 반환합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>Invokes a workflow synchronously using the workflow definition passed to the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> constructor.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> 생성자로 전달된 워크플로 정의를 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`DiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 단일 <ph id="ph1">`DiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>The <ph id="ph1">`DiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`DiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated"><ph id="ph1">`Invoke`</ph>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>The workflow is invoked twice, using the workflow definition passed into the <ph id="ph1">`WorkflowInvoker`</ph> constructor.</source>
          <target state="translated">워크플로가 호출 되을 두 번에 전달 된 워크플로 정의 사용 하 여 <ph id="ph1">`WorkflowInvoker`</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</source>
          <target state="translated">워크플로의 루트 활동에 출력 인수가 없거나 호스트에 해당 활동이 필요하지 않은 경우 루트 활동을 무시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity that does not have any output arguments.</source>
          <target state="translated">다음 예제에서는 출력 인수를 포함하지 않는 단일 <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">호출할 워크플로의 워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>Invokes a workflow synchronously using the specified workflow definition.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`DiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 단일 <ph id="ph1">`DiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>The <ph id="ph1">`DiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`DiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated"><ph id="ph1">`Invoke`</ph>에 대한 호출이 반환되면 인수 이름으로 키가 지정된 각 출력 인수가 출력 사전에 반환됩니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</source>
          <target state="translated">워크플로의 루트 활동에 출력 인수가 없거나 호스트에 해당 활동이 필요하지 않은 경우 루트 활동을 무시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity that does not have any output arguments.</source>
          <target state="translated">다음 예제에서는 출력 인수를 포함하지 않는 단일 <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>Invokes the activity passed to the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> constructor synchronously with the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters.</source>
          <target state="translated">입력 매개 변수의 지정한 <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph>를 사용하여 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 생성자로 전달된 활동을 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Divide`</ph> activity that has two input arguments and two output arguments.</source>
          <target state="translated">다음 예제에서는 두 개의 입력 인수와 두 개의 출력 인수를 포함하는 단일 <ph id="ph1">`Divide`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 <ph id="ph1">`arguments`</ph> 사전이 전달됩니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, each output argument is returned in the <ph id="ph2">`outputs`</ph> dictionary, also keyed by argument name.</source>
          <target state="translated"><ph id="ph1">`Invoke`</ph>에 대한 호출이 반환되면 각 출력 인수가 <ph id="ph2">`outputs`</ph> 사전에 반환됩니다. 이렇게 반환되는 인수에는 인수 이름이 키로 지정됩니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>If the workflow derives from <ph id="ph1">&lt;xref:System.Activities.ActivityWithResult&gt;</ph>, such as <ph id="ph2">`CodeActivity&lt;TResult&gt;`</ph> or <ph id="ph3">`Activity&lt;TResult&gt;`</ph>, and there are output arguments in addition to the well-defined <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument, a non-generic overload of <ph id="ph5">`Invoke`</ph>, such as this one, must be used in order to retrieve the additional arguments.</source>
          <target state="translated">파생 된 워크플로 경우 <ph id="ph1">&lt;xref:System.Activities.ActivityWithResult&gt;</ph>와 같은 <ph id="ph2">`CodeActivity&lt;TResult&gt;`</ph> 또는 <ph id="ph3">`Activity&lt;TResult&gt;`</ph>, 출력 인수 외에도 잘 정의 된 되며 <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수는 비 제네릭 오버 로드의 <ph id="ph5">`Invoke`</ph>,이 샘플과 같이 사용 해야 합니다. 추가 인수를 검색 하는 순서입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To do this, the workflow definition passed into the <ph id="ph1">`WorkflowInvoker`</ph> constructor must be of type <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>.</source>
          <target state="translated">이렇게 하려면에 전달 된 워크플로 정의 <ph id="ph1">`WorkflowInvoker`</ph> 생성자 형식 이어야 합니다 <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>In this example the <ph id="ph1">`Divide`</ph> activity derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph>, but is declared as <ph id="ph3">&lt;xref:System.Activities.Activity&gt;</ph> so that this overload of <ph id="ph4">`Invoke`</ph>, which returns a dictionary of arguments instead of a single return value, is used.</source>
          <target state="translated">이 예제는 <ph id="ph1">`Divide`</ph> 에서 파생 된 활동 <ph id="ph2">`CodeActivity&lt;int&gt;`</ph>,으로 선언 하지만 <ph id="ph3">&lt;xref:System.Activities.Activity&gt;</ph> 의 오버 로드이 <ph id="ph4">`Invoke`</ph>, 단일 반환 값 대신 인수 사전을 반환 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>Invokes a workflow synchronously with the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>The following example invokes a workflow that contains two <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity configured with a <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> of one minute.</source>
          <target state="translated">다음 예제에서는 두 개의 <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> 활동과 <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph>이 1분으로 구성된 하나의 <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> 활동을 포함하는 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</source>
          <target state="translated">이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>The first workflow completes successfully, but the second one does not and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown and the following message is displayed.</source>
          <target state="translated">첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw되고 다음 메시지가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>For an example of using <ph id="ph1">`Invoke`</ph> with output arguments, see the overload of <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> with the same parameters as this overload without the time-out interval.</source>
          <target state="translated">사용 하는 예제에 대 한 <ph id="ph1">`Invoke`</ph> 출력 인수를 갖는 오버 로드를 참조 하십시오. <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">호출할 워크플로의 워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>Invokes a workflow synchronously using the specified workflow definition and <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters.</source>
          <target state="translated">지정한 워크플로 정의 및 입력 매개 변수의 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>를 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Divide`</ph> activity that has two input arguments and two output arguments.</source>
          <target state="translated">다음 예제에서는 두 개의 입력 인수와 두 개의 출력 인수를 포함하는 단일 <ph id="ph1">`Divide`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 <ph id="ph1">`arguments`</ph> 사전이 전달됩니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, each output argument is returned in the <ph id="ph2">`outputs`</ph> dictionary, also keyed by argument name.</source>
          <target state="translated"><ph id="ph1">`Invoke`</ph>에 대한 호출이 반환되면 각 출력 인수가 <ph id="ph2">`outputs`</ph> 사전에 반환됩니다. 이렇게 반환되는 인수에는 인수 이름이 키로 지정됩니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>If the workflow derives from <ph id="ph1">&lt;xref:System.Activities.ActivityWithResult&gt;</ph>, such as <ph id="ph2">`CodeActivity&lt;TResult&gt;`</ph> or <ph id="ph3">`Activity&lt;TResult&gt;`</ph>, and there are output arguments in addition to the well-defined <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument, a non-generic overload of <ph id="ph5">`Invoke`</ph>, such as this one, must be used in order to retrieve the additional arguments.</source>
          <target state="translated">파생 된 워크플로 경우 <ph id="ph1">&lt;xref:System.Activities.ActivityWithResult&gt;</ph>와 같은 <ph id="ph2">`CodeActivity&lt;TResult&gt;`</ph> 또는 <ph id="ph3">`Activity&lt;TResult&gt;`</ph>, 출력 인수 외에도 잘 정의 된 되며 <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수는 비 제네릭 오버 로드의 <ph id="ph5">`Invoke`</ph>,이 샘플과 같이 사용 해야 합니다. 추가 인수를 검색 하는 순서입니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To do this, the workflow definition passed into <ph id="ph1">`Invoke`</ph> must be of type <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>.</source>
          <target state="translated">이렇게 하려면 <ph id="ph1">`Invoke`</ph>로 전달된 워크플로 정의가 <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph> 형식이어야 합니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>In this example the <ph id="ph1">`Divide`</ph> activity derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph>, but is declared as <ph id="ph3">&lt;xref:System.Activities.Activity&gt;</ph> so that this overload of <ph id="ph4">`Invoke`</ph>, which returns a dictionary of arguments instead of a single return value, is used.</source>
          <target state="translated">이 예제는 <ph id="ph1">`Divide`</ph> 에서 파생 된 활동 <ph id="ph2">`CodeActivity&lt;int&gt;`</ph>,으로 선언 하지만 <ph id="ph3">&lt;xref:System.Activities.Activity&gt;</ph> 의 오버 로드이 <ph id="ph4">`Invoke`</ph>, 단일 반환 값 대신 인수 사전을 반환 하는 데 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">호출할 워크플로의 워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>Invokes a workflow synchronously using the specified workflow definition and time-out interval.</source>
          <target state="translated">지정한 워크플로 정의 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전입니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The following example invokes a workflow that contains two <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity configured with a <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> of one minute.</source>
          <target state="translated">다음 예제에서는 두 개의 <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> 활동과 <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph>이 1분으로 구성된 하나의 <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> 활동을 포함하는 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</source>
          <target state="translated">이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The first workflow completes successfully, but the second one does not and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>For an example of using <ph id="ph1">`Invoke`</ph> with output arguments, see the overload of <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> with the same parameters as this overload without the time-out interval.</source>
          <target state="translated">사용 하는 예제에 대 한 <ph id="ph1">`Invoke`</ph> 출력 인수를 갖는 오버 로드를 참조 하십시오. <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>Invokes the activity passed to the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> constructor synchronously with the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters and the specified time-out interval.</source>
          <target state="translated">입력 매개 변수의 지정한 <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> 및 지정한 시간 제한 간격을 사용하여 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 생성자로 전달된 활동을 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The following example invokes a workflow that contains two <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity configured with a <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> of one minute.</source>
          <target state="translated">다음 예제에서는 두 개의 <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> 활동과 <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph>이 1분으로 구성된 하나의 <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> 활동을 포함하는 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</source>
          <target state="translated">이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The first workflow completes successfully, but the second one does not and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown and the following message is displayed.</source>
          <target state="translated">첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw되고 다음 메시지가 표시됩니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>For an example of using <ph id="ph1">`Invoke`</ph> with input and output arguments, see the overload of <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> with the same parameters as this overload without the time-out interval.</source>
          <target state="translated">사용 하는 예제에 대 한 <ph id="ph1">`Invoke`</ph> 입력 및 출력 인수를 갖는 오버 로드를 참조 하십시오. <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">호출할 워크플로의 워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>Invokes a workflow synchronously using the specified workflow definition, <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, and time-out interval.</source>
          <target state="translated">지정한 워크플로 정의, 입력 매개 변수의 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">워크플로 출력을 나타내며 인수 이름으로 키가 지정된 루트 활동의 <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> 값의 사전입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The following example invokes a workflow that contains two <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity configured with a <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> of one minute.</source>
          <target state="translated">다음 예제에서는 두 개의 <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> 활동과 <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph>이 1분으로 구성된 하나의 <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> 활동을 포함하는 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</source>
          <target state="translated">이 워크플로는 두 번 호출됩니다. 즉, 처음에는 시간 제한 간격이 2분으로 호출되고, 두 번째에는 시간 제한 간격이 30초로 호출됩니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The first workflow completes successfully, but the second one does not and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">첫 번째 워크플로는 완료되지만 두 번째 워크플로는 그렇지 않으며 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>For an example of using <ph id="ph1">`Invoke`</ph> with input and output arguments, see the overload of <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> with the same parameters as this overload without the time-out interval.</source>
          <target state="translated">사용 하는 예제에 대 한 <ph id="ph1">`Invoke`</ph> 입력 및 출력 인수를 갖는 오버 로드를 참조 하십시오. <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> 시간 제한 간격 없이이 오버 로드와 동일한 매개 변수를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>The type of the workflow.</source>
          <target state="translated">워크플로 형식입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">호출할 워크플로의 워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>The workflow definition needs to derive from <ph id="ph1">&lt;see cref="T:System.Activities.ActivityWithResult" /&gt;</ph>.</source>
          <target state="translated">워크플로 정의는 <ph id="ph1">&lt;see cref="T:System.Activities.ActivityWithResult" /&gt;</ph>에서 파생해야 합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>Invokes a workflow synchronously using the workflow definition passed to the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> constructor.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> 생성자로 전달된 워크플로 정의를 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>A value of type TResult with the result of the execution of the activity.</source>
          <target state="translated">작업 실행 결과를 포함하는 TResult 형식의 값입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Add`</ph> activity that has two input arguments and since it derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> it has one well-defined <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument.</source>
          <target state="translated">다음 예제에서는 단일 구성 된 워크플로 호출 <ph id="ph1">`Add`</ph> 두 가지 입력된 인수에 있는 활동을에서 파생 되며 <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> 잘 정의 된 한 <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수입니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 <ph id="ph1">`arguments`</ph> 사전이 전달됩니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, the value of the <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument is returned.</source>
          <target state="translated">경우에 대 한 호출 <ph id="ph1">`Invoke`</ph> 의 값을 반환 된 <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>This code example is based off of the <bpt id="p1">[</bpt>Using the WorkflowInvoker Class<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> sample.</source>
          <target state="translated">이 코드 예제는에 기반을 둔는 <bpt id="p1">[</bpt>WorkflowInvoker 클래스를 사용 하 여<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The type of the workflow.</source>
          <target state="translated">워크플로 형식입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">호출할 워크플로의 워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>Invokes a workflow synchronously using the specified workflow definition and <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters.</source>
          <target state="translated">지정한 워크플로 정의 및 입력 매개 변수의 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>를 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>A value of type TResult with the result of the execution of the activity.</source>
          <target state="translated">작업 실행 결과를 포함하는 TResult 형식의 값입니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Add`</ph> activity that has two input arguments and since it derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> it has one well-defined <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument.</source>
          <target state="translated">다음 예제에서는 단일 구성 된 워크플로 호출 <ph id="ph1">`Add`</ph> 두 가지 입력된 인수에 있는 활동을에서 파생 되며 <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> 잘 정의 된 한 <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 <ph id="ph1">`arguments`</ph> 사전이 전달됩니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, the value of the <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument is returned.</source>
          <target state="translated">경우에 대 한 호출 <ph id="ph1">`Invoke`</ph> 의 값을 반환 된 <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This code example is based off of the <bpt id="p1">[</bpt>Using the WorkflowInvoker Class<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> sample.</source>
          <target state="translated">이 코드 예제는에 기반을 둔는 <bpt id="p1">[</bpt>WorkflowInvoker 클래스를 사용 하 여<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The type of the workflow.</source>
          <target state="translated">워크플로 형식입니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">호출할 워크플로의 워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>Invokes a workflow synchronously using the specified workflow definition, <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, and time-out interval.</source>
          <target state="translated">지정한 워크플로 정의, 입력 매개 변수의 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A value of type TResult with the result of the execution of the activity.</source>
          <target state="translated">작업 실행 결과를 포함하는 TResult 형식의 값입니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Add`</ph> activity that has two input arguments and since it derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> it has one well-defined <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument.</source>
          <target state="translated">다음 예제에서는 단일 구성 된 워크플로 호출 <ph id="ph1">`Add`</ph> 두 가지 입력된 인수에 있는 활동을에서 파생 되며 <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> 잘 정의 된 한 <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수입니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 <ph id="ph1">`arguments`</ph> 사전이 전달됩니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, the value of the <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument is returned.</source>
          <target state="translated">경우에 대 한 호출 <ph id="ph1">`Invoke`</ph> 의 값을 반환 된 <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This code example is based off of the <bpt id="p1">[</bpt>Using the WorkflowInvoker Class<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> sample.</source>
          <target state="translated">이 코드 예제는에 기반을 둔는 <bpt id="p1">[</bpt>WorkflowInvoker 클래스를 사용 하 여<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The type of the workflow.</source>
          <target state="translated">워크플로 형식입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">호출할 워크플로의 워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The dictionary of additional output parameters of the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 추가 출력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>Invokes a workflow synchronously using the specified workflow definition, <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of additional output parameters, and time-out interval.</source>
          <target state="translated">지정한 워크플로 정의, 입력 매개 변수의 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>, 추가 출력 매개 변수의 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 및 시간 제한 간격을 사용하여 워크플로를 동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>A value of type TResult with the result of the execution of the activity.</source>
          <target state="translated">작업 실행 결과를 포함하는 TResult 형식의 값입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">이 메서드는 유휴 시간을 포함하여 워크플로가 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">모든 워크플로 실행은 호출 스레드에서 실행됩니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Add`</ph> activity that has two input arguments and since it derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> it has one well-defined <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument.</source>
          <target state="translated">다음 예제에서는 단일 구성 된 워크플로 호출 <ph id="ph1">`Add`</ph> 두 가지 입력된 인수에 있는 활동을에서 파생 되며 <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> 잘 정의 된 한 <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">워크플로가 호출되면 각 입력 인수의 값이 인수 이름으로 키가 지정되어 포함된 <ph id="ph1">`arguments`</ph> 사전이 전달됩니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, the value of the <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument is returned.</source>
          <target state="translated">경우에 대 한 호출 <ph id="ph1">`Invoke`</ph> 의 값을 반환 된 <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> 출력 인수가 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>This code example is based off of the <bpt id="p1">[</bpt>Using the WorkflowInvoker Class<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> sample.</source>
          <target state="translated">이 코드 예제는에 기반을 둔는 <bpt id="p1">[</bpt>WorkflowInvoker 클래스를 사용 하 여<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowInvoker">
          <source>Invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>를 처리합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>Invokes a workflow asynchronously.</source>
          <target state="translated">워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>를 처리합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기에서 이러한 인수가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters.</source>
          <target state="translated">입력 매개 변수의 지정한 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>를 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>를 처리합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기에서 이러한 인수가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
          <target state="translated">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>Invokes a workflow asynchronously using the specified unique identifier.</source>
          <target state="translated">지정한 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
          <target state="translated"><ph id="ph1">`userState`</ph> 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> 작업에서 고유해야 합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>If the <ph id="ph1">`userState`</ph> parameter is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">`userState`</ph> 매개 변수가 고유하지 않으면 <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`userState`</ph>를 사용하여 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>에서 워크플로를 식별하고 <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>를 통해 워크플로를 취소할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>를 처리합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기에서 이러한 인수가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>Invokes a workflow asynchronously with the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>를 처리합니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기에서 이러한 인수가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
          <target state="translated">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters and a unique identifier.</source>
          <target state="translated">입력 매개 변수의 지정한 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 및 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
          <target state="translated"><ph id="ph1">`userState`</ph> 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> 작업에서 고유해야 합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>If <ph id="ph1">`userState`</ph> is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">`userState`</ph>가 고유하지 않으면 <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`userState`</ph>를 사용하여 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>에서 워크플로를 식별하고 <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>를 통해 워크플로를 취소할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>를 처리합니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">워크플로가 완료되어야 하는 시간 제한 간격을 구성하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph>을 사용하는 <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph> 오버로드 중 하나를 사용합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기에서 이러한 인수가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>Invokes a workflow asynchronously with the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters and the specified time-out interval.</source>
          <target state="translated">입력 매개 변수의 지정한 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 및 지정한 시간 제한 간격을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>를 처리합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기에서 이러한 인수가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
          <target state="translated">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</source>
          <target state="translated">지정한 시간 제한 간격 및 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
          <target state="translated"><ph id="ph1">`userState`</ph> 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> 작업에서 고유해야 합니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>If <ph id="ph1">`userState`</ph> is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">`userState`</ph>가 고유하지 않으면 <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`userState`</ph>를 사용하여 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>에서 워크플로를 식별하고 <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>를 통해 워크플로를 취소할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>를 처리합니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기에서 이러한 인수가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로에 대한 입력 매개 변수의 사전입니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 중단되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 워크플로를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
          <target state="translated">이 특정 비동기 호출 작업을 다른 현재 비동기 호출 작업과 구별하는 데 사용되는 사용자 제공 개체입니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>Invokes a workflow asynchronously with the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, the specified time-out interval, and a unique identifier.</source>
          <target state="translated">입력 매개 변수의 지정한 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>, 지정한 시간 제한 간격 및 고유 식별자를 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
          <target state="translated"><ph id="ph1">`userState`</ph> 매개 변수는 현재 작업에 대해 현재 실행 중인 모든 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> 작업에서 고유해야 합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>If <ph id="ph1">`userState`</ph> is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">`userState`</ph>가 고유하지 않으면 <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`userState`</ph>를 사용하여 <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>에서 워크플로를 식별하고 <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>를 통해 워크플로를 취소할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">워크플로가 완료될 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>를 처리합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">워크플로가 지정한 시간 제한 간격 내에 완료되지 않으면 워크플로가 중단되고 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>은 시간 제한 간격이 경과하고 실행 시 워크플로가 유휴 상태가 되는 경우에만 throw됩니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">완료하는 데 지정한 시간 제한 간격보다 오래 걸리는 워크플로는 해당 워크플로가 유효 상태가 되지 않는 경우에 성공적으로 완료됩니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">이 메서드는 이벤트 기반 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 호출합니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated">자세한 내용은 <bpt id="p1">[</bpt>이벤트 기반 비동기 패턴 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기에서 이러한 인수가 검색됩니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>Occurs when the workflow invoked by one of the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /&gt;</ph> overloads is completed or canceled.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /&gt;</ph> 오버로드 중 하나에 의해 호출된 워크플로가 완료되거나 취소될 때 발생합니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>Handle this to determine whether a workflow invoked with one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads completed successfully and to retrieve the output arguments of the completed workflow.</source>
          <target state="translated">이를 처리하면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> 오버로드 중 하나를 사용하여 호출된 워크플로가 완료되었는지 확인하고 완료된 워크플로의 출력 인수를 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">`LongRunningDiceRoll`</ph> 활동으로 구성된 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`LongRunningDiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> 처리기에서 이러한 인수가 검색됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>