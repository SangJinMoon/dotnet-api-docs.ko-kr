<Type Name="WorkflowApplicationUnhandledExceptionEventArgs" FullName="System.Activities.WorkflowApplicationUnhandledExceptionEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32346c0781c5b93bdde156ae0e7a68ae9bb7bb7f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30358527" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WorkflowApplicationUnhandledExceptionEventArgs : System.Activities.WorkflowApplicationEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WorkflowApplicationUnhandledExceptionEventArgs extends System.Activities.WorkflowApplicationEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowApplicationUnhandledExceptionEventArgs&#xA;Inherits WorkflowApplicationEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowApplicationUnhandledExceptionEventArgs : System::Activities::WorkflowApplicationEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.WorkflowApplicationEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="0e881-101">워크플로 인스턴스에서 발생한 처리되지 않은 예외에 대한 정보를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0e881-101">Provides information about an unhandled exception that occurred in a workflow instance.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e881-102">활동에서 예외가 throw되었지만 처리되지 않은 경우 워크플로 인스턴스를 종료하는 것이 기본 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-102">If an exception is thrown by an activity and is unhandled, the default behavior is to terminate the workflow instance.</span></span> <span data-ttu-id="0e881-103"><xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 처리기가 있는 경우 이 기본 동작을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-103">If an <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is present, it can override this default behavior.</span></span> <span data-ttu-id="0e881-104">워크플로 호스트 작성자는 이 처리기를 사용하여 사용자 지정 로깅, 워크플로 중단, 워크플로 취소, 워크플로 종료 등의 적절한 처리를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-104">This handler gives the workflow host author an opportunity to provide the appropriate handling, such as custom logging, aborting the workflow, canceling the workflow, or terminating the workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e881-105">다음 예제에서는 예외를 throw하는 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-105">The following example invokes a workflow that throws an exception.</span></span> <span data-ttu-id="0e881-106">이 예외는 워크플로에서 처리되지 않으며 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-106">The exception is unhandled by the workflow and the <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is invoked.</span></span> <span data-ttu-id="0e881-107"><xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs>를 검사하여 예외에 대한 정보를 제공하고 워크플로가 종료됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-107">The <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> are inspected to provide information about the exception, and the workflow is terminated.</span></span>  
  
 [!code-csharp[CFX_WorkflowApplicationExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExceptionSource">
      <MemberSignature Language="C#" Value="public System.Activities.Activity ExceptionSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Activity ExceptionSource" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionSource As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Activity ^ ExceptionSource { System::Activities::Activity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0e881-108">처리되지 않은 예외의 소스인 활동을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e881-108">Gets the activity that is the source of the unhandled exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0e881-109">활동입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e881-109">An activity.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e881-110">활동에서 예외가 throw되었지만 처리되지 않은 경우 워크플로 인스턴스를 종료하는 것이 기본 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-110">If an exception is thrown by an activity and is unhandled, the default behavior is to terminate the workflow instance.</span></span> <span data-ttu-id="0e881-111"><xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 처리기가 있는 경우 이 기본 동작을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-111">If an <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is present, it can override this default behavior.</span></span> <span data-ttu-id="0e881-112">워크플로 호스트 작성자는 이 처리기를 사용하여 사용자 지정 로깅, 워크플로 중단, 워크플로 취소, 워크플로 종료 등의 적절한 처리를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-112">This handler gives the workflow host author an opportunity to provide the appropriate handling, such as custom logging, aborting the workflow, canceling the workflow, or terminating the workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e881-113">다음 예제에서는 예외를 throw하는 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-113">The following example invokes a workflow that throws an exception.</span></span> <span data-ttu-id="0e881-114">이 예외는 워크플로에서 처리되지 않으며 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-114">The exception is unhandled by the workflow and the <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is invoked.</span></span> <span data-ttu-id="0e881-115"><xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs>를 검사하여 예외에 대한 정보를 제공하고 워크플로가 종료됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-115">The <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> are inspected to provide information about the exception, and the workflow is terminated.</span></span>  
  
 [!code-csharp[CFX_WorkflowApplicationExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionSourceInstanceId">
      <MemberSignature Language="C#" Value="public string ExceptionSourceInstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExceptionSourceInstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionSourceInstanceId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExceptionSourceInstanceId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0e881-116">처리되지 않은 예외의 소스인 작업 인스턴스의 고유 식별자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e881-116">Gets the unique identifier of the activity instance that is the source of the unhandled exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0e881-117">처리되지 않은 예외의 소스인 작업 인스턴스의 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e881-117">An identifier of the activity instance that is the source of the unhandled exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e881-118">활동에서 예외가 throw되었지만 처리되지 않은 경우 워크플로 인스턴스를 종료하는 것이 기본 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-118">If an exception is thrown by an activity and is unhandled, the default behavior is to terminate the workflow instance.</span></span> <span data-ttu-id="0e881-119"><xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 처리기가 있는 경우 이 기본 동작을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-119">If an <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is present, it can override this default behavior.</span></span> <span data-ttu-id="0e881-120">워크플로 호스트 작성자는 이 처리기를 사용하여 사용자 지정 로깅, 워크플로 중단, 워크플로 취소, 워크플로 종료 등의 적절한 처리를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-120">This handler gives the workflow host author an opportunity to provide the appropriate handling, such as custom logging, aborting the workflow, canceling the workflow, or terminating the workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e881-121">다음 예제에서는 예외를 throw하는 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-121">The following example invokes a workflow that throws an exception.</span></span> <span data-ttu-id="0e881-122">이 예외는 워크플로에서 처리되지 않으며 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-122">The exception is unhandled by the workflow and the <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is invoked.</span></span> <span data-ttu-id="0e881-123"><xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs>를 검사하여 예외에 대한 정보를 제공하고 워크플로가 종료됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-123">The <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> are inspected to provide information about the exception, and the workflow is terminated.</span></span>  
  
 [!code-csharp[CFX_WorkflowApplicationExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public Exception UnhandledException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception UnhandledException" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnhandledException As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ UnhandledException { Exception ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="0e881-124">워크플로 인스턴스에서 처리되지 않은 <see cref="T:System.Exception" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e881-124">Gets the <see cref="T:System.Exception" /> that was unhandled by the workflow instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="0e881-125">워크플로 인스턴스에서 처리되지 않은 <see cref="T:System.Exception" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0e881-125">The <see cref="T:System.Exception" /> that was unhandled by the workflow instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0e881-126">활동에서 예외가 throw되었지만 처리되지 않은 경우 워크플로 인스턴스를 종료하는 것이 기본 동작입니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-126">If an exception is thrown by an activity and is unhandled, the default behavior is to terminate the workflow instance.</span></span> <span data-ttu-id="0e881-127"><xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 처리기가 있는 경우 이 기본 동작을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-127">If an <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is present, it can override this default behavior.</span></span> <span data-ttu-id="0e881-128">워크플로 호스트 작성자는 이 처리기를 사용하여 사용자 지정 로깅, 워크플로 중단, 워크플로 취소, 워크플로 종료 등의 적절한 처리를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-128">This handler gives the workflow host author an opportunity to provide the appropriate handling, such as custom logging, aborting the workflow, canceling the workflow, or terminating the workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0e881-129">다음 예제에서는 예외를 throw하는 워크플로를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-129">The following example invokes a workflow that throws an exception.</span></span> <span data-ttu-id="0e881-130">이 예외는 워크플로에서 처리되지 않으며 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> 처리기가 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-130">The exception is unhandled by the workflow and the <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is invoked.</span></span> <span data-ttu-id="0e881-131"><xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs>를 검사하여 예외에 대한 정보를 제공하고 워크플로가 종료됩니다.</span><span class="sxs-lookup"><span data-stu-id="0e881-131">The <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> are inspected to provide information about the exception, and the workflow is terminated.</span></span>  
  
 [!code-csharp[CFX_WorkflowApplicationExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>