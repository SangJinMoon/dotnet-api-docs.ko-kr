<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WorkflowApplication.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5aed6b6f994120238c715839c3c767b2a95d2547e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aed6b6f994120238c715839c3c767b2a95d2547e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Provides a host for a single instance of a workflow.</source>
          <target state="translated">워크플로의 단일 인스턴스에 대한 호스트를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>The <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> class provides a host for a single workflow instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 클래스는 단일 워크플로 인스턴스에 대한 호스트를 제공합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>It is a proxy to the actual workflow instance that is managed by the workflow runtime.</source>
          <target state="translated">이는 워크플로 런타임에서 관리하는 실제 워크플로 인스턴스에 대한 프록시입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>Users of <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> can instruct the workflow runtime to perform actions on a workflow instance by calling the appropriate methods on a <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 사용자는 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 개체의 적합한 메서드를 호출하여 워크플로 런타임에서 워크플로 인스턴스에 대한 동작을 수행하도록 지시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>If a requested action is not valid, an exception is thrown.</source>
          <target state="translated">요청된 동작이 올바르지 않으면 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>Using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> you can perform the following tasks:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 다음 작업을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>Create a new workflow instance, or load a workflow instance from an instance store.</source>
          <target state="translated">새 워크플로 인스턴스를 만들거나 인스턴스 저장소에서 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>Provide extensions to be used by activities within a workflow instance.</source>
          <target state="translated">워크플로 인스턴스 내의 작업에서 사용할 확장을 제공합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>Control the execution of a workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 실행을 제어합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>Resume a bookmark created by an activity within a workflow instance.</source>
          <target state="translated">워크플로 인스턴스 내의 작업에서 만든 책갈피를 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>Persist or unload a workflow instance.</source>
          <target state="translated">워크플로 인스턴스를 지속하거나 언로드합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>Be notified of workflow instance lifecycle events.</source>
          <target state="translated">워크플로 인스턴스 수명 주기 이벤트 알림을 받습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>When the workflow is completed, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 완료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
          <source>The workflow definition.</source>
          <target state="translated">워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> class with the specified workflow definition.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using using a workflow definition consisting of a single <ph id="ph2">`DiceRoll`</ph> activity.</source>
          <target state="translated">단일 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 활동으로 구성된 워크플로 정의를 사용하여 <ph id="ph2">`DiceRoll`</ph> 인스턴스가 생성됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
          <source>The <ph id="ph1">`DiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated"><ph id="ph1">`DiceRoll`</ph> 활동에는 주사위 굴리기 작업의 결과를 나타내는 두 개의 출력 인수가 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)">
          <source>When the workflow completes, the outputs are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler, and the following output is displayed to the console.</source>
          <target state="translated">워크플로가 완료되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 처리기에서 출력이 검색되고 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)">
          <source>The workflow definition.</source>
          <target state="translated">워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)">
          <source>The definition identity.</source>
          <target state="translated">정의 ID입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> class with the specified workflow definition and definition identity.</source>
          <target state="translated">지정된 워크플로 정의 및 정의 ID를 사용하여 <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The workflow definition.</source>
          <target state="translated">워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The values for arguments defined on the root activity of the workflow definition, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로 정의의 루트 활동에 대해 정의된 인수 값입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> class that uses the specified workflow definition and argument values.</source>
          <target state="translated">지정한 워크플로 정의 및 인수 값을 사용하는 <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using using a workflow definition consisting of a single <ph id="ph2">`Divide`</ph> activity that takes two input arguments, and a dictionary of input arguments containing the two values to be passed, keyed by argument name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스는 두 개의 입력 인수를 사용하는 단일 <ph id="ph2">`Divide`</ph> 활동과 인수 이름으로 키가 지정된 전달할 두 값을 포함하는 입력 인수 사전으로 구성된 워크플로 정의를 사용하여 생성됩니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">원하는 워크플로 수명 주기 이벤트가 처리되고 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the workflow is completed, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 완료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.WorkflowIdentity)">
          <source>The workflow definition.</source>
          <target state="translated">워크플로 정의입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.WorkflowIdentity)">
          <source>The definition identity.</source>
          <target state="translated">정의 ID입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.WorkflowIdentity)">
          <source>The values for arguments defined on the root activity of the workflow definition, keyed by argument name.</source>
          <target state="translated">인수 이름으로 키가 지정된 워크플로 정의의 루트 활동에 대해 정의된 인수 값입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.WorkflowIdentity)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> class that uses the specified workflow definition and argument values, and definition identity.</source>
          <target state="translated">지정한 워크플로 정의, 인수 값 및 정의 ID을 사용하는 <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowApplication" /&gt;</ph> 클래스의 새 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Notifies the workflow runtime that this workflow instance should abort.</source>
          <target state="translated">이 워크플로 인스턴스가 중단되어야 함을 워크플로 런타임에 알립니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>When a workflow hosted by a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> is aborted, the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> handler is invoked and the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler is not invoked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>이 호스팅하는 워크플로가 중단되면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> 처리기가 호출되고 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 처리기가 호출되지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Abort">
          <source>Notifies the workflow runtime that this workflow instance should abort.</source>
          <target state="translated">이 워크플로 인스턴스가 중단되어야 함을 워크플로 런타임에 알립니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort">
          <source>When a workflow hosted by a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> is aborted, the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> handler is invoked and the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler is not invoked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>이 호스팅하는 워크플로가 중단되면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> 처리기가 호출되고 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 처리기가 호출되지 않습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort">
          <source>After the workflow is started, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Abort%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 후에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Abort%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort">
          <source>When the workflow is aborted, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 중단되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Abort(System.String)">
          <source>The reason for the request to abort.</source>
          <target state="translated">요청 중단의 원인입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Abort(System.String)">
          <source>Notifies the workflow runtime that this workflow instance should abort for the specified reason.</source>
          <target state="translated">지정한 원인에 대해 이 워크플로 인스턴스를 중단해야 함을 워크플로 런타임에 알립니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort(System.String)">
          <source>When a workflow hosted by a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> is aborted, the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> handler is invoked and the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler is not invoked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>이 호스팅하는 워크플로가 중단되면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> 처리기가 호출되고 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 처리기가 호출되지 않습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort(System.String)">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort(System.String)">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort(System.String)">
          <source>After the workflow is started, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Abort%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 후에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Abort%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Abort(System.String)">
          <source>When the workflow is aborted, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 중단되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowApplication.Aborted">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> that is invoked when the workflow instance is aborted.</source>
          <target state="translated">워크플로 인스턴스가 중단될 때 호출되는 <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph>을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Aborted">
          <source>The action that is invoked when the workflow instance is aborted.</source>
          <target state="translated">워크플로 인스턴스가 중단될 때 호출되는 동작입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Aborted">
          <source>When a workflow hosted by a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> is aborted, the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> handler is invoked and the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler is not invoked.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>이 호스팅하는 워크플로가 중단되면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> 처리기가 호출되고 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 처리기가 호출되지 않습니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Aborted">
          <source>The following code example inspects the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationAbortedEventArgs&gt;</ph> passed into the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> handler of a <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance and displays information about why workflow was aborted.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationAbortedEventArgs&gt;</ph> 인스턴스의 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Aborted%2A&gt;</ph> 처리기로 전달된 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>를 검사하고 워크플로가 중단된 이유에 대한 정보를 표시합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.AddInitialInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
          <source>The metadata values to be included with the first persistence.</source>
          <target state="translated">첫 번째 지속성에 포함할 메타데이터 값입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.AddInitialInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})">
          <source>Specifies instance metadata values that are included with the first persistence of a new instance.</source>
          <target state="translated">새 인스턴스의 첫 번째 지속성에 포함된 인스턴스 메타데이터 값을 지정합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Cancels a workflow asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 취소합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source>The method to be called when the cancel operation has completed.</source>
          <target state="translated">취소 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source>Cancels a workflow instance asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> and user-provided state.</source>
          <target state="translated">지정한 <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 취소합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous cancel operation.</source>
          <target state="translated">비동기 취소 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source>To determine whether the cancel operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>.</source>
          <target state="translated">취소 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>을 호출합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph> can be called from inside or outside of the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph> is called before the cancel operation completes, it blocks until the cancel operation completes.</source>
          <target state="translated">취소 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>을 호출하면 취소 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source>By default, the cancel operation must complete in 30 seconds or a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>.</source>
          <target state="translated">기본적으로 취소 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source>This method cancels a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 취소합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the cancel operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 취소 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the cancel operation has completed.</source>
          <target state="translated">취소 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Cancels a workflow instance asynchronously using the specified time-out interval, <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>, and user-provided state.</source>
          <target state="translated">지정한 시간 제한 간격, <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 취소합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous cancel operation.</source>
          <target state="translated">비동기 취소 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To determine whether the cancel operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>.</source>
          <target state="translated">취소 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>을 호출합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph> can be called from inside or outside of the method specified in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>은 <ph id="ph2">`callback`</ph> 매개 변수에 지정된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph> is called before the cancel operation completes, it blocks until the cancel operation completes.</source>
          <target state="translated">취소 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>을 호출하면 취소 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the cancel operation does not complete in the interval specified by the <ph id="ph1">`timeOut`</ph> parameter, a <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>.</source>
          <target state="translated">취소 작업이 <ph id="ph1">`timeOut`</ph> 매개 변수에 의해 지정한 간격 내에 완료되지 않으면 <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndCancel%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method cancels a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 취소합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Creates a default instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 기본 인스턴스 소유자를 비동기적으로 만듭니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
          <source>The definition identity.</source>
          <target state="translated">정의 ID입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
          <source>The identity filter.</source>
          <target state="translated">ID 필터입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
          <source>Creates a default instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance store, definition identity, identity filter, callback and state.</source>
          <target state="translated">지정된 인스턴스 저장소, 정의 ID, ID 필터, 콜백 및 상태를 사용하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 기본 인스턴스 소유자를 비동기적으로 만듭니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The definition identity.</source>
          <target state="translated">정의 ID입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The identity filter.</source>
          <target state="translated">ID 필터입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the begin load operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 시작 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Creates a default instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance store, definition identity, identity filter, timeout interval, callback and state.</source>
          <target state="translated">지정된 인스턴스 저장소, 정의 ID, ID 필터, 제한 시간 간격, 콜백 및 상태를 사용하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 기본 인스턴스 소유자를 비동기적으로 만듭니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Deletes a default instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 기본 인스턴스 소유자를 비동기적으로 삭제합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>Deletes a default instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance store, callback, and state.</source>
          <target state="translated">지정된 인스턴스 저장소, 콜백 및 상태를 사용하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 기본 인스턴스 소유자를 비동기적으로 삭제합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the begin load operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 시작 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Deletes a default instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance store, timeout interval, callback, and state.</source>
          <target state="translated">지정된 인스턴스 저장소, 제한 시간 간격, 콜백 및 상태를 사용하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 기본 인스턴스 소유자를 비동기적으로 삭제합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Retrieves an instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 인스턴스 소유자를 비동기적으로 검색합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>The instance identifier.</source>
          <target state="translated">인스턴스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>Retrieves an instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance identifier, instance store, callback, and state.</source>
          <target state="translated">지정한 인스턴스 식별자, 인스턴스 저장소, 콜백 및 상태를 통해 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 인스턴스 소유자를 비동기적으로 검색합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The instance identifier.</source>
          <target state="translated">인스턴스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the begin load operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 시작 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Retrieves an instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance identifier, instance store, timeout interval, callback, and state.</source>
          <target state="translated">지정한 인스턴스 식별자, 인스턴스 저장소, 시간 제한 간격, 콜백 및 상태를 통해 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 인스턴스 소유자를 비동기적으로 검색합니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Retrieves a runnable instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 실행할 수 있는 인스턴스 소유자를 비동기적으로 검색합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>Retrieves a runnable instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance store, callback, and state.</source>
          <target state="translated">지정한 인스턴스 저장소, 콜백 및 상태를 통해 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 실행 가능한 인스턴스 소유자를 비동기적으로 검색합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the begin load operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 시작 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Retrieves a runnable instance owner asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance store, timeout interval, callback, and state.</source>
          <target state="translated">지정한 인스턴스 저장소, 시간 제한 간격, 콜백 및 상태를 통해 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 실행 가능한 인스턴스 소유자를 비동기적으로 검색합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Loads a workflow asynchronously from an instance store using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 인스턴스 저장소에서 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)">
          <source>The instance.</source>
          <target state="translated">인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)">
          <source>Loads a workflow asynchronously from an instance store using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance, callback and state.</source>
          <target state="translated">지정된 인스턴스, 콜백 및 상태를 사용하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 인스턴스 저장소에서 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)">
          <source>A globally unique 128-bit identifier for the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 128비트 GUID(Globally Unique Identifier)입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)">
          <source>Loads a workflow asynchronously from an instance store using the specified instance identifier, callback method, and user-provided state.</source>
          <target state="translated">지정한 인스턴스 식별자, 콜백 메서드 및 사용자가 제공한 상태를 사용하여 인스턴스 저장소에서 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)">
          <source>The status of an asynchronous operation.</source>
          <target state="translated">비동기 작업의 상태입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)">
          <source>The instance.</source>
          <target state="translated">인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)">
          <source>The update map.</source>
          <target state="translated">업데이트 맵입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)">
          <source>Loads a workflow asynchronously from an instance store using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance, update map, callback and state.</source>
          <target state="translated">지정한 인스턴스, 업데이트 맵, 콜백 및 상태를 통해 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 인스턴스 저장소에서 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The instance.</source>
          <target state="translated">인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the begin load operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 시작 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Loads a workflow asynchronously from an instance store using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance, timeout interval, callback and state.</source>
          <target state="translated">지정된 인스턴스, 제한 시간 간격, 콜백 및 상태를 사용하는 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 인스턴스 저장소에서 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A globally unique 128-bit identifier for the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 128비트 GUID(Globally Unique Identifier)입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the begin load operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 시작 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Loads a workflow asynchronously from an instance store using the specified instance identifier, timeout period, callback method, and user-provided state.</source>
          <target state="translated">지정한 인스턴스 식별자, 시간 제한 기간, 콜백 메서드 및 사용자가 제공한 상태를 사용하여 인스턴스 저장소에서 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The status of an asynchronous operation.</source>
          <target state="translated">비동기 작업의 상태입니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The instance.</source>
          <target state="translated">인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The update map.</source>
          <target state="translated">업데이트 맵입니다.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the begin load operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 시작 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the begin load operation has completed.</source>
          <target state="translated">로드 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Loads a workflow asynchronously from an instance store using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern with specified instance, update map, timeout interval, callback and state.</source>
          <target state="translated">지정한 인스턴스, 업데이트 맵, 시간 제한 간격, 콜백 및 상태를 통해 <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 인스턴스 저장소에서 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Initiates the asynchronous process of loading a runnable workflow instance from the <ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>에서 실행 가능한 워크플로 인스턴스를 로드하는 비동기 프로세스를 시작합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>A runnable instance is an instance for which a timer or instance lock has expired.</source>
          <target state="translated">실행 가능한 인스턴스는 타이머 또는 인스턴스 잠금이 만료된 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is complete.</source>
          <target state="translated">작업이 완료될 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source>An optional application-specific object containing information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source>Initiates an operation to load a runnable workflow instance from the <ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>에서 실행 가능한 워크플로 인스턴스를 로드하기 위한 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source>A runnable instance is an instance for which a timer or instance lock has expired.</source>
          <target state="translated">실행 가능한 인스턴스는 타이머 또는 인스턴스 잠금이 만료된 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source>To determine if the load operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>.</source>
          <target state="translated">로드 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph> can be called from inside or outside of the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph> is called before the resume operation completes, it blocks until the resume operation completes.</source>
          <target state="translated">다시 시작 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>를 호출하면 다시 시작 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source>By default, the resume operation must complete in 30 seconds or else a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>.</source>
          <target state="translated">기본적으로 다시 시작 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source>This method loads a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the load operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the operation is complete.</source>
          <target state="translated">작업이 완료될 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object containing information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Initiates an operation to load a runnable workflow instance from the <ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph> using the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 <ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>에서 실행 가능한 워크플로 인스턴스를 로드하기 위한 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous operation</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A runnable instance is an instance for which a timer or instance lock has expired.</source>
          <target state="translated">실행 가능한 인스턴스는 타이머 또는 인스턴스 잠금이 만료된 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To determine if the load operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>.</source>
          <target state="translated">로드 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph> can be called from inside or outside of the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph> is called before the resume operation completes, it blocks until the resume operation completes.</source>
          <target state="translated">다시 시작 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>를 호출하면 다시 시작 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the load operation does not complete within the specified time-out interval a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>.</source>
          <target state="translated">로드 작업이 지정한 시간 제한 간격 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method loads a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Persists a workflow instance to an instance store asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로 인스턴스를 인스턴스 저장소에 비동기적으로 지속합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>The method to be called when the persist operation has completed.</source>
          <target state="translated">지속 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>Persists a workflow instance to an instance store asynchronously using the specified callback method and user-provided state.</source>
          <target state="translated">지정한 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 인스턴스 저장소에 비동기적으로 지속합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous persist operation.</source>
          <target state="translated">비동기 지속 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>To determine whether the persist operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>.</source>
          <target state="translated">지속 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph> can be called from inside or outside of the method referenced in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 매개 변수에 참조된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph> is called before the persist operation completes, it blocks until the persist operation completes.</source>
          <target state="translated">지속 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>를 호출하면 지속 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>If the persist operation does not complete within 30 seconds, a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>.</source>
          <target state="translated">지속 작업이 30초 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source>This method persists a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 지속합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the persist operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 지속 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the persist operation has completed.</source>
          <target state="translated">지속 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Persists a workflow instance to an instance store asynchronously using the specified time-out interval, callback method, and user-provided state.</source>
          <target state="translated">지정한 시간 제한 간격, 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 인스턴스 저장소에 비동기적으로 지속합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous persist operation.</source>
          <target state="translated">비동기 지속 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To determine whether the persist operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>.</source>
          <target state="translated">지속 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph> can be called from inside or outside of the method referenced in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 매개 변수에 참조된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph> is called before the persist operation completes, it blocks until the persist operation completes.</source>
          <target state="translated">지속 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>를 호출하면 지속 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the persist operation does not complete within the specified time-out interval, a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>.</source>
          <target state="translated">지속 작업이 지정한 시간 제한 간격 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndPersist%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method persists a workflow instance asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로 인스턴스를 비동기적으로 지속합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Initiates an asynchronous operation to resume a bookmark.</source>
          <target state="translated">책갈피를 다시 시작하기 위한 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>The bookmark to resume.</source>
          <target state="translated">다시 시작할 책갈피입니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>An object passed as a parameter to the method that is invoked when the bookmark resumes.</source>
          <target state="translated">책갈피를 다시 시작할 때 호출할 메서드에 대한 매개 변수로 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>The method to be called when the resume operation has completed.</source>
          <target state="translated">다시 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>Initiates an operation to resume a bookmark using the specified value, callback method, and state.</source>
          <target state="translated">지정한 값, 콜백 메서드 및 상태를 사용하여 책갈피를 다시 시작하기 위한 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous bookmark resume operation.</source>
          <target state="translated">비동기 책갈피 다시 시작 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>To determine if the resume operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>.</source>
          <target state="translated">다시 시작 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph> can be called from inside or outside of the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph> is called before the resume operation completes, it blocks until the resume operation completes.</source>
          <target state="translated">다시 시작 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>를 호출하면 다시 시작 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>By default, the resume operation must complete in 30 seconds or else a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>.</source>
          <target state="translated">기본적으로 다시 시작 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source>This method resumes a bookmark asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 책갈피를 비동기적으로 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
          <source>The name of the bookmark to be resumed.</source>
          <target state="translated">다시 시작할 책갈피의 이름입니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
          <source>An object passed as a parameter to the method that is invoked when the bookmark resumes.</source>
          <target state="translated">책갈피를 다시 시작할 때 호출할 메서드에 대한 매개 변수로 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
          <source>The method that is called when the asynchronous operation completes.</source>
          <target state="translated">비동기 작업이 완료될 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
          <source>The state of execution of a workflow that was preserved by the calling thread before an asynchronous operation began.</source>
          <target state="translated">비동기 작업이 시작되기 전에 호출 스레드에 의해 유지되었던 워크플로 실행 상태입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
          <source>Initiates an asynchronous operation to resume the bookmark with the specified name, using the specified value, callback method, and state.</source>
          <target state="translated">지정한 값, 콜백 메서드 및 상태를 사용하여 지정한 이름의 책갈피를 다시 시작하기 위한 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
          <source>The bookmark to be resumed is previously created by an activity within the workflow instance.</source>
          <target state="translated">다시 시작할 책갈피는 워크플로 인스턴스 내의 작업에서 이전에 만든 것입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
          <source>The result of the bookmark resumption operation.</source>
          <target state="translated">책갈피 다시 시작 작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
          <source>The bookmark result indicates whether the resumption operation succeeded or failed.</source>
          <target state="translated">책갈피 결과는 다시 시작 작업의 성공 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The bookmark to resume.</source>
          <target state="translated">다시 시작할 책갈피입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object passed as a parameter to the method that is invoked when the bookmark resumes.</source>
          <target state="translated">책갈피를 다시 시작할 때 호출할 메서드에 대한 매개 변수로 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the resume operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 다시 시작 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the resume operation has completed.</source>
          <target state="translated">다시 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Initiates an operation to resume a bookmark using the specified value, time-out interval, callback method, and state.</source>
          <target state="translated">지정한 값, 시간 제한 간격, 콜백 메서드 및 상태를 사용하여 책갈피를 다시 시작하기 위한 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous bookmark resume operation.</source>
          <target state="translated">비동기 책갈피 다시 시작 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To determine if the resume operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>.</source>
          <target state="translated">다시 시작 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph> can be called from inside or outside of the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph> is called before the resume operation completes, it blocks until the resume operation completes.</source>
          <target state="translated">다시 시작 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>를 호출하면 다시 시작 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the resume operation does not complete within the specified time-out interval a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>.</source>
          <target state="translated">다시 시작 작업이 지정한 시간 제한 간격 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method resumes a bookmark asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 책갈피를 비동기적으로 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The name of the bookmark to be resumed.</source>
          <target state="translated">다시 시작할 책갈피의 이름입니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An object passed as a parameter to the method that is invoked when the bookmark resumes.</source>
          <target state="translated">책갈피를 다시 시작할 때 호출할 메서드에 대한 매개 변수로 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The time interval during which the bookmark must be resumed.</source>
          <target state="translated">책갈피가 다시 시작되어야 하는 시간 간격입니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method that is called when the asynchronous operation completes.</source>
          <target state="translated">비동기 작업이 완료될 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The state of execution of a workflow that was saved by the calling thread before an asynchronous operation began.</source>
          <target state="translated">비동기 작업이 시작되기 전에 호출 스레드에 의해 저장되었던 워크플로 실행 상태입니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Initiates an asynchronous operation to resume the bookmark with the specified name, using the specified value, time-out interval, callback method, and state.</source>
          <target state="translated">지정한 값, 시간 제한 간격, 콜백 메서드 및 상태를 사용하여 지정한 이름의 책갈피를 다시 시작하기 위한 비동기 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The bookmark to be resumed is previously created by an activity within the workflow instance.</source>
          <target state="translated">다시 시작할 책갈피는 워크플로 인스턴스 내의 작업에서 이전에 만든 것입니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The result of the bookmark resumption operation.</source>
          <target state="translated">책갈피 다시 시작 작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The bookmark result indicates whether the resumption operation succeeded or failed.</source>
          <target state="translated">책갈피 결과는 다시 시작 작업의 성공 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Starts or resumes a workflow instance asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로 인스턴스를 비동기적으로 시작하거나 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source>The method to be called when the resume operation has completed.</source>
          <target state="translated">다시 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source>Starts or resumes a workflow instance asynchronously using the specified callback method and user-provided state.</source>
          <target state="translated">지정한 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 시작하거나 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous run operation.</source>
          <target state="translated">비동기 실행 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source>To determine whether the run operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>.</source>
          <target state="translated">실행 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>을 호출합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph> can be called from inside or outside of the method referenced in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 매개 변수에 참조된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph> is called before the resume operation completes, it blocks until the resume operation completes.</source>
          <target state="translated">다시 시작 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>를 호출하면 다시 시작 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source>By default, the resume operation must complete in 30 seconds or a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>.</source>
          <target state="translated">기본적으로 다시 시작 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source>This method starts or resumes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 시작하거나 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the resume operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 다시 시작 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the resume operation has completed.</source>
          <target state="translated">다시 시작 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Starts or resumes a workflow instance asynchronously using the specified time-out interval, callback method, and user-provided state.</source>
          <target state="translated">지정한 시간 제한 간격, 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 시작하거나 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous run operation.</source>
          <target state="translated">비동기 실행 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To determine whether the run operation was successful, call <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>.</source>
          <target state="translated">실행 작업이 성공했는지 확인하려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>을 호출합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph> can be called from inside or outside of the method reference in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 매개 변수에 참조된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph> is called before the resume operation completes, it blocks until the resume operation completes.</source>
          <target state="translated">다시 시작 작업이 완료되기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>를 호출하면 다시 시작 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the resume operation does not complete within the specified time-out interval a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>.</source>
          <target state="translated">다시 시작 작업이 지정한 시간 제한 간격 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndRun%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method starts or resumes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 시작하거나 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Terminates a workflow instance asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로 인스턴스를 비동기적으로 종료합니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>The reason the workflow instance is terminated.</source>
          <target state="translated">워크플로 인스턴스가 종료된 원인입니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>The method to be called when the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>Terminates a workflow instance asynchronously using the specified exception, callback method, and user-provided state.</source>
          <target state="translated">지정한 예외, 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 종료합니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>A reference to the current <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>This method schedules the termination of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 종료를 예약합니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>To be notified when the termination has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handle.</source>
          <target state="translated">종료가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 핸들을 사용합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>To determine whether the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation was successful, call <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 성공했는지 확인하려면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> can be called from inside or outside of the method referenced in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 매개 변수에 참조된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> is called before the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation completes, it blocks until the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> 작업이 완료되기 전에 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph>를 호출하면 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation must complete in 30 seconds or a <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source>This method terminates a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 종료합니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>The reason for terminating the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 종료 원인입니다.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>The method to be called when the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>Terminates a workflow instance asynchronously using the specified error message, callback method, and user-provided state.</source>
          <target state="translated">지정한 오류 메시지, 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 종료합니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>A reference to the current <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>This method schedules the termination of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 종료를 예약합니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>To be notified when the termination has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handle.</source>
          <target state="translated">종료가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 핸들을 사용합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>To determine whether the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation was successful, call <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 성공했는지 확인하려면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> can be called from inside or outside of the method reference in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 매개 변수에 참조된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> is called before the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation completes, it blocks until the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> 작업이 완료되기 전에 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph>를 호출하면 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation must complete in 30 seconds or a <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source>This method terminates a workflow instance asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로 인스턴스를 비동기적으로 종료합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The reason for terminating the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 종료 원인입니다.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation must complete before the operation is canceled and a <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph>이 throw되기 전에 <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Terminates a workflow instance asynchronously using the specified exception, time-out interval, callback method, and user-provided state.</source>
          <target state="translated">지정한 예외, 시간 제한 간격, 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 종료합니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the current <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method schedules the termination of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 종료를 예약합니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To be notified when the termination has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handle.</source>
          <target state="translated">종료가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 핸들을 사용합니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To determine whether the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation was successful, call <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 성공했는지 확인하려면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> can be called from inside or outside of the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> is called before the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation completes, it blocks until the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> 작업이 완료되기 전에 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph>를 호출하면 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation does not complete within the specified time-out interval a <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 지정한 시간 제한 간격 내에 완료되지 않으면 <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This or any other exceptions that occur during the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> process is thrown from <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>.</source>
          <target state="translated">이 예외 또는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 프로세스 동안 발생하는 다른 모든 예외가 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>에서 throw됩니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method terminates a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 종료합니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The reason for terminating the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 종료 원인입니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation must complete before the operation is canceled and a <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph>이 throw되기 전에 <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Terminates a workflow instance asynchronously using the specified error message, time-out interval, callback method, and user-provided state.</source>
          <target state="translated">지정한 오류 메시지, 시간 제한 간격, 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 종료합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation.</source>
          <target state="translated">비동기 <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method schedules the termination of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 종료를 예약합니다.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To be notified when the termination has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handle.</source>
          <target state="translated">종료가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 핸들을 사용합니다.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To determine whether the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation was successful, call <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 성공했는지 확인하려면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> can be called from inside or outside of the method reference in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 매개 변수에 참조된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> is called before the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation completes, it blocks until the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph> 작업이 완료되기 전에 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph>를 호출하면 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation does not complete within the specified time-out interval a <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업이 지정한 시간 제한 간격 내에 완료되지 않으면 <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndTerminate%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method terminates a workflow instance asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로 인스턴스를 비동기적으로 종료합니다.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Persists and disposes a workflow instance asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로 인스턴스를 비동기적으로 지속하고 삭제합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>The method to be called when the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /&gt;</ph> operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /&gt;</ph> 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>Persists and disposes a workflow instance asynchronously using the specified callback method and user-provided state.</source>
          <target state="translated">지정한 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 지속하고 삭제합니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /&gt;</ph> operation.</source>
          <target state="translated">비동기 <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /&gt;</ph> 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>To determine whether the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation was successful, call <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> 작업이 성공했는지 확인하려면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph> can be called from inside or outside of the method reference in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 매개 변수에 참조된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph> is called before the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation completes, it blocks until the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph> 작업이 완료되기 전에 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph>를 호출하면 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation must complete in 30 seconds or a <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source>This method persists and disposes a workflow instance asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로 인스턴스를 비동기적으로 지속하고 삭제합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph> operation must complete before the operation is canceled and a <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /&gt;</ph>이 throw되기 전에 <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /&gt;</ph> operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /&gt;</ph> 작업이 완료되었을 때 호출될 메서드입니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 정보를 포함하는 응용 프로그램별 선택적 개체입니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Persists and disposes a workflow instance asynchronously using the specified time-out interval, callback method, and user-provided state.</source>
          <target state="translated">지정한 시간 제한 간격, 콜백 메서드 및 사용자가 제공한 상태를 사용하여 워크플로 인스턴스를 비동기적으로 지속하고 삭제합니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /&gt;</ph> operation.</source>
          <target state="translated">비동기 <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /&gt;</ph> 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To determine whether the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation was successful, call <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> 작업이 성공했는지 확인하려면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph> can be called from inside or outside of the method reference in the <ph id="ph2">`callback`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>는 <ph id="ph2">`callback`</ph> 매개 변수에 참조된 메서드 내부 또는 외부에서 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph> is called before the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation completes, it blocks until the <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation completes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph> 작업이 완료되기 전에 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph>를 호출하면 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation does not complete within the specified time-out interval a <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph> is thrown from <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> 작업이 지정한 시간 제한 간격 내에 완료되지 않으면 <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>에서 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication.EndUnload%2A&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method persists and unloads a workflow instance asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로 인스턴스를 비동기적으로 지속하고 언로드합니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Cancels the workflow instance.</source>
          <target state="translated">워크플로 인스턴스를 취소합니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>This method schedules the cancellation of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 취소를 예약합니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>To be notified when the cancellation has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handle.</source>
          <target state="translated">취소가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 핸들을 사용합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>By default, the cancel operation must complete in 30 seconds or a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">기본적으로 취소 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Cancel">
          <source>Cancels the workflow instance.</source>
          <target state="translated">워크플로 인스턴스를 취소합니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel">
          <source>This method schedules the cancellation of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 취소를 예약합니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel">
          <source>To be notified when the cancellation has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler.</source>
          <target state="translated">취소가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 처리기를 사용합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel">
          <source>By default, the cancel operation must complete in 30 seconds or a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">기본적으로 취소 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel">
          <source>After the workflow is started, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Cancel%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 후에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Cancel%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel">
          <source>When the workflow is cancelled, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 취소되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
          <source>The interval in which the cancel operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 취소 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
          <source>Cancels the workflow instance using the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 워크플로 인스턴스를 취소합니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
          <source>This method schedules the cancellation of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 취소를 예약합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
          <source>To be notified when the cancellation has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler.</source>
          <target state="translated">취소가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 처리기를 사용합니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
          <source>After the workflow is started, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Cancel%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 후에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Cancel%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)">
          <source>When the workflow is cancelled, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 취소되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowApplication.Completed">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> that is invoked when the workflow instance completes.</source>
          <target state="translated">워크플로 인스턴스가 완료될 때 호출되는 <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph>을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Completed">
          <source>The action that is invoked when the workflow instance is complete.</source>
          <target state="translated">워크플로 인스턴스가 완료될 때 호출되는 동작입니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Completed">
          <source>The following code example inspects the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationCompletedEventArgs&gt;</ph> passed into the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handler of a <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance and displays information about how the workflow completed.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationCompletedEventArgs&gt;</ph> 인스턴스의 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 처리기로 전달된 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>를 검사하고 워크플로가 완료된 방식에 대한 정보를 표시합니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Creates a default instance owner for the workflow.</source>
          <target state="translated">워크플로의 기본 인스턴스 소유자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)">
          <source>The definition identity of the workflow.</source>
          <target state="translated">워크플로의 정의 ID입니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)">
          <source>The identity filter.</source>
          <target state="translated">ID 필터입니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)">
          <source>Creates a default instance owner for the workflow using specified instance store, definition identity, and identity filter.</source>
          <target state="translated">지정된 인스턴스 저장소, 정의 ID 및 ID 필터를 사용하여 워크플로의 기본 인스턴스 소유자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)">
          <source>The definition identity of the workflow.</source>
          <target state="translated">워크플로의 정의 ID입니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)">
          <source>The identity filter.</source>
          <target state="translated">ID 필터입니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)">
          <source>The interval in which the begin load operation must complete before the operation is canceled.</source>
          <target state="translated">작업이 취소되기 전에 시작 로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)">
          <source>Creates a default instance owner for the workflow using specified instance store, definition identity, and identity filter and timeout interval.</source>
          <target state="translated">지정된 인스턴스 저장소, 정의 ID, ID 필터 및 제한 시간 간격을 사용하여 워크플로의 기본 인스턴스 소유자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Deletes a default instance owner for the workflow.</source>
          <target state="translated">워크플로의 기본 인스턴스 소유자를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore)">
          <source>Deletes a default instance owner for the workflow with specified instance store.</source>
          <target state="translated">지정된 인스턴스 저장소가 있는 워크플로에 대한 기본 인스턴스 소유자를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>The interval in which the begin load operation must complete before the operation is canceled.</source>
          <target state="translated">작업이 취소되기 전에 시작 로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>Deletes a default instance owner for the workflow with specified instance store and timeout interval..</source>
          <target state="translated">지정된 인스턴스 저장소 및 제한 시간 간격이 있는 워크플로에 대한 기본 인스턴스 소유자를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
          <source>The asynchronous cancel operation.</source>
          <target state="translated">비동기 취소 작업입니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
          <source>Waits for the pending asynchronous cancel operation to complete.</source>
          <target state="translated">보류 중인 비동기 취소 작업이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
          <source>This method determines whether a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginCancel%2A&gt;</ph> operation was successful.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginCancel%2A&gt;</ph> 작업의 성공 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
          <source>If called before the cancel operation completes, it blocks until the cancel operation is complete.</source>
          <target state="translated">취소 작업이 완료되기 전에 호출하면 취소 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
          <source>This method completes the asynchronous cancel operation using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 비동기 취소 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndCreateDefaultInstanceOwner(System.IAsyncResult)">
          <source>The asynchronous result.</source>
          <target state="translated">비동기 결과입니다.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndCreateDefaultInstanceOwner(System.IAsyncResult)">
          <source>Waits for the creation of default instance owner to complete.</source>
          <target state="translated">기본 인스턴스 소유자 만들기가 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndDeleteDefaultInstanceOwner(System.IAsyncResult)">
          <source>The asynchronous result.</source>
          <target state="translated">비동기 결과입니다.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndDeleteDefaultInstanceOwner(System.IAsyncResult)">
          <source>Waits for the deletion of default instance owner to complete.</source>
          <target state="translated">기본 인스턴스 소유자 삭제가 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndGetInstance(System.IAsyncResult)">
          <source>The asynchronous result.</source>
          <target state="translated">비동기 결과입니다.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndGetInstance(System.IAsyncResult)">
          <source>Waits for the instance retrieval to complete.</source>
          <target state="translated">인스턴스 검색이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndGetInstance(System.IAsyncResult)">
          <source>The result of the operation.</source>
          <target state="translated">작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndGetRunnableInstance(System.IAsyncResult)">
          <source>The asynchronous result.</source>
          <target state="translated">비동기 결과입니다.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndGetRunnableInstance(System.IAsyncResult)">
          <source>Waits for the asynchronous retrieval of runnable instance operation to complete.</source>
          <target state="translated">비동기 실행 가능한 인스턴스 검색 작업이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndGetRunnableInstance(System.IAsyncResult)">
          <source>The result of the operation.</source>
          <target state="translated">작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)">
          <source>The asynchronous load operation.</source>
          <target state="translated">비동기 로드 작업입니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)">
          <source>Waits for the pending asynchronous load operation to complete.</source>
          <target state="translated">보류 중인 비동기 로드 작업이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)">
          <source>If this method is called before the loading operation completes, it blocks until the loading operation is complete.</source>
          <target state="translated">로드 작업이 완료되기 전에 이 메서드를 호출하면 로드 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)">
          <source>This method completes the asynchronous load operation using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 비동기 로드 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
          <source>A reference to the asynchronous load operation.</source>
          <target state="translated">비동기 로드 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
          <source>Waits for the asynchronous load runnable instance operation to complete.</source>
          <target state="translated">비동기 실행 가능한 인스턴스 로드 작업이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
          <source>This method determines whether a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginLoadRunnableInstance%2A&gt;</ph> operation was successful.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginLoadRunnableInstance%2A&gt;</ph> 작업의 성공 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
          <source>If called before the load operation completes, it blocks until the operation is complete.</source>
          <target state="translated">로드 작업이 완료되기 전에 호출하면 해당 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
          <source>This method loads workflows asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 워크플로를 비동기적으로 로드합니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
          <source>The asynchronous persist operation.</source>
          <target state="translated">비동기 지속 작업입니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
          <source>Waits for the pending asynchronous persist operation to complete.</source>
          <target state="translated">보류 중인 비동기 지속 작업이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
          <source>This method determines whether a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginPersist%2A&gt;</ph> operation was successful.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginPersist%2A&gt;</ph> 작업의 성공 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
          <source>If called before the persist operation completes, it blocks until the persist operation is complete.</source>
          <target state="translated">지속 작업이 완료되기 전에 호출하면 지속 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
          <source>This method completes the asynchronous persist operation using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 비동기 지속 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
          <source>A reference to the asynchronous bookmark resume operation.</source>
          <target state="translated">비동기 책갈피 다시 시작 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
          <source>Waits for a bookmark resume operation to complete.</source>
          <target state="translated">책갈피 다시 시작 작업이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
          <source>One of the enumeration values that indicates the results of a bookmark resumption operation.</source>
          <target state="translated">책갈피 다시 시작 작업의 결과를 나타내는 열거형 값 중 하나입니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
          <source>This method determines whether a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginResumeBookmark%2A&gt;</ph> operation was successful.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginResumeBookmark%2A&gt;</ph> 작업의 성공 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
          <source>If called before the load operation completes, it blocks until the operation is complete.</source>
          <target state="translated">로드 작업이 완료되기 전에 호출하면 해당 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
          <source>This method resumes a bookmark asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 책갈피를 비동기적으로 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
          <source>The asynchronous run operation.</source>
          <target state="translated">비동기 실행 작업입니다.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
          <source>Waits for the pending asynchronous run operation to complete.</source>
          <target state="translated">보류 중인 비동기 실행 작업이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
          <source>This method determines whether a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginRun%2A&gt;</ph> operation was successful.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginRun%2A&gt;</ph> 작업의 성공 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
          <source>If called before the resume operation completes, it blocks until the resume operation is complete.</source>
          <target state="translated">다시 시작 작업이 완료되기 전에 메서드를 호출하면 다시 시작 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
          <source>This method completes an asynchronous run operation using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> 비동기 디자인 패턴을 사용하여 비동기 실행 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
          <source>The asynchronous terminate operation.</source>
          <target state="translated">비동기 종료 작업입니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
          <source>Waits for the pending asynchronous terminate operation to complete.</source>
          <target state="translated">보류 중인 비동기 종료 작업이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
          <source>This method can be called to determine whether a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation was successful.</source>
          <target state="translated">이 메서드를 호출하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 작업의 성공 여부를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
          <source>If called before the terminate operation completes, it blocks until the operation is complete.</source>
          <target state="translated">종료 작업이 완료되기 전에 호출하면 해당 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
          <source>This method completes an asynchronous <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> operation using the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginTerminate%2A&gt;</ph> 비동기 디자인 패턴을 사용하여 비동기 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
          <source>The asynchronous unload operation.</source>
          <target state="translated">비동기 언로드 작업입니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
          <source>Waits for the pending asynchronous unload operation to complete.</source>
          <target state="translated">보류 중인 비동기 언로드 작업이 완료되기를 기다립니다.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
          <source>This method can be called to determine whether a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation was successful.</source>
          <target state="translated">이 메서드를 호출하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> 작업의 성공 여부를 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
          <source>If called before the unload operation completes, it blocks until the operation is complete.</source>
          <target state="translated">언로드 작업이 완료되기 전에 호출하면 해당 작업이 완료될 때까지 차단됩니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
          <source>This method completes an asynchronous <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> operation using the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">이 메서드는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.BeginUnload%2A&gt;</ph> 비동기 디자인 패턴을 사용하여 비동기 <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> 작업을 완료합니다.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>비동기 프로그래밍 개요<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowApplication.Extensions">
          <source>Gets the collection of extensions for the current workflow instance.</source>
          <target state="translated">현재 워크플로 인스턴스에 대한 확장명 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Extensions">
          <source>A collection of objects.</source>
          <target state="translated">개체 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Returns the collection of bookmarks for the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 책갈피 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetBookmarks">
          <source>Returns the collection of bookmarks for the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 책갈피 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetBookmarks">
          <source>A read-only collection of bookmarks for the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 책갈피 읽기 전용 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.GetBookmarks">
          <source>If this operation does not complete within 30 seconds, a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">이 작업이 30초 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.GetBookmarks">
          <source>The following example creates a workflow that uses a <ph id="ph1">`ReadLine`</ph> activity that creates a <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`ReadLine`</ph>를 만드는 <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph> 활동을 사용하는 워크플로를 만듭니다.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.GetBookmarks">
          <source>The workflow is started, and once the <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> is created and the workflow goes idle, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.GetBookmarks%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 다음 <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph>가 만들어지고 워크플로가 유휴 상태가 되면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.GetBookmarks%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.GetBookmarks">
          <source>When the workflow is completed, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 완료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
          <source>The interval in which this method must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 이 메서드를 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
          <source>Returns the collection of bookmarks for the workflow instance using the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 워크플로 인스턴스의 책갈피 컬렉션을 반환합니다.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
          <source>A read-only collection of bookmarks for the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 책갈피 읽기 전용 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
          <source>The following example creates a workflow that uses a <ph id="ph1">`ReadLine`</ph> activity that creates a <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`ReadLine`</ph>를 만드는 <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph> 활동을 사용하는 워크플로를 만듭니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
          <source>The workflow is started, and once the <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> is created and the workflow goes idle, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.GetBookmarks%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 다음 <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph>가 만들어지고 워크플로가 유휴 상태가 되면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.GetBookmarks%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)">
          <source>When the workflow is completed, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 완료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Retrieves the workflow instance.</source>
          <target state="translated">워크플로 인스턴스를 검색합니다.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore)">
          <source>The instance identifier.</source>
          <target state="translated">인스턴스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore)">
          <source>Retrieves the workflow instance using specified instance identifier and instance store.</source>
          <target state="translated">지정된 인스턴스 ID 및 인스턴스 저장소를 사용하여 워크플로 인스턴스를 검색합니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore)">
          <source>The retrieved instance.</source>
          <target state="translated">검색된 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>The instance identifier.</source>
          <target state="translated">인스턴스 식별자입니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>The access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>The interval in which the begin load operation must complete before the operation is canceled.</source>
          <target state="translated">작업이 취소되기 전에 시작 로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>Retrieves the workflow instance using specified instance identifier, instance store and timeout interval.</source>
          <target state="translated">지정된 인스턴스 ID, 인스턴스 저장소 및 시간 제한 간격을 사용하여 워크플로 인스턴스를 검색합니다.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>A reference to the asynchronous operation.</source>
          <target state="translated">비동기 작업에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Retrieves the runnable instance of the workflow.</source>
          <target state="translated">워크플로의 실행 가능한 인스턴스를 검색합니다.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore)">
          <source>The access to the persisted state of the current instance of the workflow application</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore)">
          <source>Retrieves the runnable instance of the workflow with specified instance store.</source>
          <target state="translated">지정된 인스턴스 저장소가 있는 워크플로의 실행 가능한 인스턴스를 검색합니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore)">
          <source>The runnable instance.</source>
          <target state="translated">실행 가능한 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>The access to the persisted state of the current instance of the workflow application</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스의 지속 상태에 대한 액세스입니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>The interval in which the begin load operation must complete before the operation is canceled.</source>
          <target state="translated">작업이 취소되기 전에 시작 로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>Retrieves the runnable instance of the workflow with specified instance store and timeout interval.</source>
          <target state="translated">지정된 인스턴스 저장소 및 제한 시간 간격이 있는 워크플로의 실행 가능한 인스턴스를 검색합니다.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)">
          <source>The runnable instance.</source>
          <target state="translated">실행 가능한 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowApplication.Id">
          <source>Gets the 128-bit GUID identifier of the current workflow application instance.</source>
          <target state="translated">현재 워크플로 응용 프로그램 인스턴스의 128비트 GUID 식별자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Id">
          <source>A 128-bit GUID identifier.</source>
          <target state="translated">128비트 GUID 식별자입니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Id">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance and then displays the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Id%2A&gt;</ph> value to the console.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스를 만든 다음 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Id%2A&gt;</ph> 값을 콘솔에 표시합니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowApplication.Idle">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> that is invoked when the current workflow instance becomes idle.</source>
          <target state="translated">현재 워크플로 인스턴스가 유휴 상태가 될 때 호출되는 <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph>을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Idle">
          <source>An action that executes when a workflow instance becomes idle.</source>
          <target state="translated">워크플로 인스턴스가 유휴 상태가 될 때 실행하는 동작입니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Idle">
          <source>The following code example inspects the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationIdleEventArgs&gt;</ph> passed into the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph> handler of a <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationIdleEventArgs&gt;</ph> 인스턴스의 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph> 처리기로 전달된 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>를 검사합니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Idle">
          <source>In this example the workflow going idle has one <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> with a name of <ph id="ph2">`EnterGuess`</ph>, owned by an activity named <ph id="ph3">`ReadInt`</ph>.</source>
          <target state="translated">이 예제에서는 유휴 상태로 전환되는 워크플로에 이름이 <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph>이고 <ph id="ph2">`EnterGuess`</ph> 활동이 소유하는 <ph id="ph3">`ReadInt`</ph> 한 개가 있습니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Idle">
          <source>This code example is based off of <bpt id="p1">[</bpt>How to: Run a Workflow<ept id="p1">](~/docs/framework/windows-workflow-foundation/how-to-run-a-workflow.md)</ept>, which is part of the <bpt id="p2">[</bpt>Getting Started Tutorial &amp;#91;.NET Framework 4.5&amp;#93;<ept id="p2">](~/docs/framework/windows-workflow-foundation/getting-started-tutorial.md)</ept>.</source>
          <target state="translated">이 코드 예제는에 기반을 둔 <bpt id="p1">[</bpt>하는 방법: 워크플로 실행<ept id="p1">](~/docs/framework/windows-workflow-foundation/how-to-run-a-workflow.md)</ept>의 일부인는 <bpt id="p2">[</bpt>초보자를 위한 자습서 &amp;#91;.NET Framework 4.5&amp;#93;<ept id="p2">](~/docs/framework/windows-workflow-foundation/getting-started-tutorial.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Idle">
          <source>If the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph> handler in that step is modified to contain the code from this example, the following output is displayed.</source>
          <target state="translated">이 단계에서 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph> 처리기가 이 예제 코드를 포함하도록 수정되면 다음과 같은 출력이 표시됩니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowApplication.InstanceStore">
          <source>Gets or sets an object that provides access to the persisted state of the current instance of the workflow application.</source>
          <target state="translated">워크플로 응용 프로그램의 현재 인스턴스에 대한 지속 상태에 액세스할 수 있는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.InstanceStore">
          <source>An instance store.</source>
          <target state="translated">인스턴스 저장소입니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.InstanceStore">
          <source>The following example creates a WorkflowApplication instance and then configures the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> using a <ph id="ph2">&lt;xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 WorkflowApplication 인스턴스를 만든 다음 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 사용하여 <ph id="ph2">&lt;xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore&gt;</ph>를 구성합니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.InstanceStore">
          <source>This code example is part of <bpt id="p1">[</bpt>How to: Create and Run a Long Running Workflow<ept id="p1">](~/docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md)</ept>, which is part of the <bpt id="p2">[</bpt>Getting Started Tutorial &amp;#91;.NET Framework 4.5&amp;#93;<ept id="p2">](~/docs/framework/windows-workflow-foundation/getting-started-tutorial.md)</ept>.</source>
          <target state="translated">이 코드 예제는 <bpt id="p1">[</bpt>하는 방법: 만들기 및 장기 실행 워크플로 실행<ept id="p1">](~/docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md)</ept>의 일부인는 <bpt id="p2">[</bpt>초보자를 위한 자습서 &amp;#91;.NET Framework 4.5&amp;#93;<ept id="p2">](~/docs/framework/windows-workflow-foundation/getting-started-tutorial.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Loads a workflow instance from an instance store.</source>
          <target state="translated">인스턴스 저장소에서 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance)">
          <source>The instance.</source>
          <target state="translated">인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance)">
          <source>Loads a workflow instance from an instance store with specified instance.</source>
          <target state="translated">지정된 인스턴스를 사용하여 인스턴스 저장소에서 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Guid)">
          <source>A globally unique 128-bit identifier for the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 128비트 GUID(Globally Unique Identifier)입니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Guid)">
          <source>Loads the specified workflow instance into memory from an instance store.</source>
          <target state="translated">인스턴스 저장소에서 지정한 워크플로 인스턴스를 메모리에 로드합니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Load(System.Guid)">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Load%2A&gt;</ph> to load persisted workflow instance from a <ph id="ph2">&lt;xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Load%2A&gt;</ph>를 호출하여 <ph id="ph2">&lt;xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore&gt;</ph>에서 지속된 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Load(System.Guid)">
          <source>This example is from the <ph id="ph1">`LoadAndCompleteInstance`</ph> method in the <bpt id="p1">[</bpt>Persisting a Workflow Application<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md)</ept> sample.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`LoadAndCompleteInstance`</ph> 에서 메서드는 <bpt id="p1">[</bpt>워크플로 응용 프로그램 유지<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap)">
          <source>The instance.</source>
          <target state="translated">인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap)">
          <source>The update map.</source>
          <target state="translated">업데이트 맵입니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap)">
          <source>Loads a workflow instance from an instance store with specified instance and update map.</source>
          <target state="translated">지정된 인스턴스 및 업데이트 맵을 사용하여 인스턴스 저장소에서 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.TimeSpan)">
          <source>The instance.</source>
          <target state="translated">인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.TimeSpan)">
          <source>The interval in which the begin load operation must complete before the operation is canceled.</source>
          <target state="translated">작업이 취소되기 전에 시작 로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.TimeSpan)">
          <source>Loads a workflow instance from an instance store with specified instance and timeout interval.</source>
          <target state="translated">지정된 인스턴스 및 제한 시간 간격을 사용하여 인스턴스 저장소에서 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)">
          <source>A globally unique 128-bit identifier for the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 128비트 GUID(Globally Unique Identifier)입니다.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)">
          <source>The interval in which the load operation must complete before the load operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">로드 작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)">
          <source>Loads the specified workflow instance into memory from an instance store using the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 인스턴스 저장소에서 지정한 워크플로 인스턴스를 메모리에 로드합니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Load%2A&gt;</ph> to load persisted workflow instance from a <ph id="ph2">&lt;xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Load%2A&gt;</ph>를 호출하여 <ph id="ph2">&lt;xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore&gt;</ph>에서 지속된 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)">
          <source>This example is from the <ph id="ph1">`LoadAndCompleteInstance`</ph> method in the <bpt id="p1">[</bpt>Persisting a Workflow Application<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md)</ept> sample.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`LoadAndCompleteInstance`</ph> 에서 메서드는 <bpt id="p1">[</bpt>워크플로 응용 프로그램 유지<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan)">
          <source>The instance.</source>
          <target state="translated">인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan)">
          <source>The update map.</source>
          <target state="translated">업데이트 맵입니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan)">
          <source>The interval in which the begin load operation must complete before the operation is canceled.</source>
          <target state="translated">작업이 취소되기 전에 시작 로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan)">
          <source>Loads a workflow instance from an instance store with specified instance, update map and timeout interval.</source>
          <target state="translated">지정된 인스턴스, 업데이트 맵 및 제한 시간 간격을 사용하여 인스턴스 저장소에서 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Loads a runnable workflow instance from the <ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>에서 실행 가능한 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>A runnable instance is an instance for which a timer or instance lock has expired.</source>
          <target state="translated">실행 가능한 인스턴스는 타이머 또는 인스턴스 잠금이 만료된 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.LoadRunnableInstance">
          <source>Loads a runnable workflow instance from the <ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>에서 실행 가능한 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.LoadRunnableInstance">
          <source>A runnable instance is an instance for which a timer or instance lock has expired.</source>
          <target state="translated">실행 가능한 인스턴스는 타이머 또는 인스턴스 잠금이 만료된 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.LoadRunnableInstance">
          <source>By default, the load operation must complete in 30 seconds or a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">기본적으로 로드 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.LoadRunnableInstance(System.TimeSpan)">
          <source>The interval in which the load operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.LoadRunnableInstance(System.TimeSpan)">
          <source>Loads a runnable workflow instance from the <ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph> using the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 <ph id="ph1">&lt;see cref="P:System.Activities.WorkflowApplication.InstanceStore" /&gt;</ph>에서 실행 가능한 워크플로 인스턴스를 로드합니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.LoadRunnableInstance(System.TimeSpan)">
          <source>A runnable instance is an instance for which a timer or instance lock has expired.</source>
          <target state="translated">실행 가능한 인스턴스는 타이머 또는 인스턴스 잠금이 만료된 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowApplication.OnUnhandledException">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Func`2" /&gt;</ph> that is invoked when the current workflow instance encounters an unhandled exception.</source>
          <target state="translated">현재 워크플로 인스턴스에서 처리되지 않은 예외가 발생할 때 호출되는 <ph id="ph1">&lt;see cref="T:System.Func`2" /&gt;</ph>를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.OnUnhandledException">
          <source>The delegate that is invoked when a workflow instance encounters an unhandled exception.</source>
          <target state="translated">워크플로 인스턴스에서 처리되지 않은 예외가 발생할 때 호출되는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.OnUnhandledException">
          <source>Both <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior&gt;</ph> dictate the behavior of the runtime when an exception is not handled in the workflow; however, <ph id="ph3">&lt;xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior&gt;</ph> has the option of leaving a suspended workflow in the persistence store, while <ph id="ph4">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> does not.</source>
          <target state="translated">예외가 워크플로에서 처리되지 않으면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph>과 <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior&gt;</ph>는 런타임 동작을 지정합니다. 그러나 <ph id="ph3">&lt;xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior&gt;</ph>에는 지속성 저장소의 일시 중지된 워크플로를 끝낼 수 있는 옵션이 있지만 <ph id="ph4">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph>에는 없습니다.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.OnUnhandledException">
          <source>The reason for this is that what happens to a suspended workflow is host-specific, and <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> is not.</source>
          <target state="translated">이러한 이유로 일시 중지된 워크플로는 호스트별로 발생하게 되며 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>은 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.OnUnhandledException">
          <source>To implement this functionality using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>, create a custom <ph id="ph2">&lt;xref:System.Activities.Persistence.PersistenceParticipant&gt;</ph> that has this behavior.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 이 기능을 구현하려면 이 동작을 가진 사용자 지정 <ph id="ph2">&lt;xref:System.Activities.Persistence.PersistenceParticipant&gt;</ph>를 만듭니다.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.OnUnhandledException">
          <source>The following example invokes a workflow that throws an exception.</source>
          <target state="translated">다음 예제에서는 예외를 throw하는 워크플로를 호출합니다.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.OnUnhandledException">
          <source>The exception is unhandled by the workflow and the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> handler is invoked.</source>
          <target state="translated">이 예외는 워크플로에서 처리되지 않으며 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.OnUnhandledException%2A&gt;</ph> 처리기가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.OnUnhandledException">
          <source>The <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs&gt;</ph> are inspected to provide information about the exception, and the workflow is terminated.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs&gt;</ph>를 검사하여 예외에 대한 정보를 제공하고 워크플로가 종료됩니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Persists a workflow instance to an instance store.</source>
          <target state="translated">워크플로 인스턴스를 인스턴스 저장소에 지속합니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Persist">
          <source>Persists a workflow instance to an instance store.</source>
          <target state="translated">워크플로 인스턴스를 인스턴스 저장소에 지속합니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Persist">
          <source>If the persist operation does not complete within 30 seconds, a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">지속 작업이 30초 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Persist">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Persist">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Persist">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Persist%2A&gt;</ph> to persist a workflow instance before the workflow is started.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Persist%2A&gt;</ph>를 호출하여 워크플로가 시작되기 전에 워크플로 인스턴스를 지속합니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Persist">
          <source>This example is part of the <ph id="ph1">`StartAndUnloadInstance`</ph> method in the <bpt id="p1">[</bpt>Persisting a Workflow Application<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md)</ept> sample.</source>
          <target state="translated">이 예제는의 일부는 <ph id="ph1">`StartAndUnloadInstance`</ph> 에서 메서드는 <bpt id="p1">[</bpt>워크플로 응용 프로그램을 지속할<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
          <source>The interval in which the persist operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 지속 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
          <source>Persists a workflow instance to an instance store using the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 워크플로 인스턴스를 인스턴스 저장소에 지속합니다.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Persist%2A&gt;</ph> to persist a workflow instance before the workflow is started.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Persist%2A&gt;</ph>를 호출하여 워크플로가 시작되기 전에 워크플로 인스턴스를 지속합니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)">
          <source>This example is from the <ph id="ph1">`StartAndUnloadInstance`</ph> method in the <bpt id="p1">[</bpt>Persisting a Workflow Application<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md)</ept> sample.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">`StartAndUnloadInstance`</ph> 에서 메서드는 <bpt id="p1">[</bpt>워크플로 응용 프로그램 유지<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowApplication.PersistableIdle">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Activities.ActivityFunc" /&gt;</ph> that is invoked when the current workflow instance is idle and can be persisted.</source>
          <target state="translated">현재 워크플로 인스턴스가 유휴 상태가 될 때 호출되고 지속될 수 있는 <ph id="ph1">&lt;see cref="T:System.Activities.ActivityFunc" /&gt;</ph>를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.PersistableIdle">
          <source>The <ph id="ph1">&lt;see cref="T:System.Activities.ActivityFunc" /&gt;</ph> that is invoked when the current workflow instance is idle and can be persisted.</source>
          <target state="translated">현재 워크플로 인스턴스가 유휴 상태가 될 때 호출되고 지속될 수 있는 <ph id="ph1">&lt;see cref="T:System.Activities.ActivityFunc" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.PersistableIdle">
          <source>When a workflow becomes idle and can be persisted, both <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.PersistableIdle%2A&gt;</ph> are invoked, in that order.</source>
          <target state="translated">워크플로가 유휴 상태가 되어 지속 가능하게 되면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Idle%2A&gt;</ph>과 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.PersistableIdle%2A&gt;</ph>이 순서대로 모두 호출됩니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.PersistableIdle">
          <source>The <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.PersistableIdle%2A&gt;</ph> handler returns one of the <ph id="ph2">&lt;xref:System.Activities.PersistableIdleAction&gt;</ph> enumeration values of <ph id="ph3">&lt;xref:System.Activities.PersistableIdleAction.None&gt;</ph>, <ph id="ph4">&lt;xref:System.Activities.PersistableIdleAction.Persist&gt;</ph>, or <ph id="ph5">&lt;xref:System.Activities.PersistableIdleAction.Unload&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.PersistableIdle%2A&gt;</ph> 처리기는 <ph id="ph2">&lt;xref:System.Activities.PersistableIdleAction&gt;</ph>, <ph id="ph3">&lt;xref:System.Activities.PersistableIdleAction.None&gt;</ph>, <ph id="ph4">&lt;xref:System.Activities.PersistableIdleAction.Persist&gt;</ph> 중 하나의 <ph id="ph5">&lt;xref:System.Activities.PersistableIdleAction.Unload&gt;</ph> 열거형 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.PersistableIdle">
          <source>The following example handles the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.PersistableIdle%2A&gt;</ph> handler and instructs the runtime to persist and unload the workflow.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.PersistableIdle%2A&gt;</ph> 처리기를 처리하고 워크플로를 지속 및 언로드하도록 런타임에 지시합니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Initiates an operation to resume a bookmark.</source>
          <target state="translated">책갈피를 다시 시작하기 위한 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
          <source>The bookmark to resume.</source>
          <target state="translated">다시 시작할 책갈피입니다.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
          <source>An object passed as a parameter to the method that is invoked when the bookmark resumes.</source>
          <target state="translated">책갈피를 다시 시작할 때 호출할 메서드에 대한 매개 변수로 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
          <source>Initiates an operation to resume the specified bookmark, using the specified value.</source>
          <target state="translated">지정한 값을 사용하여 지정한 책갈피를 다시 시작하기 위한 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
          <source>The bookmark to be resumed is previously created by an activity within the workflow instance.</source>
          <target state="translated">다시 시작할 책갈피는 워크플로 인스턴스 내의 작업에서 이전에 만든 것입니다.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
          <source>The result of the bookmark resumption operation.</source>
          <target state="translated">책갈피 다시 시작 작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
          <source>The bookmark result indicates whether the resumption operation succeeded or failed.</source>
          <target state="translated">책갈피 결과는 다시 시작 작업의 성공 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
          <source>The following example creates a workflow that uses a <ph id="ph1">`ReadLine`</ph> activity that creates a <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`ReadLine`</ph>를 만드는 <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph> 활동을 사용하는 워크플로를 만듭니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
          <source>The workflow is started, and once the <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> is created and the workflow goes idle, the user's input is gathered and the bookmark is resumed.</source>
          <target state="translated">워크플로가 시작된 다음 <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph>가 만들어지고 워크플로가 유휴 상태가 되면 사용자 입력이 수집되고 책갈피가 다시 시작됩니다.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
          <source>The name of the bookmark to be resumed.</source>
          <target state="translated">다시 시작할 책갈피의 이름입니다.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
          <source>An object passed as a parameter to the method that is invoked when the bookmark resumes.</source>
          <target state="translated">책갈피를 다시 시작할 때 호출할 메서드에 대한 매개 변수로 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
          <source>Initiates an operation to resume the bookmark with the specified name, using the specified value.</source>
          <target state="translated">지정한 값을 사용하여 지정한 이름의 책갈피를 다시 시작하기 위한 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
          <source>The bookmark to be resumed is previously created by an activity within the workflow instance.</source>
          <target state="translated">다시 시작할 책갈피는 워크플로 인스턴스 내의 작업에서 이전에 만든 것입니다.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
          <source>The result of the bookmark resumption operation.</source>
          <target state="translated">책갈피 다시 시작 작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
          <source>The bookmark result indicates whether the resumption operation succeeded or failed.</source>
          <target state="translated">책갈피 결과는 다시 시작 작업의 성공 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
          <source>The following example creates a workflow that uses a <ph id="ph1">`ReadLine`</ph> activity that creates a <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`ReadLine`</ph>를 만드는 <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph> 활동을 사용하는 워크플로를 만듭니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)">
          <source>The workflow is started, and once the <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> is created and the workflow goes idle, the user's input is gathered and the bookmark is resumed.</source>
          <target state="translated">워크플로가 시작된 다음 <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph>가 만들어지고 워크플로가 유휴 상태가 되면 사용자 입력이 수집되고 책갈피가 다시 시작됩니다.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
          <source>The bookmark to resume.</source>
          <target state="translated">다시 시작할 책갈피입니다.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
          <source>An object passed as a parameter to the method that is invoked when the bookmark resumes.</source>
          <target state="translated">책갈피를 다시 시작할 때 호출할 메서드에 대한 매개 변수로 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
          <source>The time interval during which the bookmark must be resumed.</source>
          <target state="translated">책갈피가 다시 시작되어야 하는 시간 간격입니다.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
          <source>Initiates an operation to resume the specified bookmark, using the specified value and time-out interval.</source>
          <target state="translated">지정한 값 및 시간 제한 간격을 사용하여 지정한 책갈피를 다시 시작하기 위한 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
          <source>The bookmark to be resumed is previously created by an activity within the workflow instance.</source>
          <target state="translated">다시 시작할 책갈피는 워크플로 인스턴스 내의 작업에서 이전에 만든 것입니다.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
          <source>The result of the bookmark resumption operation.</source>
          <target state="translated">책갈피 다시 시작 작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
          <source>The bookmark result indicates whether the resumption operation succeeded or failed.</source>
          <target state="translated">책갈피 결과는 다시 시작 작업의 성공 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
          <source>The following example creates a workflow that uses a <ph id="ph1">`ReadLine`</ph> activity that creates a <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`ReadLine`</ph>를 만드는 <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph> 활동을 사용하는 워크플로를 만듭니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
          <source>The workflow is started, and once the <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> is created and the workflow goes idle, the user's input is gathered and the bookmark is resumed.</source>
          <target state="translated">워크플로가 시작된 다음 <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph>가 만들어지고 워크플로가 유휴 상태가 되면 사용자 입력이 수집되고 책갈피가 다시 시작됩니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
          <source>The name of the bookmark to be resumed.</source>
          <target state="translated">다시 시작할 책갈피의 이름입니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
          <source>An object passed as a parameter to the method that is invoked when the bookmark resumes.</source>
          <target state="translated">책갈피를 다시 시작할 때 호출할 메서드에 대한 매개 변수로 전달되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
          <source>The time interval during which the bookmark must be resumed.</source>
          <target state="translated">책갈피가 다시 시작되어야 하는 시간 간격입니다.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
          <source>Initiates an operation to resume the bookmark with the specified name, using the specified value and time-out interval.</source>
          <target state="translated">지정한 값 및 시간 제한 간격을 사용하여 지정한 이름의 책갈피를 다시 시작하기 위한 작업을 시작합니다.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
          <source>The bookmark to be resumed is previously created by an activity within the workflow instance.</source>
          <target state="translated">다시 시작할 책갈피는 워크플로 인스턴스 내의 작업에서 이전에 만든 것입니다.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
          <source>The result of the bookmark resumption operation.</source>
          <target state="translated">책갈피 다시 시작 작업의 결과입니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
          <source>The bookmark result indicates whether the resumption operation succeeded or failed.</source>
          <target state="translated">책갈피 결과는 다시 시작 작업의 성공 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
          <source>The following example creates a workflow that uses a <ph id="ph1">`ReadLine`</ph> activity that creates a <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">`ReadLine`</ph>를 만드는 <ph id="ph2">&lt;xref:System.Activities.Bookmark&gt;</ph> 활동을 사용하는 워크플로를 만듭니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
          <source>The workflow is started, and once the <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph> is created and the workflow goes idle, the user's input is gathered and the bookmark is resumed.</source>
          <target state="translated">워크플로가 시작된 다음 <ph id="ph1">&lt;xref:System.Activities.Bookmark&gt;</ph>가 만들어지고 워크플로가 유휴 상태가 되면 사용자 입력이 수집되고 책갈피가 다시 시작됩니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Begins or resumes the execution of a workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 실행을 시작하거나 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>Call this method to initiate execution of a newly created workflow instance.</source>
          <target state="translated">새로 만든 워크플로 인스턴스 실행을 시작하려면 이 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Run">
          <source>Begins or resumes the execution of a workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 실행을 시작하거나 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run">
          <source>Call this method to initiate execution of a newly created workflow instance.</source>
          <target state="translated">새로 만든 워크플로 인스턴스 실행을 시작하려면 이 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run">
          <source>If the run operation does not complete within 30 seconds, a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">실행 작업이 30초 내에 완료되지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run">
          <source>When the workflow is completed, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 완료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
          <source>Call this method to initiate execution of a newly created workflow instance.</source>
          <target state="translated">새로 만든 워크플로 인스턴스 실행을 시작하려면 이 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
          <source>The interval in which the run operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 실행 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
          <source>Begins or resumes the execution of a workflow instance using the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 워크플로 인스턴스 실행을 시작하거나 다시 시작합니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
          <source>Note that unlike <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>, this method will time out only if the workflow doesn't start in the specified amount of time, rather than needing to complete in the specified amount of time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>와 달리 이 메서드는 지정된 시간 내에 완료하는 것이 아닌 지정된 시간 내에 시작하지 않을 경우에만 제한 시간이 초과됩니다.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
          <source>The reason for this is that <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> executes the workflow synchronously (blocking the host thread), while <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph> executes asynchronously, only blocking the host thread for the amount of time it takes the workflow to start.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>은 워크플로를 시작하는 데 걸리는 시간에 대해서만 호스트 스레드를 차단하면서 비동기적으로 실행되는 반면 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>는 워크플로를 동기적으로 실행(호스트 스레드 차단)하기 때문입니다.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)">
          <source>When the workflow is completed, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 완료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Terminates a workflow instance.</source>
          <target state="translated">워크플로 인스턴스를 종료합니다.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
          <source>The reason for terminating the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 종료 원인입니다.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
          <source>Terminates a workflow instance using the specified exception.</source>
          <target state="translated">지정한 예외를 사용하여 워크플로 인스턴스를 종료합니다.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
          <source>This method schedules the termination of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 종료를 예약합니다.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
          <source>To be notified when the termination has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handle.</source>
          <target state="translated">종료가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 핸들을 사용합니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph> operation must complete in 30 seconds or a <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph> 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
          <source>After the workflow is started, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 후에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception)">
          <source>When the workflow is terminated, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 종료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.String)">
          <source>The reason for terminating the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 종료 원인입니다.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.String)">
          <source>Terminates a workflow instance using the specified error message.</source>
          <target state="translated">지정한 오류 메시지를 사용하여 워크플로 인스턴스를 종료합니다.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String)">
          <source>This method schedules the termination of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 종료를 예약합니다.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String)">
          <source>To be notified when the termination has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handle.</source>
          <target state="translated">종료가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 핸들을 사용합니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String)">
          <source>By default, the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph> operation must complete in 30 seconds or a <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">기본적으로 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph> 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph2">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String)">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String)">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String)">
          <source>After the workflow is started, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 후에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String)">
          <source>When the workflow is terminated, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 종료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
          <source>The reason for terminating the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 종료 원인입니다.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
          <source>The interval in which the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)" /&gt;</ph> operation must complete before the operation is canceled and a <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)" /&gt;</ph>이 throw되기 전에 <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
          <source>Terminates a workflow instance using the specified exception and time-out interval.</source>
          <target state="translated">지정한 예외 및 시간 제한 간격을 사용하여 워크플로 인스턴스를 종료합니다.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
          <source>This method schedules the termination of the workflow.</source>
          <target state="translated">이 메서드는 워크플로 종료를 예약합니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
          <source>To be notified when the termination has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handle.</source>
          <target state="translated">종료가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 핸들을 사용합니다.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
          <source>After the workflow is started, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 후에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
          <source>When the workflow is terminated, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 종료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
          <source>The reason for terminating the workflow instance.</source>
          <target state="translated">워크플로 인스턴스의 종료 원인입니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
          <source>The interval in which the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)" /&gt;</ph> operation must complete before the operation is canceled and a <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)" /&gt;</ph>이 throw되기 전에 <ph id="ph2">&lt;see cref="T:System.TimeoutException" /&gt;</ph> 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
          <source>Terminates a workflow instance using the specified error message and time-out interval.</source>
          <target state="translated">지정한 오류 메시지 및 시간 제한 간격을 사용하여 워크플로 인스턴스를 종료합니다.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
          <source>This method schedules the termination of the workflow instance.</source>
          <target state="translated">이 메서드는 워크플로 인스턴스 종료를 예약합니다.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
          <source>To be notified when the termination has completed, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> handle.</source>
          <target state="translated">종료가 완료되었을 때 알림을 받으려면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Completed%2A&gt;</ph> 핸들을 사용합니다.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
          <source>The following example hosts a workflow using <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>을 사용하여 워크플로를 호스트합니다.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
          <source>A <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance is constructed using the specified workflow definition, the desired workflow lifecycle events are handled, and the workflow is invoked with a call to <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>.</source>
          <target state="translated">지정한 워크플로 정의를 사용하여 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> 인스턴스가 생성되고, 원하는 워크플로 수명 주기 이벤트가 처리되고, <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Run%2A&gt;</ph>을 호출하여 워크플로가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
          <source>After the workflow is started, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph> is called.</source>
          <target state="translated">워크플로가 시작된 후에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Terminate%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)">
          <source>When the workflow is terminated, the following output is displayed to the console.</source>
          <target state="translated">워크플로가 종료되면 다음 출력이 콘솔에 표시됩니다.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowApplication">
          <source>Persists and unloads a workflow instance.</source>
          <target state="translated">워크플로 인스턴스를 지속하거나 언로드합니다.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>By default, the unload operation must complete in 30 seconds or a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">기본적으로 언로드 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowApplication">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Unload">
          <source>Persists and unloads a workflow instance.</source>
          <target state="translated">워크플로 인스턴스를 지속하거나 언로드합니다.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload">
          <source>By default, the unload operation must complete in 30 seconds or a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">기본적으로 언로드 작업은 30초 내에 완료되어야 하며, 그렇지 않으면 <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload">
          <source>The following code example is part of the <bpt id="p1">[</bpt>NoPersistScope Activity<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/nopersistscope-activity.md)</ept> sample.</source>
          <target state="translated">다음 코드 예제는의 일부는 <bpt id="p1">[</bpt>NoPersistScope 활동<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/nopersistscope-activity.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload">
          <source>In this example, the workflow is idle and the host application is waiting for user input.</source>
          <target state="translated">이 예제에서는 워크플로가 유휴 상태이고 호스트 응용 프로그램이 사용자 입력을 기다리고 있습니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload">
          <source>If the user chooses to unload, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Unload%2A&gt;</ph> is called.</source>
          <target state="translated">사용자가 언로드 작업을 선택하면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Unload%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload">
          <source>If successful, the workflow is persisted and unloaded from memory.</source>
          <target state="translated">이 작업이 성공하면 워크플로가 지속되고 메모리에서 언로드됩니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
          <source>The interval in which the unload operation must complete before the operation is canceled and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">작업이 취소되고 <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph>이 throw되기 전에 언로드 작업을 완료해야 하는 간격입니다.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
          <source>Persists and unloads a workflow instance using the specified time-out interval.</source>
          <target state="translated">지정한 시간 제한 간격을 사용하여 워크플로 인스턴스를 지속하고 언로드합니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
          <source>If the workflow instance was previously loaded from persistence, then the same <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> used to load the workflow is used for persistence.</source>
          <target state="translated">이전에 워크플로 인스턴스가 지속성에서 로드되었다면 워크플로를 로드하는 데 사용되는 동일한 <ph id="ph1">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph>가 지속성을 위해 사용됩니다.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
          <source>If the workflow was created and has not yet been persisted, then an <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph> must be configured before calling this method or else an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when this method is called.</source>
          <target state="translated">워크플로가 생성되었으나 아직 지속 상태가 아니라면 이 메서드를 호출하기 전에 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.InstanceStore%2A&gt;</ph>를 구성해야 합니다. 그렇지 않으면 이 메서드를 호출할 때 <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
          <source>The following code example is part of the <bpt id="p1">[</bpt>NoPersistScope Activity<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/nopersistscope-activity.md)</ept> sample.</source>
          <target state="translated">다음 코드 예제는의 일부는 <bpt id="p1">[</bpt>NoPersistScope 활동<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/nopersistscope-activity.md)</ept> 샘플.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
          <source>In this example, the workflow is idle and the host application is waiting for user input.</source>
          <target state="translated">이 예제에서는 워크플로가 유휴 상태이고 호스트 응용 프로그램이 사용자 입력을 기다리고 있습니다.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
          <source>If the user chooses to unload, <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Unload%2A&gt;</ph> is called.</source>
          <target state="translated">사용자가 언로드 작업을 선택하면 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication.Unload%2A&gt;</ph>가 호출됩니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)">
          <source>If successful, the workflow is persisted and unloaded from memory.</source>
          <target state="translated">이 작업이 성공하면 워크플로가 지속되고 메모리에서 언로드됩니다.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowApplication.Unloaded">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph> that is invoked when the current workflow unloads.</source>
          <target state="translated">현재 워크플로에서 언로드할 때 호출되는 <ph id="ph1">&lt;see cref="T:System.Action`1" /&gt;</ph>을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Unloaded">
          <source>An action that is invoked when a workflow instance is unloaded.</source>
          <target state="translated">워크플로 인스턴스가 언로드될 때 호출되는 동작입니다.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowApplication.Unloaded">
          <source>The following code example inspects the <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationEventArgs&gt;</ph> passed into the <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Unloaded%2A&gt;</ph> handler of a <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instance and displays the <ph id="ph4">&lt;xref:System.Activities.WorkflowApplicationEventArgs.InstanceId%2A&gt;</ph> of the workflow that was unloaded.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Activities.WorkflowApplicationEventArgs&gt;</ph> 인스턴스의 <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Unloaded%2A&gt;</ph> 처리기로 전달된 <ph id="ph3">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>를 검사하고 언로드된 워크플로의 <ph id="ph4">&lt;xref:System.Activities.WorkflowApplicationEventArgs.InstanceId%2A&gt;</ph>를 표시합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>