<Type Name="IHierarchyData" FullName="System.Web.UI.IHierarchyData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9619ec45295a214940207aebaba5a0a0ad513335" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36576850" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IHierarchyData" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHierarchyData" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.IHierarchyData" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHierarchyData" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHierarchyData" />
  <TypeSignature Language="F#" Value="type IHierarchyData = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>노드의 특성에 대해 설명하는 노드 개체와 일부 속성을 포함하여 계층적 데이터 구조의 노드를 노출합니다. <see cref="T:System.Web.UI.IHierarchyData" /> 인터페이스를 구현하는 개체는 <see cref="T:System.Web.UI.IHierarchicalEnumerable" /> 컬렉션에 포함될 수 있으며 ASP.NET 사이트 탐색 및 데이터 소스 컨트롤에 사용됩니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData> 인터페이스의 계층 구조 노드를 나타내고 해당 부모 및 자식 노드를 계층 관계를 추적 하는 클래스에서 구현 됩니다. 구현 하는 클래스는 <xref:System.Web.UI.IHierarchyData> 인터페이스를 구현 하는 컬렉션에 포함 될 수는 <xref:System.Web.UI.IHierarchicalEnumerable> 인터페이스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.IHierarchyData> 래핑하는 클래스를 가진 인터페이스는 <xref:System.IO.FileSystemInfo> 개체입니다. <xref:System.IO.FileSystemInfo> 클래스는 계층적 데이터 노드를의 좋은 예로는 <xref:System.Web.UI.IHierarchyData> ASP.NET 계층적 데이터 소스 컨트롤에 대 한 인터페이스를 나타냅니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.HierarchicalDataSourceControl> 클래스입니다.  
  
 [!code-csharp[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/CS/filesystemdatasource.cs#5)]
 [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/VB/filesystemdatasource.vb#5)]  
  
 다음 코드 예제에서는 방법을 재귀적으로 반복는 <xref:System.Web.UI.IHierarchicalEnumerable> 컬렉션, 추출 된 <xref:System.Web.UI.IHierarchyData> 항목을 사용 하 여 열거자에서는 <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> 메서드를 데이터 항목으로 기본 작업을 수행 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.IHierarchyData_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/CS/ihd_1.aspx#1)]
 [!code-aspx-vb[System.Web.UI.IHierarchyData_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/VB/ihd_1.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.IHierarchicalEnumerable" />
    <altmember cref="T:System.Web.SiteMapNode" />
  </Docs>
  <Members>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public System.Web.UI.IHierarchicalEnumerable GetChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.IHierarchicalEnumerable GetChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IHierarchyData.GetChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildren () As IHierarchicalEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::IHierarchicalEnumerable ^ GetChildren();" />
      <MemberSignature Language="F#" Value="abstract member GetChildren : unit -&gt; System.Web.UI.IHierarchicalEnumerable" Usage="iHierarchyData.GetChildren " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IHierarchicalEnumerable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 계층적 노드의 모든 자식 노드를 나타내는 열거형 개체를 가져옵니다.</summary>
        <returns>현재 계층적 노드의 자식 노드를 나타내는 <see cref="T:System.Web.UI.IHierarchicalEnumerable" /> 컬렉션입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용할 수 있습니다는 <xref:System.Web.UI.IHierarchyData.HasChildren%2A> 속성을 확인 여부는 <xref:System.Web.UI.IHierarchyData> 자식 노드가 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 확인 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.IHierarchyData.HasChildren%2A> 속성을 현재 계층적 데이터 노드에 자식 노드가 있는지 확인 하 고 검색 하를 사용 하는 <xref:System.Web.UI.IHierarchyData.GetChildren%2A> 메서드. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.IHierarchyData> 인터페이스입니다.  
  
 [!code-csharp[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/CS/ihd_1.aspx.cs#2)]
 [!code-vb[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/VB/ihd_1.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IHierarchyData.HasChildren" />
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public System.Web.UI.IHierarchyData GetParent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.IHierarchyData GetParent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IHierarchyData.GetParent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParent () As IHierarchyData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::IHierarchyData ^ GetParent();" />
      <MemberSignature Language="F#" Value="abstract member GetParent : unit -&gt; System.Web.UI.IHierarchyData" Usage="iHierarchyData.GetParent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IHierarchyData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 계층적 노드의 부모 노드를 나타내는 <see cref="T:System.Web.UI.IHierarchyData" /> 개체를 가져옵니다.</summary>
        <returns>현재 계층적 노드의 부모 노드를 나타내는 <see cref="T:System.Web.UI.IHierarchyData" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData> 인터페이스 HasParent 편의 속성을 정의 하지 않으므로 호출자의 반환 값을 확인 해야 합니다는 <xref:System.Web.UI.IHierarchyData.GetParent%2A> 방법을 `null` 확인 하려면 있는지 여부를 현재 <xref:System.Web.UI.IHierarchyData> 노드는 계층적 데이터의 루트 노드 노드가 속해 있는 구조체입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.IHierarchyData.GetParent%2A> 구현 하는 클래스의 메서드는 <xref:System.Web.UI.IHierarchyData> 인터페이스입니다. `FileSystemHierarchyData` 래핑하므로 <xref:System.IO.FileSystemInfo> 개체 및 <xref:System.Web.UI.IHierarchyData.GetParent%2A> 메서드 구현의 형식을 확인는 <xref:System.IO.FileSystemInfo> 개체 및 해당 부모 개체 기반 형식으로 반환 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.IHierarchyData> 인터페이스 및 <xref:System.Web.UI.HierarchicalDataSourceControl> 클래스입니다.  
  
 [!code-csharp[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/CS/filesystemdatasource.cs#10)]
 [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/VB/filesystemdatasource.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IHierarchyData.GetChildren" />
        <altmember cref="P:System.Web.UI.IHierarchyData.HasChildren" />
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.IHierarchyData.HasChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChildren : bool" Usage="System.Web.UI.IHierarchyData.HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.IHierarchyData" /> 개체가 나타내는 계층적 데이터 노드에 자식 노드가 있는지 여부를 나타냅니다.</summary>
        <value>현재 노드에 자식 노드가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData.HasChildren%2A> 속성은 호출자의 반환 값을 확인 하지 않으려면 수 있도록 해 주는 편의 속성은 <xref:System.Web.UI.IHierarchyData.GetChildren%2A> 방법을 `null`합니다. 경우는 <xref:System.Web.UI.IHierarchyData.HasChildren%2A> 속성에서 반환 `true`, 호출 된 <xref:System.Web.UI.IHierarchyData.GetChildren%2A> 를 검색할 메서드는 <xref:System.Web.UI.IHierarchicalEnumerable> 자식 노드의 컬렉션입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 계층적 ASP.NET 데이터 바인딩된 컨트롤 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.IHierarchyData> 재귀 데이터 바인딩 메서드의 개체가 있습니다. 항목에는 <xref:System.Web.UI.IHierarchicalEnumerable> 열거 되 고 각 컬렉션은는 <xref:System.Web.UI.IHierarchyData> 개체를 사용 하 여 검색할는 <xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A> 메서드. 마지막으로 <xref:System.Web.UI.IHierarchyData.HasChildren%2A> recurse 것인지 결정 속성을 검사 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.WebControls.HierarchicalDataBoundControl> 클래스입니다.  
  
 [!code-csharp[Samples.AspNet.GeneologyTree#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.GeneologyTree/CS/geneologytree.cs#5)]
 [!code-vb[Samples.AspNet.GeneologyTree#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.GeneologyTree/VB/geneologytree.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.IHierarchyData.GetChildren" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.IHierarchyData.Item" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Item { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Item : obj" Usage="System.Web.UI.IHierarchyData.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.IHierarchyData" /> 개체가 나타내는 계층적 데이터 노드를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Object" /> 계층적 데이터 노드 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다 수의 클래스와 같은 계층적 데이터 노드를 나타내는 반면는 <xref:System.Web.SiteMapNode> 클래스를 구현는 <xref:System.Web.UI.IHierarchyData> 인터페이스를 직접, 다른 클래스는 인터페이스를 구현 하지 않는 클래스에 대 한 래퍼만 작동 합니다. <xref:System.Web.UI.IHierarchyData.Item%2A> 비즈니스 개체는 기능적으로 동일 때 경우에 대 한 속성은 제공 된 <xref:System.Web.UI.IHierarchyData> 개체 하지만 쉽게 다시 디자인 될 수 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 하는 방법을 보여 줍니다. <xref:System.Web.UI.IHierarchyData> 속성의 유형을 확인는 <xref:System.Web.UI.IHierarchyData> 를 사용 하 여 개체는 <xref:System.Web.UI.IHierarchyData.Type%2A> 속성과 유형별은 다양 한 작업을 수행 하려면 개체를 캐스팅 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.IHierarchyData> 인터페이스입니다.  
  
 [!code-csharp[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/CS/ihd_1.aspx.cs#2)]
 [!code-vb[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/VB/ihd_1.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IHierarchyData.Type" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.IHierarchyData.Path" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Path : string" Usage="System.Web.UI.IHierarchyData.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>노드의 계층 경로를 가져옵니다.</summary>
        <value>현재 노드에 상대적인 계층 경로를 식별하는 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData.Path%2A> 속성에 전달 될 수는 <xref:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView%2A> 를 검색할 메서드는 <xref:System.Web.UI.HierarchicalDataSourceView> 으로 식별 된 노드에 해당 하는 개체 <xref:System.Web.UI.IHierarchyData.Path%2A>합니다.  
  
> [!CAUTION]
>  <xref:System.Web.UI.IHierarchyData.Path%2A> 속성으로 클라이언트는 데이터 바인딩된 컨트롤에 렌더링 될 수 있으므로 때문에 호스트 환경에 대 한 중요 한 정보를 포함 하지 않습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 구현 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.IHierarchyData.Path%2A> 구현 하는 클래스 속성에에서는 <xref:System.Web.UI.IHierarchyData> 인터페이스입니다. `FileSystemHierarchyData` 래핑하므로 <xref:System.IO.FileSystemInfo> 개체 및 <xref:System.Web.UI.IHierarchyData.Path%2A> 속성 구현 해당 파일 시스템 경로 반환 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.IHierarchyData> 인터페이스 및 <xref:System.Web.UI.HierarchicalDataSourceControl> 클래스입니다.  
  
 [!code-csharp[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/CS/filesystemdatasource.cs#7)]
 [!code-vb[Urtue.Samples.Alexkr.FileSystemDataSource_1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Urtue.Samples.Alexkr.FileSystemDataSource_1/VB/filesystemdatasource.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.SiteMapNode.Url" />
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public string Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Type" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.IHierarchyData.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Type { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : string" Usage="System.Web.UI.IHierarchyData.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Object" /> 속성에 포함된 <see cref="P:System.Web.UI.IHierarchyData.Item" />의 형식 이름을 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.IHierarchyData" /> 개체가 나타내는 개체의 형식 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.IHierarchyData.Type%2A> 속성을 반환 하지 않습니다는 <xref:System.Type?displayProperty=nameWithType> 에 표시 되는 개체의 한 <xref:System.Web.UI.IHierarchyData> 개체입니다. 계층의 서로 다른 바인딩 가능 속성을 가진 항목을 구분 하기 위해 데이터 바인딩된 컨트롤에서 사용 하는 이름을 반환 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 기본을 작성 하는 방법을 보여 줍니다 <xref:System.Web.UI.IHierarchyData> 속성을는 <xref:System.Web.HttpResponse> 의 형식을 확인 한 다음 스트림는 <xref:System.Web.UI.IHierarchyData> 를 사용 하 여 개체는 <xref:System.Web.UI.IHierarchyData.Type%2A> 속성 및 다양 한 형식 특정 작업을 수행 하려면 개체를 캐스트 합니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Web.UI.IHierarchyData> 인터페이스입니다.  
  
 [!code-csharp[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/CS/ihd_1.aspx.cs#2)]
 [!code-vb[System.Web.UI.IHierarchyData_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.IHierarchyData_1/VB/ihd_1.aspx.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.IHierarchyData.Item" />
      </Docs>
    </Member>
  </Members>
</Type>