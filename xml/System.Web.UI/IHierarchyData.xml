<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IHierarchyData.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54401bd445a98e07a176f0bdd5128240d058c8310.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4401bd445a98e07a176f0bdd5128240d058c8310</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.UI.IHierarchyData">
          <source>Exposes a node of a hierarchical data structure, including the node object and some properties that describe characteristics of the node.</source>
          <target state="translated">노드의 특성에 대해 설명하는 노드 개체와 일부 속성을 포함하여 계층적 데이터 구조의 노드를 노출합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Web.UI.IHierarchyData">
          <source>Objects that implement the <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> interface can be contained in <ph id="ph2">&lt;see cref="T:System.Web.UI.IHierarchicalEnumerable" /&gt;</ph> collections, and are used by ASP.NET site navigation and data source controls.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> 인터페이스를 구현하는 개체는 <ph id="ph2">&lt;see cref="T:System.Web.UI.IHierarchicalEnumerable" /&gt;</ph> 컬렉션에 포함될 수 있으며 ASP.NET 사이트 탐색 및 데이터 소스 컨트롤에 사용됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.IHierarchyData">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface is implemented by classes that represent nodes of a hierarchical structure, and track the hierarchical relationships to their parent and child nodes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스의 계층 구조 노드를 나타내고 해당 부모 및 자식 노드를 계층 관계를 추적 하는 클래스에서 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.IHierarchyData">
          <source>Classes that implement the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface can be contained in collections that implement the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchicalEnumerable&gt;</ph> interface.</source>
          <target state="translated">구현 하는 클래스는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스를 구현 하는 컬렉션에 포함 될 수는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchicalEnumerable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.IHierarchyData">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface with a class that wraps a <ph id="ph2">&lt;xref:System.IO.FileSystemInfo&gt;</ph> object.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 래핑하는 클래스를 가진 인터페이스는 <ph id="ph2">&lt;xref:System.IO.FileSystemInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.IHierarchyData">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> class is a good example of a hierarchical data node, which the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface represents for ASP.NET hierarchical data source controls.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileSystemInfo&gt;</ph> 클래스는 계층적 데이터 노드를의 좋은 예로는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> ASP.NET 계층적 데이터 소스 컨트롤에 대 한 인터페이스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.IHierarchyData">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Web.UI.HierarchicalDataSourceControl&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.HierarchicalDataSourceControl&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.IHierarchyData">
          <source>The following code example demonstrates how to recursively iterate through an <ph id="ph1">&lt;xref:System.Web.UI.IHierarchicalEnumerable&gt;</ph> collection, extract the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> item from the enumerator using the <ph id="ph3">&lt;xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A&gt;</ph> method, and perform basic work with the data item.</source>
          <target state="translated">다음 코드 예제에서는 방법을 재귀적으로 반복는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchicalEnumerable&gt;</ph> 컬렉션, 추출 된 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 항목을 사용 하 여 열거자에서는 <ph id="ph3">&lt;xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A&gt;</ph> 메서드를 데이터 항목으로 기본 작업을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Web.UI.IHierarchyData.GetChildren">
          <source>Gets an enumeration object that represents all the child nodes of the current hierarchical node.</source>
          <target state="translated">현재 계층적 노드의 모든 자식 노드를 나타내는 열거형 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Web.UI.IHierarchyData.GetChildren">
          <source>An <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchicalEnumerable" /&gt;</ph> collection of child nodes of the current hierarchical node.</source>
          <target state="translated">현재 계층적 노드의 자식 노드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchicalEnumerable" /&gt;</ph> 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.IHierarchyData.GetChildren">
          <source>You can use the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> property to determine whether the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> node has child nodes.</source>
          <target state="translated">사용할 수 있습니다는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> 속성을 확인 여부는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 자식 노드가 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.IHierarchyData.GetChildren">
          <source>The following code example demonstrates how to check the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> property to determine whether the current hierarchical data node has child nodes, and retrieve them using the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData.GetChildren%2A&gt;</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 확인 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> 속성을 현재 계층적 데이터 노드에 자식 노드가 있는지 확인 하 고 검색 하를 사용 하는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData.GetChildren%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.IHierarchyData.GetChildren">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Web.UI.IHierarchyData.GetParent">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> object that represents the parent node of the current hierarchical node.</source>
          <target state="translated">현재 계층적 노드의 부모 노드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Web.UI.IHierarchyData.GetParent">
          <source>An <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> object that represents the parent node of the current hierarchical node.</source>
          <target state="translated">현재 계층적 노드의 부모 노드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.IHierarchyData.GetParent">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface does not define a HasParent convenience property, so callers must check the return value of the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData.GetParent%2A&gt;</ph> method for <ph id="ph3">`null`</ph> to determine whether the current <ph id="ph4">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> node is the root node of the hierarchical data structure to which the node belongs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스 HasParent 편의 속성을 정의 하지 않으므로 호출자의 반환 값을 확인 해야 합니다는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData.GetParent%2A&gt;</ph> 방법을 <ph id="ph3">`null`</ph> 확인 하려면 있는지 여부를 현재 <ph id="ph4">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 노드는 계층적 데이터의 루트 노드 노드가 속해 있는 구조체입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.IHierarchyData.GetParent">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.GetParent%2A&gt;</ph> method in a class that implements the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.GetParent%2A&gt;</ph> 구현 하는 클래스의 메서드는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.IHierarchyData.GetParent">
          <source>The <ph id="ph1">`FileSystemHierarchyData`</ph> class wraps a <ph id="ph2">&lt;xref:System.IO.FileSystemInfo&gt;</ph> object, and the <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData.GetParent%2A&gt;</ph> method implementation checks the type of the <ph id="ph4">&lt;xref:System.IO.FileSystemInfo&gt;</ph> object, and returns the appropriate parent object based on the type.</source>
          <target state="translated"><ph id="ph1">`FileSystemHierarchyData`</ph> 래핑하므로 <ph id="ph2">&lt;xref:System.IO.FileSystemInfo&gt;</ph> 개체 및 <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData.GetParent%2A&gt;</ph> 메서드 구현의 형식을 확인는 <ph id="ph4">&lt;xref:System.IO.FileSystemInfo&gt;</ph> 개체 및 해당 부모 개체 기반 형식으로 반환 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.IHierarchyData.GetParent">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface and the <ph id="ph2">&lt;xref:System.Web.UI.HierarchicalDataSourceControl&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스 및 <ph id="ph2">&lt;xref:System.Web.UI.HierarchicalDataSourceControl&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Web.UI.IHierarchyData.HasChildren">
          <source>Indicates whether the hierarchical data node that the <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> object represents has any child nodes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> 개체가 나타내는 계층적 데이터 노드에 자식 노드가 있는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.HasChildren">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current node has child nodes; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 노드에 자식 노드가 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.HasChildren">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> property is a convenience property that enables callers to avoid checking the return value of the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData.GetChildren%2A&gt;</ph> method for <ph id="ph3">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> 속성은 호출자의 반환 값을 확인 하지 않으려면 수 있도록 해 주는 편의 속성은 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData.GetChildren%2A&gt;</ph> 방법을 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.HasChildren">
          <source>If the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>, call the <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData.GetChildren%2A&gt;</ph> method to retrieve an <ph id="ph4">&lt;xref:System.Web.UI.IHierarchicalEnumerable&gt;</ph> collection of child nodes.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> 속성에서 반환 <ph id="ph2">`true`</ph>, 호출 된 <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData.GetChildren%2A&gt;</ph> 를 검색할 메서드는 <ph id="ph4">&lt;xref:System.Web.UI.IHierarchicalEnumerable&gt;</ph> 자식 노드의 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.HasChildren">
          <source>The following code example demonstrates how an ASP.NET hierarchical data-bound control uses an <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> object in a recursive data-binding method.</source>
          <target state="translated">다음 코드 예제에서는 계층적 ASP.NET 데이터 바인딩된 컨트롤 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 재귀 데이터 바인딩 메서드의 개체가 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.HasChildren">
          <source>The items in an <ph id="ph1">&lt;xref:System.Web.UI.IHierarchicalEnumerable&gt;</ph> collection are enumerated, and for each an <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> object is retrieved using the <ph id="ph3">&lt;xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A&gt;</ph> method.</source>
          <target state="translated">항목에는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchicalEnumerable&gt;</ph> 열거 되 고 각 컬렉션은는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 개체를 사용 하 여 검색할는 <ph id="ph3">&lt;xref:System.Web.UI.IHierarchicalEnumerable.GetHierarchyData%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.HasChildren">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> property is checked to determine whether to recurse.</source>
          <target state="translated">마지막으로 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.HasChildren%2A&gt;</ph> recurse 것인지 결정 속성을 검사 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.HasChildren">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.HierarchicalDataBoundControl&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.WebControls.HierarchicalDataBoundControl&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Web.UI.IHierarchyData.Item">
          <source>Gets the hierarchical data node that the <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> object represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> 개체가 나타내는 계층적 데이터 노드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Item">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> hierarchical data node object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 계층적 데이터 노드 개체입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Item">
          <source>While many classes that represent hierarchical data nodes, such as the <ph id="ph1">&lt;xref:System.Web.SiteMapNode&gt;</ph> class, implement the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface directly, other classes only act as a wrapper for a class that does not implement the interface.</source>
          <target state="translated">다 수의 클래스와 같은 계층적 데이터 노드를 나타내는 반면는 <ph id="ph1">&lt;xref:System.Web.SiteMapNode&gt;</ph> 클래스를 구현는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스를 직접, 다른 클래스는 인터페이스를 구현 하지 않는 클래스에 대 한 래퍼만 작동 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Item">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Item%2A&gt;</ph> property is provided for these design situations, when business objects are functionally equivalent to an <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> object but cannot be redesigned easily.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Item%2A&gt;</ph> 비즈니스 개체는 기능적으로 동일 때 경우에 대 한 속성은 제공 된 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 개체 하지만 쉽게 다시 디자인 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Item">
          <source>The following code example demonstrates how to access <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> properties, check the type of an <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> object using the <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData.Type%2A&gt;</ph> property, and cast the object to perform more type-specific operations.</source>
          <target state="translated">다음 코드 예제에서는 액세스 하는 방법을 보여 줍니다. <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 속성의 유형을 확인는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 를 사용 하 여 개체는 <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData.Type%2A&gt;</ph> 속성과 유형별은 다양 한 작업을 수행 하려면 개체를 캐스팅 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Item">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Web.UI.IHierarchyData.Path">
          <source>Gets the hierarchical path of the node.</source>
          <target state="translated">노드의 계층 경로를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Path">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that identifies the hierarchical path relative to the current node.</source>
          <target state="translated">현재 노드에 상대적인 계층 경로를 식별하는 <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Path">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph> property can be passed to the <ph id="ph2">&lt;xref:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView%2A&gt;</ph> method to retrieve the <ph id="ph3">&lt;xref:System.Web.UI.HierarchicalDataSourceView&gt;</ph> object that corresponds to the node identified by <ph id="ph4">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph> 속성에 전달 될 수는 <ph id="ph2">&lt;xref:System.Web.UI.HierarchicalDataSourceControl.GetHierarchicalView%2A&gt;</ph> 를 검색할 메서드는 <ph id="ph3">&lt;xref:System.Web.UI.HierarchicalDataSourceView&gt;</ph> 으로 식별 된 노드에 해당 하는 개체 <ph id="ph4">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Path">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph> property should not contain any sensitive information about the host environment, because it might be rendered to the client in a data-bound control.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph> 속성으로 클라이언트는 데이터 바인딩된 컨트롤에 렌더링 될 수 있으므로 때문에 호스트 환경에 대 한 중요 한 정보를 포함 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Path">
          <source>The following code example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph> property in a class that implements the <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface.</source>
          <target state="translated">다음 코드 예제에서는 구현 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph> 구현 하는 클래스 속성에에서는 <ph id="ph2">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Path">
          <source>The <ph id="ph1">`FileSystemHierarchyData`</ph> class wraps a <ph id="ph2">&lt;xref:System.IO.FileSystemInfo&gt;</ph> object, and the <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph> property implementation returns its file system path.</source>
          <target state="translated"><ph id="ph1">`FileSystemHierarchyData`</ph> 래핑하므로 <ph id="ph2">&lt;xref:System.IO.FileSystemInfo&gt;</ph> 개체 및 <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData.Path%2A&gt;</ph> 속성 구현 해당 파일 시스템 경로 반환 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Path">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface and the <ph id="ph2">&lt;xref:System.Web.UI.HierarchicalDataSourceControl&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스 및 <ph id="ph2">&lt;xref:System.Web.UI.HierarchicalDataSourceControl&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.Web.UI.IHierarchyData.Type">
          <source>Gets the name of the type of <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> contained in the <ph id="ph2">&lt;see cref="P:System.Web.UI.IHierarchyData.Item" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 속성에 포함된 <ph id="ph2">&lt;see cref="P:System.Web.UI.IHierarchyData.Item" /&gt;</ph>의 형식 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Type">
          <source>The name of the type of object that the <ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> object represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.UI.IHierarchyData" /&gt;</ph> 개체가 나타내는 개체의 형식 이름입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Type">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Type%2A&gt;</ph> property does not return the <ph id="ph2">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> of the object represented in an <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData.Type%2A&gt;</ph> 속성을 반환 하지 않습니다는 <ph id="ph2">&lt;xref:System.Type?displayProperty=nameWithType&gt;</ph> 에 표시 되는 개체의 한 <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Type">
          <source>It returns a name used by data-bound controls to differentiate between items in a hierarchy that have different bindable properties.</source>
          <target state="translated">계층의 서로 다른 바인딩 가능 속성을 가진 항목을 구분 하기 위해 데이터 바인딩된 컨트롤에서 사용 하는 이름을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Type">
          <source>The following code example demonstrates how to write the basic <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> properties to an <ph id="ph2">&lt;xref:System.Web.HttpResponse&gt;</ph> stream, then check the type of an <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> object using the <ph id="ph4">&lt;xref:System.Web.UI.IHierarchyData.Type%2A&gt;</ph> property and cast the object to perform more type-specific operations.</source>
          <target state="translated">다음 코드 예제에서는 기본을 작성 하는 방법을 보여 줍니다 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 속성을는 <ph id="ph2">&lt;xref:System.Web.HttpResponse&gt;</ph> 의 형식을 확인 한 다음 스트림는 <ph id="ph3">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 를 사용 하 여 개체는 <ph id="ph4">&lt;xref:System.Web.UI.IHierarchyData.Type%2A&gt;</ph> 속성 및 다양 한 형식 특정 작업을 수행 하려면 개체를 캐스트 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.IHierarchyData.Type">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> interface.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.IHierarchyData&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>