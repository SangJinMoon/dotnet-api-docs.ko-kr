<Type Name="Page" FullName="System.Web.UI.Page">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b65c377cb9b1c281d1a229b674c0e23ee51b2a3a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36576934" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Page : System.Web.UI.TemplateControl, System.Web.IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Page extends System.Web.UI.TemplateControl implements class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Page" />
  <TypeSignature Language="VB.NET" Value="Public Class Page&#xA;Inherits TemplateControl&#xA;Implements IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class Page : System::Web::UI::TemplateControl, System::Web::IHttpHandler" />
  <TypeSignature Language="F#" Value="type Page = class&#xA;    inherit TemplateControl&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.TemplateControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Load")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("Microsoft.VisualStudio.Web.WebForms.WebFormCodeDomSerializer, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.TypeCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Web.WebForms.WebFormDesigner, Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.Design.IRootDesigner))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignerCategory("ASPXCodeBehind")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ASP.NET 웹 응용 프로그램을 호스트하는 서버에서 요청된 .aspx 파일(Web Forms 페이지라고도 함)을 나타냅니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page> 클래스는 확장명이.aspx 파일과 연결 합니다. 이러한 파일은 런타임에 컴파일됩니다 <xref:System.Web.UI.Page> 개체 및 서버 메모리에 캐시 합니다.  
  
 코드 숨김 기술을 사용 하 여 Web Forms 페이지를 만들려는 경우에이 클래스에서 파생 됩니다. 신속한 응용 프로그램 RAD (개발) 디자이너, Microsoft Visual Studio와 같은 자동으로 Web Forms 페이지를 만드는이 모델을 사용 합니다.  
  
 <xref:System.Web.UI.Page> 역할 구현 하는 제외 하 고 페이지의 모든 서버 컨트롤에 대 한 명명 컨테이너는 <xref:System.Web.UI.INamingContainer> 인터페이스 또는이 인터페이스를 구현 하는 컨트롤의 자식 컨트롤입니다.  
  
 <xref:System.Web.UI.Page> 클래스는 웹 응용 프로그램에 대 한 사용자 인터페이스 역할을 하 고 따라서 방법이 필요 보안 코드를 작성 하 고 응용 프로그램 보안을 위한 최선의 구현을 확인 하는 컨트롤입니다. 이러한 항목에 대 한 일반적인 정보를 참조 하십시오. [개요의 웹 응용 프로그램 보안 위협](http://msdn.microsoft.com/library/88d61678-f84e-4622-ae80-53128821855a), [NIB: 보안 정책에 대 한 유용한 정보](http://msdn.microsoft.com/library/d49bc4d5-efb7-4caa-a2fe-e4d3cec63c05), 및 [주요 보안 개념](~/docs/standard/security/key-security-concepts.md)합니다. 보다 구체적인 정보를 참조 하십시오. [보안 표준 컨트롤](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [하는 방법: 오류 메시지를 안전 하 게 보호 하는 표시](http://msdn.microsoft.com/library/6f70ac33-6e11-4e98-ab7d-bae9c0e7eefa), [하는 방법: 보호에 대 한 스크립트에 의해 악용 HTML 적용 하 여 웹 응용 프로그램 문자열 인코딩](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), 및 [유효성 검사 컨트롤 소개](http://msdn.microsoft.com/library/3c0e7514-cff2-4bed-936d-ee3f7b740190)합니다.  
  
   
  
## Examples  
 소스 코드를 Visual Studio 웹 사이트 프로젝트는이 항목에 수반: [다운로드](http://go.microsoft.com/fwlink/?LinkId=192425)합니다.  
  
 다음 코드 예제에서는 방법을 <xref:System.Web.UI.Page> 클래스는 코드 숨김 페이지 모델에 사용 됩니다. 코드 숨김 소스 파일은 기본 페이지 클래스에서 상속 되는 partial 클래스를 선언 하는 참고 합니다. 기본 페이지 클래스 <xref:System.Web.UI.Page>, 다른 클래스에서 파생 되는 이름일 수도 <xref:System.Web.UI.Page>합니다. 또한 partial 클래스가 필요 없이 페이지에 정의 된 컨트롤을 사용 하 여 필드 멤버도 정의 하는 코드 숨김 파일을 허용 하는지 note 합니다.  
  
 [!code-csharp[System.Web.UI.Page_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page_Overview/cs/pageexample.aspx.cs#2)]
 [!code-vb[System.Web.UI.Page_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page_Overview/vb/pageexample.aspx.vb#2)]  
  
 다음 코드 예제에서는 앞의 코드 숨김 소스 파일에 해당 하는.aspx 파일을 보여 줍니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.UI.Page_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page_Overview/cs/pageexample.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page_Overview/vb/pageexample.aspx#1)]  
  
 지시문을 사용 하 고 사용 해야 합니다는 `Inherits` 및 `CodeFile` .aspx 파일에 코드 숨김 파일을 연결 하는 특성입니다. 이 예제에서는 `Inherits` 특성 나타냅니다는 `MyCodeBehind` 클래스 및 `CodeFile` 특성 클래스를 포함 하는 언어 관련 파일의 경로를 나타냅니다.  
  
 다음 코드 예제는 단일 파일 페이지 모델 및 액세스 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.Page.IsPostBack%2A> 속성 및 <xref:System.Web.UI.Page.Response%2A> 의 속성은 <xref:System.Web.UI.Page>합니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page_Overview2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page_Overview2/cs/pageexample.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page_Overview2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page_Overview2/vb/pageexample.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Control" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Page ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Page();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 생성자는 모든 필드를 기본값으로 초기화 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddContentTemplate">
      <MemberSignature Language="C#" Value="protected internal void AddContentTemplate (string templateName, System.Web.UI.ITemplate template);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddContentTemplate(string templateName, class System.Web.UI.ITemplate template) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.AddContentTemplate(System.String,System.Web.UI.ITemplate)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddContentTemplate (templateName As String, template As ITemplate)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddContentTemplate(System::String ^ templateName, System::Web::UI::ITemplate ^ template);" />
      <MemberSignature Language="F#" Value="member this.AddContentTemplate : string * System.Web.UI.ITemplate -&gt; unit" Usage="page.AddContentTemplate (templateName, template)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templateName" Type="System.String" />
        <Parameter Name="template" Type="System.Web.UI.ITemplate" />
      </Parameters>
      <Docs>
        <param name="templateName">추가할 내용 템플릿의 이름입니다.</param>
        <param name="template">내용 템플릿입니다.</param>
        <summary>현재 페이지 또는 마스터 페이지가 마스터 페이지를 참조하는 경우 페이지를 초기화하는 동안 Content 컨트롤에서 마스터 페이지로 전달되는 내용의 컬렉션을 만들기 위해 호출됩니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">이름이 같은 내용 템플릿이 이미 있는 경우</exception>
        <altmember cref="T:System.Web.UI.MasterPage" />
        <altmember cref="T:System.Web.UI.WebControls.Content" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddOnPreRenderCompleteAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>비동기 페이지에 대한 시작 및 종료 이벤트 처리기 대리자를 등록합니다.</summary>
        <altmember cref="T:System.Web.UI.MasterPage" />
        <altmember cref="T:System.Web.UI.WebControls.Content" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOnPreRenderCompleteAsync">
      <MemberSignature Language="C#" Value="public void AddOnPreRenderCompleteAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnPreRenderCompleteAsync(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.AddOnPreRenderCompleteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOnPreRenderCompleteAsync (beginHandler As BeginEventHandler, endHandler As EndEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddOnPreRenderCompleteAsync(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler);" />
      <MemberSignature Language="F#" Value="member this.AddOnPreRenderCompleteAsync : System.Web.BeginEventHandler * System.Web.EndEventHandler -&gt; unit" Usage="page.AddOnPreRenderCompleteAsync (beginHandler, endHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
      </Parameters>
      <Docs>
        <param name="beginHandler">
          <see cref="T:System.Web.BeginEventHandler" /> 메서드의 대리자입니다.</param>
        <param name="endHandler">
          <see cref="T:System.Web.EndEventHandler" /> 메서드의 대리자입니다.</param>
        <summary>비동기 페이지에 대한 상태 정보를 필요로 하지 않는 시작 및 종료 이벤트 처리기 대리자를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.Page.AddOnPreRenderCompleteAsync%2A> 메서드를 비동기 웹 페이지에 처리기를 추가 합니다.  
  
 여러 비동기 처리기;에 등록할 수 있습니다. 그러나 한 번에 하나만 처리기 실행 됩니다. 여러 비동기 메서드를 동시에 처리 하려는 경우에 단일을 사용 해야 <xref:System.Web.BeginEventHandler> 메서드 및 해당 처리기에서 여러 개의 비동기 작업을 시작 합니다.  
  
 비동기 처리기 사이 호출 된 <xref:System.Web.UI.Control.PreRender> 및 <xref:System.Web.UI.Page.PreRenderComplete> 이벤트입니다.  
  
 첫째, 모든 <xref:System.Web.UI.Page> 이벤트 (통해는 <xref:System.Web.UI.Control.PreRender> 이벤트)은 실행 시 다음 등록 된 각 <xref:System.Web.BeginEventHandler> 메서드를 호출 합니다. 처리기 완료 되 면 해당 <xref:System.Web.EndEventHandler> 메서드를 호출 합니다. 여러 비동기 처리기가 있는 경우 다음 처리기가 호출 됩니다.  
  
 등록 된 비동기 이벤트 처리기가 호출 된 후 페이지 이벤트의 나머지를를 호출 부터는 <xref:System.Web.UI.Page.PreRenderComplete> 이벤트입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 비동기 요청을 사용 하 여 로컬 웹 서버 기본 페이지의 HTML 소스 코드를 표시 하는 <xref:System.Web.UI.WebControls.TextBox> 제어 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[PageAddOnPreRenderCompleteAsync#1](~/samples/snippets/csharp/VS_Snippets_WebNet/PageAddOnPreRenderCompleteAsync/CS/pageaddonprerendercompleteasynccs.aspx#1)]
 [!code-aspx-vb[PageAddOnPreRenderCompleteAsync#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/PageAddOnPreRenderCompleteAsync/VB/pageaddonprerendercompleteasyncvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see langword="&lt;async&gt;" /> 페이지 지시문이 <see langword="true" />로 설정되지 않은 경우  \- 또는-  <see cref="M:System.Web.UI.Page.AddOnPreRenderCompleteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)" /> 메서드가 <see cref="E:System.Web.UI.Control.PreRender" /> 이벤트 다음에 호출됩니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Web.UI.PageAsyncTask.BeginHandler" /> 또는 <see cref="P:System.Web.UI.PageAsyncTask.EndHandler" />가 <see langword="null" />인 경우</exception>
        <altmember cref="T:System.Web.UI.MasterPage" />
        <altmember cref="T:System.Web.UI.WebControls.Content" />
      </Docs>
    </Member>
    <Member MemberName="AddOnPreRenderCompleteAsync">
      <MemberSignature Language="C#" Value="public void AddOnPreRenderCompleteAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddOnPreRenderCompleteAsync(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.AddOnPreRenderCompleteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddOnPreRenderCompleteAsync (beginHandler As BeginEventHandler, endHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddOnPreRenderCompleteAsync(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.AddOnPreRenderCompleteAsync : System.Web.BeginEventHandler * System.Web.EndEventHandler * obj -&gt; unit" Usage="page.AddOnPreRenderCompleteAsync (beginHandler, endHandler, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">
          <see cref="T:System.Web.BeginEventHandler" /> 메서드의 대리자입니다.</param>
        <param name="endHandler">
          <see cref="T:System.Web.EndEventHandler" /> 메서드의 대리자입니다.</param>
        <param name="state">이벤트 처리기에 대한 상태 정보가 들어 있는 개체입니다.</param>
        <summary>비동기 페이지에 대한 시작 및 종료 이벤트 처리기 대리자를 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.Page.AddOnPreRenderCompleteAsync%2A> 메서드를 비동기 웹 페이지에 상태 정보를 필요로 하는 처리기를 추가 합니다. 에 전달 되는 개체는 `state` 매개 변수는 응용 프로그램에 필요한 이벤트 처리기 대리자에 지정 된 간에 정보를 전송 하는 모든 개체 일 수는 `beginHandler` 및 `endHandler` 매개 변수입니다.  
  
 여러 비동기 처리기;에 등록할 수 있습니다. 그러나 한 번에 하나만 처리기 실행 됩니다. 여러 비동기 메서드를 동시에 처리 하려는 경우에 단일을 사용 해야 <xref:System.Web.BeginEventHandler> 메서드 및 해당 처리기에서 여러 개의 비동기 작업을 시작 합니다.  
  
 비동기 처리기 사이 호출 된 <xref:System.Web.UI.Control.PreRender> 및 <xref:System.Web.UI.Page.PreRenderComplete> 이벤트입니다.  
  
 첫째, 모든 <xref:System.Web.UI.Page> 이벤트 (통해는 <xref:System.Web.UI.Control.PreRender> 이벤트)은 실행 시 다음 등록 된 각 <xref:System.Web.BeginEventHandler> 메서드를 호출 합니다. 처리기 완료 되 면 해당 <xref:System.Web.EndEventHandler> 메서드를 호출 합니다. 여러 비동기 처리기가 있는 경우 다음 처리기가 호출 됩니다.  
  
 등록 된 비동기 이벤트 처리기가 호출 된 후 페이지 이벤트의 나머지를를 호출 부터는 <xref:System.Web.UI.Page.PreRenderComplete> 이벤트입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 비동기 요청을 사용 하 여 로컬 웹 서버 기본 페이지의 HTML 소스 코드를 표시 하는 <xref:System.Web.UI.WebControls.TextBox> 제어 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[PageAddOnPreRenderCompleteAsync#1](~/samples/snippets/csharp/VS_Snippets_WebNet/PageAddOnPreRenderCompleteAsync/CS/pageaddonprerendercompleteasynccs.aspx#1)]
 [!code-aspx-vb[PageAddOnPreRenderCompleteAsync#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/PageAddOnPreRenderCompleteAsync/VB/pageaddonprerendercompleteasyncvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see langword="&lt;async&gt;" /> 페이지 지시문이 <see langword="true" />로 설정되지 않은 경우  \- 또는-  <see cref="M:System.Web.UI.Page.AddOnPreRenderCompleteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)" /> 메서드가 <see cref="E:System.Web.UI.Control.PreRender" /> 이벤트 다음에 호출됩니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Web.UI.PageAsyncTask.BeginHandler" /> 또는 <see cref="P:System.Web.UI.PageAsyncTask.EndHandler" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AddWrappedFileDependencies">
      <MemberSignature Language="C#" Value="protected internal void AddWrappedFileDependencies (object virtualFileDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddWrappedFileDependencies(object virtualFileDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.AddWrappedFileDependencies(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddWrappedFileDependencies (virtualFileDependencies As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddWrappedFileDependencies(System::Object ^ virtualFileDependencies);" />
      <MemberSignature Language="F#" Value="member this.AddWrappedFileDependencies : obj -&gt; unit" Usage="page.AddWrappedFileDependencies virtualFileDependencies" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualFileDependencies" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="virtualFileDependencies">파일 이름 목록이 들어 있는 <see cref="T:System.Object" />입니다.</param>
        <summary>현재 페이지를 구성하는 종속 파일 목록을 추가합니다. 이 메서드는 ASP.NET 페이지 프레임워크에서 내부적으로 사용되며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.AddWrappedFileDependencies%2A> 메서드는 현재 페이지를 구성 하는 사용자 제어 파일 등 파일의 목록을 추가 합니다. 이러한 페이지 중 하나를 수정 하는 경우 전체 페이지 다음에 필요할 때가 컴파일됩니다. 이 메서드는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public System.Web.HttpApplicationState Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpApplicationState Application" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As HttpApplicationState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpApplicationState ^ Application { System::Web::HttpApplicationState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Application : System.Web.HttpApplicationState" Usage="System.Web.UI.Page.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpApplicationState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 웹 요청에 대한 <see cref="T:System.Web.HttpApplicationState" /> 개체를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.HttpApplicationState" /> 클래스에 있는 현재 데이터입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[Page.Application_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page.Application_Sample1/CS/applicationcs.aspx#1)]
 [!code-vb[Page.Application_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page.Application_Sample1/VB/applicationvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpApplicationState" />
      </Docs>
    </Member>
    <Member MemberName="AspCompatBeginProcessRequest">
      <MemberSignature Language="C#" Value="protected IAsyncResult AspCompatBeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult AspCompatBeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback cb, object extraData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.AspCompatBeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function AspCompatBeginProcessRequest (context As HttpContext, cb As AsyncCallback, extraData As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ AspCompatBeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ cb, System::Object ^ extraData);" />
      <MemberSignature Language="F#" Value="member this.AspCompatBeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="page.AspCompatBeginProcessRequest (context, cb, extraData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="cb" Type="System.AsyncCallback" />
        <Parameter Name="extraData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">현재 요청에 대한 정보가 포함된 <see cref="T:System.Web.HttpContext" />입니다.</param>
        <param name="cb">콜백 메서드입니다.</param>
        <param name="extraData">ASP 요청과 같은 방식으로 요청을 처리하는 데 필요한 모든 추가 데이터입니다.</param>
        <summary>ASP(Active Server Page) 리소스에 대한 요청을 시작합니다. 이 메서드는 이전 ASP 응용 프로그램과의 호환성을 위해 제공됩니다.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하지 마십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AspCompatEndProcessRequest">
      <MemberSignature Language="C#" Value="protected void AspCompatEndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AspCompatEndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.AspCompatEndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AspCompatEndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AspCompatEndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.AspCompatEndProcessRequest : IAsyncResult -&gt; unit" Usage="page.AspCompatEndProcessRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">요청으로 생성된 ASP 페이지입니다.</param>
        <summary>ASP 리소스에 대한 요청을 종료합니다. 이 메서드는 이전 ASP 응용 프로그램과의 호환성을 위해 제공됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하지 마십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AspCompatMode">
      <MemberSignature Language="C#" Value="protected bool AspCompatMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AspCompatMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.AspCompatMode" />
      <MemberSignature Language="VB.NET" Value="Protected Property AspCompatMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool AspCompatMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AspCompatMode : bool with get, set" Usage="System.Web.UI.Page.AspCompatMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>STA(단일 스레드 아파트) 스레드에서 페이지를 실행할 수 있는지 여부를 나타내는 값을 설정합니다.</summary>
        <value>페이지에서 ASP 코드를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 로 설정 하면 `true`,이 속성 페이지를 단일 스레드 아파트 (STA) 스레드에서 실행할 수 있습니다. 이 페이지를에서 Visual Basic 6.0을 사용 하 여 개발 하는 구성 요소와 같은 STA 구성 요소를 호출할 수 있습니다. 이 속성을 설정 `true` 페이지에서 관리 되지 않는 ASP 내장 개체에 대 한 액세스를 필요로 하는 COM + 구성 요소를 호출할 수도 있습니다. ASP를 통해 액세스할 수 `ObjectContext` 개체 또는 `OnStartPage` 메서드.  
  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정의 `aspcompat` 특성을 `true` .aspx 파일에 지시문을 사용 합니다. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncMode">
      <MemberSignature Language="C#" Value="protected bool AsyncMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.AsyncMode" />
      <MemberSignature Language="VB.NET" Value="Protected Property AsyncMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool AsyncMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncMode : bool with get, set" Usage="System.Web.UI.Page.AsyncMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지가 동기식으로 처리되는지 또는 비동기식으로 처리되는지 여부를 나타내는 값을 설정합니다.</summary>
        <value>페이지가 비동기식으로 처리되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.AsyncMode%2A> 속성이 <xref:System.Web.UI.Page> 파서 페이지에 대 한 코드가 생성 될 때입니다. 사용 하 여는 `Async` 지시문에서 특성을이 값을 설정 합니다.  
  
 비동기 페이지 작동 하지 않습니다는 `AspCompat` 특성이로 설정 된 `true` 또는 `Transaction` 이외의 값으로 설정 되어 특성 `Disabled` 지시문에 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncPageBeginProcessRequest">
      <MemberSignature Language="C#" Value="protected IAsyncResult AsyncPageBeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object extraData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult AsyncPageBeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object extraData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.AsyncPageBeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function AsyncPageBeginProcessRequest (context As HttpContext, callback As AsyncCallback, extraData As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ AsyncPageBeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ extraData);" />
      <MemberSignature Language="F#" Value="member this.AsyncPageBeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="page.AsyncPageBeginProcessRequest (context, callback, extraData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="extraData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">요청에 대한 <see cref="T:System.Web.HttpContext" />입니다.</param>
        <param name="callback">프로세스가 완료되면 이를 알려 주는 콜백 메서드입니다.</param>
        <param name="extraData">비동기 메서드의 상태 데이터입니다.</param>
        <summary>비동기 페이지 요청 처리를 시작합니다.</summary>
        <returns>비동기 요청을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncPageEndProcessRequest">
      <MemberSignature Language="C#" Value="protected void AsyncPageEndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AsyncPageEndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.AsyncPageEndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AsyncPageEndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AsyncPageEndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.AsyncPageEndProcessRequest : IAsyncResult -&gt; unit" Usage="page.AsyncPageEndProcessRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">보류 중인 비동기 요청을 참조하는 <see cref="T:System.IAsyncResult" />입니다.</param>
        <summary>비동기 페이지 요청 처리를 종료합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan AsyncTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AsyncTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.AsyncTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AsyncTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncTimeout : TimeSpan with get, set" Usage="System.Web.UI.Page.AsyncTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 작업을 처리할 때 사용되는 시간 제한 간격을 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>비동기 작업을 완료하는 데 허용되는 시간 간격이 포함된 <see cref="T:System.TimeSpan" />입니다. 기본 시간 간격은 45초입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 페이지의 비동기 시간 제한 비동기 작업을 수행 하는 페이지에서 대기 하는 시간을 나타냅니다. 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 사용 하 여 페이지 비동기 시간 제한 간격 설정는 웹 구성 파일 또는 지시문에 있습니다. Page 지시문 페이지 구성 섹션에 설정 된 값을 덮어씁니다.  
  
 사용 하 여 비동기 작업 정의 <xref:System.Web.UI.PageAsyncTask> 클래스 및 시작 하는, 종료 및 시간 제한 처리기를 등록 합니다. 비동기 작업은 지정 된 시간 간격에 완료 되지 않으면, 제한 시간 처리기가 호출 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.AsyncTimeout%2A> 속성으로는 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 및 <xref:System.Web.UI.Page.RegisterAsyncTask%2A> 메서드. Note 시작, 종료 및 제한 시간 처리기를 사용 합니다. 예제에서는 인위적 지연을 포함 되는 비동기 작업에 지정 된 대로 작업에 대 한 할당된 된 시간 초과 상황을 보여 주기 위해는 <xref:System.Web.UI.Page.AsyncTimeout%2A> 속성입니다. 실제 시나리오에서는 데이터베이스 호출 또는 이미지 생성을 수행 하는 비동기 작업을 사용할 수 예를 들어 및 제한 시간 처리기는 지정 된 시간 내에 작업을 수행 하지 않는 경우 정상적인 저하를 제공 합니다. <xref:System.Web.UI.Page.AsyncTimeout%2A> page 지시문에서 속성을 설정 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page.AsyncTimeout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.AsyncTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/vb/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.Page.AsyncTimeout#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/CS/page_asynctask.cs#2)]
 [!code-vb[System.Web.UI.Page.AsyncTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/vb/page_asynctask.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">속성이 음수값으로 설정되었습니다.</exception>
        <altmember cref="M:System.Web.UI.Page.ExecuteRegisteredAsyncTasks" />
        <altmember cref="M:System.Web.UI.Page.RegisterAsyncTask(System.Web.UI.PageAsyncTask)" />
        <altmember cref="T:System.Web.UI.PageAsyncTask" />
      </Docs>
    </Member>
    <Member MemberName="AutoPostBackControl">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control AutoPostBackControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control AutoPostBackControl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.AutoPostBackControl" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPostBackControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ AutoPostBackControl { System::Web::UI::Control ^ get(); void set(System::Web::UI::Control ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPostBackControl : System.Web.UI.Control with get, set" Usage="System.Web.UI.Page.AutoPostBackControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>다시 게시를 수행하는 데 사용되는 페이지의 컨트롤을 가져오거나 설정합니다.</summary>
        <value>다시 게시를 수행하는 데 사용되는 컨트롤입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public bool Buffer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public Property Buffer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Buffer { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : bool with get, set" Usage="System.Web.UI.Page.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 출력이 버퍼링되는지 여부를 나타내는 값을 설정합니다.</summary>
        <value>페이지 출력이 버퍼링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정의 <xref:System.Web.UI.Page.Buffer%2A> 특성을 `true` .aspx 파일에 지시문을 사용 합니다. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
> [!NOTE]
>  <xref:System.Web.UI.Page.Buffer%2A> 속성 설정 하 고 가져옵니다는 <xref:System.Web.HttpResponse.BufferOutput%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cache">
      <MemberSignature Language="C#" Value="public System.Web.Caching.Cache Cache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Caching.Cache Cache" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Cache" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cache As Cache" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Caching::Cache ^ Cache { System::Web::Caching::Cache ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Cache : System.Web.Caching.Cache" Usage="System.Web.UI.Page.Cache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Caching.Cache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지가 들어 있는 응용 프로그램과 관련된 <see cref="T:System.Web.Caching.Cache" /> 개체를 가져옵니다.</summary>
        <value>페이지가 들어 있는 응용 프로그램과 관련된 <see cref="T:System.Web.Caching.Cache" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 응용 프로그램의 <xref:System.Web.Caching.Cache> 개체를 저장 하 고 이후 요청에서 임의의 데이터를 검색할 수 있습니다. 캐시 특히 페이지 또는 사용자 세션과 연결 되지 않습니다. 응용 프로그램 성능을 향상 하는 데 주로 사용 됩니다. 자세한 내용은 참조 [응용 프로그램 데이터 캐싱](http://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d)합니다. 응용 프로그램에서 캐싱 및 페이지 출력 캐싱을 간의 차이점에 자세한 내용은 참조 [ASP.NET Caching 개요](http://msdn.microsoft.com/library/5ec28012-4972-4dc3-b3e8-9d20401fe11d)합니다.  
  
   
  
## Examples  
 으로 두 정수의 합을 삽입 하는 다음 코드 예제는 <xref:System.Web.Caching.Cache?displayProperty=nameWithType> 를 사용 하 여 개체는 <xref:System.Web.UI.Page.Cache%2A?displayProperty=nameWithType> 속성입니다. 그런 다음 사용 하 여 값 검색는 <xref:System.Web.Caching.Cache.Get%2A?displayProperty=nameWithType> 메서드를 기록 하 고는 <xref:System.Web.UI.WebControls.Label> 웹 서버 컨트롤입니다.  
  
 [!code-csharp[System.Web.Page.Cache_Replacement#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Page.Cache_Replacement/CS/pagecachecs.aspx#1)]
 [!code-vb[System.Web.Page.Cache_Replacement#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Page.Cache_Replacement/VB/pagecachevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.Caching.Cache" />의 인스턴스가 만들어지지 않은 경우</exception>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="ClientQueryString">
      <MemberSignature Language="C#" Value="public string ClientQueryString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientQueryString" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ClientQueryString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientQueryString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientQueryString { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientQueryString : string" Usage="System.Web.UI.Page.ClientQueryString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요청한 URL의 쿼리 문자열 부분을 가져옵니다.</summary>
        <value>요청한 URL의 쿼리 문자열 부분입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.ClientQueryString%2A> 속성 브라우저에서 요청 된 URL의 쿼리 문자열 부분을 포함 합니다. 예를 들어, 요청 된 URL은 "http://www.contoso.com/default.aspx?id=100", <xref:System.Web.UI.Page.ClientQueryString%2A> 속성에 포함 됩니다 "id = 100"입니다. <xref:System.Web.UI.Page.ClientQueryString%2A> 속성은 암호화 됩니다; 사용 하 여는 <xref:System.Web.HttpServerUtility.UrlDecode%2A?displayProperty=nameWithType> 메서드 쿼리 문자열을 디코딩할 수 있습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientScript">
      <MemberSignature Language="C#" Value="public System.Web.UI.ClientScriptManager ClientScript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ClientScriptManager ClientScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ClientScript" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientScript As ClientScriptManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ClientScriptManager ^ ClientScript { System::Web::UI::ClientScriptManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientScript : System.Web.UI.ClientScriptManager" Usage="System.Web.UI.Page.ClientScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ClientScriptManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지에서 스크립트를 관리, 등록, 추가하는 데 사용되는 <see cref="T:System.Web.UI.ClientScriptManager" /> 개체를 가져옵니다.</summary>
        <value>
          <see cref="T:System.Web.UI.ClientScriptManager" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.Page.ClientScript%2A> 가져올 속성을 <xref:System.Web.UI.ClientScriptManager> 관리, 등록, 웹 페이지에 스크립트를 추가 하는 데 사용할 수 있습니다. 자세한 내용은 <xref:System.Web.UI.ClientScriptManager> 클래스를 참조하세요.  
  
 <xref:System.Web.UI.ClientScriptManager> 클래스는의 새로운 [!INCLUDE[vstecasplong](~/includes/vstecasplong-md.md)] 하 고 대체 <xref:System.Web.UI.Page> 이제 사용 되지 않는 스크립트를 관리 하기 위한 메서드를 클래스입니다.  
  
   
  
## Examples  
 예를 들어 참조는 <xref:System.Web.UI.ClientScriptManager> 클래스 개요 항목입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="ClientTarget">
      <MemberSignature Language="C#" Value="public string ClientTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientTarget" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ClientTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientTarget As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientTarget { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientTarget : string with get, set" Usage="System.Web.UI.Page.ClientTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>브라우저의 자동 검색 기능을 재정의하고 페이지가 특정 브라우저 클라이언트에 렌더링되는 방법을 지정할 수 있는 값을 가져오거나 설정합니다.</summary>
        <value>재정의할 브라우저 기능을 지정하는 <see cref="T:System.String" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정 하지 않은 경우는 <xref:System.Web.UI.Page.ClientTarget%2A> 속성에는 <xref:System.Web.HttpBrowserCapabilities> 연관 된 개체는 <xref:System.Web.UI.Page.Request%2A?displayProperty=nameWithType> 속성은 클라이언트 브라우저의 기능을 반영 합니다. 이 속성을 설정한 경우 클라이언트 브라우저 검색이 비활성화 되 고 브라우저 기능을 제공 하는 값 (별칭)와 관련 된 사용 됩니다.  
  
 웹 서버 컴퓨터에서 루트 Web.config 구성 파일 일반 사용자 에이전트 문자열에 대 한 약식으로 사용할 수 있는 다음과 같은 기본 별칭을 정의 합니다.  
  
-   `uplevel`를 지정 하는 Internet Explorer 6.0에 해당 하는 브라우저 기능입니다.  
  
-   `downlevel`를 지정 하는 클라이언트 스크립트를 지원 하지 않는 이전 버전의 브라우저에 해당 하는 브라우저 기능입니다. 클라이언트 스크립트를 사용 하지 않도록 설정 하는 브라우저에서 웹 페이지 작동 방식을 확인 하려면이 별칭을 사용할 수 있습니다.  
  
 프로그래밍 방식으로이 속성을 사용 하 여 별칭을 설정할 수 있습니다 또는 선언적으로 사용 하 여 설정할 수 있습니다는 `ClientTarget` 지시문의 특성입니다.  
  
 에 추가 별칭을 정의할 수 있습니다는 `clientTarget` 응용 프로그램 수준 Web.config 파일의 섹션입니다. 자세한 내용은 참조 [clientTarget 요소 (ASP.NET 설정 스키마)](http://msdn.microsoft.com/library/17a0fa6e-a065-49cc-b900-ef73eda6a922)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 정의 `ie302` 별칭의 Web.config 파일에 응용 프로그램을 구성 하는 데 필요한 섹션이 포함 됩니다. 이 별칭을 사용 하 여 설정할 수 있습니다는 <xref:System.Web.UI.Page.ClientTarget%2A> 속성을 `ie302` Internet Explorer 3.02 브라우저에 맞게 페이지 및 사용자 지정 합니다.  
  
```  
<configuration>  
  <system.web>  
   <clientTarget>  
    <add alias="ie302" useragent="Mozilla/2.0 (compatible; MSIE 3.02; Windows NT 3.5)" />  
   </clientTarget>  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
        <altmember cref="P:System.Web.HttpRequest.Browser" />
        <altmember cref="P:System.Web.HttpRequest.UserAgent" />
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public int CodePage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.CodePage" />
      <MemberSignature Language="VB.NET" Value="Public Property CodePage As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CodePage { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CodePage : int with get, set" Usage="System.Web.UI.Page.CodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Web.UI.Page" />에 대한 코드 페이지 식별자를 설정합니다.</summary>
        <value>현재 <see cref="T:System.Web.UI.Page" />에 대한 코드 페이지 식별자를 나타내는 정수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정 된 `CodePage` 특성.aspx 파일에 지시문을 사용 하 여 원하는 값으로. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Text.Encoding.CodePage" />
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentType : string with get, set" Usage="System.Web.UI.Page.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지와 관련된 <see cref="T:System.Web.HttpResponse" /> 개체에 대한 HTTP MIME 형식을 설정합니다.</summary>
        <value>현재 페이지와 관련된 HTTP MIME 형식입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정 된 `ContentType` .aspx 파일에 지시문을 사용 하 여 특성입니다. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpResponse" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected internal override System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Context" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.UI.Page.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지와 관련된 <see cref="T:System.Web.HttpContext" /> 개체를 가져옵니다.</summary>
        <value>현재 페이지와 관련된 정보를 포함하는 <see cref="T:System.Web.HttpContext" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성 페이지가 요청, 응답, 세션 및 응용 프로그램에 대 한 정보를 포함 하 여, 실행 컨텍스트를 프로그래밍 방식으로 액세스할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.Context%2A> 속성에 액세스는 <xref:System.Web.HttpContext.AddError%2A?displayProperty=nameWithType> 및 <xref:System.Web.HttpContext.ClearError%2A?displayProperty=nameWithType> 메서드 및 <xref:System.Web.HttpContext.AllErrors%2A?displayProperty=nameWithType> 속성입니다. 이 예에서는 세 가지 사용자 지정 예외를 사용 하 여 만듭니다는 <xref:System.Web.HttpContext.AddError%2A> 사용 하 여 메서드는 <xref:System.Web.HttpContext.AllErrors%2A> 배열에 대 한 이러한 예외를 로드 하는 속성입니다. 그런 다음 배열을 포함 하는 페이지에 쓴 하 고 사용 하 여는 <xref:System.Web.HttpContext.ClearError%2A> 의 오류를 지우려면 메서드는 <xref:System.Web.UI.Page.Context%2A> 속성입니다.  
  
 [!code-csharp[System.Web.UI.Page.Context#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.Context/CS/pagecontextcs.aspx#1)]
 [!code-vb[System.Web.UI.Page.Context#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.Context/VB/pagecontextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="CreateHtmlTextWriter">
      <MemberSignature Language="C#" Value="protected internal virtual System.Web.UI.HtmlTextWriter CreateHtmlTextWriter (System.IO.TextWriter tw);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Web.UI.HtmlTextWriter CreateHtmlTextWriter(class System.IO.TextWriter tw) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.CreateHtmlTextWriter(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateHtmlTextWriter (tw As TextWriter) As HtmlTextWriter" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Web::UI::HtmlTextWriter ^ CreateHtmlTextWriter(System::IO::TextWriter ^ tw);" />
      <MemberSignature Language="F#" Value="abstract member CreateHtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.HtmlTextWriter&#xA;override this.CreateHtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.HtmlTextWriter" Usage="page.CreateHtmlTextWriter tw" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tw" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="tw">
          <see cref="T:System.IO.TextWriter" />을 만드는 데 사용되는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>페이지의 내용을 렌더링하는 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체를 만듭니다.</summary>
        <returns>
          <see cref="T:System.Web.UI.HtmlTextWriter" /> 또는 <see cref="T:System.Web.UI.Html32TextWriter" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.CreateHtmlTextWriter%2A> 메서드를 만듭니다는 <xref:System.IO.TextWriter> 통해는 <xref:System.Web.HttpRequest.Browser%2A> 속성은 <xref:System.Web.HttpContext.Request%2A> 페이지 요청에 연결 된 개체입니다. 에 대 한 참조를 추가할 수는 <xref:System.Web.UI.HtmlTextWriter> 에 `browserCaps` 구성 섹션입니다. 재정의 <xref:System.Web.UI.Page.CreateHtmlTextWriter%2A> 메서드를 사용자 지정 조회를 수행 하도록 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.CreateHtmlTextWriter%2A> 메서드는 사용자 지정의 인스턴스를 만드는 <xref:System.Web.UI.HtmlTextWriter> 라는 개체 `MyHtmlTextWriter`합니다. <xref:System.Web.UI.Page.CreateHtmlTextWriter%2A> 에서 메서드를 재정의 `MyPage` 클래스에서 파생 된 <xref:System.Web.UI.Page>있도록 `MyHtmlTextWriter` 페이지가 요청 될 때 ASP.NET 서버 컨트롤을 렌더링 합니다. 이 예제에서는 어댑터를 방지 합니다는 참고 <xref:System.IO.TextWriter> 동작 합니다.  
  
 [!code-csharp[Page_CreateHtmlTextWriter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_CreateHtmlTextWriter/CS/page_createhtmltextwriter.cs#2)]
 [!code-vb[Page_CreateHtmlTextWriter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_CreateHtmlTextWriter/VB/page_createhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="T:System.Web.UI.Html32TextWriter" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
        <altmember cref="M:System.Web.UI.Page.CreateHtmlTextWriterFromType(System.IO.TextWriter,System.Type)" />
        <altmember cref="T:System.Web.UI.Adapters.ControlAdapter" />
      </Docs>
    </Member>
    <Member MemberName="CreateHtmlTextWriterFromType">
      <MemberSignature Language="C#" Value="public static System.Web.UI.HtmlTextWriter CreateHtmlTextWriterFromType (System.IO.TextWriter tw, Type writerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.HtmlTextWriter CreateHtmlTextWriterFromType(class System.IO.TextWriter tw, class System.Type writerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.CreateHtmlTextWriterFromType(System.IO.TextWriter,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateHtmlTextWriterFromType (tw As TextWriter, writerType As Type) As HtmlTextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::HtmlTextWriter ^ CreateHtmlTextWriterFromType(System::IO::TextWriter ^ tw, Type ^ writerType);" />
      <MemberSignature Language="F#" Value="static member CreateHtmlTextWriterFromType : System.IO.TextWriter * Type -&gt; System.Web.UI.HtmlTextWriter" Usage="System.Web.UI.Page.CreateHtmlTextWriterFromType (tw, writerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tw" Type="System.IO.TextWriter" />
        <Parameter Name="writerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="tw">
          <see cref="T:System.IO.TextWriter" />을 만드는 데 사용되는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <param name="writerType">만들 텍스트 기록기의 형식입니다.</param>
        <summary>페이지의 내용을 렌더링하는 지정된 <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체를 만듭니다.</summary>
        <returns>페이지의 내용을 렌더링하는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 페이지 어댑터에서 내부적으로 사용 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="writerType" /> 매개 변수가 잘못된 형식으로 설정된 경우</exception>
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
        <altmember cref="M:System.Web.UI.Page.CreateHtmlTextWriter(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public string Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Culture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Culture { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : string with get, set" Usage="System.Web.UI.Page.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지와 관련된 <see cref="T:System.Threading.Thread" /> 개체의 문화권 ID를 설정합니다.</summary>
        <value>유효한 문화권 ID입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정의 `Culture` .aspx 파일의 지시어의 경우에 특성입니다. 페이지가 요청 될 때 동적으로 생성 된 클래스는이 속성의 값을 설정 합니다. 값을 명시적으로 설정할 수 또한는 <xref:System.Web.UI.Page.Culture%2A> 속성 Web.config의 요소에 프로그래밍 방식으로 또는 파일입니다.  
  
 <xref:System.Web.UI.Page.Culture%2A> 속성은 페이지 콘텐츠를 지역화 하는 데 사용 됩니다. 모든 유효한 문화권 ID에 설정할 수 있습니다. 예를 들어는 `en-us` 미국 영어, while에 페이지를 설정 하는 문화권 ID는 `fr` 문화권 ID를 프랑스어로 페이지를 설정 합니다. 값을 설정할 수도 `auto` 기본 설정 언어를 설정의 브라우저의 자동 검색을 수행 합니다. 기본값은 같은 자동 언어 검색을 한정 수 `auto:en-us`합니다.  
  
 자세한 내용은 참조는 <xref:System.Globalization.CultureInfo> 클래스 개요입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.LCID" />
      </Docs>
    </Member>
    <Member MemberName="DesignerInitialize">
      <MemberSignature Language="C#" Value="public void DesignerInitialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DesignerInitialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.DesignerInitialize" />
      <MemberSignature Language="VB.NET" Value="Public Sub DesignerInitialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DesignerInitialize();" />
      <MemberSignature Language="F#" Value="member this.DesignerInitialize : unit -&gt; unit" Usage="page.DesignerInitialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>RAD 디자이너에서 요청한 <see cref="T:System.Web.UI.Page" /> 클래스의 인스턴스를 초기화합니다. 이 메서드는 디자인 타임에만 사용됩니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.UserControl.DesignerInitialize" />
      </Docs>
    </Member>
    <Member MemberName="DeterminePostBackMode">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.Specialized.NameValueCollection DeterminePostBackMode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Collections.Specialized.NameValueCollection DeterminePostBackMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.DeterminePostBackMode" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function DeterminePostBackMode () As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Collections::Specialized::NameValueCollection ^ DeterminePostBackMode();" />
      <MemberSignature Language="F#" Value="abstract member DeterminePostBackMode : unit -&gt; System.Collections.Specialized.NameValueCollection&#xA;override this.DeterminePostBackMode : unit -&gt; System.Collections.Specialized.NameValueCollection" Usage="page.DeterminePostBackMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>POST 또는 GET 명령을 사용하여 페이지에 다시 게시된 데이터의 <see cref="T:System.Collections.Specialized.NameValueCollection" />을 반환합니다.</summary>
        <returns>폼 데이터가 들어 있는 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 개체입니다. POST 명령을 사용하여 다시 게시하면 <see cref="P:System.Web.UI.Page.Context" /> 개체에서 폼 정보가 반환되고 GET 명령을 사용하여 다시 게시하면 쿼리 문자열 정보가 반환됩니다. 페이지를 처음으로 요청하면 <see langword="null" />이 반환됩니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.DeterminePostBackMode%2A> 메서드가 반환 되는 <xref:System.Collections.Specialized.NameValueCollection> 개체 데이터를 포함 하는 페이지에 다시 게시 합니다. 페이지의 현재 상태 보기 상태 및 EVENTTARGET 포스트백 이벤트가 발생 했는지 확인 하는 데 사용 되는 필드를 숨깁니다. <xref:System.Web.UI.Page.IsPostBack%2A> 속성을 설정 하는 경우는 <xref:System.Web.UI.Page.DeterminePostBackMode%2A> 메서드를 호출 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
        <altmember cref="P:System.Web.UI.Page.IsPostBack" />
      </Docs>
    </Member>
    <Member MemberName="DeterminePostBackModeUnvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.Specialized.NameValueCollection DeterminePostBackModeUnvalidated ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Collections.Specialized.NameValueCollection DeterminePostBackModeUnvalidated() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.DeterminePostBackModeUnvalidated" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function DeterminePostBackModeUnvalidated () As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Collections::Specialized::NameValueCollection ^ DeterminePostBackModeUnvalidated();" />
      <MemberSignature Language="F#" Value="abstract member DeterminePostBackModeUnvalidated : unit -&gt; System.Collections.Specialized.NameValueCollection&#xA;override this.DeterminePostBackModeUnvalidated : unit -&gt; System.Collections.Specialized.NameValueCollection" Usage="page.DeterminePostBackModeUnvalidated " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>요청에 대한 ASP.NET 요청 유효성 검사를 수행하지 않고 POST 또는 GET 명령을 사용하여 페이지에 게시되었던 데이터의 이름-값 컬렉션을 반환합니다.</summary>
        <returns>유효성을 검사하지 않은 양식 데이터가 들어 있는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은 <xref:System.Web.UnvalidatedRequestValues> 클래스를 참조하세요.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableEventValidation">
      <MemberSignature Language="C#" Value="public virtual bool EnableEventValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableEventValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.EnableEventValidation" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EnableEventValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableEventValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableEventValidation : bool with get, set" Usage="System.Web.UI.Page.EnableEventValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지에서 다시 게시 및 콜백 이벤트의 유효성을 검사하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>페이지에서 포스트백 및 콜백 이벤트의 유효성을 검사하는 경우 <see langword="true" />, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.Page.EnableEventValidation%2A> 속성이 `true`, ASP.NET 컨트롤 이벤트를 제어 하 여 렌더링 된 사용자 인터페이스에서 시작 되었으며 있는지 유효성을 검사 합니다. 컨트롤을 렌더링 하는 동안 해당 이벤트를 등록 하 고 이벤트 처리를 다시 게시 또는 콜백 하는 동안 유효성을 검사 합니다. 예를 들어 페이지가 렌더링 되 고 4 옵션 번호를 지정 하는 다시 게시 요청을 받을 경우 1, 2 또는 3 번호가 지정 옵션을 포함 하는 목록 컨트롤을 ASP.NET 예외를 발생 시킵니다. 기본적으로이 기능을 사용 하는 ASP.NET의 모든 이벤트 구동 하는 컨트롤입니다.  
  
 사용 해야 런타임 시 클라이언트에서 컨트롤을 변경 하는 클라이언트 스크립트를 작성 하는 경우는 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> false 이벤트 유효성 검사 오류를 방지 하려면 메서드.  
  
> [!IMPORTANT]
>  이 기능은 권한이 없는 사용자나 악의적인 게시 요청 및 콜백이의 위험을 줄입니다. 이벤트 유효성 검사를 해제 하지 않는 것이 좋습니다.  
  
 설정한는 <xref:System.Web.UI.Page.EnableEventValidation%2A> 속성을 설정 하 여는 `enableEventValidation` 지시문의 특성 또는 `enableEventValidation` Web.config 파일에서 요소의 특성입니다. 코드에서이 속성을 설정 하는 경우 페이지를 초기화 하기 전에 설정 해야 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">페이지가 초기화된 후 <see cref="P:System.Web.UI.Page.EnableEventValidation" /> 속성이 설정된 경우</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
        <altmember cref="T:System.Web.UI.SupportsEventValidationAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EnableViewState">
      <MemberSignature Language="C#" Value="public override bool EnableViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.EnableViewState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property EnableViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EnableViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableViewState : bool with get, set" Usage="System.Web.UI.Page.EnableViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 페이지 요청이 끝날 때 페이지가 자신의 뷰 상태 및 자신이 포함하는 서버 컨트롤의 뷰 상태를 유지하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>페이지가 자신의 뷰 상태를 유지하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 뷰 상태를 사용 하지 않도록 설정 하는 이유는 방법에 대 한 정보를 참조 하십시오. <xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=nameWithType>합니다.  
  
 경우에 <xref:System.Web.UI.Page.EnableViewState%2A> 은 `false`, 페이지에서 포스트백을 검색 하려면 ASP.NET에서 사용 되는 숨겨진된 보기 상태 필드가 포함 될 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.EnableViewState%2A> 속성을 `false` 페이지를 로드 합니다. 뷰 상태를 사용할 수 없게 된 <xref:System.Web.UI.Page> 개체 페이지에 대 한 뷰 상태 정보 아니고 페이지에 포함 된 모든 컨트롤 저장 됩니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-csharp[Page_EnableViewState_ReSubmit_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_EnableViewState_ReSubmit_1/CS/page_enableviewstate.cs#1)]
 [!code-vb[Page_EnableViewState_ReSubmit_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_EnableViewState_ReSubmit_1/VB/page_enableviewstate.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.EnableViewStateMac" />
      </Docs>
    </Member>
    <Member MemberName="EnableViewStateMac">
      <MemberSignature Language="C#" Value="public bool EnableViewStateMac { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableViewStateMac" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.EnableViewStateMac" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableViewStateMac As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableViewStateMac { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableViewStateMac : bool with get, set" Usage="System.Web.UI.Page.EnableViewStateMac" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지가 클라이언트에서 다시 게시될 때 ASP.NET에서 페이지의 뷰 상태에 대해 MAC(Machine Authentication Check)를 확인해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>뷰 상태를 MAC로 검사하고 인코딩해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 뷰 상태 MAC 브라우저에 페이지를 보낼 때 페이지의 뷰 상태를 유지 되는 숨겨진 변수의 암호화 된 버전이 있습니다. 이 속성이로 설정 된 경우 `true`, 암호화 된 뷰 상태는 클라이언트에 변경 되었는지 하지 확인 합니다.  
  
 코드에서이 속성을 설정 하지 마십시오. 설정 된 `EnableViewStateMac` .aspx 파일에 지시문을 사용 하 여 특성입니다. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
> [!IMPORTANT]
>  이 특성 설정할 수 없습니다 `false` 는 응용 프로그램 또는 페이지 뷰 상태를 사용 하지 않는 경우에 프로덕션 웹 사이트에 있습니다. 뷰 상태 MAC을 사용 하면 보안 뷰 상태 뿐만 아니라 다른 ASP.NET 기능을 확인 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.EnableViewState" />
      </Docs>
    </Member>
    <Member MemberName="ErrorPage">
      <MemberSignature Language="C#" Value="public string ErrorPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ErrorPage" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorPage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorPage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ErrorPage : string with get, set" Usage="System.Web.UI.Page.ErrorPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>처리되지 않은 예외가 발생하는 경우 요청 브라우저가 리디렉션될 오류 페이지를 가져오거나 설정합니다.</summary>
        <value>브라우저가 리디렉션될 오류 페이지입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[Page_ErrorPage#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_ErrorPage/CS/page_errorpage.cs.aspx#1)]
 [!code-vb[Page_ErrorPage#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_ErrorPage/VB/page_errorpage.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteRegisteredAsyncTasks">
      <MemberSignature Language="C#" Value="public void ExecuteRegisteredAsyncTasks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteRegisteredAsyncTasks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.ExecuteRegisteredAsyncTasks" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteRegisteredAsyncTasks ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteRegisteredAsyncTasks();" />
      <MemberSignature Language="F#" Value="member this.ExecuteRegisteredAsyncTasks : unit -&gt; unit" Usage="page.ExecuteRegisteredAsyncTasks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>비동기 작업을 실행하기 시작합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 비동기 작업 정의 <xref:System.Web.UI.PageAsyncTask> 클래스입니다. 작업이 정의 된 페이지를 사용 하 여 등록 후는 <xref:System.Web.UI.Page.RegisterAsyncTask%2A> 메서드는 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 비동기 작업을 시작 하는 메서드를 호출할 수 있습니다.  
  
 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 메서드가 자동으로 등록 된 비동기 작업, 있는 경우 페이지 처리의 지점에 대해 호출 되는 동기 페이지. 이 자동으로 호출 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 하기 바로 전에 발생는 <xref:System.Web.UI.Page.PreRenderComplete> 이벤트입니다. 호출 된 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 이 메서드에 대 한 자동 호출 외에 호출할 하려는 작업에 대 한 메서드. 참고, 비동기 작업이 실행 될 경우에 한 번만 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 두 번 이상 호출할 수 있습니다.  
  
 <xref:System.Web.UI.Page.AsyncTimeout%2A> 속성이를 호출할 때마다 다시 설정 됩니다는 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 메서드. 마지막 값은 <xref:System.Web.UI.Page.AsyncTimeout%2A> 호출 하기 전에 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 메서드 우선 합니다. 비동기 작업을 사용 하는 경우 보다 더 큰 <xref:System.Web.UI.Page.AsyncTimeout%2A>, 하는 동안 호출 된 이후 작업 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 호출 즉시 초과 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.AsyncTimeout%2A> 속성으로는 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 및 <xref:System.Web.UI.Page.RegisterAsyncTask%2A> 메서드. Note 시작, 종료 및 제한 시간 처리기를 사용 합니다. 예제에서는 인위적 지연을 포함 되는 비동기 작업에 지정 된 대로 작업에 대 한 할당된 된 시간 초과 상황을 보여 주기 위해는 <xref:System.Web.UI.Page.AsyncTimeout%2A> 속성입니다. 실제 시나리오에서는 데이터베이스 호출 또는 이미지 생성을 수행 하는 비동기 작업을 사용할 수 예를 들어 및 제한 시간 처리기는 지정 된 시간 내에 작업을 수행 하지 않는 경우 정상적인 저하를 제공 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page.AsyncTimeout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.AsyncTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/vb/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.Page.AsyncTimeout#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/CS/page_asynctask.cs#2)]
 [!code-vb[System.Web.UI.Page.AsyncTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/vb/page_asynctask.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">비동기 작업에 예외가 있는 경우</exception>
        <altmember cref="M:System.Web.UI.Page.RegisterAsyncTask(System.Web.UI.PageAsyncTask)" />
        <altmember cref="T:System.Web.UI.PageAsyncTask" />
        <altmember cref="M:System.Web.UI.Page.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="FileDependencies">
      <MemberSignature Language="C#" Value="protected System.Collections.ArrayList FileDependencies { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList FileDependencies" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.FileDependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Property FileDependencies As ArrayList" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::ArrayList ^ FileDependencies {  void set(System::Collections::ArrayList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FileDependencies : System.Collections.ArrayList" Usage="System.Web.UI.Page.FileDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is HttpResponse.AddFileDependencies. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Web.HttpResponse" /> 개체가 종속된 파일의 배열을 설정합니다.</summary>
        <value>현재 <see cref="T:System.Web.HttpResponse" /> 개체가 종속된 파일의 배열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 사용되지 않습니다. 사용 하 여는 <xref:System.Web.HttpResponse.AddFileDependencies%2A> 메서드 또는 <xref:System.Web.HttpResponse.AddFileDependency%2A> 의 메서드는 <xref:System.Web.HttpResponse> 클래스를 대신 합니다.  
  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정의 `FileDependencies` 특성을 `true` .aspx 파일에 지시문을 사용 합니다. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="M:System.Web.HttpResponse.AddFileDependencies(System.Collections.ArrayList)" />
      </Docs>
    </Member>
    <Member MemberName="FindControl">
      <MemberSignature Language="C#" Value="public override System.Web.UI.Control FindControl (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Web.UI.Control FindControl(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.FindControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindControl (id As String) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Web::UI::Control ^ FindControl(System::String ^ id);" />
      <MemberSignature Language="F#" Value="override this.FindControl : string -&gt; System.Web.UI.Control" Usage="page.FindControl id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">찾을 컨트롤의 식별자입니다.</param>
        <summary>지정된 식별자를 사용하여 서버 컨트롤의 페이지 명명 컨테이너를 검색합니다.</summary>
        <returns>지정된 컨트롤이나 <see langword="null" />을 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.FindControl%2A> 메서드를 사용 하는 컨트롤에 액세스할 수 있습니다 인 <xref:System.Web.UI.Control.ID%2A> 디자인 타임에를 사용할 수 없습니다. 메서드만 있는 페이지의 즉시, 또는 최상위 수준 컨테이너 검색; 명명 컨테이너는 페이지에 포함 된 컨트롤에 대 한 재귀적으로 검색을 되지 않습니다. 하위 수준 명명 컨테이너의 컨트롤에 액세스 하려면 호출 된 `FindControl` 해당 컨테이너의 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.Page.FindControl%2A> 템플릿 내에 있는 컨트롤을 찾을 방법입니다. 이 예제에서는 두 개의 <xref:System.Web.UI.WebControls.Repeater> 컨트롤에 정의 됩니다; catch 하는 다른 방법을 각각 보여 줍니다는 <xref:System.Web.UI.WebControls.LinkButton.Click> 의 이벤트는 <xref:System.Web.UI.WebControls.LinkButton> 반복기 항목 템플릿에 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page_FindControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page_FindControl/cs/pagefindcontrolcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page_FindControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page_FindControl/vb/pagefindcontrolvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.ID" />
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Web.UI.HtmlControls.HtmlForm Form { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.HtmlControls.HtmlForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Form" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Form As HtmlForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::HtmlControls::HtmlForm ^ Form { System::Web::UI::HtmlControls::HtmlForm ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Web.UI.HtmlControls.HtmlForm" Usage="System.Web.UI.Page.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlControls.HtmlForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지에 대한 HTML 폼을 가져옵니다.</summary>
        <value>페이지와 관련된 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.Page.Form%2A> 메서드 및 속성을 액세스 하는 속성은 <xref:System.Web.UI.HtmlControls.HtmlForm> 페이지 컨트롤 계층의 기반이 되는 개체입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlForm" />
      </Docs>
    </Member>
    <Member MemberName="FrameworkInitialize">
      <MemberSignature Language="C#" Value="protected override void FrameworkInitialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void FrameworkInitialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.FrameworkInitialize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub FrameworkInitialize ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void FrameworkInitialize();" />
      <MemberSignature Language="F#" Value="override this.FrameworkInitialize : unit -&gt; unit" Usage="page.FrameworkInitialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>페이지의 선언적 특성을 기반으로 페이지를 생성하는 동안 컨트롤 트리를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.FrameworkInitialize%2A> 메서드 초기화에서 <xref:System.Web.UI.Page> 개체 및 페이지의 선언적 특성에 따라 제어 트리를 만듭니다. <xref:System.Web.UI.Page.FrameworkInitialize%2A> 페이지 구문 분석 및 코드 생성에 대 한 메서드는 <xref:System.Web.UI.Page> 선언적 페이지에 대 한 클래스입니다. 일반적으로 있습니다 해서는 안이 메서드를 재정의 합니다. 를 재정의 하는 경우 사용할 기본 클래스를 호출 해야 <xref:System.Web.UI.Page.FrameworkInitialize%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataItem">
      <MemberSignature Language="C#" Value="public object GetDataItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetDataItem() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.GetDataItem" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataItem () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetDataItem();" />
      <MemberSignature Language="F#" Value="member this.GetDataItem : unit -&gt; obj" Usage="page.GetDataItem " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>데이터 바인딩 컨텍스트 스택의 맨 위에서 데이터 항목을 가져옵니다.</summary>
        <returns>데이터 바인딩 컨텍스트 스택의 맨 위에 있는 개체입니다.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">페이지에 대한 데이터 바인딩 컨텍스트가 없는 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientEvent">
      <MemberSignature Language="C#" Value="public string GetPostBackClientEvent (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientEvent(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.GetPostBackClientEvent(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientEvent(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientEvent : System.Web.UI.Control * string -&gt; string" Usage="page.GetPostBackClientEvent (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.GetPostBackEventReference. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">클라이언트 이벤트 다시 게시를 수신하는 서버 컨트롤입니다.</param>
        <param name="argument">
          <see cref="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)" />에 전달되는 <see cref="T:System.String" />입니다.</param>
        <summary>지정된 이벤트 인수를 사용하고 지정된 컨트롤에 대해 서버로 다시 게시하기 위해 클라이언트 이벤트에서 사용할 수 있는 참조를 가져옵니다.</summary>
        <returns>클라이언트 이벤트를 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 참조는 <xref:System.Web.UI.ClientScriptManager> 이 사용 되지 않는 멤버에 대 한 대안에 대 한 클래스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.Button.OnClientClick" />
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string -&gt; string" Usage="page.GetPostBackClientHyperlink (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.GetPostBackClientHyperlink. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">다시 게시 작업을 처리하는 서버 컨트롤입니다.</param>
        <param name="argument">서버 컨트롤에 전달된 매개 변수입니다.</param>
        <summary>지정된 이벤트 인수를 사용하여 지정된 컨트롤을 서버에 다시 게시하는 클라이언트 이벤트에 사용할 수 있는 참조를 가져옵니다. 이 참조의 시작 부분에는 <see langword="javascript:" />라는 문자열이 추가됩니다.</summary>
        <returns>대상 컨트롤의 ID 및 이벤트 인수를 포함하는 다시 게시 함수에 대한 JavaScript 호출을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 참조는 <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> 이 사용 되지 않는 멤버에 대 한 대안에 대 한 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>서버에 다시 게시 작업을 발생시키는 클라이언트 이벤트에 사용할 수 있는 문자열을 반환합니다. 이 메서드는 사용되지 않습니다. 대신 <see cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" /> 클래스의 <see cref="T:System.Web.UI.ClientScriptManager" /> 메서드를 사용합니다.</summary>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.GetPostBackEventReference(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control -&gt; string" Usage="page.GetPostBackEventReference control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.GetPostBackEventReference. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">서버에서 다시 게시 작업을 처리하는 서버 컨트롤입니다.</param>
        <summary>서버에 다시 게시 작업을 발생시키는 클라이언트 이벤트에 사용할 수 있는 문자열을 반환합니다. 참조 문자열은 지정된 <see cref="T:System.Web.UI.Control" /> 개체에 의해 정의됩니다.</summary>
        <returns>클라이언트의 스크립트로 처리될 때 다시 게시 작업을 시작하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 사용되지 않습니다. 대신 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 클래스의 <xref:System.Web.UI.ClientScriptManager> 메서드를 사용합니다.  
  
   
  
## Examples  
 [!code-csharp[Page_GetPostBackEventReference#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_GetPostBackEventReference/CS/page_getpostbackeventreference.cs#2)]
 [!code-vb[Page_GetPostBackEventReference#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_GetPostBackEventReference/VB/page_getpostbackeventreference.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string -&gt; string" Usage="page.GetPostBackEventReference (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.GetPostBackEventReference. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">다시 게시 작업을 처리하는 서버 컨트롤입니다.</param>
        <param name="argument">서버 컨트롤에 전달된 매개 변수입니다.</param>
        <summary>서버에 다시 게시 작업을 발생시키는 클라이언트 이벤트에 사용할 수 있는 문자열을 반환합니다. 참조 문자열은 다시 게시 작업과 추가 이벤트 정보의 문자열 인수를 처리하는 지정된 컨트롤에 의해 정의됩니다.</summary>
        <returns>클라이언트의 스크립트로 처리될 때 다시 게시 작업을 시작하는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 사용되지 않습니다. 대신 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> 클래스의 <xref:System.Web.UI.ClientScriptManager> 메서드를 사용합니다.  
  
   
  
## Examples  
 [!code-csharp[Page_GetPostBackEventReference#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_GetPostBackEventReference/CS/page_getpostbackeventreference.cs#1)]
 [!code-vb[Page_GetPostBackEventReference#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_GetPostBackEventReference/VB/page_getpostbackeventreference.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.GetPostBackEventReference(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetTypeHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetTypeHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.GetTypeHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetTypeHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeHashCode : unit -&gt; int&#xA;override this.GetTypeHashCode : unit -&gt; int" Usage="page.GetTypeHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>런타임에 생성된 <see cref="T:System.Web.UI.Page" /> 개체가 만든 해시 코드를 가져옵니다. 이 해시 코드는 <see cref="T:System.Web.UI.Page" /> 개체의 컨트롤 계층 구조에서 고유합니다.</summary>
        <returns>런타임에 생성된 해시 코드를 반환합니다. 기본값은 0입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 재정의 하지 마십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValidators">
      <MemberSignature Language="C#" Value="public System.Web.UI.ValidatorCollection GetValidators (string validationGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.UI.ValidatorCollection GetValidators(string validationGroup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.GetValidators(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValidators (validationGroup As String) As ValidatorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::UI::ValidatorCollection ^ GetValidators(System::String ^ validationGroup);" />
      <MemberSignature Language="F#" Value="member this.GetValidators : string -&gt; System.Web.UI.ValidatorCollection" Usage="page.GetValidators validationGroup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ValidatorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validationGroup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="validationGroup">반환할 유효성 검사 그룹 또는 기본 유효성 검사 그룹을 반환하는 <see langword="null" />입니다.</param>
        <summary>지정된 유효성 검사 그룹에 대한 유효성 검사기 컨트롤의 컬렉션을 반환합니다.</summary>
        <returns>지정된 유효성 검사 그룹에 대한 유효성 검사기 컨트롤이 들어 있는 <see cref="T:System.Web.UI.ValidatorCollection" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.GetValidators%2A> 메서드 특정 유효성 검사 그룹에 연결 된 모든 유효성 검사 개체를 반환 합니다. 기본 유효성 검사 그룹을 반환할 수 있습니다 (사용 하지 않고 컨트롤와 관련 된 모든 유효성 검사 컨트롤의 `ValidationGroup` 속성 집합)을 설정 하 여는 `validationGroup` 매개 변수를 `null`합니다.  
  
 유효성 검사 그룹 구성원 확인을 위해 수집 및 호출을 통해 열거는 <xref:System.Web.UI.IValidator.Validate%2A> 각 유효성 검사기의 메서드가 반환 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.GetValidators%2A> 메서드를 기본 유효성 검사 그룹을 반환 합니다.  
  
 [!code-csharp[PageGetValidators#1](~/samples/snippets/csharp/VS_Snippets_WebNet/PageGetValidators/CS/pagegetvalidatorscs.aspx#1)]
 [!code-vb[PageGetValidators#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/PageGetValidators/VB/pagegetvalidatorsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.Validate(System.String)" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
      </Docs>
    </Member>
    <Member MemberName="GetWrappedFileDependencies">
      <MemberSignature Language="C#" Value="protected object GetWrappedFileDependencies (string[] virtualFileDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetWrappedFileDependencies(string[] virtualFileDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.GetWrappedFileDependencies(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetWrappedFileDependencies (virtualFileDependencies As String()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetWrappedFileDependencies(cli::array &lt;System::String ^&gt; ^ virtualFileDependencies);" />
      <MemberSignature Language="F#" Value="member this.GetWrappedFileDependencies : string[] -&gt; obj" Usage="page.GetWrappedFileDependencies virtualFileDependencies" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualFileDependencies" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="virtualFileDependencies">가상 파일 위치의 문자열 배열입니다.</param>
        <summary>가상 파일 위치의 목록에 해당하는 실제 파일 이름의 목록을 반환합니다.</summary>
        <returns>실제 파일 위치의 목록이 들어 있는 개체입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.GetWrappedFileDependencies%2A> 메서드는 현재 페이지를 구성 하는 사용자 제어 파일 등 파일의 목록을 가져옵니다. 이러한 페이지 수정 되 면 전체 페이지 다음에 필요할 때가 컴파일됩니다. 이 메서드를 재정의 하지 마십시오.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public System.Web.UI.HtmlControls.HtmlHead Header { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.HtmlControls.HtmlHead Header" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Header" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Header As HtmlHead" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::HtmlControls::HtmlHead ^ Header { System::Web::UI::HtmlControls::HtmlHead ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Header : System.Web.UI.HtmlControls.HtmlHead" Usage="System.Web.UI.Page.Header" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlControls.HtmlHead</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="head" /> 요소가 페이지 선언에서 <see langword="runat=server" />로 정의된 경우 페이지의 문서 헤더를 가져옵니다.</summary>
        <value>페이지 헤더를 포함하는 <see cref="T:System.Web.UI.HtmlControls.HtmlHead" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.Header%2A> 속성에 대 한 참조를 가져옵니다는 <xref:System.Web.UI.HtmlControls.HtmlHead> 페이지에 대 한 문서 헤더 정보를 설정 하는 데 사용할 수 있는 개체입니다. <xref:System.Web.UI.HtmlControls.HtmlHead> 스타일 시트, 스타일 규칙, 제목 및 메타 데이터를 같은 정보를 추가할 수 있습니다는 `head` 요소입니다.  
  
> [!NOTE]
>  스타일의 메서드를 사용 하 여 프로그래밍 방식으로 추가 된 <xref:System.Web.UI.IStyleSheet> 비동기 포스트백 도중 인터페이스가 지원 되지 않습니다. 웹 페이지에 AJAX 기능을 추가할 때 비동기 포스트백 전체 페이지를 업데이트 하지 않고 페이지의 영역을 업데이트 합니다. 자세한 내용은 참조 [Microsoft Ajax 개요](http://msdn.microsoft.com/library/be84d9b3-b7cd-47d7-8494-be4abfaad9cb)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 액세스 하는 방법을 보여 줍니다.는 <xref:System.Web.UI.HtmlControls.HtmlHead> 프로그래밍 방식으로 사용 하 여 제어는 <xref:System.Web.UI.Page.Header%2A> 속성입니다. A `title` 요소 및 `style` 요소에 추가 되는 `head` 페이지의 요소입니다.  
  
 [!code-aspx-csharp[System.Web.UI.HtmlControls.HtmlHeadClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.HtmlControls.HtmlHeadClass/CS/htmlheadclasscs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.HtmlControls.HtmlHeadClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.HtmlControls.HtmlHeadClass/VB/htmlheadclassvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlHead" />
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlLink" />
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public override string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ID : string with get, set" Usage="System.Web.UI.Page.ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> 클래스의 특정 인스턴스에 대한 식별자를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.Page" /> 클래스의 인스턴스에 대한 식별자입니다. 기본값은 '_Page'입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Page.IdSeparator" />
      </Docs>
    </Member>
    <Member MemberName="IdSeparator">
      <MemberSignature Language="C#" Value="public virtual char IdSeparator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char IdSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.IdSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IdSeparator As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char IdSeparator { char get(); };" />
      <MemberSignature Language="F#" Value="member this.IdSeparator : char" Usage="System.Web.UI.Page.IdSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지에서 컨트롤의 고유 ID를 빌드할 때 컨트롤 식별자를 구분하는 데 사용되는 문자를 가져옵니다.</summary>
        <value>컨트롤 식별자를 구분하는 데 사용되는 문자입니다. 기본값은 페이지를 렌더링하는 <see cref="T:System.Web.UI.Adapters.PageAdapter" /> 인스턴스에 의해 설정됩니다. <see cref="P:System.Web.UI.Page.IdSeparator" />는 서버 쪽 필드이므로 수정해서는 안 됩니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.Page.ID" />
      </Docs>
    </Member>
    <Member MemberName="InitComplete">
      <MemberSignature Language="C#" Value="public event EventHandler InitComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler InitComplete" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.Page.InitComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InitComplete As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ InitComplete;" />
      <MemberSignature Language="F#" Value="member this.InitComplete : EventHandler " Usage="member this.InitComplete : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 초기화가 완료될 때 이 이벤트가 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.InitComplete> 이벤트 페이지의 초기화 단계가 끝날 때 호출 됩니다. 이 페이지의 수명 주기이 단계에서 선언 된 모든 페이지에 있는 컨트롤 초기화 되지만 페이지의 상태는 아직 채워지지 않습니다. 서버 컨트롤에 액세스할 수 있습니다 하지만 사용자에서 반환 된 정보가 아직 포함 되지 않습니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.Page.LoadComplete" />
        <altmember cref="E:System.Web.UI.Page.PreRenderComplete" />
        <altmember cref="E:System.Web.UI.Page.SaveStateComplete" />
      </Docs>
    </Member>
    <Member MemberName="InitializeCulture">
      <MemberSignature Language="C#" Value="protected virtual void InitializeCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.InitializeCulture" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeCulture ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeCulture();" />
      <MemberSignature Language="F#" Value="abstract member InitializeCulture : unit -&gt; unit&#xA;override this.InitializeCulture : unit -&gt; unit" Usage="page.InitializeCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>페이지의 현재 스레드에 대한 <see cref="P:System.Web.UI.Page.Culture" /> 및 <see cref="P:System.Web.UI.Page.UICulture" />를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.InitializeCulture%2A> 메서드에 코딩 논리가 포함 되어 있습니다. 컨트롤의 기능을 확장 하는 개발자는 <xref:System.Web.UI.Page> 클래스 재정의할 수 있습니다는 <xref:System.Web.UI.Page.InitializeCulture%2A> 초기화 하려면 메서드는 <xref:System.Web.UI.Page.Culture%2A> 및 <xref:System.Web.UI.Page.UICulture%2A> 페이지에 대 한 정보입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.Web.UI.Page.FrameworkInitialize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InitOutputCache">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>현재 페이지 요청에 대한 출력 캐시를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 코드에서 직접 사용할 수 없습니다. 을 사용 하려면 페이지에 대 한 출력 캐싱을 조작 이러한 방법 중 하나를 사용 합니다.  
  
-   선언적으로 지시문을 사용 하 여.aspx 파일에서 옵션을 설정 합니다.  
  
-   메서드 및 속성을 사용 하 여는 <xref:System.Web.HttpCachePolicy> 클래스에 의해 노출 되는 `Response.Cache` 페이지의 코드에서 개체입니다.  
  
 자세한 내용은 참조 [ASP.NET 페이지 캐싱](http://msdn.microsoft.com/library/e9666a1b-88df-4931-af0b-a754fc65660b)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InitOutputCache">
      <MemberSignature Language="C#" Value="protected internal virtual void InitOutputCache (System.Web.UI.OutputCacheParameters cacheSettings);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void InitOutputCache(class System.Web.UI.OutputCacheParameters cacheSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.InitOutputCache(System.Web.UI.OutputCacheParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitOutputCache (cacheSettings As OutputCacheParameters)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitOutputCache(System::Web::UI::OutputCacheParameters ^ cacheSettings);" />
      <MemberSignature Language="F#" Value="abstract member InitOutputCache : System.Web.UI.OutputCacheParameters -&gt; unit&#xA;override this.InitOutputCache : System.Web.UI.OutputCacheParameters -&gt; unit" Usage="page.InitOutputCache cacheSettings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheSettings" Type="System.Web.UI.OutputCacheParameters" />
      </Parameters>
      <Docs>
        <param name="cacheSettings">캐시 설정이 들어 있는 <see cref="T:System.Web.UI.OutputCacheParameters" />입니다.</param>
        <summary>
          <see cref="T:System.Web.UI.OutputCacheParameters" /> 개체를 기반으로 현재 페이지 요청에 대한 출력 캐시를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하지 해야 합니다. 을 사용 하려면 페이지에 대 한 출력 캐싱을 조작.aspx 파일 또는 메서드 및 속성의 지시문을 사용 하 여는 <xref:System.Web.HttpCachePolicy> 클래스입니다. 통해 액세스할 수 `Response.Cache` 페이지의 코드 선언 블록 또는 코드 숨김 파일에서 구문입니다. 자세한 내용은 참조 [ASP.NET 페이지 캐싱](http://msdn.microsoft.com/library/e9666a1b-88df-4931-af0b-a754fc65660b)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">캐시 프로필을 찾을 수 없는 경우  \- 또는-  누락된 지시문 또는 구성 설정 프로필 특성입니다.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">출력 캐시 설정 위치가 잘못된 경우</exception>
        <altmember cref="T:System.Web.HttpCachePolicy" />
      </Docs>
    </Member>
    <Member MemberName="InitOutputCache">
      <MemberSignature Language="C#" Value="protected virtual void InitOutputCache (int duration, string varyByHeader, string varyByCustom, System.Web.UI.OutputCacheLocation location, string varyByParam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitOutputCache(int32 duration, string varyByHeader, string varyByCustom, valuetype System.Web.UI.OutputCacheLocation location, string varyByParam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.InitOutputCache(System.Int32,System.String,System.String,System.Web.UI.OutputCacheLocation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitOutputCache (duration As Integer, varyByHeader As String, varyByCustom As String, location As OutputCacheLocation, varyByParam As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitOutputCache(int duration, System::String ^ varyByHeader, System::String ^ varyByCustom, System::Web::UI::OutputCacheLocation location, System::String ^ varyByParam);" />
      <MemberSignature Language="F#" Value="abstract member InitOutputCache : int * string * string * System.Web.UI.OutputCacheLocation * string -&gt; unit&#xA;override this.InitOutputCache : int * string * string * System.Web.UI.OutputCacheLocation * string -&gt; unit" Usage="page.InitOutputCache (duration, varyByHeader, varyByCustom, location, varyByParam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Int32" />
        <Parameter Name="varyByHeader" Type="System.String" />
        <Parameter Name="varyByCustom" Type="System.String" />
        <Parameter Name="location" Type="System.Web.UI.OutputCacheLocation" />
        <Parameter Name="varyByParam" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="duration">출력 캐시에 저장되어 있는 개체가 유효한 기간입니다.</param>
        <param name="varyByHeader">출력 캐시의 내용에 영향을 주는 세미콜론으로 구분된 헤더 목록입니다.</param>
        <param name="varyByCustom">
          <see langword="Vary" /> HTTP 헤더입니다.</param>
        <param name="location">
          <see cref="T:System.Web.UI.OutputCacheLocation" /> 값 중 하나입니다.</param>
        <param name="varyByParam">출력 캐시의 내용에 영향을 주며 GET 또는 POST 메서드에 의해 수신되는 세미콜론으로 구분된 매개 변수 목록입니다.</param>
        <summary>현재 페이지 요청에 대한 출력 캐시를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하지 해야 합니다. 을 사용 하려면 페이지에 대 한 출력 캐싱을 조작.aspx 파일 또는 메서드 및 속성의 지시문을 사용 하 여는 <xref:System.Web.HttpCachePolicy> 클래스입니다. 통해 액세스할 수 `Response.Cache` 페이지의 코드에서 구문입니다. 자세한 내용은 참조 [ASP.NET 페이지 캐싱](http://msdn.microsoft.com/library/e9666a1b-88df-4931-af0b-a754fc65660b)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="location" />에 잘못된 값이 지정된 경우</exception>
        <altmember cref="T:System.Web.HttpCachePolicy" />
      </Docs>
    </Member>
    <Member MemberName="InitOutputCache">
      <MemberSignature Language="C#" Value="protected virtual void InitOutputCache (int duration, string varyByContentEncoding, string varyByHeader, string varyByCustom, System.Web.UI.OutputCacheLocation location, string varyByParam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitOutputCache(int32 duration, string varyByContentEncoding, string varyByHeader, string varyByCustom, valuetype System.Web.UI.OutputCacheLocation location, string varyByParam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.InitOutputCache(System.Int32,System.String,System.String,System.String,System.Web.UI.OutputCacheLocation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitOutputCache (duration As Integer, varyByContentEncoding As String, varyByHeader As String, varyByCustom As String, location As OutputCacheLocation, varyByParam As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitOutputCache(int duration, System::String ^ varyByContentEncoding, System::String ^ varyByHeader, System::String ^ varyByCustom, System::Web::UI::OutputCacheLocation location, System::String ^ varyByParam);" />
      <MemberSignature Language="F#" Value="abstract member InitOutputCache : int * string * string * string * System.Web.UI.OutputCacheLocation * string -&gt; unit&#xA;override this.InitOutputCache : int * string * string * string * System.Web.UI.OutputCacheLocation * string -&gt; unit" Usage="page.InitOutputCache (duration, varyByContentEncoding, varyByHeader, varyByCustom, location, varyByParam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="duration" Type="System.Int32" />
        <Parameter Name="varyByContentEncoding" Type="System.String" />
        <Parameter Name="varyByHeader" Type="System.String" />
        <Parameter Name="varyByCustom" Type="System.String" />
        <Parameter Name="location" Type="System.Web.UI.OutputCacheLocation" />
        <Parameter Name="varyByParam" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="duration">출력 캐시에 저장되어 있는 개체가 유효한 기간입니다.</param>
        <param name="varyByContentEncoding">출력 캐시의 내용에 영향을 주는 세미콜론으로 구분된 문자 집합(콘텐츠 인코딩) 목록입니다.</param>
        <param name="varyByHeader">출력 캐시의 내용에 영향을 주는 세미콜론으로 구분된 헤더 목록입니다.</param>
        <param name="varyByCustom">
          <see langword="Vary" /> HTTP 헤더입니다.</param>
        <param name="location">
          <see cref="T:System.Web.UI.OutputCacheLocation" /> 값 중 하나입니다.</param>
        <param name="varyByParam">출력 캐시의 내용에 영향을 주며 GET 또는 POST 메서드에 의해 수신되는 세미콜론으로 구분된 매개 변수 목록입니다.</param>
        <summary>현재 페이지 요청에 대한 출력 캐시를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하지 해야 합니다. 을 사용 하려면 페이지에 대 한 출력 캐싱을 조작.aspx 파일 또는 메서드 및 속성의 지시문을 사용 하 여는 <xref:System.Web.HttpCachePolicy> 클래스입니다. 통해 액세스할 수 `Response.Cache` 페이지의 코드에서 구문입니다. 자세한 내용은 참조 [ASP.NET 페이지 캐싱](http://msdn.microsoft.com/library/e9666a1b-88df-4931-af0b-a754fc65660b)합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="location" />에 잘못된 값이 지정된 경우</exception>
        <altmember cref="T:System.Web.HttpCachePolicy" />
      </Docs>
    </Member>
    <Member MemberName="IsAsync">
      <MemberSignature Language="C#" Value="public bool IsAsync { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAsync" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.IsAsync" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAsync As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAsync { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAsync : bool" Usage="System.Web.UI.Page.IsAsync" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지가 비동기식으로 처리되는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>페이지가 비동기 모드에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.Page.IsAsync%2A> 속성을 웹 페이지 비동기 모드로 실행 되 고 있는지 여부를 확인 합니다. 이 정보는 컨트롤 또는 코드 페이지에서 페이지 비동기 인지에 따라 해당 동작을 수정 해야 할 경우에 유용 합니다. 비동기 프로그래밍에 대 한 자세한 내용은 참조 [비동기 작업](~/docs/framework/data/adonet/sql/asynchronous-operations.md)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCallback">
      <MemberSignature Language="C#" Value="public bool IsCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCallback" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.IsCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCallback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCallback { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCallback : bool" Usage="System.Web.UI.Page.IsCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 요청이 콜백의 결과인지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>페이지 요청이 콜백의 결과이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 자세한 내용은 참조 [포스트백 없이 클라이언트 콜백 구현](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.IsClientScriptBlockRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : string -&gt; bool" Usage="page.IsClientScriptBlockRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.IsClientScriptBlockRegistered(string key). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">검색할 클라이언트 스크립트의 문자열 키입니다.</param>
        <summary>지정된 키가 있는 클라이언트 스크립트 블록이 페이지에 등록되는지 여부를 결정합니다.</summary>
        <returns>스크립트 블록이 등록되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하기 전에 호출 <xref:System.Web.UI.Page.RegisterClientScriptBlock%2A?displayProperty=nameWithType> 을 클라이언트 쪽 스크립트 불필요 하 게 막으려면 합니다. 이 스크립트는 필요한 많은 서버 리소스를 만들어야 하는 경우에 특히 중요 합니다.  
  
 <xref:System.Web.UI.Page.IsClientScriptBlockRegistered%2A> 메서드는 사용되지 않습니다. 사용 하 여는 <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> 에서 메서드는 <xref:System.Web.UI.ClientScriptManager> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.RegisterClientScriptBlock%2A> 메서드와 함께 <xref:System.Web.UI.Page.IsClientScriptBlockRegistered%2A> 메서드. 에 의해 결정 했을 때 코드 선언 블록에 작성 된 ECMAScript에 아직 등록 하지 경우 <xref:System.Web.UI.Page.IsClientScriptBlockRegistered%2A>는 <xref:System.Web.UI.Page.RegisterClientScriptBlock%2A> 호출 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.RegisterClientScriptBlock/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.RegisterClientScriptBlock/VB/defaultvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterClientScriptBlock(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsCrossPagePostBack">
      <MemberSignature Language="C#" Value="public bool IsCrossPagePostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCrossPagePostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.IsCrossPagePostBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCrossPagePostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCrossPagePostBack { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCrossPagePostBack : bool" Usage="System.Web.UI.Page.IsCrossPagePostBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지가 페이지 간 다시 게시에 사용되는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>페이지가 페이지 간 요청에 참여하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET에서 다른 한 페이지에서 컨트롤을 전송 하기 위한 두 가지 메커니즘을 제공 합니다. 사용할 수 있습니다는 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드 간에 페이지를 없거나 처리를 전송 페이지 URL을 할당 하 여 페이지 간 요청을 만들 수는 <xref:System.Web.UI.WebControls.IButtonControl.PostBackUrl%2A> 구현 하는 단추 컨트롤의 속성은 <xref:System.Web.UI.WebControls.IButtonControl> 인터페이스입니다.  
  
 두 경우 모두는 <xref:System.Web.UI.Page.PreviousPage%2A> 페이지 속성 이전 또는 원래 페이지를 나타내는 개체에 포함 됩니다. 페이지에서 B로 A 페이지의 페이지는 게시 하는 예를 들어 하는 경우 <xref:System.Web.UI.Page.IsCrossPagePostBack%2A> 속성 (을 통해 액세스할 수는 <xref:System.Web.UI.Page.PreviousPage%2A> 속성) 됩니다 `true` 및 페이지 B <xref:System.Web.UI.Page.PreviousPage%2A> 속성 페이지 A의 이름을 갖고  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.WebControls.IButtonControl.PostBackUrl" />
      </Docs>
    </Member>
    <Member MemberName="IsPostBack">
      <MemberSignature Language="C#" Value="public bool IsPostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.IsPostBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPostBack { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPostBack : bool" Usage="System.Web.UI.Page.IsPostBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지가 처음 렌더링되고 있는지 또는 다시 게시에 대한 응답으로 로드되고 있는지를 나타내는 값을 가져옵니다.</summary>
        <value>클라이언트에서 다시 게시함으로써 페이지가 로드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 참조에 대 한 설명은 다시 게시와 콜백 차이 [포스트백 없이 클라이언트 콜백 구현](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)합니다.  
  
   
  
## Examples  
 값을 테스트 하는 방법을 보여 주는 다음 예제는 <xref:System.Web.UI.Page.IsPostBack%2A> 속성 페이지를 처음으로 렌더링 되 고 포스트백에 응답 하는지 여부를 확인 하기 위해 페이지를 로드 하는 경우. 코드를 호출 하는 경우 페이지를 처음으로 렌더링 되는 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> 메서드.  
  
 페이지 태그 (표시 되지 않음)가 포함 된 <xref:System.Web.UI.WebControls.RequiredFieldValidator> 필수 입력된 필드에 대 한 항목이 없는 경우 별표를 표시 하는 컨트롤입니다. 호출 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> 제출 단추를 클릭할 때까지 기다리지 않고 페이지 렌더링 될 때 즉시 표시할 별표 발생 합니다. 포스트백 후 않아도 호출 하 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType>의 일부로 해당 메서드가 호출 되기 때문에는 <xref:System.Web.UI.Page> 수명 주기 합니다.  
  
 [!code-csharp[System.Web.UI.Page.Validate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.Validate/CS/validate.cs.aspx#1)]
 [!code-vb[System.Web.UI.Page.Validate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.Validate/VB/validate.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterRequiresPostBack(System.Web.UI.Control)" />
        <altmember cref="P:System.Web.UI.Page.IsCallback" />
      </Docs>
    </Member>
    <Member MemberName="IsPostBackEventControlRegistered">
      <MemberSignature Language="C#" Value="public bool IsPostBackEventControlRegistered { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPostBackEventControlRegistered" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.IsPostBackEventControlRegistered" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPostBackEventControlRegistered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPostBackEventControlRegistered { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPostBackEventControlRegistered : bool" Usage="System.Web.UI.Page.IsPostBackEventControlRegistered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>다시 게시를 수행하는 페이지의 컨트롤이 등록되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>컨트롤이 등록되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.UI.Page.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> 개체를 다시 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>모든 경우에 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.IHttpHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.IsStartupScriptRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : string -&gt; bool" Usage="page.IsStartupScriptRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.IsStartupScriptRegistered(string key). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">검색할 시작 스크립트의 문자열 키입니다.</param>
        <summary>클라이언트 시작 스크립트가 <see cref="T:System.Web.UI.Page" /> 개체에 등록되는지 여부를 결정합니다.</summary>
        <returns>시작 스크립트가 등록되면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하기 전에 호출 <xref:System.Web.UI.Page.RegisterStartupScript%2A?displayProperty=nameWithType> 을 클라이언트 쪽 스크립트 불필요 하 게 막으려면 합니다. 이 스크립트는 필요한 많은 서버 리소스를 만들어야 하는 경우에 특히 중요 합니다.  
  
 <xref:System.Web.UI.Page.IsStartupScriptRegistered%2A> 메서드는 사용되지 않습니다. 사용 하 여는 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> 에서 메서드는 <xref:System.Web.UI.ClientScriptManager> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.RegisterStartupScript%2A> 메서드와 함께 <xref:System.Web.UI.Page.IsStartupScriptRegistered%2A> 메서드. 에 의해 결정 했을 때 코드 선언 블록에 작성 된 ECMAScript에 아직 등록 하지 경우 <xref:System.Web.UI.Page.IsStartupScriptRegistered%2A>는 <xref:System.Web.UI.Page.RegisterStartupScript%2A> 호출 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.RegisterClientScriptBlock/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.RegisterClientScriptBlock/VB/defaultvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterStartupScript(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Page.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 유효성 검사의 성공 여부를 나타내는 값을 가져옵니다.</summary>
        <value>페이지 유효성 검사가 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 반환 하려면 `true`, 현재 유효성 검사 그룹의 모든 유효성 검사 서버 컨트롤을 성공적으로 확인 해야 합니다. 호출한 후에이 속성을 확인 해야는 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> 메서드 또는 집합은 `CausesValidation` 속성을 `true` 에 `OnServerClick` 양식 처리를 시작 하는 ASP.NET 서버 컨트롤에 대 한 이벤트 처리기입니다. 이러한 서버 컨트롤의 <xref:System.Web.UI.WebControls.Button>, <xref:System.Web.UI.HtmlControls.HtmlButton>, <xref:System.Web.UI.HtmlControls.HtmlInputButton>, <xref:System.Web.UI.HtmlControls.HtmlInputImage>, <xref:System.Web.UI.WebControls.ImageButton>, 및 <xref:System.Web.UI.WebControls.LinkButton> 클래스입니다.  
  
 사용 하 여 유효성 검사 그룹의 유효성 검사를 적용 하는 경우는 <xref:System.Web.UI.Page.Validate%2A> 메서드를 다음 지정 된 유효성 검사 그룹의 모든 유효성 검사 컨트롤 유효성을 검사 해야 성공적으로 합니다.  
  
   
  
## Examples  
 다음 코드 예제는 <xref:System.Web.UI.Page.IsValid%2A> 속성을 조건문을 설정 합니다. 속성이 반환 하는 경우 `true`, `Text` 의 속성은 `lblOutput` "페이지는 유효한!"로 설정 되어 그렇지 않으면 "일부 필수 필드는 비어 있습니다."로 설정  
  
 [!code-csharp[System.Web.UI.Page.Validate#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.Validate/CS/validate.cs.aspx#2)]
 [!code-vb[System.Web.UI.Page.Validate#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.Validate/VB/validate.vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">유효성 검사가 수행되기 전에 <see cref="P:System.Web.UI.Page.IsValid" /> 속성이 호출된 경우</exception>
        <altmember cref="P:System.Web.UI.Page.Validators" />
        <altmember cref="T:System.Web.UI.ValidatorCollection" />
        <altmember cref="M:System.Web.UI.Page.Validate" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Items" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IDictionary ^ Items { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Collections.IDictionary" Usage="System.Web.UI.Page.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 컨텍스트에 저장된 개체의 목록을 가져옵니다.</summary>
        <value>페이지 컨텍스트에 저장된 개체가 들어 있는 <see cref="T:System.Collections.IDictionary" />에 대한 참조입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.Page.Items%2A> 페이지 요청으로 같은 수명 개체를 저장 하는 속성입니다. 이 속성은 읽기 전용입니다. 그러나 개체를 추가할 수 있습니다는 <xref:System.Collections.IDictionary> 개체를 반환 합니다.  
  
 에 추가 된 개체는 <xref:System.Web.UI.Page.Items%2A> 속성은 개체를 추가할 수 있도록 페이지의 수명 동안 내내 사용할 수는 <xref:System.Web.UI.Page.Items%2A> 속성에서 초기 페이지 수명에에서 대 한 이벤트 주기가 하며 이후의 이벤트에서 이러한 개체에 액세스 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int with get, set" Usage="System.Web.UI.Page.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지와 관련된 <see cref="T:System.Threading.Thread" /> 개체의 로캘 식별자를 설정합니다.</summary>
        <value>
          <see cref="T:System.Threading.Thread" />에 전달할 로캘 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 하지만 `LCID` .aspx 파일의 지시문에서 특성을 설정할 수 있습니다을 사용 하 여 로캘 식별자를 설정 하는 기본 방법은는 <xref:System.Web.UI.Page.Culture%2A> 및 <xref:System.Web.UI.Page.UICulture%2A> 속성입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Thread" />
        <altmember cref="P:System.Web.UI.Page.Culture" />
        <altmember cref="P:System.Web.UI.Page.UICulture" />
      </Docs>
    </Member>
    <Member MemberName="LoadComplete">
      <MemberSignature Language="C#" Value="public event EventHandler LoadComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LoadComplete" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.Page.LoadComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LoadComplete As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LoadComplete;" />
      <MemberSignature Language="F#" Value="member this.LoadComplete : EventHandler " Usage="member this.LoadComplete : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 주기의 로드 단계가 끝날 때 이 이벤트가 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.LoadComplete> 모든 포스트백 데이터 후 이벤트가 발생 하 고 페이지에 및 이후 뷰 상태 데이터를 로드는 <xref:System.Web.UI.Control.OnLoad%2A> 페이지에서 모든 컨트롤에 대해 메서드가 호출 되었습니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.Page.InitComplete" />
        <altmember cref="E:System.Web.UI.Page.PreRenderComplete" />
        <altmember cref="E:System.Web.UI.Page.SaveStateComplete" />
      </Docs>
    </Member>
    <Member MemberName="LoadPageStateFromPersistenceMedium">
      <MemberSignature Language="C#" Value="protected internal virtual object LoadPageStateFromPersistenceMedium ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance object LoadPageStateFromPersistenceMedium() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.LoadPageStateFromPersistenceMedium" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function LoadPageStateFromPersistenceMedium () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Object ^ LoadPageStateFromPersistenceMedium();" />
      <MemberSignature Language="F#" Value="abstract member LoadPageStateFromPersistenceMedium : unit -&gt; obj&#xA;override this.LoadPageStateFromPersistenceMedium : unit -&gt; obj" Usage="page.LoadPageStateFromPersistenceMedium " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>저장된 모든 뷰 상태 정보를 <see cref="T:System.Web.UI.Page" /> 개체에 로드합니다.</summary>
        <returns>저장된 뷰 상태를 반환합니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.LoadPageStateFromPersistenceMedium%2A> 메서드는 <xref:System.Web.UI.PageStatePersister.Load%2A> 의 메서드는 <xref:System.Web.UI.PageStatePersister?displayProperty=nameWithType> 에서 참조 하는 개체는 <xref:System.Web.UI.Page.PageStatePersister%2A> 로드할 모든 속성에 대 한 뷰 상태 정보를 저장는 <xref:System.Web.UI.Page> 개체입니다.  
  
 ASP.NET의 하위 항목 중 두 개에 포함 되어는 <xref:System.Web.UI.PageStatePersister> 클래스는 <xref:System.Web.UI.HiddenFieldPageStatePersister> ASP.NET 페이지에 포함 된 숨겨진된 필드에 상태 정보를 저장 하는 클래스 및 <xref:System.Web.UI.SessionPageStatePersister> 클래스의 상태를 저장 하는 <xref:System.Web.UI.Page.Session%2A> 연관 된 개체는 요청입니다.  
  
 사용자가 선택한 위치에 상태를 저장 하려면 새 만들어야의 하위 폴더는 <xref:System.Web.UI.PageStatePersister> 클래스 저장 하 고 사용자가 선택한 상태 지 속성 매체를 로드 합니다. 새로 만드는 데 따른 예제를 보려면 <xref:System.Web.UI.PageStatePersister> 개체, 참조는 <xref:System.Web.UI.PageStatePersister> 클래스입니다.  
  
 .NET Framework 버전 1.0 또는 1.1을 로드 하려는 경우이 메서드를 재정의 사용 하는 경우는 <xref:System.Web.UI.Page> 숨겨진된 필드 이외의 위치에서 상태입니다. 그렇게 하도록 선택할 경우 재정의 해야는 <xref:System.Web.UI.Page.SavePageStateToPersistenceMedium%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SavePageStateToPersistenceMedium(System.Object)" />
        <altmember cref="P:System.Web.UI.Page.PageStatePersister" />
        <altmember cref="T:System.Web.UI.PageStatePersister" />
      </Docs>
    </Member>
    <Member MemberName="MaintainScrollPositionOnPostBack">
      <MemberSignature Language="C#" Value="public bool MaintainScrollPositionOnPostBack { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaintainScrollPositionOnPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.MaintainScrollPositionOnPostBack" />
      <MemberSignature Language="VB.NET" Value="Public Property MaintainScrollPositionOnPostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaintainScrollPositionOnPostBack { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MaintainScrollPositionOnPostBack : bool with get, set" Usage="System.Web.UI.Page.MaintainScrollPositionOnPostBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>포스트백 후 클라이언트 브라우저의 동일한 위치로 사용자를 되돌릴지 여부를 나타내는 값을 가져오거나 설정합니다. 이 속성은 사용되지 않는 <see cref="P:System.Web.UI.Page.SmartNavigation" /> 속성을 대체합니다.</summary>
        <value>클라이언트 위치를 유지해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 웹 페이지 서버에 게시 되 면 사용자 페이지의 위쪽에 반환 됩니다. 긴 웹 페이지에 페이지를 다시 여 마지막 위치 페이지에서 스크롤할 하면 사용자가을 의미 합니다.  
  
 경우는 <xref:System.Web.UI.Page.MaintainScrollPositionOnPostBack%2A> 속성이 `true`, 사용자가 반환 마지막 위치 페이지에서.  
  
 설정한는 <xref:System.Web.UI.Page.MaintainScrollPositionOnPostBack%2A> 속성에는 [@ Page](http://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) 지시문입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="member this.MapPath : string -&gt; string" Usage="page.MapPath virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">가상 경로를 나타내는 <see cref="T:System.String" />입니다.</param>
        <summary>가상 경로(절대 또는 상대) 또는 응용 프로그램에 상대적인 경로가 매핑되는 실제 경로를 검색합니다.</summary>
        <returns>가상 경로 또는 응용 프로그램에 상대적인 경로와 관련된 실제 경로입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <xref:System.Web.UI.Page.MapPath%2A> 속성 호스팅 환경에 대 한 중요 한 정보가 포함 될 수 있습니다. 반환 값은 하지 사용자에 게 표시 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Web.UI.Page.MapPath%2A> 메서드는 하위 폴더의 실제 경로를 가져옵니다. 읽은 파일 이름을 추가 합니다는 <xref:System.Web.UI.WebControls.TextBox.Text%2A> 의 속성을 <xref:System.Web.UI.WebControls.TextBox> 제어 합니다. 결과 해당 파일에 실제 절대 경로입니다.  
  
 [!code-csharp[Page_MapPath_ResponseEncoding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_MapPath_ResponseEncoding/CS/page_mappath_responseencoding.cs.aspx#1)]
 [!code-vb[Page_MapPath_ResponseEncoding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_MapPath_ResponseEncoding/VB/page_mappath_responseencoding.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.MapPath(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Master">
      <MemberSignature Language="C#" Value="public System.Web.UI.MasterPage Master { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.MasterPage Master" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Master" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Master As MasterPage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::MasterPage ^ Master { System::Web::UI::MasterPage ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Master : System.Web.UI.MasterPage" Usage="System.Web.UI.Page.Master" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.MasterPage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지의 전반적인 모양을 결정하는 마스터 페이지를 가져옵니다.</summary>
        <value>이 페이지와 연결된 <see cref="T:System.Web.UI.MasterPage" />가 있으면 해당 마스터 페이지이고, 그렇지 않으면 <see langword="null" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.Master%2A> 속성에서 반환 된 <xref:System.Web.UI.MasterPage> 이 페이지와 관련 된 개체입니다. 이 속성은 읽기 전용입니다. 그러나이 속성을 설정할 수는 <xref:System.Web.UI.MasterPage> 개체를 반환 합니다.  
  
 <xref:System.Web.UI.Page.Master%2A> 속성은 마스터 페이지의를 참조 하는 페이지에 대해서만 유효는 <xref:System.Web.UI.Page.MasterPageFile%2A> 속성입니다. 액세스 하는 경우는 <xref:System.Web.UI.Page.Master%2A> 마스터 페이지를 참조 하지 않는 페이지에서 속성 `null` 반환 됩니다. 마스터 페이지의 내용이 후에 사용할는 <xref:System.Web.UI.Page.PreInit> 이벤트가 발생 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.MasterPageFile" />
      </Docs>
    </Member>
    <Member MemberName="MasterPageFile">
      <MemberSignature Language="C#" Value="public virtual string MasterPageFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MasterPageFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.MasterPageFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MasterPageFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ MasterPageFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MasterPageFile : string with get, set" Usage="System.Web.UI.Page.MasterPageFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>마스터 페이지의 가상 경로를 가져오거나 설정합니다.</summary>
        <value>마스터 페이지의 가상 경로입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.MasterPageFile%2A> 속성은이 페이지와 연결 된 마스터 페이지 파일의 가상 경로 (응용 프로그램의 루트)부터 합니다. <xref:System.Web.UI.Page.MasterPageFile%2A> 속성에만 설정할 수 있습니다는 <xref:System.Web.UI.Page.PreInit> 이벤트를 설정 하는 <xref:System.Web.UI.Page.MasterPageFile%2A> 후의 <xref:System.Web.UI.Page.PreInit> 이벤트를 발생 시킵니다는 <xref:System.InvalidOperationException> 예외입니다. 경우는 <xref:System.Web.UI.Page.MasterPageFile%2A> 속성이 올바른지 형식의 예외가 <xref:System.Web.HttpException> 페이지 수명 주기에서 이후에 하지만 속성이 설정 되어 있을 때 예외가 throw 됩니다는 <xref:System.Web.UI.Page.PreInit> 이벤트입니다.  
  
 페이지는는 <xref:System.Web.UI.Page.MasterPageFile%2A> 속성 집합 콘텐츠 페이지 이며 따라서만 최상위 컨트롤을 포함할 수 있습니다 <xref:System.Web.UI.WebControls.Content> 컨트롤입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.Page.MasterPageFile" /> 이벤트가 완료된 후에 <see cref="E:System.Web.UI.Page.PreInit" /> 속성이 설정된 경우</exception>
        <exception cref="T:System.Web.HttpException">
          <see cref="P:System.Web.UI.Page.MasterPageFile" /> 속성에 지정된 파일이 없는 경우  \- 또는-  페이지에 최상위 컨트롤인 <see cref="T:System.Web.UI.WebControls.Content" /> 컨트롤이 없습니다.</exception>
        <altmember cref="P:System.Web.UI.Page.Master" />
      </Docs>
    </Member>
    <Member MemberName="MaxPageStateFieldLength">
      <MemberSignature Language="C#" Value="public int MaxPageStateFieldLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxPageStateFieldLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.MaxPageStateFieldLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxPageStateFieldLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxPageStateFieldLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxPageStateFieldLength : int with get, set" Usage="System.Web.UI.Page.MaxPageStateFieldLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 상태 필드의 최대 길이를 가져오거나 설정합니다.</summary>
        <value>페이지 상태 필드의 최대 길이(바이트)입니다. 기본값은 -1입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Web.UI.Page.MaxPageStateFieldLength%2A> 양수 속성, 클라이언트 브라우저에 보내지는 뷰 상태는 여러 개의 숨겨진된 필드를 나뉩니다 및 각 필드의 값에 지정 된 크기 보다 작으면는 <xref:System.Web.UI.Page.MaxPageStateFieldLength%2A> 속성입니다.  
  
 설정의 <xref:System.Web.UI.Page.MaxPageStateFieldLength%2A> 음수로 (기본값) 속성 보기 상태 필드를 청크로 분할 되지 않습니다 나타냅니다. 설정의 <xref:System.Web.UI.Page.MaxPageStateFieldLength%2A> 소수의 성능이 저하 될 수 있습니다.  
  
 값을 설정할는 <xref:System.Web.UI.Page.MaxPageStateFieldLength%2A> 속성에는 Web.config 파일의 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Web.UI.Page.MaxPageStateFieldLength" /> 속성이 -1 또는 양수가 아닌 경우</exception>
        <exception cref="T:System.InvalidOperationException">페이지가 초기화된 후 <see cref="P:System.Web.UI.Page.MaxPageStateFieldLength" /> 속성이 설정된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="MetaDescription">
      <MemberSignature Language="C#" Value="public string MetaDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MetaDescription" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.MetaDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property MetaDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MetaDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MetaDescription : string with get, set" Usage="System.Web.UI.Page.MetaDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>"설명" <see langword="meta" /> 요소의 내용을 가져오거나 설정합니다.</summary>
        <value>"설명" <see langword="meta" /> 요소의 내용입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML `meta` 요소 검색 엔진 목록을 개선 하기 위해 사용할 수 있습니다. "Description" `meta` 요소 목록 미리 보기를 개선 하기 위해 일부 검색 엔진에 사용 됩니다.  
  
 "Description" 이면 `meta` 요소에는 `head` 페이지 태그의 `meta` 페이지가 렌더링 될 때 요소가 페이지에 추가 됩니다. 페이지 태그 "description"가 이미 있으면 `meta` 요소를이 속성은 가져오거나는 `content` 특성에는 `meta` 요소입니다.  
  
 지시문에이 속성을 설정할 수도 있습니다.  
  
   
  
## Examples  
 설정 하는 경우는 <xref:System.Web.UI.Page.MetaDescription%2A> "ASP.NET 개요" 페이지의 속성을 다음 요소는 렌더링 된 HTML에 표시 됩니다.  
  
 `<meta name="description" content="ASP.NET Overview" />`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">페이지에는 헤더 컨트롤("서버"로 설정된 <see langword="head" /> 특성과 <see langword="runat" /> 요소)이 없습니다.</exception>
        <altmember cref="P:System.Web.UI.Page.MetaKeywords" />
      </Docs>
    </Member>
    <Member MemberName="MetaKeywords">
      <MemberSignature Language="C#" Value="public string MetaKeywords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MetaKeywords" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.MetaKeywords" />
      <MemberSignature Language="VB.NET" Value="Public Property MetaKeywords As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MetaKeywords { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MetaKeywords : string with get, set" Usage="System.Web.UI.Page.MetaKeywords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>"키워드" <see langword="meta" /> 요소의 내용을 가져오거나 설정합니다.</summary>
        <value>"키워드" <see langword="meta" /> 요소의 내용입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML `meta` 요소 검색 엔진 목록을 개선 하기 위해 사용할 수 있습니다. "키워드" `meta` 요소 전혀 사용 되지 않는 또는 거의 가중치 주요 검색 엔진에서 제공 됩니다.  
  
 "키워드" 이면 `meta` 요소에는 `head` 페이지 태그의 `meta` 페이지가 렌더링 될 때 요소가 페이지에 추가 됩니다. 페이지 태그 "키워드"가 이미 있으면 `meta` 요소를이 속성은 가져오거나는 `content` 특성에는 `meta` 요소입니다.  
  
 지시문에이 속성을 설정할 수도 있습니다.  
  
   
  
## Examples  
 설정 하는 경우는 <xref:System.Web.UI.Page.MetaKeywords%2A> "HTML, CSS, JavaScript, XML" 페이지의 속성을 다음 요소는 렌더링 된 HTML에 표시 됩니다.  
  
 `<meta name="keywords" content=" HTML,CSS,XML,JavaScript" />`  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">페이지에는 헤더 컨트롤("서버"로 설정된 <see langword="head" /> 특성과 <see langword="runat" /> 요소)이 없습니다.</exception>
        <altmember cref="P:System.Web.UI.Page.MetaDescription" />
      </Docs>
    </Member>
    <Member MemberName="ModelBindingExecutionContext">
      <MemberSignature Language="C#" Value="public System.Web.ModelBinding.ModelBindingExecutionContext ModelBindingExecutionContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.ModelBinding.ModelBindingExecutionContext ModelBindingExecutionContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ModelBindingExecutionContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModelBindingExecutionContext As ModelBindingExecutionContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::ModelBinding::ModelBindingExecutionContext ^ ModelBindingExecutionContext { System::Web::ModelBinding::ModelBindingExecutionContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ModelBindingExecutionContext : System.Web.ModelBinding.ModelBindingExecutionContext" Usage="System.Web.UI.Page.ModelBindingExecutionContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.ModelBinding.ModelBindingExecutionContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>모델 바인딩 실행 컨텍스트를 가져옵니다.</summary>
        <value>모델 바인딩 실행 컨텍스트입니다. 모델 바인딩 실행 컨텍스트가 <see langword="null" />인 경우 새 것이 만들어지고 반환됩니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelState">
      <MemberSignature Language="C#" Value="public System.Web.ModelBinding.ModelStateDictionary ModelState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.ModelBinding.ModelStateDictionary ModelState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ModelState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModelState As ModelStateDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::ModelBinding::ModelStateDictionary ^ ModelState { System::Web::ModelBinding::ModelStateDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ModelState : System.Web.ModelBinding.ModelStateDictionary" Usage="System.Web.UI.Page.ModelState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.ModelBinding.ModelStateDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>모델과 모델 바인딩 유효성 검사의 상태를 포함하는 모델 상태 사전 개체를 가져옵니다.</summary>
        <value>모델 상태 사전 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web Forms 모델 바인딩 사용에 자습서 시리즈를 참조 하십시오. [모델 바인딩 및 Web Forms](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="page.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>페이지를 초기화하는 <see cref="E:System.Web.UI.Control.Init" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.OnInit%2A> 메서드를 만드는 데 필요한 초기화 및 설정 단계를 수행 합니다.는 <xref:System.Web.UI.Page> 인스턴스. 이 페이지의 수명 주기이 단계 페이지에 선언 된 서버 컨트롤의 기본 상태로 초기화 됩니다. 그러나 각 컨트롤의 뷰 상태는 아직 채워지지 않습니다. 페이지에서 제어 하는 동안 페이지에 있는 다른 서버 컨트롤에 액세스할 수 없습니다는 `Page_Init` 다른 컨트롤의 자식 또는 부모 컨트롤 인지 여부에 관계 없이 단계입니다. 다른 서버 컨트롤 생성 하 고 액세스할 준비가 되도록 보장 되지 않습니다.  
  
 <xref:System.Web.UI.Page.OnInit%2A> 사이 호출 됩니다는 <xref:System.Web.UI.Page.OnPreInit%2A> 메서드 및 하기 전에 <xref:System.Web.UI.Page.OnInitComplete%2A> 메서드.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.Page.OnInit%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Web.UI.Page.OnInit(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Web.UI.Page.OnInit(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInitComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnInitComplete (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitComplete(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.OnInitComplete(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitComplete (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitComplete(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitComplete : EventArgs -&gt; unit&#xA;override this.OnInitComplete : EventArgs -&gt; unit" Usage="page.OnInitComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>페이지가 초기화된 후에 <see cref="E:System.Web.UI.Page.InitComplete" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.OnInitComplete%2A> 메서드 페이지 초기화가 완료 된 후 호출 됩니다. 이 페이지의 수명 주기이 단계에서 선언 된 모든 페이지에 있는 컨트롤 초기화 되지만 페이지의 뷰 상태는 아직 채워지지 않습니다. 서버 컨트롤에 액세스할 수 있습니다 하지만 사용자에서 반환 된 정보가 아직 포함 되지 않습니다.  
  
 <xref:System.Web.UI.Page.OnInitComplete%2A> 메서드가 끝날 때 발생는 <xref:System.Web.UI.Page> 초기화 단계와 로드 단계 전에 합니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.Page.OnInitComplete%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Web.UI.Page.OnInitComplete(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Web.UI.Page.OnInitComplete(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLoadComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnLoadComplete (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoadComplete(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.OnLoadComplete(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLoadComplete (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLoadComplete(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLoadComplete : EventArgs -&gt; unit&#xA;override this.OnLoadComplete : EventArgs -&gt; unit" Usage="page.OnLoadComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>페이지 로드 단계가 끝날 때 <see cref="E:System.Web.UI.Page.LoadComplete" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.OnLoadComplete%2A> 메서드 페이지 로드 단계가 끝날 때 호출 됩니다. 이 시점에서 페이지 수명 주기 다시 게시 된 데이터 및 뷰 상태 데이터를 모든 페이지에 컨트롤에 로드 됩니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.Page.OnLoadComplete%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Web.UI.Page.OnLoadComplete(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Web.UI.Page.OnLoadComplete(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreInit">
      <MemberSignature Language="C#" Value="protected virtual void OnPreInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.OnPreInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreInit : EventArgs -&gt; unit&#xA;override this.OnPreInit : EventArgs -&gt; unit" Usage="page.OnPreInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>페이지 초기화가 시작될 때 <see cref="E:System.Web.UI.Page.PreInit" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.OnPreInit%2A> 메서드 페이지 초기화 단계가의 시작 부분에서 호출 됩니다.  
  
 이후에 <xref:System.Web.UI.Page.OnPreInit%2A> 메서드는, 개인 설정 정보가 로드 되 고 페이지 테마 있는 경우 초기화 됩니다. 동적으로 정의 하는 기본 설정된 단계 이기도 한 <xref:System.Web.UI.PageTheme> 또는 <xref:System.Web.UI.MasterPage> 페이지에 대 한 합니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.Page.OnPreInit%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Web.UI.Page.OnPreInit(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Web.UI.Page.OnPreInit(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreLoad">
      <MemberSignature Language="C#" Value="protected virtual void OnPreLoad (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreLoad(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.OnPreLoad(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreLoad (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreLoad(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreLoad : EventArgs -&gt; unit&#xA;override this.OnPreLoad : EventArgs -&gt; unit" Usage="page.OnPreLoad e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>다시 게시된 데이터가 페이지 서버 컨트롤에 로드된 후 <see cref="E:System.Web.UI.Page.PreLoad" /> 이벤트가 발생하기 전에 <see cref="M:System.Web.UI.Control.OnLoad(System.EventArgs)" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.OnPreLoad%2A> 메서드는 사용자 로부터 반환 된 모든 포스트백 데이터를 로드 합니다. 페이지의 수명 주기에서이 단계에서는 뷰 상태 정보 및 포스트백 데이터에 대 한 선언 초기화 단계 만들어진 컨트롤은 페이지의 컨트롤에 로드 됩니다.  
  
 만든 컨트롤은 <xref:System.Web.UI.Page.OnPreLoad%2A> 메서드 뷰 상태와 포스트백 데이터로 로드 됩니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.Page.OnPreLoad%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Web.UI.Page.OnPreLoad(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Web.UI.Page.OnPreLoad(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRenderComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnPreRenderComplete (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreRenderComplete(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.OnPreRenderComplete(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreRenderComplete (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreRenderComplete(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreRenderComplete : EventArgs -&gt; unit&#xA;override this.OnPreRenderComplete : EventArgs -&gt; unit" Usage="page.OnPreRenderComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Web.UI.Page.PreRenderComplete" /> 이벤트가 발생한 후 페이지가 렌더링되기 전에 <see cref="M:System.Web.UI.Page.OnPreRenderComplete(System.EventArgs)" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.OnPreRenderComplete%2A> 메서드 페이지 수명 주기의 렌더링 이전 단계가 완료 될 때 호출 됩니다. 페이지 수명 주기의이 단계에서는 모든 컨트롤을 만들 및 페이지 출력을 렌더링 하도록 준비 되어 있습니다.  
  
 호출 페이지의 뷰 상태를 저장 하기 전에 마지막 이벤트입니다.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.Page.OnPreRenderComplete%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Web.UI.Page.OnPreRenderComplete(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Web.UI.Page.OnPreRenderComplete(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSaveStateComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnSaveStateComplete (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSaveStateComplete(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.OnSaveStateComplete(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSaveStateComplete (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSaveStateComplete(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSaveStateComplete : EventArgs -&gt; unit&#xA;override this.OnSaveStateComplete : EventArgs -&gt; unit" Usage="page.OnSaveStateComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.EventArgs" /> 개체입니다.</param>
        <summary>페이지 상태가 지속성 매체에 저장된 후에 <see cref="E:System.Web.UI.Page.SaveStateComplete" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.OnSaveStateComplete%2A> 때 컨트롤에 대 한 상태 정보 페이지에 대 한 지 속성 매체에 기록 된 메서드를 호출 합니다. 호출 하 여 상태 정보가 지 속성 매체에 기록 되는 <xref:System.Web.UI.Page.SavePageStateToPersistenceMedium%2A> 메서드.  
  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다. 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 또한 <xref:System.Web.UI.Page.OnSaveStateComplete%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Web.UI.Page.OnSaveStateComplete(System.EventArgs)" /> 파생된 클래스에서 호출 해야 기본 클래스의 <see cref="M:System.Web.UI.Page.OnSaveStateComplete(System.EventArgs)" /> 메서드 등록 된 대리자가 이벤트를 받도록 합니다.</para>
        </block>
        <altmember cref="E:System.Web.UI.Page.SaveStateComplete" />
        <altmember cref="M:System.Web.UI.Page.SavePageStateToPersistenceMedium(System.Object)" />
        <altmember cref="M:System.Web.UI.Page.LoadPageStateFromPersistenceMedium" />
      </Docs>
    </Member>
    <Member MemberName="PageAdapter">
      <MemberSignature Language="C#" Value="public System.Web.UI.Adapters.PageAdapter PageAdapter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Adapters.PageAdapter PageAdapter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.PageAdapter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PageAdapter As PageAdapter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Adapters::PageAdapter ^ PageAdapter { System::Web::UI::Adapters::PageAdapter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PageAdapter : System.Web.UI.Adapters.PageAdapter" Usage="System.Web.UI.Page.PageAdapter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Adapters.PageAdapter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>특정 요청 브라우저에 대해 페이지를 렌더링하는 어댑터를 가져옵니다.</summary>
        <value>페이지를 렌더링하는 <see cref="T:System.Web.UI.Adapters.PageAdapter" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.PageAdapter%2A> 속성 반환 특정 <xref:System.Web.UI.Adapters.PageAdapter> 개체의 동작을 수정 하는 <xref:System.Web.UI.Page> 요청 하는 브라우저에 대 한 개체입니다.  
  
 특정 <xref:System.Web.UI.Adapters.PageAdapter> 들어오는의 특징을 검사 하 여 결정 됩니다 <xref:System.Web.UI.Page.Request%2A> 개체입니다. 요청 된 수명 주기 이벤트에 대해에 어댑터를 선택 하는 경우는 <xref:System.Web.UI.Adapters.PageAdapter> 에서 해당 이벤트를 재정의 하는 개체는 <xref:System.Web.UI.Page> 개체입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageStatePersister">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.PageStatePersister PageStatePersister { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.PageStatePersister PageStatePersister" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.PageStatePersister" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property PageStatePersister As PageStatePersister" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Web::UI::PageStatePersister ^ PageStatePersister { System::Web::UI::PageStatePersister ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PageStatePersister : System.Web.UI.PageStatePersister" Usage="System.Web.UI.Page.PageStatePersister" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PageStatePersister</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지와 관련된 <see cref="T:System.Web.UI.PageStatePersister" /> 개체를 가져옵니다.</summary>
        <value>페이지와 관련된 <see cref="T:System.Web.UI.PageStatePersister" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTTP 요청 및 응답은 기본적으로 상태 비저장 합니다. ASP.NET 서버 페이지 HTTP 요청 간에 상태를 유지 하기 위해 저장할 수 <xref:System.Web.UI.Page> 상태입니다. 이 상태 이면 보기 상태 라는 페이지와 제어 설정 및 데이터 페이지 및 컨트롤 있는 것 처럼 사용자 보여 준다는 사실을 알았습니다 및 마지막 라운드트립에서 페이지에 보고 상호 작용 하는 것과 같은 표시 하는 구성 됩니다. 같은 페이지에 대 한 연속 요청 사이의 뷰 상태를 저장 메커니즘은 여러 가지가 있습니다. 추상 <xref:System.Web.UI.PageStatePersister> 클래스는 이러한 상태 저장 메커니즘에 대 한 기본 클래스를 나타냅니다.  
  
 페이지 개발자는 일반적으로 사용 하려면 필요 하지는 <xref:System.Web.UI.Page.PageStatePersister%2A> 속성입니다. <xref:System.Web.UI.Page.PageStatePersister%2A> 속성의 기능을 확장 하는 컨트롤 개발자가 주로 사용 되는 <xref:System.Web.UI.Page> 클래스입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.PageStatePersister" />
      </Docs>
    </Member>
    <Member MemberName="postEventArgumentID">
      <MemberSignature Language="C#" Value="public const string postEventArgumentID;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string postEventArgumentID" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.Page.postEventArgumentID" />
      <MemberSignature Language="VB.NET" Value="Public Const postEventArgumentID As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ postEventArgumentID;" />
      <MemberSignature Language="F#" Value="val mutable postEventArgumentID : string" Usage="System.Web.UI.Page.postEventArgumentID" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>렌더링된 페이지에 EVENTARGUMENT 숨김 필드를 정의하는 문자열입니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="F:System.Web.UI.Page.postEventSourceID" />
      </Docs>
    </Member>
    <Member MemberName="postEventSourceID">
      <MemberSignature Language="C#" Value="public const string postEventSourceID;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string postEventSourceID" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.Page.postEventSourceID" />
      <MemberSignature Language="VB.NET" Value="Public Const postEventSourceID As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ postEventSourceID;" />
      <MemberSignature Language="F#" Value="val mutable postEventSourceID : string" Usage="System.Web.UI.Page.postEventSourceID" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>렌더링된 페이지에 EVENTTARGET 숨김 필드를 정의하는 문자열입니다.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="F:System.Web.UI.Page.postEventArgumentID" />
      </Docs>
    </Member>
    <Member MemberName="PreInit">
      <MemberSignature Language="C#" Value="public event EventHandler PreInit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PreInit" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.Page.PreInit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreInit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PreInit;" />
      <MemberSignature Language="F#" Value="member this.PreInit : EventHandler " Usage="member this.PreInit : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 초기화 전에 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 이벤트를 사용 하면 페이지 요청에서 포스트백에 대 한 응답에서 페이지가 로드 되 고 있는지 여부 등의 조건을 확인할 수 있습니다. 프로필 속성의 값을 확인할 수도 있습니다.  
  
 이벤트를 사용 하면 페이지 수명 주기에서 나중에 사용 되는 값을 설정할 수 있습니다. 동적으로 마스터 페이지 또는 요청 된 페이지의 테마를 설정 하 고 동적 컨트롤을 만들 수 있습니다.  
  
 방식에 대 한 자세한 내용은 <xref:System.Web.UI.Page.PreInit> ASP.NET 수명 주기에 맞는 이벤트를 참조 하십시오. [ASP.NET 페이지 수명 주기 개요](http://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.OnPreInit(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.Page.PreLoad" />
      </Docs>
    </Member>
    <Member MemberName="PreLoad">
      <MemberSignature Language="C#" Value="public event EventHandler PreLoad;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PreLoad" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.Page.PreLoad" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreLoad As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PreLoad;" />
      <MemberSignature Language="F#" Value="member this.PreLoad : EventHandler " Usage="member this.PreLoad : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 <see cref="E:System.Web.UI.Control.Load" /> 이벤트가 발생하기 전에 이 이벤트가 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.PreLoad> 이벤트가 모든 포스트백 데이터 처리 된 후 및 하기 전에 <xref:System.Web.UI.Control.Load> 이벤트입니다. 로드 하기 전에 다시 게시 된 데이터를 두 번째 시도 하는 <xref:System.Web.UI.Page.OnLoadComplete%2A> 이벤트입니다. 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.OnPreLoad(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.Page.PreInit" />
        <altmember cref="E:System.Web.UI.Page.PreRenderComplete" />
      </Docs>
    </Member>
    <Member MemberName="PreRenderComplete">
      <MemberSignature Language="C#" Value="public event EventHandler PreRenderComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PreRenderComplete" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.Page.PreRenderComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreRenderComplete As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PreRenderComplete;" />
      <MemberSignature Language="F#" Value="member this.PreRenderComplete : EventHandler " Usage="member this.PreRenderComplete : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 내용이 렌더링되기 전에 이 이벤트가 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.PreRenderComplete> 페이지 수명 주기의 사전 렌더링 단계가 완료 되 면 이벤트가 발생 합니다. 페이지 수명 주기의이 단계에서는 모든 컨트롤을 만들, 필요한 페이지 매김이 완료 되 면 및 페이지 출력 스트림으로 렌더링 하도록 준비 되어 있습니다.  
  
 페이지의 뷰 상태가 저장 되기 전에 발생 하는 마지막 이벤트입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [NIB: 이벤트 사용](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.OnPreRenderComplete(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.Page.PreLoad" />
        <altmember cref="E:System.Web.UI.Page.PreInit" />
      </Docs>
    </Member>
    <Member MemberName="PreviousPage">
      <MemberSignature Language="C#" Value="public System.Web.UI.Page PreviousPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Page PreviousPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.PreviousPage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreviousPage As Page" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Page ^ PreviousPage { System::Web::UI::Page ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreviousPage : System.Web.UI.Page" Usage="System.Web.UI.Page.PreviousPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Page</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 페이지로 컨트롤을 전송한 페이지를 가져옵니다.</summary>
        <value>현재 페이지로 컨트롤을 전송한 페이지를 나타내는 <see cref="T:System.Web.UI.Page" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하는 경우는 <xref:System.Web.HttpServerUtility.Transfer%2A> 메서드 또는 처리를 전송 한 ASP.NET 페이지에서 다른 페이지 간 게시를 사용 하 여 원래 페이지의 대상 페이지에 대 한 필요할 수 있는 요청 정보를 포함 하는 합니다. 사용할 수는 <xref:System.Web.UI.Page.PreviousPage%2A> 해당 정보에 액세스 하는 속성입니다.  
  
 현재 페이지 (전송 아니거나 다른 페이지에서 동시 게시)를 직접 요청으로 렌더링 되는 경우는 <xref:System.Web.UI.Page.PreviousPage%2A> 속성 포함 `null`합니다.  
  
   
  
## Examples  
 다음 예제에서는 두 부분으로입니다. 첫 번째는 ASP.NET 페이지를 사용 하는 <xref:System.Web.HttpServerUtility.Transfer%2A> 으로 페이지 모델에서 노출 하는 메서드에 `Server.Transfer("path")`합니다. 두 번째 부분은 사용 하는 대상 페이지는 <xref:System.Web.UI.Page.PreviousPage%2A> 속성을 첫 번째 페이지의 제목을 가져옵니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page.PreviousPage#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.PreviousPage/CS/Main.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.PreviousPage#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.PreviousPage/VB/Main.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.UI.Page.PreviousPage#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.PreviousPage/CS/Notify.aspx#2)]
 [!code-aspx-vb[System.Web.UI.Page.PreviousPage#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.PreviousPage/VB/Notify.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">현재 사용자가 이전 페이지에 액세스할 수 없는 경우  -또는-  ASP.NET 라우팅은 사용 중이며 이전 페이지 URL은 라우팅된 URL입니다. ASP.NET이 액세스 권한을 확인할 때에는 해당 URL이 파일에 대한 실제 경로라고 가정합니다. 라우팅된 URL과 관련된 사례가 아니므로 검사는 실패했습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="page.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Web.HttpContext" />, <see cref="P:System.Web.HttpContext.Request" /> 및 <see cref="P:System.Web.HttpContext.Response" /> 등과 같이 HTTP 요청을 처리하는 데 사용되는 내장 서버 개체에 대한 참조를 제공하는 <see cref="P:System.Web.HttpContext.Session" /> 개체입니다.</param>
        <summary>
          <see cref="T:System.Web.UI.Page" />, <see cref="P:System.Web.UI.Page.Context" />, <see cref="P:System.Web.UI.Page.Request" /> 및 <see cref="P:System.Web.UI.Page.Response" /> 속성과 같은 <see cref="P:System.Web.UI.Page.Application" /> 개체의 내장 서버 개체를 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 하지 해야 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.Context" />
        <altmember cref="P:System.Web.UI.Page.Request" />
        <altmember cref="P:System.Web.UI.Page.Response" />
        <altmember cref="P:System.Web.UI.Page.Application" />
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (System.Web.UI.IPostBackEventHandler sourceControl, string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(class System.Web.UI.IPostBackEventHandler sourceControl, string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RaisePostBackEvent(System.Web.UI.IPostBackEventHandler,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (sourceControl As IPostBackEventHandler, eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::Web::UI::IPostBackEventHandler ^ sourceControl, System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaisePostBackEvent : System.Web.UI.IPostBackEventHandler * string -&gt; unit&#xA;override this.RaisePostBackEvent : System.Web.UI.IPostBackEventHandler * string -&gt; unit" Usage="page.RaisePostBackEvent (sourceControl, eventArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceControl" Type="System.Web.UI.IPostBackEventHandler" />
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceControl">다시 게시를 발생시킨 ASP.NET 서버 컨트롤입니다. 이 컨트롤은 <see cref="T:System.Web.UI.IPostBackEventHandler" /> 인터페이스를 구현해야 합니다.</param>
        <param name="eventArgument">다시 게시 인수입니다.</param>
        <summary>들어오는 다시 게시 이벤트를 처리하도록 다시 게시를 발생시킨 서버 컨트롤에 알립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page> 호출 개체는 <xref:System.Web.UI.Page.RaisePostBackEvent%2A> 포스트백이 발생할 때 메서드. 로드 및 변경 내용 알림 완료 된 후 하지만 사전 렌더링이 발생 하기 전에 페이지 수명 주기에서이 호출이 발생 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Web.UI.Page.RaisePostBackEvent%2A> 때 사용자 지정 다시 게시 이벤트 발생 asp `userButton` 서버 컨트롤을 클릭 합니다.  
  
 [!code-csharp[Page_RaisePostBackEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_RaisePostBackEvent/CS/page_raisepostbackevent.cs.aspx#1)]
 [!code-vb[Page_RaisePostBackEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_RaisePostBackEvent/VB/page_raisepostbackevent.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterArrayDeclaration(string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterArrayDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterArrayDeclaration (arrayName As String, arrayValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterArrayDeclaration(System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterArrayDeclaration : string * string -&gt; unit" Usage="page.RegisterArrayDeclaration (arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.RegisterArrayDeclaration(string arrayName, string arrayValue). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayName">값을 선언할 배열의 이름입니다.</param>
        <param name="arrayValue">배열에서 찾을 수 있는 값입니다.</param>
        <summary>페이지가 렌더링될 때 ECMAScript 배열 선언으로 선언되는 값을 선언합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 클라이언트 스크립트 라이브러리가 동일한 형식의 모든 컨트롤을 작동할 수 있도록 자신을 배열 내에서 선언 하 스크립트 기반 컨트롤에서 사용할 수 있습니다.  
  
 <xref:System.Web.UI.Page.RegisterArrayDeclaration%2A> 메서드는 사용되지 않습니다. 사용 하 여는 <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> 에서 메서드는 <xref:System.Web.UI.ClientScriptManager> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.RegisterArrayDeclaration%2A> 메서드는 배열을 선언 하 `myArray`, 라는 세 개의 개체가 들어 있는 `x`, `y`, 및 `z`합니다. 정의 하 고 사용 하 여 시작 스크립트를 등록 하는 예제는 <xref:System.Web.UI.Page.RegisterStartupScript%2A> 메서드. 때 ECMAScript `doClick` 이 코드를 포함 하는 페이지에서 함수를 호출, 배열 및 해당 개체에서 초기화 됩니다.  
  
 [!code-csharp[Page_RegisterArrayDeclaration#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_RegisterArrayDeclaration/CS/page_registerarraydeclaration.cs.aspx#1)]
 [!code-vb[Page_RegisterArrayDeclaration#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_RegisterArrayDeclaration/VB/page_registerarraydeclaration.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterStartupScript(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncTask">
      <MemberSignature Language="C#" Value="public void RegisterAsyncTask (System.Web.UI.PageAsyncTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterAsyncTask(class System.Web.UI.PageAsyncTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterAsyncTask(System.Web.UI.PageAsyncTask)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterAsyncTask (task As PageAsyncTask)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterAsyncTask(System::Web::UI::PageAsyncTask ^ task);" />
      <MemberSignature Language="F#" Value="member this.RegisterAsyncTask : System.Web.UI.PageAsyncTask -&gt; unit" Usage="page.RegisterAsyncTask task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="System.Web.UI.PageAsyncTask" />
      </Parameters>
      <Docs>
        <param name="task">비동기 작업을 정의하는 <see cref="T:System.Web.UI.PageAsyncTask" />입니다.</param>
        <summary>페이지에 새 비동기 작업을 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여 비동기 작업 정의 <xref:System.Web.UI.PageAsyncTask> 클래스입니다. 작업이 정의 된 경우 사용 된 <xref:System.Web.UI.Page.RegisterAsyncTask%2A> 페이지와 작업을 등록 합니다. 작업을 등록 한 후 호출 된 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 메서드를 비동기 작업을 시작 합니다.  
  
 <xref:System.Web.UI.Page.RegisterAsyncTask%2A> 동기 및 비동기 페이지와 메서드를 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.AsyncTimeout%2A> 속성으로는 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 및 <xref:System.Web.UI.Page.RegisterAsyncTask%2A> 메서드. Note 시작, 종료 및 제한 시간 처리기를 사용 합니다. 예제에서는 인위적 지연을 포함 되는 비동기 작업에 지정 된 대로 작업에 대 한 할당된 된 시간 초과 상황을 보여 주기 위해는 <xref:System.Web.UI.Page.AsyncTimeout%2A> 속성입니다. 실제 시나리오에서는 데이터베이스 호출 또는 이미지 생성을 수행 하는 비동기 작업을 사용할 수 예를 들어 및 제한 시간 처리기는 지정 된 시간 내에 작업을 수행 하지 않는 경우 정상적인 저하를 제공 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page.AsyncTimeout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.AsyncTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/vb/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.Page.AsyncTimeout#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/CS/page_asynctask.cs#2)]
 [!code-vb[System.Web.UI.Page.AsyncTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.AsyncTimeout/vb/page_asynctask.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">비동기 작업이 <see langword="null" />인 경우</exception>
        <altmember cref="M:System.Web.UI.Page.ExecuteRegisteredAsyncTasks" />
        <altmember cref="T:System.Web.UI.PageAsyncTask" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public virtual void RegisterClientScriptBlock (string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterClientScriptBlock(string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterClientScriptBlock(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RegisterClientScriptBlock (key As String, script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterClientScriptBlock(System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="abstract member RegisterClientScriptBlock : string * string -&gt; unit&#xA;override this.RegisterClientScriptBlock : string * string -&gt; unit" Usage="page.RegisterClientScriptBlock (key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.RegisterClientScriptBlock(Type type, string key, string script). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">스크립트 블록을 식별하는 고유 키입니다.</param>
        <param name="script">클라이언트에 보낸 스크립트의 내용입니다.</param>
        <summary>클라이언트 쪽 스크립트 블록을 응답으로 내보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클라이언트 쪽 스크립트의 여는 태그 바로 뒤 내보내집니다는 <xref:System.Web.UI.Page> 개체의 `<form runat= server>` 요소입니다. 열기 및 닫기 포함 해야 `<script>` 주위의 스크립트 블록에 지정 된 문자열의 `script` 매개 변수입니다.  
  
 이 메서드는 키를 사용 하 여 스크립트 블록을 식별, 때문에 스크립트 블록에서 다른 서버 컨트롤 인스턴스에 요청 될 때마다 출력 스트림으로 내보낼 수 필요가 없습니다. 키를 사용 하 여 서로 방해 하는 다른 컨트롤의 스크립트 블록의 될 가능성은 줄어듭니다도 합니다.  
  
 모든 스크립트와 동일한 블록 `key` 매개 변수 값에는 중복 요소로 간주 됩니다.  
  
> [!NOTE]
>  요청 하는 브라우저는 스크립트를 지원 하지 않는 경우 렌더링할 수 있도록 HTML 주석 스크립트에 태그를 포함 해야 합니다.  
  
 <xref:System.Web.UI.Page.RegisterClientScriptBlock%2A> 메서드는 사용되지 않습니다. 대신 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 클래스의 <xref:System.Web.UI.ClientScriptManager> 메서드를 사용합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.RegisterClientScriptBlock%2A> 메서드와 함께 <xref:System.Web.UI.Page.IsClientScriptBlockRegistered%2A> 메서드. 에 의해 결정 된을 코드 선언 블록에 ECMAScript에 이미 등록 되지 않은 경우 <xref:System.Web.UI.Page.IsClientScriptBlockRegistered%2A>, <xref:System.Web.UI.Page.RegisterClientScriptBlock%2A> 호출 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.RegisterClientScriptBlock/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.RegisterClientScriptBlock/VB/defaultvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public virtual void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterHiddenField(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RegisterHiddenField (hiddenFieldName As String, hiddenFieldInitialValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterHiddenField(System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="abstract member RegisterHiddenField : string * string -&gt; unit&#xA;override this.RegisterHiddenField : string * string -&gt; unit" Usage="page.RegisterHiddenField (hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hiddenFieldName">렌더링할 숨김 필드의 고유 이름입니다.</param>
        <param name="hiddenFieldInitialValue">숨겨진 폼에 내보낼 값입니다.</param>
        <summary>서버 컨트롤이 폼에 있는 숨김 필드를 자동으로 등록할 수 있도록 합니다. <see cref="T:System.Web.UI.Page" /> 서버 컨트롤이 렌더링되면 필드가 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 개체로 보내집니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.RegisterHiddenField%2A> 메서드는 사용되지 않습니다. 사용 하 여는 <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> 에서 메서드는 <xref:System.Web.UI.ClientScriptManager> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.RegisterHiddenField%2A> ECMAScript 코드를 만드는 데 메서드에 요청 브라우저에 전달 됩니다. 숨겨진된 필드의 이름으로 설정 됩니다 `myHiddenField` 값은 "Microsoft 시작!"로 설정 하 고 <xref:System.Web.UI.Page.RegisterStartupScript%2A> 메서드 호출의 `myHiddenField` 값 페이지에서 단추를 클릭할 때입니다.  
  
> [!IMPORTANT]
>  이 예제에 숨겨진된 필드가 있는데이 잠재적인 보안 문제가 있습니다. 기본적으로 텍스트 상자의 값와 마찬가지로 숨겨진된 필드의 값을 확인 해야 합니다. ASP.NET 웹 페이지는 사용자 입력 스크립트 또는 HTML 요소가 포함 되지 않습니다 확인 합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-csharp[Page_RegisterHiddenField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_RegisterHiddenField/CS/page_registerhiddenfield.cs.aspx#1)]
 [!code-vb[Page_RegisterHiddenField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_RegisterHiddenField/VB/page_registerhiddenfield.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterStartupScript(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterOnSubmitStatement(string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterOnSubmitStatement(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterOnSubmitStatement (key As String, script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterOnSubmitStatement(System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterOnSubmitStatement : string * string -&gt; unit" Usage="page.RegisterOnSubmitStatement (key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.RegisterOnSubmitStatement(Type type, string key, string script). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">스크립트 블록을 식별하는 고유 키입니다.</param>
        <param name="script">클라이언트에 보낼 클라이언트 쪽 스크립트입니다.</param>
        <summary>페이지가 클라이언트 <see langword="OnSubmit" /> 이벤트에 액세스할 수 있도록 합니다. 스크립트는 다른 곳에서 등록된 클라이언트에 대한 함수 호출이어야 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> 메서드는 사용되지 않습니다. 사용 하 여는 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> 에서 메서드는 <xref:System.Web.UI.ClientScriptManager> 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하 여 보여 줍니다.는 <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> 클라이언트의 제출 단추를 클릭할 때 응답 하는 스크립트를 액세스할 수 있습니다. 이 이벤트가 발생할 때 클라이언트에서 등록 된 ECMAScript 코드 실행 됩니다.  
  
> [!IMPORTANT]
>  이 예제에 숨겨진된 필드가 있는데이 잠재적인 보안 문제가 있습니다. 기본적으로 텍스트 상자의 값와 마찬가지로 숨겨진된 필드의 값을 확인 해야 합니다. ASP.NET 웹 페이지는 사용자 입력 스크립트 또는 HTML 요소가 포함 되지 않습니다 확인 합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-csharp[Page_RegisterHiddenField#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_RegisterHiddenField/CS/page_registerhiddenfield.cs.aspx#2)]
 [!code-vb[Page_RegisterHiddenField#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_RegisterHiddenField/VB/page_registerhiddenfield.vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterHiddenField(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterRequiresControlState">
      <MemberSignature Language="C#" Value="public void RegisterRequiresControlState (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterRequiresControlState(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterRequiresControlState(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterRequiresControlState(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.RegisterRequiresControlState : System.Web.UI.Control -&gt; unit" Usage="page.RegisterRequiresControlState control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">등록할 컨트롤입니다.</param>
        <summary>컨트롤을 상태를 지속시켜야 하는 컨트롤로 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤 상태를 사용 하는 사용자 지정 서버 컨트롤을 호출 해야 합니다는 <xref:System.Web.UI.Page.RegisterRequiresControlState%2A> 메서드 각 요청에 대해 컨트롤 상태에 대 한 등록은 지연 되지 요청에서 요청에 포스트백 이벤트 동안 때문에 있습니다. 등록 하는 것이 좋습니다는 <xref:System.Web.UI.Control.Init> 이벤트입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 사용자 지정 서버 컨트롤을 호출 하는 표시 된 <xref:System.Web.UI.Page.RegisterRequiresControlState%2A> 메서드.  
  
 [!code-csharp[ControlState#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlState/CS/controlstatecs.aspx#1)]
 [!code-vb[ControlState#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlState/VB/controlstatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">등록할 컨트롤이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Web.UI.Page.RegisterRequiresControlState(System.Web.UI.Control)" /> 이벤트가 수행되는 동안이나 수행되기 전에만 <see cref="E:System.Web.UI.Control.PreRender" /> 메서드를 호출할 수 있는 경우</exception>
        <altmember cref="M:System.Web.UI.Page.RequiresControlState(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterRequiresPostBack">
      <MemberSignature Language="C#" Value="public void RegisterRequiresPostBack (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterRequiresPostBack(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterRequiresPostBack(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterRequiresPostBack(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.RegisterRequiresPostBack : System.Web.UI.Control -&gt; unit" Usage="page.RegisterRequiresPostBack control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">등록할 컨트롤입니다.</param>
        <summary>페이지가 서버에 다시 게시될 때 다시 게시를 처리해야 하는 컨트롤로 컨트롤을 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 등록 해야 컨트롤이 구현 해야 합니다는 <xref:System.Web.UI.IPostBackDataHandler> 인터페이스 또는 <xref:System.Web.HttpException> 발생 합니다. 컨트롤을 통해 구현 되는 경우는 <xref:System.Web.UI.IPostBackDataHandler> 인터페이스 수 있도록 다시 게시 데이터의 처리 및 발생 게시물을 좋아하고 게시물의 백업 데이터 변경 이벤트. 서버 컨트롤의 이벤트 모델에 대 한 자세한 내용은 참조 하십시오. [ASP.NET Web Forms 서버 컨트롤 이벤트 모델](http://msdn.microsoft.com/library/6304bff7-1b0e-4641-8acb-6d3b0badc4a3)합니다.  
  
 또는 그 전에 페이지와 컨트롤을 등록 된 `Page_PreRender` 페이지 수명 주기의 이벤트입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.RegisterRequiresPostBack%2A> 텍스트 상자 컨트롤을 요구 하는 메서드 `myTextBox`, 텍스트 상자와 연결 된 모든 코드를 실행 하기 전에 다시 게시 됩니다. <xref:System.Web.UI.WebControls.TextBox> 컨트롤은 구현에서 <xref:System.Web.UI.IPostBackDataHandler> 인터페이스입니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-csharp[Page_RegisterRequiresPostBack#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_RegisterRequiresPostBack/CS/page_registerrequirespostback.cs.aspx#1)]
 [!code-vb[Page_RegisterRequiresPostBack#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_RegisterRequiresPostBack/VB/page_registerrequirespostback.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">등록할 컨트롤이 <see cref="T:System.Web.UI.IPostBackDataHandler" /> 인터페이스를 구현하지 않는 경우</exception>
        <altmember cref="P:System.Web.UI.Page.IsPostBack" />
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <Member MemberName="RegisterRequiresRaiseEvent">
      <MemberSignature Language="C#" Value="public virtual void RegisterRequiresRaiseEvent (System.Web.UI.IPostBackEventHandler control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterRequiresRaiseEvent(class System.Web.UI.IPostBackEventHandler control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterRequiresRaiseEvent(System.Web.UI.IPostBackEventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RegisterRequiresRaiseEvent (control As IPostBackEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterRequiresRaiseEvent(System::Web::UI::IPostBackEventHandler ^ control);" />
      <MemberSignature Language="F#" Value="abstract member RegisterRequiresRaiseEvent : System.Web.UI.IPostBackEventHandler -&gt; unit&#xA;override this.RegisterRequiresRaiseEvent : System.Web.UI.IPostBackEventHandler -&gt; unit" Usage="page.RegisterRequiresRaiseEvent control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.IPostBackEventHandler" />
      </Parameters>
      <Docs>
        <param name="control">등록할 컨트롤입니다.</param>
        <summary>ASP.NET 서버 컨트롤을 <see cref="T:System.Web.UI.Page" /> 개체에서 처리될 때 이벤트 발생을 필요로 하는 컨트롤로 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 페이지 요청에 따라 하나의 서버 컨트롤을 등록할 수 있습니다. <xref:System.Web.UI.Page.RegisterRequiresRaiseEvent%2A> 컨트롤에는 해당 컨트롤 ID 폼에 데이터를 게시할 때 사용 해야 합니다. 또한 등록은 한 컨트롤을 구현 해야 합니다는 <xref:System.Web.UI.IPostBackEventHandler> 인터페이스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.RegisterRequiresRaiseEvent%2A> 등록 하는 메서드는 <xref:System.Web.UI.WebControls.Button> 웹 서버 컨트롤 이벤트를 발생 필요 합니다. 첫 번째 등록 한 후 <xref:System.Web.UI.WebControls.Button> 컨트롤을 두 번째 발생할 수 있습니다 <xref:System.Web.UI.WebControls.Button> 컨트롤 첫 번째 단추의 결과 게시 하는 코드에 선언 된 페이지에는 이벤트를 클릭 합니다.  
  
 [!code-csharp[Page_RaisePostBackEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_RaisePostBackEvent/CS/page_raisepostbackevent.cs.aspx#1)]
 [!code-vb[Page_RaisePostBackEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_RaisePostBackEvent/VB/page_raisepostbackevent.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.IsPostBack" />
      </Docs>
    </Member>
    <Member MemberName="RegisterRequiresViewStateEncryption">
      <MemberSignature Language="C#" Value="public void RegisterRequiresViewStateEncryption ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterRequiresViewStateEncryption() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterRequiresViewStateEncryption" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterRequiresViewStateEncryption ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterRequiresViewStateEncryption();" />
      <MemberSignature Language="F#" Value="member this.RegisterRequiresViewStateEncryption : unit -&gt; unit" Usage="page.RegisterRequiresViewStateEncryption " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>컨트롤을 뷰 상태를 암호화해야 하는 컨트롤로 페이지에 등록합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 잠재적으로 중요 한 정보를 처리 하는 사용자 지정 컨트롤을 개발 하는 경우 호출 된 <xref:System.Web.UI.Page.RegisterRequiresViewStateEncryption%2A> 메서드를 페이지와 컨트롤을 등록 하 고 컨트롤 암호화 된 뷰 상태를 확인 합니다.  
  
 전체 페이지 상태 암호화 됩니다는 <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> 로 설정 된 <xref:System.Web.UI.ViewStateEncryptionMode.Auto> 또는 <xref:System.Web.UI.ViewStateEncryptionMode.Always>합니다.  
  
   
  
## Examples  
 다음 코드 예제에 대 한 뷰 상태 암호화 모드를 설정 하는 방법을 보여 줍니다는 <xref:System.Web.UI.Page> 개체와의 뷰 상태를 통해 암호화를 요청 <xref:System.Web.UI.Page.RegisterRequiresViewStateEncryption%2A>합니다. 이 예제에서는 뷰 상태를 데이터베이스에서 고객 정보를 검색할 때 암호화 됩니다.  
  
 [!code-aspx-csharp[System.Web.UI.ViewStateEncryptionMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ViewStateEncryptionMode/CS/encryptViewState.cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ViewStateEncryptionMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ViewStateEncryptionMode/VB/encryptViewState.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Web.UI.Page.RegisterRequiresViewStateEncryption" /> 메서드를 페이지 수명 주기의 페이지 <see langword="PreRender" />단계 또는 그 이전에 호출해야 합니다.</exception>
        <altmember cref="P:System.Web.UI.Page.ViewStateEncryptionMode" />
        <altmember cref="T:System.Web.UI.WebControls.GridView" />
        <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
        <altmember cref="T:System.Web.UI.WebControls.FormView" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public virtual void RegisterStartupScript (string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterStartupScript(string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterStartupScript(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RegisterStartupScript (key As String, script As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterStartupScript(System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="abstract member RegisterStartupScript : string * string -&gt; unit&#xA;override this.RegisterStartupScript : string * string -&gt; unit" Usage="page.RegisterStartupScript (key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is ClientScript.RegisterStartupScript(Type type, string key, string script). http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">스크립트 블록을 식별하는 고유 키입니다.</param>
        <param name="script">클라이언트에 보낼 스크립트의 내용입니다.</param>
        <summary>클라이언트 쪽 스크립트 블록을 페이지 응답으로 내보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 비슷합니다는 <xref:System.Web.UI.Page.RegisterClientScriptBlock%2A> 메서드를는 <xref:System.Web.UI.Page.RegisterStartupScript%2A> 메서드 내보내는의 닫는 태그 바로 앞의 스크립트는 <xref:System.Web.UI.Page> 개체의 `<form runat= server>` 요소입니다. 열기 및 닫기 포함 해야 `<script>` 주위의 스크립트 블록에 지정 된 문자열의 `script` 매개 변수입니다.  
  
 이 메서드는 키를 사용 하 여 스크립트 블록을 식별, 때문에 스크립트 블록 있어서는 안 될 때마다 다른 서버 컨트롤 인스턴스에 의해 요청 된 출력 스트림으로 내보낼 수  
  
 모든 스크립트와 동일한 블록 `key` 매개 변수 값에는 중복 요소로 간주 됩니다.  
  
> [!NOTE]
>  요청 하는 브라우저는 스크립트를 지원 하지 않는 경우 렌더링할 수 있도록 HTML 주석 스크립트에 태그를 포함 해야 합니다.  
  
 <xref:System.Web.UI.Page.RegisterStartupScript%2A> 메서드는 사용되지 않습니다. 대신 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> 클래스의 <xref:System.Web.UI.ClientScriptManager> 메서드를 사용합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.RegisterStartupScript%2A> 메서드와 함께 <xref:System.Web.UI.Page.IsStartupScriptRegistered%2A> 메서드. 에 의해 결정 된을 코드 선언 블록에 작성 된 ECMAScript에 이미 등록 되지 않은 경우는 <xref:System.Web.UI.Page.IsStartupScriptRegistered%2A> 메서드는 <xref:System.Web.UI.Page.RegisterStartupScript%2A> 호출 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.Page.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.RegisterClientScriptBlock/CS/defaultcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.RegisterClientScriptBlock/VB/defaultvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterClientScriptBlock(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterViewStateHandler">
      <MemberSignature Language="C#" Value="public void RegisterViewStateHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterViewStateHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RegisterViewStateHandler" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterViewStateHandler ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterViewStateHandler();" />
      <MemberSignature Language="F#" Value="member this.RegisterViewStateHandler : unit -&gt; unit" Usage="page.RegisterViewStateHandler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 메서드를 호출하면, 페이지 뷰 상태가 유지됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.RegisterViewStateHandler%2A> 메서드를 통해 자동으로 호출 됩니다는 <xref:System.Web.UI.HtmlControls.HtmlForm> 서버 컨트롤입니다. 이 메서드가 호출 되지 않습니다 페이지 뷰 상태가 유지 되지 않습니다.  
  
> [!NOTE]
>  일반적으로는 <xref:System.Web.UI.HtmlControls.HtmlForm> 페이지에 대 한 서버 컨트롤에서는이 메서드를 호출 합니다.  
  
   
  
## Examples  
 [!code-csharp[Page_RegisterViewStateHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_RegisterViewStateHandler/CS/page_registerviewstatehandler.cs#1)]
 [!code-vb[Page_RegisterViewStateHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_RegisterViewStateHandler/VB/page_registerviewstatehandler.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterRequiresViewStateEncryption" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="page.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">페이지 내용을 받는 <see cref="T:System.Web.UI.HtmlTextWriter" />입니다.</param>
        <summary>
          <see cref="T:System.Web.UI.HtmlTextWriter" /> 개체를 초기화하고 렌더링할 <see cref="T:System.Web.UI.Page" />의 자식 컨트롤을 호출합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.Render%2A> 메서드는 텍스트와 클라이언트 브라우저로 전송 되는 태그를 만듭니다. 기본 <xref:System.Web.UI.Page.Render%2A> 메서드 호출 <xref:System.Web.UI.Control.RenderChildren%2A> 텍스트와 페이지에 포함 된 컨트롤에 대 한 태그를 쓸 수 있습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.Web.HttpRequest Request { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpRequest Request" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Request" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Request As HttpRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpRequest ^ Request { System::Web::HttpRequest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Request : System.Web.HttpRequest" Usage="System.Web.UI.Page.Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요청된 페이지에 대한 <see cref="T:System.Web.HttpRequest" /> 개체를 가져옵니다.</summary>
        <value>페이지와 관련된 현재 <see cref="T:System.Web.HttpRequest" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpRequest> 개체에는 현재 HTTP 요청에 대한 정보가 포함됩니다.  
  
   
  
## Examples  
 다음 예제를 가져오는 방법을 보여 줍니다는 <xref:System.Web.HttpRequest.Headers%2A> 에서 컬렉션은 <xref:System.Web.HttpRequest> 개체 및 ASP.NET 페이지에 쓰려고 합니다.  
  
 [!code-csharp[Classic HttpRequest.Headers Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Headers Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Headers Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Headers Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.HttpRequest" /> 개체를 사용할 수 없는 경우</exception>
        <altmember cref="T:System.Web.HttpException" />
        <altmember cref="T:System.Web.HttpRequest" />
        <altmember cref="T:System.Web.HttpResponse" />
      </Docs>
    </Member>
    <Member MemberName="RequiresControlState">
      <MemberSignature Language="C#" Value="public bool RequiresControlState (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RequiresControlState(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.RequiresControlState(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RequiresControlState(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.RequiresControlState : System.Web.UI.Control -&gt; bool" Usage="page.RequiresControlState control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">컨트롤 상태 요구 사항을 확인하는 <see cref="T:System.Web.UI.Control" />입니다.</param>
        <summary>지정된 <see cref="T:System.Web.UI.Control" /> 개체가 등록되어 컨트롤 상태 관리에 참여하는지 여부를 결정합니다.</summary>
        <returns>지정된 <see cref="T:System.Web.UI.Control" />에 컨트롤 상태가 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤 상태는 웹 서버 컨트롤; 작동 해야 하는 중요 한 뷰 상태 데이터는 구성 개체 해당 기본 보기 상태에서 별도 개체에 포함 됩니다.  
  
 컨트롤 상태를 사용 하 여 사용자 지정 컨트롤을 호출 해야 합니다는 <xref:System.Web.UI.Page.RegisterRequiresControlState%2A> 컨트롤 상태를 저장 하기 전에 메서드. 사용 된 <xref:System.Web.UI.Page.RequiresControlState%2A> 컨트롤 상태를 필요로 하는 컨트롤로 페이지와 함께 등록 되어 있는 컨트롤에 대 한 검사 하도록 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.RegisterRequiresControlState(System.Web.UI.Control)" />
        <altmember cref="P:System.Web.UI.PageStatePersister.ControlState" />
        <altmember cref="M:System.Web.UI.Control.LoadControlState(System.Object)" />
        <altmember cref="M:System.Web.UI.Control.SaveControlState" />
      </Docs>
    </Member>
    <Member MemberName="Response">
      <MemberSignature Language="C#" Value="public System.Web.HttpResponse Response { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpResponse Response" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Response" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Response As HttpResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpResponse ^ Response { System::Web::HttpResponse ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Response : System.Web.HttpResponse" Usage="System.Web.UI.Page.Response" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpResponse</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.HttpResponse" /> 개체와 연결된 <see cref="T:System.Web.UI.Page" /> 개체를 가져옵니다. 이 개체를 사용하여 HTTP 응답 데이터를 클라이언트에 보낼 수 있고 이 개체는 해당 응답에 대한 정보를 포함합니다.</summary>
        <value>페이지와 관련된 현재 <see cref="T:System.Web.HttpResponse" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 쿠키를 만들고 사용 하 여 페이지의 HTTP 출력에 추가 된 <xref:System.Web.HttpResponse> 개체입니다.  
  
 [!code-csharp[Classic HttpResponse.Cookies Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpResponse.Cookies Example/CS/source.cs#1)]
 [!code-vb[Classic HttpResponse.Cookies Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpResponse.Cookies Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.HttpResponse" /> 개체는 사용할 수 없습니다.</exception>
        <altmember cref="T:System.Web.HttpResponse" />
      </Docs>
    </Member>
    <Member MemberName="ResponseEncoding">
      <MemberSignature Language="C#" Value="public string ResponseEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResponseEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ResponseEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseEncoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ResponseEncoding { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResponseEncoding : string with get, set" Usage="System.Web.UI.Page.ResponseEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Web.HttpResponse" /> 개체의 인코딩 언어를 설정합니다.</summary>
        <value>현재 <see cref="T:System.Web.HttpResponse" />의 인코딩 언어가 포함된 문자열입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정 된 `ResponseEncoding` 특성.aspx 파일에 지시문을 사용 하 여 원하는 값으로. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RouteData">
      <MemberSignature Language="C#" Value="public System.Web.Routing.RouteData RouteData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Routing.RouteData RouteData" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.RouteData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RouteData As RouteData" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Routing::RouteData ^ RouteData { System::Web::Routing::RouteData ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RouteData : System.Web.Routing.RouteData" Usage="System.Web.UI.Page.RouteData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Routing.RouteData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="P:System.Web.Routing.RequestContext.RouteData" /> 인스턴스의 <see cref="T:System.Web.Routing.RequestContext" /> 값을 가져옵니다.</summary>
        <value>현재 <see cref="P:System.Web.Routing.RequestContext.RouteData" /> 인스턴스의 <see cref="T:System.Web.Routing.RequestContext" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 페이지를 통해 ASP.NET 라우팅이 요청에 대 한 응답을 실행 중인 경우이 속성 경로 데이터로 전달 된 URL 매개 변수 값에 대 한 액세스를 제공 합니다. 페이지 경로 URL 대신 실제 URL에 대 한 응답에서를 실행 하는 경우이 속성은 `null`합니다. 라는 URL 매개 변수 값을 추출 하는 방법을 보여 주는 다음 예제 `year`합니다.  
  
```vb  
Dim year As Integer = Convert.ToInt32(Page.RouteData.Values("year"))  
```  
  
```csharp  
int year = Convert.ToInt32(Page.RouteData.Values["year"])  
```  
  
 경로의 URL 패턴을 사용 하 여 정의 된 경우 `{locale}/{year}` 도메인용 `contoso.com`, 요청 된 URL이 고 `contoso.com/US/2010`, `year` "2010"이 코드를 실행할 때 값이 포함 됩니다.  
  
 ASP.NET 라우팅에 대 한 자세한 내용은 참조 [ASP.NET 라우팅에서](http://msdn.microsoft.com/library/892441af-8f1d-483e-ab5f-b82c23576f5a)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Routing.RequestContext.RouteData" />
      </Docs>
    </Member>
    <Member MemberName="SavePageStateToPersistenceMedium">
      <MemberSignature Language="C#" Value="protected internal virtual void SavePageStateToPersistenceMedium (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void SavePageStateToPersistenceMedium(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.SavePageStateToPersistenceMedium(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub SavePageStateToPersistenceMedium (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void SavePageStateToPersistenceMedium(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member SavePageStateToPersistenceMedium : obj -&gt; unit&#xA;override this.SavePageStateToPersistenceMedium : obj -&gt; unit" Usage="page.SavePageStateToPersistenceMedium state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">뷰 상태 정보를 저장할 <see cref="T:System.Object" />입니다.</param>
        <summary>페이지의 뷰 상태 및 컨트롤 상태 정보를 저장합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.SavePageStateToPersistenceMedium%2A> 메서드는 <xref:System.Web.UI.PageStatePersister.Save%2A> 의 메서드는 <xref:System.Web.UI.PageStatePersister?displayProperty=nameWithType> 에서 참조 하는 개체는 <xref:System.Web.UI.Page.PageStatePersister%2A> 속성 페이지에 대 한 뷰 상태와 제어 상태 정보를 저장 합니다.  
  
 ASP.NET의 하위 항목 중 두 개에 포함 되어는 <xref:System.Web.UI.PageStatePersister> 클래스는 <xref:System.Web.UI.HiddenFieldPageStatePersister> ASP.NET 페이지에 포함 된 숨겨진된 필드에 상태 정보를 저장 하는 클래스 및 <xref:System.Web.UI.SessionPageStatePersister> 클래스의 상태를 저장 하는 <xref:System.Web.UI.Page.Session%2A> 연관 된 개체는 요청입니다. 사용할 때의 <xref:System.Web.UI.SessionPageStatePersister> 다시 게시를 결정 하는 데 사용이 숨겨진된 VIEWSTATE 필드를 렌더링 하는 클래스입니다.  
  
 사용자가 선택한 위치에 상태를 저장 하려면 새 만들어야의 하위 폴더는 <xref:System.Web.UI.PageStatePersister> 클래스 저장 하 고 사용자가 선택한 상태 지 속성 매체를 로드 합니다. 새로 만드는 데 따른 예제를 보려면 <xref:System.Web.UI.PageStatePersister> 개체, 참조는 <xref:System.Web.UI.PageStatePersister> 클래스입니다.  
  
 .NET Framework 버전 1.0 또는 1.1을 저장 하려는 경우이 메서드를 재정의 사용 하는 경우는 <xref:System.Web.UI.Page> 숨겨진된 필드 이외에 상태입니다. 그렇게 하도록 선택할 경우 재정의 해야는 <xref:System.Web.UI.Page.LoadPageStateFromPersistenceMedium%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.LoadPageStateFromPersistenceMedium" />
        <altmember cref="P:System.Web.UI.Page.PageStatePersister" />
        <altmember cref="T:System.Web.UI.PageStatePersister" />
      </Docs>
    </Member>
    <Member MemberName="SaveStateComplete">
      <MemberSignature Language="C#" Value="public event EventHandler SaveStateComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SaveStateComplete" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.Page.SaveStateComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SaveStateComplete As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SaveStateComplete;" />
      <MemberSignature Language="F#" Value="member this.SaveStateComplete : EventHandler " Usage="member this.SaveStateComplete : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지와 페이지에 있는 컨트롤에 대한 모든 뷰 상태 및 컨트롤 상태 정보가 저장된 후에 이 이벤트가 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 후 저장 된 웹 페이지에 컨트롤에 대 한 상태 정보는 <xref:System.Web.UI.Page.PreRenderComplete> 이벤트입니다. <xref:System.Web.UI.Page.SaveStateComplete> 뷰 상태와 페이지의 컨트롤 상태 후에 이벤트가 발생 하 고 페이지에 있는 컨트롤 유지 미디어에 저장 됩니다.  
  
 요청한 브라우저에 페이지를 렌더링 하기 전에 발생 하는 마지막 이벤트입니다.  
  
 이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.OnSaveStateComplete(System.EventArgs)" />
        <altmember cref="E:System.Web.UI.Page.InitComplete" />
        <altmember cref="E:System.Web.UI.Page.LoadComplete" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Web.HttpServerUtility Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpServerUtility Server" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As HttpServerUtility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpServerUtility ^ Server { System::Web::HttpServerUtility ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Server : System.Web.HttpServerUtility" Usage="System.Web.UI.Page.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpServerUtility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.HttpServerUtility" /> 클래스의 인스턴스인 <see langword="Server" /> 개체를 가져옵니다.</summary>
        <value>페이지와 관련된 현재 <see langword="Server" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 자주 사용 되는에 대 한 액세스를 제공 <xref:System.Web.HttpServerUtility.HtmlEncode%2A> 및 <xref:System.Web.HttpServerUtility.MapPath%2A> 다른 규칙 으로부터 메서드.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하 여 서버에서 오류 정보에 액세스 하는 방법을 보여 줍니다는 `Server` 개체입니다. 특히,이 예제에서는에서 요청 된 URL을 가져옵니다는 `Request` 개체에서 가장 최근에 발생 한 오류는 `Server` 개체 (사용 하 여는 <xref:System.Web.HttpServerUtility.GetLastError%2A> 메서드) 되 고 모두 클라이언트에 의해 표시 될 수 있는 문자열로 변환 합니다. 한 번는 `message` 변수 오류를 사용 하 여 삭제 됩니다는 클라이언트에 기록 되는 <xref:System.Web.HttpServerUtility.ClearError%2A> 메서드.  
  
 [!code-csharp[System.Web.UI.Page_Error method#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page_Error method/CS/sourcecs.aspx#1)]
 [!code-vb[System.Web.UI.Page_Error method#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page_Error method/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpServerUtility" />
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public virtual System.Web.SessionState.HttpSessionState Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.SessionState.HttpSessionState Session" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Session" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Session As HttpSessionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::SessionState::HttpSessionState ^ Session { System::Web::SessionState::HttpSessionState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Session : System.Web.SessionState.HttpSessionState" Usage="System.Web.UI.Page.Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET에서 제공하는 현재 <see langword="Session" /> 개체를 가져옵니다.</summary>
        <value>현재 세션 상태 데이터입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 현재 요청 세션에 대 한 정보를 제공합니다. A `Session` ASP.NET 응용 프로그램에서 페이지 또는 문서를 요청 하는 각 사용자에 대해 유지 되는 개체입니다. 에 저장 된 변수는 `Session` 개체에는 사용자 응용 프로그램에서 페이지를 이동할 때 삭제 되지 않으며, 대신, 이러한 변수는 한 유지 사용자가 응용 프로그램 페이지에에서 액세스 합니다. 세션 상태에 대 한 자세한 내용은 참조 [ASP.NET 세션 상태 개요](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc)합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 한 `GetStyle` Web Forms 페이지의 세션 상태에 저장 된 키를 검색 하 고 해당 값을 문자열로 변환 하는 함수입니다.  
  
 [!code-csharp[Page.Session_Samples1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page.Session_Samples1/CS/sessioncs.aspx#1)]
 [!code-vb[Page.Session_Samples1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page.Session_Samples1/VB/sessionvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">세션 정보가 <see langword="null" />로 설정된 경우</exception>
        <altmember cref="T:System.Web.HttpException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetFocus">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>브라우저 포커스를 지정된 컨트롤로 설정합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.SetFocus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus (clientID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::String ^ clientID);" />
      <MemberSignature Language="F#" Value="member this.SetFocus : string -&gt; unit" Usage="page.SetFocus clientID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">포커스를 설정할 컨트롤의 ID입니다.</param>
        <summary>브라우저 포커스를 지정된 식별자를 가진 컨트롤에 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.Page.SetFocus%2A> 지정한 ID 가진 컨트롤을 만드는 메서드와 알림이 브라우저에 표시 된 웹 페이지의 활성 컨트롤 문자열입니다. <xref:System.Web.UI.Page.SetFocus%2A> 클라이언트에 렌더링 하기 위한 준비 페이지 메서드를 호출 해야는 <xref:System.Web.UI.Control.PreRender> 이벤트입니다.  
  
> [!NOTE]
>  <xref:System.Web.UI.Page.SetFocus%2A> 메서드 ECMAScript 버전 1.3 이상을 지 원하는 브라우저 에서만 작동 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 웹 페이지에 두 번째 텍스트 상자에 포커스를 설정 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[PageSetFocus#1](~/samples/snippets/csharp/VS_Snippets_WebNet/PageSetFocus/CS/setfocusbyidcs.aspx#1)]
 [!code-aspx-vb[PageSetFocus#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/PageSetFocus/VB/setfocusbyidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="clientID" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">컨트롤이 Web Forms 페이지에 속해 있지 않을 때 <see cref="M:System.Web.UI.Page.SetFocus(System.String)" />가 호출된 경우  \- 또는-  <see cref="M:System.Web.UI.Page.SetFocus(System.String)" />가 <see cref="E:System.Web.UI.Control.PreRender" /> 이벤트 다음에 호출됩니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.SetFocus : System.Web.UI.Control -&gt; unit" Usage="page.SetFocus control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">포커스를 받을 컨트롤입니다.</param>
        <summary>브라우저 포커스를 지정된 컨트롤로 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 된 <xref:System.Web.UI.Page.SetFocus%2A> 메서드를 브라우저에 표시 된 웹 페이지의 활성 컨트롤로 지정된 된 컨트롤을 만듭니다. <xref:System.Web.UI.Page.SetFocus%2A> 클라이언트에 렌더링 하기 위한 준비 페이지 메서드를 호출 해야는 <xref:System.Web.UI.Control.PreRender> 이벤트입니다.  
  
> [!NOTE]
>  <xref:System.Web.UI.Page.SetFocus%2A> 메서드 ECMAScript 버전 1.3 이상을 지 원하는 브라우저 에서만 작동 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 웹 페이지에 두 번째 텍스트 상자에 포커스를 설정 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[PageSetFocus#2](~/samples/snippets/csharp/VS_Snippets_WebNet/PageSetFocus/CS/setfocusbycontrolcs.aspx#2)]
 [!code-aspx-vb[PageSetFocus#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/PageSetFocus/VB/setfocusbycontrolvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">컨트롤이 Web Forms 페이지에 속해 있지 않을 때 <see cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />가 호출된 경우  \- 또는-  <see cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />가 <see cref="E:System.Web.UI.Control.PreRender" /> 이벤트 다음에 호출됩니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipFormActionValidation">
      <MemberSignature Language="C#" Value="public bool SkipFormActionValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipFormActionValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.SkipFormActionValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipFormActionValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipFormActionValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipFormActionValidation : bool with get, set" Usage="System.Web.UI.Page.SkipFormActionValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>쿼리 문자열 값의 유효성을 검사할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>쿼리 문자열 유효성 검사를 생략해야 하는 경우(쿼리 문자열의 유효성을 검사해서는 안 되는 경우) <see langword="true" />이며, 그렇지 않고 쿼리 문자열 유효성 검사를 보통 때처럼 수행해야 하는 경우 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartNavigation">
      <MemberSignature Language="C#" Value="public bool SmartNavigation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SmartNavigation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.SmartNavigation" />
      <MemberSignature Language="VB.NET" Value="Public Property SmartNavigation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SmartNavigation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SmartNavigation : bool with get, set" Usage="System.Web.UI.Page.SmartNavigation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is Page.SetFocus and Page.MaintainScrollPositionOnPostBack. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Filterable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스마트 탐색이 사용되도록 설정되는지 여부를 나타내는 값을 가져오거나 설정합니다. 이 속성은 사용되지 않습니다.</summary>
        <value>스마트 탐색을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정의 `SmartNavigation` 특성을 `true` .aspx 파일 지시문에 있습니다. 페이지가 요청 될 때 동적으로 생성 된 클래스는이 속성을 설정 합니다.  
  
> [!NOTE]
>  Asp.net 버전 2.0에는 <xref:System.Web.UI.Page.SmartNavigation%2A> 속성은 사용 되지 않습니다. 사용 하 여 <xref:System.Web.UI.Page.SetFocus%2A> 메서드 및 <xref:System.Web.UI.Page.MaintainScrollPositionOnPostBack%2A> 속성 대신 합니다.  
  
 Microsoft Internet Explorer 5.5 브라우저 또는 이후, 스마트 탐색 하 여 페이지를 요청할 때 다음을 수행 하 여 페이지의 사용자 환경을 향상 되었습니다.  
  
-   탐색에 의해 발생 하는 플래시를 제거 합니다.  
  
-   페이지를 이동할 때 스크롤 위치를 유지 합니다.  
  
-   탐색 요소 포커스를 유지 합니다.  
  
-   브라우저의 기록에서 마지막 페이지 상태를 유지 합니다.  
  
 스마트 탐색은 가장 반환이 크게 변경 되지 않는 시각적 콘텐츠 하지만 자주 다시 게시 해야 하는 ASP.NET 페이지에서 사용 됩니다. 이 속성을 설정할 것인지 결정할 때이 점을 고려해 야 `true`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.Page.SetFocus" />
        <altmember cref="P:System.Web.UI.Page.MaintainScrollPositionOnPostBack" />
      </Docs>
    </Member>
    <Member MemberName="StyleSheetTheme">
      <MemberSignature Language="C#" Value="public virtual string StyleSheetTheme { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StyleSheetTheme" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.StyleSheetTheme" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property StyleSheetTheme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ StyleSheetTheme { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StyleSheetTheme : string with get, set" Usage="System.Web.UI.Page.StyleSheetTheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Filterable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 수명 주기에서 일찍 페이지에 적용되는 테마의 이름을 가져오거나 설정합니다.</summary>
        <value>페이지 수명 주기에서 일찍 페이지에 적용되는 테마의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은 css 스타일 시트 ()에 직접 참조 하지 않습니다. 속성에는 그 안에 CSS 파일을 포함할 수 있는 ASP.NET 테마의 이름을 포함 합니다.  
  
 <xref:System.Web.UI.Page.StyleSheetTheme%2A> 속성 페이지 수명 주기의 초기 단계에서 한 페이지에 적용 되는 테마의 이름을 지정 하는 반면는 <xref:System.Web.UI.Page.Theme%2A> 속성 페이지 수명 주기의 뒷부분에 나오는 페이지에 적용 되는 테마의 이름을 지정 합니다. 즉, 페이지 설정에 스타일 시트 테마의 설정 보다 우선을 적용 합니다. 자세한 내용은 참조 [ASP.NET 테마와 스킨](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)합니다.  
  
 일반적으로 page 지시문에서 또는 속성을 재정의 하 여이 속성에 대 한 값을 설정 합니다. 내용은 다음 항목을 참조 합니다.  
  
-   [방법: ASP.NET 테마를 적용 합니다.](http://msdn.microsoft.com/library/f9d72364-4d77-4b73-84be-7630dc63e0fe)  
  
-   [방법: ASP.NET 테마를 프로그래밍 방식으로 적용](http://msdn.microsoft.com/library/02eed7c3-01e8-4e20-8358-df47dbd4f148))  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.Page.StyleSheetTheme" /> 메서드가 이미 호출된 후 <see cref="M:System.Web.UI.Page.FrameworkInitialize" /> 속성을 설정하려고 한 경우</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Web.UI.Page.StyleSheetTheme" />이 잘못된 테마 이름으로 설정된 경우 속성 setter에 의해서가 아니라 <see cref="M:System.Web.UI.Page.FrameworkInitialize" /> 메서드가 호출되면 이 예외가 throw됩니다.</exception>
        <altmember cref="P:System.Web.UI.Page.Theme" />
      </Docs>
    </Member>
    <Member MemberName="Theme">
      <MemberSignature Language="C#" Value="public virtual string Theme { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Theme" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Theme" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Theme As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Theme { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Theme : string with get, set" Usage="System.Web.UI.Page.Theme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지 테마의 이름을 가져오거나 설정합니다.</summary>
        <value>페이지 테마의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.Theme%2A> 속성 페이지에 대해 사용 되는 테마의 이름을 설정 합니다. 테마의 설정 보다 우선 하도록 페이지에 설정 하려는 경우 사용 된 <xref:System.Web.UI.Page.StyleSheetTheme%2A> 속성입니다. 자세한 내용은 참조 [ASP.NET 테마와 스킨](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3)합니다.  
  
 <xref:System.Web.UI.Page.Theme%2A> 이전에 속성을 설정 해야는 <xref:System.Web.UI.Page.PreInit> 이벤트를 설정은 <xref:System.Web.UI.Page.Theme%2A> 후는 <xref:System.Web.UI.Page.PreInit> 이벤트 하면는 <xref:System.InvalidOperationException> 예외입니다.  
  
 지정된 된 테마는 응용 프로그램 또는 전역 테마로 존재 해야 합니다. 테마가 없는 경우는 <xref:System.Web.HttpException> 예외가 throw 됩니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.Theme%2A> 쿼리 문자열에 전달 된 속성을 이름입니다.  
  
 [!code-csharp[PageTheme#1](~/samples/snippets/csharp/VS_Snippets_WebNet/PageTheme/CS/pagethemecs.aspx#1)]
 [!code-vb[PageTheme#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/PageTheme/VB/pagethemevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.Page.Theme" /> 이벤트가 발생한 후 <see cref="E:System.Web.UI.Page.PreInit" />를 설정하려고 한 경우</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Web.UI.Page.Theme" />이 잘못된 테마 이름으로 설정된 경우</exception>
        <altmember cref="P:System.Web.UI.Page.StyleSheetTheme" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Web.UI.Page.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지의 제목을 가져오거나 설정합니다.</summary>
        <value>페이지의 제목입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Web.UI.Page.Title%2A> 속성을 요청 하는 브라우저에 전달 된 HTML 헤더에서 페이지 제목을 설정 합니다.  
  
> [!NOTE]
>  페이지는 `head` 요소는 특성이 있는 `runat="server"`, 그렇지 않으면 제목 렌더링 되지 것입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.Page.Title" /> 속성에 페이지의 헤더 컨트롤이 필요한 경우</exception>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlTitle" />
      </Docs>
    </Member>
    <Member MemberName="Trace">
      <MemberSignature Language="C#" Value="public System.Web.TraceContext Trace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.TraceContext Trace" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Trace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Trace As TraceContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::TraceContext ^ Trace { System::Web::TraceContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Trace : System.Web.TraceContext" Usage="System.Web.UI.Page.Trace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.TraceContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 웹 요청에 대한 <see cref="T:System.Web.TraceContext" /> 개체를 가져옵니다.</summary>
        <value>현재 웹 요청에 대해 <see cref="T:System.Web.TraceContext" /> 개체에서 가져온 데이터입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 추적을 추적 하 고 웹 요청에 대 한 실행 정보를 제공 합니다. 렌더링된 된 페이지에 표시 되도록 추적 데이터에 대 한 응용 프로그램 또는 페이지 수준에서 추적을 활성화 해야 합니다.  
  
 추적은 페이지에는 기본적으로 비활성화 됩니다. 지시문을 사용 하는 페이지에 대 한 추적을 사용 하려면 `<% @ Page trace="true" %>`합니다. 전체 응용 프로그램에 대 한 추적을 사용 하려면 응용 프로그램의 구성 파일, 응용 프로그램의 루트 디렉터리에 있는 Web.config에에서 설정 해야 합니다. 자세한 내용은 참조 [ASP.NET 추적 개요](http://msdn.microsoft.com/library/1552561d-887c-4002-8770-f92662cdf416)합니다.  
  
   
  
## Examples  
 다음 코드 예제에 액세스 하는 방법을 보여 줍니다는 <xref:System.Web.TraceContext.IsEnabled%2A?displayProperty=nameWithType> 속성 및 <xref:System.Web.TraceContext.Write%2A?displayProperty=nameWithType> 통해 메서드는 <xref:System.Web.UI.Page.Trace%2A> 속성입니다. 이 코드는 호출의 <xref:System.Diagnostics.Trace.Write%2A> 추적 하는 경우에 메서드를 사용할 수는 <xref:System.Web.UI.Page> 개체입니다. 사용 하지 않는 경우이 코드가 실행 되지 않습니다, 응용 프로그램에 대 한 오버 헤드를 줄일 수 있습니다.  
  
 [!code-csharp[System.Web.UI.Page.Trace#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.Trace/CS/trace1cs.aspx#2)]
 [!code-vb[System.Web.UI.Page.Trace#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.Trace/VB/trace1vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.TraceContext" />
      </Docs>
    </Member>
    <Member MemberName="TraceEnabled">
      <MemberSignature Language="C#" Value="public bool TraceEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TraceEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.TraceEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property TraceEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TraceEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TraceEnabled : bool with get, set" Usage="System.Web.UI.Page.TraceEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> 개체에 대한 추적이 활성화되어 있는지 여부를 나타내는 값을 설정합니다.</summary>
        <value>페이지에 대한 추적이 활성화되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정의 `Trace` 특성을 `true` .aspx 파일 지시문에 있습니다. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.Trace" />
        <altmember cref="P:System.Web.UI.Page.TraceModeValue" />
        <altmember cref="T:System.Web.TraceContext" />
      </Docs>
    </Member>
    <Member MemberName="TraceModeValue">
      <MemberSignature Language="C#" Value="public System.Web.TraceMode TraceModeValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.TraceMode TraceModeValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.TraceModeValue" />
      <MemberSignature Language="VB.NET" Value="Public Property TraceModeValue As TraceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::TraceMode TraceModeValue { System::Web::TraceMode get(); void set(System::Web::TraceMode value); };" />
      <MemberSignature Language="F#" Value="member this.TraceModeValue : System.Web.TraceMode with get, set" Usage="System.Web.UI.Page.TraceModeValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.TraceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지에 추적 문이 표시되는 모드를 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.TraceMode" /> 열거형 멤버 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정의 `TraceMode` .aspx 파일의 지시어의 경우에 특성입니다. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.Trace" />
        <altmember cref="P:System.Web.UI.Page.TraceEnabled" />
        <altmember cref="T:System.Web.TraceContext" />
      </Docs>
    </Member>
    <Member MemberName="TransactionMode">
      <MemberSignature Language="C#" Value="protected int TransactionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TransactionMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.TransactionMode" />
      <MemberSignature Language="VB.NET" Value="Protected Property TransactionMode As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int TransactionMode { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TransactionMode : int with get, set" Usage="System.Web.UI.Page.TransactionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지에 대한 트랜잭션 지원 수준을 설정합니다.</summary>
        <value>
          <see cref="T:System.EnterpriseServices.TransactionOption" /> 열거형 멤버 중 하나를 나타내는 정수입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 대부분의 경우에서 코드에서이 속성을 설정 하지 마십시오. 설정의 `Transaction` .aspx 파일의 지시어의 경우에 특성입니다. 페이지가 요청 될 때 동적으로 생성 된 클래스 속성을 설정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryUpdateModel&lt;TModel&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>값 공급자의 값을 사용하여 지정된 모델 인스턴스를 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web Forms 모델 바인딩 사용에 자습서 시리즈를 참조 하십시오. [모델 바인딩 및 Web Forms](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryUpdateModel&lt;TModel&gt;">
      <MemberSignature Language="C#" Value="public virtual bool TryUpdateModel&lt;TModel&gt; (TModel model) where TModel : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUpdateModel&lt;class TModel&gt;(!!TModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.TryUpdateModel``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUpdateModel(Of TModel As Class) (model As TModel) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TModel&gt;&#xA; where TModel : class virtual bool TryUpdateModel(TModel model);" />
      <MemberSignature Language="F#" Value="abstract member TryUpdateModel : 'Model -&gt; bool (requires 'Model : null)&#xA;override this.TryUpdateModel : 'Model -&gt; bool (requires 'Model : null)" Usage="page.TryUpdateModel model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TModel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="model" Type="TModel" />
      </Parameters>
      <Docs>
        <typeparam name="TModel">모델의 형식입니다.</typeparam>
        <param name="model">모델입니다.</param>
        <summary>데이터 바인딩 컨트롤의 값을 사용하여 지정된 모델 인스턴스를 업데이트합니다.</summary>
        <returns>모델 바인딩이 성공적이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 바인딩된 컨트롤의 지정 된 메서드에서만이 메서드를 호출 해야 `UpdateMethod` 또는 `InsertMethod` 속성입니다.  
  
 Web Forms 모델 바인딩 사용에 자습서 시리즈를 참조 하십시오. [모델 바인딩 및 Web Forms](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdateModel&lt;TModel&gt;">
      <MemberSignature Language="C#" Value="public virtual bool TryUpdateModel&lt;TModel&gt; (TModel model, System.Web.ModelBinding.IValueProvider valueProvider) where TModel : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryUpdateModel&lt;class TModel&gt;(!!TModel model, class System.Web.ModelBinding.IValueProvider valueProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.TryUpdateModel``1(``0,System.Web.ModelBinding.IValueProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryUpdateModel(Of TModel As Class) (model As TModel, valueProvider As IValueProvider) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TModel&gt;&#xA; where TModel : class virtual bool TryUpdateModel(TModel model, System::Web::ModelBinding::IValueProvider ^ valueProvider);" />
      <MemberSignature Language="F#" Value="abstract member TryUpdateModel : 'Model * System.Web.ModelBinding.IValueProvider -&gt; bool (requires 'Model : null)&#xA;override this.TryUpdateModel : 'Model * System.Web.ModelBinding.IValueProvider -&gt; bool (requires 'Model : null)" Usage="page.TryUpdateModel (model, valueProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TModel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="model" Type="TModel" />
        <Parameter Name="valueProvider" Type="System.Web.ModelBinding.IValueProvider" />
      </Parameters>
      <Docs>
        <typeparam name="TModel">모델의 형식입니다.</typeparam>
        <param name="model">모델입니다.</param>
        <param name="valueProvider">값 공급자입니다.</param>
        <summary>지정된 값 공급자의 값을 사용하여 지정된 모델 인스턴스를 업데이트합니다.</summary>
        <returns>모델 바인딩이 성공적이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web Forms 모델 바인딩 사용에 자습서 시리즈를 참조 하십시오. [모델 바인딩 및 Web Forms](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UICulture">
      <MemberSignature Language="C#" Value="public string UICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UICulture" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.UICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property UICulture As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UICulture { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UICulture : string with get, set" Usage="System.Web.UI.Page.UICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지와 관련된 <see cref="T:System.Threading.Thread" /> 개체의 UI(사용자 인터페이스) ID를 설정합니다.</summary>
        <value>UI ID입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성은에 대 한 바로 가기는 <xref:System.Threading.Thread.CurrentThread%2A> 속성입니다. 문화권 속성은 실행 중인 스레드 속성  
  
 설정의 `UICulture` .aspx 파일의 지시어의 경우에 특성입니다. 페이지가 요청 될 때 동적으로 생성 된 클래스는이 속성의 값을 설정 합니다. 값을 명시적으로 설정할 수 또한는 <xref:System.Web.UI.Page.UICulture%2A> 속성에는 Web.config 파일의 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.LCID" />
        <altmember cref="P:System.Web.UI.Page.Culture" />
      </Docs>
    </Member>
    <Member MemberName="UniqueFilePathSuffix">
      <MemberSignature Language="C#" Value="protected internal virtual string UniqueFilePathSuffix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueFilePathSuffix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.UniqueFilePathSuffix" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property UniqueFilePathSuffix As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::String ^ UniqueFilePathSuffix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueFilePathSuffix : string" Usage="System.Web.UI.Page.UniqueFilePathSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>브라우저 캐싱을 위해 파일 경로에 추가할 고유 접미사를 가져옵니다.</summary>
        <value>파일 경로에 추가되는 고유 접미사입니다. 기본값은 "__ufps="와 고유한 6자리 숫자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.UniqueFilePathSuffix%2A> 속성 브라우저 캐시에 필요한 경우 파일 경로의 끝에 추가 되는 문자열을 반환 합니다. 특정 요청과 관련 된 파일 경로 확인 하는 문자열이 사용 됩니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnobtrusiveValidationMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.UnobtrusiveValidationMode UnobtrusiveValidationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.UnobtrusiveValidationMode UnobtrusiveValidationMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.UnobtrusiveValidationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property UnobtrusiveValidationMode As UnobtrusiveValidationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::UnobtrusiveValidationMode UnobtrusiveValidationMode { System::Web::UI::UnobtrusiveValidationMode get(); void set(System::Web::UI::UnobtrusiveValidationMode value); };" />
      <MemberSignature Language="F#" Value="member this.UnobtrusiveValidationMode : System.Web.UI.UnobtrusiveValidationMode with get, set" Usage="System.Web.UI.Page.UnobtrusiveValidationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.UnobtrusiveValidationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>눈에 띄지 않는 JavaScript가 클라이언트 쪽 유효성 검사를 수행할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>눈에 띄지 않는 JavaScript가 사용되는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterRequiresControlState">
      <MemberSignature Language="C#" Value="public void UnregisterRequiresControlState (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterRequiresControlState(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.UnregisterRequiresControlState(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterRequiresControlState(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.UnregisterRequiresControlState : System.Web.UI.Control -&gt; unit" Usage="page.UnregisterRequiresControlState control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">컨트롤 상태의 지속을 중지할 <see cref="T:System.Web.UI.Control" />입니다.</param>
        <summary>지정된 컨트롤에 대한 컨트롤 상태의 지속을 중지합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 컨트롤 상태를 사용 하는 사용자 지정 서버 컨트롤을 호출 해야 합니다는 <xref:System.Web.UI.Page.RegisterRequiresControlState%2A> 전에 각 요청에는 상태가 유지 됩니다. 컨트롤 상태에 대 한 등록 동안 지연 되지 않습니다을 통해 요청에서 요청에 다시 게시 합니다. 사용 된 <xref:System.Web.UI.Page.UnregisterRequiresControlState%2A> 메서드를 더 이상 포스트백에 대해 유지 해야 하는 컨트롤에 대 한 제어 상태가 유지 되지 않습니다.  
  
 내부적으로 <xref:System.Web.UI.Page.UnregisterRequiresControlState%2A> 사용 하는 경우 메서드가 호출 되는 <xref:System.Web.UI.Control.RemovedControl%2A> controls 컬렉션에서 컨트롤을 제거 하는 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Web.UI.Control" />이 <see langword="null" />인 경우</exception>
        <altmember cref="M:System.Web.UI.Page.RegisterRequiresControlState(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.Page.RequiresControlState(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateModel&lt;TModel&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>값 공급자의 값을 사용하여 지정된 모델 인스턴스를 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web Forms 모델 바인딩 사용에 자습서 시리즈를 참조 하십시오. [모델 바인딩 및 Web Forms](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateModel&lt;TModel&gt;">
      <MemberSignature Language="C#" Value="public virtual void UpdateModel&lt;TModel&gt; (TModel model) where TModel : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateModel&lt;class TModel&gt;(!!TModel model) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.UpdateModel``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateModel(Of TModel As Class) (model As TModel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TModel&gt;&#xA; where TModel : class virtual void UpdateModel(TModel model);" />
      <MemberSignature Language="F#" Value="abstract member UpdateModel : 'Model -&gt; unit (requires 'Model : null)&#xA;override this.UpdateModel : 'Model -&gt; unit (requires 'Model : null)" Usage="page.UpdateModel model" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TModel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="model" Type="TModel" />
      </Parameters>
      <Docs>
        <typeparam name="TModel">모델의 형식입니다.</typeparam>
        <param name="model">모델입니다.</param>
        <summary>데이터 바인딩 컨트롤의 값을 사용하여 지정된 모델 인스턴스를 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 데이터 바인딩된 컨트롤의 지정 된 메서드에서만이 메서드를 호출 해야 `UpdateMethod` 또는 `InsertMethod` 속성입니다.  
  
 Web Forms 모델 바인딩 사용에 자습서 시리즈를 참조 하십시오. [모델 바인딩 및 Web Forms](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateModel&lt;TModel&gt;">
      <MemberSignature Language="C#" Value="public virtual void UpdateModel&lt;TModel&gt; (TModel model, System.Web.ModelBinding.IValueProvider valueProvider) where TModel : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateModel&lt;class TModel&gt;(!!TModel model, class System.Web.ModelBinding.IValueProvider valueProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.UpdateModel``1(``0,System.Web.ModelBinding.IValueProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub UpdateModel(Of TModel As Class) (model As TModel, valueProvider As IValueProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TModel&gt;&#xA; where TModel : class virtual void UpdateModel(TModel model, System::Web::ModelBinding::IValueProvider ^ valueProvider);" />
      <MemberSignature Language="F#" Value="abstract member UpdateModel : 'Model * System.Web.ModelBinding.IValueProvider -&gt; unit (requires 'Model : null)&#xA;override this.UpdateModel : 'Model * System.Web.ModelBinding.IValueProvider -&gt; unit (requires 'Model : null)" Usage="page.UpdateModel (model, valueProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TModel">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="model" Type="TModel" />
        <Parameter Name="valueProvider" Type="System.Web.ModelBinding.IValueProvider" />
      </Parameters>
      <Docs>
        <typeparam name="TModel">모델의 형식입니다.</typeparam>
        <param name="model">모델입니다.</param>
        <param name="valueProvider">값 공급자입니다.</param>
        <summary>지정된 값 공급자의 값을 사용하여 지정된 모델 인스턴스를 업데이트합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web Forms 모델 바인딩 사용에 자습서 시리즈를 참조 하십시오. [모델 바인딩 및 Web Forms](/aspnet/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data)합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal User" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ User { System::Security::Principal::IPrincipal ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.User : System.Security.Principal.IPrincipal" Usage="System.Web.UI.Page.User" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>페이지를 요청하는 사용자에 대한 정보를 가져옵니다.</summary>
        <value>페이지를 요청하는 사용자를 나타내는 <see cref="T:System.Security.Principal.IPrincipal" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Principal.IPrincipal> 개체 코드를 실행 하는 사용자와 이들이 속하는 역할의 보안 컨텍스트를 나타냅니다.  
  
 이 속성에 사용 되는 <xref:System.Web.HttpContext> 개체의 <xref:System.Web.HttpContext.User%2A> 요청이 발생 한 위치를 결정 하는 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.User%2A> 속성 현재 사용자에 대 한 인증 및 id 정보에 액세스할 수 있습니다. 사용자 인증 되지 않은 경우으로 리디렉션되어 로그인 페이지로 됩니다.  
  
 [!code-csharp[Page_User#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_User/CS/page_user.cs.aspx#1)]
 [!code-vb[Page_User#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_User/VB/page_user.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
        <altmember cref="T:System.Security.Principal.IPrincipal" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>페이지에 포함된 유효성 검사 컨트롤이 자신에게 할당된 정보의 유효성을 검사하도록 합니다.</summary>
        <altmember cref="T:System.Web.UI.ValidatorCollection" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
        <altmember cref="P:System.Web.UI.Page.IsValid" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Validate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Validate();" />
      <MemberSignature Language="F#" Value="abstract member Validate : unit -&gt; unit&#xA;override this.Validate : unit -&gt; unit" Usage="page.Validate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>페이지에 포함된 유효성 검사 컨트롤이 자신에게 할당된 정보의 유효성을 검사하도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 서버 컨트롤을 클릭할 때이 메서드가 호출 되는 `CausesValidation` 속성이로 설정 `true`, 기본값입니다. 여기에 <xref:System.Web.UI.WebControls.Button>, <xref:System.Web.UI.WebControls.ImageButton>, 및 <xref:System.Web.UI.WebControls.LinkButton> 웹 서버 컨트롤의 <xref:System.Web.UI.HtmlControls.HtmlInputButton>, <xref:System.Web.UI.HtmlControls.HtmlInputImage>, 및 <xref:System.Web.UI.HtmlControls.HtmlButton> HTML 서버 컨트롤 및 컨트롤의 같은서버에다시자동으로게시할수있는<xref:System.Web.UI.WebControls.TextBox>, <xref:System.Web.UI.WebControls.CheckBox>, <xref:System.Web.UI.WebControls.ListControl>, 및 <xref:System.Web.UI.WebControls.BulletedList> 컨트롤입니다.  
  
 단추 컨트롤의 설정 페이지에서 모든 단추 컨트롤에 대 한 유효성 검사를 사용 하지 않으려면 `CausesValidation` 속성을 `false`합니다.  
  
 유효성 검사 컨트롤에 포함 된 반복이 메서드가 호출 되 면는 <xref:System.Web.UI.ValidatorCollection> 연관 된 개체는 <xref:System.Web.UI.Page.Validators%2A?displayProperty=nameWithType> 속성 및 현재 유효성 검사 그룹의 각 유효성 검사 컨트롤에 대 한 유효성 검사 논리를 호출 합니다. 유효성 검사 그룹 페이지를 서버에 게시 하는 컨트롤에 의해 결정 됩니다. 유효성 검사 그룹이 지정 된 경우 유효성 검사 그룹이 사용 됩니다.  
  
> [!NOTE]
>  페이지 유효성 검사 동작이 변경 되었습니다. [!INCLUDE[vstecasplong](~/includes/vstecasplong-md.md)], 더 이상 호출을 제어는 <xref:System.Web.UI.Page.Validate?displayProperty=nameWithType> 방법으로, 이러한 사용의 <xref:System.Web.UI.Page.Validate%28System.String%29?displayProperty=nameWithType> 메서드 대신 합니다. 사용 하는 경우는 <xref:System.Web.UI.Page.Validate?displayProperty=nameWithType> 에서 메서드는 [!INCLUDE[vstecasplong](~/includes/vstecasplong-md.md)] 페이지에서 유효성 검사 그룹은 무시 되 고 모든 컨트롤에 유효성을 검사 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.Validate%2A> 메서드 서로 다른 유효성 검사 그룹이 시나리오의 페이지를 정의 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.UI.Page.Validate2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.Validate2/cs/pagevalidatecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.Validate2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.Validate2/vb/pagevalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Web.UI.Page.Validate" /> 에서 메서드를 사용 하지 않는 [! INCLUDE[vstecasplong](~/includes/vstecasplong-md.md)]입니다. 사용 하는 [! INCLUDE[vstecasplong](~/includes/vstecasplong-md.md)] 재정의 <see cref="M:System.Web.UI.Page.Validate(System.String)" /> 페이지 유효성 검사 동작을 변경 하려면 메서드.</para>
        </block>
        <altmember cref="T:System.Web.UI.ValidatorCollection" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
        <altmember cref="P:System.Web.UI.Page.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual void Validate (string validationGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(string validationGroup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.Validate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Validate (validationGroup As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Validate(System::String ^ validationGroup);" />
      <MemberSignature Language="F#" Value="abstract member Validate : string -&gt; unit&#xA;override this.Validate : string -&gt; unit" Usage="page.Validate validationGroup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validationGroup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="validationGroup">유효성을 검사할 컨트롤의 유효성 검사 그룹 이름입니다.</param>
        <summary>지정된 유효성 검사 그룹의 유효성 검사 컨트롤이 할당된 정보의 유효성을 검사하도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 서버 컨트롤을 클릭할 때이 메서드가 호출 되는 `CausesValidation` 속성이로 설정 `true`, 기본값입니다. 여기에 <xref:System.Web.UI.WebControls.Button>, <xref:System.Web.UI.WebControls.ImageButton>, 및 <xref:System.Web.UI.WebControls.LinkButton> 웹 서버 컨트롤의 <xref:System.Web.UI.HtmlControls.HtmlInputButton>, <xref:System.Web.UI.HtmlControls.HtmlInputImage>, 및 <xref:System.Web.UI.HtmlControls.HtmlButton> HTML 서버 컨트롤 및 컨트롤의 같은서버에다시자동으로게시할수있는<xref:System.Web.UI.WebControls.TextBox>, <xref:System.Web.UI.WebControls.CheckBox>, <xref:System.Web.UI.WebControls.ListControl>, 및 <xref:System.Web.UI.WebControls.BulletedList> 컨트롤입니다.  
  
 단추 컨트롤의 설정 페이지에서 모든 단추 컨트롤에 대 한 유효성 검사를 사용 하지 않으려면 `CausesValidation` 속성을 `false`합니다.  
  
 <xref:System.Web.UI.Page.Validate%2A> 메서드는 지정 된 유효성 검사 그룹의 유효성을 검사 합니다. 호출한 후의 <xref:System.Web.UI.Page.Validate%2A> 유효성 검사 그룹에 대 한 메서드는 <xref:System.Web.UI.Page.IsValid%2A> 메서드는 반환 `true` 지정 된 유효성 검사 그룹 및 페이지를 서버에 게시 하는 컨트롤의 유효성 검사 그룹을 모두 사용할 수 있는 경우에 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Web.UI.Page.Validate%2A> 메서드 서로 다른 유효성 검사 그룹이 시나리오의 페이지를 정의 합니다.  
  
> [!IMPORTANT]
>  이 예제에는 사용자 입력을 허용하는 텍스트 상자가 있으므로 보안상 위험할 수 있습니다. 기본적으로 ASP.NET 웹 페이지는 사용자 입력 내용에 스크립트 또는 HTML 요소가 포함되어 있지 않은지 확인합니다. 자세한 내용은 [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)를 참조하세요.  
  
 [!code-aspx-csharp[System.Web.UI.Page.Validate2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page.Validate2/cs/pagevalidatecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.Page.Validate2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page.Validate2/vb/pagevalidatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ValidatorCollection" />
        <altmember cref="P:System.Web.UI.Page.Validators" />
        <altmember cref="P:System.Web.UI.Page.IsValid" />
      </Docs>
    </Member>
    <Member MemberName="ValidateRequestMode">
      <MemberSignature Language="C#" Value="public override System.Web.UI.ValidateRequestMode ValidateRequestMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ValidateRequestMode ValidateRequestMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ValidateRequestMode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ValidateRequestMode As ValidateRequestMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::ValidateRequestMode ValidateRequestMode { System::Web::UI::ValidateRequestMode get(); void set(System::Web::UI::ValidateRequestMode value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateRequestMode : System.Web.UI.ValidateRequestMode with get, set" Usage="System.Web.UI.Page.ValidateRequestMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ValidateRequestMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>잠재적으로 위험한 값이 있는지 확인하기 위해 페이지에서 브라우저의 클라이언트 입력을 검사하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>페이지가 클라이언트 입력을 확인하는지 여부를 나타내는 값입니다. 기본값은 <see cref="F:System.Web.UI.ValidateRequestMode.Enabled" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값 <xref:System.Web.UI.ValidateRequestMode.Inherit> 에서 사용 되지 않습니다는 <xref:System.Web.UI.Page> 클래스에서 상속 하는 것이 없습니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UnvalidatedRequestValues" />
      </Docs>
    </Member>
    <Member MemberName="Validators">
      <MemberSignature Language="C#" Value="public System.Web.UI.ValidatorCollection Validators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ValidatorCollection Validators" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Validators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Validators As ValidatorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ValidatorCollection ^ Validators { System::Web::UI::ValidatorCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Validators : System.Web.UI.ValidatorCollection" Usage="System.Web.UI.Page.Validators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ValidatorCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>요청된 페이지에 들어 있은 모든 유효성 검사 컨트롤의 컬렉션을 가져옵니다.</summary>
        <value>유효성 검사 컨트롤의 컬렉션입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 속성을 사용 하 여 메서드 및 속성을 조작는 <xref:System.Web.UI.ValidatorCollection> 개체와 현재 연결 된 <xref:System.Web.UI.Page> 인스턴스. 이 컬렉션 페이지에 포함 된 모든 유효성 검사 서버 컨트롤을 포함 합니다.  
  
 호출 된 <xref:System.Web.UI.Page.Validate%2A?displayProperty=nameWithType> 메서드를 사용 하면 유효성 검사 논리를 현재 유효성 검사 그룹의 각 유효성 검사 서버 컨트롤에 대해 실행 합니다. 이러한 컨트롤 통과 하지 않으면는 <xref:System.Web.UI.Page.IsValid%2A?displayProperty=nameWithType> 속성에서 반환 `false`합니다.  
  
 유효성 검사 컨트롤에 대 한 자세한 내용은 참조 하십시오. [ASP.NET 유효성 검사 컨트롤](http://msdn.microsoft.com/library/fa2aa14d-a461-492e-9a79-c990904613ef)합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ValidatorCollection" />
      </Docs>
    </Member>
    <Member MemberName="VerifyRenderingInServerForm">
      <MemberSignature Language="C#" Value="public virtual void VerifyRenderingInServerForm (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VerifyRenderingInServerForm(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Page.VerifyRenderingInServerForm(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void VerifyRenderingInServerForm(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member VerifyRenderingInServerForm : System.Web.UI.Control -&gt; unit&#xA;override this.VerifyRenderingInServerForm : System.Web.UI.Control -&gt; unit" Usage="page.VerifyRenderingInServerForm control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">
          <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 컨트롤에 필요한 ASP.NET 서버 컨트롤입니다.</param>
        <summary>
          <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 컨트롤이 런타임에 지정된 ASP.NET 서버 컨트롤에 렌더링되는지 여부를 확인합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 내부에 필요한 컨트롤을 `<form runat=server>` 태그 렌더링 되는 태그 밖에 배치 되는 경우 오류 메시지를 표시 하기 전에이 메서드를 호출할 수 있습니다. 다시 게시 또는 등록 된 스크립트 블록에 종속 하는 컨트롤의 재정의에이 메서드를 호출 해야는 <xref:System.Web.UI.Control.Render%2A?displayProperty=nameWithType> 메서드. 다른 방식으로 서버 form 요소를 렌더링 된 페이지 다양 한 상황에서 예외를 throw 하려면이 메서드를 재정의할 수 있습니다.  
  
 다시 게시 하거나 클라이언트 쪽 스크립트를 사용 하는 서버 컨트롤에 포함 되지 않는 경우 작동 하지 것입니다는 <xref:System.Web.UI.HtmlControls.HtmlForm> 서버 컨트롤 (<`form runat="server">`) 태그입니다. 이러한 컨트롤에 포함 되지 않는 경우 오류 메시지를 제공 렌더링 될 때이 메서드를 호출할 수는 <xref:System.Web.UI.HtmlControls.HtmlForm> 제어 합니다.  
  
 일반적으로 재정의 하는 경우이 메서드를 호출은 사용자 지정 서버 컨트롤을 개발 하는 경우는 `Render` 모든 종류의 입력된 태그에 대 한 메서드. 이 입력된 컨트롤을 호출 하는 경우에 특히 중요 <xref:System.Web.UI.Page.GetPostBackEventReference%2A>, 클라이언트 스크립트를 내보내는 경우입니다. 복합 서버 컨트롤이이 호출을 만들 필요는 없습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 재정의 <xref:System.Web.UI.Page.Render%2A?displayProperty=nameWithType> 사용자 지정 서버 컨트롤의 메서드. 페이지에 해당 콘텐츠를 작성 하는이 컨트롤을 사용 하 여는 <xref:System.Web.UI.Page.VerifyRenderingInServerForm%2A> 여는 태그와 닫는 태그 사이 컨트롤이 표시 되는지 확인 하는 메서드는 <xref:System.Web.UI.HtmlControls.HtmlForm> 제어 합니다.  
  
 [!code-csharp[System.Web.UI.Page_VerifyRenderingInServerForm#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.Page_VerifyRenderingInServerForm/CS/testlinkbutton.cs#3)]
 [!code-vb[System.Web.UI.Page_VerifyRenderingInServerForm#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.Page_VerifyRenderingInServerForm/vb/testlinkbutton.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">지정된 서버 컨트롤이 런타임에 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 서버 컨트롤의 여는 태그와 닫는 태그 사이에 포함되지 않는 경우</exception>
        <exception cref="T:System.ArgumentNullException">확인할 컨트롤이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="ViewStateEncryptionMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ViewStateEncryptionMode ViewStateEncryptionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ViewStateEncryptionMode ViewStateEncryptionMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ViewStateEncryptionMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewStateEncryptionMode As ViewStateEncryptionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ViewStateEncryptionMode ViewStateEncryptionMode { System::Web::UI::ViewStateEncryptionMode get(); void set(System::Web::UI::ViewStateEncryptionMode value); };" />
      <MemberSignature Language="F#" Value="member this.ViewStateEncryptionMode : System.Web.UI.ViewStateEncryptionMode with get, set" Usage="System.Web.UI.Page.ViewStateEncryptionMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ViewStateEncryptionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>뷰 상태의 암호화 모드를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.ViewStateEncryptionMode" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Web.UI.ViewStateEncryptionMode.Auto" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> 코드에서 속성을 설정할 수 없습니다. 지시문만 설정할 수는 < 구성 파일의 요소입니다. 값이 구성 파일에 설정 된 값 지시문 재정의 설정 합니다.  
  
 지시문에이 속성을 설정 하기 위한 구문은 다음과 같습니다.  
  
```vb  
<%@ Page Language="VB" ViewStateEncryptionMode="Always" %>  
```  
  
```csharp  
<%@ Page Language="C#" ViewStateEncryptionMode="Always" %>  
```  
  
 구성 파일에서이 속성을 설정 하기 위한 구문은 다음과 같습니다.  
  
```vb  
<system.web>  
  <pages viewStateEncryptionMode="Always" />  
</system.web>  
```  
  
```csharp  
<system.web>  
  <pages viewStateEncryptionMode="Always" />  
</system.web>  
```  
  
 사용자 지정 컨트롤 개발자가 해당 컨트롤의 뷰 상태에 잠재적으로 중요 한 데이터를 저장 하기 전에 코드에서이 속성의 값을 확인 할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">값 집합이 <see cref="T:System.Web.UI.ViewStateEncryptionMode" /> 열거형의 멤버가 아닌 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Web.UI.Page.ViewStateEncryptionMode" /> 속성을 페이지 수명 주기의 페이지 <see langword="PreRender" />단계 또는 그 이전에만 설정이 가능합니다.</exception>
        <altmember cref="T:System.Web.UI.ViewStateEncryptionMode" />
      </Docs>
    </Member>
    <Member MemberName="ViewStateUserKey">
      <MemberSignature Language="C#" Value="public string ViewStateUserKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ViewStateUserKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.ViewStateUserKey" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewStateUserKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ViewStateUserKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ViewStateUserKey : string with get, set" Usage="System.Web.UI.Page.ViewStateUserKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 페이지와 관련된 뷰 상태 변수에서 개별 사용자에 대한 식별자를 지정합니다.</summary>
        <value>개별 사용자에 대한 식별자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 설정의 <xref:System.Web.UI.Page.ViewStateUserKey%2A> 속성 악의적인 사용자 로부터 응용 프로그램에 대 한 공격을 방지 하는 데 도움이 수 있습니다. 공격을 생성 하는 변수를 사용할 수 없습니다 있도록 식별자 개별 사용자에 대 한 뷰 상태 변수를 할당할 수 있도록 하 여 수행 합니다. 것을 방지 하기 위해 수행할 수 있는 작업 및 웹 공격에 대 한 자세한 내용은 참조 하십시오. [걸릴 이점은의 ASP.NET 기본 제공 기능을 웹 공격 오프 지금](http://go.microsoft.com/fwlink/?LinkId=163557)합니다.  
  
 사용자의 인증 이름이 같은 모든 문자열 값으로이 속성을 설정할 수 있습니다 또는 <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 값입니다.  
  
> [!NOTE]
>  중에이 속성을 설정 해야 합니다는 `Page_Init` 페이지 처리의 단계입니다. 설정 중에이 속성의 `Page_Load` 단계 예외를 throw 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">페이지 처리 중에 <see cref="P:System.Web.UI.Page.ViewStateUserKey" /> 속성이 너무 늦게 액세스된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Page.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Web.UI.Page.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.Page" /> 개체가 렌더링되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Web.UI.Page" />가 렌더링되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예에서는 <xref:System.Web.UI.Page.Visible%2A> 속성을 `false` 페이지의 렌더링 된 내용을 숨길 수 있습니다. 이 페이지를 처음 요청할 때 데이터 원본은 채워지며 페이지에 표시 됩니다. 사용자가 단추를 클릭할 때는 `HideButton_Click` 이벤트 처리기는 페이지의 콘텐츠를 렌더링 된 전체를 숨깁니다.  
  
 [!code-csharp[Page_Visible#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Page_Visible/CS/page_visible.cs.aspx#1)]
 [!code-vb[Page_Visible#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Page_Visible/VB/page_visible.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Control" />
        <altmember cref="T:System.Web.UI.TemplateControl" />
        <altmember cref="T:System.Web.UI.UserControl" />
      </Docs>
    </Member>
  </Members>
</Type>