<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9200f0d5a36d7d9b1c59b031ca32d0e2c5500b69" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36376653" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>페이지에 등록된 비동기 작업에 대한 정보를 포함합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 버전 2.0을 사용 하면 여러 작업을 페이지를 등록 하 고 페이지를 렌더링 하기 전에 비동기식으로 실행할 수 있습니다. 느리게 처리 하 고 다른 프로세스를 실행 하는 동안 하느라 정체 될 하지 않을 경우 작업을 비동기적으로 실행 되도록 지정 될 수 있습니다. 비동기 작업은 순차적으로 또는 병렬로 실행할 수 있습니다.  
  
 A <xref:System.Web.UI.PageAsyncTask> 통해 페이지에 개체를 등록 해야 합니다는 <xref:System.Web.UI.Page.RegisterAsyncTask%2A> 메서드. 페이지 자체는 비동기 작업을 실행 하도록 비동기적으로 처리 될 필요가 없습니다. 설정할 수 있습니다는 `Async` 특성을 하나 `true` (에서처럼 다음 코드 예제) 또는 `false` 페이지 지시문 및 비동기 작업은 여전히 비동기적으로 처리 될:  
  
 `<%@ Page Async="true" %>`  
  
 경우는 `Async` 특성이로 설정 된 `false`, 페이지를 실행 하는 스레드는 비동기 작업이 완료 될 때까지 차단 됩니다.  
  
 하기 전에 등록 된 모든 비동기 작업의 <xref:System.Web.UI.Page.PreRenderComplete> 이벤트 경우 실행지 것입니다 자동으로 페이지에서 아직 실행 되지 않은 것입니다. 비동기 작업 후에 등록 된는 <xref:System.Web.UI.Page.PreRenderComplete> 이벤트를 통해 명시적으로 실행 해야 합니다는 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 메서드. <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 메서드 시작 되기 전에 작업을 사용할 수도 있습니다는 <xref:System.Web.UI.Page.PreRenderComplete> 이벤트입니다. <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> 메서드가 실행 되지 않은 페이지에서 등록 된 모든 비동기 작업을 실행 합니다.  
  
 기본적으로 비동기 작업 45 초 안에 완료 되지 않은 경우 시간 초과 됩니다. Web.config 파일 또는 page 지시문에 다른 제한 시간 값을 지정할 수 있습니다. `<pages>` Web.config 파일의 섹션에 포함 되어는 `asyncTimeout` 특성을 다음과 같이 합니다.  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 Page 지시문을 포함 한 `AsyncTimeout` 특성입니다.  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 다음 코드 예제는 세 개의 비동기 작업을 페이지를 등록 하 고 병렬로 실행 합니다. 각 작업 스레드를 5 초 동안 절전 모드를 설정 하면 단지 하는 메서드를 호출 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.PageAsyncTask" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">이벤트 처리기입니다.</param>
        <summary>작업을 취소할 수 있는 이벤트 처리기를 사용하여 <see cref="T:System.Web.UI.PageAsyncTask" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 래핑하는 <xref:System.Web.TaskEventHandler> 위임 있도록는 <xref:System.Web.UI.PageAsyncTask> 개체 비동기 코드를 통합할 수 있습니다 (기반 <xref:System.Threading.Tasks.Task> 개체) 기존 ASP.NET Web Forms 비동기 페이지 기능을 사용 합니다. ASP.NET 신호를 보내는 <xref:System.Threading.CancellationToken> 에 전달 되는 개체는 <xref:System.Web.TaskEventHandler> 기반으로 취소에 대 한 대리자는 <xref:System.Web.UI.Page.AsyncTimeout%2A> 특성에 설정는 `@ Page` 웹 페이지의 지시문입니다. 때는 <xref:System.Web.UI.Page.AsyncTimeout%2A> 값에 도달는 <xref:System.Threading.CancellationToken> 개체에 신호로 알려야 합니다. `CancellationToken` 매개 변수는의 구현에 의해 호출 되는 비동기 Api에 전달 되어야 합니다는 <xref:System.Web.TaskEventHandler> 클래스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">이벤트 처리기입니다.</param>
        <summary>작업을 처리할 수 있는 이벤트 처리기를 사용하여 <see cref="T:System.Web.UI.PageAsyncTask" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">비동기 작업을 시작할 때 호출할 처리기입니다.</param>
        <param name="endHandler">제한 시간 안에 작업이 성공적으로 완료되면 호출할 처리기입니다.</param>
        <param name="timeoutHandler">제한 시간 안에 작업이 성공적으로 완료되지 않으면 호출할 처리기입니다.</param>
        <param name="state">작업의 상태를 나타내는 개체입니다.</param>
        <summary>병렬로 실행하기 위한 기본값을 사용하여 <see cref="T:System.Web.UI.PageAsyncTask" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 생성자의이 구현에서 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> 속성을 `false` 하므로 비동기 작업이 페이지에 있는 다른 작업을 병렬로 처리 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="beginHandler" /> 매개 변수 또는 <paramref name="endHandler" /> 매개 변수가 지정되지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler">비동기 작업을 시작할 때 호출할 처리기입니다.</param>
        <param name="endHandler">제한 시간 안에 작업이 성공적으로 완료되면 호출할 처리기입니다.</param>
        <param name="timeoutHandler">제한 시간 안에 작업이 성공적으로 완료되지 않으면 호출할 처리기입니다.</param>
        <param name="state">작업의 상태를 나타내는 개체입니다.</param>
        <param name="executeInParallel">작업을 다른 작업과 병렬로 처리할 수 있는지 여부를 나타내는 값입니다.</param>
        <summary>병렬로 실행하기 위해 지정된 값을 사용하여 <see cref="T:System.Web.UI.PageAsyncTask" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 생성자의이 구현에는 페이지에 있는 다른 작업을 병렬로 처리할을 비동기 작업을 쓸지를 설정할 수 있습니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 서로에 대해 병렬로 처리 하는 세 가지 비동기 작업을 만듭니다. 이 예제는에 보다 큰 예제의 일부는 <xref:System.Web.UI.PageAsyncTask> 클래스 개요입니다.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="beginHandler" /> 매개 변수 또는 <paramref name="endHandler" /> 매개 변수가 지정되지 않은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>비동기 작업을 시작할 때 호출할 메서드를 가져옵니다.</summary>
        <value>비동기 작업을 시작할 때 호출할 메서드를 나타내는 <see cref="T:System.Web.BeginEventHandler" /> 대리자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> 대리자 생성자에서 설정 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 세 개의 비동기 작업을 페이지를 등록 하 고 병렬로 실행 합니다. 각 작업 스레드를 5 초 동안 절전 모드를 설정 하면 단지 하는 메서드를 호출 합니다. A <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> 각 작업에 대해 대리자를 지정 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제한 시간 안에 작업이 성공적으로 완료되면 호출할 메서드를 가져옵니다.</summary>
        <value>제한 시간 안에 작업이 성공적으로 완료되면 호출할 메서드를 나타내는 <see cref="T:System.Web.EndEventHandler" /> 대리자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> 대리자 생성자에서 설정 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 세 개의 비동기 작업을 페이지를 등록 하 고 병렬로 실행 합니다. 각 작업 스레드를 5 초 동안 절전 모드를 설정 하면 단지 하는 메서드를 호출 합니다. <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> 각 작업에 대해 대리자를 지정 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>작업을 다른 작업과 병렬로 처리할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>작업을 다른 작업과 병렬로 처리해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> 속성은 생성자에서 설정 합니다. 여러 작업이 페이지에 등록 되는 경우와 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> 속성이로 설정 되어 `true`, 해당 작업을 동시에 처리 됩니다. 그러나 경우는 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> 속성이 `false`, 해당 작업은 순차적으로 처리 됩니다. 예를 들어 페이지에 포함 된 경우 두 개의 비동기 작업이 있는 각 작업은 완료 하려면 5 초가 소요 및 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> 로 설정 된 `true`, 두 작업 모두 5 초 내에 완료 됩니다. 경우 <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> 로 설정 된 `false` 같은 두 개의 태스크, 그런 다음 첫 번째 작업은 5 초 동안 완료 되 고 5 초 후 첫 번째 작업의 완료 된 두 번째 작업은 완료 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 각 집합을 병렬로 처리할 수 있는 세 가지 비동기 작업을 정의 합니다. 이 예제는에 보다 큰 예제의 일부는 <xref:System.Web.UI.PageAsyncTask> 클래스 개요입니다.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>작업의 상태를 나타내는 개체를 가져옵니다.</summary>
        <value>작업의 상태를 나타내는 <see cref="T:System.Object" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.State%2A> 속성은 생성자에서 설정 되며 비동기 작업을 실행 하는 동안 수정할 수 없습니다. 각각의 해당에 고유한 문자열 값을 할당 하 여 페이지에서 비동기 작업을 구분할 수 <xref:System.Web.UI.PageAsyncTask.State%2A> 속성입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 세 가지 비동기 작업을 만들고에 대 한 고유 값을 제공 자신의 <xref:System.Web.UI.PageAsyncTask.State%2A> 속성입니다. 이 예제는에 보다 큰 예제의 일부는 <xref:System.Web.UI.PageAsyncTask> 클래스 개요입니다.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>제한 시간 안에 작업이 성공적으로 완료되지 않으면 호출할 메서드를 가져옵니다.</summary>
        <value>제한 시간 안에 작업이 성공적으로 완료되지 않으면 호출할 메서드를 나타내는 <see cref="T:System.Web.EndEventHandler" /> 대리자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> 대리자 생성자에서 설정 됩니다.  
  
   
  
## Examples  
 다음 코드 예제는 세 개의 비동기 작업을 페이지를 등록 하 고 병렬로 실행 합니다. 각 작업 스레드를 5 초 동안 절전 모드를 설정 하면 단지 하는 메서드를 호출 합니다. A <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> 각 작업에 대해 대리자를 지정 합니다.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>