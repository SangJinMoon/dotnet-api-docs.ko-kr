<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="PageAsyncTask.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac536cc8e3f70ac39686797a62234cd83eb5704a5b4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36cc8e3f70ac39686797a62234cd83eb5704a5b4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.UI.PageAsyncTask">
          <source>Contains information about an asynchronous task registered to a page.</source>
          <target state="translated">페이지에 등록된 비동기 작업에 대한 정보를 포함합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Web.UI.PageAsyncTask">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page.</source>
          <target state="translated">ASP.NET 버전 2.0을 사용 하면 여러 작업을 페이지를 등록 하 고 페이지를 렌더링 하기 전에 비동기식으로 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing.</source>
          <target state="translated">느리게 처리 하 고 다른 프로세스를 실행 하는 동안 하느라 정체 될 하지 않을 경우 작업을 비동기적으로 실행 되도록 지정 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The asynchronous tasks can be executed in parallel or sequentially.</source>
          <target state="translated">비동기 작업은 순차적으로 또는 병렬로 실행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object must be registered to the page through the <ph id="ph2">&lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;</ph> method.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> 통해 페이지에 개체를 등록 해야 합니다는 <ph id="ph2">&lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The page itself does not have to be processed asynchronously to execute asynchronous tasks.</source>
          <target state="translated">페이지 자체는 비동기 작업을 실행 하도록 비동기적으로 처리 될 필요가 없습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>You can set the <ph id="ph1">`Async`</ph> attribute to either <ph id="ph2">`true`</ph> (as shown in the following code example) or <ph id="ph3">`false`</ph> on the page directive and the asynchronous tasks will still be processed asynchronously:</source>
          <target state="translated">설정할 수 있습니다는 <ph id="ph1">`Async`</ph> 특성을 하나 <ph id="ph2">`true`</ph> (에서처럼 다음 코드 예제) 또는 <ph id="ph3">`false`</ph> 페이지 지시문 및 비동기 작업은 여전히 비동기적으로 처리 될:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>When the <ph id="ph1">`Async`</ph> attribute is set to <ph id="ph2">`false`</ph>, the thread that executes the page will be blocked until all asynchronous tasks are complete.</source>
          <target state="translated">경우는 <ph id="ph1">`Async`</ph> 특성이로 설정 된 <ph id="ph2">`false`</ph>, 페이지를 실행 하는 스레드는 비동기 작업이 완료 될 때까지 차단 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>Any asynchronous tasks registered before the <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event will be executed automatically by the page if they have not already been executed.</source>
          <target state="translated">하기 전에 등록 된 모든 비동기 작업의 <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> 이벤트 경우 실행지 것입니다 자동으로 페이지에서 아직 실행 되지 않은 것입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>Those asynchronous tasks registered after the <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event must be executed explicitly through the <ph id="ph2">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method.</source>
          <target state="translated">비동기 작업 후에 등록 된는 <ph id="ph1">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> 이벤트를 통해 명시적으로 실행 해야 합니다는 <ph id="ph2">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method can also be used to start tasks before the <ph id="ph2">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> 메서드 시작 되기 전에 작업을 사용할 수도 있습니다는 <ph id="ph2">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method executes all the registered asynchronous tasks on the page that have not been executed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> 메서드가 실행 되지 않은 페이지에서 등록 된 모든 비동기 작업을 실행 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>By default, an asynchronous task will time out if it has not completed within 45 seconds.</source>
          <target state="translated">기본적으로 비동기 작업 45 초 안에 완료 되지 않은 경우 시간 초과 됩니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>You can specify a different time-out value in either the Web.config file or the page directive.</source>
          <target state="translated">Web.config 파일 또는 page 지시문에 다른 제한 시간 값을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The <ph id="ph1">`&lt;pages&gt;`</ph> section of the Web.config file contains an <ph id="ph2">`asyncTimeout`</ph> attribute, as shown below.</source>
          <target state="translated"><ph id="ph1">`&lt;pages&gt;`</ph> Web.config 파일의 섹션에 포함 되어는 <ph id="ph2">`asyncTimeout`</ph> 특성을 다음과 같이 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The page directive contains an <ph id="ph1">`AsyncTimeout`</ph> attribute.</source>
          <target state="translated">Page 지시문을 포함 한 <ph id="ph1">`AsyncTimeout`</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">다음 코드 예제는 세 개의 비동기 작업을 페이지를 등록 하 고 병렬로 실행 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.PageAsyncTask">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">각 작업 스레드를 5 초 동안 절전 모드를 설정 하면 단지 하는 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Web.UI.PageAsyncTask">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>An event handler.</source>
          <target state="translated">이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using an event handler that enables the task to be canceled.</source>
          <target state="translated">작업을 취소할 수 있는 이벤트 처리기를 사용하여 <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>This constructor wraps a <ph id="ph1">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate so that the <ph id="ph2">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object can integrate asynchronous code (based on <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects) with the existing ASP.NET Web Forms asynchronous pages feature.</source>
          <target state="translated">이 생성자를 래핑하는 <ph id="ph1">&lt;xref:System.Web.TaskEventHandler&gt;</ph> 위임 있도록는 <ph id="ph2">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> 개체 비동기 코드를 통합할 수 있습니다 (기반 <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> 개체) 기존 ASP.NET Web Forms 비동기 페이지 기능을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>ASP.NET will signal the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object that is passed to a <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate for cancellation based on the <ph id="ph3">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> attribute set in the <ph id="ph4">`@ Page`</ph> directive of the Web page.</source>
          <target state="translated">ASP.NET 신호를 보내는 <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> 에 전달 되는 개체는 <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> 기반으로 취소에 대 한 대리자는 <ph id="ph3">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> 특성에 설정는 <ph id="ph4">`@ Page`</ph> 웹 페이지의 지시문입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>When the <ph id="ph1">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> value has been reached, the <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> object will be signaled.</source>
          <target state="translated">때는 <ph id="ph1">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> 값에 도달는 <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> 개체에 신호로 알려야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
          <source>The <ph id="ph1">`CancellationToken`</ph> parameter must be passed to any asynchronous APIs that are called by your implementation of the <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">`CancellationToken`</ph> 매개 변수는의 구현에 의해 호출 되는 비동기 Api에 전달 되어야 합니다는 <ph id="ph2">&lt;xref:System.Web.TaskEventHandler&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})">
          <source>An event handler.</source>
          <target state="translated">이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using an event handler that enables the task to be handled.</source>
          <target state="translated">작업을 처리할 수 있는 이벤트 처리기를 사용하여 <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">비동기 작업을 시작할 때 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료되면 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료되지 않으면 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The object that represents the state of the task.</source>
          <target state="translated">작업의 상태를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using the default value for executing in parallel.</source>
          <target state="translated">병렬로 실행하기 위한 기본값을 사용하여 <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>This implementation of the constructor sets the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property to <ph id="ph2">`false`</ph> so the asynchronous task is not processed in parallel with other tasks on the page.</source>
          <target state="translated">생성자의이 구현에서 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> 속성을 <ph id="ph2">`false`</ph> 하므로 비동기 작업이 페이지에 있는 다른 작업을 병렬로 처리 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> parameter or <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> parameter is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> 매개 변수 또는 <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> 매개 변수가 지정되지 않은 경우</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The handler to call when beginning an asynchronous task.</source>
          <target state="translated">비동기 작업을 시작할 때 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The handler to call when the task is completed successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료되면 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The handler to call when the task is not completed successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료되지 않으면 호출할 처리기입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The object that represents the state of the task.</source>
          <target state="translated">작업의 상태를 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">작업을 다른 작업과 병렬로 처리할 수 있는지 여부를 나타내는 값입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> class using the specified value for executing in parallel.</source>
          <target state="translated">병렬로 실행하기 위해 지정된 값을 사용하여 <ph id="ph1">&lt;see cref="T:System.Web.UI.PageAsyncTask" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.</source>
          <target state="translated">생성자의이 구현에는 페이지에 있는 다른 작업을 병렬로 처리할을 비동기 작업을 쓸지를 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The following code example creates three asynchronous tasks that are processed in parallel to each other.</source>
          <target state="translated">다음 코드 예제에서는 서로에 대해 병렬로 처리 하는 세 가지 비동기 작업을 만듭니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>This example is part of a larger example found in the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> class overview.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> parameter or <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> parameter is not specified.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="beginHandler" /&gt;</ph> 매개 변수 또는 <ph id="ph2">&lt;paramref name="endHandler" /&gt;</ph> 매개 변수가 지정되지 않은 경우</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>Gets the method to call when beginning an asynchronous task.</source>
          <target state="translated">비동기 작업을 시작할 때 호출할 메서드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>A <ph id="ph1">&lt;see cref="T:System.Web.BeginEventHandler" /&gt;</ph> delegate that represents the method to call when beginning the asynchronous task.</source>
          <target state="translated">비동기 작업을 시작할 때 호출할 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Web.BeginEventHandler" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegate is set in the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> 대리자 생성자에서 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">다음 코드 예제는 세 개의 비동기 작업을 페이지를 등록 하 고 병렬로 실행 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">각 작업 스레드를 5 초 동안 절전 모드를 설정 하면 단지 하는 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.BeginHandler">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegate is specified for each task.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> 각 작업에 대해 대리자를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>Gets the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료되면 호출할 메서드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>An <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> delegate that represents the method to call when the task completes successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료되면 호출할 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegate is set in the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> 대리자 생성자에서 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">다음 코드 예제는 세 개의 비동기 작업을 페이지를 등록 하 고 병렬로 실행 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">각 작업 스레드를 5 초 동안 절전 모드를 설정 하면 단지 하는 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.EndHandler">
          <source>An <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegate is specified for each task.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> 각 작업에 대해 대리자를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>Gets a value that indicates whether the task can be processed in parallel with other tasks.</source>
          <target state="translated">작업을 다른 작업과 병렬로 처리할 수 있는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the task should be processed in parallel with other tasks; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">작업을 다른 작업과 병렬로 처리해야 하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set in the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> 속성은 생성자에서 설정 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>When multiple tasks are registered in a page and the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, then those tasks are processed concurrently.</source>
          <target state="translated">여러 작업이 페이지에 등록 되는 경우와 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> 속성이로 설정 되어 <ph id="ph2">`true`</ph>, 해당 작업을 동시에 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>However, if the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>, then those tasks are processed sequentially.</source>
          <target state="translated">그러나 경우는 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> 속성이 <ph id="ph2">`false`</ph>, 해당 작업은 순차적으로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, both tasks will complete in 5 seconds.</source>
          <target state="translated">예를 들어 페이지에 포함 된 경우 두 개의 비동기 작업이 있는 각 작업은 완료 하려면 5 초가 소요 및 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> 로 설정 된 <ph id="ph2">`true`</ph>, 두 작업 모두 5 초 내에 완료 됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>If <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id="ph2">`false`</ph> for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> 로 설정 된 <ph id="ph2">`false`</ph> 같은 두 개의 태스크, 그런 다음 첫 번째 작업은 5 초 동안 완료 되 고 5 초 후 첫 번째 작업의 완료 된 두 번째 작업은 완료 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>The following code example defines three asynchronous tasks that are each set to be processed in parallel.</source>
          <target state="translated">다음 코드 예제에서는 각 집합을 병렬로 처리할 수 있는 세 가지 비동기 작업을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.ExecuteInParallel">
          <source>This example is part of a larger example found in the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> class overview.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>Gets an object that represents the state of the task.</source>
          <target state="translated">작업의 상태를 나타내는 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the state of the task.</source>
          <target state="translated">작업의 상태를 나타내는 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> property is set in the constructor and cannot be modified during execution of the asynchronous task.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> 속성은 생성자에서 설정 되며 비동기 작업을 실행 하는 동안 수정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> properties.</source>
          <target state="translated">각각의 해당에 고유한 문자열 값을 할당 하 여 페이지에서 비동기 작업을 구분할 수 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>The following code example creates three asynchronous tasks and gives them unique values for their <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> properties.</source>
          <target state="translated">다음 코드 예제에서는 세 가지 비동기 작업을 만들고에 대 한 고유 값을 제공 자신의 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.State">
          <source>This example is part of a larger example found in the <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> class overview.</source>
          <target state="translated">이 예제는에 보다 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> 클래스 개요입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>Gets the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료되지 않으면 호출할 메서드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>An <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> delegate that represents the method to call when the task does not complete successfully within the time-out period.</source>
          <target state="translated">제한 시간 안에 작업이 성공적으로 완료되지 않으면 호출할 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.Web.EndEventHandler" /&gt;</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegate is set in the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> 대리자 생성자에서 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>The following code example registers three asynchronous tasks to a page and executes them in parallel.</source>
          <target state="translated">다음 코드 예제는 세 개의 비동기 작업을 페이지를 등록 하 고 병렬로 실행 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>Each task calls a method that merely causes the thread to sleep for 5 seconds.</source>
          <target state="translated">각 작업 스레드를 5 초 동안 절전 모드를 설정 하면 단지 하는 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.UI.PageAsyncTask.TimeoutHandler">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegate is specified for each task.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> 각 작업에 대해 대리자를 지정 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>