<Namespace Name="System.Transactions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a83da32e9ec83409db92b8a18c86064866875271" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="05/10/2018" />
    <Meta Name="ms.locfileid" Value="30736167" />
  </Metadata>
  <Docs>
    <summary>
      <see cref="N:System.Transactions" /> 네임스페이스에는 트랜잭션 응용 프로그램과 리소스 관리자를 쓰는 데 사용할 수 있는 클래스가 포함되어 있습니다. 특히 참가자가 하나 이상인 트랜잭션(로컬 또는 분산)을 만들고 참가할 수 있습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Windows 2000, Windows XP 및 Windows 2003 플랫폼에서이 네임 스페이스를 사용 하 여 응용 프로그램에만 만들 수 있습니다. Windows 98 및 Windows ME 플랫폼 throw 하에서 트랜잭션을 만드는 <xref:System.PlatformNotSupportedException> 합니다.  
  
 <xref:System.Transactions> 인프라 트랜잭션에 사용할 수 있도록 프로그래밍 간단 하 고 플랫폼 전체에서 효율적인 SQL Server, ADO.NET, MSMQ, 및의 Microsoft Distributed Transaction Coordinator (MSDTC)에서 시작한 트랜잭션을 지원 합니다. 모두는 명시적인 프로그래밍 모델을 기반으로 제공는 <xref:System.Transactions.Transaction> 사용 하는 암시적 프로그래밍 모델 뿐 아니라 클래스는 <xref:System.Transactions.TransactionScope> 트랜잭션을 관리 하는 자동으로 인프라에 의해 클래스입니다. 개발을 위한 편리한 암시적 모델을 사용 하는 것이 좋습니다. 시작 하려면를 참조 하십시오는 [구현 하는 암시적 트랜잭션을 사용 하 여 트랜잭션 범위](http://msdn.microsoft.com/library/1ddba95e-7587-48b2-8838-708c275e7199) 항목입니다. 트랜잭션 응용 프로그램 작성 방법에 대 한 자세한 내용은 다음을 참조 하세요.  
  
 <xref:System.Transactions> 또한 리소스 관리자를 구현 하기 위한 형식을 제공 합니다. 기본 트랜잭션 관리자는 <xref:System.Transactions> 리소스나는 단일 리소스 인 리스트 먼 커밋하거나 롤백할 효율적으로 인프라를 사용 하면 됩니다. 리소스 관리자 구현에 대 한 자세한 내용은 참조 하십시오. [A 리소스 관리자 구현](http://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)합니다.  
  
 트랜잭션 관리자는 또한 투명 하 게 된 내구성이 있는 추가 리소스 관리자는 트랜잭션을 사용 하 여 트랜잭션에 참여 하는 경우에 DTC와 같은 디스크 기반 트랜잭션 관리자를 통해 조정 하 여 로컬 트랜잭션이 분산된 트랜잭션으로 에스컬레이션 합니다. <xref:System.Transactions> 인프라에서 성능을 향상시키는 두 가지 주요 방법은 다음과 같습니다.  
  
-   즉 동적 에스컬레이션은 <xref:System.Transactions> 인프라만에서 msdtc 트랜잭션에 대 한 실제로 필요한 경우. 이 영역에에서 대해서는 [트랜잭션 관리 에스컬레이션](http://msdn.microsoft.com/library/5b87ae58-8ccf-4b9b-9715-41e4aade89b7) 항목입니다.  
  
-   데이터베이스 등의 리소스가 트랜잭션에 참가한 유일한 엔터티인 경우 트랜잭션을 소유할 수 있게 해 주는 승격 가능한 인리스트먼트입니다. 나중에 필요한 경우는 <xref:System.Transactions> 인프라 msdtc 트랜잭션 관리를 에스컬레이션할 수 있습니다. 이 방법을 사용하면 MSDTC를 사용할 가능성이 더 줄어듭니다. 이 영역에에서 대해서는 [최적화를 사용 하 여 단일 단계 커밋 및 승격 가능한 단일 단계 알림](http://msdn.microsoft.com/library/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb) 항목입니다.  
  
 <xref:System.Transactions> 노출 하는 리소스의 형식에 대 한 액세스를 제한 하는 세 가지 신뢰 수준을 정의 합니다. 특히,는 <xref:System.Transactions> 으로 표시 하는 대로 부분적으로 신뢰할 수 있는 코드에서 어셈블리를 호출할 수 있습니다는 `AllowPartiallyTrustedCallers` 특성 (APTCA). 이 특성은 각 형식의 공개적으로 액세스 가능한 각 메서드에 자동으로 배치될 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 권한 집합에 대한 암시적 `FullTrust`를 제거합니다. 그러나 일부 형식과 멤버에는 더 강력한 권한이 필요합니다.  
  
 다음은 형식의 목록 및 부분적으로에서 호출할 수 없는 멤버에 신뢰할 수 있는 코드는 다음과 같은 선언적 보안 특성으로 데코레이팅되기 때문에:  
  
 `PermissionSetAttribute(SecurityAction.LinkDemand, Name := "FullTrust")`  
  
 System.Transactions.Transaction.EnlistDurable  
  
 System.Transactions.Transaction.EnlistPromotableSinglePhase  
  
 System.Transactions.TransactionInterop  
  
 System.Transactions.TransactionManager.DistributedTransactionStarted  
  
 System.Transactions.TransactionManager.HostCurrentTransactionCallback  
  
 System.Transactions.TransactionManager.Reenlist  
  
 System.Transactions.TransactionManager.RecoveryComplete  
  
 System.Transactions.TransactionScope.TransactionScope (System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)  
  
 M:System.Transactions.TransactionScope.TransactionScope(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)  
  
 다양 한 대 한 자세한 내용은 신뢰 수준, 참조 [리소스 액세스에서 보안 신뢰 수준을](http://msdn.microsoft.com/library/8e45acbc-0d81-4f64-9da7-8f766aebff51)합니다.  
  
 코어 개발 기술 \ 데이터 액세스 \ 트랜잭션 처리 \  
  
 사용 하는 방법에 대 한 자세한 내용은 <xref:System.Transactions> 네임 스페이스 개념 설명서를 참조할 수 있습니다 [트랜잭션 처리](http://msdn.microsoft.com/library/ac1637bf-4032-493b-a4e8-0380e54f82f9)"코어 개발 기술 \ 데이터 액세스 처리아래에있는\\"설명서의 섹션입니다. 구체적으로, 다음 항목의 자세한 정보를 찾을 수 있습니다.  
  
 [System.Transactions에 의해 제공 하는 기능](http://msdn.microsoft.com/library/99cc5ce0-b7fd-4d78-a553-a3dd3f17ed45)  
  
 [리소스 관리자 구현](http://msdn.microsoft.com/library/81509719-d579-4530-831e-42e1acdef63e)  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>