<Type Name="ConventionBuilder" FullName="System.Composition.Convention.ConventionBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7545d9d8f4b9ced7113961c896a7126e098e2446" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36699820" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConventionBuilder : System.Composition.Convention.AttributedModelProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConventionBuilder extends System.Composition.Convention.AttributedModelProvider" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Convention.ConventionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ConventionBuilder&#xA;Inherits AttributedModelProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConventionBuilder : System::Composition::Convention::AttributedModelProvider" />
  <TypeSignature Language="F#" Value="type ConventionBuilder = class&#xA;    inherit AttributedModelProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Convention</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Composition.Convention.AttributedModelProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="71461-101">MEF(Managed Extensibility Framework) 파트로 CLR 개체를 정의하는 규칙을 만들고 구성하기 위한 메서드를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="71461-101">Provides methods for creating and configuring rules to define CLR objects as Managed Extensibility Framework (MEF) parts.</span>
      </span>
    </summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConventionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ConventionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConventionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="71461-102">
            <see cref="T:System.Composition.Convention.ConventionBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-102">Initializes a new instance of the <see cref="T:System.Composition.Convention.ConventionBuilder" /> class.</span>
          </span>
        </summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ForType">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ForType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ForType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ConventionBuilder.ForType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ForType(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.ForType : Type -&gt; System.Composition.Convention.PartConventionBuilder" Usage="conventionBuilder.ForType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="71461-103">형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-103">The type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71461-104">지정된 형식에 적용되는 규칙을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-104">Creates a rule that applies to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71461-105">규칙을 추가 구성하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-105">An object that can be used to further configure the rule.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ForType&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ForType&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!!T&gt; ForType&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ConventionBuilder.ForType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function ForType(Of T) () As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ForType();" />
      <MemberSignature Language="F#" Value="member this.ForType : unit -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="conventionBuilder.ForType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="71461-106">제네릭 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-106">The generic type.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="71461-107">지정된 제네릭 형식에 적용되는 규칙을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-107">Creates a rule that applies to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71461-108">규칙을 추가 구성하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-108">An object that can be used to further configure the rule.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ForTypesDerivedFrom">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ForTypesDerivedFrom (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ForTypesDerivedFrom(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ConventionBuilder.ForTypesDerivedFrom(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ForTypesDerivedFrom(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.ForTypesDerivedFrom : Type -&gt; System.Composition.Convention.PartConventionBuilder" Usage="conventionBuilder.ForTypesDerivedFrom type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="71461-109">형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-109">The type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71461-110">지정된 형식을 구현하거나 지정된 형식에서 파생된 모든 형식에 적용되는 규칙을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-110">Creates a rule that applies to all types that implement, or are derived from, the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71461-111">규칙을 추가 구성하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-111">An object that can be used to further configure the rule.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ForTypesDerivedFrom&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ForTypesDerivedFrom&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!!T&gt; ForTypesDerivedFrom&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ConventionBuilder.ForTypesDerivedFrom``1" />
      <MemberSignature Language="VB.NET" Value="Public Function ForTypesDerivedFrom(Of T) () As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ForTypesDerivedFrom();" />
      <MemberSignature Language="F#" Value="member this.ForTypesDerivedFrom : unit -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="conventionBuilder.ForTypesDerivedFrom " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="71461-112">제네릭 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-112">The generic type.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="71461-113">지정된 제네릭 형식을 구현하거나 지정된 제네릭 형식에서 파생된 모든 형식에 적용되는 규칙을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-113">Creates a rule that applies to all types that implement, or are derived from, the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71461-114">규칙을 추가 구성하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-114">An object that can be used to further configure the rule.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ForTypesMatching">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder ForTypesMatching (Predicate&lt;Type&gt; typeFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder ForTypesMatching(class System.Predicate`1&lt;class System.Type&gt; typeFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ConventionBuilder.ForTypesMatching(System.Predicate{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Function ForTypesMatching (typeFilter As Predicate(Of Type)) As PartConventionBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Convention::PartConventionBuilder ^ ForTypesMatching(Predicate&lt;Type ^&gt; ^ typeFilter);" />
      <MemberSignature Language="F#" Value="member this.ForTypesMatching : Predicate&lt;Type&gt; -&gt; System.Composition.Convention.PartConventionBuilder" Usage="conventionBuilder.ForTypesMatching typeFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeFilter" Type="System.Predicate&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeFilter">
          <span data-ttu-id="71461-115">일치할 조건자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-115">The predicate to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71461-116">지정된 조건자와 일치하는 형식에 적용되는 규칙을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-116">Creates a rule that applies to types that match the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71461-117">규칙을 추가 구성하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-117">An object that can be used to further configure the rule.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ForTypesMatching&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Composition.Convention.PartConventionBuilder&lt;T&gt; ForTypesMatching&lt;T&gt; (Predicate&lt;Type&gt; typeFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Convention.PartConventionBuilder`1&lt;!!T&gt; ForTypesMatching&lt;T&gt;(class System.Predicate`1&lt;class System.Type&gt; typeFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ConventionBuilder.ForTypesMatching``1(System.Predicate{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Function ForTypesMatching(Of T) (typeFilter As Predicate(Of Type)) As PartConventionBuilder(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Composition::Convention::PartConventionBuilder&lt;T&gt; ^ ForTypesMatching(Predicate&lt;Type ^&gt; ^ typeFilter);" />
      <MemberSignature Language="F#" Value="member this.ForTypesMatching : Predicate&lt;Type&gt; -&gt; System.Composition.Convention.PartConventionBuilder&lt;'T&gt;" Usage="conventionBuilder.ForTypesMatching typeFilter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Convention.PartConventionBuilder&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="typeFilter" Type="System.Predicate&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="71461-118">일치시킬 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-118">The type to match.</span>
          </span>
        </typeparam>
        <param name="typeFilter">
          <span data-ttu-id="71461-119">일치할 조건자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-119">The predicate to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71461-120">지정된 조건자 및 제네릭 형식과 일치하는 형식에 적용되는 규칙을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-120">Creates a rule that applies to types that match the specified predicate and generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71461-121">규칙을 추가 구성하는 데 사용할 수 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-121">An object that can be used to further configure the rule.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (Type reflectedType, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Type reflectedType, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ConventionBuilder.GetCustomAttributes(System.Type,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (reflectedType As Type, member As MemberInfo) As IEnumerable(Of Attribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;Attribute ^&gt; ^ GetCustomAttributes(Type ^ reflectedType, System::Reflection::MemberInfo ^ member);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * System.Reflection.MemberInfo -&gt; seq&lt;Attribute&gt;" Usage="conventionBuilder.GetCustomAttributes (reflectedType, member)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reflectedType" Type="System.Type" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="reflectedType">
          <span data-ttu-id="71461-122">형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-122">The type.</span>
          </span>
        </param>
        <param name="member">
          <span data-ttu-id="71461-123">검사할 멤버입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-123">The member to inspect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71461-124">지정된 형식의 지정된 멤버에 적용된 사용자 지정 특성 목록을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-124">Retrieves the list of custom attributes applied to the specified member of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71461-125">사용자 지정 특성 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-125">A collection of custom attributes.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (Type reflectedType, System.Reflection.ParameterInfo parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Type reflectedType, class System.Reflection.ParameterInfo parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Convention.ConventionBuilder.GetCustomAttributes(System.Type,System.Reflection.ParameterInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (reflectedType As Type, parameter As ParameterInfo) As IEnumerable(Of Attribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;Attribute ^&gt; ^ GetCustomAttributes(Type ^ reflectedType, System::Reflection::ParameterInfo ^ parameter);" />
      <MemberSignature Language="F#" Value="override this.GetCustomAttributes : Type * System.Reflection.ParameterInfo -&gt; seq&lt;Attribute&gt;" Usage="conventionBuilder.GetCustomAttributes (reflectedType, parameter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Convention</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reflectedType" Type="System.Type" />
        <Parameter Name="parameter" Type="System.Reflection.ParameterInfo" />
      </Parameters>
      <Docs>
        <param name="reflectedType">
          <span data-ttu-id="71461-126">형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-126">The type.</span>
          </span>
        </param>
        <param name="parameter">
          <span data-ttu-id="71461-127">검사할 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-127">The parameter to inspect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="71461-128">지정된 형식의 지정된 매개 변수에 적용된 사용자 지정 특성 목록을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-128">Retrieves the list of custom attributes applied to the specified parameter of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="71461-129">사용자 지정 특성 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="71461-129">A collection of custom attributes.</span>
          </span>
        </returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>