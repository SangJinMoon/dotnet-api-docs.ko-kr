<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DesignSurfaceManager.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c135a4e8156bfd925bea508991b3701370925168.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c135a4e8156bfd925bea508991b3701370925168</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>Manages a collection of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurface" /&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurface" /&gt;</ph> 개체의 컬렉션을 관리합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> class is designed to be a container of <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurface&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> 클래스에는 컨테이너의 만들어져 <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurface&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>It provides common services that handle event routing between designers, property windows, and other global objects.</source>
          <target state="translated">해당 핸들 이벤트 라우팅 디자이너, 속성 창 및 다른 전역 개체 간의 공통 서비스 제공 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>Using <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> is optional, but it is recommended if you intend to have several designer windows.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> 은 선택 사항 이지만 디자이너 창을 몇 개를 가져오려는 경우 것이 좋습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> class provides several design-time services automatically.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> 클래스는 몇 가지 디자인 타임 서비스를 자동으로 제공 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>You can override each of these services by replacing them in the protected <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;</ph> property.</source>
          <target state="translated">보호 된 대체 하 여 이러한 각 서비스를 재정의할 수 있습니다 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>To replace a service, override the constructor, call base, and make any changes through the protected <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;</ph> property.</source>
          <target state="translated">서비스를 대체 하려면 생성자를 재정의 기본 고 변경 내용을 통해 보호 된 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>All services added to the service container that implement the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface are disposed when the design surface manager is disposed.</source>
          <target state="translated">구현 하는 서비스 컨테이너에 추가 된 모든 서비스는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 디자인 화면 관리자가 삭제 될 때 삭제 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> class provides the <ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph> interface as the default service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> 클래스를 제공는 <ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph> 기본 서비스와 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph> provides a global eventing mechanism for designer events.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph> 디자이너 이벤트에 대 한 전역 이벤트 메커니즘을 제공합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>With this mechanism, an application is informed when a designer becomes active.</source>
          <target state="translated">이 메커니즘을 응용 프로그램 디자이너 활성화 될 때 내용 알림이 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>The service provides a collection of designers and a single place where global objects, such as the Properties window, can monitor selection change events.</source>
          <target state="translated">서비스는 디자이너의 컬렉션 및 속성 창과 같은 전역 개체 선택 영역을 모니터링할 수를 한 위치 변경 이벤트를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>for full access to system resources.</source>
          <target state="translated">시스템 리소스에 대 한 전체 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>Demand values: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>.</source>
          <target state="translated">요청 값: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>, <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>Associated state:</source>
          <target state="translated">연결 된 상태:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.#ctor(System.IServiceProvider)">
          <source>A parent service provider.</source>
          <target state="translated">부모 서비스 공급자입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.#ctor(System.IServiceProvider)">
          <source>Service requests are forwarded to this provider if they cannot be resolved by the design surface manager.</source>
          <target state="translated">디자인 화면 관리자가 서비스 요청을 확인할 수 없을 경우 이 공급자로 서비스 요청이 전달됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.#ctor(System.IServiceProvider)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface">
          <source>Gets or sets the active designer.</source>
          <target state="translated">활성화된 디자이너를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface">
          <source>The active designer.</source>
          <target state="translated">활성화된 디자이너입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface%2A&gt;</ph> property should be set by the designer's user interface whenever a designer becomes the active window.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface%2A&gt;</ph> 디자이너의 활성 창 될 때마다 디자이너의 사용자 인터페이스에서 속성을 설정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface">
          <source>The default implementation of this property works with the default implementation of the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph> interface to notify interested parties that a new designer is now active.</source>
          <target state="translated">이 속성의 기본 구현은 작동의 기본 구현에서 <ph id="ph1">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph> 새로운 디자이너 활성화 되어 이제 관계 당사자에 알리는 인터페이스를 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface">
          <source>If you provide your own implementation of <ph id="ph1">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph>, you should override this property to notify your service appropriately.</source>
          <target state="translated">사용자 지정 구현을 제공 하는 경우 <ph id="ph1">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph>를 적절 하 게 서비스를 알리기 위해이 속성을 재정의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface">
          <source>This property can be set to <ph id="ph1">`null`</ph>, indicating that no designer is active.</source>
          <target state="translated">이 속성 설정할 수 있습니다 <ph id="ph1">`null`</ph>, 디자이너가 활성화 된 의미 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged">
          <source>Occurs when the currently active designer changes.</source>
          <target state="translated">현재 활성 디자이너가 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>Creates an instance of a design surface.</source>
          <target state="translated">디자인 화면의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface">
          <source>Creates an instance of a design surface.</source>
          <target state="translated">디자인 화면의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface">
          <source>A new design surface instance.</source>
          <target state="translated">새로운 디자인 화면 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>A parent service provider.</source>
          <target state="translated">부모 서비스 공급자입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>A new merged service provider will be created that will first ask this provider for a service, and then delegate any failures to the design surface manager object.</source>
          <target state="translated">먼저 이 공급자에게 서비스를 요청한 후 디자인 화면 관리자 개체에 오류를 위임하는 병합된 서비스 공급자가 새로 만들어집니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>This merged provider will be passed into the <ph id="ph1">&lt;see cref="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)" /&gt;</ph> method.</source>
          <target state="translated">이 병합된 공급자는 <ph id="ph1">&lt;see cref="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)" /&gt;</ph> 메서드에 전달됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>Creates an instance of a design surface.</source>
          <target state="translated">디자인 화면의 인스턴스를 만듭니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>A new design surface instance.</source>
          <target state="translated">새로운 디자인 화면 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>If you want to conveniently add additional per-designer services, use the <ph id="ph1">`parentProvider`</ph> parameter to provide a service provider for this design surface.</source>
          <target state="translated">사용 하 여 편리 하 게 디자이너 당 추가 서비스를 추가 하려는 경우는 <ph id="ph1">`parentProvider`</ph> 매개 변수를이 디자인 화면에 대 한 서비스 공급자를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> method creates a merged service provider that can satisfy service requests from both the given service provider as well as the <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> itself.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> 메서드는 지정 된 서비스 공급자의 서비스 요청을 충족 시킬 수 있는 병합 된 서비스 공급자를 만듭니다으로 <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> 자체입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> method then passes this service provider into the <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> 메서드는 다음이 서비스 공급자에 전달 된 <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>After <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;</ph> returns the design surface, the <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> method tries to obtain the <ph id="ph3">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph>.</source>
          <target state="translated">후 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;</ph> 디자인 화면 반환는 <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> 을 가져오려고 시도 메서드는 <ph id="ph3">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>If it is present, and if it is the instance of the service that <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> provided by default, the <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> method raises the <ph id="ph3">&lt;xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&gt;</ph> event.</source>
          <target state="translated">가 존재 하 고 서비스의 인스턴스인 경우는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> 기본적으로 제공 되는 <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> 메서드를 발생 시킵니다는 <ph id="ph3">&lt;xref:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source><ph id="ph1">&lt;paramref name="parentProvider" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="parentProvider" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
          <source>If an external implementation of the service was provided, it is the responsibility of the class that derives from the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> class to raise the <ph id="ph2">&lt;see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /&gt;</ph> event.</source>
          <target state="translated">클래스에서 파생 되는 작업은 서비스의 외부 구현 제공 된 경우는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> 를 발생 시키는 클래스는 <ph id="ph2">&lt;see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)">
          <source>A service provider to pass to the design surface.</source>
          <target state="translated">디자인 화면에 전달할 서비스 공급자입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)">
          <source>This is either an instance of <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> or an object that implements <ph id="ph2">&lt;see cref="T:System.IServiceProvider" /&gt;</ph>, and represents a merge between the service provider of the <ph id="ph3">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> class and an externally passed provider.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph>의 인스턴스이거나 <ph id="ph2">&lt;see cref="T:System.IServiceProvider" /&gt;</ph>를 구현하는 개체이며, <ph id="ph3">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> 클래스의 서비스 공급자와 외부에서 전달된 공급자 사이의 병합을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)">
          <source>Implementation that creates the design surface.</source>
          <target state="translated">디자인 화면을 만드는 구현입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)">
          <source>A new design surface instance.</source>
          <target state="translated">새로운 디자인 화면 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;</ph> method is called by both <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore%2A&gt;</ph> 메서드는 둘 다 <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)">
          <source>It is the implementation that actually creates the design surface.</source>
          <target state="translated">그 구현은 실제로 디자인 화면을 만듭니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)">
          <source>The default implementation just returns a new <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurface&gt;</ph>.</source>
          <target state="translated">기본 구현은 반환 새 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurface&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)">
          <source>You may override this method to provide a custom object that derives from the <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurface&gt;</ph> class.</source>
          <target state="translated">파생 되는 사용자 지정 개체를 제공 하려면이 메서드를 재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurface&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceCreated">
          <source>Occurs when a designer is created.</source>
          <target state="translated">디자이너가 만들어지면 발생합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceDisposed">
          <source>Occurs when a designer is disposed.</source>
          <target state="translated">디자이너가 삭제되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces">
          <source>Gets a collection of design surfaces.</source>
          <target state="translated">디자인 화면 컬렉션을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces">
          <source>A collection of design surfaces that are currently hosted by the design surface manager.</source>
          <target state="translated">현재 디자인 화면 관리자에서 호스팅하는 디자인 화면 컬렉션입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces%2A&gt;</ph> property is implemented directly on top of <ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph>, so if you provide your own implementation of that service, this property uses your implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces%2A&gt;</ph> 속성은 맨 위에서 직접 구현 <ph id="ph2">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph>있으므로 해당 서비스의 사용자 지정 구현을 제공 하는 경우이 속성 구현을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.DesignSurfaceManager">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph>에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph>에서 사용하는 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose">
          <source>The public <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph> method follows the standard <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> pattern.</source>
          <target state="translated">공용 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph> 메서드 표준을 따르는 <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> 패턴입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose">
          <source>Calling this method destroys the design surface manager.</source>
          <target state="translated">디자인 화면 관리자를 제거이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose">
          <source>It also disposes the service container, which causes all services that implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> to also be disposed.</source>
          <target state="translated">구현 하는 모든 서비스는 서비스 컨테이너 삭제 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 도 삭제 해야 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose">
          <source>The protected version of this method is <ph id="ph1">`virtual`</ph> and follows the normal <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> pattern.</source>
          <target state="translated">이 방법의 보호 된 버전은 <ph id="ph1">`virtual`</ph> 수직 따르는 <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> 패턴입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose">
          <source>Because <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> does not have any native code to clean up, it does not have a finalizer that calls <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph>.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> 정리, 네이티브 코드가 없는 없는 종료자를 호출 하는 <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose">
          <source>If you need to call <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph>, you must add a finalizer yourself.</source>
          <target state="translated">호출 해야 하는 경우 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph>, 종료자를 직접 추가 해야 합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>로 설정하고, 관리되지 않는 리소스만 해제하려면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>로 설정합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph>에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>The public <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph> method follows the standard <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> pattern.</source>
          <target state="translated">공용 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph> 메서드 표준을 따르는 <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> 패턴입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>Calling this method destroys the design surface manager.</source>
          <target state="translated">디자인 화면 관리자를 제거이 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>It also disposes the service container, which causes all services that implement <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> to also be disposed.</source>
          <target state="translated">구현 하는 모든 서비스는 서비스 컨테이너 삭제 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 도 삭제 해야 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>The protected version of this method is <ph id="ph1">`virtual`</ph> and follows the normal <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> pattern.</source>
          <target state="translated">이 방법의 보호 된 버전은 <ph id="ph1">`virtual`</ph> 수직 따르는 <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> 패턴입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>Because <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> does not have any native code to clean up, it does not have a finalizer that calls <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph>.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> 정리, 네이티브 코드가 없는 없는 종료자를 호출 하는 <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>If you need to call <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph>, you must add a finalizer yourself.</source>
          <target state="translated">호출 해야 하는 경우 <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.Dispose%2A&gt;</ph>, 종료자를 직접 추가 해야 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">이 메서드는 public <ph id="ph1">`Dispose()`</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> 보호 된 호출 <ph id="ph2">`Dispose(Boolean)`</ph> 메서드는 <ph id="ph3">`disposing`</ph> 매개 변수 설정 <ph id="ph4">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> 호출 <ph id="ph2">`Dispose`</ph> 와 <ph id="ph3">`disposing`</ph> 로 설정 <ph id="ph4">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> references.</source>
          <target state="translated">경우는 <ph id="ph1">`disposing`</ph> 매개 변수가 true 이면이 메서드는 관리 개체가 보유 하는 모든 리소스를 해제 합니다.이 <ph id="ph2">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager&gt;</ph> 참조 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">이 메서드는 참조되는 각 개체의 <ph id="ph1">`Dispose()`</ph> 메서드를 호출합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>는 다른 개체에서 여러 번 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">구현 하는 방법에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>Dispose 메서드를 구현<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">에 대 한 자세한 내용은 <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> 및 <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> 및 <bpt id="p2">[</bpt>Finalize 메서드를 재정의<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.GetService(System.Type)">
          <source>The service type to retrieve.</source>
          <target state="translated">검색할 서비스 형식입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.GetService(System.Type)">
          <source>Gets a service in the design surface manager’s service container.</source>
          <target state="translated">디자인 화면 관리자의 서비스 컨테이너에 있는 서비스를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.DesignSurfaceManager.GetService(System.Type)">
          <source>An object that implements, or is a derived class of, the given service type; otherwise, <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the service does not exist in the service container.</source>
          <target state="translated">제공된 서비스 형식을 구현하거나 이 서비스 형식의 파생 클래스인 개체입니다. 서비스 컨테이너에 서비스가 없으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.DesignSurfaceManager.GetService(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.GetService%2A&gt;</ph> method forwards to any service provider that was given to the design surface manager at construction time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.DesignSurfaceManager.GetService%2A&gt;</ph> 메서드 생성 시 디자인 화면 관리자에 게 제공한 서비스 공급자를 전달 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="E:System.ComponentModel.Design.DesignSurfaceManager.SelectionChanged">
          <source>Occurs when the global selection changes.</source>
          <target state="translated">전역 선택이 변경되면 발생합니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.Design.DesignSurfaceManager.SelectionChanged">
          <source>This event is raised when the active designer's selection of component set changes.</source>
          <target state="translated">이 이벤트는 구성 요소의 활성 디자이너의 선택 집합을 변경 하는 경우에 발생 합니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.ComponentModel.Design.DesignSurfaceManager.SelectionChanged">
          <source>This is mapped through the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph> interface.</source>
          <target state="translated">통해 매핑됩니다는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.IDesignerEventService&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer">
          <source>Gets the design surface manager's <ph id="ph1">&lt;see cref="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer" /&gt;</ph>.</source>
          <target state="translated">디자인 화면 관리자의 <ph id="ph1">&lt;see cref="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer">
          <source>The design surface manager's <ph id="ph1">&lt;see cref="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer" /&gt;</ph>.</source>
          <target state="translated">디자인 화면 관리자의 <ph id="ph1">&lt;see cref="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer">
          <source>Classes inheriting from the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> class can use this property to add and remove services.</source>
          <target state="translated">클래스에서 상속 하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /&gt;</ph> 클래스가이 속성을 사용 하 여 추가 하 고 서비스를 제거할 수 있습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>