<Type Name="IDesignerFilter" FullName="System.ComponentModel.Design.IDesignerFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2dbad6fdfb09f4fc16d8d85beafb69dfaa4f5eea" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37696282" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDesignerFilter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerFilter" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IDesignerFilter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerFilter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerFilter" />
  <TypeSignature Language="F#" Value="type IDesignerFilter = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="7ad0e-101">구성 요소 디자이너에서 디자인 타임 환경에 노출될 수 있는 속성, 특성 및 이벤트 설명자가 저장되어 있는 <see cref="T:System.ComponentModel.TypeDescriptor" />의 사전을 디자이너에서 액세스하고 필터링할 수 있도록 인터페이스를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7ad0e-101">Provides an interface that enables a designer to access and filter the dictionaries of a <see cref="T:System.ComponentModel.TypeDescriptor" /> that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ad0e-102"><xref:System.ComponentModel.Design.IDesignerFilter> 연결 된 해당 구성 요소를 통해 노출 하는 속성, 특성 및 이벤트 설명자의 집합을 필터링 하려면 디자이너를 사용 하도록 설정 된 <xref:System.ComponentModel.TypeDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-102"><xref:System.ComponentModel.Design.IDesignerFilter> enables a designer to filter the set of property, attribute, and event descriptors that its associated component exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span> <span data-ttu-id="7ad0e-103">이 인터페이스의 메서드 이름이 시작 `Pre` 로 시작 하는 이름이 메서드 직전에 호출 됩니다 `Post`합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-103">The methods of this interface whose names begin with `Pre` are called immediately before the methods whose names begin with `Post`.</span></span>  
  
 <span data-ttu-id="7ad0e-104">특성, 이벤트 또는 속성 설명자를 추가 하려는 경우 사용 된 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, 또는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-104">If you want to add attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> method.</span></span>  
  
 <span data-ttu-id="7ad0e-105">변경 하거나 특성, 이벤트 또는 속성 설명자를 사용 하 여 제거 하려는 경우는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, 또는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-105">If you want to change or remove attribute, event, or property descriptors, use a <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, or <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ad0e-106">다음 예제에서는 재정의 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> 디자인 타임에 디자이너의 컨트롤을 선택할 때 속성 창에 디자이너의 속성을 추가 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-106">The following example demonstrates an override of <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> that adds a property of the designer to the Properties window when the designer's control is selected at design time.</span></span> <span data-ttu-id="7ad0e-107">예를 참조 하세요 합니다 <xref:System.Windows.Forms.Design.ControlDesigner> 클래스를 사용 하는 디자이너 전체 예제는 <xref:System.ComponentModel.Design.IDesignerFilter> 인터페이스.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-107">See the example for the <xref:System.Windows.Forms.Design.ControlDesigner> class for a complete designer example that uses the <xref:System.ComponentModel.Design.IDesignerFilter> interface.</span></span>  
  
 [!code-cpp[ControlDesignerExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlDesignerExample/CPP/controldesignerexample.cpp#2)]
 [!code-csharp[ControlDesignerExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlDesignerExample/CS/controldesignerexample.cs#2)]
 [!code-vb[ControlDesignerExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlDesignerExample/VB/controldesignerexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
  </Docs>
  <Members>
    <Member MemberName="PostFilterAttributes">
      <MemberSignature Language="C#" Value="public void PostFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="7ad0e-108">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-108">The <see cref="T:System.Attribute" /> objects for the class of the component.</span>
          </span>
          <span data-ttu-id="7ad0e-109">특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-109">The keys in the dictionary of attributes are the <see cref="P:System.Attribute.TypeId" /> values of the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ad0e-110">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에서 항목을 변경하거나 제거할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-110">When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ad0e-111">이 방법을 통해이 인터페이스를 구현 하는 디자이너의 연결된 된 구성 요소 노출 되는 특성의 사전 내에서 항목을 변경 하거나 제거할 수 있습니다는 <xref:System.ComponentModel.TypeDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-111">This method provides a way to change or remove items within the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="7ad0e-112">특성의 사전에 키는 특성의 형식 Id입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-112">The keys in the dictionary of attributes are the type IDs of the attributes.</span></span> <span data-ttu-id="7ad0e-113">형식의 개체는 <xref:System.Attribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-113">The objects are of type <xref:System.Attribute>.</span></span> <span data-ttu-id="7ad0e-114">바로 뒤에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-114">This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>.</span></span>  
  
 <span data-ttu-id="7ad0e-115">특성의 형식 ID에는 임의의 개체가 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-115">The type ID of an attribute can be any object.</span></span> <span data-ttu-id="7ad0e-116">기본적으로 <xref:System.Attribute> 반환 해당 <xref:System.Type> 값으로 해당 <xref:System.Attribute.TypeId%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-116">By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property.</span></span> <span data-ttu-id="7ad0e-117">확인할 수 있습니다 합니다 <xref:System.Attribute.TypeId%2A> 알려진을 사용 하 여 동등성에 대 한 사전에 있는 특성의 <xref:System.Attribute.TypeId%2A> 특성을 식별 하거나, 사용에 대 한 <xref:System.Reflection> 자체 특성 개체를 식별 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-117">You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.</span></span>  
  
 <span data-ttu-id="7ad0e-118">동일한 특성 <xref:System.Attribute.TypeId%2A> 새 특성이 이전 특성을 대체 기존 또는 상속 된 특성은 구성 요소에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-118">When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute.</span></span> <span data-ttu-id="7ad0e-119">많은 특성에 대 한 동일한 유형의 새 특성을 유형의 모든 이전 특성을 바뀝니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-119">For many attributes, a new attribute of the same type will replace any previous attribute of the type.</span></span> <span data-ttu-id="7ad0e-120">그러나 일부 유형의 특성을 반환할는 <xref:System.Attribute.TypeId%2A> 특성을 선택적으로 구별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-120">However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively.</span></span> <span data-ttu-id="7ad0e-121">예를 들어, 형식의 경우와 같은 다양 한 유형의 동시에 활성 디자이너를 제공 하기 위해는 <xref:System.ComponentModel.Design.IRootDesigner> 와 <xref:System.ComponentModel.Design.IDesigner>의 <xref:System.ComponentModel.DesignerAttribute> 반환 클래스는 <xref:System.Attribute.TypeId%2A> 고유 하 게 식별 하는 특성 및 기본 디자이너 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-121">For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type.</span></span> <span data-ttu-id="7ad0e-122">합니다 <xref:System.ComponentModel.DesignerAttribute> 생성자를 사용 하면 해당 특정 형식 외에도 디자이너의 디자이너 기본 형식을 지정할 수 있습니다 및 <xref:System.ComponentModel.DesignerAttribute> 반환을 <xref:System.Attribute.TypeId%2A> 이 반영 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-122">The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this.</span></span> <span data-ttu-id="7ad0e-123">따라서 추가 하면 새 <xref:System.ComponentModel.DesignerAttribute> 기존 기본 디자이너 유형으로 동일한 형식의 기본 디자이너 형식과 <xref:System.ComponentModel.DesignerAttribute>, 이전 특성을 새 특성으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-123">Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="7ad0e-124">
            <para>직접을 통해 액세스할 수 있는 사전 필터링는 <paramref name="attributes" /> 하거나 매개 변수를 그대로 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-124">
              <para>You can directly filter the dictionary that is accessible through the <paramref name="attributes" /> parameter, or you can leave it unchanged. If you are overriding this method, call the base implementation after you perform your own filtering.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterEvents">
      <MemberSignature Language="C#" Value="public void PostFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">
          <span data-ttu-id="7ad0e-125">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-125">The <see cref="T:System.ComponentModel.EventDescriptor" /> objects that represent the events of the class of the component.</span>
          </span>
          <span data-ttu-id="7ad0e-126">이벤트의 사전에 포함된 키는 이벤트 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-126">The keys in the dictionary of events are event names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ad0e-127">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에서 항목을 변경하거나 제거하도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-127">When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ad0e-128">이 방법을 통해 노출 되는 이벤트의 사전 내에서 항목을 변경 하거나 제거할 수 있습니다는 <xref:System.ComponentModel.TypeDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-128">This method provides a way to change or remove items within the dictionary of events that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="7ad0e-129">이벤트의 사전에 키는 이벤트의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-129">The keys in the dictionary of events are the names of the events.</span></span> <span data-ttu-id="7ad0e-130">형식의 개체는 <xref:System.ComponentModel.EventDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-130">The objects are of type <xref:System.ComponentModel.EventDescriptor>.</span></span> <span data-ttu-id="7ad0e-131">바로 뒤에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-131">This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="7ad0e-132">
            <para>직접을 통해 액세스할 수 있는 사전 필터링는 <paramref name="events" /> 하거나 매개 변수를 그대로 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-132">
              <para>You can directly filter the dictionary that is accessible through the <paramref name="events" /> parameter, or you can leave it unchanged. If you are overriding this method, call the base implementation after you perform your own filtering.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterProperties">
      <MemberSignature Language="C#" Value="public void PostFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PostFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">
          <span data-ttu-id="7ad0e-133">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-133">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects that represent the properties of the class of the component.</span>
          </span>
          <span data-ttu-id="7ad0e-134">속성의 사전에 포함된 키는 속성 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-134">The keys in the dictionary of properties are property names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ad0e-135">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에서 항목을 변경하거나 제거할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-135">When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ad0e-136">이 방법을 통해 노출 되는 속성의 사전 내에서 항목을 변경 하거나 제거할 수 있습니다는 <xref:System.ComponentModel.TypeDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-136">This method provides a way to change or remove items within the dictionary of properties that are exposed through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="7ad0e-137">속성 사전의 키는 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-137">The keys in the dictionary of properties are the names of the properties.</span></span> <span data-ttu-id="7ad0e-138">형식의 개체는 <xref:System.ComponentModel.PropertyDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-138">The objects are of type <xref:System.ComponentModel.PropertyDescriptor>.</span></span> <span data-ttu-id="7ad0e-139">바로 뒤에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-139">This method is called immediately after <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="7ad0e-140">
            <para>직접을 통해 액세스할 수 있는 사전 필터링는 <paramref name="properties" /> 하거나 매개 변수를 그대로 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-140">
              <para>You can directly filter the dictionary that is accessible through the <paramref name="properties" /> parameter, or you can leave it unchanged. If you are overriding this method, call the base implementation after you perform your own filtering.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterAttributes">
      <MemberSignature Language="C#" Value="public void PreFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="7ad0e-141">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-141">The <see cref="T:System.Attribute" /> objects for the class of the component.</span>
          </span>
          <span data-ttu-id="7ad0e-142">특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-142">The keys in the dictionary of attributes are the <see cref="P:System.Attribute.TypeId" /> values of the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ad0e-143">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에 항목을 추가하도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-143">When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ad0e-144">이 메서드는이 인터페이스를 구현 하는 디자이너의 연결된 된 구성 요소를 통해 노출 하는 특성의 사전에 항목을 추가 하는 방법을 제공을 <xref:System.ComponentModel.TypeDescriptor>입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-144">This method provides a way to add items to the dictionary of attributes that the associated component of the designer implementing this interface exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="7ad0e-145">특성의 사전에 키는 특성의 형식 Id입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-145">The keys in the dictionary of attributes are the type IDs of the attributes.</span></span> <span data-ttu-id="7ad0e-146">형식의 개체는 <xref:System.Attribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-146">The objects are of type <xref:System.Attribute>.</span></span> <span data-ttu-id="7ad0e-147">바로 앞에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-147">This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>.</span></span>  
  
 <span data-ttu-id="7ad0e-148">특성의 형식 ID에는 임의의 개체가 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-148">The type ID of an attribute can be any object.</span></span> <span data-ttu-id="7ad0e-149">기본적으로 <xref:System.Attribute> 반환 해당 <xref:System.Type> 값으로 해당 <xref:System.Attribute.TypeId%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-149">By default, <xref:System.Attribute> returns its <xref:System.Type> as the value of its <xref:System.Attribute.TypeId%2A> property.</span></span> <span data-ttu-id="7ad0e-150">확인할 수 있습니다 합니다 <xref:System.Attribute.TypeId%2A> 알려진을 사용 하 여 동등성에 대 한 사전에 있는 특성의 <xref:System.Attribute.TypeId%2A> 특성을 식별 하거나, 사용에 대 한 <xref:System.Reflection> 자체 특성 개체를 식별 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-150">You can check the <xref:System.Attribute.TypeId%2A> of an attribute in the dictionary for equivalence with a known <xref:System.Attribute.TypeId%2A> for an attribute to identify it, or use <xref:System.Reflection> to identify the attribute object itself.</span></span>  
  
 <span data-ttu-id="7ad0e-151">동일한 특성 <xref:System.Attribute.TypeId%2A> 새 특성이 이전 특성을 대체 기존 또는 상속 된 특성은 구성 요소에 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-151">When an attribute that has the same <xref:System.Attribute.TypeId%2A> as an existing or inherited attribute is added to a component, the new attribute replaces the old attribute.</span></span> <span data-ttu-id="7ad0e-152">많은 특성에 대 한 동일한 유형의 새 특성을 유형의 모든 이전 특성을 바뀝니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-152">For many attributes, a new attribute of the same type will replace any previous attribute of the type.</span></span> <span data-ttu-id="7ad0e-153">그러나 일부 유형의 특성을 반환할는 <xref:System.Attribute.TypeId%2A> 특성을 선택적으로 구별 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-153">However, some types of attributes return a <xref:System.Attribute.TypeId%2A> that distinguishes the attribute selectively.</span></span> <span data-ttu-id="7ad0e-154">예를 들어, 형식의 경우와 같은 다양 한 유형의 동시에 활성 디자이너를 제공 하기 위해는 <xref:System.ComponentModel.Design.IRootDesigner> 와 <xref:System.ComponentModel.Design.IDesigner>의 <xref:System.ComponentModel.DesignerAttribute> 반환 클래스는 <xref:System.Attribute.TypeId%2A> 고유 하 게 식별 하는 특성 및 기본 디자이너 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-154">For example, in order to provide different types of simultaneously active designers for a type, such as an <xref:System.ComponentModel.Design.IRootDesigner> and an <xref:System.ComponentModel.Design.IDesigner>, the <xref:System.ComponentModel.DesignerAttribute> class returns a <xref:System.Attribute.TypeId%2A> that uniquely identifies both the attribute and the base designer type.</span></span> <span data-ttu-id="7ad0e-155">합니다 <xref:System.ComponentModel.DesignerAttribute> 생성자를 사용 하면 해당 특정 형식 외에도 디자이너의 디자이너 기본 형식을 지정할 수 있습니다 및 <xref:System.ComponentModel.DesignerAttribute> 반환을 <xref:System.Attribute.TypeId%2A> 이 반영 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-155">The <xref:System.ComponentModel.DesignerAttribute> constructor allows you to specify the base designer type of the designer in addition to its specific type, and <xref:System.ComponentModel.DesignerAttribute> returns a <xref:System.Attribute.TypeId%2A> that reflects this.</span></span> <span data-ttu-id="7ad0e-156">따라서 추가 하면 새 <xref:System.ComponentModel.DesignerAttribute> 기존 기본 디자이너 유형으로 동일한 형식의 기본 디자이너 형식과 <xref:System.ComponentModel.DesignerAttribute>, 이전 특성을 새 특성으로 대체 됩니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-156">Therefore when you add a new <xref:System.ComponentModel.DesignerAttribute> with a base designer type of the same type as the base designer type of an existing <xref:System.ComponentModel.DesignerAttribute>, the old attribute is replaced with the new attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="7ad0e-157">
            <para>직접을 통해 액세스할 수 있는 사전 필터링는 <paramref name="attributes" /> 하거나 매개 변수를 그대로 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-157">
              <para>You can directly filter the dictionary that is accessible through the <paramref name="attributes" /> parameter, or you can leave it unchanged. If you are overriding this method, call the base implementation after you perform your own filtering.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterEvents">
      <MemberSignature Language="C#" Value="public void PreFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">
          <span data-ttu-id="7ad0e-158">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-158">The <see cref="T:System.ComponentModel.EventDescriptor" /> objects that represent the events of the class of the component.</span>
          </span>
          <span data-ttu-id="7ad0e-159">이벤트의 사전에 포함된 키는 이벤트 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-159">The keys in the dictionary of events are event names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ad0e-160">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에 항목을 추가하도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-160">When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ad0e-161">이 메서드는 디자이너를 통해 노출 하는 이벤트의 사전에 항목을 추가 하는 방법을 제공을 <xref:System.ComponentModel.TypeDescriptor>입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-161">This method provides a way to add items to the dictionary of events that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="7ad0e-162">이벤트의 사전에 키는 이벤트의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-162">The keys in the dictionary of events are the names of the events.</span></span> <span data-ttu-id="7ad0e-163">형식의 개체는 <xref:System.ComponentModel.EventDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-163">The objects are of type <xref:System.ComponentModel.EventDescriptor>.</span></span> <span data-ttu-id="7ad0e-164">바로 앞에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-164">This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="7ad0e-165">
            <para>통해 액세스할 수 있는 사전을 직접 수정할 수 있습니다는 <paramref name="events" /> 하거나 매개 변수를 그대로 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하기 전에 기본 구현을 호출 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-165">
              <para>You can directly modify the dictionary that is accessible through the <paramref name="events" /> parameter, or you can leave it unchanged. If you are overriding this method, call the base implementation before you perform your own filtering.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterProperties">
      <MemberSignature Language="C#" Value="public void PreFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="iDesignerFilter.PreFilterProperties properties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">
          <span data-ttu-id="7ad0e-166">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-166">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> objects that represent the properties of the class of the component.</span>
          </span>
          <span data-ttu-id="7ad0e-167">속성의 사전에 포함된 키는 속성 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-167">The keys in the dictionary of properties are property names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ad0e-168">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에 항목을 추가하도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-168">When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a <see cref="T:System.ComponentModel.TypeDescriptor" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ad0e-169">이 메서드는 디자이너를 통해 노출 되는 속성의 사전에 항목을 추가 하는 방법을 제공을 <xref:System.ComponentModel.TypeDescriptor>입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-169">This method provides a way to add items to the dictionary of properties that a designer exposes through a <xref:System.ComponentModel.TypeDescriptor>.</span></span>  
  
 <span data-ttu-id="7ad0e-170">속성 사전의 키는 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-170">The keys in the dictionary of properties are the names of the properties.</span></span> <span data-ttu-id="7ad0e-171">형식의 개체는 <xref:System.ComponentModel.PropertyDescriptor>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-171">The objects are of type <xref:System.ComponentModel.PropertyDescriptor>.</span></span> <span data-ttu-id="7ad0e-172">바로 앞에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="7ad0e-172">This method is called immediately before <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="7ad0e-173">
            <para>통해 액세스할 수 있는 사전을 직접 수정할 수 있습니다는 <paramref name="properties" /> 하거나 매개 변수를 그대로 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하기 전에 기본 구현을 호출 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7ad0e-173">
              <para>You can directly modify the dictionary that is accessible through the <paramref name="properties" /> parameter, or you can leave it unchanged. If you are overriding this method, call the base implementation before you perform your own filtering.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>