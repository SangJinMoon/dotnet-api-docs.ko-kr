<Type Name="IDesignerFilter" FullName="System.ComponentModel.Design.IDesignerFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="805c7cd0acdb03070f0db4f5eea4cf81ee1b03b9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30369537" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDesignerFilter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerFilter" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.IDesignerFilter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerFilter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerFilter" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>구성 요소 디자이너에서 디자인 타임 환경에 노출될 수 있는 속성, 특성 및 이벤트 설명자가 저장되어 있는 <see cref="T:System.ComponentModel.TypeDescriptor" />의 사전을 디자이너에서 액세스하고 필터링할 수 있도록 인터페이스를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.Design.IDesignerFilter> 디자이너를 통해 연결 된 해당 구성 요소가 노출 하는 속성, 특성 및 이벤트 설명자의 집합을 필터링 할 수 있도록는 <xref:System.ComponentModel.TypeDescriptor>합니다. 이름이로 시작 하는이 인터페이스의 메서드 `Pre` 로 시작 하는 이름이 메서드 직전에 호출 된 `Post`합니다.  
  
 특성, 이벤트 또는 속성 설명자를 추가 하려는 경우 사용 하 여 한 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>, 또는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> 메서드.  
  
 변경 하거나 특성, 이벤트 또는 속성 설명자를 사용 하 여 제거 하려는 경우는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>, <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>, 또는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A> 메서드.  
  
   
  
## Examples  
 다음 예제에서는 재정의 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A> 디자이너의 컨트롤을 디자인 타임에 선택할 때 속성 창에 디자이너의 속성을 추가 하는 합니다. 예를 참조는 <xref:System.Windows.Forms.Design.ControlDesigner> 사용 하는 완전 한 디자이너 예제에 대 한 클래스는 <xref:System.ComponentModel.Design.IDesignerFilter> 인터페이스입니다.  
  
 [!code-cpp[ControlDesignerExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlDesignerExample/CPP/controldesignerexample.cpp#2)]
 [!code-csharp[ControlDesignerExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlDesignerExample/CS/controldesignerexample.cs#2)]
 [!code-vb[ControlDesignerExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlDesignerExample/VB/controldesignerexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.ITypeDescriptorFilterService" />
    <altmember cref="T:System.ComponentModel.TypeDescriptor" />
  </Docs>
  <Members>
    <Member MemberName="PostFilterAttributes">
      <MemberSignature Language="C#" Value="public void PostFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다. 특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</param>
        <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에서 항목을 변경하거나 제거할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 변경 하거나이 인터페이스를 구현 하는 디자이너의 연결된 된 구성 요소를 통해 노출 하는 특성의 사전에서 항목을 제거 하는 방법을 제공는 <xref:System.ComponentModel.TypeDescriptor>합니다.  
  
 특성의 사전 키는 특성의 형식 Id입니다. 형식의 개체는 <xref:System.Attribute>합니다. 바로 뒤에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes%2A>합니다.  
  
 유형 ID 특성의 모든 개체 일 수 있습니다. 기본적으로 <xref:System.Attribute> 반환 해당 <xref:System.Type> 의 값으로 해당 <xref:System.Attribute.TypeId%2A> 속성입니다. 확인할 수 있습니다는 <xref:System.Attribute.TypeId%2A> 알려진 같은지 사전에 있는 특성의 <xref:System.Attribute.TypeId%2A> 여 특성을 식별 하거나, 사용 하 여 <xref:System.Reflection> 자체 특성 개체를 식별 하 합니다.  
  
 같은 특성 <xref:System.Attribute.TypeId%2A> 새 특성이 이전 특성을 대체 기존 또는 상속 된 특성은 구성 요소에 추가 되 면입니다. 많은 특성에 대해 동일한 유형의 새 특성을 형식의 이전 특성을 바뀝니다. 그러나 일부 유형의 특성을 반환할는 <xref:System.Attribute.TypeId%2A> 특성을 선택적으로 구별 하는 합니다. 예를 들어, 한 형식에 대 한와 같은 다양 한 유형의 동시에 활성 디자이너를 제공 하기 위해는 <xref:System.ComponentModel.Design.IRootDesigner> 및 <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute> 반환 클래스는 <xref:System.Attribute.TypeId%2A> 고유 하 게 식별 하는 특성 및 기본 디자이너 모두 입력 합니다. <xref:System.ComponentModel.DesignerAttribute> 생성자를 사용 하면 특정 종류를 사용 하는 디자이너의 디자이너 기본 형식을 지정 하 고 <xref:System.ComponentModel.DesignerAttribute> 반환는 <xref:System.Attribute.TypeId%2A> 이 반영 하 합니다. 따라서 추가 하는 경우 새 <xref:System.ComponentModel.DesignerAttribute> 기존의 기본 디자이너 유형으로 동일한 형식의 기본를 디자이너 형식과 <xref:System.ComponentModel.DesignerAttribute>, 기존 특성 새 특성으로 대체 됩니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>통해 액세스할 수 있는 사전의 직접 필터링 할 수 있습니다는 <paramref name="attributes" /> 매개 변수 또는 있습니다 변경 되지 않은 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterEvents">
      <MemberSignature Language="C#" Value="public void PostFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다. 이벤트의 사전에 포함된 키는 이벤트 이름입니다.</param>
        <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에서 항목을 변경하거나 제거하도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 통해 노출 되는 이벤트의 사전에서 항목을 제거 하거나 변경 하는 방법을 제공는 <xref:System.ComponentModel.TypeDescriptor>합니다.  
  
 이벤트의 사전 키는 이벤트의 이름입니다. 형식의 개체는 <xref:System.ComponentModel.EventDescriptor>합니다. 바로 뒤에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents%2A>합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>통해 액세스할 수 있는 사전의 직접 필터링 할 수 있습니다는 <paramref name="events" /> 매개 변수 또는 있습니다 변경 되지 않은 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PostFilterProperties">
      <MemberSignature Language="C#" Value="public void PostFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다. 속성의 사전에 포함된 키는 속성 이름입니다.</param>
        <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에서 항목을 변경하거나 제거할 수 있습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 통해 노출 되는 속성의 사전에서 항목을 제거 하거나 변경 하는 방법을 제공는 <xref:System.ComponentModel.TypeDescriptor>합니다.  
  
 속성의 사전 키는 속성의 이름입니다. 형식의 개체는 <xref:System.ComponentModel.PropertyDescriptor>합니다. 바로 뒤에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties%2A>합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>통해 액세스할 수 있는 사전의 직접 필터링 할 수 있습니다는 <paramref name="properties" /> 매개 변수 또는 있습니다 변경 되지 않은 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterAttributes">
      <MemberSignature Language="C#" Value="public void PreFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다. 특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</param>
        <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에 항목을 추가하도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는이 인터페이스를 구현 하는 디자이너의 연결된 된 구성 요소를 통해 노출 하는 특성의 사전에 항목을 추가 하는 방법을 제공는 <xref:System.ComponentModel.TypeDescriptor>합니다.  
  
 특성의 사전 키는 특성의 형식 Id입니다. 형식의 개체는 <xref:System.Attribute>합니다. 바로 앞에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes%2A>합니다.  
  
 유형 ID 특성의 모든 개체 일 수 있습니다. 기본적으로 <xref:System.Attribute> 반환 해당 <xref:System.Type> 의 값으로 해당 <xref:System.Attribute.TypeId%2A> 속성입니다. 확인할 수 있습니다는 <xref:System.Attribute.TypeId%2A> 알려진 같은지 사전에 있는 특성의 <xref:System.Attribute.TypeId%2A> 여 특성을 식별 하거나, 사용 하 여 <xref:System.Reflection> 자체 특성 개체를 식별 하 합니다.  
  
 같은 특성 <xref:System.Attribute.TypeId%2A> 새 특성이 이전 특성을 대체 기존 또는 상속 된 특성은 구성 요소에 추가 되 면입니다. 많은 특성에 대해 동일한 유형의 새 특성을 형식의 이전 특성을 바뀝니다. 그러나 일부 유형의 특성을 반환할는 <xref:System.Attribute.TypeId%2A> 특성을 선택적으로 구별 하는 합니다. 예를 들어, 한 형식에 대 한와 같은 다양 한 유형의 동시에 활성 디자이너를 제공 하기 위해는 <xref:System.ComponentModel.Design.IRootDesigner> 및 <xref:System.ComponentModel.Design.IDesigner>, <xref:System.ComponentModel.DesignerAttribute> 반환 클래스는 <xref:System.Attribute.TypeId%2A> 고유 하 게 식별 하는 특성 및 기본 디자이너 모두 입력 합니다. <xref:System.ComponentModel.DesignerAttribute> 생성자를 사용 하면 특정 종류를 사용 하는 디자이너의 디자이너 기본 형식을 지정 하 고 <xref:System.ComponentModel.DesignerAttribute> 반환는 <xref:System.Attribute.TypeId%2A> 이 반영 하 합니다. 따라서 추가 하는 경우 새 <xref:System.ComponentModel.DesignerAttribute> 기존의 기본 디자이너 유형으로 동일한 형식의 기본를 디자이너 형식과 <xref:System.ComponentModel.DesignerAttribute>, 기존 특성 새 특성으로 대체 됩니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>통해 액세스할 수 있는 사전의 직접 필터링 할 수 있습니다는 <paramref name="attributes" /> 매개 변수 또는 있습니다 변경 되지 않은 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하 고 나면 기본 구현을 호출 합니다.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterEvents">
      <MemberSignature Language="C#" Value="public void PreFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다. 이벤트의 사전에 포함된 키는 이벤트 이름입니다.</param>
        <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에 항목을 추가하도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 디자이너를 통해 노출 하는 이벤트의 사전에 항목을 추가 하는 방법을 제공는 <xref:System.ComponentModel.TypeDescriptor>합니다.  
  
 이벤트의 사전 키는 이벤트의 이름입니다. 형식의 개체는 <xref:System.ComponentModel.EventDescriptor>합니다. 바로 앞에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents%2A>합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>통해 액세스할 수 있는 사전을 직접 수정할 수 있습니다는 <paramref name="events" /> 매개 변수 또는 있습니다 변경 되지 않은 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하기 전에 기본 구현을 호출 합니다.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="PreFilterProperties">
      <MemberSignature Language="C#" Value="public void PreFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PreFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PreFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다. 속성의 사전에 포함된 키는 속성 이름입니다.</param>
        <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에 항목을 추가하도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 디자이너를 통해 노출 되는 속성의 사전에 항목을 추가 하는 방법을 제공는 <xref:System.ComponentModel.TypeDescriptor>합니다.  
  
 속성의 사전 키는 속성의 이름입니다. 형식의 개체는 <xref:System.ComponentModel.PropertyDescriptor>합니다. 바로 앞에이 메서드는 <xref:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties%2A>합니다.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>통해 액세스할 수 있는 사전을 직접 수정할 수 있습니다는 <paramref name="properties" /> 매개 변수 또는 있습니다 변경 되지 않은 둘 수 있습니다. 이 메서드를 재정의 하는 경우 필터링을 수행 하기 전에 기본 구현을 호출 합니다.</para>
        </block>
        <altmember cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>