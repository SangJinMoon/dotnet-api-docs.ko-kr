<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ViewTechnology.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ea29596632544da6162e69dd65efbcfc8b3e1b43.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea29596632544da6162e69dd65efbcfc8b3e1b43</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>Defines identifiers for a set of technologies that designer hosts support.</source>
          <target state="translated">디자이너 호스트가 지원하는 기술 세트에 대한 식별자를 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>The view adapter model replaces and adds functionality to the <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> feature; however, the <ph id="ph2">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> feature is retained for both backward compatibility and future use, if you choose.</source>
          <target state="translated">대체 하 고 기능을 추가 하는 보기 어댑터 모델은 <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> 기능; 그러나는 <ph id="ph2">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> 선택 하는 경우 이전 버전과 호환성 및 이후 사용 기능이 유지 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>For more information, see ".NET Shape Library: A Sample Designer" in the Windows Forms Knowledge Base at <ph id="ph1">http://windowsforms.net/articles/shapedesigner.aspx</ph>.</source>
          <target state="translated">자세한 내용은 ".NET 셰이프 라이브러리:: A 샘플 디자이너 참조"에서 Windows Forms 기술 자료에서 <ph id="ph1">http://windowsforms.net/articles/shapedesigner.aspx</ph>합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> 디자이너에서 호스팅되는 문서의 표시 제어를 사용 하는 모드를 나타낼 수 있는 식별자를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>You should only use the Default value in your designer hosting environment.</source>
          <target state="translated">디자이너 호스팅 환경에 기본값만 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>In previous versions of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ComponentModel.Design.ViewTechnology.Default&gt;</ph> enumeration specified the type of UI model supported by a root designer.</source>
          <target state="translated">이전 버전의 <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.Design.ViewTechnology.Default&gt;</ph> 열거형 루트 디자이너에서 지 원하는 UI 모델의 형식을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>Because this model is not extensible, you should instead use a <bpt id="p1">*</bpt>view adapter<ept id="p1">*</ept> model.</source>
          <target state="translated">대신 사용 해야이 모델을 확장할 수 없기 때문에 <bpt id="p1">*</bpt>뷰 어댑터<ept id="p1">*</ept> 모델입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>A view adapter is a type that adapts an object of one type to another.</source>
          <target state="translated">뷰 어댑터는 다른 형식으로의 개체를 조정 하는 형식입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>For example, an HTML designer might return a <ph id="ph1">`DemoDOM`</ph> tree as its view.</source>
          <target state="translated">예를 들어, HTML 디자이너를 반환할 수 있습니다는 <ph id="ph1">`DemoDOM`</ph> 트리를 뷰로 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>The HTML designer returns a view technology of Default.</source>
          <target state="translated">HTML 디자이너의 기본 뷰 기술을 반환합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>A Windows Forms hosting environment would have one or more view adapter classes available.</source>
          <target state="translated">Windows Forms 호스팅 환경을 사용할 수 있는 보기 어댑터 클래스는 것입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>If one such class could convert the <ph id="ph1">`DemoDOM`</ph> into a Windows Forms control, the hosting application can support this type of designer.</source>
          <target state="translated">이러한 클래스는 하나의 변환 수는 <ph id="ph1">`DemoDOM`</ph> Windows Forms 컨트롤로 호스팅 응용 프로그램 디자이너가이 유형을 지원할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>If no adapter can handle the data type returned from the designer’s <ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt;</ph> method, the load of the designer will fail, and the user will be presented with an error.</source>
          <target state="translated">어댑터가 디자이너의 반환 된 데이터 형식을 처리할 수 경우 <ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt;</ph> 메서드를 디자이너의 로드 실패 하 고 사용자가 오류와 함께 표시 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source><ph id="ph1">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> has an extensible scheme for providing view adapters, so it can adapt to any UI technology.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> 에 모든 UI 기술에 적용할 수 있도록 뷰 어댑터를 제공 하기 위한 확장 가능한 스키마를 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.</source>
          <target state="translated">개체 모델은 즉시 사용 가능 및 제 3 자 기술 공급자는 적절 한 보기 어댑터를 제공할 수도 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>For an example that uses view adapters, see ".NET Shape Library: A Sample Designer" in the Windows Forms Knowledge Base at <ph id="ph1">http://windowsforms.net/articles/shapedesigner.aspx</ph>.</source>
          <target state="translated">예를 보려면 사용 하 여 어댑터를 확인할 ".NET 셰이프 라이브러리:: A 샘플 디자이너 참조"에서 Windows Forms 기술 자료에서 <ph id="ph1">http://windowsforms.net/articles/shapedesigner.aspx</ph>합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology.Default&gt;</ph> class in a designer.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology.Default&gt;</ph> 디자이너에서 클래스입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.ViewTechnology">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt;</ph> interface.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner.GetView%2A&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>Specifies the default view technology support.</source>
          <target state="translated">기본 뷰 기술 지원을 지정합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host.</source>
          <target state="translated">루트 디자이너에는 모든 종류의 개체를 반환할 수 있습니다 하지만 개체는 호스트의 기술에 대 한 어댑터와 호환 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>Hosting environments such as <ph id="ph1">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> provide a way to plug in new view technology adapters.</source>
          <target state="translated">호스팅 환경 등 <ph id="ph1">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> 새로운 뷰 기술 어댑터에 연결 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>The default view object for the Windows Forms designer is a <ph id="ph1">&lt;xref:System.Windows.Forms.Control?displayProperty=nameWithType&gt;</ph> instance.</source>
          <target state="translated">Windows Forms 디자이너의 기본 뷰 개체는 <ph id="ph1">&lt;xref:System.Windows.Forms.Control?displayProperty=nameWithType&gt;</ph> 인스턴스.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> class in a designer.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> 디자이너에서 클래스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Default">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner&gt;</ph> interface.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.IRootDesigner&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>Represents a mode in which the view object is passed directly to the development environment.</source>
          <target state="translated">뷰 개체가 개발 환경에 직접 전달되는 모드를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>The view object must implement any interfaces the development environment requires.</source>
          <target state="translated">View 개체 개발 환경에서 요청 하는 모든 인터페이스를 구현 해야 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>The <ph id="ph1">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through <ph id="ph2">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> VSI (<ph id="ph3">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> Integration) program.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> 개발 환경에서는 ActiveX 컨트롤, 액티브 문서를 통해 사용할 수 있는 IVsWindowPane 인터페이스를 구현 하는 개체 또는 중 하나인 개체 보기 <ph id="ph2">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> VSI (<ph id="ph3">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> 통합) 프로그램 .</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>The <ph id="ph1">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> development environment provides support for this view technology.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]</ph> 개발 환경에서는이 뷰 기술에 대 한 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
          <source>Support for this view technology is not necessarily available in all development environments.</source>
          <target state="translated">이 뷰 기술에 대 한 지원에 모든 개발 환경에서 반드시 사용할 수 없는 경우</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
          <source>Represents a mode in which a Windows Forms control object provides the display for the root designer.</source>
          <target state="translated">Windows Forms 컨트롤 개체가 루트 디자이너를 위한 디스플레이를 제공하는 모드를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
          <source>The designer host fills the development environment document window with the Windows Forms control.</source>
          <target state="translated">디자이너 호스트 Windows Forms 컨트롤 개발 환경 문서 창을 채웁니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> class in a designer.</source>
          <target state="translated">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.ViewTechnology&gt;</ph> 디자이너에서 클래스입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.ComponentModel.Design.LocalizationExtenderProvider&gt;</ph> class.</source>
          <target state="translated">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.LocalizationExtenderProvider&gt;</ph> 클래스입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>