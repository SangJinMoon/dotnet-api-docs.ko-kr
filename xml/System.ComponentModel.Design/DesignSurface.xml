<Type Name="DesignSurface" FullName="System.ComponentModel.Design.DesignSurface">
  <Metadata><Meta Name="ms.openlocfilehash" Value="91c1c9208c715341f7cfdcfb2625788e76d20af2" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53471163" /></Metadata><TypeSignature Language="C#" Value="public class DesignSurface : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DesignSurface extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.DesignSurface" />
  <TypeSignature Language="VB.NET" Value="Public Class DesignSurface&#xA;Implements IDisposable, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignSurface : IDisposable, IServiceProvider" />
  <TypeSignature Language="F#" Value="type DesignSurface = class&#xA;    interface IDisposable&#xA;    interface IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cb46d-101">구성 요소를 디자인하기 위한 사용자 인터페이스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-101">Presents a user interface for designing components.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-102"><xref:System.ComponentModel.Design.DesignSurface> 어떤 사용자가 디자이너로 인식 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-102">The <xref:System.ComponentModel.Design.DesignSurface> class implements what the user perceives as a designer.</span></span> <span data-ttu-id="cb46d-103"><xref:System.ComponentModel.Design.DesignSurface> 디자인 타임 기능을 변경 하려면 사용자 인터페이스 사용자 조작입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-103"><xref:System.ComponentModel.Design.DesignSurface> is the user interface the user manipulates to change design-time features.</span></span> <span data-ttu-id="cb46d-104"><xref:System.ComponentModel.Design.DesignSurface> 완전히 자체 포함 된 디자인 화면을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-104"><xref:System.ComponentModel.Design.DesignSurface> provides a completely self-contained design surface.</span></span>  
  
 <span data-ttu-id="cb46d-105">합니다 <xref:System.ComponentModel.Design.DesignSurface> 클래스 디자이너를 독립 실행형으로 사용할 수 있습니다 또는 함께 사용할 수 있습니다 합니다 <xref:System.ComponentModel.Design.DesignSurfaceManager> 여러를 호스팅하는 애플리케이션에 대 한 일반적인 구현을 제공 하는 클래스 <xref:System.ComponentModel.Design.DesignSurface> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-105">The <xref:System.ComponentModel.Design.DesignSurface> class may be used as a stand-alone designer, or it may be coupled with the <xref:System.ComponentModel.Design.DesignSurfaceManager> class to provide a common implementation for an application that hosts multiple <xref:System.ComponentModel.Design.DesignSurface> objects.</span></span>  
  
 <span data-ttu-id="cb46d-106"><xref:System.ComponentModel.Design.DesignSurface> 자체로 클래스를 사용할 수 있습니다 또는 사용자 수에서 새 클래스를 파생 하 고 동작을 보강 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-106">The <xref:System.ComponentModel.Design.DesignSurface> class can be used by itself, or the user can derive a new class from it and augment the behavior.</span></span>  
  
 <span data-ttu-id="cb46d-107"><xref:System.ComponentModel.Design.DesignSurface> 클래스는 몇 가지 디자인 타임 서비스를 자동으로 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-107">The <xref:System.ComponentModel.Design.DesignSurface> class provides several design-time services automatically.</span></span> <span data-ttu-id="cb46d-108"><xref:System.ComponentModel.Design.DesignSurface> 클래스 생성자에서 모든 서비스를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-108">The <xref:System.ComponentModel.Design.DesignSurface> class adds all of its services in its constructor.</span></span> <span data-ttu-id="cb46d-109">이러한 서비스의 대부분은 보호 된 대체 하 여 재정의할 수 있습니다 <xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-109">Most of these services can be overridden by replacing them in the protected <xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> property.</span></span> <span data-ttu-id="cb46d-110">서비스의 이름을 바꾸려면 생성자를 재정의 기본, 호출 및 보호를 통해 변경한 <xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-110">To replace a service, override the constructor, call base, and make any changes through the protected <xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> property.</span></span> <span data-ttu-id="cb46d-111">서비스 컨테이너에 추가 되 고 구현 하는 모든 서비스 <xref:System.IDisposable> 디자인 화면에서 삭제 될 때 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-111">All services that are added to the service container and that implement <xref:System.IDisposable> are disposed when the design surface is disposed.</span></span> <span data-ttu-id="cb46d-112">기본값을 대체할 수 있는 서비스는 <xref:System.ComponentModel.Design.DesignSurface> 클래스는 다음 표와 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-112">The default set of replaceable services that the <xref:System.ComponentModel.Design.DesignSurface> class provides is shown in the following table.</span></span>  
  
|<span data-ttu-id="cb46d-113">서비스</span><span class="sxs-lookup"><span data-stu-id="cb46d-113">Service</span></span>|<span data-ttu-id="cb46d-114">설명</span><span class="sxs-lookup"><span data-stu-id="cb46d-114">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.ComponentModel.Design.IExtenderProviderService>|<span data-ttu-id="cb46d-115">자신의 extender 공급자를 제공 하는 컨테이너의 구성 요소 컬렉션의 일부가 아닌 개체에 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-115">Enables objects that are not part of the container's components collection to provide their own extender providers.</span></span>|  
|<xref:System.ComponentModel.Design.IExtenderListService>|<span data-ttu-id="cb46d-116">사용한 <xref:System.ComponentModel.TypeDescriptor> extender 공급자의 목록을 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-116">Used by <xref:System.ComponentModel.TypeDescriptor> to get a list of extender providers.</span></span> <span data-ttu-id="cb46d-117">Extender 공급자는이 서비스를 사용 하 여 컨테이너의 외부 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-117">With this service, extender providers can live outside of the container.</span></span>|  
|<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>|<span data-ttu-id="cb46d-118">디자이너 메타 데이터 후크를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-118">Provides designer metadata hooks.</span></span> <span data-ttu-id="cb46d-119">메타 데이터 필터링에 대 한 기본 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-119">This is the primary interface for metadata filtering.</span></span>|  
|<xref:System.ComponentModel.Design.ISelectionService>|<span data-ttu-id="cb46d-120">디자이너에서 구성 요소를 선택 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-120">Provides a way to select components in the designer.</span></span>|  
|<xref:System.ComponentModel.Design.IReferenceService>|<span data-ttu-id="cb46d-121">해당 개체 배치 되지 않은 경우에 개체에 대 한 이름을 가져올 수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-121">Provides a way to get a name for objects, even when those objects are not sited.</span></span>|  
|<xref:System.ComponentModel.Design.DesignSurface>|<span data-ttu-id="cb46d-122">서비스로 자체 디자인 화면을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-122">Offers the design surface itself as a service.</span></span>|  
|<xref:System.ComponentModel.Design.DesignerOptionService>|<span data-ttu-id="cb46d-123">디자이너에 대한 옵션 값을 가져오고 설정하는 데 사용할 수 있는 기본 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-123">Provides a base class for getting and setting option values for a designer.</span></span>|  
  
 <span data-ttu-id="cb46d-124">다음 표에서 기본적으로 제공 하는 대체 가능한 비 서비스를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-124">The following table shows the non-replaceable services provided by default.</span></span>  
  
|<span data-ttu-id="cb46d-125">서비스</span><span class="sxs-lookup"><span data-stu-id="cb46d-125">Service</span></span>|<span data-ttu-id="cb46d-126">설명</span><span class="sxs-lookup"><span data-stu-id="cb46d-126">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.ComponentModel.Design.IComponentChangeService>|<span data-ttu-id="cb46d-127">구성 요소에 변경 이벤트를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-127">Raises events as changes are made to components.</span></span>|  
|<xref:System.ComponentModel.Design.IDesignerHost>|<span data-ttu-id="cb46d-128">형식, 서비스 및 트랜잭션에 대 한 액세스 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-128">Controls access to types, services, and transactions.</span></span> <span data-ttu-id="cb46d-129">디자이너에 대 한 마스터 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-129">Master interface for designers.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="cb46d-130">디자인할 구성 요소의 집합을 소유 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-130">Owns the set of components that are being designed.</span></span> <span data-ttu-id="cb46d-131">각 디자이너에는 <xref:System.ComponentModel.IContainer> 구성 요소를 소유 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-131">Each designer has an <xref:System.ComponentModel.IContainer> that owns the components.</span></span>|  
|<xref:System.ComponentModel.Design.IServiceContainer>|<span data-ttu-id="cb46d-132">파생 <xref:System.IServiceProvider> 추가 디자이너에서 서비스를 제거 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-132">Derives from <xref:System.IServiceProvider> and provides a way to add and remove services from the designer.</span></span>|  
  
 <span data-ttu-id="cb46d-133">이러한 서비스 외에도 <xref:System.ComponentModel.Design.DesignSurface> 클래스 또한 구성 요소의 사이트를 통해 제공 되는 단일 서비스를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-133">In addition to these services, the <xref:System.ComponentModel.Design.DesignSurface> class also provides a single service that is available through a component's site.</span></span> <span data-ttu-id="cb46d-134">이 서비스는 각 구성 요소에 대해 고유 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-134">This service is unique for each component.</span></span> <span data-ttu-id="cb46d-135">다음 표에서 대체할 수 없는 서비스를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-135">The following table shows the services that cannot be replaced.</span></span>  
  
|<span data-ttu-id="cb46d-136">서비스</span><span class="sxs-lookup"><span data-stu-id="cb46d-136">Service</span></span>|<span data-ttu-id="cb46d-137">설명</span><span class="sxs-lookup"><span data-stu-id="cb46d-137">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.ComponentModel.Design.IDictionaryService>|<span data-ttu-id="cb46d-138">구성 요소에 대 한 임의 데이터를 저장할 수 있는 키/값 쌍의 제네릭 사전입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-138">A generic dictionary of key/value pairs that can be used to store arbitrary data about a component.</span></span>|  
|<xref:System.ComponentModel.INestedContainer>|<span data-ttu-id="cb46d-139">구성 요소 디자이너에 추가 자식 구성 요소를 추가할 수 있도록 하는 컨테이너입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-139">A container that enables a component to add additional child components to the designer.</span></span> <span data-ttu-id="cb46d-140">이러한 구성 요소 디자인 화면에서의 일부가 될 하지만 serialization에 참여 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-140">These components will be part of the design surface, but will not participate in serialization.</span></span> <span data-ttu-id="cb46d-141">디자이너에서 자체의 영역을 노출할 수 있는 컨트롤을 디자인 하려는 경우 유용 하지만 serialization에 참여 하려면 지역을 원하지 않는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-141">This is useful when you want to design a control that is capable of exposing a region of itself in a designer, but you do not want the region to participate in serialization.</span></span>|  
  
 <span data-ttu-id="cb46d-142">외에 <xref:System.ComponentModel.ISite>, 사이트에는 또한 다음 인터페이스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-142">In addition to <xref:System.ComponentModel.ISite>, the site also implements the following interfaces.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="cb46d-143">다른 사이트 구현에서 구현 되지 않을 수 있으므로 무분별 하 게 캐스팅을 사용 하지 않고 이러한 인터페이스의 존재 여부 확인 하십시오.</span><span class="sxs-lookup"><span data-stu-id="cb46d-143">Check for the existence of these interfaces, rather than use indiscriminate casting, because other site implementations may not implement them.</span></span>  
  
|<span data-ttu-id="cb46d-144">서비스</span><span class="sxs-lookup"><span data-stu-id="cb46d-144">Service</span></span>|<span data-ttu-id="cb46d-145">설명</span><span class="sxs-lookup"><span data-stu-id="cb46d-145">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.ComponentModel.Design.IServiceContainer>|<span data-ttu-id="cb46d-146">사이트별 서비스의 컨테이너에 연결할 수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-146">Provides a way to get to the container of site-specific services.</span></span> <span data-ttu-id="cb46d-147">예를 들어 <xref:System.ComponentModel.Design.IDictionaryService> 사이트별 서비스입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-147">For example, <xref:System.ComponentModel.Design.IDictionaryService> is a site-specific service.</span></span> <span data-ttu-id="cb46d-148">이 서비스를 사용 하 여 추가 사이트 관련 서비스를 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-148">With this service, you can add additional site-specific services.</span></span>|  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.NamedPermissionSet"><span data-ttu-id="cb46d-149">시스템 리소스에 대 한 전체 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-149">for full access to system resources.</span></span> <span data-ttu-id="cb46d-150">요청 값: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-150">Demand values: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />, <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />.</span></span> <span data-ttu-id="cb46d-151">연결 된 상태:</span><span class="sxs-lookup"><span data-stu-id="cb46d-151">Associated state:</span></span></permission>
    <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
    <altmember cref="T:System.IServiceProvider" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cb46d-152"><see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-152">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignSurface" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignSurface ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignSurface();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb46d-153"><see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-153">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignSurface" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-154"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-154">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignSurface (IServiceProvider parentProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider parentProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parentProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignSurface(IServiceProvider ^ parentProvider);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignSurface : IServiceProvider -&gt; System.ComponentModel.Design.DesignSurface" Usage="new System.ComponentModel.Design.DesignSurface parentProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="parentProvider"><span data-ttu-id="cb46d-155">부모 서비스 공급자이거나, 서비스 확인에 사용되는 부모가 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-155">The parent service provider, or <see langword="null" /> if there is no parent used to resolve services.</span></span></param>
        <summary><span data-ttu-id="cb46d-156"><see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-156">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignSurface" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-157">때 `parentProvide` 가 디자이너 화면에 포함 된 애플리케이션에서 서비스를 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-157">When `parentProvide` is present, designers contained within the surface can retrieve services from the application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-158"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-158">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignSurface (Type rootComponentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type rootComponentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rootComponentType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignSurface(Type ^ rootComponentType);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignSurface : Type -&gt; System.ComponentModel.Design.DesignSurface" Usage="new System.ComponentModel.Design.DesignSurface rootComponentType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="rootComponentType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="rootComponentType"><span data-ttu-id="cb46d-159">만들 루트 구성 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-159">The type of root component to create.</span></span></param>
        <summary><span data-ttu-id="cb46d-160"><see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-160">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignSurface" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-161">사용 하는 경우는 <xref:System.ComponentModel.Design.DesignSurface.%23ctor%2A> 생성자를 지정 된 형식의 구성 요소를 만들고 로드 프로세스를 종료 한 다음는 간단한 디자이너 로더를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-161">When you use the <xref:System.ComponentModel.Design.DesignSurface.%23ctor%2A> constructor, it creates a simple designer loader that, in turn, creates a component of the given type and then ends the loading process.</span></span> <span data-ttu-id="cb46d-162">이 확실 한 방법은 가정에서 디자이너를 만드는 모든 상태를 저장할 때 외부에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-162">This is a straightforward way to create a designer, under the assumption that all saving of state will be done externally.</span></span> <span data-ttu-id="cb46d-163">이 호출 하는 내부적으로 <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 루트 구성 요소 형식을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-163">Internally, this calls <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> and passes the root component type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb46d-164">합니다 <xref:System.ComponentModel.Design.DesignSurface.%23ctor%2A> 오버 로드는 영향을 받지 않습니다 <xref:System.Windows.Forms.Design.DesignerOptions>합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-164">The <xref:System.ComponentModel.Design.DesignSurface.%23ctor%2A> overload is not affected by <xref:System.Windows.Forms.Design.DesignerOptions>.</span></span> <span data-ttu-id="cb46d-165"><xref:System.Windows.Forms.Design.DesignerOptions> 디자인 화면을 로드 하기 전에 서비스 컨테이너에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-165">The <xref:System.Windows.Forms.Design.DesignerOptions> must be in the service container before the design surface loads.</span></span> <span data-ttu-id="cb46d-166">에 액세스 해야 하는 경우 <xref:System.Windows.Forms.Design.DesignerOptions>빈 생성자를 호출, 추가 합니다 <xref:System.Windows.Forms.Design.DesignerOptions> 에 <xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> 호출 <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 사용 하 여 `rootComponentType`입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-166">If you need access to <xref:System.Windows.Forms.Design.DesignerOptions>, call the empty constructor, add the <xref:System.Windows.Forms.Design.DesignerOptions> to the <xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> and call <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> with `rootComponentType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb46d-167"><paramref name="rootComponent" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-167"><paramref name="rootComponent" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-168"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-168">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DesignSurface (IServiceProvider parentProvider, Type rootComponentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider parentProvider, class System.Type rootComponentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parentProvider As IServiceProvider, rootComponentType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DesignSurface(IServiceProvider ^ parentProvider, Type ^ rootComponentType);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.DesignSurface : IServiceProvider * Type -&gt; System.ComponentModel.Design.DesignSurface" Usage="new System.ComponentModel.Design.DesignSurface (parentProvider, rootComponentType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parentProvider" Type="System.IServiceProvider" />
        <Parameter Name="rootComponentType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="parentProvider"><span data-ttu-id="cb46d-169">부모 서비스 공급자이거나, 서비스 확인에 사용되는 부모가 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-169">The parent service provider, or <see langword="null" /> if there is no parent used to resolve services.</span></span></param>
        <param name="rootComponentType"><span data-ttu-id="cb46d-170">만들 루트 구성 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-170">The type of root component to create.</span></span></param>
        <summary><span data-ttu-id="cb46d-171"><see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-171">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.DesignSurface" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-172">사용 하 여 <xref:System.ComponentModel.Design.DesignSurface.%23ctor%2A> 생성자에 지정 된 형식의 구성 요소를 만들고 다음 로드 프로세스를 종료 하는 간단한 디자이너 로더를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-172">Using the <xref:System.ComponentModel.Design.DesignSurface.%23ctor%2A> constructor creates a simple designer loader that creates a component of the given type and then ends the loading process.</span></span> <span data-ttu-id="cb46d-173">이 확실 한 방법은 가정에서 디자이너를 만드는 모든 상태를 저장할 때 외부에서 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-173">This is a straightforward way to create a designer, under the assumption that all saving of state will be done externally.</span></span> <span data-ttu-id="cb46d-174">이 호출 하는 내부적으로 <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 루트 구성 요소 형식을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-174">Internally, this calls <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> and passes the root component type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb46d-175"><paramref name="rootComponent" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-175"><paramref name="rootComponent" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-176"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-176">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginLoad">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cb46d-177">로드 프로세스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-177">Begins the loading process.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public void BeginLoad (System.ComponentModel.Design.Serialization.DesignerLoader loader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginLoad(class System.ComponentModel.Design.Serialization.DesignerLoader loader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginLoad (loader As DesignerLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginLoad(System::ComponentModel::Design::Serialization::DesignerLoader ^ loader);" />
      <MemberSignature Language="F#" Value="member this.BeginLoad : System.ComponentModel.Design.Serialization.DesignerLoader -&gt; unit" Usage="designSurface.BeginLoad loader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loader" Type="System.ComponentModel.Design.Serialization.DesignerLoader" />
      </Parameters>
      <Docs>
        <param name="loader"><span data-ttu-id="cb46d-178">디자이너 로드에 사용할 디자이너 로더입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-178">The designer loader to use for loading the designer.</span></span></param>
        <summary><span data-ttu-id="cb46d-179">지정된 디자이너 로더를 사용하여 로드 프로세스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-179">Begins the loading process with the given designer loader.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-180">디자이너 로드 비동기 수 있으므로 로드 하는이 호출이 반환 된 후 진행 계속 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-180">Designer loading can be asynchronous, so the loading may continue to progress after this call has returned.</span></span> <span data-ttu-id="cb46d-181">이벤트 처리기를 연결할는 <xref:System.ComponentModel.Design.IDesignerHost.LoadComplete> 디자인 화면에는 로드 완료 될 때 알림을 받을 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-181">Attach an event handler to the <xref:System.ComponentModel.Design.IDesignerHost.LoadComplete> event to be notified when the design surface has completed loading.</span></span>  
  
 <span data-ttu-id="cb46d-182">후 <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 는 호출을 가져올 수 있습니다 즉시 뷰 디자이너에 대 한 제공 하기 때문에 디자이너 로더 해야 적어도 루트 구성 요소가 비동기적으로 로드 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="cb46d-182">After <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> is called, you can immediately obtain the view for the designer, because designer loaders must provide at least the root component when loading asynchronously.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb46d-183"><paramref name="loader" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-183"><paramref name="loader" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-184"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-184">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public void BeginLoad (Type rootComponentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginLoad(class System.Type rootComponentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginLoad (rootComponentType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginLoad(Type ^ rootComponentType);" />
      <MemberSignature Language="F#" Value="member this.BeginLoad : Type -&gt; unit" Usage="designSurface.BeginLoad rootComponentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootComponentType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="rootComponentType"><span data-ttu-id="cb46d-185">디자인 모드에서 만들 구성 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-185">The type of component to create in design mode.</span></span></param>
        <summary><span data-ttu-id="cb46d-186">로드 프로세스를 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-186">Begins the loading process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-187">때 `rootComponentType` 지정 된 경우 단순히의 인스턴스를 만들고 기본 디자이너 로더를 `rootComponentType` 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-187">When `rootComponentType` is specified, a default designer loader that simply creates an instance of `rootComponentType` will be used.</span></span> <span data-ttu-id="cb46d-188">디자이너 로드 비동기 수 있으므로 로드 하는이 호출이 반환 된 후 진행 계속 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-188">Designer loading can be asynchronous, so the loading may continue to progress after this call has returned.</span></span> <span data-ttu-id="cb46d-189">이벤트 처리기를 연결할는 <xref:System.ComponentModel.Design.IDesignerHost.LoadComplete> 디자인 화면에는 로드 완료 될 때 알림을 받을 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-189">Attach an event handler to the <xref:System.ComponentModel.Design.IDesignerHost.LoadComplete> event to be notified when the design surface has completed loading.</span></span>  
  
 <span data-ttu-id="cb46d-190">후 <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 는 호출을 가져올 수 있습니다 즉시 뷰 디자이너에 대 한 제공 하기 때문에 디자이너 로더 해야 적어도 루트 구성 요소가 비동기적으로 로드 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="cb46d-190">After <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> is called, you can immediately obtain the view for the designer, because designer loaders must provide at least the root component when loading asynchronously.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb46d-191"><xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 메서드는 구성 요소 형식의 인스턴스를 만들고이 인스턴스에 대 한 디자이너를 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-191">The <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> method creates an instance of the component type and initializes a designer for this instance.</span></span> <span data-ttu-id="cb46d-192"><xref:System.ComponentModel.Design.DesignSurface.Loaded> 이 메서드가 반환 되기 전에 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-192">The <xref:System.ComponentModel.Design.DesignSurface.Loaded> event is raised before this method returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb46d-193"><paramref name="rootComponentType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-193"><paramref name="rootComponentType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-194"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-194">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ComponentContainer">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IContainer ComponentContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IContainer ComponentContainer" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.ComponentContainer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ComponentContainer As IContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::IContainer ^ ComponentContainer { System::ComponentModel::IContainer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ComponentContainer : System.ComponentModel.IContainer" Usage="System.ComponentModel.Design.DesignSurface.ComponentContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-195">디자인 화면 내의 <see cref="T:System.ComponentModel.IContainer" /> 구현을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-195">Gets the <see cref="T:System.ComponentModel.IContainer" /> implementation within the design surface.</span></span></summary>
        <value><span data-ttu-id="cb46d-196">디자인 화면 내의 <see cref="T:System.ComponentModel.IContainer" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-196">The <see cref="T:System.ComponentModel.IContainer" /> implementation within the design surface.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-197"><xref:System.ComponentModel.Design.DesignSurface.ComponentContainer%2A> 속성이 현재 디자인 모드에 있는 모든 개체를 보유 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-197">The <xref:System.ComponentModel.Design.DesignSurface.ComponentContainer%2A> property holds all objects that are currently in design mode.</span></span> <span data-ttu-id="cb46d-198">구성 요소에 추가 될 때 <xref:System.ComponentModel.Design.DesignSurface.ComponentContainer%2A>를 해당 디자이너에 있는 경우 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-198">When components are added to <xref:System.ComponentModel.Design.DesignSurface.ComponentContainer%2A>, their designer, if any, is loaded.</span></span> <span data-ttu-id="cb46d-199">구성 요소는 디자인 화면에 대 한 전체 액세스를 제공 하는 사이트와 함께 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-199">The component is sited with a site that provides full access to the design surface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-200"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-200">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateComponent">
      <MemberSignature Language="C#" Value="protected internal virtual System.ComponentModel.IComponent CreateComponent (Type componentType);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ComponentModel.IComponent CreateComponent(class System.Type componentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateComponent (componentType As Type) As IComponent" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::ComponentModel::IComponent ^ CreateComponent(Type ^ componentType);" />
      <MemberSignature Language="F#" Value="abstract member CreateComponent : Type -&gt; System.ComponentModel.IComponent&#xA;override this.CreateComponent : Type -&gt; System.ComponentModel.IComponent" Usage="designSurface.CreateComponent componentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("CreateComponent has been replaced by CreateInstance and will be removed after Beta2")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="componentType"><span data-ttu-id="cb46d-201">만들 구성 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-201">The type of component to create.</span></span></param>
        <summary><span data-ttu-id="cb46d-202">구성 요소의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-202">Creates an instance of a component.</span></span></summary>
        <returns><span data-ttu-id="cb46d-203">새로 만들어진 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-203">The newly created component.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-204"><xref:System.ComponentModel.Design.DesignSurface.CreateComponent%2A> 디자인 화면에서 호출 됩니다 <xref:System.ComponentModel.Design.IDesignerHost.CreateComponent%2A> 메서드는 구성 요소의 인스턴스를 만들려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-204">The <xref:System.ComponentModel.Design.DesignSurface.CreateComponent%2A> method is called by the design surface's <xref:System.ComponentModel.Design.IDesignerHost.CreateComponent%2A> method to create an instance of a component.</span></span> <span data-ttu-id="cb46d-205">구성 요소를 작성 하 고 디자인 화면에서 공용 컨테이너에 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-205">The component should be created and added to the public container on the design surface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb46d-206"><paramref name="componentType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-206"><paramref name="componentType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-207"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-207">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDesigner">
      <MemberSignature Language="C#" Value="protected internal virtual System.ComponentModel.Design.IDesigner CreateDesigner (System.ComponentModel.IComponent component, bool rootDesigner);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ComponentModel.Design.IDesigner CreateDesigner(class System.ComponentModel.IComponent component, bool rootDesigner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateDesigner (component As IComponent, rootDesigner As Boolean) As IDesigner" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::ComponentModel::Design::IDesigner ^ CreateDesigner(System::ComponentModel::IComponent ^ component, bool rootDesigner);" />
      <MemberSignature Language="F#" Value="abstract member CreateDesigner : System.ComponentModel.IComponent * bool -&gt; System.ComponentModel.Design.IDesigner&#xA;override this.CreateDesigner : System.ComponentModel.IComponent * bool -&gt; System.ComponentModel.Design.IDesigner" Usage="designSurface.CreateDesigner (component, rootDesigner)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.IDesigner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
        <Parameter Name="rootDesigner" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="cb46d-208">디자이너가 만들어질 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-208">The component for which the designer should be created.</span></span></param>
        <param name="rootDesigner"><span data-ttu-id="cb46d-209">루트 디자이너를 만들려면 <see langword="true" />이고, 일반 디자이너를 만들려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-209"><see langword="true" /> to create a root designer; <see langword="false" /> to create a normal designer.</span></span></param>
        <summary><span data-ttu-id="cb46d-210">구성 요소가 컨테이너에 추가되면 디자이너를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-210">Creates a designer when a component is added to the container.</span></span></summary>
        <returns><span data-ttu-id="cb46d-211">요청한 디자이너의 인스턴스이거나, 일치하는 디자이너를 찾을 수 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-211">An instance of the requested designer, or <see langword="null" /> if no matching designer could be found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-212">합니다 <xref:System.ComponentModel.Design.DesignSurface.CreateDesigner%2A> 디자인 화면의 메서드는 <xref:System.ComponentModel.IContainer> 구성 요소를 컨테이너에 추가 되 면 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-212">The <xref:System.ComponentModel.Design.DesignSurface.CreateDesigner%2A> method is called by the design surface's <xref:System.ComponentModel.IContainer> when a component is added to the container.</span></span> <span data-ttu-id="cb46d-213">이 메서드는 디자이너를 만들지만 초기화 하지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-213">This method creates a designer, but does not initialize it.</span></span> <span data-ttu-id="cb46d-214">반환 시 디자이너 컨테이너에서 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-214">When it returns, the designer is initialized by the container.</span></span>  
  
 <span data-ttu-id="cb46d-215"><xref:System.ComponentModel.Design.DesignSurface.CreateDesigner%2A> 두 가지 유형의 디자이너를 만들 수 있습니다: 루트 디자이너와 일반 디자이너입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-215"><xref:System.ComponentModel.Design.DesignSurface.CreateDesigner%2A> can create two different types of designers: root designers and normal designers.</span></span> <span data-ttu-id="cb46d-216">루트 디자이너는 디자인 화면에서 정의로 컨테이너에 추가 하는 첫 번째 구성 요소는 루트 구성 요소에 대 한 디자이너입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-216">A root designer is a designer for the root component in the design surface, which by definition is the first component added to the container.</span></span> <span data-ttu-id="cb46d-217">루트 디자이너는 최종 사용자에 게 표시 하는 사용자 인터페이스에 대 한 점에서 일반 디자이너를 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-217">Root designers differ from normal designers because they are responsible for the user interface presented to the end user.</span></span> <span data-ttu-id="cb46d-218">루트 디자이너는 일반적으로이 인터페이스를 제공 하는 디자인 화면에 디자이너의 나머지 부분으로 조정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-218">Root designers typically coordinate with the rest of the designers on a design surface to provide this interface.</span></span>  
  
 <span data-ttu-id="cb46d-219">이 메서드의 기본 구현에 위임 <xref:System.ComponentModel.TypeDescriptor>전달 <xref:System.ComponentModel.Design.IRootDesigner> 루트 디자이너에 대 한 디자이너 유형으로 또는 <xref:System.ComponentModel.Design.IDesigner> 일반 디자이너에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-219">The default implementation of this method delegates to <xref:System.ComponentModel.TypeDescriptor>, passing in <xref:System.ComponentModel.Design.IRootDesigner> as the designer type for root designers, or <xref:System.ComponentModel.Design.IDesigner> for normal designers.</span></span> <span data-ttu-id="cb46d-220">디자이너는 특정 유형의 요청에이 메서드를 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-220">You can override this method to request a specific type of designer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb46d-221"><paramref name="component" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-221"><paramref name="component" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-222"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-222">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected internal virtual object CreateInstance (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance object CreateInstance(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Object ^ CreateInstance(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : Type -&gt; obj&#xA;override this.CreateInstance : Type -&gt; obj" Usage="designSurface.CreateInstance type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="cb46d-223">만들 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-223">The type to create.</span></span></param>
        <summary><span data-ttu-id="cb46d-224">지정된 형식의 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-224">Creates an instance of the given type.</span></span></summary>
        <returns><span data-ttu-id="cb46d-225">새로 만든 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-225">The newly created object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-226">경우 `type` 되는 <xref:System.ComponentModel.IComponent>, <xref:System.ComponentModel.Design.DesignSurface.CreateInstance%2A> 형식의 생성자에 대 한 검색 <xref:System.ComponentModel.IContainer> 먼저 뒤에 빈 생성자.</span><span class="sxs-lookup"><span data-stu-id="cb46d-226">If `type` is an <xref:System.ComponentModel.IComponent>, <xref:System.ComponentModel.Design.DesignSurface.CreateInstance%2A> searches for a constructor of type <xref:System.ComponentModel.IContainer> first, followed by an empty constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb46d-227"><paramref name="type" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-227"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-228"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-228">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateNestedContainer">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cb46d-229">중첩 컨트롤 또는 구성 요소에 적합한 컨테이너를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-229">Creates a container suitable for nesting controls or components.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateNestedContainer">
      <MemberSignature Language="C#" Value="public System.ComponentModel.INestedContainer CreateNestedContainer (System.ComponentModel.IComponent owningComponent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.INestedContainer CreateNestedContainer(class System.ComponentModel.IComponent owningComponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateNestedContainer (owningComponent As IComponent) As INestedContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::INestedContainer ^ CreateNestedContainer(System::ComponentModel::IComponent ^ owningComponent);" />
      <MemberSignature Language="F#" Value="member this.CreateNestedContainer : System.ComponentModel.IComponent -&gt; System.ComponentModel.INestedContainer" Usage="designSurface.CreateNestedContainer owningComponent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.INestedContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owningComponent" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="owningComponent"><span data-ttu-id="cb46d-230">중첩된 컨테이너를 관리하는 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-230">The component that manages the nested container.</span></span></param>
        <summary><span data-ttu-id="cb46d-231">중첩 컨트롤 또는 구성 요소에 적합한 컨테이너를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-231">Creates a container suitable for nesting controls or components.</span></span></summary>
        <returns><span data-ttu-id="cb46d-232">중첩된 컨테이너입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-232">The nested container.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-233">해당 디자이너를 만들고 적합 한 모든 서비스에 대해 사용할 수 있도록 디자인 화면에서 중첩된 된 컨테이너에 구성 요소를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-233">Adding a component to a nested container creates its designer and makes it eligible for all services available from the design surface.</span></span> <span data-ttu-id="cb46d-234">중첩 된 컨테이너에 추가 하는 구성 요소 serialization에 참여 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-234">Components added to nested containers do not participate in serialization.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb46d-235"><paramref name="owningComponent" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-235"><paramref name="owningComponent" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-236"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-236">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateNestedContainer">
      <MemberSignature Language="C#" Value="public System.ComponentModel.INestedContainer CreateNestedContainer (System.ComponentModel.IComponent owningComponent, string containerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.INestedContainer CreateNestedContainer(class System.ComponentModel.IComponent owningComponent, string containerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateNestedContainer (owningComponent As IComponent, containerName As String) As INestedContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::INestedContainer ^ CreateNestedContainer(System::ComponentModel::IComponent ^ owningComponent, System::String ^ containerName);" />
      <MemberSignature Language="F#" Value="member this.CreateNestedContainer : System.ComponentModel.IComponent * string -&gt; System.ComponentModel.INestedContainer" Usage="designSurface.CreateNestedContainer (owningComponent, containerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.INestedContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owningComponent" Type="System.ComponentModel.IComponent" />
        <Parameter Name="containerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="owningComponent"><span data-ttu-id="cb46d-237">중첩된 컨테이너를 관리하는 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-237">The component that manages the nested container.</span></span></param>
        <param name="containerName"><span data-ttu-id="cb46d-238">중첩된 컨테이너의 추가 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-238">An additional name for the nested container.</span></span></param>
        <summary><span data-ttu-id="cb46d-239">중첩 컨트롤 또는 구성 요소에 적합한 컨테이너를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-239">Creates a container suitable for nesting controls or components.</span></span></summary>
        <returns><span data-ttu-id="cb46d-240">중첩된 컨테이너입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-240">The nested container.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-241">해당 디자이너를 만들고 적합 한 모든 서비스에 대해 사용할 수 있도록 디자인 화면에서 중첩된 된 컨테이너에 구성 요소를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-241">Adding a component to a nested container creates its designer and makes it eligible for all services available from the design surface.</span></span> <span data-ttu-id="cb46d-242">중첩 된 컨테이너에 추가 하는 구성 요소 serialization에 참여 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-242">Components added to nested containers do not participate in serialization.</span></span>  
  
 <span data-ttu-id="cb46d-243">에 대 한 추가 이름을 제공할 수 있습니다 합니다 <xref:System.ComponentModel.Design.DesignSurface.CreateNestedContainer%2A> 에 값을 전달 하 여 메서드 `containerName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-243">You can provide an additional name for the <xref:System.ComponentModel.Design.DesignSurface.CreateNestedContainer%2A> method by passing a value into `containerName`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="cb46d-244"><paramref name="owningComponent" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-244"><paramref name="owningComponent" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-245"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-245">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cb46d-246"><see cref="T:System.ComponentModel.Design.DesignSurface" />에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-246">Releases the resources used by the <see cref="T:System.ComponentModel.Design.DesignSurface" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="designSurface.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb46d-247"><see cref="T:System.ComponentModel.Design.DesignSurface" />에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-247">Releases the resources used by the <see cref="T:System.ComponentModel.Design.DesignSurface" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-248">공용 <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> 메서드는 표준을 따르는 <xref:System.IDisposable> 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-248">The public <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> method follows the standard <xref:System.IDisposable> pattern.</span></span> <span data-ttu-id="cb46d-249">이 메서드를 호출 하는 디자인 화면을 소멸 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-249">Calling this method destroys the design surface.</span></span> <span data-ttu-id="cb46d-250">이 메서드의 보호 된 버전이 `virtual` 일반적인 따릅니다 및 <xref:System.IDisposable> 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-250">The protected version of this method is `virtual` and follows the normal <xref:System.IDisposable> pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb46d-251">때문에 <xref:System.ComponentModel.Design.DesignSurface> 정리, 네이티브 코드가 없는 없는 종료자를 호출 하는 <xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-251">Because <xref:System.ComponentModel.Design.DesignSurface> does not have any native code to clean up, it does not have a finalizer that calls <xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>.</span></span> <span data-ttu-id="cb46d-252">호출 해야 할 경우 <xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>, 종료자를 직접 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-252">If you need to call <xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>, you must add a finalizer yourself.</span></span>  
  
 <span data-ttu-id="cb46d-253"><xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> 사용을 마치면 <xref:System.ComponentModel.Design.DesignSurface>를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-253">Call <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> when you are finished using the <xref:System.ComponentModel.Design.DesignSurface>.</span></span> <span data-ttu-id="cb46d-254"><xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> 메서드를 사용하면 <xref:System.ComponentModel.Design.DesignSurface>를 사용할 수 없게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-254">The <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> method leaves the <xref:System.ComponentModel.Design.DesignSurface> in an unusable state.</span></span> <span data-ttu-id="cb46d-255">호출한 후 <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>에 대 한 모든 참조를 해제 해야 합니다 <xref:System.ComponentModel.Design.DesignSurface> 가비지 수집기에서 메모리를 회수할 수 있도록 하는 <xref:System.ComponentModel.Design.DesignSurface> 차지한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-255">After calling <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>, you must release all references to the <xref:System.ComponentModel.Design.DesignSurface> so the garbage collector can reclaim the memory that the <xref:System.ComponentModel.Design.DesignSurface> was occupying.</span></span> <span data-ttu-id="cb46d-256">자세한 내용은 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 하 고 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-256">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb46d-257"><xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.ComponentModel.Design.DesignSurface>를 호출하십시오.</span><span class="sxs-lookup"><span data-stu-id="cb46d-257">Always call <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> before you release your last reference to the <xref:System.ComponentModel.Design.DesignSurface>.</span></span> <span data-ttu-id="cb46d-258">이렇게 하지 않으면 가비지 수집기가 <xref:System.ComponentModel.Design.DesignSurface> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-258">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.ComponentModel.Design.DesignSurface> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="designSurface.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="cb46d-259">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-259"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="cb46d-260"><see cref="T:System.ComponentModel.Design.DesignSurface" />에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-260">Releases the resources used by the <see cref="T:System.ComponentModel.Design.DesignSurface" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-261">공용 <xref:System.ComponentModel.Design.DesignSurface.Dispose> 메서드는 표준을 따르는 <xref:System.IDisposable> 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-261">The public <xref:System.ComponentModel.Design.DesignSurface.Dispose> method follows the standard <xref:System.IDisposable> pattern.</span></span> <span data-ttu-id="cb46d-262">이 메서드를 호출 하는 디자인 화면을 소멸 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-262">Calling this method destroys the design surface.</span></span> <span data-ttu-id="cb46d-263">이 메서드의 보호 된 버전이 `virtual` 일반적인 따릅니다 및 <xref:System.IDisposable> 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-263">The protected version of this method is `virtual` and follows the normal <xref:System.IDisposable> pattern.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb46d-264">때문에 <xref:System.ComponentModel.Design.DesignSurface> 정리, 네이티브 코드가 없는 없는 종료자를 호출 하는 <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-264">Because <xref:System.ComponentModel.Design.DesignSurface> does not have any native code to clean up, it does not have a finalizer that calls <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>.</span></span> <span data-ttu-id="cb46d-265">호출 해야 할 경우 <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>, 종료자를 직접 추가 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-265">If you need to call <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>, you must add a finalizer yourself.</span></span>  
  
 <span data-ttu-id="cb46d-266">이 메서드는 공용 `Dispose()` 메서드 및 <xref:System.Object.Finalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cb46d-266">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="cb46d-267">`Dispose()` 보호 된 호출 `Dispose(Boolean)` 메서드를 `disposing` 매개 변수 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-267">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="cb46d-268"><xref:System.Object.Finalize%2A> 호출 `Dispose` 사용 하 여 `disposing` 로 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-268"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="cb46d-269">경우는 `disposing` 매개 변수가 true 이면이 메서드는 관리 되는 개체가 보유 한 모든 리소스를 해제이 <xref:System.ComponentModel.Design.DesignSurface> 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-269">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.ComponentModel.Design.DesignSurface> references.</span></span> <span data-ttu-id="cb46d-270">이 메서드는 참조되는 각 개체의 `Dispose()` 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-270">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="cb46d-271">
            <see langword="Dispose" />는 다른 개체에서 여러 번 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-271">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="cb46d-272">재정의 하는 경우 <see langword="Dispose(Boolean)" /> 대 한 이전 호출에서 삭제 된 개체를 참조 하지 않도록 주의 해야 <see langword="Dispose" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-272">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="cb46d-273">구현 하는 방법에 대 한 자세한 내용은 <see langword="Dispose(Boolean)" />를 참조 하세요 [Dispose 메서드 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-273">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="cb46d-274">에 대 한 자세한 내용은 <see langword="Dispose" /> 및 <see cref="M:System.Object.Finalize" />를 참조 하십시오 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Finalize 메서드 재정의](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-274">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public event EventHandler Disposed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Disposed" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Disposed" />
      <MemberSignature Language="VB.NET" Value="Public Event Disposed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Disposed;" />
      <MemberSignature Language="F#" Value="member this.Disposed : EventHandler " Usage="member this.Disposed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-275">디자인 화면이 삭제되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-275">Occurs when the design surface is disposed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-276">화면에는 삭제 된 경우에만 공용 <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> 메서드를 <xref:System.ComponentModel.Design.DesignSurface> 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-276">The surface is only disposed when the public <xref:System.ComponentModel.Design.DesignSurface.Dispose%2A> method on <xref:System.ComponentModel.Design.DesignSurface> is called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DtelLoading">
      <MemberSignature Language="C#" Value="public bool DtelLoading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DtelLoading" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.DtelLoading" />
      <MemberSignature Language="VB.NET" Value="Public Property DtelLoading As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DtelLoading { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DtelLoading : bool with get, set" Usage="System.ComponentModel.Design.DesignSurface.DtelLoading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-277">**디자인 타임 오류 목록**이 로드되고 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-277">Gets a value indicating whether the **Design-time Error List** is loading.</span></span></summary>
        <value><span data-ttu-id="cb46d-278"><see langword="true" /> 경우는 **디자인 타임 오류 목록** 이 고, 그렇지 않으면 로드 <see langword="false" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-278"><see langword="true" /> if the **Design-time Error List** is loading; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ad408380-825a-46d8-9a4a-531b130b88ce"><span data-ttu-id="cb46d-279">Windows Forms 디자이너의 디자인 타임 오류</span><span class="sxs-lookup"><span data-stu-id="cb46d-279">Design-Time Errors in the Windows Forms Designer</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="designSurface.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cb46d-280">디자인 화면의 변경 내용을 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-280">Serializes changes to the design surface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-281"><xref:System.ComponentModel.Design.DesignSurface.Flush%2A> serializer까지 디자인 화면에 대 한 변경 내용을 푸시할 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-281">The <xref:System.ComponentModel.Design.DesignSurface.Flush%2A> method can be called to push changes made to the design surface down to the serializer.</span></span> <span data-ttu-id="cb46d-282">이렇게 하면 디자인 화면 및 직렬화 된 상태로 동기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-282">This ensures that the design surface and its serialized state are synchronized.</span></span> <span data-ttu-id="cb46d-283">이 메서드는 실제 구현 디자인 화면과 연결 된 디자이너 로더 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-283">The actual implementation of this method is forwarded to the designer loader associated with design surface.</span></span> <span data-ttu-id="cb46d-284">디자이너 로더가 변경 될 때까지 지연 하도록 선택할 수 있습니다 <xref:System.ComponentModel.Design.DesignSurface.Flush%2A> 이라고, 또는 serialize 된 데이터를 모든 사용자 변경 내용으로 최신 상태로 되도록 선택할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-284">The designer loader may choose to defer changes until <xref:System.ComponentModel.Design.DesignSurface.Flush%2A> is called, or it may choose to keep the serialized data up to date with all user changes.</span></span> <span data-ttu-id="cb46d-285"><xref:System.ComponentModel.Design.DesignSurface.Flush%2A> 메서드를 사용 하면 디자이너 로더를 사용 하기로 합니다. 모델에 관계 없이 실제 디자인 화면을 사용 하 여 serialize 된 상태가 synchronized가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-285">The <xref:System.ComponentModel.Design.DesignSurface.Flush%2A> method ensures that regardless of the model the designer loader chooses to use, the serialized state is synchronized with the actual design surface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flushed">
      <MemberSignature Language="C#" Value="public event EventHandler Flushed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Flushed" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Flushed" />
      <MemberSignature Language="VB.NET" Value="Public Event Flushed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Flushed;" />
      <MemberSignature Language="F#" Value="member this.Flushed : EventHandler " Usage="member this.Flushed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-286"><see cref="M:System.ComponentModel.Design.DesignSurface.Flush" />의 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 메서드가 호출되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-286">Occurs when a call is made to the <see cref="M:System.ComponentModel.Design.DesignSurface.Flush" /> method of <see cref="T:System.ComponentModel.Design.DesignSurface" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-287">디자이너 로더는 먼저 플러시됩니다 차례로 <xref:System.ComponentModel.Design.DesignSurface.Flushed> 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-287">The designer loader is flushed first, and then the <xref:System.ComponentModel.Design.DesignSurface.Flushed> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type -&gt; obj&#xA;override this.GetService : Type -&gt; obj" Usage="designSurface.GetService serviceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IServiceProvider.GetService(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="cb46d-288">검색할 서비스의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-288">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="cb46d-289">서비스 컨테이너에서 서비스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-289">Gets a service from the service container.</span></span></summary>
        <returns><span data-ttu-id="cb46d-290"><paramref name="serviceType" />을 구현하는 개체이거나 해당 항목의 파생 클래스가 되는 개체입니다. 서비스 컨테이너에 서비스가 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-290">An object that implements, or is a derived class of, <paramref name="serviceType" />, or <see langword="null" /> if the service does not exist in the service container.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-291"><xref:System.ComponentModel.Design.DesignSurface.GetService%2A> 메서드는 디자인 화면의 서비스 컨테이너에 서비스를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-291">The <xref:System.ComponentModel.Design.DesignSurface.GetService%2A> method retrieves a service in the design surface's service container.</span></span> <span data-ttu-id="cb46d-292">또한이 생성 시 디자인 화면에 지정 된 서비스 공급자에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-292">In addition, this will forward to any service provider that was given to the design surface at construction time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.ComponentModel.Design.DesignSurface.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-293">디자인 화면이 현재 로드되어 있는지 여부를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-293">Gets a value indicating whether the design surface is currently loaded.</span></span></summary>
        <value><span data-ttu-id="cb46d-294">디자인 화면이 현재 로드되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-294"><see langword="true" /> if the design surface is currently loaded; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.Design.LoadedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.Design.LoadedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Event Loaded As LoadedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::Design::LoadedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.ComponentModel.Design.LoadedEventHandler " Usage="member this.Loaded : System.ComponentModel.Design.LoadedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.LoadedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-295">디자이너 로드가 완료되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-295">Occurs when the designer load has completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-296"><xref:System.ComponentModel.Design.DesignSurface.Loaded> 성공적으로 로드 뿐만 아니라 실패 한 작업에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-296">The <xref:System.ComponentModel.Design.DesignSurface.Loaded> event is raised for successful loads as well as unsuccessful ones.</span></span> <span data-ttu-id="cb46d-297">이 이벤트 처리기의 코드에서 예외를 throw 하는 경우에 디자이너 로드 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-297">If code in this event handler throws an exception, the designer is unloaded.</span></span>  
  
 <span data-ttu-id="cb46d-298"><xref:System.ComponentModel.Design.LoadedEventArgs> 성공, 로드 하는 경우를 확인 하려면 개체를 사용할 수 있으며 로드 하는 동안 발생 한 오류의 목록의 얻을 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-298">The <xref:System.ComponentModel.Design.LoadedEventArgs> object can be used to determine if loading succeeded, and it can also provide a list of errors that occurred during the load.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cb46d-299">오류는 serialization 시스템 오류를 허용할 수 있는 성공한 로드의 경우에 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-299">Errors can occur for successful loads as well, provided that the serialization system can tolerate errors.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadErrors">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection LoadErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection LoadErrors" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.LoadErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LoadErrors As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ LoadErrors { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LoadErrors : System.Collections.ICollection" Usage="System.ComponentModel.Design.DesignSurface.LoadErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-300">로드 오류의 컬렉션이나 void 컬렉션을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-300">Returns a collection of loading errors or a void collection.</span></span></summary>
        <value><span data-ttu-id="cb46d-301">로드 오류의 <see cref="T:System.Collections.ICollection" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-301">A <see cref="T:System.Collections.ICollection" /> of loading errors.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loading">
      <MemberSignature Language="C#" Value="public event EventHandler Loading;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Loading" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Loading" />
      <MemberSignature Language="VB.NET" Value="Public Event Loading As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Loading;" />
      <MemberSignature Language="F#" Value="member this.Loading : EventHandler " Usage="member this.Loading : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-302">디자이너가 로드되려고 할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-302">Occurs when the designer is about to be loaded.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLoaded">
      <MemberSignature Language="C#" Value="protected virtual void OnLoaded (System.ComponentModel.Design.LoadedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoaded(class System.ComponentModel.Design.LoadedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLoaded (e As LoadedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLoaded(System::ComponentModel::Design::LoadedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLoaded : System.ComponentModel.Design.LoadedEventArgs -&gt; unit&#xA;override this.OnLoaded : System.ComponentModel.Design.LoadedEventArgs -&gt; unit" Usage="designSurface.OnLoaded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Design.LoadedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cb46d-303">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.LoadedEventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-303">A <see cref="T:System.ComponentModel.Design.LoadedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cb46d-304"><see cref="E:System.ComponentModel.Design.DesignSurface.Loaded" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-304">Raises the <see cref="E:System.ComponentModel.Design.DesignSurface.Loaded" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLoading">
      <MemberSignature Language="C#" Value="protected virtual void OnLoading (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLoading(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLoading (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLoading(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLoading : EventArgs -&gt; unit&#xA;override this.OnLoading : EventArgs -&gt; unit" Usage="designSurface.OnLoading e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cb46d-305">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-305">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cb46d-306"><see cref="E:System.ComponentModel.Design.DesignSurface.Loading" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-306">Raises the <see cref="E:System.ComponentModel.Design.DesignSurface.Loading" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnloaded">
      <MemberSignature Language="C#" Value="protected virtual void OnUnloaded (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUnloaded(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUnloaded (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUnloaded(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnloaded : EventArgs -&gt; unit&#xA;override this.OnUnloaded : EventArgs -&gt; unit" Usage="designSurface.OnUnloaded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cb46d-307">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-307">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cb46d-308"><see cref="E:System.ComponentModel.Design.DesignSurface.Unloaded" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-308">Raises the <see cref="E:System.ComponentModel.Design.DesignSurface.Unloaded" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnloading">
      <MemberSignature Language="C#" Value="protected virtual void OnUnloading (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUnloading(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUnloading (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUnloading(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnUnloading : EventArgs -&gt; unit&#xA;override this.OnUnloading : EventArgs -&gt; unit" Usage="designSurface.OnUnloading e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cb46d-309">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-309">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cb46d-310"><see cref="E:System.ComponentModel.Design.DesignSurface.Unloading" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-310">Raises the <see cref="E:System.ComponentModel.Design.DesignSurface.Unloading" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnViewActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnViewActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnViewActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnViewActivate (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnViewActivate(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnViewActivate : EventArgs -&gt; unit&#xA;override this.OnViewActivate : EventArgs -&gt; unit" Usage="designSurface.OnViewActivate e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="cb46d-311">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-311">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="cb46d-312"><see cref="E:System.ComponentModel.Design.DesignSurface.ViewActivated" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-312">Raises the <see cref="E:System.ComponentModel.Design.DesignSurface.ViewActivated" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceContainer">
      <MemberSignature Language="C#" Value="protected System.ComponentModel.Design.ServiceContainer ServiceContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.ServiceContainer ServiceContainer" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.ServiceContainer" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ServiceContainer As ServiceContainer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::ComponentModel::Design::ServiceContainer ^ ServiceContainer { System::ComponentModel::Design::ServiceContainer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceContainer : System.ComponentModel.Design.ServiceContainer" Usage="System.ComponentModel.Design.DesignSurface.ServiceContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ServiceContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-313">서비스 컨테이너를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-313">Gets the service container.</span></span></summary>
        <value><span data-ttu-id="cb46d-314">디자인 화면에 포함된 디자이너에 모든 서비스를 제공하는 서비스 컨테이너입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-314">The service container that provides all services to designers contained within the design surface.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-315">생성 시 <xref:System.ComponentModel.Design.DesignSurface> 이 서비스 컨테이너에 기본 서비스를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-315">At construction time, <xref:System.ComponentModel.Design.DesignSurface> adds default services into this service container.</span></span> <span data-ttu-id="cb46d-316">기본 서비스를 현재 상태로 둘 수 있습니다 있고 제거할 고유한로 교체할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-316">You can leave the default services in their present state, or you can remove them and replace them with your own.</span></span> <span data-ttu-id="cb46d-317">기본 서비스 생성 시에 추가 하는 성능 손실 없이 이므로 모두 요청-생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-317">The default services are all demand-created, so there is no loss in performance for adding them at construction time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-318"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-318">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event EventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Event Unloaded As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : EventHandler " Usage="member this.Unloaded : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-319">디자이너가 언로드를 완료하면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-319">Occurs when a designer has finished unloading.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unloading">
      <MemberSignature Language="C#" Value="public event EventHandler Unloading;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Unloading" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.Unloading" />
      <MemberSignature Language="VB.NET" Value="Public Event Unloading As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Unloading;" />
      <MemberSignature Language="F#" Value="member this.Unloading : EventHandler " Usage="member this.Unloading : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-320">디자이너가 언로드되려고 할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-320">Occurs when a designer is about to unload.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-321">디자이너를 언로드할 때 디자이너의 뷰를 포함 하 여 해당 디자이너에 대 한 전체 상태 소멸 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-321">When a designer unloads, the entire state for that designer is destroyed, including the designer's view.</span></span> <span data-ttu-id="cb46d-322">이 이번에 뷰를 부모로 지정 되지 않아야 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-322">The view should be unparented at this time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public object View { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object View" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.DesignSurface.View" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property View As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ View { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.View : obj" Usage="System.ComponentModel.Design.DesignSurface.View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-323">루트 디자이너에 대한 뷰를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-323">Gets the view for the root designer.</span></span></summary>
        <value><span data-ttu-id="cb46d-324">루트 디자이너에 대한 뷰입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-324">The view for the root designer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-325"><xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 메서드 로드 프로세스를 시작 하기 전에 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-325">The <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> method must be called beforehand to start the loading process.</span></span> <span data-ttu-id="cb46d-326">디자이너 로더가 뷰를 제공 하는 루트 디자이너인 경우 디자이너 로더에 의해 생성 된 첫 번째 개체 이므로 로드 완료 되기 전에 뷰를 반환 하는 것이 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-326">It is possible to return a view before the designer loader finishes loading because the root designer, which supplies the view, is the first object created by the designer loader.</span></span> <span data-ttu-id="cb46d-327">뷰를 사용할 수 없는 경우 <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 예외를 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-327">If a view is unavailable, <xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> raises an exception.</span></span>  
  
 <span data-ttu-id="cb46d-328">뷰 기술 개념이 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-328">The notion of a view technology is obsolete.</span></span> <span data-ttu-id="cb46d-329">그러나 이전 버전과 호환성에 대 한 루트 디자이너에 대 한 인터페이스에 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-329">But, it remains in the interfaces for root designers for backward compatibility.</span></span> <span data-ttu-id="cb46d-330">용도 사용 하 여 사용자 로부터 숨겨집니다 <xref:System.ComponentModel.Design.DesignSurface> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-330">Its use is hidden from anyone using <xref:System.ComponentModel.Design.DesignSurface> objects.</span></span> <span data-ttu-id="cb46d-331"><xref:System.ComponentModel.Design.DesignSurface.View%2A> 속성 지원 되는 기술 루트 디자이너로 다시 전달 하 여 뷰 기술을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-331">The <xref:System.ComponentModel.Design.DesignSurface.View%2A> property hides view technologies by passing the supported technologies back into the root designer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb46d-332">다음 코드 예제에서는 어떻게 <xref:System.ComponentModel.Design.DesignSurface.View%2A> 뷰 기술을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-332">The following code example shows how <xref:System.ComponentModel.Design.DesignSurface.View%2A> hides view technologies.</span></span>  
  
 ```csharp 
 IRootDesigner d;  
  
 ViewTechnology[] supported = d.SupportedTechnologies;  
  
 return d.GetView(supported[0]);
 ``` 
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cb46d-333">디자인 화면이 로드되고 있지 않거나, 디자이너 로더가 아직 루트 디자이너를 만들지 않았거나, 디자인 화면이 로드를 완료했지만 실패한 경우.</span><span class="sxs-lookup"><span data-stu-id="cb46d-333">The design surface is not loading, the designer loader has not yet created a root designer, or the design surface finished the load, but failed.</span></span> <span data-ttu-id="cb46d-334">자세한 내용은 <see cref="P:System.Exception.InnerException" />을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="cb46d-334">More information may available in the <see cref="P:System.Exception.InnerException" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cb46d-335">디자이너가 로드되었지만 이 디자인 화면과 호환되는 뷰를 제공하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-335">The designer loaded, but it does not offer a view compatible with this design surface.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="cb46d-336"><see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</span><span class="sxs-lookup"><span data-stu-id="cb46d-336">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> attached to the <see cref="T:System.ComponentModel.Design.DesignSurface" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ViewActivated">
      <MemberSignature Language="C#" Value="public event EventHandler ViewActivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ViewActivated" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.DesignSurface.ViewActivated" />
      <MemberSignature Language="VB.NET" Value="Public Event ViewActivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ViewActivated;" />
      <MemberSignature Language="F#" Value="member this.ViewActivated : EventHandler " Usage="member this.ViewActivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb46d-337"><see cref="M:System.ComponentModel.Design.IDesignerHost.Activate" /> 메서드가 <see cref="T:System.ComponentModel.Design.IDesignerHost" />에서 호출되면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-337">Occurs when the <see cref="M:System.ComponentModel.Design.IDesignerHost.Activate" /> method has been called on <see cref="T:System.ComponentModel.Design.IDesignerHost" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb46d-338">지원 하려는 경우는 <xref:System.ComponentModel.Design.IDesignerHost.Activate%2A> 메서드, 이벤트 처리기가 디자인 화면의 창으로 전환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cb46d-338">If you want to support the <xref:System.ComponentModel.Design.IDesignerHost.Activate%2A> method, your event handler should activate the window for this design surface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
      </Docs>
    </Member>
  </Members>
</Type>