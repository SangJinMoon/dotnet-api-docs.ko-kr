<Type Name="UndoEngine" FullName="System.ComponentModel.Design.UndoEngine">
  <TypeSignature Language="C#" Value="public abstract class UndoEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UndoEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.UndoEngine" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UndoEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UndoEngine abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="1e9c9-101">디자인 타임에 일반적인 실행 취소/다시 실행 기능을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-101">Specifies generic undo/redo functionality at design time.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e9c9-102"><xref:System.ComponentModel.Design.UndoEngine> 추상 클래스는 디자인 타임에 실행 취소 기능의 기본 구현을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-102">The <xref:System.ComponentModel.Design.UndoEngine> abstract class provides a default implementation of undo functionality at design time.</span></span> <span data-ttu-id="1e9c9-103">실행 취소 단위를 취소할 수 있는 작업의 단일 단위를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-103">An undo unit represents a single unit of undoable work.</span></span> <span data-ttu-id="1e9c9-104">이 단위는 스택에 추가 됩니다 및 사용자 스택을 각 작업 실행을 취소 한 다음 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-104">This unit is added to a stack and the user can then walk the stack to undo each action.</span></span> <span data-ttu-id="1e9c9-105">실행 취소 단위 일반적으로 설정/해제할 수, 즉, 해당 호출 실행 취소를 시작 상태로 응용 프로그램을 두 번 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-105">Undo units typically are designed to toggle, which means that calling undo twice returns the application to its starting state.</span></span>  
  
 <span data-ttu-id="1e9c9-106"><xref:System.ComponentModel.Design.UndoEngine> 클래스 디자이너 내에서 실행 되는 개체의 다음과 같은 특징을 이용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-106">The <xref:System.ComponentModel.Design.UndoEngine> class takes advantage of the following characteristics of objects running within the designer:</span></span>  
  
-   <span data-ttu-id="1e9c9-107">디자이너 로더 원하는 모든 개체 형식으로 유지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-107">All interesting objects can be persisted to some format by the designer loader.</span></span>  
  
-   <span data-ttu-id="1e9c9-108">모든 개체 속성이 변경 되 면 속성 변경 알림을 발생 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-108">All objects raise property-change notifications when a property is changed.</span></span>  
  
-   <span data-ttu-id="1e9c9-109"><xref:System.ComponentModel.Design.IDesignerHost> 여러 개의 작은 작업에 걸쳐 있는 실행 취소 작업을 만드는 데 사용할 수 있는 트랜잭션 개념을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-109"><xref:System.ComponentModel.Design.IDesignerHost> offers the idea of transactions, which can be used to fabricate an undo action that spans multiple smaller actions.</span></span>  
  
 <span data-ttu-id="1e9c9-110">이러한 기능 <xref:System.ComponentModel.Design.UndoEngine> 실행 취소 단위를 자동으로 필요한를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-110">With these features, <xref:System.ComponentModel.Design.UndoEngine> can fabricate any undo units it needs automatically.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1e9c9-111">속성 값을 직접 변경 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-111">Do not change property values directly.</span></span> <span data-ttu-id="1e9c9-112"><xref:System.ComponentModel.Design.UndoEngine> 클래스 적절 한 사용 해야 <xref:System.ComponentModel.TypeDescriptor> 속성 값을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-112">The <xref:System.ComponentModel.Design.UndoEngine> class requires you to use the appropriate <xref:System.ComponentModel.TypeDescriptor> to change property values.</span></span>  
  
 <span data-ttu-id="1e9c9-113"><xref:System.ComponentModel.Design.UndoEngine> 모니터를 만드는 변경 알림을 실행 취소 단위를 하 고 직렬화 된 개체 상태의 단위 자체 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-113"><xref:System.ComponentModel.Design.UndoEngine> monitors for change notifications to create undo units, and the units themselves consist of serialized object states.</span></span> <span data-ttu-id="1e9c9-114">다음 표에서 사용할 수 있어야 하는 경우 서비스를 보여 줍니다. <xref:System.ComponentModel.Design.UndoEngine> 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-114">The following table shows the services that must be available when <xref:System.ComponentModel.Design.UndoEngine> is created.</span></span>  
  
|<span data-ttu-id="1e9c9-115">서비스</span><span class="sxs-lookup"><span data-stu-id="1e9c9-115">Service</span></span>|<span data-ttu-id="1e9c9-116">설명</span><span class="sxs-lookup"><span data-stu-id="1e9c9-116">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.ComponentSerializationService>|<span data-ttu-id="1e9c9-117">이전 버전과 이후 변경 되는 구성 요소에 대 한 속성 및 개체 값을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-117">Saves property and object values for a component before and after a change is made.</span></span>|  
|<xref:System.ComponentModel.Design.IComponentChangeService>|<span data-ttu-id="1e9c9-118">구성 요소에 대 한 변경 내용 실행 취소 엔진을 알립니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-118">Notifies the undo engine of changes made to components.</span></span>|  
|<xref:System.ComponentModel.Design.IDesignerHost>|<span data-ttu-id="1e9c9-119">트랜잭션을 추적 하는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-119">Used to track transactions.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="1e9c9-120">때문에 <xref:System.ComponentModel.Design.UndoEngine> 클래스에 필요한 <xref:System.ComponentModel.Design.Serialization.ComponentSerializationService> 및 <xref:System.ComponentModel.Design.IComponentChangeService>, 디자인 타임에만 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-120">Because the <xref:System.ComponentModel.Design.UndoEngine> class requires <xref:System.ComponentModel.Design.Serialization.ComponentSerializationService> and <xref:System.ComponentModel.Design.IComponentChangeService>, it is available only at design time.</span></span>  
  
 <span data-ttu-id="1e9c9-121">실행 취소 엔진 거래를 추적 하 고, 트랜잭션을 포함 하는 단일 실행 취소 단위를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-121">The undo engine tracks transactions and creates a single undo unit that encompasses a transaction.</span></span> <span data-ttu-id="1e9c9-122">결과적으로, 실행 취소 엔진에는 실행 취소할 수 있는 작업의 기간을 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-122">As a result, the undo engine has control over the duration of an undoable action.</span></span> <span data-ttu-id="1e9c9-123">또한 트랜잭션을 이름을 지정할 수 있습니다, 때문에 실행 취소할 수 있는 작업이 해당 이름을를 현재 트랜잭션에서 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-123">Also, because transactions can be named, undoable actions inherit their names from the current transaction.</span></span> <span data-ttu-id="1e9c9-124">트랜잭션이 없습니다. 사용할 수 있고 변경을 보고에서 실행 취소 엔진 변경 (예를 들어 "변경 속성 'Text'")의 형식에 따라 실행 취소 이름을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-124">If no transaction is available and a change is reported, the undo engine creates an undo name based on the type of change (for example, "Change property 'Text'").</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />
    <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
    <altmember cref="T:System.ComponentModel.Design.IComponentChangeService" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UndoEngine (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (provider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UndoEngine(IServiceProvider ^ provider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="1e9c9-125">부모 서비스 공급자입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-125">A parenting service provider.</span></span></param>
        <summary><span data-ttu-id="1e9c9-126"><see cref="T:System.ComponentModel.Design.UndoEngine" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-126">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.UndoEngine" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e9c9-127"><xref:System.ComponentModel.Design.UndoEngine> 에서 몇 가지 서비스를 필요는 `provider` 유용 하 게 되려면 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-127">The <xref:System.ComponentModel.Design.UndoEngine> requires several services from the `provider` parameter to be useful.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e9c9-128"><paramref name="provider" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="1e9c9-128"><paramref name="provider" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="1e9c9-129">필요한 서비스를 찾을 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-129">A required service cannot be found.</span></span> <span data-ttu-id="1e9c9-130">필요한 서비스는 <see cref="T:System.ComponentModel.Design.UndoEngine" />을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-130">See <see cref="T:System.ComponentModel.Design.UndoEngine" /> for required services.</span></span> <span data-ttu-id="1e9c9-131">이 서비스를 제거한 경우 대체 서비스를 제공해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-131">If you have removed this service, ensure that you provide a replacement.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />
        <altmember cref="T:System.ComponentModel.Design.IDesignerHost" />
        <altmember cref="T:System.IServiceProvider" />
      </Docs>
    </Member>
    <Member MemberName="AddUndoUnit">
      <MemberSignature Language="C#" Value="protected abstract void AddUndoUnit (System.ComponentModel.Design.UndoEngine.UndoUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddUndoUnit(class System.ComponentModel.Design.UndoEngine/UndoUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub AddUndoUnit (unit As UndoEngine.UndoUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void AddUndoUnit(System::ComponentModel::Design::UndoEngine::UndoUnit ^ unit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.ComponentModel.Design.UndoEngine+UndoUnit" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="1e9c9-132">추가할 실행 취소 단위입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-132">The undo unit to add</span></span></param>
        <summary><span data-ttu-id="1e9c9-133"><see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />을 실행 취소 스택에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-133">Adds an <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" /> to the undo stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e9c9-134">만들기는 `unit` 호출 하 여 매개 변수는 <xref:System.ComponentModel.Design.UndoEngine.CreateUndoUnit%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-134">Create the `unit` parameter by calling the <xref:System.ComponentModel.Design.UndoEngine.CreateUndoUnit%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />
      </Docs>
    </Member>
    <Member MemberName="CreateUndoUnit">
      <MemberSignature Language="C#" Value="protected virtual System.ComponentModel.Design.UndoEngine.UndoUnit CreateUndoUnit (string name, bool primary);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.ComponentModel.Design.UndoEngine/UndoUnit CreateUndoUnit(string name, bool primary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateUndoUnit (name As String, primary As Boolean) As UndoEngine.UndoUnit" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::ComponentModel::Design::UndoEngine::UndoUnit ^ CreateUndoUnit(System::String ^ name, bool primary);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.UndoEngine+UndoUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="primary" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="1e9c9-135">만들 단위의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-135">The name of the unit to create.</span></span></param>
        <param name="primary">
          <span data-ttu-id="1e9c9-136">일련의 중첩된 단위에서 첫 번째 단위를 만들 경우 <see langword="true" />이고, 두 번째 이후의 단위를 만들 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-136"><see langword="true" /> to create the first of a series of nested units; <see langword="false" /> to create subsequent nested units.</span></span></param>
        <summary><span data-ttu-id="1e9c9-137">새 <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-137">Creates a new <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</span></span></summary>
        <returns><span data-ttu-id="1e9c9-138">지정된 이름을 가진 새 <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-138">A new <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" /> with a specified name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e9c9-139">기본 구현에서 <xref:System.ComponentModel.Design.UndoEngine.CreateUndoUnit%2A> 메서드는 반환 새 <xref:System.ComponentModel.Design.UndoEngine.UndoUnit>합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-139">The default implementation of the <xref:System.ComponentModel.Design.UndoEngine.CreateUndoUnit%2A> method simply returns a new <xref:System.ComponentModel.Design.UndoEngine.UndoUnit>.</span></span>  
  
 <span data-ttu-id="1e9c9-140">기본적으로 <xref:System.ComponentModel.Design.UndoEngine> 으로 아무 작업도 수행는 `primary` 매개 변수, 하지만 일부 실행 취소 같은 com 구현 `Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit` 디자인 패턴을 주 단위와 해당 자식 사이의 차이 식별 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-140">By default, <xref:System.ComponentModel.Design.UndoEngine> does nothing with the `primary` parameter, but some implementations of undo, such as those involving the COM `Microsoft.VisualStudio.OLE.Interop.IOleParentUndoUnit` design pattern, may need to identify the difference between a primary unit and its children.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardUndoUnit">
      <MemberSignature Language="C#" Value="protected virtual void DiscardUndoUnit (System.ComponentModel.Design.UndoEngine.UndoUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DiscardUndoUnit(class System.ComponentModel.Design.UndoEngine/UndoUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DiscardUndoUnit (unit As UndoEngine.UndoUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DiscardUndoUnit(System::ComponentModel::Design::UndoEngine::UndoUnit ^ unit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="System.ComponentModel.Design.UndoEngine+UndoUnit" />
      </Parameters>
      <Docs>
        <param name="unit"><span data-ttu-id="1e9c9-141">삭제할 단위입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-141">The unit to discard.</span></span></param>
        <summary><span data-ttu-id="1e9c9-142"><see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />을 삭제합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-142">Discards an <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e9c9-143">전에 <xref:System.ComponentModel.Design.UndoEngine.DiscardUndoUnit%2A> 메서드가 호출 되 면 실행 취소 단위를 닫은 후 실행 취소 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-143">Before the <xref:System.ComponentModel.Design.UndoEngine.DiscardUndoUnit%2A> method is called, the undo unit is closed and then undone.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1e9c9-144">
          <see cref="T:System.ComponentModel.Design.UndoEngine" />에서 사용하는 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-144">Releases the resources used by the <see cref="T:System.ComponentModel.Design.UndoEngine" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1e9c9-145">
          <see cref="T:System.ComponentModel.Design.UndoEngine" />에서 사용하는 모든 리소스를 해제합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-145">Releases all resources used by the <see cref="T:System.ComponentModel.Design.UndoEngine" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="1e9c9-146">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-146"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="1e9c9-147"><see cref="T:System.ComponentModel.Design.UndoEngine" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-147">Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Design.UndoEngine" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.UndoEngine.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e9c9-148"><see cref="T:System.ComponentModel.Design.UndoEngine" />을 사용하거나 사용하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-148">Enables or disables the <see cref="T:System.ComponentModel.Design.UndoEngine" />.</span></span></summary>
        <value>
          <span data-ttu-id="1e9c9-149"><see cref="T:System.ComponentModel.Design.UndoEngine" />가 사용되는 경우 <see langword="true" />, 아닌 경우 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-149"><see langword="true" /> if the <see cref="T:System.ComponentModel.Design.UndoEngine" /> is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredService">
      <MemberSignature Language="C#" Value="protected object GetRequiredService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetRequiredService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetRequiredService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetRequiredService(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="1e9c9-150">검색할 서비스의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-150">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="1e9c9-151">요청한 서비스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-151">Gets the requested service.</span></span></summary>
        <returns><span data-ttu-id="1e9c9-152">요청한 서비스입니다(있을 경우).</span><span class="sxs-lookup"><span data-stu-id="1e9c9-152">The requested service, if found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e9c9-153"><paramref name="serviceType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="1e9c9-153"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="1e9c9-154"><paramref name="serviceType" />이 필요하지만 찾을 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-154"><paramref name="serviceType" /> is required but cannot be found.</span></span> <span data-ttu-id="1e9c9-155">이 서비스를 제거한 경우 대체 서비스를 제공해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-155">If you have removed this service, ensure that you provide a replacement.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="1e9c9-156">검색할 서비스의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-156">The type of service to retrieve.</span></span></param>
        <summary><span data-ttu-id="1e9c9-157">요청한 서비스를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-157">Gets the requested service.</span></span></summary>
        <returns><span data-ttu-id="1e9c9-158">요청한 서비스이거나, 요청한 서비스가 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-158">The requested service, or <see langword="null" /> if the requested service is not found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1e9c9-159"><paramref name="serviceType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="1e9c9-159"><paramref name="serviceType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OnUndoing">
      <MemberSignature Language="C#" Value="protected virtual void OnUndoing (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUndoing(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUndoing (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUndoing(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="1e9c9-160">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-160">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="1e9c9-161"><see cref="E:System.ComponentModel.Design.UndoEngine.Undoing" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-161">Raises the <see cref="E:System.ComponentModel.Design.UndoEngine.Undoing" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUndone">
      <MemberSignature Language="C#" Value="protected virtual void OnUndone (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUndone(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUndone (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUndone(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="1e9c9-162">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-162">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="1e9c9-163"><see cref="E:System.ComponentModel.Design.UndoEngine.Undone" /> 이벤트를 발생시킵니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-163">Raises the <see cref="E:System.ComponentModel.Design.UndoEngine.Undone" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Undoing">
      <MemberSignature Language="C#" Value="public event EventHandler Undoing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Undoing" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.UndoEngine.Undoing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Undoing As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Undoing;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e9c9-164">실행 취소 작업이 수행되기 직전에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-164">Occurs immediately before an undo action is performed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndoInProgress">
      <MemberSignature Language="C#" Value="public bool UndoInProgress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UndoInProgress" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.UndoEngine.UndoInProgress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UndoInProgress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UndoInProgress { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e9c9-165">실행 취소 작업이 처리 중인지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-165">Indicates if an undo action is in progress.</span></span></summary>
        <value>
          <span data-ttu-id="1e9c9-166">실행 취소 작업이 처리 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-166"><see langword="true" /> if an undo action is in progress; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Undone">
      <MemberSignature Language="C#" Value="public event EventHandler Undone;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Undone" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Design.UndoEngine.Undone" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Undone As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Undone;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1e9c9-167">실행 취소 작업이 수행된 직후에 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-167">Occurs immediately after an undo action is performed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1e9c9-168"><xref:System.ComponentModel.Design.UndoEngine.Undone> 예외가 발생 하는 경우에 이벤트를 항상 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="1e9c9-168">The <xref:System.ComponentModel.Design.UndoEngine.Undone> event is always raised, even if an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>