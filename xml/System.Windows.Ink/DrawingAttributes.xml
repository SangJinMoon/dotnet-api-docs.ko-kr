<Type Name="DrawingAttributes" FullName="System.Windows.Ink.DrawingAttributes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="083fe4763417420c7258b32aab8515e52b095a8c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30650587" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DrawingAttributes : System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrawingAttributes extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Ink.DrawingAttributes" />
  <TypeSignature Language="VB.NET" Value="Public Class DrawingAttributes&#xA;Implements INotifyPropertyChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class DrawingAttributes : System::ComponentModel::INotifyPropertyChanged" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <see cref="T:System.Windows.Ink.Stroke" />의 모양을 지정합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A> 속성 설정 예: 색, 너비, 투명도, 및에 대 한 스타일러스 팁의 모양을 지정 하는 <xref:System.Windows.Ink.Stroke>합니다.  
  
 사용 하 여는 <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> 속성에 추가 된 선에 대 한 그리기 특성을 지정 하는 <xref:System.Windows.Controls.InkCanvas>합니다. 스트로크에 뒤에 추가는 <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> 업데이트 된 특성이 변경 표시를 진행 합니다. 에 이미 있는 선의 모양은 <xref:System.Windows.Controls.InkCanvas> 변경 되지 않습니다.  
  
 <xref:System.Windows.Ink.DrawingAttributes> 클래스의 인스턴스에 대한 초기 속성 값 목록은 <xref:System.Windows.Ink.DrawingAttributes> 생성자를 참조하십시오.  
  
<a name="xamlTextUsage_DrawingAttributes"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 클래스는 XAML에서 일반적으로 사용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개를 사용 하는 방법을 <xref:System.Windows.Ink.DrawingAttributes> 펜 및는 highlighter를 사용 하 여 동일한 시뮬레이션 하는 개체 <xref:System.Windows.Controls.InkCanvas>합니다. 이 예제에서는 XAML 파일의 루트 요소는 가정 된 <xref:System.Windows.Controls.DockPanel> 호출 `root`합니다. 또한 라고 가정는 <xref:System.Windows.Controls.Button> 호출 `switchHighlighter` 하 고는 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 이벤트가이 예에서 정의 된 이벤트 처리기에 연결 되어 있습니다.  
  
 [!code-csharp[DrawingAttributes#3](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#3)]
 [!code-vb[DrawingAttributes#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawingAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DrawingAttributes();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.DrawingAttributes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서는 <xref:System.Windows.Ink.DrawingAttributes> 클래스의 인스턴스에 대한 초기 속성 값을 보여 줍니다.  
  
|속성|초기 값|  
|--------------|-------------------|  
|<xref:System.Windows.Ink.DrawingAttributes.Color%2A>|검정|  
|<xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.Height%2A>|장치 독립적 픽셀 (DIP)|  
|<xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>|<xref:System.Windows.Ink.StylusTip.Ellipse?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>|<xref:System.Windows.Media.Matrix.Identity%2A?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.Width%2A>|2 DIP|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPropertyData">
      <MemberSignature Language="C#" Value="public void AddPropertyData (Guid propertyDataId, object propertyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPropertyData(valuetype System.Guid propertyDataId, object propertyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPropertyData (propertyDataId As Guid, propertyData As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPropertyData(Guid propertyDataId, System::Object ^ propertyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
        <Parameter Name="propertyData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">사용자 지정 속성과 연결할 <see cref="T:System.Guid" />입니다.</param>
        <param name="propertyData">사용자 지정 속성의 값입니다. <c>propertyData</c>는 <see cref="T:System.Char" />, <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" /> 형식이거나 이러한 데이터 형식의 배열이어야 합니다. 그러나 <see cref="T:System.String" /> 형식의 배열은 허용되지 않습니다.</param>
        <summary>
          <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체에 사용자 지정 속성을 추가합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Ink.DrawingAttributes.AddPropertyData%2A> 메서드를 사용 하면 사용자 지정 속성을 추가할 수는 <xref:System.Windows.Ink.DrawingAttributes> 개체입니다. 사용자 고유의 스트로크를 렌더링 하 고 추가 정보를 제공 하는 경우에 유용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 추가 하 고 검색에서 사용자 지정 속성의 <xref:System.Windows.Ink.DrawingAttributes> 개체입니다. 이 예에서는 나타내는 속성을 추가 하는지 여부를 <xref:System.Windows.Ink.DrawingAttributes> 펜 또는 highlighter 개체는 합니다. 코드는 `ChangeColors_Click` 에 선에 대 한 새로운 색을 렌더링 하는 이벤트 처리기는 <xref:System.Windows.Controls.InkCanvas> 사용 하는 <xref:System.Windows.Ink.DrawingAttributes> 개체 `inkDA`합니다. 이 예에서는 라고 가정는 <xref:System.Windows.Controls.InkCanvas> 라는 `inkCanvas1`, 두 한지 <xref:System.Windows.Ink.DrawingAttributes> 개체의 명명 된 `inkDA`, 및 `highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyData" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />가 빈 <see cref="T:System.Guid" />인 경우  
  
 또는  
  
 <paramref name="propertyData" />가 <see langword="Parameters" /> 섹션에 나열된 허용되는 데이터 형식 중 하나가 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="AttributeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event AttributeChanged As PropertyDataChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Ink::PropertyDataChangedEventHandler ^ AttributeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체의 속성이 변경될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 핸들의 <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> 이벤트입니다. 이 예에서는 라고 가정는 <xref:System.Windows.Ink.DrawingAttributes> 호출 개체 `inkDA` 하 고는 <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> 이벤트가이 예에서 정의 된 이벤트 처리기에 연결 되어 있습니다.  
  
 [!code-csharp[DrawingAttributes#6](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#6)]
 [!code-vb[DrawingAttributes#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Ink.DrawingAttributes Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Ink.DrawingAttributes Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DrawingAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Ink::DrawingAttributes ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.DrawingAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체를 복사합니다.</summary>
        <returns>
          <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체의 복사본입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Ink.DrawingAttributes.Clone%2A> 메서드를 새로 만들고 <xref:System.Windows.Ink.DrawingAttributes> 개체를 현재 개체와 동일한 값으로 채웁니다. 모든 사용자 지정 속성이 복사 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 복사 하는 <xref:System.Windows.Ink.DrawingAttributes> 개체입니다.  
  
 [!code-csharp[DrawingAttributes#8](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#8)]
 [!code-vb[DrawingAttributes#8](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Color Color { System::Windows::Media::Color get(); void set(System::Windows::Media::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.Stroke" />의 색을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Ink.Stroke" />의 색입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_Color"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 속성은 일반적으로 XAML에서 사용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하 여 <xref:System.Windows.Ink.DrawingAttributes.Color%2A> 속성입니다. 이 예제에서는 가정 응용 프로그램에 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`와 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 라는 개체 `inkDA` 및 `highlighterDA`합니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Ink.DrawingAttributes> 클래스 개요입니다.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsPropertyData">
      <MemberSignature Language="C#" Value="public bool ContainsPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.ContainsPropertyData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsPropertyData (propertyDataId As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsPropertyData(Guid propertyDataId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">
          <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체에서 찾을 <see cref="T:System.Guid" />입니다.</param>
        <summary>지정한 속성 데이터 ID가 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체에 있는지 여부를 나타내는 값을 반환합니다.</summary>
        <returns>
          지정한 속성 데이터 ID가 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 추가 하 고 검색에서 사용자 지정 속성의 <xref:System.Windows.Ink.DrawingAttributes> 개체입니다. 이 예에서는 나타내는 속성을 추가 하는지 여부를 <xref:System.Windows.Ink.DrawingAttributes> 펜 또는 highlighter 개체는 합니다. `ChangeColors_Click` 에 저장 된 모든 스트로크를 변경 하는 이벤트 처리기는 <xref:System.Windows.Controls.InkCanvas> 와 <xref:System.Windows.Ink.DrawingAttributes> 호출 `inkDA` 새로운 색으로 합니다. 이 예에서는 라고 가정는 <xref:System.Windows.Controls.InkCanvas> 라는 `inkCanvas1`, 두 한지 <xref:System.Windows.Ink.DrawingAttributes> 개체의 명명 된 `inkDA`, 및 `highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">현재 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체와 비교할 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체입니다.</param>
        <summary>지정된 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체가 현재 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체와 같은지 여부를 확인합니다.</summary>
        <returns>
          개체가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 개체는 다음 속성이 같은지:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
> [!NOTE]
>  <xref:System.Windows.Ink.DrawingAttributes.Equals%2A> 메서드 같음에 대 한 사용자 지정 속성을 확인 하지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 두 개의 비교 <xref:System.Windows.Ink.DrawingAttributes> 같음에 대 한 개체입니다. 때문에 <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, 및 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 속성에 `attributes1` 및 `attributes2` "DrawingAttributes 같은지" 메시지가 표시 됩니다는 동일한 값으로 설정 됩니다.  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#12](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#12)]
[!code-vb[DrawingAttributes#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FitToCurve">
      <MemberSignature Language="C#" Value="public bool FitToCurve { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FitToCurve" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.FitToCurve" />
      <MemberSignature Language="VB.NET" Value="Public Property FitToCurve As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FitToCurve { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.Stroke" />를 렌더링하는 데 베지어 다듬기가 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          베지어 다듬기를 사용하여 <see cref="T:System.Windows.Ink.Stroke" />를 렌더링하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_FitToCurve"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 속성은 일반적으로 XAML에서 사용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하 여 <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A> 속성입니다. 이 예제에서는 가정 응용 프로그램에 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`와 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 라는 개체 `inkDA` 및 `highlighterDA`합니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Ink.DrawingAttributes> 클래스 개요입니다.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
        <returns>현재 <see cref="T:System.Object" />의 해시 코드입니다.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyData">
      <MemberSignature Language="C#" Value="public object GetPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyData (propertyDataId As Guid) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPropertyData(Guid propertyDataId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">가져올 사용자 지정 속성과 연결된 <see cref="T:System.Guid" />입니다.</param>
        <summary>지정한 <see cref="T:System.Guid" />와 연결된 사용자 지정 속성의 값을 가져옵니다.</summary>
        <returns>지정한 <see cref="T:System.Guid" />와 연결된 사용자 지정 속성의 값입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A> 에 추가 하는 사용자 지정 속성에 액세스 하는 메서드는 <xref:System.Windows.Ink.DrawingAttributes> 개체입니다. <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A> 값 설정 되지 않은 경우 기본 제공 속성의 기본값을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 추가 하 고 검색에서 사용자 지정 속성의 <xref:System.Windows.Ink.DrawingAttributes> 개체입니다. 이 예에서는 나타내는 속성을 추가 하는지 여부를 <xref:System.Windows.Ink.DrawingAttributes> 펜 또는 highlighter 개체는 합니다. 코드는 `ChangeColors_Click` 에 선에 대 한 새로운 색을 렌더링 하는 이벤트 처리기는 <xref:System.Windows.Controls.InkCanvas> 사용 하는 <xref:System.Windows.Ink.DrawingAttributes> 개체 `inkDA`합니다. 이 예에서는 라고 가정는 <xref:System.Windows.Controls.InkCanvas> 라는 `inkCanvas1`, 두 한지 <xref:System.Windows.Ink.DrawingAttributes> 개체의 명명 된 `inkDA`, 및 `highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />가 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체의 사용자 지정 속성과 연결되지 않은 경우</exception>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyDataIds">
      <MemberSignature Language="C#" Value="public Guid[] GetPropertyDataIds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid[] GetPropertyDataIds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyDataIds" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyDataIds () As Guid()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Guid&gt; ^ GetPropertyDataIds();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.StrokeCollection" />과 연결된 사용자 지정 속성의 GUID를 반환합니다.</summary>
        <returns>속성 데이터 ID를 나타내는 <see cref="T:System.Guid" /> 형식의 배열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 기본 제공 속성에 대 한 Guid는 <xref:System.Windows.Ink.DrawingAttributes> 클래스는 <xref:System.Windows.Ink.DrawingAttributeIds> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서 속성 데이터 id를 가져오는 방법을 보여 줍니다는 <xref:System.Windows.Ink.DrawingAttributes> 개체입니다. 이 예에서는 가정 하는 <xref:System.Windows.Ink.DrawingAttributes> 호출 `inkDA` 가 선언 되었습니다.  
  
 [!code-csharp[DrawingAttributes#7](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#7)]
 [!code-vb[DrawingAttributes#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.Stroke" />를 그리는 데 사용된 스타일러스의 높이를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Ink.Stroke" />를 그리는 데 사용된 스타일러스의 높이를 나타내는 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 요인의 너비와 높이 영향을 줄는 <xref:System.Windows.Ink.Stroke> 렌더링할 때 있지만 값이 아니라는 <xref:System.Windows.Ink.DrawingAttributes.Height%2A> 속성입니다.  
  
-   스타일러스 적용할 압력을 때의 <xref:System.Windows.Ink.Stroke> 그려집니다.  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> 속성 값  
  
 설정 하는 경우는 <xref:System.Windows.Ink.DrawingAttributes.Height%2A> 속성 0를 장치 독립적 픽셀 (DIP)를 2 DIP로 변경 됩니다.  
  
<a name="xamlTextUsage_Height"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 속성은 일반적으로 XAML에서 사용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하 여 <xref:System.Windows.Ink.DrawingAttributes.Height%2A> 속성입니다. 이 예제에서는 가정 응용 프로그램에 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`와 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 라는 개체 `inkDA` 및 `highlighterDA`합니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Ink.DrawingAttributes> 클래스 개요입니다.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> 속성이 <see cref="F:System.Double.Epsilon" /> 또는 <see cref="F:System.Double.NaN" />보다 작은 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnorePressure">
      <MemberSignature Language="C#" Value="public bool IgnorePressure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePressure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IgnorePressure" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnorePressure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnorePressure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>렌더링된 <see cref="T:System.Windows.Ink.Stroke" />의 두께가 적용된 압력에 따라 변경되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          스트로크 두께가 일정함을 나타내려면 <see langword="true" />이고, 압력이 증가할 때 렌더링된 <see cref="T:System.Windows.Ink.Stroke" />의 두께가 늘어남을 나타내려면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_IgnorePressure"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 속성은 일반적으로 XAML에서 사용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하 여 <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A> 속성입니다. 이 예제에서는 가정 응용 프로그램에 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`와 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 라는 개체 `inkDA` 및 `highlighterDA`합니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Ink.DrawingAttributes> 클래스 개요입니다.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighlighter">
      <MemberSignature Language="C#" Value="public bool IsHighlighter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHighlighter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IsHighlighter" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHighlighter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHighlighter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.Stroke" />가 형광펜 모양인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Ink.Stroke" />를 형광펜으로 렌더링하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> 속성이로 설정 되어 `true`, <xref:System.Windows.Ink.Stroke> 은 약간을 허용 하는 아래 선을 표시 합니다.  
  
<a name="xamlTextUsage_IsHighlighter"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 속성은 일반적으로 XAML에서 사용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하 여 <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> 속성입니다. 이 예제에서는 가정 응용 프로그램에 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`와 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 라는 개체 `inkDA` 및 `highlighterDA`합니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Ink.DrawingAttributes> 클래스 개요입니다.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public static readonly double MaxHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeight As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MaxHeight;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> 속성에 허용되는 가장 큰 값을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Ink.DrawingAttributes.MaxHeight> 값이 허용 된 제한 내에 있는지 확인 하기 위해 필드는 <xref:System.Windows.Ink.DrawingAttributes.Height%2A> 속성입니다. 값 제약 알 수 없는 소스에서 제공 하는 경우이 작업을 수행 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Ink.DrawingAttributes.Height%2A> 의 속성은 <xref:System.Windows.Ink.DrawingAttributes> 유효한 값으로 설정 됩니다. 이 예에서는 라고 가정는 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`합니다.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public static readonly double MaxWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidth As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MaxWidth;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> 속성에 허용되는 가장 큰 값을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Ink.DrawingAttributes.MaxWidth> 값이 허용 된 제한 내에 있는지 확인 하기 위해 필드는 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 속성입니다. 값 제약 알 수 없는 소스에서 제공 하는 경우이 작업을 수행 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 의 속성은 <xref:System.Windows.Ink.DrawingAttributes> 유효한 값으로 설정 됩니다. 이 예에서는 라고 가정는 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`합니다.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public static readonly double MinHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeight As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MinHeight;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> 속성에 허용되는 가장 작은 값을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Ink.DrawingAttributes.MinHeight> 값이 허용 된 제한 내에 있는지 확인 하기 위해 필드는 <xref:System.Windows.Ink.DrawingAttributes.Height%2A> 속성입니다. 값 제약 알 수 없는 소스에서 제공 하는 경우이 작업을 수행 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Ink.DrawingAttributes.Height%2A> 의 속성은 <xref:System.Windows.Ink.DrawingAttributes> 유효한 값으로 설정 됩니다. 이 예에서는 라고 가정는 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`합니다.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public static readonly double MinWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidth As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MinWidth;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> 속성에 허용되는 가장 작은 값을 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Ink.DrawingAttributes.MinWidth> 값이 허용 된 제한 내에 있는지 확인 하기 위해 필드는 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 속성입니다. 값 제약 알 수 없는 소스에서 제공 하는 경우이 작업을 수행 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 의 속성은 <xref:System.Windows.Ink.DrawingAttributes> 유효한 값으로 설정 됩니다. 이 예에서는 라고 가정는 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`합니다.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAttributeChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAttributeChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAttributeChanged (e As PropertyDataChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAttributeChanged(System::Windows::Ink::PropertyDataChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.  
  
 또한 <xref:System.Windows.Ink.DrawingAttributes.OnAttributeChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이는 파생 클래스에서 이벤트를 처리하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" />가 <see langword="null" />인 경우</exception>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> 파생된 클래스에서 호출 된 <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> 하려면 등록 된 대리자가 이벤트를 받도록 기본 클래스에 대 한 메서드.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::ComponentModel::PropertyChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">EventArgs</param>
        <summary>
          <see cref="T:System.Windows.Ink.DrawingAttributes" /> 속성이 변경될 때 발생합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyDataChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyDataChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyDataChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyDataChanged (e As PropertyDataChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyDataChanged(System::Windows::Ink::PropertyDataChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" />입니다.</param>
        <summary>
          <see cref="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" /> 이벤트를 발생시킵니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이벤트가 발생하면 대리자를 통해 이벤트 처리기가 호출됩니다.  
  
 또한 <xref:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged%2A> 메서드를 사용하면 파생 클래스가 대리자를 연결하지 않고도 이벤트를 처리할 수 있습니다. 이 이벤트를 처리 하는 기본 방법입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" />가 <see langword="null" />인 경우</exception>
        <block subset="none" type="overrides">
          <para>재정의 하는 경우 <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> 파생된 클래스에서 호출 된 <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> 하려면 등록 된 대리자가 이벤트를 받도록 기본 클래스에 대 한 메서드.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Equality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (first As DrawingAttributes, second As DrawingAttributes) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Ink::DrawingAttributes ^ first, System::Windows::Ink::DrawingAttributes ^ second);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">비교할 첫 번째 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체입니다.</param>
        <param name="second">비교할 두 번째 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체입니다.</param>
        <summary>지정한 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체가 동일한지 여부를 확인합니다.</summary>
        <returns>
          개체가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 개체는 다음 속성이 같은지:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  <xref:System.Windows.Ink.DrawingAttributes.op_Equality%2A> 메서드 같음에 대 한 사용자 지정 속성을 확인 하지 않습니다.  
  
 이 연산자는 해당 하는 방법은 <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>합니다.  
  
## Examples  
 다음 예제에서는 두 개의 비교 <xref:System.Windows.Ink.DrawingAttributes> 같음에 대 한 개체입니다. 때문에 <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, 및 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 속성에 `attributes1` 및 `attributes2` "DrawingAttributes 같은지" 메시지가 표시 됩니다는 동일한 값으로 설정 됩니다.  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#11](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#11)]
[!code-vb[DrawingAttributes#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Inequality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (first As DrawingAttributes, second As DrawingAttributes) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Ink::DrawingAttributes ^ first, System::Windows::Ink::DrawingAttributes ^ second);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">비교할 첫 번째 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체입니다.</param>
        <param name="second">비교할 두 번째 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체입니다.</param>
        <summary>지정한 두 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체가 동일하지 않은지 여부를 확인합니다.</summary>
        <returns>
          개체가 동일하지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 개체가 다르면 다음과 같은 속성이 동일 하면:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  <xref:System.Windows.Ink.DrawingAttributes.op_Inequality%2A> 메서드 같음에 대 한 사용자 지정 속성을 확인 하지 않습니다.  
  
 이 연산자에 대해 해당 하는 방법은의 부정을 <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>합니다.  
  
## Examples  
 다음 예제에서는 두 개의 비교 <xref:System.Windows.Ink.DrawingAttributes> 개체가 다른 지 비교 합니다. 때문에 <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, 및 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 속성에 `attributes1` 및 `attributes2` "DrawingAttributes 같은지" 메시지가 표시 됩니다는 동일한 값으로 설정 됩니다.  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#13](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#13)]
[!code-vb[DrawingAttributes#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDataChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event PropertyDataChanged As PropertyDataChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Ink::PropertyDataChangedEventHandler ^ PropertyDataChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>속성 데이터가 <see cref="T:System.Windows.Ink.StrokeCollection" />에서 추가되거나 제거될 때 발생합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제는 3 차원 효과 그릴 수 있는 사용자 지정 스트로크의 일부입니다. 정의 하 고 라는 사용자 지정 속성을 저장 하는 선을 `Shadowed`에 속한 <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A>합니다. 경우는 `Shadowed` 속성 변경 내용을 <xref:System.Windows.Ink.DrawingAttributes.PropertyDataChanged> 이벤트 처리기 호출의 <xref:System.Windows.Ink.Stroke.OnInvalidated%2A> 다시 그릴 선 메서드에 합니다.  
  
 [!code-csharp[StrokeCollectionShadow#1](~/samples/snippets/csharp/VS_Snippets_Wpf/StrokeCollectionShadow/CSharp/CustomRenderedStroke.cs#1)]
 [!code-vb[StrokeCollectionShadow#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StrokeCollectionShadow/VisualBasic/CustomRenderedStroke.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyData">
      <MemberSignature Language="C#" Value="public void RemovePropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemovePropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.RemovePropertyData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemovePropertyData (propertyDataId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemovePropertyData(Guid propertyDataId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">제거할 사용자 지정 속성과 연결된 <see cref="T:System.Guid" />입니다.</param>
        <summary>지정한 <see cref="T:System.Guid" />와 연결된 사용자 지정 속성을 제거합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서 사용자 지정 속성을 제거 하는 방법을 보여 줍니다는 <xref:System.Windows.Ink.DrawingAttributes> 개체입니다.  
  
 [!code-csharp[DrawingAttributes#9](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#9)]
 [!code-vb[DrawingAttributes#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />가 <see cref="T:System.Windows.Ink.DrawingAttributes" /> 개체의 사용자 지정 속성과 연결되지 않은 경우</exception>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="StylusTip">
      <MemberSignature Language="C#" Value="public System.Windows.Ink.StylusTip StylusTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Ink.StylusTip StylusTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTip" />
      <MemberSignature Language="VB.NET" Value="Public Property StylusTip As StylusTip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Ink::StylusTip StylusTip { System::Windows::Ink::StylusTip get(); void set(System::Windows::Ink::StylusTip value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.StylusTip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.Stroke" />를 그리는 데 사용된 스타일러스의 모양을 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Ink.StylusShape" /> 값 중 하나입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_StylusTip"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 속성은 일반적으로 XAML에서 사용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하 여 <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A> 속성입니다. 이 예제에서는 가정 응용 프로그램에 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`와 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 라는 개체 `inkDA` 및 `highlighterDA`합니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Ink.DrawingAttributes> 클래스 개요입니다.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusTipTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Matrix StylusTipTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix StylusTipTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property StylusTipTransform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Matrix StylusTipTransform { System::Windows::Media::Matrix get(); void set(System::Windows::Media::Matrix value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>스타일러스의 끝에서 수행할 변환을 지정하는 <see cref="T:System.Windows.Media.Matrix" />를 가져오거나 설정합니다.</summary>
        <value>스타일러스의 끝에서 수행할 변환을 지정하는 <see cref="T:System.Windows.Media.Matrix" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> 속성을 회전 기울이거나 스타일러스 팁의 크기를 조정 합니다.  
  
<a name="xamlTextUsage_StylusTipTransform"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 속성은 일반적으로 XAML에서 사용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하 여 <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> 속성입니다. 이 예제에서는 가정 응용 프로그램에 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`와 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 라는 개체 `inkDA` 및 `highlighterDA`합니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Ink.DrawingAttributes> 클래스 개요입니다.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" />으로 설정된 매트릭스가 반전할 수 있는 매트릭스가 아닌 경우  
  
 또는  
  
 매트릭스의 <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 또는 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 속성이 0이 아닌 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Ink.Stroke" />를 그리는 데 사용된 스타일러스의 너비를 가져오거나 설정합니다.</summary>
        <value>
          <see cref="T:System.Windows.Ink.Stroke" />를 그리는 데 사용된 스타일러스의 너비입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 요인의 너비와 높이 영향을 줄는 <xref:System.Windows.Ink.Stroke> 렌더링할 때 있지만 값이 아니라는 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 속성입니다.  
  
-   스타일러스 적용할 압력을 때의 <xref:System.Windows.Ink.Stroke> 그려집니다.  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> 속성 값  
  
 설정 하는 경우는 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 속성 0를 장치 독립적 픽셀 (DIP)를 2 DIP로 변경 됩니다.  
  
<a name="xamlTextUsage_Width"></a>   
## <a name="xaml-text-usage"></a>XAML 텍스트 사용  
 이 속성은 일반적으로 XAML에서 사용 되지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 설정 하 여 <xref:System.Windows.Ink.DrawingAttributes.Width%2A> 속성입니다. 이 예제에서는 가정 응용 프로그램에 <xref:System.Windows.Controls.InkCanvas> 호출 `inkCanvas1`와 두 개의 <xref:System.Windows.Ink.DrawingAttributes> 라는 개체 `inkDA` 및 `highlighterDA`합니다. 전체 예제를 참조 하십시오.는 <xref:System.Windows.Ink.DrawingAttributes> 클래스 개요입니다.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> 속성이 <see cref="F:System.Double.Epsilon" /> 또는 <see cref="F:System.Double.NaN" />보다 작은 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>