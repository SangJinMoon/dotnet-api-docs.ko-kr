<Type Name="RootDesignerSerializerAttribute" FullName="System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="86eb547d7dba90c252698b143e61764dab6e1834" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36708566" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RootDesignerSerializerAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RootDesignerSerializerAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RootDesignerSerializerAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class RootDesignerSerializerAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type RootDesignerSerializerAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=true, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("This attribute has been deprecated. Use DesignerSerializerAttribute instead.  For example, to specify a root designer for CodeDom, use DesignerSerializerAttribute(...,typeof(TypeCodeDomSerializer)).  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="64bb0-101">루트 디자이너 개체에 대해 사용할 기본 serializer를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="64bb0-101">Indicates the base serializer to use for a root designer object.</span>
      </span>
      <span data-ttu-id="64bb0-102">이 클래스는 상속될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="64bb0-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64bb0-103"><xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute> 디자인 문서를 serialize 하는 serialization 관리자 및 지정된 된 serializer의 첫 번째 없이 디자인 문서 자동 다시 로드를 지원 하는지 여부를 사용 하 여 serializer를 나타내는 문서를 완전히 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-103"><xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute> indicates the serializer to use when the serialization manager serializes the design document, and whether the specified serializer supports automatic reloading of the design document without first completely disposing of the document.</span></span>  
  
 <span data-ttu-id="64bb0-104">이 특성에 다음과 같은 중요 한 멤버가 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-104">This attribute contains the following significant members:</span></span>  
  
-   <span data-ttu-id="64bb0-105"><xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName%2A> 디자인 타임에 클래스를 serialize 하는 데 어떤 직렬화 개체를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-105"><xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName%2A> indicates what serialization object to use to serialize the class at design time.</span></span>  
  
-   <span data-ttu-id="64bb0-106"><xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName%2A> serialization 개체의 기본 형식의 정규화 된 이름을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-106"><xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName%2A> indicates the fully qualified name of the serialization object's base type.</span></span>  
  
-   <span data-ttu-id="64bb0-107"><xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A> serializer를 새 디자이너 보기를 열려면 사용자 상호 작용 없이 디자인 문서를 다시 로드를 지원 하는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-107"><xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A> indicates whether the serializer supports reloading a design document without user interaction to open a new designer view.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="64bb0-108">다음 예제 코드에 적용 되는 <xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute> 구성 요소에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-108">The following example code applies a <xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute> to a component.</span></span>  
  
 [!code-cpp[IDesignerSerializationManagerSample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IDesignerSerializationManagerSample/CPP/idesignerserializationmanagersample.cpp#2)]
 [!code-csharp[IDesignerSerializationManagerSample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IDesignerSerializationManagerSample/CS/idesignerserializationmanagersample.cs#2)]
 [!code-vb[IDesignerSerializationManagerSample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IDesignerSerializationManagerSample/VB/idesignerserializationmanagersample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="64bb0-109">지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-109">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> class using the specified attributes.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RootDesignerSerializerAttribute (string serializerTypeName, string baseSerializerTypeName, bool reloadable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string serializerTypeName, string baseSerializerTypeName, bool reloadable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serializerTypeName As String, baseSerializerTypeName As String, reloadable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RootDesignerSerializerAttribute(System::String ^ serializerTypeName, System::String ^ baseSerializerTypeName, bool reloadable);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute : string * string * bool -&gt; System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" Usage="new System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute (serializerTypeName, baseSerializerTypeName, reloadable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializerTypeName" Type="System.String" />
        <Parameter Name="baseSerializerTypeName" Type="System.String" />
        <Parameter Name="reloadable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serializerTypeName">
          <span data-ttu-id="64bb0-110">serializer의 데이터 형식의 정규화된 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-110">The fully qualified name of the data type of the serializer.</span>
          </span>
        </param>
        <param name="baseSerializerTypeName">
          <span data-ttu-id="64bb0-111">serializer 기본 형식의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-111">The name of the base type of the serializer.</span>
          </span>
          <span data-ttu-id="64bb0-112">serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-112">A class can include multiple serializers as they all have different base types.</span>
          </span>
        </param>
        <param name="reloadable">
          <span data-ttu-id="64bb0-113">이 serializer가 문서의 동적 재로딩을 지원하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-113">
              <see langword="true" /> if this serializer supports dynamic reloading of the document; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64bb0-114">지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-114">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> class using the specified attributes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64bb0-115">새로운 디자이너 serialization 특성을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-115">Creates a new designer serialization attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RootDesignerSerializerAttribute (string serializerTypeName, Type baseSerializerType, bool reloadable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string serializerTypeName, class System.Type baseSerializerType, bool reloadable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serializerTypeName As String, baseSerializerType As Type, reloadable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RootDesignerSerializerAttribute(System::String ^ serializerTypeName, Type ^ baseSerializerType, bool reloadable);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute : string * Type * bool -&gt; System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" Usage="new System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute (serializerTypeName, baseSerializerType, reloadable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializerTypeName" Type="System.String" />
        <Parameter Name="baseSerializerType" Type="System.Type" />
        <Parameter Name="reloadable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serializerTypeName">
          <span data-ttu-id="64bb0-116">serializer의 데이터 형식의 정규화된 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-116">The fully qualified name of the data type of the serializer.</span>
          </span>
        </param>
        <param name="baseSerializerType">
          <span data-ttu-id="64bb0-117">serializer 기본 형식의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-117">The name of the base type of the serializer.</span>
          </span>
          <span data-ttu-id="64bb0-118">serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-118">A class can include multiple serializers, as they all have different base types.</span>
          </span>
        </param>
        <param name="reloadable">
          <span data-ttu-id="64bb0-119">이 serializer가 문서의 동적 재로딩을 지원하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-119">
              <see langword="true" /> if this serializer supports dynamic reloading of the document; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64bb0-120">지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-120">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> class using the specified attributes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64bb0-121">새로운 디자이너 serialization 특성을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-121">Creates a new designer serialization attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RootDesignerSerializerAttribute (Type serializerType, Type baseSerializerType, bool reloadable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type serializerType, class System.Type baseSerializerType, bool reloadable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serializerType As Type, baseSerializerType As Type, reloadable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RootDesignerSerializerAttribute(Type ^ serializerType, Type ^ baseSerializerType, bool reloadable);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute : Type * Type * bool -&gt; System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" Usage="new System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute (serializerType, baseSerializerType, reloadable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serializerType" Type="System.Type" />
        <Parameter Name="baseSerializerType" Type="System.Type" />
        <Parameter Name="reloadable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="serializerType">
          <span data-ttu-id="64bb0-122">serializer의 데이터 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-122">The data type of the serializer.</span>
          </span>
        </param>
        <param name="baseSerializerType">
          <span data-ttu-id="64bb0-123">serializer의 기본 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-123">The base type of the serializer.</span>
          </span>
          <span data-ttu-id="64bb0-124">serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-124">A class can include multiple serializers as they all have different base types.</span>
          </span>
        </param>
        <param name="reloadable">
          <span data-ttu-id="64bb0-125">이 serializer가 문서의 동적 재로딩을 지원하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-125">
              <see langword="true" /> if this serializer supports dynamic reloading of the document; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64bb0-126">지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-126">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> class using the specified attributes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64bb0-127">새로운 디자이너 serialization 특성을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-127">Creates a new designer serialization attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reloadable">
      <MemberSignature Language="C#" Value="public bool Reloadable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Reloadable" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Reloadable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Reloadable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Reloadable : bool" Usage="System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="64bb0-128">루트 serializer가 디자이너 호스트를 먼저 삭제하지 않고 디자인 문서의 재로딩을 지원하는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-128">Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="64bb0-129">루트 serializer가 재로딩을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-129">
              <see langword="true" /> if the root serializer supports reloading; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64bb0-130">이 속성은로 설정 하는 경우 `false`, 디자인 문서에서 사용자를 대신 하 여 다시 로드를 자동으로 수행 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-130">If this property is set to `false`, the design document does not automatically perform a reload on behalf of the user.</span></span> <span data-ttu-id="64bb0-131">이 속성은로 설정 하는 경우 `false`, 것은 사용자의 책임 디자인 문서에 대 한 디자이너 뷰 창을 다시 열려면를 업데이트 또는 재로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-131">If this property is set to `false`, it is the user's responsibility to reopen the designer view window for the design document, if an update or reload is desired.</span></span>  
  
 <span data-ttu-id="64bb0-132">일부 serializer는 디자이너 디자인 문서를 다시 작성 하기 위해 로드 프로세스의에서 외부 구성 요소와의 상호 작용이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-132">Some serializers require the interaction of external components in the designer loading process in order to rebuild the design document.</span></span> <span data-ttu-id="64bb0-133">이러한 serializer 디자인 문서를 로드 될 때마다 새 디자이너 호스트를 만들도록 해야 경우도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-133">These serializers sometimes need to create a new designer host each time the design document is loaded.</span></span> <span data-ttu-id="64bb0-134">이 경우 <xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A> 로 설정 됩니다 `false`, 디자이너 호스트를 다시 생성 해야 합니다 (문서에 대 한 디자이너 시작) 사용자 인터페이스를 디자인 한 후에 의해 문서가 삭제 되 합니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-134">If this is the situation, <xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A> will be set to `false`, and the designer host must be recreated by user interaction (launching the designer for the document) after the design document is disposed.</span></span> <span data-ttu-id="64bb0-135">이벤트 및 deserialization을 통해 제외 하 고 디자이너 호스트에 연결 된 서비스 상태로 유지 되지 않습니다 및 다시 설정 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-135">The events and services that were connected to the designer host, except through deserialization, do not remain and may need to be set again.</span></span> <span data-ttu-id="64bb0-136">경우 <xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A> 은 `true`, 디자이너 밖에 서 변경 된 후 코드와 디자이너 창을 닫고 다시 열면 없이 디자인 문서 다시 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-136">If <xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A> is `true`, the design document can be reloaded after changes outside the designer are made to the code, without closing the designer window and reopening it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializerBaseTypeName">
      <MemberSignature Language="C#" Value="public string SerializerBaseTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SerializerBaseTypeName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SerializerBaseTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SerializerBaseTypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SerializerBaseTypeName : string" Usage="System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="64bb0-137">serializer의 기본 형식의 정규화된 형식 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-137">Gets the fully qualified type name of the base type of the serializer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="64bb0-138">serializer 기본 형식의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-138">The name of the base type of the serializer.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializerTypeName">
      <MemberSignature Language="C#" Value="public string SerializerTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SerializerTypeName" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SerializerTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SerializerTypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SerializerTypeName : string" Usage="System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="64bb0-139">serializer의 정규화된 형식 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-139">Gets the fully qualified type name of the serializer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="64bb0-140">serializer 형식의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-140">The name of the type of the serializer.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeId">
      <MemberSignature Language="C#" Value="public override object TypeId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TypeId" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TypeId As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ TypeId { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeId : obj" Usage="System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="64bb0-141">이 특성 형식의 고유 ID를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-141">Gets a unique ID for this attribute type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="64bb0-142">이 특성 형식의 고유 ID가 포함된 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="64bb0-142">An object containing a unique ID for this attribute type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64bb0-143">이 속성은 동일한 형식이 두 가지 특성을 식별 필터링 알고리즘에서 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-143">This property is used by filtering algorithms to identify two attributes that are the same type.</span></span> <span data-ttu-id="64bb0-144">대부분의 특성에 대 한이 반환 된 <xref:System.Type> 특성에 대 한 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="64bb0-144">For most attributes, this just returns the <xref:System.Type> instance for the attribute.</span></span> <span data-ttu-id="64bb0-145"><xref:System.ComponentModel.EditorAttribute> 편집기 기본 형식 유형을 포함 하려면이 옵션을 재정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="64bb0-145"><xref:System.ComponentModel.EditorAttribute> overrides this to include the type of the editor base type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>