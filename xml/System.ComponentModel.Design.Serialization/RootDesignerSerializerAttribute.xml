<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RootDesignerSerializerAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f707606a0075d1dc28d159b7409d67e9949f556f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f707606a0075d1dc28d159b7409d67e9949f556f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
          <source>Indicates the base serializer to use for a root designer object.</source>
          <target state="translated">루트 디자이너 개체에 대해 사용할 기본 serializer를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&gt;</ph> indicates the serializer to use when the serialization manager serializes the design document, and whether the specified serializer supports automatic reloading of the design document without first completely disposing of the document.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&gt;</ph> 디자인 문서를 serialize 하는 serialization 관리자 및 지정된 된 serializer의 첫 번째 없이 디자인 문서 자동 다시 로드를 지원 하는지 여부를 사용 하 여 serializer를 나타내는 문서를 완전히 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
          <source>This attribute contains the following significant members:</source>
          <target state="translated">이 특성에 다음과 같은 중요 한 멤버가 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName%2A&gt;</ph> indicates what serialization object to use to serialize the class at design time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName%2A&gt;</ph> 디자인 타임에 클래스를 serialize 하는 데 어떤 직렬화 개체를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName%2A&gt;</ph> indicates the fully qualified name of the serialization object's base type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName%2A&gt;</ph> serialization 개체의 기본 형식의 정규화 된 이름을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A&gt;</ph> indicates whether the serializer supports reloading a design document without user interaction to open a new designer view.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A&gt;</ph> serializer를 새 디자이너 보기를 열려면 사용자 상호 작용 없이 디자인 문서를 다시 로드를 지원 하는지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
          <source>The following example code applies a <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&gt;</ph> to a component.</source>
          <target state="translated">다음 예제 코드에 적용 되는 <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&gt;</ph> 구성 요소에 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /&gt;</ph> class using the specified attributes.</source>
          <target state="translated">지정된 특성을 사용하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
          <source>The fully qualified name of the data type of the serializer.</source>
          <target state="translated">serializer의 데이터 형식의 정규화된 이름입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
          <source>The name of the base type of the serializer.</source>
          <target state="translated">serializer 기본 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
          <source>A class can include multiple serializers as they all have different base types.</source>
          <target state="translated">serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this serializer supports dynamic reloading of the document; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 serializer가 문서의 동적 재로딩을 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /&gt;</ph> class using the specified attributes.</source>
          <target state="translated">지정된 특성을 사용하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
          <source>Creates a new designer serialization attribute.</source>
          <target state="translated">새로운 디자이너 serialization 특성을 만듭니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
          <source>The fully qualified name of the data type of the serializer.</source>
          <target state="translated">serializer의 데이터 형식의 정규화된 이름입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
          <source>The name of the base type of the serializer.</source>
          <target state="translated">serializer 기본 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
          <source>A class can include multiple serializers, as they all have different base types.</source>
          <target state="translated">serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this serializer supports dynamic reloading of the document; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 serializer가 문서의 동적 재로딩을 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /&gt;</ph> class using the specified attributes.</source>
          <target state="translated">지정된 특성을 사용하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
          <source>Creates a new designer serialization attribute.</source>
          <target state="translated">새로운 디자이너 serialization 특성을 만듭니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
          <source>The data type of the serializer.</source>
          <target state="translated">serializer의 데이터 형식입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
          <source>The base type of the serializer.</source>
          <target state="translated">serializer의 기본 형식입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
          <source>A class can include multiple serializers as they all have different base types.</source>
          <target state="translated">serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this serializer supports dynamic reloading of the document; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">이 serializer가 문서의 동적 재로딩을 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /&gt;</ph> class using the specified attributes.</source>
          <target state="translated">지정된 특성을 사용하는 <ph id="ph1">&lt;see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
          <source>Creates a new designer serialization attribute.</source>
          <target state="translated">새로운 디자이너 serialization 특성을 만듭니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
          <source>Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.</source>
          <target state="translated">루트 serializer가 디자이너 호스트를 먼저 삭제하지 않고 디자인 문서의 재로딩을 지원하는지 여부를 나타내는 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the root serializer supports reloading; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">루트 serializer가 재로딩을 지원하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
          <source>If this property is set to <ph id="ph1">`false`</ph>, the design document does not automatically perform a reload on behalf of the user.</source>
          <target state="translated">이 속성은로 설정 하는 경우 <ph id="ph1">`false`</ph>, 디자인 문서에서 사용자를 대신 하 여 다시 로드를 자동으로 수행 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
          <source>If this property is set to <ph id="ph1">`false`</ph>, it is the user's responsibility to reopen the designer view window for the design document, if an update or reload is desired.</source>
          <target state="translated">이 속성은로 설정 하는 경우 <ph id="ph1">`false`</ph>, 것은 사용자의 책임 디자인 문서에 대 한 디자이너 뷰 창을 다시 열려면를 업데이트 또는 재로드 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
          <source>Some serializers require the interaction of external components in the designer loading process in order to rebuild the design document.</source>
          <target state="translated">일부 serializer는 디자이너 디자인 문서를 다시 작성 하기 위해 로드 프로세스의에서 외부 구성 요소와의 상호 작용이 필요 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
          <source>These serializers sometimes need to create a new designer host each time the design document is loaded.</source>
          <target state="translated">이러한 serializer 디자인 문서를 로드 될 때마다 새 디자이너 호스트를 만들도록 해야 경우도 있습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
          <source>If this is the situation, <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A&gt;</ph> will be set to <ph id="ph2">`false`</ph>, and the designer host must be recreated by user interaction (launching the designer for the document) after the design document is disposed.</source>
          <target state="translated">이 경우 <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A&gt;</ph> 로 설정 됩니다 <ph id="ph2">`false`</ph>, 디자이너 호스트를 다시 생성 해야 합니다 (문서에 대 한 디자이너 시작) 사용자 인터페이스를 디자인 한 후에 의해 문서가 삭제 되 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
          <source>The events and services that were connected to the designer host, except through deserialization, do not remain and may need to be set again.</source>
          <target state="translated">이벤트 및 deserialization을 통해 제외 하 고 디자이너 호스트에 연결 된 서비스 상태로 유지 되지 않습니다 및 다시 설정 해야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
          <source>If <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the design document can be reloaded after changes outside the designer are made to the code, without closing the designer window and reopening it.</source>
          <target state="translated">경우 <ph id="ph1">&lt;xref:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable%2A&gt;</ph> 은 <ph id="ph2">`true`</ph>, 디자이너 밖에 서 변경 된 후 코드와 디자이너 창을 닫고 다시 열면 없이 디자인 문서 다시 로드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
          <source>Gets the fully qualified type name of the base type of the serializer.</source>
          <target state="translated">serializer의 기본 형식의 정규화된 형식 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
          <source>The name of the base type of the serializer.</source>
          <target state="translated">serializer 기본 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
          <source>Gets the fully qualified type name of the serializer.</source>
          <target state="translated">serializer의 정규화된 형식 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
          <source>The name of the type of the serializer.</source>
          <target state="translated">serializer 형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
          <source>Gets a unique ID for this attribute type.</source>
          <target state="translated">이 특성 형식의 고유 ID를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
          <source>An object containing a unique ID for this attribute type.</source>
          <target state="translated">이 특성 형식의 고유 ID가 포함된 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
          <source>This property is used by filtering algorithms to identify two attributes that are the same type.</source>
          <target state="translated">이 속성은 동일한 형식이 두 가지 특성을 식별 필터링 알고리즘에서 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
          <source>For most attributes, this just returns the <ph id="ph1">&lt;xref:System.Type&gt;</ph> instance for the attribute.</source>
          <target state="translated">대부분의 특성에 대 한이 반환 된 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 특성에 대 한 인스턴스.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.EditorAttribute&gt;</ph> overrides this to include the type of the editor base type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.EditorAttribute&gt;</ph> 편집기 기본 형식 유형을 포함 하려면이 옵션을 재정의 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>