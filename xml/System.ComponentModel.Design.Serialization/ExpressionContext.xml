<Type Name="ExpressionContext" FullName="System.ComponentModel.Design.Serialization.ExpressionContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a2ca7b317b30c6fa872391c069c662acc1805c00" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37698359" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ExpressionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExpressionContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.ExpressionContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExpressionContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionContext sealed" />
  <TypeSignature Language="F#" Value="type ExpressionContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="93d57-101">serializer 간에 컨텍스트 상태를 전달하는 수단을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="93d57-101">Provides a means of passing context state among serializers.</span>
      </span>
      <span data-ttu-id="93d57-102">이 클래스는 상속될 수 없습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="93d57-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d57-103"><xref:System.ComponentModel.Design.Serialization.ExpressionContext> 컨텍스트 스택에 배치 되 고 직렬화 하는 동안 가장 관련성이 높은 식을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-103">An <xref:System.ComponentModel.Design.Serialization.ExpressionContext> is placed on the context stack and contains the most relevant expression during serialization.</span></span> <span data-ttu-id="93d57-104">다음 C# 코드를 할당 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-104">The following C# code demonstrates an assignment.</span></span>  
  
```csharp  
button1.Text = "Hello";  
```  
  
 <span data-ttu-id="93d57-105">직렬화 중에 여러 직렬 변환기는이 단일 문으로 생성을 담당 합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-105">During serialization, several serializers are responsible for creating this single statement.</span></span> <span data-ttu-id="93d57-106">이러한 serializer 중 하나는 "Hello" 생성을 담당 합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-106">One of those serializers is responsible for creating "Hello".</span></span> <span data-ttu-id="93d57-107">해당 serializer는가 생성 되 고 해당 식 컨텍스트를 알 해야 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-107">There are times when that serializer may need to know the context in which it is creating its expression.</span></span> <span data-ttu-id="93d57-108">이 컨텍스트는 이전 예제에서는 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-108">In the previous example, this context is not needed.</span></span> <span data-ttu-id="93d57-109">다음 C# 코드 컨텍스트에 대 한 지식이 필요한 인 경우를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-109">The following C# code shows a situation in which knowledge of the context is necessary.</span></span>  
  
```csharp  
button1.Text = rm.GetString("button1_Text");  
```  
  
 <span data-ttu-id="93d57-110">이 경우 리소스 식이 생성을 담당 하는 serializer 대상 개체의 이름에 숙지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-110">In this case, the serializer responsible for creating the resource expression needs to be informed of the names of the target objects.</span></span> <span data-ttu-id="93d57-111"><xref:System.ComponentModel.Design.Serialization.ExpressionContext> 이 클래스를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-111">The <xref:System.ComponentModel.Design.Serialization.ExpressionContext> class can be used for this.</span></span> <span data-ttu-id="93d57-112">각 serializer 식을 작성 하 고 전체적으로 문의 작은 부분을 처리 하는 serializer를 호출, serializer 식 컨텍스트를 컨텍스트 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-112">As each serializer creates an expression and invokes a serializer to handle a smaller part of the statement as a whole, the serializer pushes an expression context on the context stack.</span></span> <span data-ttu-id="93d57-113">각 식 컨텍스트를 스택의 다음 식 컨텍스트를 찾는 부모 속성을 있습니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-113">Each expression context has a parent property that locates the next expression context on the stack.</span></span> <span data-ttu-id="93d57-114">편리한 순회 기능을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-114">This provides a convenient traversal capability.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.CodeDom.CodeExpression" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="93d57-115">
            <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-115">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.ExpressionContext : System.CodeDom.CodeExpression * Type * obj -&gt; System.ComponentModel.Design.Serialization.ExpressionContext" Usage="new System.ComponentModel.Design.Serialization.ExpressionContext (expression, expressionType, owner)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="93d57-116">지정된 코드 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-116">The given code expression.</span>
          </span>
        </param>
        <param name="expressionType">
          <span data-ttu-id="93d57-117">지정된 코드 식 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-117">The given code expression type.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="93d57-118">지정된 코드 식 소유자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-118">The given code expression owner.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="93d57-119">지정된 식 및 소유자를 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-119">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> class with the given expression and owner.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d57-120">
            <paramref name="expression" />, <paramref name="expressionType" /> 또는 <paramref name="owner" />가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-120">
              <paramref name="expression" />, <paramref name="expressionType" />, or <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner, object presetValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object, presetValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner, System::Object ^ presetValue);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Design.Serialization.ExpressionContext : System.CodeDom.CodeExpression * Type * obj * obj -&gt; System.ComponentModel.Design.Serialization.ExpressionContext" Usage="new System.ComponentModel.Design.Serialization.ExpressionContext (expression, expressionType, owner, presetValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
        <Parameter Name="presetValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="93d57-121">지정된 코드 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-121">The given code expression.</span>
          </span>
        </param>
        <param name="expressionType">
          <span data-ttu-id="93d57-122">지정된 코드 식 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-122">The given code expression type.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="93d57-123">지정된 코드 식 소유자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-123">The given code expression owner.</span>
          </span>
        </param>
        <param name="presetValue">
          <span data-ttu-id="93d57-124">지정된 코드 식 기본 설정 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-124">The given code expression preset value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="93d57-125">현재 값을 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> 클래스의 새 인스턴스를 초기화합니다</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-125">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> class with a current value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="93d57-126">
            <paramref name="expression" />, <paramref name="expressionType" /> 또는 <paramref name="owner" />가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-126">
              <paramref name="expression" />, <paramref name="expressionType" />, or <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Expression" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Expression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Expression { System::CodeDom::CodeExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Expression : System.CodeDom.CodeExpression" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="93d57-127">이 컨텍스트가 나타내는 식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-127">Gets the expression this context represents.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="93d57-128">이 컨텍스트가 나타내는 식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-128">The expression this context represents.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionType">
      <MemberSignature Language="C#" Value="public Type ExpressionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ExpressionType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ExpressionType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionType : Type" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="93d57-129">식의 <see cref="T:System.Type" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-129">Gets the <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="93d57-130">식의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-130">The <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d57-131">사용할 수 있습니다 <xref:System.ComponentModel.Design.Serialization.ExpressionContext> 캐스트 식에 할당 하는 경우 필요한 경우를 확인할입니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-131">You can use <xref:System.ComponentModel.Design.Serialization.ExpressionContext> to determine if a cast is needed when assigning to the expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public object Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Owner { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : obj" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="93d57-132">이 식을 소유하는 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-132">Gets the object owning this expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="93d57-133">이 식을 소유하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-133">The object owning this expression.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d57-134">식에 대 한 속성 참조 이면 합니다 <xref:System.Windows.Forms.Control.Text%2A> 인스턴스의 속성 <xref:System.Windows.Forms.Button> 호출 `button1`, <xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A> 반환 `button1`.</span><span class="sxs-lookup"><span data-stu-id="93d57-134">If the expression is a property reference to the <xref:System.Windows.Forms.Control.Text%2A> property of an instance of <xref:System.Windows.Forms.Button> called `button1`, <xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A> returns `button1`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="PresetValue">
      <MemberSignature Language="C#" Value="public object PresetValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PresetValue" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PresetValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PresetValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PresetValue : obj" Usage="System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="93d57-135">식의 미리 설정된 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-135">Gets the preset value of an expression.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="93d57-136">이 식의 미리 설정된 값이거나, 할당된 값이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="93d57-136">The preset value of this expression, or <see langword="null" /> if not assigned.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="93d57-137">하나 있어야 합니다. 식의 미리 설정 된 값을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-137">Contains the preset value of an expression, should one exist.</span></span> <span data-ttu-id="93d57-138">예를 들어 식이 참조 하는 속성 참조 식을 <xref:System.Windows.Forms.Control.Controls%2A> 의 속성을 <xref:System.Windows.Forms.Button>, <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> 속성의 인스턴스를 포함 합니다 <xref:System.Windows.Forms.Control.Controls%2A> 속성.</span><span class="sxs-lookup"><span data-stu-id="93d57-138">For example, if the expression is a property reference expression referring to the <xref:System.Windows.Forms.Control.Controls%2A> property of a <xref:System.Windows.Forms.Button>, the <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> property contains the instance of the <xref:System.Windows.Forms.Control.Controls%2A> property.</span></span> <span data-ttu-id="93d57-139">속성이 읽기 전용이 고 값을 포함 하도록 개체에 의해 미리 설정 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-139">This is because the property is read-only and preset by the object to contain a value.</span></span> <span data-ttu-id="93d57-140">반면, 같은 속성을 <xref:System.Windows.Forms.Control.Text%2A> 또는 <xref:System.Windows.Forms.Control.Visible%2A> 미리 설정 된 값이 없는 있어 합니다 <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> 속성에서 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-140">On the other hand, a property such as <xref:System.Windows.Forms.Control.Text%2A> or <xref:System.Windows.Forms.Control.Visible%2A> does not have a preset value and therefore the <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> property returns `null`.</span></span>  
  
 <span data-ttu-id="93d57-141">다음 C# 코드는 serializer가이 정보를 사용 하 여 serialization 과정을 안내 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-141">The following C# code shows how serializers can use this information to guide serialization.</span></span>  
  
```csharp  
Padding p = new Padding();  
p.Left = 5;  
button1.Padding = p;  
  
button1.Padding.Left = 5;  
```  
  
 <span data-ttu-id="93d57-142">직렬 변환기는 <xref:System.Windows.Forms.Padding> 구조 첫 번째 또는 두 번째 폼을 생성 해야 하는 경우 알림을 받지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-142">The serializer of the <xref:System.Windows.Forms.Padding> structure needs to be informed if it should generate the first or second form.</span></span> <span data-ttu-id="93d57-143">첫 번째 폼은 기본적으로 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-143">The first form is generated by default.</span></span> <span data-ttu-id="93d57-144">두 번째 형태는 없는 경우에 생성 됩니다는 <xref:System.ComponentModel.Design.Serialization.ExpressionContext> 포함 하는 컨텍스트 스택에 <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> 의 값과 같은 <xref:System.Windows.Forms.Padding> 현재 직렬화 중인 합니다.</span><span class="sxs-lookup"><span data-stu-id="93d57-144">The second form is only generated if there is an <xref:System.ComponentModel.Design.Serialization.ExpressionContext> on the context stack that contains a <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> equal to the value of the <xref:System.Windows.Forms.Padding> currently being serialized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>