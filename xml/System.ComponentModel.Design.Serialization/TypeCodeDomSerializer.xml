<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ee5e5-101">개체를 새 형식으로 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-101">Serializes an object to a new type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee5e5-102"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> 와 동일한 작업을 수행 하는 클래스는 <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, 하지만 새 형식 정의이 클래스를 통해 개체를 직렬화 하는 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-102">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> class performs the same tasks as a <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, but serializing an object through this class defines a new type.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ee5e5-103"><see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-103">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="ee5e5-104">serialization에 사용할 serialization 관리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-104">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="ee5e5-105">serialization에 사용할 형식 선언입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-105">Type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="ee5e5-106">지정된 형식 선언을 deserialize합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-106">Deserializes the given type declaration.</span></span></summary>
        <returns><span data-ttu-id="ee5e5-107">루트 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-107">The root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee5e5-108"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> 메서드 이전에 직렬화 된 코드 형식 선언을 deserialize 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-108">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method deserializes a previously serialized code type declaration.</span></span> <span data-ttu-id="ee5e5-109">다음 표에서 작업 수행 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-109">The following table shows the tasks default implementation performs.</span></span>  
  
|<span data-ttu-id="ee5e5-110">작업</span><span class="sxs-lookup"><span data-stu-id="ee5e5-110">Task</span></span>|<span data-ttu-id="ee5e5-111">설명</span><span class="sxs-lookup"><span data-stu-id="ee5e5-111">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="ee5e5-112">대/소문자 확인</span><span class="sxs-lookup"><span data-stu-id="ee5e5-112">Case Sensitivity Checks</span></span>|<span data-ttu-id="ee5e5-113">구현에 대 한 검색는 <xref:System.CodeDom.Compiler.CodeDomProvider> 대/소문자 구분 또는 대/소문자 구분 멤버를 처리 하는 경우를 결정 하는 서비스입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-113">The implementation searches for a <xref:System.CodeDom.Compiler.CodeDomProvider> service to decide if it should treat members as case sensitive or case insensitive.</span></span>|  
|<span data-ttu-id="ee5e5-114">문 정렬</span><span class="sxs-lookup"><span data-stu-id="ee5e5-114">Statement Sorting</span></span>|<span data-ttu-id="ee5e5-115">모든 멤버 변수와 init 메서드의 지역 변수는 테이블에 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-115">All member variables and local variables from init methods are stored in a table.</span></span> <span data-ttu-id="ee5e5-116">그런 다음 각 문에 init 메서드의 해당 변수에 할당 하거나 특정 변수에서 작동 하는 모든 문을 그룹화 되어 있으므로 왼쪽 부분에 따라 그룹화 된 문 컬렉션에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-116">Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</span></span> <span data-ttu-id="ee5e5-117">문이 없는 변수는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-117">Variables that have no statements are discarded.</span></span>|  
|<span data-ttu-id="ee5e5-118">Deserialization</span><span class="sxs-lookup"><span data-stu-id="ee5e5-118">Deserialization</span></span>|<span data-ttu-id="ee5e5-119">각 변수에 대 한 문의 컬렉션 변수에 따라 deserialize 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-119">The statement collections for each variable are deserialized according to the variable.</span></span>|  
  
 <span data-ttu-id="ee5e5-120">다음 표에서 서비스는 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> 메서드에 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-120">The following table shows the services the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method requires.</span></span>  
  
|<span data-ttu-id="ee5e5-121">서비스</span><span class="sxs-lookup"><span data-stu-id="ee5e5-121">Service</span></span>|<span data-ttu-id="ee5e5-122">설명</span><span class="sxs-lookup"><span data-stu-id="ee5e5-122">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|<span data-ttu-id="ee5e5-123">반드시 수행할 필요를 서비스에 사용 가능한 경우 하는 데을 결정 하는 경우 직렬화 대/소문자 구분 또는 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-123">While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="ee5e5-124">개체 역직렬화에 대 한 쿼리 하는 동안 이름 테이블에 존재 하지 않는 경우 <xref:System.ComponentModel.IContainer> 이루어집니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-124">If an object does not exist in the name table during deserialization, a query for <xref:System.ComponentModel.IContainer> is made.</span></span> <span data-ttu-id="ee5e5-125">이 쿼리가 성공 하면 컨테이너 개체에 대해 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-125">If this query succeeds, the container is checked for the object.</span></span> <span data-ttu-id="ee5e5-126">컨테이너 구성 요소에 필요한 모든 컨테이너 인수에 대해 되기도 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-126">The container is also used as a stand-in for any container argument needed by components.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ee5e5-127"><paramref name="manager" /> 또는 <paramref name="typeDecl" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ee5e5-127"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="ee5e5-128">serialization에 사용할 serialization 관리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-128">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="ee5e5-129">Serialization에 사용할 형식 선언입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-129">The type declaration to use for serialization.</span></span></param>
        <param name="value"><span data-ttu-id="ee5e5-130">serialization에 사용할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-130">The value to use for serialization.</span></span></param>
        <summary><span data-ttu-id="ee5e5-131">멤버 serialize에 사용되는 문을 저장하는 메서드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-131">Returns the method where statements used to serialize a member are stored.</span></span></summary>
        <returns><span data-ttu-id="ee5e5-132">지정된 멤버의 모든 초기화 코드를 내보내는 데 사용되는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-132">The method used to emit all of the initialization code for the given member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee5e5-133"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> 메서드를 지정된 된 멤버에 대 한 모든 초기화 코드를 내보내는 메서드를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-133">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> method returns the method to emit all of the initialization code for the given member.</span></span> <span data-ttu-id="ee5e5-134">기본 구현에서는 빈 생성자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-134">The default implementation returns an empty constructor.</span></span> <span data-ttu-id="ee5e5-135">동일한 메서드가 여러 값에 대해 반환 될 경우 동일한 인스턴스 메서드가 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-135">If the same method is to be returned for multiple values, the same instance of the method should be returned.</span></span> <span data-ttu-id="ee5e5-136">사용할 수는 <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> 만든 메서드를 기억 하는 사전입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-136">You can use the <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dictionary to remember methods you have created.</span></span> <span data-ttu-id="ee5e5-137">`typeDecl` 인프라 방법을 추가 하기 위해 매개 변수에 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-137">The `typeDecl` parameter can also be used to add infrastructure methods.</span></span> <span data-ttu-id="ee5e5-138">예를 들어 각 개체에 대 한 별도 메서드를 생성 하려는 경우에 이러한 모든 메서드를 차례로 호출 하는 단일 메서드가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-138">For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</span></span> <span data-ttu-id="ee5e5-139">이 메서드는 필요에 따라 코드 형식 선언에 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-139">This method can be added to the code type declaration as needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ee5e5-140"><paramref name="manager" />, <paramref name="typeDecl" /> 또는 <paramref name="value" />가 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-140"><paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="ee5e5-141">serialization에 사용할 serialization 관리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-141">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="ee5e5-142">Serialization에 사용할 형식 선언입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-142">The type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="ee5e5-143">deserialization을 수행하는 동안 해석될 메서드 배열을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-143">Returns an array of methods to be interpreted during deserialization.</span></span></summary>
        <returns><span data-ttu-id="ee5e5-144">deserialization을 수행하는 동안 해석될 메서드의 <see cref="T:System.CodeDom.CodeMemberMethod" /> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-144">A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during deserialization.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee5e5-145">기본 구현은 생성자로 단일 요소 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-145">The default implementation returns a single-element array with the constructor in it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ee5e5-146"><paramref name="manager" /> 또는 <paramref name="typeDecl" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ee5e5-146"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="ee5e5-147">serialization에 사용할 serialization 관리자입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-147">The serialization manager to use for serialization.</span></span></param>
        <param name="root"><span data-ttu-id="ee5e5-148">serialize할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-148">The object to serialize.</span></span></param>
        <param name="members"><span data-ttu-id="ee5e5-149">멤버의 선택적 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-149">Optional collection of members.</span></span> <span data-ttu-id="ee5e5-150"><see langword="null" />이거나 비어 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-150">Can be <see langword="null" /> or empty.</span></span></param>
        <summary><span data-ttu-id="ee5e5-151">루트를 정의하는 새로운 형식 선언을 만들어 개체 루트를 serialize합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-151">Serializes the object root by creating a new type declaration that defines root.</span></span></summary>
        <returns><span data-ttu-id="ee5e5-152">루트 개체를 정의하는 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-152">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ee5e5-153"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 메서드는 지정 된 루트 개체와 새 형식 정의 만들 수 있는 멤버의 선택적 컬렉션을 직렬화 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-153">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method serializes the given root object and optional collection of members to create a new type definition.</span></span> <span data-ttu-id="ee5e5-154">경우는 `members` 값을 포함 하는 컬렉션, 이러한 값은 직렬화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-154">If the `members` collection contains values, these values are serialized.</span></span> <span data-ttu-id="ee5e5-155">값 자체 멤버 변수 또는 지역 변수에로 직렬화 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-155">Values themselves may serialize as either member variables or local variables.</span></span> <span data-ttu-id="ee5e5-156">호출 된 개체에 확장 속성을 검색 하 여 수행 됩니다이 결정 `GenerateMember`합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-156">This determination is done by searching for an extender property on the object called `GenerateMember`.</span></span> <span data-ttu-id="ee5e5-157">경우 `true`, 멤버가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-157">If `true`, a member is generated.</span></span> <span data-ttu-id="ee5e5-158">그렇지 않으면 지역 변수가 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-158">Otherwise, a local variable is generated.</span></span> <span data-ttu-id="ee5e5-159">편의 위해는 `members` 컬렉션 루트 개체를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-159">For convenience, the `members` collection can contain the root object.</span></span> <span data-ttu-id="ee5e5-160">이 경우 멤버 또는 지역 변수 루트 개체도 추가 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-160">In this case, the root object is not also added as a member or local variable.</span></span>  
  
 <span data-ttu-id="ee5e5-161">명명된 된 개체 인 경우 루트 개체의 이름에서 반환 된 형식의 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-161">The name of the returned type is taken from the root object’s name, if it was a named object.</span></span> <span data-ttu-id="ee5e5-162">그렇지 않은 경우 이름을 루트 클래스의 단순 형식 이름에서 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-162">If not, a name is fabricated from the simple type name of the root class.</span></span>  
  
 <span data-ttu-id="ee5e5-163">다음 표에의 기본 구현에서 수행 하는 작업은 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-163">The following table shows the tasks performed by the default implementation of the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method.</span></span>  
  
|<span data-ttu-id="ee5e5-164">작업</span><span class="sxs-lookup"><span data-stu-id="ee5e5-164">Task</span></span>|<span data-ttu-id="ee5e5-165">설명</span><span class="sxs-lookup"><span data-stu-id="ee5e5-165">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="ee5e5-166">컨텍스트 시드</span><span class="sxs-lookup"><span data-stu-id="ee5e5-166">Context Seeding</span></span>|<span data-ttu-id="ee5e5-167">Serialization 컨텍스트 데이터를 포함 하 여 초기화 됩니다는 <xref:System.ComponentModel.Design.Serialization.RootContext> 및 <xref:System.CodeDom.CodeTypeDeclaration></span><span class="sxs-lookup"><span data-stu-id="ee5e5-167">The serialization context is initialized with data including the <xref:System.ComponentModel.Design.Serialization.RootContext> and <xref:System.CodeDom.CodeTypeDeclaration></span></span>|  
|<span data-ttu-id="ee5e5-168">멤버 직렬화</span><span class="sxs-lookup"><span data-stu-id="ee5e5-168">Member Serialization</span></span>|<span data-ttu-id="ee5e5-169">그런 다음, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 모든 멤버와 호출 안내 <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-169">Next, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> walks all of the members and calls <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span></span> <span data-ttu-id="ee5e5-170">Serialization에 선택적 수행 되기 때문에 <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, 이렇게 하면 serialization 두 번 수행 되지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-170">Because serialization is done opportunistically in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, this ensures that serialization is not done twice.</span></span>|  
|<span data-ttu-id="ee5e5-171">루트 Serialization</span><span class="sxs-lookup"><span data-stu-id="ee5e5-171">Root Serialization</span></span>|<span data-ttu-id="ee5e5-172">다음으로, 루트 개체 직렬화 되 고 해당 문이 문 컬렉션에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-172">Next, the root object is serialized and its statements are added to the statement collection.</span></span>|  
|<span data-ttu-id="ee5e5-173">문 통합</span><span class="sxs-lookup"><span data-stu-id="ee5e5-173">Statement Integration</span></span>|<span data-ttu-id="ee5e5-174">모든 개체는 직렬화 후의 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 메서드 문을 정렬 하 여에서 반환 하는 방법에 추가 합니다. <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-174">After all objects are serialized, the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method orders the statements and adds them to a method returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span> <span data-ttu-id="ee5e5-175">모든에서 반환 된 메서드를 호출 하는 생성자가 마지막으로, 만들어집니다 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-175">Finally, a constructor is fabricated that calls all of the methods returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span>|  
  
-  
  
 <span data-ttu-id="ee5e5-176">다음 표에서 개체는 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 메서드 컨텍스트 스택에 배치 합니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-176">The following table shows the objects the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method places on the context stack.</span></span>  
  
|<span data-ttu-id="ee5e5-177">인스턴스</span><span class="sxs-lookup"><span data-stu-id="ee5e5-177">Instance</span></span>|<span data-ttu-id="ee5e5-178">설명</span><span class="sxs-lookup"><span data-stu-id="ee5e5-178">Description</span></span>|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|<span data-ttu-id="ee5e5-179">이 직렬 변환기입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-179">This serializer.</span></span> <span data-ttu-id="ee5e5-180">클래스를 파생 유용한 경우가이 클래스에 공용 속성을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-180">Deriving classes may find it useful to add public properties to this class.</span></span>|  
|<xref:System.CodeDom.CodeTypeDeclaration>|<span data-ttu-id="ee5e5-181">만들 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-181">The type being created.</span></span> <span data-ttu-id="ee5e5-182">대부분의 개체에이에 대 한 직접 액세스를 사용할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ee5e5-182">Most objects do not need direct access to this.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ee5e5-183"><paramref name="manager" /> 또는 <paramref name="root" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ee5e5-183"><paramref name="manager" /> or <paramref name="root" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
  </Members>
</Type>