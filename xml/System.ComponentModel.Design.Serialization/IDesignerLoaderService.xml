<Type Name="IDesignerLoaderService" FullName="System.ComponentModel.Design.Serialization.IDesignerLoaderService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="91be6fb648bf803bf38fa96e6ee194581f86547f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37698561" /></Metadata><TypeSignature Language="C#" Value="public interface IDesignerLoaderService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerLoaderService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerLoaderService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerLoaderService" />
  <TypeSignature Language="F#" Value="type IDesignerLoaderService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="76cc0-101">외부 구성 요소의 비동기 로딩을 지원하도록 디자이너 로더를 확장시킬 수 있는 인터페이스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-101">Provides an interface that can extend a designer loader to support asynchronous loading of external components.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76cc0-102">A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> 외부 구성 요소를 포함 하는 디자이너 로드를 관리 하기 위해이 인터페이스를 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-102">A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components.</span></span> <span data-ttu-id="76cc0-103">이 인터페이스를 호출 하 여 디자인 화면을 다시 로드할 수 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>.</span><span class="sxs-lookup"><span data-stu-id="76cc0-103">This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>.</span></span> <span data-ttu-id="76cc0-104">디자이너 로더가 비동기 로드에 대 한 지원이 필요로 하지 않는 경우이 인터페이스를 구현할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-104">A designer loader does not have to implement this interface if it does not require support for asynchronous loading.</span></span>  
  
 <span data-ttu-id="76cc0-105">디자이너의 사용자 지정 구현을 사용 하 여 로드 된 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> 는 여러 가지 방식으로 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-105">Designer loading using a custom implementation of the <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> can occur in a variety of ways.</span></span> <span data-ttu-id="76cc0-106">경우에 따라 외부 구성 요소가 로딩 프로세스에 관련.</span><span class="sxs-lookup"><span data-stu-id="76cc0-106">Sometimes external components are involved in the loading process.</span></span> <span data-ttu-id="76cc0-107">외부 종속성이 있는 로드를 위해, 디자이너 로더 서비스 인터페이스 로딩 완료 시점과 완료 되었음을 알리기 위해 로드의 각 부분을 결정 하는 메커니즘을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-107">To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed.</span></span> <span data-ttu-id="76cc0-108"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> 일반적으로 남아 있는 로드 종속성의 수를 추적 하는 카운터를 테스트 하 여 로드가 완료 되는 시기를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-108">The <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining.</span></span> <span data-ttu-id="76cc0-109">로드의 각 부분을 완료 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> 호출 되 고 서비스 감소 시킵니다 카운터.</span><span class="sxs-lookup"><span data-stu-id="76cc0-109">When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter.</span></span> <span data-ttu-id="76cc0-110">종속 로드 프로세스의 수를 설정 하려면 호출 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> 를 호출 하는 각 로드 프로세스당 한 번에 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> 로드가 완료 되었을 때.</span><span class="sxs-lookup"><span data-stu-id="76cc0-110">To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete.</span></span> <span data-ttu-id="76cc0-111">마지막 로드가 완료 되 면, 서비스를 호출 하 여 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> 로더 호스트에.</span><span class="sxs-lookup"><span data-stu-id="76cc0-111">When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddLoadDependency">
      <MemberSignature Language="C#" Value="public void AddLoadDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLoadDependency() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLoadDependency ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLoadDependency();" />
      <MemberSignature Language="F#" Value="abstract member AddLoadDependency : unit -&gt; unit" Usage="iDesignerLoaderService.AddLoadDependency " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="76cc0-112">이 인터페이스가 관리한 로드 프로세스의 일부로 외부 구성 요소를 등록합니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-112">Registers an external component as part of the load process managed by this interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76cc0-113">호출 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> 로드 프로세스에 참여 하는 각 외부 개체에 대해 한 번씩.</span><span class="sxs-lookup"><span data-stu-id="76cc0-113">Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each external object participating in the load process.</span></span> <span data-ttu-id="76cc0-114"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> 로드 프로세스 작업이 완료 되 면 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-114"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependentLoadComplete">
      <MemberSignature Language="C#" Value="public void DependentLoadComplete (bool successful, System.Collections.ICollection errorCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DependentLoadComplete(bool successful, class System.Collections.ICollection errorCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DependentLoadComplete (successful As Boolean, errorCollection As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DependentLoadComplete(bool successful, System::Collections::ICollection ^ errorCollection);" />
      <MemberSignature Language="F#" Value="abstract member DependentLoadComplete : bool * System.Collections.ICollection -&gt; unit" Usage="iDesignerLoaderService.DependentLoadComplete (successful, errorCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="successful" Type="System.Boolean" />
        <Parameter Name="errorCollection" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="successful"><span data-ttu-id="76cc0-115">디자이너의 로드가 성공적이면 <see langword="true" />이고, 오류 때문에 로드를 끝내지 못하면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-115"><see langword="true" /> if the load of the designer is successful; <see langword="false" /> if errors prevented the load from finishing.</span></span></param>
        <param name="errorCollection"><span data-ttu-id="76cc0-116">로딩하는 동안 오류가 발생한 경우 발생한 오류의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-116">A collection of errors that occurred during the load, if any.</span></span> <span data-ttu-id="76cc0-117">오류가 발생하지 않으면 빈 컬렉션이나 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-117">If no errors occurred, pass either an empty collection or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="76cc0-118">종속 로드가 종료되었음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-118">Signals that a dependent load has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76cc0-119">이 메서드는 종속 로드 작업이 완료 되었음을 알리기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-119">This method is called to signal that a dependent loading operation has completed.</span></span> <span data-ttu-id="76cc0-120">호출 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> 를 호출 하 여 등록 된 모든 프로세스에 대해 한 번 <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, 이미 완료입니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-120">Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.</span></span>  
  
 <span data-ttu-id="76cc0-121">경우 종속 로드가 성공 하면 호출자에 게 집합을 `successful` 매개 변수를 `true` 빈 컬렉션을 전달 또는 `null` 에 `errorCollection` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-121">If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter.</span></span> <span data-ttu-id="76cc0-122">종속 로드 오류가 발생 하는 경우 호출자에 게 설정 합니다 `successful` 매개 변수를 `false` 실패 한 이유를 나타내는 예외 컬렉션을 전달 합니다 `errorCollection` 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="76cc0-122">If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public bool Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload" />
      <MemberSignature Language="VB.NET" Value="Public Function Reload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reload();" />
      <MemberSignature Language="F#" Value="abstract member Reload : unit -&gt; bool" Usage="iDesignerLoaderService.Reload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="76cc0-123">디자인 문서를 다시 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-123">Reloads the design document.</span></span></summary>
        <returns><span data-ttu-id="76cc0-124">다시 로드 요청이 받아들여지면 <see langword="true" />이고, 로더가 다시 로드를 허용하지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-124"><see langword="true" /> if the reload request is accepted, or <see langword="false" /> if the loader does not allow the reload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="76cc0-125">모든 개체 로더가 다시 로드 디자인 문서를 요청 하려면이 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-125">Any object can call this method to request that the loader reload the design document.</span></span> <span data-ttu-id="76cc0-126">디자이너 로더를 반환할 수 있습니다 하는 경우 로더 재 로딩을 지원 하 고 다시 로드를 사용 하 여 준수, `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-126">If the loader supports reloading and complies with the reload, the designer loader can return `true`.</span></span> <span data-ttu-id="76cc0-127">그러지 않으면 반환 `false`를 나타내는 다시 로드가 발생 하지 것입니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-127">Otherwise, it returns `false`, indicating that the reload will not occur.</span></span> <span data-ttu-id="76cc0-128">호출자는 다시 로드가 발생 하는 즉시 사용할 수 없게 디자이너 로더는이 다른 시간으로 예약할 수 또는 한 번에 다시 로드 하려면 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-128">Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.</span></span>  
  
 <span data-ttu-id="76cc0-129">디자이너를 다시 로드할 수 없는 경우 호출자에 게 사용자에 게 메시지를 표시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="76cc0-129">The caller can display a message to the user if the designer cannot be reloaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>